// Generated by dart2js (NullSafetyMode.sound, trust primitives, omit checks, lax runtime type, no-legacy-javascript, csp), the Dart to JavaScript compiler version: 2.17.0-104.0.dev.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key))
        to[key] = from[key];
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == "function")
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazyOld(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        A.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel)
        holder[name] = initializer();
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel)
          A.throwLateFieldADI(name);
        holder[name] = value;
      }
      var finalValue = holder[name];
      holder[getterName] = function() {
        return finalValue;
      };
      return finalValue;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(receiver, this);
    } : function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(this, null);
    };
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number")
      funType += typesOffset;
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, lazyOld: lazyOld, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var A = {
    detectBrowserEngineByVendorAgent(vendor, agent) {
      var exp;
      if (vendor === "Google Inc.") {
        exp = A.RegExp_RegExp("SAMSUNG|SGH-[I|N|T]|GT-[I|N]|SM-[A|N|P|T|Z]|SHV-E|SCH-[I|J|R|S]|SPH-L", true);
        if (exp._nativeRegExp.test(agent.toUpperCase()))
          return B.BrowserEngine_5;
        return B.BrowserEngine_0;
      } else if (vendor === "Apple Computer, Inc.")
        return B.BrowserEngine_1;
      else if (B.JSString_methods.contains$1(agent, "edge/"))
        return B.BrowserEngine_3;
      else if (B.JSString_methods.contains$1(agent, "Edg/"))
        return B.BrowserEngine_0;
      else if (B.JSString_methods.contains$1(agent, "trident/7.0"))
        return B.BrowserEngine_4;
      else if (vendor === "" && B.JSString_methods.contains$1(agent, "firefox"))
        return B.BrowserEngine_2;
      A.print("WARNING: failed to detect current browser engine.");
      return B.BrowserEngine_6;
    },
    detectOperatingSystem() {
      var userAgent, maxTouchPoints,
        t1 = window.navigator.platform;
      t1.toString;
      userAgent = window.navigator.userAgent;
      if (B.JSString_methods.startsWith$1(t1, "Mac")) {
        maxTouchPoints = window.navigator.maxTouchPoints;
        if ((maxTouchPoints == null ? 0 : maxTouchPoints) > 2)
          return B.OperatingSystem_0;
        return B.OperatingSystem_4;
      } else if (B.JSString_methods.contains$1(t1.toLowerCase(), "iphone") || B.JSString_methods.contains$1(t1.toLowerCase(), "ipad") || B.JSString_methods.contains$1(t1.toLowerCase(), "ipod"))
        return B.OperatingSystem_0;
      else if (B.JSString_methods.contains$1(userAgent, "Android"))
        return B.OperatingSystem_1;
      else if (B.JSString_methods.startsWith$1(t1, "Linux"))
        return B.OperatingSystem_2;
      else if (B.JSString_methods.startsWith$1(t1, "Win"))
        return B.OperatingSystem_3;
      else
        return B.OperatingSystem_5;
    },
    isIOS15() {
      var t1 = $.$get$_operatingSystem();
      return t1 === B.OperatingSystem_0 && B.JSString_methods.contains$1(window.navigator.userAgent, "OS 15_");
    },
    _detectWebGLVersion() {
      var t1,
        canvas = A.CanvasElement_CanvasElement(1, 1);
      if (B.CanvasElement_methods.getContext$1(canvas, "webgl2") != null) {
        t1 = $.$get$_operatingSystem();
        if (t1 === B.OperatingSystem_0)
          return 1;
        return 2;
      }
      if (B.CanvasElement_methods.getContext$1(canvas, "webgl") != null)
        return 1;
      return -1;
    },
    canvasKit() {
      return $.__canvasKit._readField$0();
    },
    toSkM44FromFloat32(matrix4) {
      var r, t1, c,
        skM44 = new Float32Array(16);
      for (r = 0; r < 4; ++r)
        for (t1 = r * 4, c = 0; c < 4; ++c)
          skM44[c * 4 + r] = matrix4[t1 + c];
      return skM44;
    },
    toSkMatrixFromFloat32(matrix4) {
      var i, matrix4Index,
        skMatrix = new Float32Array(9);
      for (i = 0; i < 9; ++i) {
        matrix4Index = B.List_yXZ[i];
        if (matrix4Index < 16)
          skMatrix[i] = matrix4[matrix4Index];
        else
          skMatrix[i] = 0;
      }
      return skMatrix;
    },
    toSkPoint(offset) {
      var point = new Float32Array(2);
      point[0] = offset._dx;
      point[1] = offset._dy;
      return point;
    },
    toSkColorStops(colorStops) {
      var skColorStops, i;
      if (colorStops == null)
        return $.$get$_kDefaultSkColorStops();
      skColorStops = new Float32Array(4);
      for (i = 0; i < 4; ++i)
        skColorStops[i] = colorStops[i];
      return skColorStops;
    },
    _populateSkColor(skColor, color) {
      var array = J.toTypedArray$0$x(skColor),
        t1 = color.value;
      array[0] = (t1 >>> 16 & 255) / 255;
      array[1] = (t1 >>> 8 & 255) / 255;
      array[2] = (t1 & 255) / 255;
      array[3] = (t1 >>> 24 & 255) / 255;
      return array;
    },
    toSkRect(rect) {
      var skRect = new Float32Array(4);
      skRect[0] = rect.left;
      skRect[1] = rect.top;
      skRect[2] = rect.right;
      skRect[3] = rect.bottom;
      return skRect;
    },
    fromSkRect(skRect) {
      return new A.Rect(skRect[0], skRect[1], skRect[2], skRect[3]);
    },
    toSkRRect(rrect) {
      var skRRect = new Float32Array(12);
      skRRect[0] = rrect.left;
      skRRect[1] = rrect.top;
      skRRect[2] = rrect.right;
      skRRect[3] = rrect.bottom;
      skRRect[4] = rrect.tlRadiusX;
      skRRect[5] = rrect.tlRadiusY;
      skRRect[6] = rrect.trRadiusX;
      skRRect[7] = rrect.trRadiusY;
      skRRect[8] = rrect.brRadiusX;
      skRRect[9] = rrect.brRadiusY;
      skRRect[10] = rrect.blRadiusX;
      skRRect[11] = rrect.blRadiusY;
      return skRRect;
    },
    toFlatColors(colors) {
      var i,
        len = colors.length,
        result = new Uint32Array(len);
      for (i = 0; i < len; ++i)
        result[i] = colors[i].value;
      return result;
    },
    SkParagraphStyleProperties$(receiver) {
      return new A.SkParagraphStyleProperties();
    },
    SkTextStyleProperties$(receiver) {
      return new A.SkTextStyleProperties();
    },
    SkStrutStyleProperties$(receiver) {
      return new A.SkStrutStyleProperties();
    },
    SkFontStyle$(receiver) {
      return new A.SkFontStyle();
    },
    ProductionCollector$() {
      var t1 = new A.ProductionCollector(A._setArrayType([], type$.JSArray_SkDeletable));
      t1.ProductionCollector$0();
      return t1;
    },
    patchCanvasKitModule(canvasKitScript) {
      var _s14_ = "defineProperty",
        t1 = $.$get$_context(),
        objectConstructor = type$.JsFunction._as(t1.$index(0, "Object"));
      if (t1.$index(0, "exports") == null)
        objectConstructor.callMethod$2(_s14_, [t1, "exports", A.JsObject_JsObject$jsify(A.LinkedHashMap_LinkedHashMap$_literal(["get", A.allowInterop(new A.patchCanvasKitModule_closure(canvasKitScript, objectConstructor)), "set", A.allowInterop(new A.patchCanvasKitModule_closure0()), "configurable", true], type$.String, type$.dynamic))]);
      if (t1.$index(0, "module") == null)
        objectConstructor.callMethod$2(_s14_, [t1, "module", A.JsObject_JsObject$jsify(A.LinkedHashMap_LinkedHashMap$_literal(["get", A.allowInterop(new A.patchCanvasKitModule_closure1(canvasKitScript, objectConstructor)), "set", A.allowInterop(new A.patchCanvasKitModule_closure2()), "configurable", true], type$.String, type$.dynamic))]);
      document.head.appendChild(canvasKitScript);
    },
    diffViewList(active, next) {
      var index, i, t1, t2, _null = null;
      if (active.length === 0 || next.length === 0)
        return _null;
      index = B.JSArray_methods.indexOf$1(active, B.JSArray_methods.get$first(next));
      if (index !== -1) {
        for (i = 0; t1 = i + index, t1 < active.length; ++i) {
          if (!J.$eq$(active[t1], next[i]))
            return _null;
          if (i === next.length - 1)
            if (index === 0)
              return new A.ViewListDiffResult(B.JSArray_methods.sublist$1(active, i + 1), B.List_empty8, true, B.JSArray_methods.get$first(next));
            else
              return new A.ViewListDiffResult(B.JSArray_methods.sublist$2(active, 0, index), B.List_empty8, false, _null);
        }
        return new A.ViewListDiffResult(B.JSArray_methods.sublist$2(active, 0, index), B.JSArray_methods.sublist$1(next, active.length - index), false, _null);
      }
      index = B.JSArray_methods.lastIndexOf$1(active, B.JSArray_methods.get$last(next));
      if (index !== -1) {
        for (i = 0; t1 = index - i, t1 >= 0; ++i) {
          t2 = next.length;
          if (t2 <= i || !J.$eq$(active[t1], next[t2 - 1 - i]))
            return _null;
        }
        return new A.ViewListDiffResult(B.JSArray_methods.sublist$1(active, index + 1), B.JSArray_methods.sublist$2(next, 0, next.length - index - 1), true, B.JSArray_methods.get$first(active));
      }
      return _null;
    },
    FontFallbackData_createNotoFontTree() {
      var t2, _i, font, t3, t4, _i0, range,
        t1 = type$.NotoFont,
        ranges = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.List_CodeunitRange);
      for (t2 = $.$get$_notoFonts(), _i = 0; _i < 25; ++_i) {
        font = t2[_i];
        font._decodingCompleter = font.resolvedFont = null;
        for (t3 = font.approximateUnicodeRanges, t4 = t3.length, _i0 = 0; _i0 < t3.length; t3.length === t4 || (0, A.throwConcurrentModificationError)(t3), ++_i0) {
          range = t3[_i0];
          J.add$1$ax(ranges.putIfAbsent$2(0, font, new A.FontFallbackData_createNotoFontTree_closure()), range);
        }
      }
      return A.IntervalTree_IntervalTree$createFromRanges(ranges, t1);
    },
    findFontsForMissingCodeunits(codeUnits) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        t3, t4, t5, _i, codeUnit, results, unmatchedCodeUnits, resolvedFonts, t6, t7, t1, fonts, t2, coveredCodeUnits, missingCodeUnits;
      var $async$findFontsForMissingCodeunits = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$FontFallbackData__instance();
              fonts = A.LinkedHashSet_LinkedHashSet$_empty(type$.NotoFont);
              t2 = type$.int;
              coveredCodeUnits = A.LinkedHashSet_LinkedHashSet$_empty(t2);
              missingCodeUnits = A.LinkedHashSet_LinkedHashSet$_empty(t2);
              for (t3 = codeUnits.length, t4 = t1.notoTree, t5 = t4.$ti._eval$1("JSArray<1>"), t4 = t4.root, _i = 0; _i < codeUnits.length; codeUnits.length === t3 || (0, A.throwConcurrentModificationError)(codeUnits), ++_i) {
                codeUnit = codeUnits[_i];
                results = A._setArrayType([], t5);
                t4.searchForPoint$2(codeUnit, results);
                fonts.addAll$1(0, results);
                if (results.length !== 0)
                  coveredCodeUnits.add$1(0, codeUnit);
                else
                  missingCodeUnits.add$1(0, codeUnit);
              }
              t3 = A._LinkedHashSetIterator$(fonts, fonts._collection$_modifications), t4 = A._instanceType(t3)._precomputed1;
            case 2:
              // for condition
              if (!t3.moveNext$0()) {
                // goto after for
                $async$goto = 3;
                break;
              }
              t5 = t3._collection$_current;
              $async$goto = 4;
              return A._asyncAwait((t5 == null ? t4._as(t5) : t5).ensureResolved$0(), $async$findFontsForMissingCodeunits);
            case 4:
              // returning from await.
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              unmatchedCodeUnits = A.LinkedHashSet_LinkedHashSet$from(coveredCodeUnits, t2);
              fonts = A.findMinimumFontsForCodeUnits(unmatchedCodeUnits, fonts);
              resolvedFonts = A.LinkedHashSet_LinkedHashSet$_empty(type$._ResolvedNotoSubset);
              for (t2 = A._LinkedHashSetIterator$(coveredCodeUnits, coveredCodeUnits._collection$_modifications), t3 = A._instanceType(t2)._precomputed1; t2.moveNext$0();) {
                t4 = t2._collection$_current;
                if (t4 == null)
                  t4 = t3._as(t4);
                for (t5 = new A._LinkedHashSetIterator(fonts, fonts._collection$_modifications), t5._collection$_cell = fonts._collection$_first, t6 = A._instanceType(t5)._precomputed1; t5.moveNext$0();) {
                  t7 = t5._collection$_current;
                  t7 = (t7 == null ? t6._as(t7) : t7).resolvedFont;
                  if (t7 == null)
                    continue;
                  t7 = t7.tree;
                  results = A._setArrayType([], t7.$ti._eval$1("JSArray<1>"));
                  t7.root.searchForPoint$2(t4, results);
                  resolvedFonts.addAll$1(0, results);
                }
              }
              t2 = $.$get$notoDownloadQueue();
              resolvedFonts.forEach$1(0, t2.get$add(t2));
              if (missingCodeUnits._collection$_length !== 0 || unmatchedCodeUnits._collection$_length !== 0)
                if (!t1.registeredSymbolsAndEmoji)
                  A._registerSymbolsAndEmoji();
                else {
                  t2 = $.$get$notoDownloadQueue();
                  if (!(t2.pendingSubsets._length !== 0 || t2._fontsLoading != null)) {
                    $.$get$printWarning().call$1("Could not find a set of Noto fonts to display all missing characters. Please add a font asset for the missing characters. See: https://flutter.dev/docs/cookbook/design/fonts");
                    t1.codeUnitsWithNoKnownFont.addAll$1(0, missingCodeUnits);
                  }
                }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$findFontsForMissingCodeunits, $async$completer);
    },
    _makeResolvedNotoFontFromCss(css, $name) {
      var t1, t2, fontFaceUnicodeRanges, fontFaceUrl, resolvingFontFace, t3, urlStart, rawRanges, _i, startEnd, rangeValue, startRange, endRange, rangesMap, subset, t4, _i0, range, _null = null,
        _s34_ = "Unable to parse Google Fonts CSS: ",
        subsets = A._setArrayType([], type$.JSArray__ResolvedNotoSubset);
      for (t1 = new A._SyncStarIterator(A.LineSplitter_split(css)._outerHelper()), t2 = type$.JSArray_CodeunitRange, fontFaceUnicodeRanges = _null, fontFaceUrl = fontFaceUnicodeRanges, resolvingFontFace = false; t1.moveNext$0();) {
        t3 = t1.get$current(t1);
        if (!resolvingFontFace) {
          if (t3 !== "@font-face {")
            continue;
          resolvingFontFace = true;
        } else if (B.JSString_methods.startsWith$1(t3, "  src:")) {
          urlStart = B.JSString_methods.indexOf$1(t3, "url(");
          if (urlStart === -1) {
            $.$get$printWarning().call$1("Unable to resolve Noto font URL: " + t3);
            return _null;
          }
          fontFaceUrl = B.JSString_methods.substring$2(t3, urlStart + 4, B.JSString_methods.indexOf$1(t3, ")"));
          resolvingFontFace = true;
        } else if (B.JSString_methods.startsWith$1(t3, "  unicode-range:")) {
          fontFaceUnicodeRanges = A._setArrayType([], t2);
          rawRanges = B.JSString_methods.substring$2(t3, 17, t3.length - 1).split(", ");
          for (t3 = rawRanges.length, _i = 0; _i < t3; ++_i) {
            startEnd = J.split$1$s(rawRanges[_i], "-");
            if (startEnd.length === 1) {
              rangeValue = A.int_parse(B.JSString_methods.substring$1(B.JSArray_methods.get$single(startEnd), 2), 16);
              fontFaceUnicodeRanges.push(new A.CodeunitRange(rangeValue, rangeValue));
            } else {
              startRange = startEnd[0];
              endRange = startEnd[1];
              fontFaceUnicodeRanges.push(new A.CodeunitRange(A.int_parse(B.JSString_methods.substring$1(startRange, 2), 16), A.int_parse(endRange, 16)));
            }
          }
          resolvingFontFace = true;
        } else {
          if (t3 === "}") {
            if (fontFaceUrl == null || fontFaceUnicodeRanges == null) {
              $.$get$printWarning().call$1(_s34_ + css);
              return _null;
            }
            subsets.push(new A._ResolvedNotoSubset(fontFaceUrl, $name, fontFaceUnicodeRanges));
          } else
            continue;
          resolvingFontFace = false;
        }
      }
      if (resolvingFontFace) {
        $.$get$printWarning().call$1(_s34_ + css);
        return _null;
      }
      t1 = type$._ResolvedNotoSubset;
      rangesMap = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.List_CodeunitRange);
      for (t2 = subsets.length, _i = 0; _i < subsets.length; subsets.length === t2 || (0, A.throwConcurrentModificationError)(subsets), ++_i) {
        subset = subsets[_i];
        for (t3 = subset.ranges, t4 = t3.length, _i0 = 0; _i0 < t3.length; t3.length === t4 || (0, A.throwConcurrentModificationError)(t3), ++_i0) {
          range = t3[_i0];
          J.add$1$ax(rangesMap.putIfAbsent$2(0, subset, new A._makeResolvedNotoFontFromCss_closure()), range);
        }
      }
      if (rangesMap._length === 0) {
        $.$get$printWarning().call$1("Parsed Google Fonts CSS was empty: " + css);
        return _null;
      }
      return new A._ResolvedNotoFont($name, A.IntervalTree_IntervalTree$createFromRanges(rangesMap, t1));
    },
    _registerSymbolsAndEmoji() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, emojiCss, symbolsCss, emojiFontUrl, symbolsFontUrl, t1;
      var $async$_registerSymbolsAndEmoji = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$FontFallbackData__instance();
              if (t1.registeredSymbolsAndEmoji) {
                // goto return
                $async$goto = 1;
                break;
              }
              t1.registeredSymbolsAndEmoji = true;
              $async$goto = 3;
              return A._asyncAwait($.$get$notoDownloadQueue().downloader.downloadAsString$1("https://fonts.googleapis.com/css2?family=Noto+Color+Emoji+Compat"), $async$_registerSymbolsAndEmoji);
            case 3:
              // returning from await.
              emojiCss = $async$result;
              $async$goto = 4;
              return A._asyncAwait($.$get$notoDownloadQueue().downloader.downloadAsString$1("https://fonts.googleapis.com/css2?family=Noto+Sans+Symbols"), $async$_registerSymbolsAndEmoji);
            case 4:
              // returning from await.
              symbolsCss = $async$result;
              t1 = new A._registerSymbolsAndEmoji_extractUrlFromCss();
              emojiFontUrl = t1.call$1(emojiCss);
              symbolsFontUrl = t1.call$1(symbolsCss);
              if (emojiFontUrl != null)
                $.$get$notoDownloadQueue().add$1(0, new A._ResolvedNotoSubset(emojiFontUrl, "Noto Color Emoji Compat", B.List_empty1));
              else
                $.$get$printWarning().call$1("Error parsing CSS for Noto Emoji font.");
              if (symbolsFontUrl != null)
                $.$get$notoDownloadQueue().add$1(0, new A._ResolvedNotoSubset(symbolsFontUrl, "Noto Sans Symbols", B.List_empty1));
              else
                $.$get$printWarning().call$1("Error parsing CSS for Noto Symbols font.");
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_registerSymbolsAndEmoji, $async$completer);
    },
    findMinimumFontsForCodeUnits(codeUnits, fonts) {
      var t2, t3, t4, t5, t6, t7, t8, t9, _box_0, t10, t11, maxCodeUnitsCovered, t12, t13, t14, codeUnitsCovered, t15, t16,
        minimumFonts = A.LinkedHashSet_LinkedHashSet$_empty(type$.NotoFont),
        bestFonts = A._setArrayType([], type$.JSArray_NotoFont),
        t1 = window.navigator,
        language = t1.language || t1.userLanguage;
      for (t1 = language === "ja", t2 = language === "zh-HK", t3 = language !== "zh-Hant", t4 = language !== "zh-Hans", t5 = language !== "zh-CN", t6 = language !== "zh-SG", t7 = language === "zh-MY", t8 = language !== "zh-TW", t9 = language === "zh-MO"; codeUnits._collection$_length !== 0;) {
        _box_0 = {};
        B.JSArray_methods.set$length(bestFonts, 0);
        for (t10 = new A._LinkedHashSetIterator(fonts, fonts._collection$_modifications), t10._collection$_cell = fonts._collection$_first, t11 = A._instanceType(t10)._precomputed1, maxCodeUnitsCovered = 0; t10.moveNext$0();) {
          t12 = t10._collection$_current;
          if (t12 == null)
            t12 = t11._as(t12);
          for (t13 = new A._LinkedHashSetIterator(codeUnits, codeUnits._collection$_modifications), t13._collection$_cell = codeUnits._collection$_first, t14 = A._instanceType(t13)._precomputed1, codeUnitsCovered = 0; t13.moveNext$0();) {
            t15 = t13._collection$_current;
            if (t15 == null)
              t15 = t14._as(t15);
            t16 = t12.resolvedFont;
            if ((t16 == null ? null : t16.tree.root.containsDeep$1(t15)) === true)
              ++codeUnitsCovered;
          }
          if (codeUnitsCovered > maxCodeUnitsCovered) {
            B.JSArray_methods.set$length(bestFonts, 0);
            bestFonts.push(t12);
            maxCodeUnitsCovered = codeUnitsCovered;
          } else if (codeUnitsCovered === maxCodeUnitsCovered)
            bestFonts.push(t12);
        }
        if (maxCodeUnitsCovered === 0)
          break;
        _box_0.bestFont = B.JSArray_methods.get$first(bestFonts);
        if (bestFonts.length > 1)
          if (B.JSArray_methods.every$1(bestFonts, new A.findMinimumFontsForCodeUnits_closure()))
            if (!t4 || !t5 || !t6 || t7) {
              if (B.JSArray_methods.contains$1(bestFonts, $.$get$_notoSansSC()))
                _box_0.bestFont = $.$get$_notoSansSC();
            } else if (!t3 || !t8 || t9) {
              if (B.JSArray_methods.contains$1(bestFonts, $.$get$_notoSansTC()))
                _box_0.bestFont = $.$get$_notoSansTC();
            } else if (t2) {
              if (B.JSArray_methods.contains$1(bestFonts, $.$get$_notoSansHK()))
                _box_0.bestFont = $.$get$_notoSansHK();
            } else if (t1)
              if (B.JSArray_methods.contains$1(bestFonts, $.$get$_notoSansJP()))
                _box_0.bestFont = $.$get$_notoSansJP();
        codeUnits._filterWhere$2(new A.findMinimumFontsForCodeUnits_closure0(_box_0), true);
        minimumFonts.addAll$1(0, bestFonts);
      }
      return minimumFonts;
    },
    NotoFont$($name, approximateUnicodeRanges) {
      return new A.NotoFont($name, approximateUnicodeRanges);
    },
    RegisteredFont$(bytes, family, typeface) {
      J.getGlyphBounds$3$x(new self.window.flutterCanvasKit.Font(typeface), A._setArrayType([0], type$.JSArray_int), null, null);
      return new A.RegisteredFont(family, bytes, typeface);
    },
    _detectCanvasKit() {
      if (self.window.flutterWebRenderer != null) {
        var t1 = self.window.flutterWebRenderer;
        t1.toString;
        return J.$eq$(t1, "canvaskit");
      }
      t1 = $.$get$_operatingSystem();
      return J.containsKey$1$x(B.Set_69tl2._collection$_map, t1);
    },
    initializeCanvasKit() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        t1, $async$temp1;
      var $async$initializeCanvasKit = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = self.window.flutterCanvasKit != null ? 2 : 4;
              break;
            case 2:
              // then
              t1 = self.window.flutterCanvasKit;
              t1.toString;
              $.__canvasKit.__late_helper$_value = t1;
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              $async$goto = $.$get$useH5vccCanvasKit() ? 5 : 7;
              break;
            case 5:
              // then
              t1 = self.window.h5vcc;
              if ((t1 == null ? null : J.get$canvasKit$x(t1)) == null)
                throw A.wrapException(A.CanvasKitError$("H5vcc CanvasKit implementation not found."));
              t1 = self.window.h5vcc;
              t1.toString;
              t1 = J.get$canvasKit$x(t1);
              t1.toString;
              $.__canvasKit.__late_helper$_value = t1;
              self.window.flutterCanvasKit = $.__canvasKit._readField$0();
              // goto join
              $async$goto = 6;
              break;
            case 7:
              // else
              $async$temp1 = $.__canvasKit;
              $async$goto = 8;
              return A._asyncAwait(A.downloadCanvasKit(null), $async$initializeCanvasKit);
            case 8:
              // returning from await.
              $async$temp1.__late_helper$_value = $async$result;
              self.window.flutterCanvasKit = $.__canvasKit._readField$0();
            case 6:
              // join
            case 3:
              // join
              $.skiaSceneHost = A._ElementFactoryProvider_createElement_tag("flt-scene", null);
              t1 = $._flutterViewEmbedder;
              if (t1 == null)
                t1 = $._flutterViewEmbedder = A.FlutterViewEmbedder$();
              t1.renderScene$1($.skiaSceneHost);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$initializeCanvasKit, $async$completer);
    },
    downloadCanvasKit(canvasKitBase) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.CanvasKit),
        $async$returnValue, t1;
      var $async$downloadCanvasKit = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A._downloadCanvasKitJs(canvasKitBase), $async$downloadCanvasKit);
            case 3:
              // returning from await.
              t1 = new A._Future($.Zone__current, type$._Future_CanvasKit);
              J.then$1$x(self.window.CanvasKitInit({locateFile: A.allowInterop(new A.downloadCanvasKit_closure(canvasKitBase))}), A.allowInterop(new A.downloadCanvasKit_closure0(new A._AsyncCompleter(t1, type$._AsyncCompleter_CanvasKit))));
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$downloadCanvasKit, $async$completer);
    },
    _downloadCanvasKitJs(canvasKitBase) {
      var canvasKitJavaScriptUrl, canvasKitScript, loadSubscription,
        t1 = $._configuration;
      if (t1 == null)
        t1 = $._configuration = new A.FlutterConfiguration(self.window.flutterConfiguration);
      canvasKitJavaScriptUrl = t1.get$canvasKitBaseUrl(t1) + "profiling/canvaskit.js";
      canvasKitScript = document.createElement("script");
      canvasKitScript.src = canvasKitJavaScriptUrl;
      t1 = new A._Future($.Zone__current, type$._Future_void);
      loadSubscription = A._Cell$named("loadSubscription");
      loadSubscription.__late_helper$_value = A._EventStreamSubscription$(canvasKitScript, "load", new A._downloadCanvasKitJs_closure(loadSubscription, new A._AsyncCompleter(t1, type$._AsyncCompleter_void)), false, type$._ElementEventStreamImpl_Event._precomputed1);
      A.patchCanvasKitModule(canvasKitScript);
      return t1;
    },
    IntervalTree_IntervalTree$createFromRanges(rangesMap, $T) {
      var t1,
        intervals = A._setArrayType([], $T._eval$1("JSArray<IntervalTreeNode<0>>"));
      rangesMap.forEach$1(0, new A.IntervalTree_IntervalTree$createFromRanges_closure(intervals, $T));
      B.JSArray_methods.sort$1(intervals, new A.IntervalTree_IntervalTree$createFromRanges_closure0($T));
      t1 = new A.IntervalTree_IntervalTree$createFromRanges__makeBalancedTree($T).call$1(intervals);
      t1.toString;
      new A.IntervalTree_IntervalTree$createFromRanges__computeHigh($T).call$1(t1);
      return new A.IntervalTree(t1, $T._eval$1("IntervalTree<0>"));
    },
    CkPaint$() {
      var t1 = new A.CkPaint(B.BlendMode_3, B.PaintingStyle_0, B.Color_4278190080, B.FilterQuality_0);
      t1.ManagedSkiaObject$1(null, type$.SkPaint);
      return t1;
    },
    SkiaObjects_registerCleanupCallback() {
      if ($.SkiaObjects__addedCleanupCallback)
        return;
      $.$get$EnginePlatformDispatcher__instance().get$rasterizer()._postFrameCallbacks.push(A._engine_SkiaObjects_postFrameCleanUp$closure());
      $.SkiaObjects__addedCleanupCallback = true;
    },
    SkiaObjects_markCacheForResize(cache) {
      A.SkiaObjects_registerCleanupCallback();
      if (B.JSArray_methods.contains$1($.SkiaObjects_cachesToResize, cache))
        return;
      $.SkiaObjects_cachesToResize.push(cache);
    },
    SkiaObjects_postFrameCleanUp() {
      var i, object;
      if ($.SkiaObjects_resurrectableObjects.length === 0 && $.SkiaObjects_cachesToResize.length === 0)
        return;
      for (i = 0; i < $.SkiaObjects_resurrectableObjects.length; ++i) {
        object = $.SkiaObjects_resurrectableObjects[i];
        object.delete$0(0);
        object.didDelete$0();
      }
      B.JSArray_methods.set$length($.SkiaObjects_resurrectableObjects, 0);
      for (i = 0; i < $.SkiaObjects_cachesToResize.length; ++i)
        $.SkiaObjects_cachesToResize[i].resize$0(0);
      B.JSArray_methods.set$length($.SkiaObjects_cachesToResize, 0);
    },
    SurfaceFactory_instance() {
      var t2, t3, t4, t5,
        _s20_ = "flt-canvas-container",
        t1 = $.SurfaceFactory__instance;
      if (t1 == null) {
        t1 = $._configuration;
        if (t1 == null)
          t1 = $._configuration = new A.FlutterConfiguration(self.window.flutterConfiguration);
        t1 = t1.get$canvasKitMaximumSurfaces(t1);
        t2 = A._ElementFactoryProvider_createElement_tag(_s20_, null);
        t3 = A._ElementFactoryProvider_createElement_tag(_s20_, null);
        t4 = type$.JSArray_Surface;
        t5 = A._setArrayType([], t4);
        t4 = A._setArrayType([], t4);
        t1 = $.SurfaceFactory__instance = new A.SurfaceFactory(new A.Surface(t2), new A.Surface(t3), t1, t5, t4);
      }
      return t1;
    },
    CkTextStyle_CkTextStyle(background, color, decoration, decorationColor, decorationStyle, decorationThickness, fontFamily, fontFamilyFallback, fontFeatures, fontSize, fontStyle, fontWeight, foreground, height, leadingDistribution, letterSpacing, locale, shadows, textBaseline, wordSpacing) {
      return new A.CkTextStyle(color, decoration, decorationColor, decorationStyle, decorationThickness, fontWeight, fontStyle, textBaseline, fontFamily, fontFamilyFallback, fontSize, letterSpacing, wordSpacing, height, leadingDistribution, locale, background, foreground, shadows, fontFeatures);
    },
    toSkFontStyle(fontWeight, fontStyle) {
      var style = A.SkFontStyle$(null);
      if (fontWeight != null)
        style.weight = $.$get$_skFontWeights()[fontWeight.index];
      return style;
    },
    CkParagraphBuilder$(style) {
      var t2, t3, t4, _null = null,
        t1 = A._setArrayType([], type$.JSArray__ParagraphCommand);
      type$.CkParagraphStyle._as(style);
      t2 = A._setArrayType([], type$.JSArray_double);
      t3 = A._setArrayType([], type$.JSArray_CkTextStyle);
      t4 = J.MakeFromFontProvider$2$x(J.get$ParagraphBuilder$x($.__canvasKit._readField$0()), style.skParagraphStyle, $._skiaFontCollection.fontProvider);
      t3.push(A.CkTextStyle_CkTextStyle(_null, _null, _null, _null, _null, _null, style._fontFamily, _null, _null, style._fontSize, style._fontStyle, style._fontWeight, _null, style.__engine$_height, style._leadingDistribution, _null, _null, _null, _null, _null));
      return new A.CkParagraphBuilder(t4, style, t1, t2, t3);
    },
    _getEffectiveFontFamilies(fontFamily, fontFamilyFallback) {
      var fontFamilies = A._setArrayType([], type$.JSArray_String);
      if (fontFamily != null)
        fontFamilies.push(fontFamily);
      if (fontFamilyFallback != null && !B.JSArray_methods.every$1(fontFamilyFallback, new A._getEffectiveFontFamilies_closure(fontFamily)))
        B.JSArray_methods.addAll$1(fontFamilies, fontFamilyFallback);
      B.JSArray_methods.addAll$1(fontFamilies, $.$get$FontFallbackData__instance().globalFontFallbacks);
      return fontFamilies;
    },
    CanvasKitError$(message) {
      return new A.CanvasKitError(message);
    },
    makeFreshSkColor(color) {
      var result = new Float32Array(4),
        t1 = color.value;
      result[0] = (t1 >>> 16 & 255) / 255;
      result[1] = (t1 >>> 8 & 255) / 255;
      result[2] = (t1 & 255) / 255;
      result[3] = (t1 >>> 24 & 255) / 255;
      return result;
    },
    computeSkShadowBounds(path, elevation, devicePixelRatio, matrix) {
      var isComplex, ambientBlur, spotBlur, t1, spotOffsetX, spotOffsetY, shadowBounds, inverse,
        pathBounds = A.fromSkRect(J.getBounds$0$x(path.get$skiaObject()));
      if (elevation === 0)
        return pathBounds;
      isComplex = !matrix.isIdentityOrTranslation$0();
      if (isComplex)
        pathBounds = A.transformRect(matrix, pathBounds);
      ambientBlur = Math.min(elevation * 0.0078125 * 64, 150);
      spotBlur = 1.1 * elevation;
      t1 = -elevation;
      spotOffsetX = t1 * 0;
      spotOffsetY = t1 * -0.75;
      shadowBounds = new A.Rect(pathBounds.left - 1 + (spotOffsetX - ambientBlur - spotBlur) * devicePixelRatio, pathBounds.top - 1 + (spotOffsetY - ambientBlur - spotBlur) * devicePixelRatio, pathBounds.right + 1 + (spotOffsetX + ambientBlur + spotBlur) * devicePixelRatio, pathBounds.bottom + 1 + (spotOffsetY + ambientBlur + spotBlur) * devicePixelRatio);
      if (isComplex) {
        inverse = new A.Matrix40(new Float32Array(16));
        if (inverse.copyInverse$1(matrix) !== 0)
          return A.transformRect(inverse, shadowBounds);
        else
          return shadowBounds;
      } else
        return shadowBounds;
    },
    drawSkShadow(skCanvas, path, color, elevation, transparentOccluder, devicePixelRatio) {
      var inAmbient, inSpot, inTonalColors, tonalColors,
        flags = transparentOccluder ? 5 : 4,
        t1 = color.value,
        t2 = t1 >>> 24 & 255,
        t3 = t1 >>> 16 & 255,
        t4 = t1 >>> 8 & 255;
      t1 &= 255;
      inAmbient = A.Color$fromARGB(B.JSNumber_methods.round$0(t2 * 0.039), t3, t4, t1);
      inSpot = A.Color$fromARGB(B.JSNumber_methods.round$0(t2 * 0.25), t3, t4, t1);
      inTonalColors = {ambient: A.makeFreshSkColor(inAmbient), spot: A.makeFreshSkColor(inSpot)};
      tonalColors = J.computeTonalColors$1$x($.__canvasKit._readField$0(), inTonalColors);
      t1 = path.get$skiaObject();
      t2 = new Float32Array(3);
      t2[2] = devicePixelRatio * elevation;
      t3 = new Float32Array(3);
      t3[0] = 0;
      t3[1] = -450;
      t3[2] = devicePixelRatio * 600;
      t4 = J.getInterceptor$x(tonalColors);
      J.drawShadow$7$x(skCanvas, t1, t2, t3, devicePixelRatio * 1.1, t4.get$ambient(tonalColors), t4.get$spot(tonalColors), flags);
    },
    PasteFromClipboardStrategy_PasteFromClipboardStrategy() {
      var t1 = $.$get$_browserEngine();
      return t1 === B.BrowserEngine_2 || window.navigator.clipboard == null ? new A.ExecCommandPasteStrategy() : new A.ClipboardAPIPasteStrategy();
    },
    FlutterViewEmbedder$() {
      var t1 = document.body;
      t1.toString;
      t1 = new A.FlutterViewEmbedder(t1);
      t1.reset$0(0);
      return t1;
    },
    FlutterViewEmbedder__deviceOrientationToLockType(deviceOrientation) {
      switch (deviceOrientation) {
        case "DeviceOrientation.portraitUp":
          return "portrait-primary";
        case "DeviceOrientation.landscapeLeft":
          return "portrait-secondary";
        case "DeviceOrientation.portraitDown":
          return "landscape-primary";
        case "DeviceOrientation.landscapeRight":
          return "landscape-secondary";
        default:
          return null;
      }
    },
    applyGlobalCssRulesToSheet(sheet, browserEngine, hasAutofillOverlay) {
      var t1,
        isWebKit = browserEngine === B.BrowserEngine_1,
        isFirefox = browserEngine === B.BrowserEngine_2;
      if (isFirefox)
        sheet.insertRule("flt-ruler-host p, flt-scene p { margin: 0; line-height: 100%;}", sheet.cssRules.length);
      else
        sheet.insertRule("flt-ruler-host p, flt-scene p { margin: 0; }", sheet.cssRules.length);
      sheet.insertRule("    flt-semantics input[type=range] {\n      appearance: none;\n      -webkit-appearance: none;\n      width: 100%;\n      position: absolute;\n      border: none;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n    }\n    ", sheet.cssRules.length);
      if (isWebKit)
        sheet.insertRule("flt-semantics input[type=range]::-webkit-slider-thumb {  -webkit-appearance: none;}", sheet.cssRules.length);
      if (isFirefox) {
        sheet.insertRule("input::-moz-selection {  background-color: transparent;}", sheet.cssRules.length);
        sheet.insertRule("textarea::-moz-selection {  background-color: transparent;}", sheet.cssRules.length);
      } else {
        sheet.insertRule("input::selection {  background-color: transparent;}", sheet.cssRules.length);
        sheet.insertRule("textarea::selection {  background-color: transparent;}", sheet.cssRules.length);
      }
      sheet.insertRule('    flt-semantics input,\n    flt-semantics textarea,\n    flt-semantics [contentEditable="true"] {\n    caret-color: transparent;\n  }\n  ', sheet.cssRules.length);
      if (isWebKit)
        sheet.insertRule("      flt-glass-pane * {\n      -webkit-tap-highlight-color: transparent;\n    }\n    ", sheet.cssRules.length);
      sheet.insertRule("    .flt-text-editing::placeholder {\n      opacity: 0;\n    }\n    ", sheet.cssRules.length);
      t1 = $.$get$_browserEngine();
      if (t1 !== B.BrowserEngine_0)
        if (t1 !== B.BrowserEngine_5)
          t1 = t1 === B.BrowserEngine_1;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        sheet.insertRule("      .transparentTextEditing:-webkit-autofill,\n      .transparentTextEditing:-webkit-autofill:hover,\n      .transparentTextEditing:-webkit-autofill:focus,\n      .transparentTextEditing:-webkit-autofill:active {\n        -webkit-transition-delay: 99999s;\n      }\n    ", sheet.cssRules.length);
    },
    ensureFlutterViewEmbedderInitialized() {
      var t1 = $._flutterViewEmbedder;
      return t1 == null ? $._flutterViewEmbedder = A.FlutterViewEmbedder$() : t1;
    },
    transformWithOffset(transform, offset) {
      var effectiveTransform;
      if (offset.$eq(0, B.Offset_0_0))
        return transform;
      effectiveTransform = new A.Matrix40(new Float32Array(16));
      effectiveTransform.setFrom$1(transform);
      effectiveTransform.translate$3(0, offset._dx, offset._dy, 0);
      return effectiveTransform;
    },
    drawParagraphElement(paragraph, offset, transform) {
      var paragraphElement = paragraph.toDomElement$0();
      if (transform != null)
        A.setElementTransform(paragraphElement, A.transformWithOffset(transform, offset).__engine$_m4storage);
      return paragraphElement;
    },
    sendFontChangeMessage() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic);
      var $async$sendFontChangeMessage = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (!$._fontChangeScheduled) {
                $._fontChangeScheduled = true;
                B.Window_methods.requestAnimationFrame$1(window, new A.sendFontChangeMessage_closure());
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$sendFontChangeMessage, $async$completer);
    },
    BitmapCanvas$(_bounds, renderStrategy, density) {
      var t1 = A._ElementFactoryProvider_createElement_tag("flt-canvas", null),
        t2 = A._setArrayType([], type$.JSArray_Element),
        t3 = A.EnginePlatformDispatcher_browserDevicePixelRatio(),
        t4 = _bounds.left,
        t5 = _bounds.right - t4,
        t6 = A.BitmapCanvas_widthToPhysical(t5),
        t7 = _bounds.top,
        t8 = _bounds.bottom - t7,
        t9 = A.BitmapCanvas_heightToPhysical(t8);
      t8 = new A.CanvasPool(A.BitmapCanvas_widthToPhysical(t5), A.BitmapCanvas_heightToPhysical(t8), density, A._setArrayType([], type$.JSArray_SaveStackEntry), A.Matrix4$identity());
      t3 = new A.BitmapCanvas(_bounds, t1, t8, t2, t6, t9, t3, density, renderStrategy);
      t9 = t1.style;
      t9.position = "absolute";
      t3._canvasPositionX = B.JSNumber_methods.floor$0(t4) - 1;
      t3._canvasPositionY = B.JSNumber_methods.floor$0(t7) - 1;
      t3._updateRootElementTransform$0();
      t8._rootElement = type$.HtmlElement._as(t1);
      t3._setupInitialTransform$0();
      return t3;
    },
    BitmapCanvas_widthToPhysical(width) {
      return B.JSNumber_methods.ceil$0((width + 1) * A.EnginePlatformDispatcher_browserDevicePixelRatio()) + 2;
    },
    BitmapCanvas_heightToPhysical(height) {
      return B.JSNumber_methods.ceil$0((height + 1) * A.EnginePlatformDispatcher_browserDevicePixelRatio()) + 2;
    },
    blendModeToCssMixBlendMode(blendMode) {
      if (blendMode == null)
        return null;
      switch (blendMode.index) {
        case 3:
          return "source-over";
        case 5:
          return "source-in";
        case 7:
          return "source-out";
        case 9:
          return "source-atop";
        case 4:
          return "destination-over";
        case 6:
          return "destination-in";
        case 8:
          return "destination-out";
        case 10:
          return "destination-atop";
        case 12:
          return "lighten";
        case 1:
          return "copy";
        case 11:
          return "xor";
        case 24:
        case 13:
          return "multiply";
        case 14:
          return "screen";
        case 15:
          return "overlay";
        case 16:
          return "darken";
        case 17:
          return "lighten";
        case 18:
          return "color-dodge";
        case 19:
          return "color-burn";
        case 20:
          return "hard-light";
        case 21:
          return "soft-light";
        case 22:
          return "difference";
        case 23:
          return "exclusion";
        case 25:
          return "hue";
        case 26:
          return "saturation";
        case 27:
          return "color";
        case 28:
          return "luminosity";
        default:
          throw A.wrapException(A.UnimplementedError$("Flutter Web does not support the blend mode: " + blendMode.toString$0(0)));
      }
    },
    stringForStrokeCap(strokeCap) {
      switch (strokeCap.index) {
        case 0:
          return "butt";
        case 1:
          return "round";
        case 2:
        default:
          return "square";
      }
    },
    stringForStrokeJoin(strokeJoin) {
      switch (strokeJoin.index) {
        case 1:
          return "round";
        case 2:
          return "bevel";
        case 0:
        default:
          return "miter";
      }
    },
    _clipContent(clipStack, $content, offset, currentTransform) {
      var root, curElement, clipIndex, entry, t2, newElement, t3, rect, newClipTransform, transformKind, clipOffsetX, clipOffsetY, newClipTransform0, t4, t5, value, borderRadius, t6, ovalBounds, reverseTransformDiv,
        _s8_ = "absolute",
        _s6_ = "hidden",
        _s16_ = "transform-origin",
        _s9_ = "transform",
        _s13_ = "border-radius",
        _s15_ = "transform-style",
        t1 = type$.JSArray_Element,
        clipDefs = A._setArrayType([], t1),
        len = clipStack.length;
      for (root = null, curElement = null, clipIndex = 0; clipIndex < len; ++clipIndex, curElement = reverseTransformDiv) {
        entry = clipStack[clipIndex];
        t2 = document;
        newElement = t2.createElement("div");
        t3 = newElement.style;
        t3.position = _s8_;
        t3 = $.$get$_browserEngine();
        if (t3 === B.BrowserEngine_1) {
          t3 = newElement.style;
          t3.zIndex = "0";
        }
        if (root == null)
          root = newElement;
        else
          curElement.appendChild(newElement);
        rect = entry.rect;
        newClipTransform = entry.currentTransform;
        t3 = newClipTransform.__engine$_m4storage;
        transformKind = A.transformKindOf(t3);
        if (rect != null) {
          clipOffsetX = rect.left;
          clipOffsetY = rect.top;
          t3 = new Float32Array(16);
          newClipTransform0 = new A.Matrix40(t3);
          newClipTransform0.setFrom$1(newClipTransform);
          newClipTransform0.translate$2(0, clipOffsetX, clipOffsetY);
          t4 = newElement.style;
          t4.overflow = _s6_;
          t5 = A.S(rect.right - clipOffsetX) + "px";
          t4.width = t5;
          t5 = A.S(rect.bottom - clipOffsetY) + "px";
          t4.height = t5;
          t4 = newElement.style;
          t5 = B.CssStyleDeclaration_methods._browserPropertyName$1(t4, _s16_);
          t4.setProperty(t5, "0 0 0", "");
          value = A.float64ListToCssTransform(t3);
          t3 = B.CssStyleDeclaration_methods._browserPropertyName$1(t4, _s9_);
          t4.setProperty(t3, value, "");
          newClipTransform = newClipTransform0;
        } else {
          t4 = entry.rrect;
          if (t4 != null) {
            borderRadius = A.S(t4.tlRadiusX) + "px " + A.S(t4.trRadiusX) + "px " + A.S(t4.brRadiusX) + "px " + A.S(t4.blRadiusX) + "px";
            clipOffsetX = t4.left;
            clipOffsetY = t4.top;
            t3 = new Float32Array(16);
            newClipTransform0 = new A.Matrix40(t3);
            newClipTransform0.setFrom$1(newClipTransform);
            newClipTransform0.translate$2(0, clipOffsetX, clipOffsetY);
            t5 = newElement.style;
            t6 = B.CssStyleDeclaration_methods._browserPropertyName$1(t5, _s13_);
            t5.setProperty(t6, borderRadius, "");
            t5.overflow = _s6_;
            t6 = A.S(t4.right - clipOffsetX) + "px";
            t5.width = t6;
            t4 = A.S(t4.bottom - clipOffsetY) + "px";
            t5.height = t4;
            t4 = newElement.style;
            t5 = B.CssStyleDeclaration_methods._browserPropertyName$1(t4, _s16_);
            t4.setProperty(t5, "0 0 0", "");
            value = A.float64ListToCssTransform(t3);
            t3 = B.CssStyleDeclaration_methods._browserPropertyName$1(t4, _s9_);
            t4.setProperty(t3, value, "");
            newClipTransform = newClipTransform0;
          } else {
            t4 = entry.path;
            if (t4 != null) {
              t5 = t4.pathRef;
              if ((t5.fIsOval ? t5.fRRectOrOvalStartIdx : -1) !== -1) {
                ovalBounds = t4.getBounds$0(0);
                clipOffsetX = ovalBounds.left;
                clipOffsetY = ovalBounds.top;
                t3 = new Float32Array(16);
                newClipTransform0 = new A.Matrix40(t3);
                newClipTransform0.setFrom$1(newClipTransform);
                newClipTransform0.translate$2(0, clipOffsetX, clipOffsetY);
                t4 = newElement.style;
                t4.overflow = _s6_;
                t5 = A.S(ovalBounds.right - clipOffsetX) + "px";
                t4.width = t5;
                t5 = A.S(ovalBounds.bottom - clipOffsetY) + "px";
                t4.height = t5;
                t5 = B.CssStyleDeclaration_methods._browserPropertyName$1(t4, _s13_);
                t4.setProperty(t5, "50%", "");
                t4 = newElement.style;
                t5 = B.CssStyleDeclaration_methods._browserPropertyName$1(t4, _s16_);
                t4.setProperty(t5, "0 0 0", "");
                value = A.float64ListToCssTransform(t3);
                t3 = B.CssStyleDeclaration_methods._browserPropertyName$1(t4, _s9_);
                t4.setProperty(t3, value, "");
                newClipTransform = newClipTransform0;
              } else {
                t5 = newElement.style;
                value = A.float64ListToCssTransform(t3);
                t3 = B.CssStyleDeclaration_methods._browserPropertyName$1(t5, _s9_);
                t5.setProperty(t3, value, "");
                t3 = B.CssStyleDeclaration_methods._browserPropertyName$1(t5, _s16_);
                t5.setProperty(t3, "0 0 0", "");
                clipDefs.push(A.createSvgClipDef(newElement, t4));
              }
            }
          }
        }
        reverseTransformDiv = t2.createElement("div");
        t2 = reverseTransformDiv.style;
        t2.position = _s8_;
        t2 = new Float32Array(16);
        t3 = new A.Matrix40(t2);
        t3.setFrom$1(newClipTransform);
        t3.copyInverse$1(t3);
        t3 = reverseTransformDiv.style;
        t4 = B.CssStyleDeclaration_methods._browserPropertyName$1(t3, _s16_);
        t3.setProperty(t4, "0 0 0", "");
        value = A.float64ListToCssTransform(t2);
        t2 = B.CssStyleDeclaration_methods._browserPropertyName$1(t3, _s9_);
        t3.setProperty(t2, value, "");
        if (transformKind === B.TransformKind_2) {
          t2 = newElement.style;
          t3 = B.CssStyleDeclaration_methods._browserPropertyName$1(t2, _s15_);
          t2.setProperty(t3, "preserve-3d", "");
          t2 = reverseTransformDiv.style;
          t3 = B.CssStyleDeclaration_methods._browserPropertyName$1(t2, _s15_);
          t2.setProperty(t3, "preserve-3d", "");
        }
        newElement.appendChild(reverseTransformDiv);
      }
      t2 = root.style;
      t2.position = _s8_;
      curElement.appendChild($content);
      A.setElementTransform($content, A.transformWithOffset(currentTransform, offset).__engine$_m4storage);
      t1 = A._setArrayType([root], t1);
      B.JSArray_methods.addAll$1(t1, clipDefs);
      return t1;
    },
    maskFilterToCanvasFilter(maskFilter) {
      var t1, t2;
      if (maskFilter != null) {
        t1 = maskFilter._sigma;
        t2 = $.$get$window()._debugDevicePixelRatio;
        return "blur(" + A.S(t1 * (t2 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t2)) + "px)";
      } else
        return "none";
    },
    createSvgClipDef(element, clipPath) {
      var t3,
        pathBounds = clipPath.getBounds$0(0),
        t1 = pathBounds.right,
        t2 = pathBounds.bottom,
        svgClipPath = A.pathToSvgClipPath(clipPath, 0, 0, 1 / t1, 1 / t2);
      A.setClipPath(element, "url(#svgClip" + $._clipIdCounter + ")");
      t3 = element.style;
      t1 = A.S(t1) + "px";
      t3.width = t1;
      t1 = A.S(t2) + "px";
      t3.height = t1;
      return svgClipPath;
    },
    buildDrawRectElement(rect, paint, tagName, transform) {
      var isStroke, strokeWidth, t2, t3, left, right, $top, bottom, effectiveTransform, translated, style, cssColor, sigma,
        t1 = document.createElement(tagName);
      type$.HtmlElement._as(t1);
      isStroke = paint.style === B.PaintingStyle_1;
      strokeWidth = paint.strokeWidth;
      if (strokeWidth == null)
        strokeWidth = 0;
      t2 = rect.left;
      t3 = rect.right;
      left = Math.min(t2, t3);
      right = Math.max(t2, t3);
      t3 = rect.top;
      t2 = rect.bottom;
      $top = Math.min(t3, t2);
      bottom = Math.max(t3, t2);
      if (transform.isIdentity$0(0))
        if (isStroke) {
          t2 = strokeWidth / 2;
          effectiveTransform = "translate(" + A.S(left - t2) + "px, " + A.S($top - t2) + "px)";
        } else
          effectiveTransform = "translate(" + A.S(left) + "px, " + A.S($top) + "px)";
      else {
        t2 = new Float32Array(16);
        translated = new A.Matrix40(t2);
        translated.setFrom$1(transform);
        if (isStroke) {
          t3 = strokeWidth / 2;
          translated.translate$2(0, left - t3, $top - t3);
        } else
          translated.translate$2(0, left, $top);
        effectiveTransform = A.float64ListToCssTransform(t2);
      }
      style = t1.style;
      style.position = "absolute";
      B.CssStyleDeclaration_methods._setPropertyHelper$3(style, B.CssStyleDeclaration_methods._browserPropertyName$1(style, "transform-origin"), "0 0 0", "");
      B.CssStyleDeclaration_methods._setPropertyHelper$3(style, B.CssStyleDeclaration_methods._browserPropertyName$1(style, "transform"), effectiveTransform, "");
      t2 = paint.color;
      if (t2 == null)
        cssColor = "#000000";
      else {
        t2 = A.colorToCssString(t2);
        t2.toString;
        cssColor = t2;
      }
      t2 = paint.maskFilter;
      if (t2 != null) {
        sigma = t2._sigma;
        t2 = $.$get$_browserEngine();
        if (t2 === B.BrowserEngine_1 && !isStroke) {
          t2 = "0px 0px " + A.S(sigma * 2) + "px " + cssColor;
          B.CssStyleDeclaration_methods._setPropertyHelper$3(style, B.CssStyleDeclaration_methods._browserPropertyName$1(style, "box-shadow"), t2, "");
          t2 = paint.color;
          if (t2 == null)
            t2 = B.Color_4278190080;
          t2 = t2.value;
          t2 = A.colorToCssString(new A.Color(((B.JSNumber_methods.round$0((1 - Math.min(Math.sqrt(sigma) / 6.283185307179586, 1)) * (t2 >>> 24 & 255)) & 255) << 24 | t2 & 16777215) >>> 0));
          t2.toString;
          cssColor = t2;
        } else {
          t2 = "blur(" + A.S(sigma) + "px)";
          B.CssStyleDeclaration_methods._setPropertyHelper$3(style, B.CssStyleDeclaration_methods._browserPropertyName$1(style, "filter"), t2, "");
        }
      }
      t2 = right - left;
      if (isStroke) {
        t2 = A.S(t2 - strokeWidth) + "px";
        style.width = t2;
        t2 = A.S(bottom - $top - strokeWidth) + "px";
        style.height = t2;
        t2 = A._borderStrokeToCssUnit(strokeWidth) + " solid " + cssColor;
        style.border = t2;
      } else {
        t2 = A.S(t2) + "px";
        style.width = t2;
        t2 = A.S(bottom - $top) + "px";
        style.height = t2;
        style.backgroundColor = cssColor;
      }
      return t1;
    },
    applyRRectBorderRadius(style, rrect) {
      var t3, t4,
        t1 = rrect.tlRadiusX,
        t2 = rrect.trRadiusX;
      if (t1 === t2) {
        t3 = rrect.blRadiusX;
        if (t1 === t3) {
          t4 = rrect.brRadiusX;
          t3 = t1 === t4 && t1 === rrect.tlRadiusY && t2 === rrect.trRadiusY && t3 === rrect.blRadiusY && t4 === rrect.brRadiusY;
        } else
          t3 = false;
      } else
        t3 = false;
      if (t3) {
        t1 = A._borderStrokeToCssUnit(rrect.blRadiusX);
        B.CssStyleDeclaration_methods._setPropertyHelper$3(style, B.CssStyleDeclaration_methods._browserPropertyName$1(style, "border-radius"), t1, "");
        return;
      }
      t1 = A._borderStrokeToCssUnit(t1) + " " + A._borderStrokeToCssUnit(rrect.tlRadiusY);
      B.CssStyleDeclaration_methods._setPropertyHelper$3(style, B.CssStyleDeclaration_methods._browserPropertyName$1(style, "border-top-left-radius"), t1, "");
      t2 = A._borderStrokeToCssUnit(t2) + " " + A._borderStrokeToCssUnit(rrect.trRadiusY);
      B.CssStyleDeclaration_methods._setPropertyHelper$3(style, B.CssStyleDeclaration_methods._browserPropertyName$1(style, "border-top-right-radius"), t2, "");
      t2 = A._borderStrokeToCssUnit(rrect.blRadiusX) + " " + A._borderStrokeToCssUnit(rrect.blRadiusY);
      B.CssStyleDeclaration_methods._setPropertyHelper$3(style, B.CssStyleDeclaration_methods._browserPropertyName$1(style, "border-bottom-left-radius"), t2, "");
      t2 = A._borderStrokeToCssUnit(rrect.brRadiusX) + " " + A._borderStrokeToCssUnit(rrect.brRadiusY);
      B.CssStyleDeclaration_methods._setPropertyHelper$3(style, B.CssStyleDeclaration_methods._browserPropertyName$1(style, "border-bottom-right-radius"), t2, "");
    },
    _borderStrokeToCssUnit(value) {
      return B.JSNumber_methods.toStringAsFixed$1(value === 0 ? 1 : value, 3) + "px";
    },
    pathToSvgElement(path, paint, width, height) {
      var svgPath, color, t1, t2, _s4_ = "fill",
        root = A.SvgSvgElement_SvgSvgElement();
      root.setAttribute("width", width + "px");
      root.setAttribute("height", height + "px");
      root.setAttribute("viewBox", "0 0 " + width + " " + height);
      svgPath = type$.PathElement._as(type$.SvgElement._as(B.HtmlDocument_methods.createElementNS$2(document, "http://www.w3.org/2000/svg", "path")));
      root.appendChild(svgPath);
      color = paint.color;
      t1 = color == null;
      if (t1)
        color = B.Color_4278190080;
      t2 = paint.style;
      if (t2 !== B.PaintingStyle_1)
        if (t2 !== B.PaintingStyle_0) {
          t2 = paint.strokeWidth;
          t2 = t2 !== 0 && t2 != null;
        } else
          t2 = false;
      else
        t2 = true;
      if (t2) {
        t1 = A.colorToCssString(color);
        t1.toString;
        svgPath.setAttribute("stroke", t1);
        t1 = paint.strokeWidth;
        svgPath.setAttribute("stroke-width", A.S(t1 == null ? 1 : t1));
        svgPath.setAttribute(_s4_, "none");
      } else if (!t1) {
        t1 = A.colorToCssString(color);
        t1.toString;
        svgPath.setAttribute(_s4_, t1);
      } else
        svgPath.setAttribute(_s4_, "#000000");
      if (path._fillType === B.PathFillType_1)
        svgPath.setAttribute("fill-rule", "evenodd");
      svgPath.setAttribute("d", A.pathToSvg(path.pathRef, 0, 0));
      return root;
    },
    Conic__subdivide(src, level, pointList) {
      var dst, t1, t2, startY, endY, midY, t3;
      if (0 === level) {
        pointList.push(new A.Offset(src.p1x, src.p1y));
        pointList.push(new A.Offset(src.p2x, src.p2y));
        return;
      }
      dst = new A._ConicPair();
      src._chop$1(dst);
      t1 = dst.first;
      t1.toString;
      t2 = dst.second;
      t2.toString;
      startY = src.p0y;
      endY = src.p2y;
      if (A.SPath_between(startY, src.p1y, endY)) {
        midY = t1.p2y;
        if (!A.SPath_between(startY, midY, endY))
          t3 = t1.p2y = t2.p0y = Math.abs(midY - startY) < Math.abs(midY - endY) ? startY : endY;
        else
          t3 = midY;
        if (!A.SPath_between(startY, t1.p1y, t3))
          t1.p1y = startY;
        if (!A.SPath_between(t2.p0y, t2.p1y, endY))
          t2.p1y = endY;
      }
      --level;
      A.Conic__subdivide(t1, level, pointList);
      A.Conic__subdivide(t2, level, pointList);
    },
    Conic_evalNumerator(p0, p1, p2, w, t) {
      var src2w = p1 * w;
      return ((p2 - 2 * src2w + p0) * t + 2 * (src2w - p0)) * t + p0;
    },
    Conic_evalDenominator(w, t) {
      var $B = 2 * (w - 1);
      return (-$B * t + $B) * t + 1;
    },
    chopCubicAtYExtrema(points, dest) {
      var t1, roots, t2, t3, rootCount,
        y0 = points[1],
        y1 = points[3],
        y2 = points[5],
        _quadRoots = new A.QuadRoots();
      _quadRoots.findRoots$3(points[7] - y0 + 3 * (y1 - y2), 2 * (y0 - y1 - y1 + y2), y1 - y0);
      t1 = _quadRoots.root0;
      if (t1 == null)
        roots = A._setArrayType([], type$.JSArray_double);
      else {
        t2 = _quadRoots.root1;
        t3 = type$.JSArray_double;
        roots = t2 == null ? A._setArrayType([t1], t3) : A._setArrayType([t1, t2], t3);
      }
      if (roots.length === 0)
        return 0;
      A._chopCubicAt(roots, points, dest);
      rootCount = roots.length;
      if (rootCount > 0) {
        t1 = dest[7];
        dest[9] = t1;
        dest[5] = t1;
        if (rootCount === 2) {
          t1 = dest[13];
          dest[15] = t1;
          dest[11] = t1;
        }
      }
      return rootCount;
    },
    _chopCubicAt(tValues, points, outPts) {
      var i, t, t1, bufferPos, p3y, p0x, t2, p0y, p1x, p1y, p2x, p2y, bufferPos0, p3x, t3, ab1x, ab1y, bc1x, bc1y, cd1x, cd1y, abc1x, abc1y, bcd1x, bcd1y, outIndex, outIndex0, i0,
        rootCount = tValues.length;
      if (0 === rootCount)
        for (i = 0; i < 8; ++i)
          outPts[i] = points[i];
      else {
        t = tValues[0];
        for (t1 = rootCount - 1, bufferPos = 0, i = 0; i < rootCount; i = i0, bufferPos = bufferPos0) {
          p3y = points[bufferPos + 7];
          p0x = points[bufferPos];
          t2 = bufferPos + 1;
          p0y = points[t2];
          p1x = points[bufferPos + 2];
          p1y = points[bufferPos + 3];
          p2x = points[bufferPos + 4];
          p2y = points[bufferPos + 5];
          bufferPos0 = bufferPos + 6;
          p3x = points[bufferPos0];
          t3 = 1 - t;
          ab1x = p0x * t3 + p1x * t;
          ab1y = p0y * t3 + p1y * t;
          bc1x = p1x * t3 + p2x * t;
          bc1y = p1y * t3 + p2y * t;
          cd1x = p2x * t3 + p3x * t;
          cd1y = p2y * t3 + p3y * t;
          abc1x = ab1x * t3 + bc1x * t;
          abc1y = ab1y * t3 + bc1y * t;
          bcd1x = bc1x * t3 + cd1x * t;
          bcd1y = bc1y * t3 + cd1y * t;
          outPts[bufferPos] = p0x;
          outIndex = t2 + 1;
          outPts[t2] = p0y;
          outIndex0 = outIndex + 1;
          outPts[outIndex] = ab1x;
          outIndex = outIndex0 + 1;
          outPts[outIndex0] = ab1y;
          outIndex0 = outIndex + 1;
          outPts[outIndex] = abc1x;
          outIndex = outIndex0 + 1;
          outPts[outIndex0] = abc1y;
          outIndex0 = outIndex + 1;
          outPts[outIndex] = abc1x * t3 + bcd1x * t;
          outIndex = outIndex0 + 1;
          outPts[outIndex0] = abc1y * t3 + bcd1y * t;
          outIndex0 = outIndex + 1;
          outPts[outIndex] = bcd1x;
          outIndex = outIndex0 + 1;
          outPts[outIndex0] = bcd1y;
          outIndex0 = outIndex + 1;
          outPts[outIndex] = cd1x;
          outIndex = outIndex0 + 1;
          outPts[outIndex0] = cd1y;
          outPts[outIndex] = p3x;
          outPts[outIndex + 1] = p3y;
          if (i === t1)
            break;
          i0 = i + 1;
          t2 = tValues[i0];
          t3 = tValues[i];
          t = A.validUnitDivide(t2 - t3, 1 - t3);
          if (t == null) {
            t1 = points[bufferPos0 + 3];
            outPts[bufferPos0 + 6] = t1;
            outPts[bufferPos0 + 5] = t1;
            outPts[bufferPos0 + 4] = t1;
            break;
          }
        }
      }
    },
    chopMonoAtY(_buffer, bufferStartPos, y) {
      var tNeg, tPos, t1, t2, t3, tMid, y01, y12, y012, y0123,
        ycrv0 = _buffer[1 + bufferStartPos] - y,
        ycrv1 = _buffer[3 + bufferStartPos] - y,
        ycrv2 = _buffer[5 + bufferStartPos] - y,
        ycrv3 = _buffer[7 + bufferStartPos] - y;
      if (ycrv0 < 0) {
        if (ycrv3 < 0)
          return null;
        tNeg = 0;
        tPos = 1;
      } else {
        if (!(ycrv0 > 0))
          return 0;
        tNeg = 1;
        tPos = 0;
      }
      t1 = ycrv1 - ycrv0;
      t2 = ycrv2 - ycrv1;
      t3 = ycrv3 - ycrv2;
      do {
        tMid = (tPos + tNeg) / 2;
        y01 = ycrv0 + t1 * tMid;
        y12 = ycrv1 + t2 * tMid;
        y012 = y01 + (y12 - y01) * tMid;
        y0123 = y012 + (y12 + (ycrv2 + t3 * tMid - y12) * tMid - y012) * tMid;
        if (y0123 === 0)
          return tMid;
        if (y0123 < 0)
          tNeg = tMid;
        else
          tPos = tMid;
      } while (Math.abs(tPos - tNeg) > 0.0000152587890625);
      return (tNeg + tPos) / 2;
    },
    evalCubicPts(c0, c1, c2, c3, t) {
      return (((c3 + 3 * (c1 - c2) - c0) * t + 3 * (c2 - c1 - c1 + c0)) * t + 3 * (c1 - c0)) * t + c0;
    },
    SurfacePath$() {
      var t1 = new A.SurfacePath(A.PathRef$(), B.PathFillType_0);
      t1._resetFields$0();
      return t1;
    },
    _computeMinScale(radius1, radius2, limit, scale) {
      var totalRadius = radius1 + radius2;
      if (totalRadius <= limit)
        return scale;
      return Math.min(limit / totalRadius, scale);
    },
    PathIterator$(pathRef, forceClose) {
      var t1 = new A.PathIterator(pathRef, true, pathRef._fVerbsLength);
      if (pathRef.fBoundsIsDirty)
        pathRef._computeBounds$0();
      if (!pathRef.fIsFinite)
        t1._verbIndex = pathRef._fVerbsLength;
      return t1;
    },
    PathRef$() {
      var t1 = new Float32Array(16);
      t1 = new A.PathRef(t1, new Uint8Array(8));
      t1._fVerbsCapacity = t1._fPointsCapacity = 8;
      t1.fRRectOrOvalStartIdx = 172;
      return t1;
    },
    PathRef__fPointsFromSource(source, offsetX, offsetY) {
      var i, t1,
        sourceLength = source._fPointsLength,
        sourceCapacity = source._fPointsCapacity,
        dest = new Float32Array(sourceCapacity * 2),
        sourcePoints = source.fPoints,
        len = sourceLength * 2;
      for (i = 0; i < len; i += 2) {
        dest[i] = sourcePoints[i] + offsetX;
        t1 = i + 1;
        dest[t1] = sourcePoints[t1] + offsetY;
      }
      return dest;
    },
    pathToSvg(pathRef, offsetX, offsetY) {
      var outPts, verb, w, points, len, i, t1, t2,
        buffer = new A.StringBuffer(""),
        iter = new A.PathRefIterator(pathRef);
      iter.PathRefIterator$1(pathRef);
      outPts = new Float32Array(8);
      for (; verb = iter.next$1(0, outPts), verb !== 6;)
        switch (verb) {
          case 0:
            buffer._contents += "M " + A.S(outPts[0] + offsetX) + " " + A.S(outPts[1] + offsetY);
            break;
          case 1:
            buffer._contents += "L " + A.S(outPts[2] + offsetX) + " " + A.S(outPts[3] + offsetY);
            break;
          case 4:
            buffer._contents += "C " + A.S(outPts[2] + offsetX) + " " + A.S(outPts[3] + offsetY) + " " + A.S(outPts[4] + offsetX) + " " + A.S(outPts[5] + offsetY) + " " + A.S(outPts[6] + offsetX) + " " + A.S(outPts[7] + offsetY);
            break;
          case 2:
            buffer._contents += "Q " + A.S(outPts[2] + offsetX) + " " + A.S(outPts[3] + offsetY) + " " + A.S(outPts[4] + offsetX) + " " + A.S(outPts[5] + offsetY);
            break;
          case 3:
            w = pathRef._conicWeights[iter._conicWeightIndex];
            points = new A.Conic(outPts[0], outPts[1], outPts[2], outPts[3], outPts[4], outPts[5], w).toQuads$0();
            len = points.length;
            for (i = 1; i < len; i += 2) {
              t1 = points[i];
              t2 = points[i + 1];
              buffer._contents += "Q " + A.S(t1._dx + offsetX) + " " + A.S(t1._dy + offsetY) + " " + A.S(t2._dx + offsetX) + " " + A.S(t2._dy + offsetY);
            }
            break;
          case 5:
            buffer._contents += "Z";
            break;
          default:
            throw A.wrapException(A.UnimplementedError$("Unknown path verb " + verb));
        }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    SPath_between(a, b, c) {
      return (a - b) * (c - b) <= 0;
    },
    SPath_scalarSignedAsInt(x) {
      var t1;
      if (x < 0)
        t1 = -1;
      else
        t1 = x > 0 ? 1 : 0;
      return t1;
    },
    validUnitDivide(numer, denom) {
      var r;
      if (numer < 0) {
        numer = -numer;
        denom = -denom;
      }
      if (denom === 0 || numer === 0 || numer >= denom)
        return null;
      r = numer / denom;
      if (isNaN(r))
        return null;
      if (r === 0)
        return null;
      return r;
    },
    isRRectOval(rrect) {
      var t3, t4,
        t1 = rrect.tlRadiusX,
        t2 = rrect.trRadiusX;
      if (t1 + t2 !== rrect.right - rrect.left)
        return false;
      t3 = rrect.tlRadiusY;
      t4 = rrect.trRadiusY;
      if (t3 + t4 !== rrect.bottom - rrect.top)
        return false;
      if (t1 !== rrect.blRadiusX || t2 !== rrect.brRadiusX || t3 !== rrect.blRadiusY || t4 !== rrect.brRadiusY)
        return false;
      return true;
    },
    SkQuadCoefficients$(x0, y0, x1, y1, x2, y2) {
      return new A.SkQuadCoefficients(x2 - 2 * x1 + x0, y2 - 2 * y1 + y0, 2 * (x1 - x0), 2 * (y1 - y0), x0, y0);
    },
    PathWinding__checkOnCurve(x, y, startX, startY, endX, endY) {
      if (startY === endY)
        return A.SPath_between(startX, x, endX) && x !== endX;
      else
        return x === startX && y === startY;
    },
    PathWinding__chopQuadAtExtrema(buffer) {
      var p01x, p01y, p12x, p12y,
        x0 = buffer[0],
        y0 = buffer[1],
        x1 = buffer[2],
        y1 = buffer[3],
        x2 = buffer[4],
        y2 = buffer[5],
        t1 = y0 - y1,
        tValueAtExtrema = A.validUnitDivide(t1, t1 - y1 + y2);
      if (tValueAtExtrema != null) {
        p01x = x0 + tValueAtExtrema * (x1 - x0);
        p01y = y0 + tValueAtExtrema * (y1 - y0);
        p12x = x1 + tValueAtExtrema * (x2 - x1);
        p12y = y1 + tValueAtExtrema * (y2 - y1);
        buffer[2] = p01x;
        buffer[3] = p01y;
        buffer[4] = p01x + tValueAtExtrema * (p12x - p01x);
        buffer[5] = p01y + tValueAtExtrema * (p12y - p01y);
        buffer[6] = p12x;
        buffer[7] = p12y;
        buffer[8] = x2;
        buffer[9] = y2;
        return 1;
      }
      buffer[3] = Math.abs(t1) < Math.abs(y1 - y2) ? y0 : y2;
      return 0;
    },
    PathWinding__isQuadMonotonic(quad) {
      var y0 = quad[1],
        y1 = quad[3],
        y2 = quad[5];
      if (y0 === y1)
        return true;
      if (y0 < y1)
        return y1 <= y2;
      else
        return y1 >= y2;
    },
    tangentLine(pts, x, y, tangents) {
      var x0, x1, dx, dy,
        y0 = pts[1],
        y1 = pts[3];
      if (!A.SPath_between(y0, y, y1))
        return;
      x0 = pts[0];
      x1 = pts[2];
      if (!A.SPath_between(x0, x, x1))
        return;
      dx = x1 - x0;
      dy = y1 - y0;
      if (!(Math.abs((x - x0) * dy - dx * (y - y0)) < 0.000244140625))
        return;
      tangents.push(new A.Offset(dx, dy));
    },
    tangentQuad(pts, x, y, tangents) {
      var x0, x1, x2, roots, n, $A, $B, index, t1, t,
        y0 = pts[1],
        y1 = pts[3],
        y2 = pts[5];
      if (!A.SPath_between(y0, y, y1) && !A.SPath_between(y1, y, y2))
        return;
      x0 = pts[0];
      x1 = pts[2];
      x2 = pts[4];
      if (!A.SPath_between(x0, x, x1) && !A.SPath_between(x1, x, x2))
        return;
      roots = new A.QuadRoots();
      n = roots.findRoots$3(y0 - 2 * y1 + y2, 2 * (y1 - y0), y0 - y);
      for ($A = x2 - 2 * x1 + x0, $B = 2 * (x1 - x0), index = 0; index < n; ++index) {
        if (index === 0) {
          t1 = roots.root0;
          t1.toString;
          t = t1;
        } else {
          t1 = roots.root1;
          t1.toString;
          t = t1;
        }
        if (!(Math.abs(x - (($A * t + $B) * t + x0)) < 0.000244140625))
          continue;
        tangents.push(A._evalQuadTangentAt(x0, y0, x1, y1, x2, y2, t));
      }
    },
    _evalQuadTangentAt(x0, y0, x1, y1, x2, y2, t) {
      var t1, bx, by;
      if (!(t === 0 && x0 === x1 && y0 === y1))
        t1 = t === 1 && x1 === x2 && y1 === y2;
      else
        t1 = true;
      if (t1)
        return new A.Offset(x2 - x0, y2 - y0);
      bx = x1 - x0;
      by = y1 - y0;
      return new A.Offset(((x2 - x1 - bx) * t + bx) * 2, ((y2 - y1 - by) * t + by) * 2);
    },
    tangentConic(pts, x, y, weight, tangents) {
      var x0, x1, x2, $B, quadRoots, n, src2w, $A, B0, A0, index, t1, t,
        y0 = pts[1],
        y1 = pts[3],
        y2 = pts[5];
      if (!A.SPath_between(y0, y, y1) && !A.SPath_between(y1, y, y2))
        return;
      x0 = pts[0];
      x1 = pts[2];
      x2 = pts[4];
      if (!A.SPath_between(x0, x, x1) && !A.SPath_between(x1, x, x2))
        return;
      $B = y1 * weight - y * weight + y;
      quadRoots = new A.QuadRoots();
      n = quadRoots.findRoots$3(y2 + (y0 - 2 * $B), 2 * ($B - y0), y0 - y);
      for (src2w = x1 * weight, $A = x2 - 2 * src2w + x0, $B = 2 * (src2w - x0), B0 = 2 * (weight - 1), A0 = -B0, index = 0; index < n; ++index) {
        if (index === 0) {
          t1 = quadRoots.root0;
          t1.toString;
          t = t1;
        } else {
          t1 = quadRoots.root1;
          t1.toString;
          t = t1;
        }
        if (!(Math.abs(x - (($A * t + $B) * t + x0) / ((A0 * t + B0) * t + 1)) < 0.000244140625))
          continue;
        tangents.push(new A.Conic(x0, y0, x1, y1, x2, y2, weight).evalTangentAt$1(t));
      }
    },
    tangentCubic(pts, x, y, tangents) {
      var x0, x1, x2, x3, dst, n, i, bufferPos, t,
        y3 = pts[7],
        y0 = pts[1],
        y1 = pts[3],
        y2 = pts[5];
      if (!A.SPath_between(y0, y, y1) && !A.SPath_between(y1, y, y2) && !A.SPath_between(y2, y, y3))
        return;
      x0 = pts[0];
      x1 = pts[2];
      x2 = pts[4];
      x3 = pts[6];
      if (!A.SPath_between(x0, x, x1) && !A.SPath_between(x1, x, x2) && !A.SPath_between(x2, x, x3))
        return;
      dst = new Float32Array(20);
      n = A.chopCubicAtYExtrema(pts, dst);
      for (i = 0; i <= n; ++i) {
        bufferPos = i * 6;
        t = A.chopMonoAtY(dst, bufferPos, y);
        if (t == null)
          continue;
        if (!(Math.abs(x - A.evalCubicPts(dst[bufferPos], dst[bufferPos + 2], dst[bufferPos + 4], dst[bufferPos + 6], t)) < 0.000244140625))
          continue;
        tangents.push(A._evalCubicTangentAt(dst, bufferPos, t));
      }
    },
    _evalCubicTangentAt(points, bufferPos, t) {
      var t2, dx, dy, coeff,
        y3 = points[7 + bufferPos],
        y0 = points[1 + bufferPos],
        y1 = points[3 + bufferPos],
        y2 = points[5 + bufferPos],
        x0 = points[bufferPos],
        x1 = points[2 + bufferPos],
        x2 = points[4 + bufferPos],
        x3 = points[6 + bufferPos],
        t1 = t === 0;
      if (!(t1 && x0 === x1 && y0 === y1))
        t2 = t === 1 && x2 === x3 && y2 === y3;
      else
        t2 = true;
      if (t2) {
        if (t1) {
          dx = x2 - x0;
          dy = y2 - y0;
        } else {
          dx = x3 - x1;
          dy = y3 - y1;
        }
        if (dx === 0 && dy === 0) {
          dx = x3 - x0;
          dy = y3 - y0;
        }
        return new A.Offset(dx, dy);
      } else {
        coeff = A.SkQuadCoefficients$(x3 + 3 * (x1 - x2) - x0, y3 + 3 * (y1 - y2) - y0, 2 * (x2 - 2 * x1 + x0), 2 * (y2 - 2 * y1 + y0), x1 - x0, y1 - y0);
        return new A.Offset(coeff.evalX$1(t), coeff.evalY$1(t));
      }
    },
    pathToSvgClipPath(path, offsetX, offsetY, scaleX, scaleY) {
      var root, t1, t2, defs, clipId, clipPath, svgPath,
        _s26_ = "http://www.w3.org/2000/svg";
      $._clipIdCounter = $._clipIdCounter + 1;
      root = type$.SvgSvgElement._as($.$get$kSvgResourceHeader().cloneNode(false));
      t1 = document;
      t2 = type$.SvgElement;
      defs = type$.DefsElement._as(t2._as(B.HtmlDocument_methods.createElementNS$2(t1, _s26_, "defs")));
      root.appendChild(defs);
      clipId = "svgClip" + $._clipIdCounter;
      clipPath = type$.ClipPathElement._as(t2._as(B.HtmlDocument_methods.createElementNS$2(t1, _s26_, "clipPath")));
      defs.appendChild(clipPath);
      clipPath.id = clipId;
      svgPath = type$.PathElement._as(t2._as(B.HtmlDocument_methods.createElementNS$2(t1, _s26_, "path")));
      clipPath.appendChild(svgPath);
      svgPath.setAttribute("fill", "#FFFFFF");
      t1 = $.$get$_browserEngine();
      if (t1 !== B.BrowserEngine_2) {
        clipPath.setAttribute("clipPathUnits", "objectBoundingBox");
        svgPath.setAttribute("transform", "scale(" + A.S(scaleX) + ", " + A.S(scaleY) + ")");
      }
      svgPath.setAttribute("d", A.pathToSvg(type$.SurfacePath._as(path).pathRef, offsetX, offsetY));
      return root;
    },
    reduceCanvasMemoryUsage() {
      var i, t1, t2,
        canvasCount = $._recycledCanvases.length;
      for (i = 0; i < canvasCount; ++i) {
        t1 = $._recycledCanvases[i]._canvasPool;
        t2 = $.$get$_browserEngine();
        if (t2 === B.BrowserEngine_1 && t1.__engine$_canvas != null) {
          t2 = t1.__engine$_canvas;
          t2.height = 0;
          t2.width = 0;
        }
        t1._clearActiveCanvasList$0();
      }
      B.JSArray_methods.set$length($._recycledCanvases, 0);
    },
    _recycleCanvas(canvas) {
      if (canvas != null && B.JSArray_methods.contains$1($._recycledCanvases, canvas))
        return;
      if (canvas instanceof A.BitmapCanvas) {
        canvas._elementCache = null;
        if (canvas._devicePixelRatio === A.EnginePlatformDispatcher_browserDevicePixelRatio()) {
          $._recycledCanvases.push(canvas);
          if ($._recycledCanvases.length > 30)
            B.JSArray_methods.removeAt$1($._recycledCanvases, 0)._canvasPool.dispose$0(0);
        } else
          canvas._canvasPool.dispose$0(0);
      }
    },
    PersistedPicture__predictTrend(delta, extent) {
      if (delta <= 0)
        return extent * 0.1;
      else
        return Math.min(Math.max(extent * 0.5, delta * 10), extent);
    },
    _computePixelDensity(transform, width, height) {
      var m, t1, t2, minX, t3, minY, t4, t5, t6, t7, wp, t8, t9, t10, t11, xp, t12, t13, t14, t15, yp, minX0, maxX, minY0, maxY, scale;
      if (transform == null || transform.isIdentityOrTranslation$0())
        return 1;
      m = transform.__engine$_m4storage;
      t1 = m[12];
      t2 = m[15];
      minX = t1 * t2;
      t3 = m[13];
      minY = t3 * t2;
      t4 = m[3];
      t5 = t4 * width;
      t6 = m[7];
      t7 = t6 * height;
      wp = 1 / (t5 + t7 + t2);
      t8 = m[0];
      t9 = t8 * width;
      t10 = m[4];
      t11 = t10 * height;
      xp = (t9 + t11 + t1) * wp;
      t12 = m[1];
      t13 = t12 * width;
      t14 = m[5];
      t15 = t14 * height;
      yp = (t13 + t15 + t3) * wp;
      minX0 = Math.min(minX, xp);
      maxX = Math.max(minX, xp);
      minY0 = Math.min(minY, yp);
      maxY = Math.max(minY, yp);
      wp = 1 / (t4 * 0 + t7 + t2);
      xp = (t8 * 0 + t11 + t1) * wp;
      yp = (t12 * 0 + t15 + t3) * wp;
      minX = Math.min(minX0, xp);
      maxX = Math.max(maxX, xp);
      minY = Math.min(minY0, yp);
      maxY = Math.max(maxY, yp);
      wp = 1 / (t5 + t6 * 0 + t2);
      xp = (t9 + t10 * 0 + t1) * wp;
      yp = (t13 + t14 * 0 + t3) * wp;
      minX = Math.min(minX, xp);
      maxX = Math.max(maxX, xp);
      minY = Math.min(minY, yp);
      scale = Math.min((maxX - minX) / width, (Math.max(maxY, yp) - minY) / height);
      if (scale < 1e-9 || scale === 1)
        return 1;
      if (scale > 1) {
        scale = Math.min(4, B.JSNumber_methods.ceil$0(scale / 2) * 2);
        t1 = width * height;
        if (t1 * scale * scale > 4194304 && scale > 2)
          scale = 3355443.2 / t1;
      } else
        scale = Math.max(2 / B.JSNumber_methods.floor$0(2 / scale), 0.0001);
      return scale;
    },
    _measureBorderRadius(x, y) {
      var clampedX = x < 0 ? 0 : x,
        clampedY = y < 0 ? 0 : y;
      return clampedX * clampedX + clampedY * clampedY;
    },
    _getPaintSpread(paint) {
      var t2,
        t1 = paint._paintData,
        maskFilter = t1.maskFilter,
        spread = maskFilter != null ? 0 + maskFilter._sigma * 2 : 0;
      t1 = t1.strokeWidth;
      t2 = t1 == null;
      if ((t2 ? 0 : t1) !== 0)
        spread += (t2 ? 0 : t1) * 0.70710678118;
      return spread;
    },
    NormalizedGradient_NormalizedGradient(colors, stops) {
      var colorCount, t1, addFirst, addLast, normalizedCount, t2, bias, scale, t3, thresholds, targetIndex, thresholdIndex, _i, targetIndex0, t4, thresholdIndex0, lastColorIndex, i, t, colorIndex;
      if (stops == null)
        stops = B.List_0_1;
      colorCount = colors.length;
      t1 = B.JSArray_methods.any$1(colors, new A.NormalizedGradient_NormalizedGradient_closure());
      addFirst = stops[0] !== 0;
      addLast = B.JSArray_methods.get$last(stops) !== 1;
      normalizedCount = addFirst ? colorCount + 1 : colorCount;
      if (addLast)
        ++normalizedCount;
      t2 = normalizedCount * 4;
      bias = new Float32Array(t2);
      scale = new Float32Array(t2);
      t2 = normalizedCount - 1;
      t3 = B.JSInt_methods._tdivFast$1(t2, 4);
      thresholds = new Float32Array(4 * (t3 + 1));
      if (addFirst) {
        t3 = colors[0].value;
        bias[0] = (t3 >>> 16 & 255) / 255;
        bias[1] = (t3 >>> 8 & 255) / 255;
        bias[2] = (t3 & 255) / 255;
        bias[3] = (t3 >>> 24 & 255) / 255;
        thresholds[0] = 0;
        targetIndex = 4;
        thresholdIndex = 1;
      } else {
        targetIndex = 0;
        thresholdIndex = 0;
      }
      for (t3 = colors.length, _i = 0; _i < t3; ++_i) {
        targetIndex0 = targetIndex + 1;
        t4 = colors[_i].value;
        bias[targetIndex] = (t4 >>> 16 & 255) / 255;
        targetIndex = targetIndex0 + 1;
        bias[targetIndex0] = (t4 >>> 8 & 255) / 255;
        targetIndex0 = targetIndex + 1;
        bias[targetIndex] = (t4 & 255) / 255;
        targetIndex = targetIndex0 + 1;
        bias[targetIndex0] = (t4 >>> 24 & 255) / 255;
      }
      for (t3 = stops.length, _i = 0; _i < t3; ++_i, thresholdIndex = thresholdIndex0) {
        thresholdIndex0 = thresholdIndex + 1;
        thresholds[thresholdIndex] = stops[_i];
      }
      if (addLast) {
        targetIndex0 = targetIndex + 1;
        t3 = B.JSArray_methods.get$last(colors).value;
        bias[targetIndex] = (t3 >>> 16 & 255) / 255;
        targetIndex = targetIndex0 + 1;
        bias[targetIndex0] = (t3 >>> 8 & 255) / 255;
        bias[targetIndex] = (t3 & 255) / 255;
        bias[targetIndex + 1] = (t3 >>> 24 & 255) / 255;
        thresholds[thresholdIndex] = 1;
      }
      lastColorIndex = 4 * t2;
      for (i = 0; i < lastColorIndex; ++i) {
        thresholdIndex = i >>> 2;
        scale[i] = (bias[i + 4] - bias[i]) / (thresholds[thresholdIndex + 1] - thresholds[thresholdIndex]);
      }
      scale[lastColorIndex] = 0;
      scale[lastColorIndex + 1] = 0;
      scale[lastColorIndex + 2] = 0;
      scale[lastColorIndex + 3] = 0;
      for (i = 0; i < normalizedCount; ++i) {
        t = thresholds[i];
        colorIndex = i * 4;
        bias[colorIndex] = bias[colorIndex] - t * scale[colorIndex];
        t2 = colorIndex + 1;
        bias[t2] = bias[t2] - t * scale[t2];
        t2 = colorIndex + 2;
        bias[t2] = bias[t2] - t * scale[t2];
        t2 = colorIndex + 3;
        bias[t2] = bias[t2] - t * scale[t2];
      }
      return new A.NormalizedGradient(thresholds, bias, scale, normalizedCount, !t1);
    },
    writeUnrolledBinarySearch(method, start, end, biasName, probe, scaleName, sourcePrefix) {
      var biasSource, scaleSource, mid, t1, thresholdAtMid;
      if (start === end) {
        biasSource = biasName + "_" + start;
        method.addStatement$1(biasName + " = " + biasSource + ";");
        scaleSource = scaleName + "_" + start;
        method.addStatement$1(scaleName + " = " + scaleSource + ";");
      } else {
        mid = B.JSInt_methods._tdivFast$1(start + end, 2);
        t1 = mid + 1;
        thresholdAtMid = sourcePrefix + "_" + B.JSInt_methods._tdivFast$1(t1, 4) + ("." + "xyzw"[B.JSInt_methods.$mod(t1, 4)]);
        method.addStatement$1("if (" + probe + " < " + thresholdAtMid + ") {");
        ++method._indentLevel;
        A.writeUnrolledBinarySearch(method, start, mid, biasName, probe, scaleName, sourcePrefix);
        --method._indentLevel;
        method.addStatement$1("} else {");
        ++method._indentLevel;
        A.writeUnrolledBinarySearch(method, t1, end, biasName, probe, scaleName, sourcePrefix);
        --method._indentLevel;
        method.addStatement$1("}");
      }
    },
    _addColorStopsToCanvasGradient(gradient, colors, colorStops, isDecal) {
      var scale, offset, t1, i, colorStop,
        _s9_ = "#00000000";
      if (isDecal) {
        gradient.addColorStop(0, _s9_);
        scale = 0.999;
        offset = 0.0005000000000000004;
      } else {
        scale = 1;
        offset = 0;
      }
      if (colorStops == null) {
        t1 = A.colorToCssString(colors[0]);
        t1.toString;
        gradient.addColorStop(offset, t1);
        t1 = A.colorToCssString(colors[1]);
        t1.toString;
        gradient.addColorStop(1 - offset, t1);
      } else
        for (i = 0; i < colors.length; ++i) {
          colorStop = B.JSNumber_methods.clamp$2(colorStops[i], 0, 1);
          t1 = A.colorToCssString(colors[i]);
          t1.toString;
          gradient.addColorStop(colorStop * scale + offset, t1);
        }
      if (isDecal)
        gradient.addColorStop(1, _s9_);
    },
    _writeSharedGradientShader(builder, method, gradient, tileMode) {
      var t1, t2, t3, i, probeName,
        _s8_ = "tiled_st";
      method.addStatement$1("vec4 bias;");
      method.addStatement$1("vec4 scale;");
      for (t1 = gradient.thresholdCount, t2 = t1 - 1, t3 = B.JSInt_methods._tdivFast$1(t2, 4) + 1, i = 0; i < t3; ++i)
        builder.addUniform$2$name(11, "threshold_" + i);
      for (i = 0; i < t1; ++i) {
        builder.addUniform$2$name(11, "bias_" + i);
        builder.addUniform$2$name(11, "scale_" + i);
      }
      switch (tileMode.index) {
        case 0:
          method.addStatement$1("float tiled_st = clamp(st, 0.0, 1.0);");
          probeName = _s8_;
          break;
        case 3:
          probeName = "st";
          break;
        case 1:
          method.addStatement$1("float tiled_st = fract(st);");
          probeName = _s8_;
          break;
        case 2:
          method.addStatement$1("float t_1 = (st - 1.0);");
          method.addStatement$1("float tiled_st = abs((t_1 - 2.0 * floor(t_1 * 0.5)) - 1.0);");
          probeName = _s8_;
          break;
        default:
          probeName = "st";
      }
      A.writeUnrolledBinarySearch(method, 0, t2, "bias", probeName, "scale", "threshold");
      return probeName;
    },
    ShaderBuilder_typeToString(dataType) {
      switch (dataType) {
        case 0:
          return "bool";
        case 1:
          return "int";
        case 2:
          return "float";
        case 3:
          return "bvec2";
        case 4:
          return "bvec3";
        case 5:
          return "bvec4";
        case 6:
          return "ivec2";
        case 7:
          return "ivec3";
        case 8:
          return "ivec4";
        case 9:
          return "vec2";
        case 10:
          return "vec3";
        case 11:
          return "vec4";
        case 12:
          return "mat2";
        case 13:
          return "mat3";
        case 14:
          return "mat4";
        case 15:
          return "sampler1D";
        case 16:
          return "sampler2D";
        case 17:
          return "sampler3D";
        case 18:
          return "void";
      }
      throw A.wrapException(A.ArgumentError$(null, null));
    },
    commitScene(scene) {
      var request, _i, i,
        t1 = $.paintQueue,
        t2 = t1.length;
      if (t2 !== 0)
        try {
          if (t2 > 1)
            B.JSArray_methods.sort$1(t1, new A.commitScene_closure());
          for (t1 = $.paintQueue, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
            request = t1[_i];
            request.paintCallback$0();
          }
        } finally {
          $.paintQueue = A._setArrayType([], type$.JSArray_PaintRequest);
        }
      t1 = $.retainedSurfaces;
      t2 = t1.length;
      if (t2 !== 0) {
        for (i = 0; i < t2; ++i)
          t1[i].__engine$_state = B.PersistedSurfaceState_1;
        $.retainedSurfaces = A._setArrayType([], type$.JSArray_PersistedSurface);
      }
      for (t1 = $.frameReferences, i = 0; i < t1.length; ++i)
        t1[i].value = null;
      $.frameReferences = A._setArrayType([], type$.JSArray_FrameReference_dynamic);
    },
    PersistedContainerSurface__discardActiveChildren(surface) {
      var i, child,
        t1 = surface.__engine$_children,
        $length = t1.length;
      for (i = 0; i < $length; ++i) {
        child = t1[i];
        if (child.__engine$_state === B.PersistedSurfaceState_1)
          child.discard$0();
      }
    },
    registerHotRestartListener(listener) {
      $._hotRestartListeners.push(listener);
    },
    initializeEngine() {
      var t1 = {};
      if ($._engineInitialized)
        return;
      A._addUrlStrategyListener();
      A.registerExtension("ext.flutter.disassemble", new A.initializeEngine_closure());
      $._engineInitialized = true;
      if ($._flutterViewEmbedder == null)
        $._flutterViewEmbedder = A.FlutterViewEmbedder$();
      t1.waitingForAnimation = false;
      $.scheduleFrameCallback = new A.initializeEngine_closure0(t1);
      t1 = $.$get$_operatingSystem();
      if ($.Keyboard__instance == null)
        $.Keyboard__instance = A.Keyboard$_(t1 === B.OperatingSystem_4);
      if ($.MouseCursor__instance == null)
        $.MouseCursor__instance = new A.MouseCursor();
    },
    _addUrlStrategyListener() {
      self._flutter_web_set_location_strategy = A.allowInterop(new A._addUrlStrategyListener_closure());
      $._hotRestartListeners.push(new A._addUrlStrategyListener_closure0());
    },
    toMatrix32(matrix64) {
      var matrix32 = new Float32Array(16);
      matrix32[15] = matrix64[15];
      matrix32[14] = matrix64[14];
      matrix32[13] = matrix64[13];
      matrix32[12] = matrix64[12];
      matrix32[11] = matrix64[11];
      matrix32[10] = matrix64[10];
      matrix32[9] = matrix64[9];
      matrix32[8] = matrix64[8];
      matrix32[7] = matrix64[7];
      matrix32[6] = matrix64[6];
      matrix32[5] = matrix64[5];
      matrix32[4] = matrix64[4];
      matrix32[3] = matrix64[3];
      matrix32[2] = matrix64[2];
      matrix32[1] = matrix64[1];
      matrix32[0] = matrix64[0];
      return matrix32;
    },
    Keyboard$_(_onMacOs) {
      var t1 = new A.Keyboard(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Timer), _onMacOs);
      t1.Keyboard$_$1(_onMacOs);
      return t1;
    },
    _noopCallback(data) {
    },
    createHistoryForExistingState(urlStrategy) {
      var state;
      if (urlStrategy != null) {
        state = urlStrategy.getState$0(0);
        if (A.SingleEntryBrowserHistory__isOriginEntry(state) || A.SingleEntryBrowserHistory__isFlutterEntry(state))
          return A.SingleEntryBrowserHistory$(urlStrategy);
      }
      return A.MultiEntriesBrowserHistory$(urlStrategy);
    },
    MultiEntriesBrowserHistory$(urlStrategy) {
      var t1 = new A.MultiEntriesBrowserHistory(urlStrategy);
      t1.MultiEntriesBrowserHistory$1$urlStrategy(urlStrategy);
      return t1;
    },
    SingleEntryBrowserHistory$(urlStrategy) {
      var t1 = new A.SingleEntryBrowserHistory(urlStrategy, A.LinkedHashMap_LinkedHashMap$_literal(["flutter", true], type$.String, type$.bool));
      t1.SingleEntryBrowserHistory$1$urlStrategy(urlStrategy);
      return t1;
    },
    SingleEntryBrowserHistory__isOriginEntry(state) {
      return type$.Map_dynamic_dynamic._is(state) && J.$eq$(J.$index$asx(state, "origin"), true);
    },
    SingleEntryBrowserHistory__isFlutterEntry(state) {
      return type$.Map_dynamic_dynamic._is(state) && J.$eq$(J.$index$asx(state, "flutter"), true);
    },
    EnginePlatformDispatcher_browserDevicePixelRatio() {
      var ratio = window.devicePixelRatio;
      return ratio === 0 ? 1 : ratio;
    },
    EnginePlatformDispatcher__zonedPlatformMessageResponseCallback(callback) {
      return new A.EnginePlatformDispatcher__zonedPlatformMessageResponseCallback_closure($.Zone__current, callback);
    },
    EnginePlatformDispatcher_parseBrowserLanguages() {
      var locales, t1, t2, parts,
        languages = window.navigator.languages;
      if (languages == null || J.get$isEmpty$asx(languages))
        return B.List_Locale_en_US;
      locales = A._setArrayType([], type$.JSArray_Locale);
      for (t1 = J.get$iterator$ax(languages); t1.moveNext$0();) {
        t2 = t1.get$current(t1);
        parts = t2.split("-");
        if (parts.length > 1)
          locales.push(new A.Locale(B.JSArray_methods.get$first(parts), B.JSArray_methods.get$last(parts)));
        else
          locales.push(new A.Locale(t2, null));
      }
      return locales;
    },
    _handleWebTestEnd2EndMessage(codec, data) {
      var decoded = codec.decodeMethodCall$1(data),
        ratio = A.double_parse(A._asString(decoded.$arguments));
      switch (decoded.method) {
        case "setDevicePixelRatio":
          $.$get$window()._debugDevicePixelRatio = ratio;
          $.$get$EnginePlatformDispatcher__instance()._onMetricsChanged.call$0();
          return true;
      }
      return false;
    },
    invoke(callback, zone) {
      if (callback == null)
        return;
      if (zone === $.Zone__current)
        callback.call$0();
      else
        zone.runGuarded$1(callback);
    },
    invoke1(callback, zone, arg) {
      if (callback == null)
        return;
      if (zone === $.Zone__current)
        callback.call$1(arg);
      else
        zone.runUnaryGuarded$2(callback, arg);
    },
    invoke2(callback, zone, arg1, arg2) {
      if (zone === $.Zone__current)
        callback.call$2(arg1, arg2);
      else
        zone.runGuarded$1(new A.invoke2_closure(callback, arg1, arg2));
    },
    invoke3(callback, zone, arg1, arg2, arg3) {
      if (callback == null)
        return;
      if (zone === $.Zone__current)
        callback.call$3(arg1, arg2, arg3);
      else
        zone.runGuarded$1(new A.invoke3_closure(callback, arg1, arg2, arg3));
    },
    findBrowserTextScaleFactor() {
      var computedStyleMap, fontSizeObject, fontSize,
        t1 = document.documentElement;
      t1.toString;
      if ("computedStyleMap" in t1) {
        computedStyleMap = t1.computedStyleMap();
        if (computedStyleMap != null) {
          fontSizeObject = computedStyleMap.get("font-size");
          fontSize = fontSizeObject != null ? fontSizeObject.value : null;
        } else
          fontSize = null;
      } else
        fontSize = null;
      if (fontSize == null)
        fontSize = A.parseFloat(J.getComputedStyle$0$x(t1).fontSize);
      return (fontSize == null ? 16 : fontSize) / 16;
    },
    convertButtonToButtons(button) {
      switch (button) {
        case 0:
          return 1;
        case 1:
          return 4;
        case 2:
          return 2;
        default:
          return B.JSInt_methods.$shl(1, button);
      }
    },
    _BaseAdapter__eventTimeStampToDuration(milliseconds) {
      var ms = B.JSNumber_methods.toInt$0(milliseconds);
      return A.Duration$(B.JSNumber_methods.toInt$0((milliseconds - ms) * 1000), ms);
    },
    timeAction($name, action) {
      var t1 = action.call$0();
      return t1;
    },
    frameTimingsOnVsync() {
      if ($.$get$EnginePlatformDispatcher__instance()._onReportTimings == null)
        return;
      $._vsyncStartMicros = B.JSNumber_methods.toInt$0(window.performance.now() * 1000);
    },
    frameTimingsOnBuildStart() {
      if ($.$get$EnginePlatformDispatcher__instance()._onReportTimings == null)
        return;
      $._buildStartMicros = B.JSNumber_methods.toInt$0(window.performance.now() * 1000);
    },
    frameTimingsOnBuildFinish() {
      if ($.$get$EnginePlatformDispatcher__instance()._onReportTimings == null)
        return;
      $._buildFinishMicros = B.JSNumber_methods.toInt$0(window.performance.now() * 1000);
    },
    frameTimingsOnRasterStart() {
      if ($.$get$EnginePlatformDispatcher__instance()._onReportTimings == null)
        return;
      $._rasterStartMicros = B.JSNumber_methods.toInt$0(window.performance.now() * 1000);
    },
    frameTimingsOnRasterFinish() {
      var now, t2,
        t1 = $.$get$EnginePlatformDispatcher__instance();
      if (t1._onReportTimings == null)
        return;
      now = $._rasterFinishMicros = B.JSNumber_methods.toInt$0(window.performance.now() * 1000);
      $._frameTimings.push(new A.FrameTiming(A._setArrayType([$._vsyncStartMicros, $._buildStartMicros, $._buildFinishMicros, $._rasterStartMicros, now, now, 0, 0, 0, 0, 1], type$.JSArray_int)));
      $._rasterFinishMicros = $._rasterStartMicros = $._buildFinishMicros = $._buildStartMicros = $._vsyncStartMicros = -1;
      if (now - $.$get$_frameTimingsLastSubmitTime() > 100000) {
        $._frameTimingsLastSubmitTime = now;
        t2 = $._frameTimings;
        A.invoke1(t1._onReportTimings, t1._onReportTimingsZone, t2);
        $._frameTimings = A._setArrayType([], type$.JSArray_FrameTiming);
      }
    },
    _nowMicros() {
      return B.JSNumber_methods.toInt$0(window.performance.now() * 1000);
    },
    createPlainJsObject(properties) {
      var t1 = A.JsObject_JsObject$jsify(properties);
      return t1;
    },
    parseFloat(source) {
      var result = self.parseFloat.call$1(source);
      if (result == null || isNaN(result))
        return null;
      return result;
    },
    parseFontSize(element) {
      var computedStyleMap, fontSizeObject, fontSize;
      if ("computedStyleMap" in element) {
        computedStyleMap = element.computedStyleMap();
        if (computedStyleMap != null) {
          fontSizeObject = computedStyleMap.get("font-size");
          fontSize = fontSizeObject != null ? fontSizeObject.value : null;
        } else
          fontSize = null;
      } else
        fontSize = null;
      return fontSize == null ? A.parseFloat(J.getComputedStyle$0$x(element).fontSize) : fontSize;
    },
    tryCreateCanvasElement(width, height) {
      var exception,
        canvas = document.createElement("CANVAS");
      if (canvas == null)
        return null;
      try {
        canvas.width = width;
        canvas.height = height;
      } catch (exception) {
        return null;
      }
      return canvas;
    },
    AccessibilityAnnouncements$_() {
      var t1 = new A.AccessibilityAnnouncements();
      t1.AccessibilityAnnouncements$_$0();
      return t1;
    },
    _checkableKindFromSemanticsFlag(semanticsObject) {
      var t1 = semanticsObject.__engine$_flags;
      if ((t1 & 256) !== 0)
        return B._CheckableKind_1;
      else if ((t1 & 65536) !== 0)
        return B._CheckableKind_2;
      else
        return B._CheckableKind_0;
    },
    Incrementable$(semanticsObject) {
      var t1 = new A.Incrementable(A.InputElement_InputElement(), semanticsObject);
      t1.Incrementable$1(semanticsObject);
      return t1;
    },
    SemanticsObject__clearSemanticElementTransform(element) {
      var t1 = element.style;
      t1.removeProperty("transform-origin");
      t1.removeProperty("transform");
      t1 = $.$get$_operatingSystem();
      if (t1 !== B.OperatingSystem_0)
        t1 = t1 === B.OperatingSystem_4;
      else
        t1 = true;
      if (t1) {
        t1 = element.style;
        t1.top = "0px";
        t1.left = "0px";
      } else {
        t1 = element.style;
        t1.removeProperty("top");
        t1.removeProperty("left");
      }
    },
    EngineSemanticsOwner$_() {
      var t1 = type$.SemanticsObject,
        t2 = A._setArrayType([], type$.JSArray_nullable_SemanticsObject),
        t3 = A._setArrayType([], type$.JSArray_of_void_Function),
        t4 = $.$get$_operatingSystem();
      t4 = J.containsKey$1$x(B.Set_69tl2._collection$_map, t4) ? new A.DesktopSemanticsEnabler() : new A.MobileSemanticsEnabler();
      t4 = new A.EngineSemanticsOwner(A.LinkedHashMap_LinkedHashMap$_empty(type$.int, t1), A.LinkedHashMap_LinkedHashMap$_empty(type$.nullable_int, t1), t2, t3, new A.EngineSemanticsOwner__now_closure(), new A.SemanticsHelper(t4), B.GestureMode_1, A._setArrayType([], type$.JSArray_of_nullable_void_Function_GestureMode));
      t4.EngineSemanticsOwner$_$0();
      return t4;
    },
    longestIncreasingSubsequence(list) {
      var longest, i, elem, hi, lo, mid, seq, k,
        len = list.length,
        t1 = type$.JSArray_int,
        predecessors = A._setArrayType([], t1),
        mins = A._setArrayType([0], t1);
      for (longest = 0, i = 0; i < len; ++i) {
        elem = list[i];
        for (hi = longest, lo = 1; lo <= hi;) {
          mid = B.JSInt_methods._tdivFast$1(lo + hi, 2);
          if (list[mins[mid]] < elem)
            lo = mid + 1;
          else
            hi = mid - 1;
        }
        predecessors.push(mins[lo - 1]);
        if (lo >= mins.length)
          mins.push(i);
        else
          mins[lo] = i;
        if (lo > longest)
          longest = lo;
      }
      seq = A.List_List$filled(longest, 0, false, type$.int);
      k = mins[longest];
      for (i = longest - 1; i >= 0; --i) {
        seq[i] = k;
        k = predecessors[k];
      }
      return seq;
    },
    SemanticsTextEditingStrategy_ensureInitialized(owner) {
      var t1 = $.SemanticsTextEditingStrategy__instance;
      if (t1 != null && t1.owner === owner) {
        t1.toString;
        return t1;
      }
      return $.SemanticsTextEditingStrategy__instance = new A.SemanticsTextEditingStrategy(owner, A._setArrayType([], type$.JSArray_StreamSubscription_Event));
    },
    WriteBuffer_WriteBuffer() {
      var t1 = new Uint8Array(0),
        eightBytes = new DataView(new ArrayBuffer(8));
      return new A.WriteBuffer(new A.Uint8Buffer(t1, 0), eightBytes, A.NativeUint8List_NativeUint8List$view(eightBytes.buffer, 0, null));
    },
    computeShadowOffset(elevation) {
      if (elevation === 0)
        return B.Offset_0_0;
      return new A.Offset(200 * elevation / 600, 400 * elevation / 600);
    },
    computeShadow(shape, elevation) {
      if (elevation === 0)
        return null;
      return new A.SurfaceShadowData(Math.min(elevation * ((800 + (shape.right - shape.left) * 0.5) / 600), elevation * ((800 + (shape.bottom - shape.top) * 0.5) / 600)), A.computeShadowOffset(elevation));
    },
    applyCssShadow(element, shape, elevation, color) {
      var t1, t2, t3,
        _s10_ = "box-shadow",
        shadow = A.computeShadow(shape, elevation);
      if (shadow == null) {
        t1 = element.style;
        B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, _s10_), "none", "");
      } else {
        color = A.toShadowColor(color);
        t1 = element.style;
        t2 = shadow.offset;
        t3 = color.value;
        t3 = A.S(t2._dx) + "px " + A.S(t2._dy) + "px " + A.S(shadow.blurWidth) + "px 0px rgba(" + (t3 >>> 16 & 255) + ", " + (t3 >>> 8 & 255) + ", " + (t3 & 255) + ", " + A.S((t3 >>> 24 & 255) / 255) + ")";
        B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, _s10_), t3, "");
      }
    },
    toShadowColor(color) {
      var t1 = color.value;
      return new A.Color(((B.JSNumber_methods.round$0(0.3 * (t1 >>> 24 & 255)) & 255) << 24 | t1 & 16777215) >>> 0);
    },
    _applySpanStylesToParagraph(element, spans) {
      var t1, fontSize, fontFamily, _i, t2, spanFontSize, cssStyle;
      for (t1 = spans.length, fontSize = 0, fontFamily = null, _i = 0; _i < spans.length; spans.length === t1 || (0, A.throwConcurrentModificationError)(spans), ++_i) {
        t2 = spans[_i].style;
        spanFontSize = t2.fontSize;
        if (spanFontSize != null && spanFontSize > fontSize) {
          if (t2.isFontFamilyProvided)
            fontFamily = t2.get$effectiveFontFamily();
          fontSize = spanFontSize;
        }
      }
      cssStyle = element.style;
      if (fontSize !== 0) {
        t1 = A.S(fontSize) + "px";
        cssStyle.fontSize = t1;
      }
      if (fontFamily != null) {
        t1 = A.canonicalizeFontFamily(fontFamily);
        cssStyle.fontFamily = t1 == null ? "" : t1;
      }
    },
    FontManager_FontManager() {
      var t1 = type$.JSArray_Future_void;
      if ($.$get$supportsFontLoadingApi())
        return new A.FontManager(A._setArrayType([], t1));
      else
        return new A._PolyfillFontManager(A._setArrayType([], t1));
    },
    LineBuilder$_(paragraph, spanometer, accumulatedHeight, lineNumber, maxWidth, start) {
      return new A.LineBuilder(A._setArrayType([], type$.JSArray_LineSegment), A._setArrayType([], type$.JSArray_RangeBox), maxWidth, paragraph, spanometer, start, lineNumber, accumulatedHeight, start);
    },
    ensureLineLookupInitialized() {
      var t1 = $._lineLookup;
      if (t1 == null) {
        t1 = type$.LineCharProperty;
        t1 = $._lineLookup = new A.UnicodePropertyLookup(A._unpackProperties(string$._00000, 937, B.List_UVg, t1), B.LineCharProperty_8, A.LinkedHashMap_LinkedHashMap$_empty(type$.int, t1), type$.UnicodePropertyLookup_LineCharProperty);
      }
      return t1;
    },
    nextLineBreak(text, index, maxEnd) {
      var unsafeResult = A._unsafeNextLineBreak(text, index, maxEnd);
      if (unsafeResult.index > maxEnd)
        return new A.LineBreakResult(maxEnd, Math.min(maxEnd, unsafeResult.indexWithoutTrailingNewlines), Math.min(maxEnd, unsafeResult.indexWithoutTrailingSpaces), B.LineBreakType_1);
      return unsafeResult;
    },
    _unsafeNextLineBreak(text, index, maxEnd) {
      var t1, t2, t3, t4, lastNonNewlineIndex, lastNonSpaceIndex, prev1, regionalIndicatorCount, t5, t6, t7, t8, curr0, isCurrZWJ0, t9, t10,
        codePoint = A.getCodePoint(text, index),
        curr = A.ensureLineLookupInitialized().findForChar$1(codePoint),
        baseOfSpaceSequence = curr === B.LineCharProperty_5 ? B.LineCharProperty_29 : null,
        isCurrZWJ = curr === B.LineCharProperty_26;
      if (curr === B.LineCharProperty_0 || isCurrZWJ)
        curr = B.LineCharProperty_8;
      for (t1 = text.length, t2 = type$.LineCharProperty, t3 = type$.int, t4 = type$.UnicodePropertyLookup_LineCharProperty, lastNonNewlineIndex = index, lastNonSpaceIndex = lastNonNewlineIndex, prev1 = null, regionalIndicatorCount = 0; index < t1; isCurrZWJ = isCurrZWJ0, prev1 = curr, curr = curr0) {
        if (index > maxEnd)
          return new A.LineBreakResult(maxEnd, Math.min(maxEnd, lastNonNewlineIndex), Math.min(maxEnd, lastNonSpaceIndex), B.LineBreakType_1);
        t5 = curr === B.LineCharProperty_35;
        regionalIndicatorCount = t5 ? regionalIndicatorCount + 1 : 0;
        index = (codePoint != null && codePoint > 65535 ? index + 1 : index) + 1;
        t6 = curr === B.LineCharProperty_5;
        t7 = !t6;
        if (t7)
          baseOfSpaceSequence = null;
        codePoint = A.getCodePoint(text, index);
        t8 = $._lineLookup;
        curr0 = (t8 == null ? $._lineLookup = new A.UnicodePropertyLookup(A._unpackProperties(string$._00000, 937, B.List_UVg, t2), B.LineCharProperty_8, A.LinkedHashMap_LinkedHashMap$_empty(t3, t2), t4) : t8).findForChar$1(codePoint);
        isCurrZWJ0 = curr0 === B.LineCharProperty_26;
        if (curr === B.LineCharProperty_2 || curr === B.LineCharProperty_3)
          return new A.LineBreakResult(index, lastNonNewlineIndex, lastNonSpaceIndex, B.LineBreakType_2);
        if (curr === B.LineCharProperty_4)
          if (curr0 === B.LineCharProperty_2)
            continue;
          else
            return new A.LineBreakResult(index, lastNonNewlineIndex, lastNonSpaceIndex, B.LineBreakType_2);
        if (t7)
          lastNonSpaceIndex = index;
        if (curr0 === B.LineCharProperty_2 || curr0 === B.LineCharProperty_3 || curr0 === B.LineCharProperty_4) {
          lastNonNewlineIndex = index;
          continue;
        }
        if (index >= t1)
          return new A.LineBreakResult(t1, index, lastNonSpaceIndex, B.LineBreakType_3);
        if (curr0 === B.LineCharProperty_5) {
          baseOfSpaceSequence = t6 ? baseOfSpaceSequence : curr;
          lastNonNewlineIndex = index;
          continue;
        }
        if (curr0 === B.LineCharProperty_25) {
          lastNonNewlineIndex = index;
          continue;
        }
        if (curr === B.LineCharProperty_25 || baseOfSpaceSequence === B.LineCharProperty_25)
          return new A.LineBreakResult(index, index, lastNonSpaceIndex, B.LineBreakType_0);
        if (curr0 === B.LineCharProperty_0 || isCurrZWJ0) {
          if (!t6) {
            if (t5)
              --regionalIndicatorCount;
            lastNonNewlineIndex = index;
            curr0 = curr;
            continue;
          }
          curr0 = B.LineCharProperty_8;
        }
        if (isCurrZWJ) {
          lastNonNewlineIndex = index;
          continue;
        }
        if (curr0 === B.LineCharProperty_29 || curr === B.LineCharProperty_29) {
          lastNonNewlineIndex = index;
          continue;
        }
        if (curr === B.LineCharProperty_18) {
          lastNonNewlineIndex = index;
          continue;
        }
        if (!(!t7 || curr === B.LineCharProperty_1 || curr === B.LineCharProperty_14) && curr0 === B.LineCharProperty_18) {
          lastNonNewlineIndex = index;
          continue;
        }
        if (t7)
          t5 = curr0 === B.LineCharProperty_17 || curr0 === B.LineCharProperty_12 || curr0 === B.LineCharProperty_6 || curr0 === B.LineCharProperty_13 || curr0 === B.LineCharProperty_15;
        else
          t5 = false;
        if (t5) {
          lastNonNewlineIndex = index;
          continue;
        }
        if (curr === B.LineCharProperty_11) {
          lastNonNewlineIndex = index;
          continue;
        }
        t5 = curr === B.LineCharProperty_7;
        if (t5 && curr0 === B.LineCharProperty_11) {
          lastNonNewlineIndex = index;
          continue;
        }
        t7 = curr !== B.LineCharProperty_17;
        if ((!t7 || baseOfSpaceSequence === B.LineCharProperty_17 || curr === B.LineCharProperty_12 || baseOfSpaceSequence === B.LineCharProperty_12) && curr0 === B.LineCharProperty_24) {
          lastNonNewlineIndex = index;
          continue;
        }
        if ((curr === B.LineCharProperty_27 || baseOfSpaceSequence === B.LineCharProperty_27) && curr0 === B.LineCharProperty_27) {
          lastNonNewlineIndex = index;
          continue;
        }
        if (t6)
          return new A.LineBreakResult(index, index, lastNonSpaceIndex, B.LineBreakType_0);
        if (t5 || curr0 === B.LineCharProperty_7) {
          lastNonNewlineIndex = index;
          continue;
        }
        if (curr === B.LineCharProperty_34 || curr0 === B.LineCharProperty_34)
          return new A.LineBreakResult(index, index, lastNonSpaceIndex, B.LineBreakType_0);
        if (curr0 === B.LineCharProperty_1 || curr0 === B.LineCharProperty_14 || curr0 === B.LineCharProperty_24 || curr === B.LineCharProperty_19) {
          lastNonNewlineIndex = index;
          continue;
        }
        if (prev1 === B.LineCharProperty_20)
          t5 = curr === B.LineCharProperty_14 || curr === B.LineCharProperty_1;
        else
          t5 = false;
        if (t5) {
          lastNonNewlineIndex = index;
          continue;
        }
        t5 = curr === B.LineCharProperty_15;
        if (t5 && curr0 === B.LineCharProperty_20) {
          lastNonNewlineIndex = index;
          continue;
        }
        if (curr0 === B.LineCharProperty_28) {
          lastNonNewlineIndex = index;
          continue;
        }
        t6 = curr !== B.LineCharProperty_8;
        if (!((!t6 || curr === B.LineCharProperty_20) && curr0 === B.LineCharProperty_16))
          if (curr === B.LineCharProperty_16)
            t8 = curr0 === B.LineCharProperty_8 || curr0 === B.LineCharProperty_20;
          else
            t8 = false;
        else
          t8 = true;
        if (t8) {
          lastNonNewlineIndex = index;
          continue;
        }
        t8 = curr === B.LineCharProperty_9;
        if (t8)
          t9 = curr0 === B.LineCharProperty_30 || curr0 === B.LineCharProperty_31 || curr0 === B.LineCharProperty_36;
        else
          t9 = false;
        if (t9) {
          lastNonNewlineIndex = index;
          continue;
        }
        if ((curr === B.LineCharProperty_30 || curr === B.LineCharProperty_31 || curr === B.LineCharProperty_36) && curr0 === B.LineCharProperty_10) {
          lastNonNewlineIndex = index;
          continue;
        }
        t9 = !t8;
        if (!t9 || curr === B.LineCharProperty_10)
          t10 = curr0 === B.LineCharProperty_8 || curr0 === B.LineCharProperty_20;
        else
          t10 = false;
        if (t10) {
          lastNonNewlineIndex = index;
          continue;
        }
        if (!t6 || curr === B.LineCharProperty_20)
          t10 = curr0 === B.LineCharProperty_9 || curr0 === B.LineCharProperty_10;
        else
          t10 = false;
        if (t10) {
          lastNonNewlineIndex = index;
          continue;
        }
        if (!t7 || curr === B.LineCharProperty_12 || curr === B.LineCharProperty_16)
          t7 = curr0 === B.LineCharProperty_10 || curr0 === B.LineCharProperty_9;
        else
          t7 = false;
        if (t7) {
          lastNonNewlineIndex = index;
          continue;
        }
        t7 = curr !== B.LineCharProperty_10;
        if ((!t7 || t8) && curr0 === B.LineCharProperty_11) {
          lastNonNewlineIndex = index;
          continue;
        }
        if ((!t7 || !t9 || curr === B.LineCharProperty_14 || curr === B.LineCharProperty_13 || curr === B.LineCharProperty_16 || t5) && curr0 === B.LineCharProperty_16) {
          lastNonNewlineIndex = index;
          continue;
        }
        t5 = curr === B.LineCharProperty_21;
        if (t5)
          t7 = curr0 === B.LineCharProperty_21 || curr0 === B.LineCharProperty_22 || curr0 === B.LineCharProperty_32 || curr0 === B.LineCharProperty_33;
        else
          t7 = false;
        if (t7) {
          lastNonNewlineIndex = index;
          continue;
        }
        t7 = curr !== B.LineCharProperty_22;
        if (!t7 || curr === B.LineCharProperty_32)
          t9 = curr0 === B.LineCharProperty_22 || curr0 === B.LineCharProperty_23;
        else
          t9 = false;
        if (t9) {
          lastNonNewlineIndex = index;
          continue;
        }
        t9 = curr !== B.LineCharProperty_23;
        if ((!t9 || curr === B.LineCharProperty_33) && curr0 === B.LineCharProperty_23) {
          lastNonNewlineIndex = index;
          continue;
        }
        if ((t5 || !t7 || !t9 || curr === B.LineCharProperty_32 || curr === B.LineCharProperty_33) && curr0 === B.LineCharProperty_10) {
          lastNonNewlineIndex = index;
          continue;
        }
        if (t8)
          t5 = curr0 === B.LineCharProperty_21 || curr0 === B.LineCharProperty_22 || curr0 === B.LineCharProperty_23 || curr0 === B.LineCharProperty_32 || curr0 === B.LineCharProperty_33;
        else
          t5 = false;
        if (t5) {
          lastNonNewlineIndex = index;
          continue;
        }
        if (!t6 || curr === B.LineCharProperty_20)
          t5 = curr0 === B.LineCharProperty_8 || curr0 === B.LineCharProperty_20;
        else
          t5 = false;
        if (t5) {
          lastNonNewlineIndex = index;
          continue;
        }
        if (curr === B.LineCharProperty_13)
          t5 = curr0 === B.LineCharProperty_8 || curr0 === B.LineCharProperty_20;
        else
          t5 = false;
        if (t5) {
          lastNonNewlineIndex = index;
          continue;
        }
        if (!t6 || curr === B.LineCharProperty_20 || curr === B.LineCharProperty_16)
          if (curr0 === B.LineCharProperty_11) {
            t5 = B.JSString_methods.codeUnitAt$1(text, index);
            if (t5 !== 9001)
              if (!(t5 >= 12296 && t5 <= 12317))
                t5 = t5 >= 65047 && t5 <= 65378;
              else
                t5 = true;
            else
              t5 = true;
            t5 = !t5;
          } else
            t5 = false;
        else
          t5 = false;
        if (t5) {
          lastNonNewlineIndex = index;
          continue;
        }
        if (curr === B.LineCharProperty_12) {
          t5 = B.JSString_methods.codeUnitAt$1(text, index - 1);
          if (t5 !== 9001)
            if (!(t5 >= 12296 && t5 <= 12317))
              t5 = t5 >= 65047 && t5 <= 65378;
            else
              t5 = true;
          else
            t5 = true;
          if (!t5)
            t5 = curr0 === B.LineCharProperty_8 || curr0 === B.LineCharProperty_20 || curr0 === B.LineCharProperty_16;
          else
            t5 = false;
        } else
          t5 = false;
        if (t5) {
          lastNonNewlineIndex = index;
          continue;
        }
        if (curr0 === B.LineCharProperty_35)
          if ((regionalIndicatorCount & 1) === 1) {
            lastNonNewlineIndex = index;
            continue;
          } else
            return new A.LineBreakResult(index, index, lastNonSpaceIndex, B.LineBreakType_0);
        if (curr === B.LineCharProperty_31 && curr0 === B.LineCharProperty_36) {
          lastNonNewlineIndex = index;
          continue;
        }
        return new A.LineBreakResult(index, index, lastNonSpaceIndex, B.LineBreakType_0);
      }
      return new A.LineBreakResult(t1, lastNonNewlineIndex, lastNonSpaceIndex, B.LineBreakType_3);
    },
    measureSubstring(_canvasContext, text, start, end, letterSpacing) {
      var cssFont, width, t1;
      if (start === end)
        return 0;
      cssFont = _canvasContext.font;
      if (start === $._lastStart && end === $._lastEnd && text === $._lastText && cssFont === $._lastCssFont)
        width = $._lastWidth;
      else {
        t1 = _canvasContext.measureText(start === 0 && end === text.length ? text : B.JSString_methods.substring$2(text, start, end)).width;
        t1.toString;
        width = t1;
      }
      $._lastStart = start;
      $._lastEnd = end;
      $._lastText = text;
      $._lastCssFont = cssFont;
      $._lastWidth = width;
      if (letterSpacing == null)
        letterSpacing = 0;
      return B.JSNumber_methods.round$0((letterSpacing !== 0 ? width + letterSpacing * (end - start) : width) * 100) / 100;
    },
    _calculateJustifyPerSpaceBox(paragraph, line, lastLine, lastBox) {
      var t1, spaceBoxesToJustify;
      if (!line.$eq(0, lastLine) && isFinite(paragraph.get$_layoutService().width) && paragraph.paragraphStyle.textAlign === B.TextAlign_3) {
        t1 = paragraph.get$_layoutService().width;
        spaceBoxesToJustify = line.spaceBoxCount;
        if (lastBox instanceof A.SpanBox && lastBox.isSpaceOnly)
          --spaceBoxesToJustify;
        if (spaceBoxesToJustify > 0)
          return (t1 - line.width) / spaceBoxesToJustify;
      }
      return 0;
    },
    EngineTextStyle$only(background, color, decoration, decorationColor, decorationStyle, decorationThickness, fontFamily, fontFamilyFallback, fontFeatures, fontSize, fontStyle, fontWeight, foreground, height, letterSpacing, locale, shadows, textBaseline, wordSpacing) {
      var t1 = fontFamily == null,
        t2 = t1 ? "" : fontFamily;
      return new A.EngineTextStyle(color, decoration, decorationColor, decorationStyle, decorationThickness, fontWeight, fontStyle, textBaseline, !t1, t2, fontFamilyFallback, fontFeatures, fontSize, letterSpacing, wordSpacing, height, locale, background, foreground, shadows);
    },
    fontWeightToCss(fontWeight) {
      if (fontWeight == null)
        return null;
      return A.fontWeightIndexToCss(fontWeight.index);
    },
    fontWeightIndexToCss(fontWeightIndex) {
      switch (fontWeightIndex) {
        case 0:
          return "100";
        case 1:
          return "200";
        case 2:
          return "300";
        case 3:
          return "normal";
        case 4:
          return "500";
        case 5:
          return "600";
        case 6:
          return "bold";
        case 7:
          return "800";
        case 8:
          return "900";
      }
      return "";
    },
    _placeholderAlignmentToCssVerticalAlign(placeholder) {
      switch (placeholder.get$alignment()) {
        case B.PlaceholderAlignment_3:
          return "top";
        case B.PlaceholderAlignment_5:
          return "middle";
        case B.PlaceholderAlignment_4:
          return "bottom";
        case B.PlaceholderAlignment_1:
          return "baseline";
        case B.PlaceholderAlignment_2:
          return "-" + A.S(placeholder.get$height(placeholder)) + "px";
        case B.PlaceholderAlignment_0:
          return A.S(placeholder.get$baselineOffset().$sub(0, placeholder.get$height(placeholder))) + "px";
      }
    },
    textDirectionToCss(textDirection) {
      if (textDirection == null)
        return null;
      return A.textDirectionIndexToCss(textDirection.index);
    },
    textDirectionIndexToCss(textDirectionIndex) {
      switch (textDirectionIndex) {
        case 0:
          return "rtl";
        case 1:
          return null;
      }
      return null;
    },
    textAlignToCssValue(align, textDirection) {
      switch (align) {
        case B.TextAlign_0:
          return "left";
        case B.TextAlign_1:
          return "right";
        case B.TextAlign_2:
          return "center";
        case B.TextAlign_3:
          return "justify";
        case B.TextAlign_5:
          switch (textDirection.index) {
            case 1:
              return "end";
            case 0:
              return "left";
          }
          break;
        case B.TextAlign_4:
          switch (textDirection.index) {
            case 1:
              return "";
            case 0:
              return "right";
          }
          break;
        case null:
          return "";
      }
    },
    getDirectionalBlockEnd(text, start, end) {
      var t2, t3, blockDirection, i, codePoint,
        t1 = start.index;
      if (t1 === end.index)
        return new A.DirectionalPosition(end, null, false);
      t2 = end.indexWithoutTrailingSpaces;
      if (t1 === t2)
        return new A.DirectionalPosition(end, null, true);
      t3 = $.$get$_textDirectionLookup();
      blockDirection = t3.find$2(0, text, t1);
      i = t1 + 1;
      for (; i < t2;) {
        codePoint = A.getCodePoint(text, i);
        if ((codePoint == null ? t3.defaultProperty : t3.findForChar$1(codePoint)) != blockDirection)
          break;
        ++i;
      }
      if (i === end.indexWithoutTrailingNewlines)
        return new A.DirectionalPosition(end, blockDirection, false);
      return new A.DirectionalPosition(new A.LineBreakResult(i, i, i, B.LineBreakType_1), blockDirection, false);
    },
    getCodePoint(text, index) {
      var char;
      if (index < 0 || index >= text.length)
        return null;
      char = B.JSString_methods.codeUnitAt$1(text, index);
      if ((char & 63488) === 55296 && index < text.length - 1)
        return (char >>> 6 & 31) + 1 << 16 | (char & 63) << 10 | B.JSString_methods.codeUnitAt$1(text, index + 1) & 1023;
      return char;
    },
    UnicodePropertyLookup$(ranges, defaultProperty, $P) {
      return new A.UnicodePropertyLookup(ranges, defaultProperty, A.LinkedHashMap_LinkedHashMap$_empty(type$.int, $P), $P._eval$1("UnicodePropertyLookup<0>"));
    },
    _unpackProperties(packedData, singleRangesCount, propertyEnumValues, $P) {
      var t1, i, rangeStart, rangeEnd, i0,
        ranges = A._setArrayType([], $P._eval$1("JSArray<UnicodeRange<0>>")),
        dataLength = packedData.length;
      for (t1 = $P._eval$1("UnicodeRange<0>"), i = 0; i < dataLength; i = i0) {
        rangeStart = A._consumeInt(packedData, i);
        i += 4;
        if (B.JSString_methods._codeUnitAt$1(packedData, i) === 33) {
          ++i;
          rangeEnd = rangeStart;
        } else {
          rangeEnd = A._consumeInt(packedData, i);
          i += 4;
        }
        i0 = i + 1;
        ranges.push(new A.UnicodeRange(rangeStart, rangeEnd, propertyEnumValues[A._getEnumIndexFromPackedValue(B.JSString_methods._codeUnitAt$1(packedData, i))], t1));
      }
      return ranges;
    },
    _getEnumIndexFromPackedValue(charCode) {
      if (charCode <= 90)
        return charCode - 65;
      return 26 + charCode - 97;
    },
    _consumeInt(packedData, index) {
      return A._getIntFromCharCode(B.JSString_methods._codeUnitAt$1(packedData, index + 3)) + A._getIntFromCharCode(B.JSString_methods._codeUnitAt$1(packedData, index + 2)) * 36 + A._getIntFromCharCode(B.JSString_methods._codeUnitAt$1(packedData, index + 1)) * 36 * 36 + A._getIntFromCharCode(B.JSString_methods._codeUnitAt$1(packedData, index)) * 36 * 36 * 36;
    },
    _getIntFromCharCode(charCode) {
      if (charCode <= 57)
        return charCode - 48;
      return charCode - 97 + 10;
    },
    EngineInputType_fromName($name, isDecimal) {
      switch ($name) {
        case "TextInputType.number":
          return isDecimal ? B.C_DecimalInputType : B.C_NumberInputType;
        case "TextInputType.phone":
          return B.C_PhoneInputType;
        case "TextInputType.emailAddress":
          return B.C_EmailInputType;
        case "TextInputType.url":
          return B.C_UrlInputType;
        case "TextInputType.multiline":
          return B.C_MultilineInputType;
        case "TextInputType.none":
          return B.C_NoTextInputType;
        case "TextInputType.text":
        default:
          return B.C_TextInputType;
      }
    },
    TextCapitalizationConfig$fromInputConfiguration(inputConfiguration) {
      var t1;
      if (inputConfiguration === "TextCapitalization.words")
        t1 = B.TextCapitalization_0;
      else if (inputConfiguration === "TextCapitalization.characters")
        t1 = B.TextCapitalization_2;
      else
        t1 = inputConfiguration === "TextCapitalization.sentences" ? B.TextCapitalization_1 : B.TextCapitalization_3;
      return new A.TextCapitalizationConfig(t1);
    },
    _emptyCallback(_) {
    },
    _hideAutofillElements(domElement, isOffScreen) {
      var t1,
        _s11_ = "transparent",
        _s4_ = "none",
        elementStyle = domElement.style;
      elementStyle.whiteSpace = "pre-wrap";
      B.CssStyleDeclaration_methods._setPropertyHelper$3(elementStyle, B.CssStyleDeclaration_methods._browserPropertyName$1(elementStyle, "align-content"), "center", "");
      elementStyle.padding = "0";
      B.CssStyleDeclaration_methods._setPropertyHelper$3(elementStyle, B.CssStyleDeclaration_methods._browserPropertyName$1(elementStyle, "opacity"), "1", "");
      elementStyle.color = _s11_;
      elementStyle.backgroundColor = _s11_;
      elementStyle.background = _s11_;
      elementStyle.outline = _s4_;
      elementStyle.border = _s4_;
      B.CssStyleDeclaration_methods._setPropertyHelper$3(elementStyle, B.CssStyleDeclaration_methods._browserPropertyName$1(elementStyle, "resize"), _s4_, "");
      elementStyle.width = "0";
      elementStyle.height = "0";
      B.CssStyleDeclaration_methods._setPropertyHelper$3(elementStyle, B.CssStyleDeclaration_methods._browserPropertyName$1(elementStyle, "text-shadow"), _s11_, "");
      B.CssStyleDeclaration_methods._setPropertyHelper$3(elementStyle, B.CssStyleDeclaration_methods._browserPropertyName$1(elementStyle, "transform-origin"), "0 0 0", "");
      if (isOffScreen) {
        elementStyle.top = "-9999px";
        elementStyle.left = "-9999px";
      }
      t1 = $.$get$_browserEngine();
      if (t1 !== B.BrowserEngine_0)
        if (t1 !== B.BrowserEngine_5)
          t1 = t1 === B.BrowserEngine_1;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        domElement.classList.add("transparentTextEditing");
      B.CssStyleDeclaration_methods._setPropertyHelper$3(elementStyle, B.CssStyleDeclaration_methods._browserPropertyName$1(elementStyle, "caret-color"), _s11_, null);
    },
    EngineAutofillForm_fromFrameworkMessage(focusedElementAutofill, fields) {
      var t1, elements, items, formElement, ids, focusedElement, t2, t3, t4, t5, t6, autofillInfo, t7, autofill, htmlElement, _i, id, formIdentifier, form, submitButton;
      if (focusedElementAutofill == null)
        return null;
      t1 = type$.String;
      elements = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.HtmlElement);
      items = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.AutofillInfo);
      formElement = document.createElement("form");
      formElement.noValidate = true;
      formElement.method = "post";
      formElement.action = "#";
      B.FormElement_methods.addEventListener$2(formElement, "submit", new A.EngineAutofillForm_fromFrameworkMessage_closure());
      A._hideAutofillElements(formElement, false);
      ids = J.JSArray_JSArray$growable(0, t1);
      focusedElement = A.AutofillInfo_AutofillInfo$fromFrameworkMessage(focusedElementAutofill, B.TextCapitalizationConfig_TextCapitalization_3);
      if (fields != null)
        for (t1 = type$.Map_String_dynamic, t2 = J.cast$1$0$ax(fields, t1), t2 = new A.ListIterator(t2, t2.get$length(t2)), t3 = focusedElement.uniqueIdentifier, t4 = A._instanceType(t2)._precomputed1; t2.moveNext$0();) {
          t5 = t2.__internal$_current;
          if (t5 == null)
            t5 = t4._as(t5);
          t6 = J.getInterceptor$asx(t5);
          autofillInfo = t1._as(t6.$index(t5, "autofill"));
          t7 = A._asString(t6.$index(t5, "textCapitalization"));
          if (t7 === "TextCapitalization.words")
            t7 = B.TextCapitalization_0;
          else if (t7 === "TextCapitalization.characters")
            t7 = B.TextCapitalization_2;
          else
            t7 = t7 === "TextCapitalization.sentences" ? B.TextCapitalization_1 : B.TextCapitalization_3;
          autofill = A.AutofillInfo_AutofillInfo$fromFrameworkMessage(autofillInfo, new A.TextCapitalizationConfig(t7));
          t7 = autofill.uniqueIdentifier;
          ids.push(t7);
          if (t7 !== t3) {
            htmlElement = A.EngineInputType_fromName(A._asString(J.$index$asx(t1._as(t6.$index(t5, "inputType")), "name")), false).createDomElement$0();
            autofill.editingState.applyToDomElement$1(htmlElement);
            autofill.applyToDomElement$1(htmlElement);
            A._hideAutofillElements(htmlElement, false);
            items.$indexSet(0, t7, autofill);
            elements.$indexSet(0, t7, htmlElement);
            formElement.appendChild(htmlElement);
          }
        }
      else
        ids.push(focusedElement.uniqueIdentifier);
      B.JSArray_methods.sort$0(ids);
      for (t1 = ids.length, _i = 0, t2 = ""; _i < t1; ++_i) {
        id = ids[_i];
        t2 = (t2.length > 0 ? t2 + "*" : t2) + id;
      }
      formIdentifier = t2.charCodeAt(0) == 0 ? t2 : t2;
      form = $.formsOnTheDom.$index(0, formIdentifier);
      if (form != null)
        B.FormElement_methods.remove$0(form);
      submitButton = A.InputElement_InputElement();
      A._hideAutofillElements(submitButton, true);
      submitButton.className = "submitBtn";
      submitButton.type = "submit";
      formElement.appendChild(submitButton);
      return new A.EngineAutofillForm(formElement, elements, items, formIdentifier);
    },
    AutofillInfo_AutofillInfo$fromFrameworkMessage(autofill, textCapitalization) {
      var t2,
        t1 = J.getInterceptor$asx(autofill),
        uniqueIdentifier = A._asString(t1.$index(autofill, "uniqueIdentifier")),
        hintsList = type$.nullable_List_dynamic._as(t1.$index(autofill, "hints")),
        firstHint = hintsList == null || J.get$isEmpty$asx(hintsList) ? null : A._asString(J.get$first$ax(hintsList)),
        editingState = A.EditingState_EditingState$fromFrameworkMessage(type$.Map_String_dynamic._as(t1.$index(autofill, "editingValue")));
      if (firstHint != null) {
        t2 = $.$get$BrowserAutofillHints__singletonInstance()._flutterToEngineMap.$index(0, firstHint);
        if (t2 == null)
          t2 = firstHint;
      } else
        t2 = null;
      return new A.AutofillInfo(editingState, uniqueIdentifier, t2, A._asStringQ(t1.$index(autofill, "hintText")));
    },
    _replace(originalText, replacementText, replacedRange) {
      var t1 = replacedRange.start,
        t2 = replacedRange.end,
        t3 = Math.min(t1, t2);
      t2 = Math.max(t1, t2);
      return B.JSString_methods.substring$2(originalText, 0, t3) + replacementText + B.JSString_methods.substring$1(originalText, t2);
    },
    TextEditingDeltaState_inferDeltaState(newEditingState, lastEditingState, lastTextEditingDeltaState) {
      var previousSelectionWasCollapsed, isTextBeingRemoved, isTextBeingChangedAtActiveSelection, isCurrentlyComposing, textAfterDelta, isPeriodInsertion, deltaTextPattern, match, t9, actualEnd, textAfterMatch,
        t1 = lastTextEditingDeltaState.oldText,
        t2 = lastTextEditingDeltaState.deltaText,
        t3 = lastTextEditingDeltaState.deltaStart,
        t4 = lastTextEditingDeltaState.deltaEnd,
        t5 = lastTextEditingDeltaState.baseOffset,
        t6 = lastTextEditingDeltaState.extentOffset,
        t7 = lastTextEditingDeltaState.composingOffset,
        t8 = lastTextEditingDeltaState.composingExtent,
        newTextEditingDeltaState = new A.TextEditingDeltaState(t1, t2, t3, t4, t5, t6, t7, t8);
      t5 = lastEditingState == null;
      t6 = t5 ? null : lastEditingState.baseOffset;
      previousSelectionWasCollapsed = t6 == (t5 ? null : lastEditingState.extentOffset);
      t5 = t2.length;
      t6 = t5 === 0;
      isTextBeingRemoved = t6 && t4 !== -1;
      t6 = !t6;
      isTextBeingChangedAtActiveSelection = t6 && !previousSelectionWasCollapsed;
      if (isTextBeingRemoved) {
        t3 = t4 - (t1.length - newEditingState.text.length);
        newTextEditingDeltaState.deltaStart = t3;
      } else if (isTextBeingChangedAtActiveSelection) {
        t3 = lastEditingState.baseOffset;
        newTextEditingDeltaState.deltaStart = t3;
      }
      isCurrentlyComposing = t7 != null && t7 !== t8;
      if (t6 && previousSelectionWasCollapsed && isCurrentlyComposing) {
        t7.toString;
        t3 = newTextEditingDeltaState.deltaStart = t7;
        t8.toString;
        t8 = newTextEditingDeltaState.deltaEnd = t8;
        t4 = t8;
      }
      if (!(t3 === -1 && t3 === t4)) {
        textAfterDelta = A._replace(t1, t2, new A.TextRange(t3, t4));
        t3 = newEditingState.text;
        t3.toString;
        if (textAfterDelta !== t3) {
          isPeriodInsertion = B.JSString_methods.contains$1(t2, ".");
          deltaTextPattern = A.RegExp_RegExp(A.quoteStringForRegExp(t2), true);
          t4 = new A._AllMatchesIterator(deltaTextPattern, t3, 0);
          t6 = type$.RegExpMatch;
          t7 = t1.length;
          for (; t4.moveNext$0();) {
            match = t4.__js_helper$_current;
            t8 = (match == null ? t6._as(match) : match)._match;
            t9 = t8.index;
            if (!(t9 >= 0 && t9 + t8[0].length <= t7)) {
              actualEnd = t9 + t5 - 1;
              textAfterMatch = A._replace(t1, t2, new A.TextRange(t9, actualEnd));
            } else {
              actualEnd = isPeriodInsertion ? t9 + t8[0].length - 1 : t9 + t8[0].length;
              textAfterMatch = A._replace(t1, t2, new A.TextRange(t9, actualEnd));
            }
            if (textAfterMatch === t3) {
              newTextEditingDeltaState.deltaStart = t9;
              newTextEditingDeltaState.deltaEnd = actualEnd;
              break;
            }
          }
        }
      }
      newTextEditingDeltaState.baseOffset = newEditingState.baseOffset;
      newTextEditingDeltaState.extentOffset = newEditingState.extentOffset;
      return newTextEditingDeltaState;
    },
    EditingState$(baseOffset, extentOffset, text) {
      var t1 = baseOffset == null,
        t2 = t1 ? 0 : baseOffset,
        t3 = extentOffset == null,
        t4 = t3 ? 0 : extentOffset;
      t4 = Math.max(0, Math.min(t2, t4));
      t1 = t1 ? 0 : baseOffset;
      t2 = t3 ? 0 : extentOffset;
      return new A.EditingState(text, t4, Math.max(0, Math.max(t1, t2)));
    },
    EditingState_EditingState$fromFrameworkMessage(flutterEditingState) {
      var t1 = J.getInterceptor$asx(flutterEditingState);
      return A.EditingState$(A._asInt(t1.$index(flutterEditingState, "selectionBase")), A._asInt(t1.$index(flutterEditingState, "selectionExtent")), A._asStringQ(t1.$index(flutterEditingState, "text")));
    },
    EditingState_EditingState$fromDomElement(domElement) {
      var t1;
      if (type$.InputElement._is(domElement)) {
        t1 = domElement.value;
        return A.EditingState$(domElement.selectionStart, domElement.selectionEnd, t1);
      } else if (type$.TextAreaElement._is(domElement)) {
        t1 = domElement.value;
        return A.EditingState$(domElement.selectionStart, domElement.selectionEnd, t1);
      } else
        throw A.wrapException(A.UnsupportedError$("Initialized with unsupported input type"));
    },
    InputConfiguration$fromFrameworkMessage(flutterInputConfiguration) {
      var t5, t6, t7, t8, t9,
        _s9_ = "inputType",
        _s8_ = "autofill",
        t1 = J.getInterceptor$asx(flutterInputConfiguration),
        t2 = type$.Map_String_dynamic,
        t3 = A._asString(J.$index$asx(t2._as(t1.$index(flutterInputConfiguration, _s9_)), "name")),
        t4 = A._asBoolQ(J.$index$asx(t2._as(t1.$index(flutterInputConfiguration, _s9_)), "decimal"));
      t3 = A.EngineInputType_fromName(t3, t4 === true);
      t4 = A._asStringQ(t1.$index(flutterInputConfiguration, "inputAction"));
      if (t4 == null)
        t4 = "TextInputAction.done";
      t5 = A._asBoolQ(t1.$index(flutterInputConfiguration, "obscureText"));
      t6 = A._asBoolQ(t1.$index(flutterInputConfiguration, "readOnly"));
      t7 = A._asBoolQ(t1.$index(flutterInputConfiguration, "autocorrect"));
      t8 = A.TextCapitalizationConfig$fromInputConfiguration(A._asString(t1.$index(flutterInputConfiguration, "textCapitalization")));
      t2 = t1.containsKey$1(flutterInputConfiguration, _s8_) ? A.AutofillInfo_AutofillInfo$fromFrameworkMessage(t2._as(t1.$index(flutterInputConfiguration, _s8_)), B.TextCapitalizationConfig_TextCapitalization_3) : null;
      t9 = A.EngineAutofillForm_fromFrameworkMessage(type$.nullable_Map_String_dynamic._as(t1.$index(flutterInputConfiguration, _s8_)), type$.nullable_List_dynamic._as(t1.$index(flutterInputConfiguration, "fields")));
      t1 = A._asBoolQ(t1.$index(flutterInputConfiguration, "enableDeltaModel"));
      return new A.InputConfiguration(t3, t4, t6 === true, t5 === true, t7 !== false, t1 === true, t2, t9, t8);
    },
    saveForms() {
      $.formsOnTheDom.forEach$1(0, new A.saveForms_closure());
    },
    cleanForms() {
      var t1, t2, t3, t4;
      for (t1 = $.formsOnTheDom.get$values($.formsOnTheDom), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f), t2 = A._instanceType(t1)._rest[1]; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        t4 = t3.parentNode;
        if (t4 != null)
          t4.removeChild(t3);
      }
      $.formsOnTheDom.clear$0(0);
    },
    setElementTransform(element, matrix4) {
      var t2,
        t1 = element.style;
      B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "transform-origin"), "0 0 0", "");
      t2 = A.float64ListToCssTransform(matrix4);
      B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "transform"), t2, "");
    },
    float64ListToCssTransform(matrix) {
      var transformKind = A.transformKindOf(matrix);
      if (transformKind === B.TransformKind_1)
        return "matrix(" + A.S(matrix[0]) + "," + A.S(matrix[1]) + "," + A.S(matrix[4]) + "," + A.S(matrix[5]) + "," + A.S(matrix[12]) + "," + A.S(matrix[13]) + ")";
      else if (transformKind === B.TransformKind_2)
        return A.float64ListToCssTransform3d(matrix);
      else
        return "none";
    },
    transformKindOf(matrix) {
      if (!(matrix[15] === 1 && matrix[14] === 0 && matrix[11] === 0 && matrix[10] === 1 && matrix[9] === 0 && matrix[8] === 0 && matrix[7] === 0 && matrix[6] === 0 && matrix[3] === 0 && matrix[2] === 0))
        return B.TransformKind_2;
      if (matrix[0] === 1 && matrix[1] === 0 && matrix[4] === 0 && matrix[5] === 1 && matrix[12] === 0 && matrix[13] === 0)
        return B.TransformKind_0;
      else
        return B.TransformKind_1;
    },
    float64ListToCssTransform3d(matrix) {
      var tx, ty,
        t1 = matrix[0];
      if (t1 === 1 && matrix[1] === 0 && matrix[2] === 0 && matrix[3] === 0 && matrix[4] === 0 && matrix[5] === 1 && matrix[6] === 0 && matrix[7] === 0 && matrix[8] === 0 && matrix[9] === 0 && matrix[10] === 1 && matrix[11] === 0 && matrix[14] === 0 && matrix[15] === 1) {
        tx = matrix[12];
        ty = matrix[13];
        return "translate3d(" + A.S(tx) + "px, " + A.S(ty) + "px, 0px)";
      } else
        return "matrix3d(" + A.S(t1) + "," + A.S(matrix[1]) + "," + A.S(matrix[2]) + "," + A.S(matrix[3]) + "," + A.S(matrix[4]) + "," + A.S(matrix[5]) + "," + A.S(matrix[6]) + "," + A.S(matrix[7]) + "," + A.S(matrix[8]) + "," + A.S(matrix[9]) + "," + A.S(matrix[10]) + "," + A.S(matrix[11]) + "," + A.S(matrix[12]) + "," + A.S(matrix[13]) + "," + A.S(matrix[14]) + "," + A.S(matrix[15]) + ")";
    },
    transformRect(transform, rect) {
      var t1 = $.$get$_tempRectData();
      t1[0] = rect.left;
      t1[1] = rect.top;
      t1[2] = rect.right;
      t1[3] = rect.bottom;
      A.transformLTRB(transform, t1);
      return new A.Rect(t1[0], t1[1], t1[2], t1[3]);
    },
    transformLTRB(transform, ltrb) {
      var t2, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33, argStorage, w,
        t1 = $.$get$_tempPointData();
      t1[0] = ltrb[0];
      t1[4] = ltrb[1];
      t1[8] = 0;
      t1[12] = 1;
      t1[1] = ltrb[2];
      t1[5] = ltrb[1];
      t1[9] = 0;
      t1[13] = 1;
      t1[2] = ltrb[0];
      t1[6] = ltrb[3];
      t1[10] = 0;
      t1[14] = 1;
      t1[3] = ltrb[2];
      t1[7] = ltrb[3];
      t1[11] = 0;
      t1[15] = 1;
      t2 = $.$get$_tempPointMatrix().__engine$_m4storage;
      m00 = t2[0];
      m01 = t2[4];
      m02 = t2[8];
      m03 = t2[12];
      m10 = t2[1];
      m11 = t2[5];
      m12 = t2[9];
      m13 = t2[13];
      m20 = t2[2];
      m21 = t2[6];
      m22 = t2[10];
      m23 = t2[14];
      m30 = t2[3];
      m31 = t2[7];
      m32 = t2[11];
      m33 = t2[15];
      argStorage = transform.__engine$_m4storage;
      t2[0] = m00 * argStorage[0] + m01 * argStorage[4] + m02 * argStorage[8] + m03 * argStorage[12];
      t2[4] = m00 * argStorage[1] + m01 * argStorage[5] + m02 * argStorage[9] + m03 * argStorage[13];
      t2[8] = m00 * argStorage[2] + m01 * argStorage[6] + m02 * argStorage[10] + m03 * argStorage[14];
      t2[12] = m00 * argStorage[3] + m01 * argStorage[7] + m02 * argStorage[11] + m03 * argStorage[15];
      t2[1] = m10 * argStorage[0] + m11 * argStorage[4] + m12 * argStorage[8] + m13 * argStorage[12];
      t2[5] = m10 * argStorage[1] + m11 * argStorage[5] + m12 * argStorage[9] + m13 * argStorage[13];
      t2[9] = m10 * argStorage[2] + m11 * argStorage[6] + m12 * argStorage[10] + m13 * argStorage[14];
      t2[13] = m10 * argStorage[3] + m11 * argStorage[7] + m12 * argStorage[11] + m13 * argStorage[15];
      t2[2] = m20 * argStorage[0] + m21 * argStorage[4] + m22 * argStorage[8] + m23 * argStorage[12];
      t2[6] = m20 * argStorage[1] + m21 * argStorage[5] + m22 * argStorage[9] + m23 * argStorage[13];
      t2[10] = m20 * argStorage[2] + m21 * argStorage[6] + m22 * argStorage[10] + m23 * argStorage[14];
      t2[14] = m20 * argStorage[3] + m21 * argStorage[7] + m22 * argStorage[11] + m23 * argStorage[15];
      t2[3] = m30 * argStorage[0] + m31 * argStorage[4] + m32 * argStorage[8] + m33 * argStorage[12];
      t2[7] = m30 * argStorage[1] + m31 * argStorage[5] + m32 * argStorage[9] + m33 * argStorage[13];
      t2[11] = m30 * argStorage[2] + m31 * argStorage[6] + m32 * argStorage[10] + m33 * argStorage[14];
      t2[15] = m30 * argStorage[3] + m31 * argStorage[7] + m32 * argStorage[11] + m33 * argStorage[15];
      w = argStorage[15];
      if (w === 0)
        w = 1;
      ltrb[0] = Math.min(Math.min(Math.min(t1[0], t1[1]), t1[2]), t1[3]) / w;
      ltrb[1] = Math.min(Math.min(Math.min(t1[4], t1[5]), t1[6]), t1[7]) / w;
      ltrb[2] = Math.max(Math.max(Math.max(t1[0], t1[1]), t1[2]), t1[3]) / w;
      ltrb[3] = Math.max(Math.max(Math.max(t1[4], t1[5]), t1[6]), t1[7]) / w;
    },
    rectContainsOther(rect, other) {
      return rect.left <= other.left && rect.top <= other.top && rect.right >= other.right && rect.bottom >= other.bottom;
    },
    colorToCssString(color) {
      var value, hexValue, t1;
      if (color == null)
        return null;
      value = color.value;
      if ((value & 4278190080) >>> 0 === 4278190080) {
        hexValue = B.JSInt_methods.toRadixString$1(value & 16777215, 16);
        switch (hexValue.length) {
          case 1:
            return "#00000" + hexValue;
          case 2:
            return "#0000" + hexValue;
          case 3:
            return "#000" + hexValue;
          case 4:
            return "#00" + hexValue;
          case 5:
            return "#0" + hexValue;
          default:
            return "#" + hexValue;
        }
      } else {
        t1 = "" + "rgba(" + B.JSInt_methods.toString$0(value >>> 16 & 255) + "," + B.JSInt_methods.toString$0(value >>> 8 & 255) + "," + B.JSInt_methods.toString$0(value & 255) + "," + B.JSNumber_methods.toString$0((value >>> 24 & 255) / 255) + ")";
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    _fallbackFontFamily() {
      if (A.isIOS15())
        return "BlinkMacSystemFont";
      var t1 = $.$get$_operatingSystem();
      if (t1 !== B.OperatingSystem_0)
        t1 = t1 === B.OperatingSystem_4;
      else
        t1 = true;
      if (t1)
        return "-apple-system, BlinkMacSystemFont";
      return "Arial";
    },
    canonicalizeFontFamily(fontFamily) {
      var t1;
      if (J.containsKey$1$x(B.Set_wIvsi._collection$_map, fontFamily))
        return fontFamily;
      t1 = $.$get$_operatingSystem();
      if (t1 !== B.OperatingSystem_0)
        t1 = t1 === B.OperatingSystem_4;
      else
        t1 = true;
      if (t1)
        if (fontFamily === ".SF Pro Text" || fontFamily === ".SF Pro Display" || fontFamily === ".SF UI Text" || fontFamily === ".SF UI Display")
          return A._fallbackFontFamily();
      return '"' + A.S(fontFamily) + '", ' + A._fallbackFontFamily() + ", sans-serif";
    },
    clampInt(value, min, max) {
      if (value < min)
        return min;
      else if (value > max)
        return max;
      else
        return value;
    },
    listEquals(a, b) {
      var index;
      if (a == null)
        return b == null;
      if (b == null || a.length !== b.length)
        return false;
      for (index = 0; index < a.length; ++index)
        if (!J.$eq$(a[index], b[index]))
          return false;
      return true;
    },
    httpFetch(url) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Body),
        $async$returnValue, t1, $async$temp1;
      var $async$httpFetch = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = window;
              $async$temp1 = type$.Body;
              $async$goto = 3;
              return A._asyncAwait(A.promiseToFuture(t1.fetch(url, null), type$.dynamic), $async$httpFetch);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1._as($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$httpFetch, $async$completer);
    },
    setElementStyle(element, $name, value) {
      var t1 = element.style;
      B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, $name), value, null);
    },
    setClipPath(element, value) {
      var t1 = $.$get$_browserEngine();
      if (t1 === B.BrowserEngine_1) {
        t1 = element.style;
        B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "-webkit-clip-path"), value, null);
      }
      t1 = element.style;
      B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "clip-path"), value, null);
    },
    drawEllipse(context, centerX, centerY, radiusX, radiusY, rotation, startAngle, endAngle, antiClockwise) {
      var t1 = $._ellipseFeatureDetected;
      if (t1 == null ? $._ellipseFeatureDetected = context.ellipse != null : t1)
        context.ellipse(centerX, centerY, radiusX, radiusY, rotation, startAngle, endAngle, antiClockwise);
      else {
        context.save();
        context.translate(centerX, centerY);
        context.rotate(rotation);
        context.scale(radiusX, radiusY);
        context.arc(0, 0, 1, startAngle, endAngle, antiClockwise);
        context.restore();
      }
    },
    removeAllChildren(node) {
      var t1, t2;
      for (; t1 = node.lastChild, t1 != null;) {
        t2 = t1.parentNode;
        if (t2 != null)
          t2.removeChild(t1);
      }
    },
    Matrix4_tryInvert0(other) {
      var r = new A.Matrix40(new Float32Array(16));
      if (r.copyInverse$1(other) === 0)
        return null;
      return r;
    },
    Matrix4$identity() {
      var t1 = new Float32Array(16);
      t1[15] = 1;
      t1[0] = 1;
      t1[5] = 1;
      t1[10] = 1;
      return new A.Matrix40(t1);
    },
    Matrix4$fromFloat32List(_m4storage) {
      return new A.Matrix40(_m4storage);
    },
    EngineSingletonFlutterWindow$(windowId, platformDispatcher) {
      var t1 = new A.EngineSingletonFlutterWindow(windowId, platformDispatcher, A.Future_Future$value(null, type$.void), B.WindowPadding_0_0_0_0);
      t1.EngineFlutterWindow$2(windowId, platformDispatcher);
      return t1;
    },
    AlarmClock: function AlarmClock(t0) {
      var _ = this;
      _._timestampFunction = t0;
      _.callback = _._datetime = _.__engine$_timer = null;
    },
    AssetManager: function AssetManager() {
    },
    AssetManager__baseUrl_closure: function AssetManager__baseUrl_closure() {
    },
    AssetManager__baseUrl_closure0: function AssetManager__baseUrl_closure0() {
    },
    AssetManagerException: function AssetManagerException(t0, t1) {
      this.url = t0;
      this.httpStatus = t1;
    },
    BrowserEngine: function BrowserEngine(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    OperatingSystem: function OperatingSystem(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    CanvasPool: function CanvasPool(t0, t1, t2, t3, t4) {
      var _ = this;
      _._contextHandle = _.__engine$_context = null;
      _._widthInBitmapPixels = t0;
      _._heightInBitmapPixels = t1;
      _._rootElement = _.__engine$_canvas = _._reusablePool = _._activeCanvasList = null;
      _._saveContextCount = 0;
      _._density = t2;
      _._saveStack = t3;
      _.clipStack = null;
      _._currentTransform = t4;
    },
    ContextStateHandle: function ContextStateHandle(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.context = t0;
      _._canvasPool = t1;
      _.density = t2;
      _._currentBlendMode = t3;
      _._currentStrokeCap = t4;
      _._currentStrokeJoin = t5;
      _._currentStrokeStyle = _._currentFillStyle = null;
      _._currentLineWidth = 1;
      _._shaderBounds = _._lastUsedPaint = _._currentFilter = null;
      _._debugIsPaintSetUp = false;
    },
    _SaveStackTracking: function _SaveStackTracking() {
    },
    CkCanvas: function CkCanvas(t0) {
      this.skCanvas = t0;
    },
    RecordingCkCanvas: function RecordingCkCanvas(t0, t1) {
      this.pictureSnapshot = t0;
      this.skCanvas = t1;
    },
    CkPictureSnapshot: function CkPictureSnapshot(t0, t1) {
      this._bounds = t0;
      this._commands = t1;
    },
    CkPaintCommand: function CkPaintCommand() {
    },
    CkClearCommand: function CkClearCommand(t0) {
      this.color = t0;
    },
    CkSaveCommand: function CkSaveCommand() {
    },
    CkRestoreCommand: function CkRestoreCommand() {
    },
    CkRestoreToCountCommand: function CkRestoreToCountCommand(t0) {
      this.count = t0;
    },
    CkTranslateCommand: function CkTranslateCommand(t0, t1) {
      this.dx = t0;
      this.dy = t1;
    },
    CkTransformCommand: function CkTransformCommand(t0) {
      this.matrix4 = t0;
    },
    CkClipRectCommand: function CkClipRectCommand(t0, t1, t2) {
      this.rect = t0;
      this.clipOp = t1;
      this.doAntiAlias = t2;
    },
    CkClipRRectCommand: function CkClipRRectCommand(t0, t1) {
      this.rrect = t0;
      this.doAntiAlias = t1;
    },
    CkClipPathCommand: function CkClipPathCommand(t0, t1) {
      this.path = t0;
      this.doAntiAlias = t1;
    },
    CkDrawPaintCommand: function CkDrawPaintCommand(t0) {
      this.paint = t0;
    },
    CkDrawRectCommand: function CkDrawRectCommand(t0, t1) {
      this.rect = t0;
      this.paint = t1;
    },
    CkDrawRRectCommand: function CkDrawRRectCommand(t0, t1) {
      this.rrect = t0;
      this.paint = t1;
    },
    CkDrawDRRectCommand: function CkDrawDRRectCommand(t0, t1, t2) {
      this.outer = t0;
      this.inner = t1;
      this.paint = t2;
    },
    CkDrawCircleCommand: function CkDrawCircleCommand(t0, t1, t2) {
      this.c = t0;
      this.radius = t1;
      this.paint = t2;
    },
    CkDrawPathCommand: function CkDrawPathCommand(t0, t1) {
      this.path = t0;
      this.paint = t1;
    },
    CkDrawShadowCommand: function CkDrawShadowCommand(t0, t1, t2, t3) {
      var _ = this;
      _.path = t0;
      _.color = t1;
      _.elevation = t2;
      _.transparentOccluder = t3;
    },
    CkDrawParagraphCommand: function CkDrawParagraphCommand(t0, t1) {
      this.paragraph = t0;
      this.offset = t1;
    },
    CkDrawPictureCommand: function CkDrawPictureCommand(t0) {
      this.picture = t0;
    },
    CkSaveLayerCommand: function CkSaveLayerCommand(t0, t1) {
      this.bounds = t0;
      this.paint = t1;
    },
    H5vcc: function H5vcc() {
    },
    CanvasKit: function CanvasKit() {
    },
    CanvasKitInitOptions: function CanvasKitInitOptions() {
    },
    CanvasKitInitPromise: function CanvasKitInitPromise() {
    },
    ColorSpace: function ColorSpace() {
    },
    SkWebGLContextOptions: function SkWebGLContextOptions() {
    },
    SkSurface: function SkSurface() {
    },
    SkGrContext: function SkGrContext() {
    },
    SkFontSlantEnum: function SkFontSlantEnum() {
    },
    SkFontSlant: function SkFontSlant() {
    },
    SkFontWeightEnum: function SkFontWeightEnum() {
    },
    SkFontWeight: function SkFontWeight() {
    },
    SkAffinityEnum: function SkAffinityEnum() {
    },
    SkAffinity: function SkAffinity() {
    },
    SkTextDirectionEnum: function SkTextDirectionEnum() {
    },
    SkTextDirection: function SkTextDirection() {
    },
    SkTextAlignEnum: function SkTextAlignEnum() {
    },
    SkTextAlign: function SkTextAlign() {
    },
    SkTextHeightBehaviorEnum: function SkTextHeightBehaviorEnum() {
    },
    SkTextHeightBehavior: function SkTextHeightBehavior() {
    },
    SkRectHeightStyleEnum: function SkRectHeightStyleEnum() {
    },
    SkRectHeightStyle: function SkRectHeightStyle() {
    },
    SkRectWidthStyleEnum: function SkRectWidthStyleEnum() {
    },
    SkRectWidthStyle: function SkRectWidthStyle() {
    },
    SkVertexModeEnum: function SkVertexModeEnum() {
    },
    SkVertexMode: function SkVertexMode() {
    },
    SkPointModeEnum: function SkPointModeEnum() {
    },
    SkPointMode: function SkPointMode() {
    },
    SkClipOpEnum: function SkClipOpEnum() {
    },
    SkClipOp: function SkClipOp() {
    },
    SkFillTypeEnum: function SkFillTypeEnum() {
    },
    SkFillType: function SkFillType() {
    },
    SkPathOpEnum: function SkPathOpEnum() {
    },
    SkPathOp: function SkPathOp() {
    },
    SkBlurStyleEnum: function SkBlurStyleEnum() {
    },
    SkBlurStyle: function SkBlurStyle() {
    },
    SkStrokeCapEnum: function SkStrokeCapEnum() {
    },
    SkStrokeCap: function SkStrokeCap() {
    },
    SkPaintStyleEnum: function SkPaintStyleEnum() {
    },
    SkPaintStyle: function SkPaintStyle() {
    },
    SkBlendModeEnum: function SkBlendModeEnum() {
    },
    SkBlendMode: function SkBlendMode() {
    },
    SkStrokeJoinEnum: function SkStrokeJoinEnum() {
    },
    SkStrokeJoin: function SkStrokeJoin() {
    },
    SkTileModeEnum: function SkTileModeEnum() {
    },
    SkTileMode: function SkTileMode() {
    },
    SkFilterModeEnum: function SkFilterModeEnum() {
    },
    SkFilterMode: function SkFilterMode() {
    },
    SkMipmapModeEnum: function SkMipmapModeEnum() {
    },
    SkMipmapMode: function SkMipmapMode() {
    },
    SkAlphaTypeEnum: function SkAlphaTypeEnum() {
    },
    SkAlphaType: function SkAlphaType() {
    },
    SkColorTypeEnum: function SkColorTypeEnum() {
    },
    SkColorType: function SkColorType() {
    },
    SkAnimatedImage: function SkAnimatedImage() {
    },
    SkImage: function SkImage() {
    },
    SkShaderNamespace: function SkShaderNamespace() {
    },
    SkShader: function SkShader() {
    },
    SkMaskFilterNamespace: function SkMaskFilterNamespace() {
    },
    SkPaint: function SkPaint() {
    },
    CkFilterOptions: function CkFilterOptions() {
    },
    _CkCubicFilterOptions: function _CkCubicFilterOptions() {
    },
    _CkTransformFilterOptions: function _CkTransformFilterOptions() {
    },
    SkMaskFilter: function SkMaskFilter() {
    },
    SkColorFilterNamespace: function SkColorFilterNamespace() {
    },
    SkColorFilter: function SkColorFilter() {
    },
    SkImageFilterNamespace: function SkImageFilterNamespace() {
    },
    SkImageFilter: function SkImageFilter() {
    },
    SkPathNamespace: function SkPathNamespace() {
    },
    _NativeFloat32ArrayType: function _NativeFloat32ArrayType() {
    },
    SkFloat32List: function SkFloat32List() {
    },
    SkPath: function SkPath() {
    },
    SkContourMeasureIter: function SkContourMeasureIter() {
    },
    SkContourMeasure: function SkContourMeasure() {
    },
    SkPictureRecorder: function SkPictureRecorder() {
    },
    SkCanvas: function SkCanvas() {
    },
    SkPicture: function SkPicture() {
    },
    SkParagraphBuilderNamespace: function SkParagraphBuilderNamespace() {
    },
    SkParagraphBuilder: function SkParagraphBuilder() {
    },
    SkParagraphStyle: function SkParagraphStyle() {
    },
    SkParagraphStyleProperties: function SkParagraphStyleProperties() {
    },
    SkTextStyle: function SkTextStyle() {
    },
    SkTextDecorationStyleEnum: function SkTextDecorationStyleEnum() {
    },
    SkTextDecorationStyle: function SkTextDecorationStyle() {
    },
    SkTextBaselineEnum: function SkTextBaselineEnum() {
    },
    SkTextBaseline: function SkTextBaseline() {
    },
    SkPlaceholderAlignmentEnum: function SkPlaceholderAlignmentEnum() {
    },
    SkPlaceholderAlignment: function SkPlaceholderAlignment() {
    },
    SkTextStyleProperties: function SkTextStyleProperties() {
    },
    SkStrutStyleProperties: function SkStrutStyleProperties() {
    },
    SkFontStyle: function SkFontStyle() {
    },
    SkTextShadow: function SkTextShadow() {
    },
    SkFontFeature: function SkFontFeature() {
    },
    SkTypeface: function SkTypeface() {
    },
    SkFont: function SkFont() {
    },
    SkFontMgr: function SkFontMgr() {
    },
    TypefaceFontProvider: function TypefaceFontProvider() {
    },
    SkLineMetrics: function SkLineMetrics() {
    },
    SkParagraph: function SkParagraph() {
    },
    SkTextPosition: function SkTextPosition() {
    },
    SkTextRange: function SkTextRange() {
    },
    SkVertices: function SkVertices() {
    },
    SkTonalColors: function SkTonalColors() {
    },
    SkFontMgrNamespace: function SkFontMgrNamespace() {
    },
    TypefaceFontProviderNamespace: function TypefaceFontProviderNamespace() {
    },
    SkTypefaceFactory: function SkTypefaceFactory() {
    },
    ProductionCollector: function ProductionCollector(t0) {
      this.__ProductionCollector__skObjectFinalizationRegistry = $;
      this._skiaObjectCollectionQueue = t0;
      this._skiaObjectCollectionTimer = null;
    },
    ProductionCollector_closure: function ProductionCollector_closure(t0) {
      this.$this = t0;
    },
    ProductionCollector_collect_closure: function ProductionCollector_collect_closure(t0) {
      this.$this = t0;
    },
    SkiaObjectCollectionError: function SkiaObjectCollectionError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    SkDeletable: function SkDeletable() {
    },
    JsConstructor: function JsConstructor() {
    },
    SkObjectFinalizationRegistry: function SkObjectFinalizationRegistry() {
    },
    SkData: function SkData() {
    },
    SkImageInfo: function SkImageInfo() {
    },
    SkPartialImageInfo: function SkPartialImageInfo() {
    },
    patchCanvasKitModule_closure: function patchCanvasKitModule_closure(t0, t1) {
      this.canvasKitScript = t0;
      this.objectConstructor = t1;
    },
    patchCanvasKitModule_closure0: function patchCanvasKitModule_closure0() {
    },
    patchCanvasKitModule_closure1: function patchCanvasKitModule_closure1(t0, t1) {
      this.canvasKitScript = t0;
      this.objectConstructor = t1;
    },
    patchCanvasKitModule_closure2: function patchCanvasKitModule_closure2() {
    },
    CanvasKitCanvas: function CanvasKitCanvas(t0) {
      this.__engine$_canvas = t0;
    },
    HtmlViewEmbedder: function HtmlViewEmbedder(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _._viewsUsingBackupSurface = t0;
      _._pictureRecordersCreatedDuringPreroll = t1;
      _._backupPictureRecorder = null;
      _._pictureRecorders = t2;
      _._currentCompositionParams = t3;
      _._viewClipChains = t4;
      _._overlays = t5;
      _._viewsToRecomposite = t6;
      _._compositionOrder = t7;
      _._activeCompositionOrder = t8;
      _._frameSize = t9;
      _._svgClipDefs = t10;
    },
    HtmlViewEmbedder_getOverlayCanvases_closure: function HtmlViewEmbedder_getOverlayCanvases_closure() {
    },
    HtmlViewEmbedder_submitFrame_closure: function HtmlViewEmbedder_submitFrame_closure() {
    },
    HtmlViewEmbedder_submitFrame_closure0: function HtmlViewEmbedder_submitFrame_closure0() {
    },
    HtmlViewEmbedder_submitFrame_closure1: function HtmlViewEmbedder_submitFrame_closure1(t0) {
      this.$this = t0;
    },
    HtmlViewEmbedder__updateOverlays_closure: function HtmlViewEmbedder__updateOverlays_closure() {
    },
    MutatorType: function MutatorType(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    Mutator: function Mutator(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.type = t0;
      _.rect = t1;
      _.rrect = t2;
      _.path = t3;
      _.matrix = t4;
      _.alpha = t5;
    },
    MutatorsStack: function MutatorsStack(t0) {
      this._mutators = t0;
    },
    ViewListDiffResult: function ViewListDiffResult(t0, t1, t2, t3) {
      var _ = this;
      _.viewsToRemove = t0;
      _.viewsToAdd = t1;
      _.addToBeginning = t2;
      _.viewToInsertBefore = t3;
    },
    FontFallbackData: function FontFallbackData(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.registeredSymbolsAndEmoji = false;
      _.codeUnitsWithNoKnownFont = t0;
      _.knownCoveredCodeUnits = t1;
      _.notoTree = t2;
      _.registeredFallbackFonts = t3;
      _.globalFontFallbacks = t4;
      _.fontFallbackCounts = t5;
      _._codeUnitsToCheckAgainstFallbackFonts = t6;
      _._scheduledCodeUnitCheck = false;
    },
    FontFallbackData_createNotoFontTree_closure: function FontFallbackData_createNotoFontTree_closure() {
    },
    FontFallbackData_ensureFontsSupportText_closure: function FontFallbackData_ensureFontsSupportText_closure() {
    },
    FontFallbackData_registerFallbackFont_closure: function FontFallbackData_registerFallbackFont_closure() {
    },
    _makeResolvedNotoFontFromCss_closure: function _makeResolvedNotoFontFromCss_closure() {
    },
    _registerSymbolsAndEmoji_extractUrlFromCss: function _registerSymbolsAndEmoji_extractUrlFromCss() {
    },
    findMinimumFontsForCodeUnits_closure: function findMinimumFontsForCodeUnits_closure() {
    },
    findMinimumFontsForCodeUnits_closure0: function findMinimumFontsForCodeUnits_closure0(t0) {
      this._box_0 = t0;
    },
    NotoFont: function NotoFont(t0, t1) {
      var _ = this;
      _.name = t0;
      _.approximateUnicodeRanges = t1;
      _.resolvedFont = _._decodingCompleter = null;
    },
    CodeunitRange: function CodeunitRange(t0, t1) {
      this.start = t0;
      this.end = t1;
    },
    _ResolvedNotoFont: function _ResolvedNotoFont(t0, t1) {
      this.name = t0;
      this.tree = t1;
    },
    _ResolvedNotoSubset: function _ResolvedNotoSubset(t0, t1, t2) {
      this.url = t0;
      this.family = t1;
      this.ranges = t2;
    },
    FallbackFontDownloadQueue: function FallbackFontDownloadQueue(t0, t1, t2) {
      var _ = this;
      _.downloader = t0;
      _.downloadedSubsets = t1;
      _.pendingSubsets = t2;
      _._fontsLoading = null;
    },
    FallbackFontDownloadQueue_startDownloads_closure: function FallbackFontDownloadQueue_startDownloads_closure(t0, t1, t2) {
      this.$this = t0;
      this.subset = t1;
      this.downloadedData = t2;
    },
    NotoDownloader: function NotoDownloader() {
      this._debugActiveDownloadCount = 0;
    },
    NotoDownloader_downloadAsBytes_closure: function NotoDownloader_downloadAsBytes_closure() {
    },
    NotoDownloader_downloadAsBytes__closure: function NotoDownloader_downloadAsBytes__closure() {
    },
    NotoDownloader_downloadAsString_closure: function NotoDownloader_downloadAsString_closure() {
    },
    NotoDownloader_downloadAsString__closure: function NotoDownloader_downloadAsString__closure() {
    },
    SkiaFontCollection: function SkiaFontCollection(t0, t1, t2, t3) {
      var _ = this;
      _._registeredFontFamilies = t0;
      _._pendingFonts = t1;
      _._downloadedFonts = t2;
      _.familyToFontMap = t3;
      _.fontProvider = null;
    },
    SkiaFontCollection_ensureFontsLoaded_closure: function SkiaFontCollection_ensureFontsLoaded_closure() {
    },
    SkiaFontCollection_ensureFontsLoaded_closure0: function SkiaFontCollection_ensureFontsLoaded_closure0() {
    },
    SkiaFontCollection__registerFont__downloadFont: function SkiaFontCollection__registerFont__downloadFont(t0, t1, t2) {
      this.$this = t0;
      this.url = t1;
      this.family = t2;
    },
    SkiaFontCollection__getArrayBuffer_closure: function SkiaFontCollection__getArrayBuffer_closure() {
    },
    RegisteredFont: function RegisteredFont(t0, t1, t2) {
      this.family = t0;
      this.bytes = t1;
      this.typeface = t2;
    },
    downloadCanvasKit_closure: function downloadCanvasKit_closure(t0) {
      this.canvasKitBase = t0;
    },
    downloadCanvasKit_closure0: function downloadCanvasKit_closure0(t0) {
      this.canvasKitInitCompleter = t0;
    },
    _downloadCanvasKitJs_closure: function _downloadCanvasKitJs_closure(t0, t1) {
      this.loadSubscription = t0;
      this.canvasKitLoadCompleter = t1;
    },
    IntervalTree: function IntervalTree(t0, t1) {
      this.root = t0;
      this.$ti = t1;
    },
    IntervalTree_IntervalTree$createFromRanges_closure: function IntervalTree_IntervalTree$createFromRanges_closure(t0, t1) {
      this.intervals = t0;
      this.T = t1;
    },
    IntervalTree_IntervalTree$createFromRanges_closure0: function IntervalTree_IntervalTree$createFromRanges_closure0(t0) {
      this.T = t0;
    },
    IntervalTree_IntervalTree$createFromRanges__makeBalancedTree: function IntervalTree_IntervalTree$createFromRanges__makeBalancedTree(t0) {
      this.T = t0;
    },
    IntervalTree_IntervalTree$createFromRanges__computeHigh: function IntervalTree_IntervalTree$createFromRanges__computeHigh(t0) {
      this.T = t0;
    },
    IntervalTreeNode: function IntervalTreeNode(t0, t1, t2, t3, t4) {
      var _ = this;
      _.value = t0;
      _.low = t1;
      _.high = t2;
      _.computedHigh = t3;
      _.right = _.left = null;
      _.$ti = t4;
    },
    Layer: function Layer() {
    },
    PrerollContext: function PrerollContext(t0) {
      this.mutatorsStack = t0;
    },
    PaintContext: function PaintContext(t0, t1) {
      this.internalNodesCanvas = t0;
      this.leafNodesCanvas = t1;
    },
    ContainerLayer: function ContainerLayer() {
    },
    RootLayer: function RootLayer(t0, t1) {
      this._layers = t0;
      this.parent = null;
      this.paintBounds = t1;
    },
    ClipPathEngineLayer: function ClipPathEngineLayer(t0, t1, t2, t3) {
      var _ = this;
      _.__engine$_clipPath = t0;
      _.__engine$_clipBehavior = t1;
      _._layers = t2;
      _.parent = null;
      _.paintBounds = t3;
    },
    ClipRectEngineLayer: function ClipRectEngineLayer(t0, t1, t2, t3) {
      var _ = this;
      _._clipRect = t0;
      _.__engine$_clipBehavior = t1;
      _._layers = t2;
      _.parent = null;
      _.paintBounds = t3;
    },
    TransformEngineLayer: function TransformEngineLayer(t0, t1, t2) {
      var _ = this;
      _.__engine$_transform = t0;
      _._layers = t1;
      _.parent = null;
      _.paintBounds = t2;
    },
    OffsetEngineLayer: function OffsetEngineLayer(t0, t1, t2) {
      var _ = this;
      _.__engine$_transform = t0;
      _._layers = t1;
      _.parent = null;
      _.paintBounds = t2;
    },
    PictureLayer0: function PictureLayer0(t0, t1, t2) {
      var _ = this;
      _.picture = t0;
      _.offset = t1;
      _.parent = null;
      _.paintBounds = t2;
    },
    PhysicalShapeEngineLayer: function PhysicalShapeEngineLayer(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.__engine$_elevation = t0;
      _._color = t1;
      _.__engine$_shadowColor = t2;
      _.__engine$_path = t3;
      _.__engine$_clipBehavior = t4;
      _._layers = t5;
      _.parent = null;
      _.paintBounds = t6;
    },
    LayerScene: function LayerScene(t0) {
      this.layerTree = t0;
    },
    LayerSceneBuilder: function LayerSceneBuilder(t0) {
      this.rootLayer = t0;
      this.__LayerSceneBuilder_currentLayer = $;
    },
    LayerTree: function LayerTree(t0, t1) {
      this.rootLayer = t0;
      this.frameSize = t1;
    },
    Frame: function Frame(t0, t1, t2) {
      this.canvas = t0;
      this.rasterCache = t1;
      this.viewEmbedder = t2;
    },
    Frame_raster_closure: function Frame_raster_closure(t0, t1, t2) {
      this.$this = t0;
      this.layerTree = t1;
      this.ignoreRasterCache = t2;
    },
    Frame_raster_closure0: function Frame_raster_closure0(t0, t1, t2) {
      this.$this = t0;
      this.layerTree = t1;
      this.ignoreRasterCache = t2;
    },
    CompositorContext: function CompositorContext() {
    },
    CkMaskFilter: function CkMaskFilter(t0, t1) {
      this._blurStyle = t0;
      this.__engine$_sigma = t1;
      this.rawSkiaObject = null;
    },
    CkNWayCanvas: function CkNWayCanvas(t0) {
      this._canvases = t0;
    },
    CkPaint: function CkPaint(t0, t1, t2, t3) {
      var _ = this;
      _._blendMode = t0;
      _._style = t1;
      _._strokeWidth = 0;
      _._isAntiAlias = true;
      _._color = t2;
      _._invertColors = false;
      _._ckMaskFilter = _._maskFilter = _._shader = _._originalColorFilter = null;
      _._filterQuality = t3;
      _.rawSkiaObject = _._managedImageFilter = _._imageFilter = _._effectiveColorFilter = null;
    },
    CkPath: function CkPath(t0) {
      this._fillType = t0;
      this.rawSkiaObject = this._cachedCommands = null;
    },
    CkPicture: function CkPicture(t0, t1) {
      var _ = this;
      _.cullRect = t0;
      _._snapshot = t1;
      _._isDisposed = false;
      _.rawSkiaObject = _._debugDisposalStackTrace = null;
    },
    CkPictureRecorder: function CkPictureRecorder() {
      this._recordingCanvas = this._skRecorder = this._cullRect = null;
    },
    Rasterizer: function Rasterizer(t0, t1) {
      this.context = t0;
      this._postFrameCallbacks = t1;
    },
    CkShader: function CkShader() {
    },
    CkGradientLinear: function CkGradientLinear(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.from = t0;
      _.to = t1;
      _.colors = t2;
      _.colorStops = t3;
      _.tileMode = t4;
      _.matrix4 = t5;
      _.rawSkiaObject = null;
    },
    SkiaObjectCache: function SkiaObjectCache(t0, t1, t2) {
      this.maximumSize = t0;
      this._itemQueue = t1;
      this._itemMap = t2;
    },
    SynchronousSkiaObjectCache: function SynchronousSkiaObjectCache(t0, t1, t2) {
      this.maximumSize = t0;
      this._itemQueue = t1;
      this._itemMap = t2;
    },
    SkiaObject: function SkiaObject() {
    },
    ManagedSkiaObject: function ManagedSkiaObject() {
    },
    SurfaceFrame: function SurfaceFrame(t0, t1) {
      this.skiaSurface = t0;
      this.submitCallback = t1;
    },
    Surface: function Surface(t0) {
      var _ = this;
      _._surface = null;
      _._forceNewContext = true;
      _._contextLost = false;
      _._skiaCacheBytes = _._glContext = _._grContext = _._cachedContextRestoredListener = _._cachedContextLostListener = null;
      _.htmlElement = t0;
      _.htmlCanvas = null;
      _._pixelHeight = _._pixelWidth = -1;
      _._addedToScene = false;
      _._currentSurfaceSize = _._currentCanvasPhysicalSize = null;
      _._currentDevicePixelRatio = -1;
    },
    Surface_acquireFrame_closure: function Surface_acquireFrame_closure(t0) {
      this.$this = t0;
    },
    CkSurface: function CkSurface(t0) {
      this.surface = t0;
      this._isDisposed = false;
    },
    SurfaceFactory: function SurfaceFactory(t0, t1, t2, t3, t4) {
      var _ = this;
      _.baseSurface = t0;
      _.backupSurface = t1;
      _.maximumSurfaces = t2;
      _._liveSurfaces = t3;
      _.__engine$_cache = t4;
    },
    CkParagraphStyle: function CkParagraphStyle(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.skParagraphStyle = t0;
      _.__engine$_textDirection = t1;
      _._fontFamily = t2;
      _._fontSize = t3;
      _.__engine$_height = t4;
      _._fontWeight = t5;
      _._fontStyle = t6;
      _._leadingDistribution = t7;
    },
    CkTextStyle: function CkTextStyle(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19) {
      var _ = this;
      _.color = t0;
      _.decoration = t1;
      _.decorationColor = t2;
      _.decorationStyle = t3;
      _.decorationThickness = t4;
      _.fontWeight = t5;
      _.fontStyle = t6;
      _.textBaseline = t7;
      _.fontFamily = t8;
      _.fontFamilyFallback = t9;
      _.fontSize = t10;
      _.letterSpacing = t11;
      _.wordSpacing = t12;
      _.height = t13;
      _.leadingDistribution = t14;
      _.locale = t15;
      _.background = t16;
      _.foreground = t17;
      _.shadows = t18;
      _.fontFeatures = t19;
      _.__CkTextStyle_skTextStyle = _.__CkTextStyle_effectiveFontFamilies = $;
    },
    CkTextStyle_skTextStyle_closure: function CkTextStyle_skTextStyle_closure(t0) {
      this.$this = t0;
    },
    CkParagraph: function CkParagraph(t0, t1, t2) {
      var _ = this;
      _._skParagraph = t0;
      _._paragraphStyle = t1;
      _._paragraphCommands = t2;
      _._lastLayoutConstraints = null;
      _._alphabeticBaseline = 0;
      _._didExceedMaxLines = false;
      _.__engine$_width = _._minIntrinsicWidth = _._maxIntrinsicWidth = _._longestLine = _._ideographicBaseline = _.__engine$_height = 0;
      _._boxesForPlaceholders = null;
    },
    CkParagraphBuilder: function CkParagraphBuilder(t0, t1, t2, t3, t4) {
      var _ = this;
      _._paragraphBuilder = t0;
      _._style = t1;
      _._commands = t2;
      _._placeholderScales = t3;
      _._styleStack = t4;
    },
    _ParagraphCommand: function _ParagraphCommand(t0, t1, t2, t3) {
      var _ = this;
      _.type = t0;
      _.text = t1;
      _.style = t2;
      _.placeholderStyle = t3;
    },
    _ParagraphCommandType: function _ParagraphCommandType(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    _getEffectiveFontFamilies_closure: function _getEffectiveFontFamilies_closure(t0) {
      this.fontFamily = t0;
    },
    CanvasKitError: function CanvasKitError(t0) {
      this.message = t0;
    },
    ClipboardMessageHandler: function ClipboardMessageHandler(t0, t1) {
      this._copyToClipboardStrategy = t0;
      this._pasteFromClipboardStrategy = t1;
    },
    ClipboardMessageHandler_setDataMethodCall_closure: function ClipboardMessageHandler_setDataMethodCall_closure(t0, t1) {
      this._box_0 = t0;
      this.callback = t1;
    },
    ClipboardMessageHandler_setDataMethodCall_closure0: function ClipboardMessageHandler_setDataMethodCall_closure0(t0, t1) {
      this._box_0 = t0;
      this.callback = t1;
    },
    ClipboardMessageHandler_getDataMethodCall_closure: function ClipboardMessageHandler_getDataMethodCall_closure(t0) {
      this.callback = t0;
    },
    ClipboardMessageHandler_getDataMethodCall_closure0: function ClipboardMessageHandler_getDataMethodCall_closure0(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    ClipboardMessageHandler_getDataMethodCall__closure: function ClipboardMessageHandler_getDataMethodCall__closure(t0) {
      this.callback = t0;
    },
    ClipboardAPICopyStrategy: function ClipboardAPICopyStrategy() {
    },
    ClipboardAPIPasteStrategy: function ClipboardAPIPasteStrategy() {
    },
    ExecCommandCopyStrategy: function ExecCommandCopyStrategy() {
    },
    ExecCommandPasteStrategy: function ExecCommandPasteStrategy() {
    },
    FlutterConfiguration: function FlutterConfiguration(t0) {
      this._js = t0;
    },
    JsFlutterConfiguration: function JsFlutterConfiguration() {
    },
    FlutterViewEmbedder: function FlutterViewEmbedder(t0) {
      var _ = this;
      _._glassPaneShadow = _._glassPaneElement = _._staleHotRestartState = _._sceneElement = _._semanticsHostElement = _._resourcesHost = _._sceneHostElement = _._viewportMeta = _._styleElement = _._localeSubscription = _._resizeSubscription = null;
      _.rootElement = t0;
    },
    FlutterViewEmbedder_reset_closure: function FlutterViewEmbedder_reset_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.initialInnerWidth = t2;
    },
    FlutterViewEmbedder_setPreferredOrientation_closure: function FlutterViewEmbedder_setPreferredOrientation_closure(t0) {
      this.completer = t0;
    },
    FlutterViewEmbedder_setPreferredOrientation_closure0: function FlutterViewEmbedder_setPreferredOrientation_closure0(t0) {
      this.completer = t0;
    },
    EngineCanvas: function EngineCanvas() {
    },
    SaveStackEntry: function SaveStackEntry(t0, t1) {
      this.transform = t0;
      this.clipStack = t1;
    },
    SaveClipEntry: function SaveClipEntry(t0, t1, t2, t3) {
      var _ = this;
      _.rect = t0;
      _.rrect = t1;
      _.path = t2;
      _.currentTransform = t3;
    },
    _SaveElementStackEntry: function _SaveElementStackEntry(t0, t1) {
      this.savedElement = t0;
      this.transform = t1;
    },
    SaveElementStackTracking: function SaveElementStackTracking() {
    },
    sendFontChangeMessage_closure: function sendFontChangeMessage_closure() {
    },
    sendFontChangeMessage__closure: function sendFontChangeMessage__closure() {
    },
    FrameReference: function FrameReference(t0) {
      this.value = t0;
    },
    CrossFrameCache: function CrossFrameCache(t0) {
      this._reusablePool = this.__engine$_cache = null;
      this.$ti = t0;
    },
    ShadowDomHostNode: function ShadowDomHostNode() {
      this.__ShadowDomHostNode__shadow = $;
    },
    ElementHostNode: function ElementHostNode() {
      this.__ElementHostNode__element = $;
    },
    BitmapCanvas: function BitmapCanvas(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _._bounds = t0;
      _._elementCache = null;
      _.rootElement = t1;
      _._canvasPool = t2;
      _._cachedLastCssFont = null;
      _.__engine$_children = t3;
      _.widthInBitmapPixels = t4;
      _.heightInBitmapPixels = t5;
      _._saveCount = 0;
      _._devicePixelRatio = t6;
      _._canvasPositionY = _._canvasPositionX = null;
      _._preserveImageData = _._contains3dTransform = _._childOverdraw = false;
      _._density = t7;
      _._renderStrategy = t8;
    },
    SurfaceCanvas: function SurfaceCanvas(t0) {
      this.__engine$_canvas = t0;
    },
    _DomClip: function _DomClip() {
    },
    PersistedClipRect: function PersistedClipRect(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.clipBehavior = t0;
      _.rect = t1;
      _._DomClip__childContainer = t2;
      _.__engine$_children = t3;
      _._oldLayer = t4;
      _.__engine$_index = -1;
      _.__engine$_state = t5;
      _.localClipBounds = _.projectedClip = _.transform = _.parent = _.rootElement = null;
    },
    PersistedPhysicalShape: function PersistedPhysicalShape(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.path = t0;
      _.pathBounds = t1;
      _.elevation = t2;
      _.color = t3;
      _.shadowColor = t4;
      _.clipBehavior = t5;
      _._svgElement = _._clipElement = null;
      _._DomClip__childContainer = t6;
      _.__engine$_children = t7;
      _._oldLayer = t8;
      _.__engine$_index = -1;
      _.__engine$_state = t9;
      _.localClipBounds = _.projectedClip = _.transform = _.parent = _.rootElement = null;
    },
    PersistedClipPath: function PersistedClipPath(t0, t1, t2, t3, t4) {
      var _ = this;
      _.clipPath = t0;
      _.clipBehavior = t1;
      _._clipElement = null;
      _.__engine$_children = t2;
      _._oldLayer = t3;
      _.__engine$_index = -1;
      _.__engine$_state = t4;
      _.localClipBounds = _.projectedClip = _.transform = _.parent = _.rootElement = null;
    },
    DomCanvas: function DomCanvas(t0, t1, t2, t3) {
      var _ = this;
      _.rootElement = t0;
      _.SaveElementStackTracking__saveStack = t1;
      _.SaveElementStackTracking__elementStack = t2;
      _.SaveElementStackTracking__currentTransform = t3;
    },
    PersistedOffset: function PersistedOffset(t0, t1, t2, t3, t4) {
      var _ = this;
      _.dx = t0;
      _.dy = t1;
      _._localTransformInverse = null;
      _.__engine$_children = t2;
      _._oldLayer = t3;
      _.__engine$_index = -1;
      _.__engine$_state = t4;
      _.localClipBounds = _.projectedClip = _.transform = _.parent = _.rootElement = null;
    },
    SurfacePaint: function SurfacePaint(t0) {
      this._paintData = t0;
      this._frozen = false;
    },
    SurfacePaintData: function SurfacePaintData() {
      var _ = this;
      _.strokeJoin = _.strokeCap = _.strokeWidth = _.style = _.blendMode = null;
      _.isAntiAlias = true;
      _.colorFilter = _.filterQuality = _.maskFilter = _.shader = _.color = null;
    },
    Conic: function Conic(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.p0x = t0;
      _.p0y = t1;
      _.p1x = t2;
      _.p1y = t3;
      _.p2x = t4;
      _.p2y = t5;
      _.fW = t6;
    },
    QuadBounds: function QuadBounds() {
      var _ = this;
      _.maxY = _.maxX = _.minY = _.minX = 0;
    },
    ConicBounds: function ConicBounds() {
      var _ = this;
      _.maxY = _.maxX = _.minY = _.minX = 0;
    },
    _ConicPair: function _ConicPair() {
      this.second = this.first = null;
    },
    CubicBounds: function CubicBounds() {
      var _ = this;
      _.maxY = _.minY = _.maxX = _.minX = 0;
    },
    SurfacePath: function SurfacePath(t0, t1) {
      var _ = this;
      _.pathRef = t0;
      _._fillType = t1;
      _.fLastMoveToIndex = 0;
      _._firstDirection = _._convexityType = -1;
    },
    PathIterator: function PathIterator(t0, t1, t2) {
      var _ = this;
      _.pathRef = t0;
      _._forceClose = t1;
      _._verbCount = t2;
      _._needClose = false;
      _._segmentState = 0;
      _._conicWeightIndex = -1;
      _._pointIndex = _._verbIndex = _._moveToY = _._moveToX = _._lastPointY = _._lastPointX = 0;
    },
    PathRef: function PathRef(t0, t1) {
      var _ = this;
      _.cachedBounds = _.fBounds = null;
      _._fVerbsCapacity = _._fPointsLength = _._fPointsCapacity = 0;
      _.fPoints = t0;
      _._fVerbs = t1;
      _._conicWeightsCapacity = _._fVerbsLength = 0;
      _._conicWeights = null;
      _._conicWeightsLength = 0;
      _.fIsFinite = _.fBoundsIsDirty = true;
      _.fRRectOrOvalIsCCW = _.fIsRect = _.fIsRRect = _.fIsOval = false;
      _.fRRectOrOvalStartIdx = -1;
      _.fSegmentMask = 0;
    },
    PathRefIterator: function PathRefIterator(t0) {
      var _ = this;
      _.pathRef = t0;
      _._conicWeightIndex = -1;
      _.iterIndex = _._pointIndex = _._verbIndex = 0;
    },
    QuadRoots: function QuadRoots() {
      this.root1 = this.root0 = null;
    },
    SkQuadCoefficients: function SkQuadCoefficients(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.ax = t0;
      _.ay = t1;
      _.bx = t2;
      _.by = t3;
      _.cx = t4;
      _.cy = t5;
    },
    PathWinding: function PathWinding(t0, t1, t2, t3) {
      var _ = this;
      _.pathRef = t0;
      _.x = t1;
      _.y = t2;
      _._onCurveCount = _._w = 0;
      _.__engine$_buffer = t3;
    },
    PaintRequest: function PaintRequest(t0, t1) {
      this.canvasSize = t0;
      this.paintCallback = t1;
    },
    PersistedPicture: function PersistedPicture(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.__engine$_canvas = null;
      _.dx = t0;
      _.dy = t1;
      _.picture = t2;
      _.localPaintBounds = t3;
      _._density = 1;
      _._requiresRepaint = false;
      _._elementCache = t4;
      _._exactLocalCullRect = _._exactGlobalCullRect = _._optimalLocalCullRect = null;
      _._oldLayer = t5;
      _.__engine$_index = -1;
      _.__engine$_state = t6;
      _.localClipBounds = _.projectedClip = _.transform = _.parent = _.rootElement = null;
    },
    PersistedPicture__applyBitmapPaint_closure: function PersistedPicture__applyBitmapPaint_closure(t0) {
      this.$this = t0;
    },
    RecordingCanvas: function RecordingCanvas(t0, t1, t2) {
      var _ = this;
      _._paintBounds = t0;
      _._pictureBounds = null;
      _._commands = t1;
      _.renderStrategy = t2;
      _._recordingEnded = _._didDraw = false;
      _._saveCount = 1;
    },
    PaintCommand: function PaintCommand() {
    },
    DrawCommand: function DrawCommand() {
    },
    PaintSave: function PaintSave() {
    },
    PaintRestore: function PaintRestore() {
    },
    PaintTranslate: function PaintTranslate(t0, t1) {
      this.dx = t0;
      this.dy = t1;
    },
    PaintTransform: function PaintTransform(t0) {
      this.matrix4 = t0;
    },
    PaintClipRect: function PaintClipRect(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.rect = t0;
      _.clipOp = t1;
      _.isClippedOut = false;
      _.leftBound = t2;
      _.topBound = t3;
      _.rightBound = t4;
      _.bottomBound = t5;
    },
    PaintClipRRect: function PaintClipRRect(t0, t1, t2, t3, t4) {
      var _ = this;
      _.rrect = t0;
      _.isClippedOut = false;
      _.leftBound = t1;
      _.topBound = t2;
      _.rightBound = t3;
      _.bottomBound = t4;
    },
    PaintClipPath: function PaintClipPath(t0, t1, t2, t3, t4) {
      var _ = this;
      _.path = t0;
      _.isClippedOut = false;
      _.leftBound = t1;
      _.topBound = t2;
      _.rightBound = t3;
      _.bottomBound = t4;
    },
    PaintDrawRect: function PaintDrawRect(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.rect = t0;
      _.paint = t1;
      _.isClippedOut = false;
      _.leftBound = t2;
      _.topBound = t3;
      _.rightBound = t4;
      _.bottomBound = t5;
    },
    PaintDrawRRect: function PaintDrawRRect(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.rrect = t0;
      _.paint = t1;
      _.isClippedOut = false;
      _.leftBound = t2;
      _.topBound = t3;
      _.rightBound = t4;
      _.bottomBound = t5;
    },
    PaintDrawDRRect: function PaintDrawDRRect(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.outer = t0;
      _.inner = t1;
      _.paint = t2;
      _.path = null;
      _.isClippedOut = false;
      _.leftBound = t3;
      _.topBound = t4;
      _.rightBound = t5;
      _.bottomBound = t6;
    },
    PaintDrawCircle: function PaintDrawCircle(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.c = t0;
      _.radius = t1;
      _.paint = t2;
      _.isClippedOut = false;
      _.leftBound = t3;
      _.topBound = t4;
      _.rightBound = t5;
      _.bottomBound = t6;
    },
    PaintDrawPath: function PaintDrawPath(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.path = t0;
      _.paint = t1;
      _.isClippedOut = false;
      _.leftBound = t2;
      _.topBound = t3;
      _.rightBound = t4;
      _.bottomBound = t5;
    },
    PaintDrawParagraph: function PaintDrawParagraph(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.paragraph = t0;
      _.offset = t1;
      _.isClippedOut = false;
      _.leftBound = t2;
      _.topBound = t3;
      _.rightBound = t4;
      _.bottomBound = t5;
    },
    _PaintBounds: function _PaintBounds(t0, t1, t2, t3) {
      var _ = this;
      _.maxPaintBounds = t0;
      _._didPaintInsideClipArea = false;
      _.__engine$_top = _.__engine$_left = 17976931348623157e292;
      _.__engine$_bottom = _.__engine$_right = -17976931348623157e292;
      _.__engine$_transforms = t1;
      _._clipStack = t2;
      _._currentMatrixIsIdentity = true;
      _._currentMatrix = t3;
      _._clipRectInitialized = false;
      _._currentClipBottom = _._currentClipRight = _._currentClipTop = _._currentClipLeft = 0;
    },
    RenderStrategy: function RenderStrategy() {
      var _ = this;
      _.isInsideSvgFilterTree = _.hasArbitraryPaint = _.hasParagraphs = _.hasImageElements = false;
    },
    _WebGlRenderer: function _WebGlRenderer() {
    },
    SurfaceScene: function SurfaceScene(t0) {
      this.webOnlyRootElement = t0;
    },
    PersistedScene: function PersistedScene(t0, t1, t2) {
      var _ = this;
      _._localTransformInverse = null;
      _.__engine$_children = t0;
      _._oldLayer = t1;
      _.__engine$_index = -1;
      _.__engine$_state = t2;
      _.localClipBounds = _.projectedClip = _.transform = _.parent = _.rootElement = null;
    },
    SurfaceSceneBuilder: function SurfaceSceneBuilder(t0) {
      this._surfaceStack = t0;
    },
    SurfaceSceneBuilder_build_closure: function SurfaceSceneBuilder_build_closure(t0) {
      this.$this = t0;
    },
    SurfaceSceneBuilder_build_closure0: function SurfaceSceneBuilder_build_closure0(t0) {
      this.$this = t0;
    },
    NormalizedGradient: function NormalizedGradient(t0, t1, t2, t3, t4) {
      var _ = this;
      _._thresholds = t0;
      _._bias = t1;
      _._scale = t2;
      _.thresholdCount = t3;
      _.isOpaque = t4;
    },
    NormalizedGradient_NormalizedGradient_closure: function NormalizedGradient_NormalizedGradient_closure() {
    },
    EngineGradient: function EngineGradient() {
    },
    GradientLinear: function GradientLinear(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.from = t0;
      _.to = t1;
      _.colors = t2;
      _.colorStops = t3;
      _.tileMode = t4;
      _.matrix4 = t5;
    },
    ShaderBuilder: function ShaderBuilder(t0, t1, t2, t3, t4) {
      var _ = this;
      _.declarations = t0;
      _._methods = t1;
      _.floatPrecision = null;
      _._uniformCounter = _._varyingCounter = _._attribCounter = 0;
      _.isWebGl2 = t2;
      _._isFragmentShader = t3;
      _._fragmentColorDeclaration = null;
      _.__engine$_buffer = t4;
    },
    ShaderMethod: function ShaderMethod(t0, t1) {
      this.name = t0;
      this._statements = t1;
      this._indentLevel = 1;
    },
    ShaderDeclaration: function ShaderDeclaration(t0, t1, t2) {
      this.name = t0;
      this.dataType = t1;
      this.storage = t2;
    },
    commitScene_closure: function commitScene_closure() {
    },
    PersistedSurfaceState: function PersistedSurfaceState(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    PersistedSurface: function PersistedSurface() {
    },
    PersistedLeafSurface: function PersistedLeafSurface() {
    },
    PersistedContainerSurface: function PersistedContainerSurface() {
    },
    PersistedContainerSurface__matchChildren_closure: function PersistedContainerSurface__matchChildren_closure() {
    },
    _PersistedSurfaceMatch: function _PersistedSurfaceMatch(t0, t1, t2) {
      this.newChild = t0;
      this.oldChildIndex = t1;
      this.matchQuality = t2;
    },
    PrerollSurfaceContext: function PrerollSurfaceContext() {
    },
    PersistedTransform: function PersistedTransform(t0, t1, t2, t3) {
      var _ = this;
      _._matrixStorage = t0;
      _._localTransformInverse = _._matrix4 = null;
      _.__engine$_children = t1;
      _._oldLayer = t2;
      _.__engine$_index = -1;
      _.__engine$_state = t3;
      _.localClipBounds = _.projectedClip = _.transform = _.parent = _.rootElement = null;
    },
    initializeEngine_closure: function initializeEngine_closure() {
    },
    initializeEngine_closure0: function initializeEngine_closure0(t0) {
      this._box_0 = t0;
    },
    initializeEngine__closure: function initializeEngine__closure(t0) {
      this._box_0 = t0;
    },
    _addUrlStrategyListener_closure: function _addUrlStrategyListener_closure() {
    },
    _addUrlStrategyListener_closure0: function _addUrlStrategyListener_closure0() {
    },
    Keyboard: function Keyboard(t0, t1) {
      var _ = this;
      _._keydownTimers = t0;
      _._keyupListener = _._keydownListener = null;
      _._lastMetaState = 0;
      _._onMacOs = t1;
    },
    Keyboard$__closure: function Keyboard$__closure(t0) {
      this.$this = t0;
    },
    Keyboard$__closure0: function Keyboard$__closure0(t0) {
      this.$this = t0;
    },
    Keyboard$__closure1: function Keyboard$__closure1(t0) {
      this.$this = t0;
    },
    Keyboard__handleHtmlEvent_closure: function Keyboard__handleHtmlEvent_closure(t0, t1, t2) {
      this.$this = t0;
      this.timerKey = t1;
      this.event = t2;
    },
    Keyboard__handleHtmlEvent_closure0: function Keyboard__handleHtmlEvent_closure0(t0) {
      this.event = t0;
    },
    _kLogicalKeyToModifierGetter_closure: function _kLogicalKeyToModifierGetter_closure() {
    },
    _kLogicalKeyToModifierGetter_closure0: function _kLogicalKeyToModifierGetter_closure0() {
    },
    _kLogicalKeyToModifierGetter_closure1: function _kLogicalKeyToModifierGetter_closure1() {
    },
    _kLogicalKeyToModifierGetter_closure2: function _kLogicalKeyToModifierGetter_closure2() {
    },
    _kLogicalKeyToModifierGetter_closure3: function _kLogicalKeyToModifierGetter_closure3() {
    },
    _kLogicalKeyToModifierGetter_closure4: function _kLogicalKeyToModifierGetter_closure4() {
    },
    _kLogicalKeyToModifierGetter_closure5: function _kLogicalKeyToModifierGetter_closure5() {
    },
    _kLogicalKeyToModifierGetter_closure6: function _kLogicalKeyToModifierGetter_closure6() {
    },
    KeyboardBinding: function KeyboardBinding(t0) {
      this.__KeyboardBinding__converter = $;
      this.__engine$_listeners = t0;
    },
    KeyboardBinding__addEventListener_loggedHandler: function KeyboardBinding__addEventListener_loggedHandler(t0) {
      this.handler = t0;
    },
    KeyboardBinding__onKeyData_closure: function KeyboardBinding__onKeyData_closure(t0) {
      this._box_0 = t0;
    },
    KeyboardBinding__setup_closure: function KeyboardBinding__setup_closure(t0) {
      this.$this = t0;
    },
    KeyboardBinding__setup_closure0: function KeyboardBinding__setup_closure0(t0) {
      this.$this = t0;
    },
    FlutterHtmlKeyboardEvent: function FlutterHtmlKeyboardEvent(t0) {
      this._event = t0;
    },
    KeyboardConverter: function KeyboardConverter(t0, t1, t2, t3) {
      var _ = this;
      _.performDispatchKeyData = t0;
      _.onMacOs = t1;
      _._dispatchKeyData = null;
      _._disposed = false;
      _._pressingRecords = t2;
      _._keyGuards = t3;
    },
    KeyboardConverter__scheduleAsyncEvent_closure: function KeyboardConverter__scheduleAsyncEvent_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.callback = t2;
      _.getData = t3;
    },
    KeyboardConverter__scheduleAsyncEvent_closure0: function KeyboardConverter__scheduleAsyncEvent_closure0(t0) {
      this._box_0 = t0;
    },
    KeyboardConverter__startGuardingKey_closure: function KeyboardConverter__startGuardingKey_closure(t0, t1, t2) {
      this.currentTimeStamp = t0;
      this.physicalKey = t1;
      this.logicalKey = t2;
    },
    KeyboardConverter__startGuardingKey_closure0: function KeyboardConverter__startGuardingKey_closure0(t0, t1) {
      this.$this = t0;
      this.physicalKey = t1;
    },
    KeyboardConverter__handleEvent_closure: function KeyboardConverter__handleEvent_closure(t0, t1, t2, t3) {
      var _ = this;
      _.event = t0;
      _.character = t1;
      _.eventKey = t2;
      _.physicalKey = t3;
    },
    KeyboardConverter__handleEvent_closure0: function KeyboardConverter__handleEvent_closure0(t0, t1, t2) {
      this.timeStamp = t0;
      this.physicalKey = t1;
      this.logicalKey = t2;
    },
    KeyboardConverter__handleEvent_closure1: function KeyboardConverter__handleEvent_closure1(t0, t1) {
      this.$this = t0;
      this.physicalKey = t1;
    },
    KeyboardConverter__handleEvent_closure2: function KeyboardConverter__handleEvent_closure2(t0, t1, t2) {
      this.$this = t0;
      this.event = t1;
      this.timeStamp = t2;
    },
    KeyboardConverter__handleEvent__closure: function KeyboardConverter__handleEvent__closure(t0, t1, t2) {
      this.$this = t0;
      this.logicalKey = t1;
      this.timeStamp = t2;
    },
    KeyboardConverter_handleEvent_closure: function KeyboardConverter_handleEvent_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    MouseCursor: function MouseCursor() {
    },
    BrowserHistory: function BrowserHistory() {
    },
    MultiEntriesBrowserHistory: function MultiEntriesBrowserHistory(t0) {
      var _ = this;
      _.urlStrategy = t0;
      _.__BrowserHistory__unsubscribe = _.__MultiEntriesBrowserHistory__lastSeenSerialCount = $;
      _._isDisposed = _._isTornDown = false;
    },
    MultiEntriesBrowserHistory_onPopState_closure: function MultiEntriesBrowserHistory_onPopState_closure() {
    },
    SingleEntryBrowserHistory: function SingleEntryBrowserHistory(t0, t1) {
      var _ = this;
      _.urlStrategy = t0;
      _._flutterState = t1;
      _._userProvidedRouteName = null;
      _.__BrowserHistory__unsubscribe = $;
      _._isDisposed = _._isTornDown = false;
    },
    SingleEntryBrowserHistory_onPopState_closure: function SingleEntryBrowserHistory_onPopState_closure() {
    },
    SingleEntryBrowserHistory_onPopState_closure0: function SingleEntryBrowserHistory_onPopState_closure0() {
    },
    JsUrlStrategy: function JsUrlStrategy() {
    },
    UrlStrategy: function UrlStrategy() {
    },
    HashUrlStrategy: function HashUrlStrategy() {
    },
    HashUrlStrategy_addPopStateListener_closure: function HashUrlStrategy_addPopStateListener_closure(t0, t1) {
      this.$this = t0;
      this.fn = t1;
    },
    HashUrlStrategy__waitForPopState_closure: function HashUrlStrategy__waitForPopState_closure(t0, t1) {
      this.unsubscribe = t0;
      this.completer = t1;
    },
    CustomUrlStrategy: function CustomUrlStrategy(t0) {
      this.delegate = t0;
    },
    PlatformLocation: function PlatformLocation() {
    },
    BrowserPlatformLocation: function BrowserPlatformLocation() {
    },
    EnginePictureRecorder: function EnginePictureRecorder() {
      this.__engine$_canvas = null;
      this.__EnginePictureRecorder_cullRect = $;
      this._isRecording = false;
    },
    EnginePicture: function EnginePicture(t0) {
      this.recordingCanvas = t0;
    },
    EnginePlatformDispatcher: function EnginePlatformDispatcher(t0, t1, t2, t3) {
      var _ = this;
      _._configuration = t0;
      _._windows = t1;
      _._windowConfigurations = t2;
      _._onTextScaleFactorChangedZone = _._onTextScaleFactorChanged = _._fontSizeObserver = _._onLocaleChanged = _._platformViewMessageHandler = _._onReportTimingsZone = _._onReportTimings = _._onKeyDataZone = _._onKeyData = _._onPointerDataPacketZone = _._onPointerDataPacket = _._onDrawFrameZone = _._onDrawFrame = _._onBeginFrameZone = _._onBeginFrame = _._onMetricsChangedZone = _._onMetricsChanged = null;
      _._brightnessMediaQuery = t3;
      _._onSemanticsActionZone = _._onSemanticsAction = _._onSemanticsEnabledChangedZone = _._onSemanticsEnabledChanged = _._onPlatformBrightnessChangedZone = _._onPlatformBrightnessChanged = _._brightnessMediaQueryListener = null;
      _.__EnginePlatformDispatcher_rasterizer = $;
    },
    EnginePlatformDispatcher_invokeOnKeyData_closure: function EnginePlatformDispatcher_invokeOnKeyData_closure(t0, t1, t2) {
      this.callback = t0;
      this.onKeyData = t1;
      this.data = t2;
    },
    EnginePlatformDispatcher__zonedPlatformMessageResponseCallback_closure: function EnginePlatformDispatcher__zonedPlatformMessageResponseCallback_closure(t0, t1) {
      this.registrationZone = t0;
      this.callback = t1;
    },
    EnginePlatformDispatcher__sendPlatformMessage_closure: function EnginePlatformDispatcher__sendPlatformMessage_closure(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    EnginePlatformDispatcher__sendPlatformMessage_closure0: function EnginePlatformDispatcher__sendPlatformMessage_closure0(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    EnginePlatformDispatcher__sendPlatformMessage_closure1: function EnginePlatformDispatcher__sendPlatformMessage_closure1(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    EnginePlatformDispatcher__sendPlatformMessage_closure2: function EnginePlatformDispatcher__sendPlatformMessage_closure2(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    EnginePlatformDispatcher__sendPlatformMessage_closure3: function EnginePlatformDispatcher__sendPlatformMessage_closure3() {
    },
    EnginePlatformDispatcher__sendPlatformMessage_closure4: function EnginePlatformDispatcher__sendPlatformMessage_closure4(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    EnginePlatformDispatcher__addFontSizeObserver_closure: function EnginePlatformDispatcher__addFontSizeObserver_closure(t0) {
      this.$this = t0;
    },
    EnginePlatformDispatcher__addFontSizeObserver_closure0: function EnginePlatformDispatcher__addFontSizeObserver_closure0(t0) {
      this.$this = t0;
    },
    EnginePlatformDispatcher__addBrightnessMediaQueryListener_closure: function EnginePlatformDispatcher__addBrightnessMediaQueryListener_closure(t0) {
      this.$this = t0;
    },
    EnginePlatformDispatcher__addBrightnessMediaQueryListener_closure0: function EnginePlatformDispatcher__addBrightnessMediaQueryListener_closure0(t0) {
      this.$this = t0;
    },
    EnginePlatformDispatcher_replyToPlatformMessage_closure: function EnginePlatformDispatcher_replyToPlatformMessage_closure(t0, t1) {
      this.callback = t0;
      this.data = t1;
    },
    invoke2_closure: function invoke2_closure(t0, t1, t2) {
      this.callback = t0;
      this.arg1 = t1;
      this.arg2 = t2;
    },
    invoke3_closure: function invoke3_closure(t0, t1, t2, t3) {
      var _ = this;
      _.callback = t0;
      _.arg1 = t1;
      _.arg2 = t2;
      _.arg3 = t3;
    },
    PlatformViewManager: function PlatformViewManager(t0, t1, t2, t3) {
      var _ = this;
      _._factories = t0;
      _.__engine$_contents = t1;
      _._invisibleViews = t2;
      _._viewIdToType = t3;
    },
    PlatformViewManager_renderContent_closure: function PlatformViewManager_renderContent_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.slotName = t1;
      _.viewType = t2;
      _.viewId = t3;
      _.params = t4;
    },
    PlatformViewMessageHandler: function PlatformViewMessageHandler(t0, t1) {
      this._contentManager = t0;
      this._contentHandler = t1;
    },
    PointerBinding: function PointerBinding(t0, t1) {
      this.glassPaneElement = t0;
      this._pointerDataConverter = t1;
      this.__PointerBinding__adapter = $;
    },
    PointerSupportDetector: function PointerSupportDetector() {
    },
    _BaseAdapter: function _BaseAdapter() {
    },
    _BaseAdapter_addEventListener_loggedHandler: function _BaseAdapter_addEventListener_loggedHandler(t0, t1, t2) {
      this.$this = t0;
      this.acceptOutsideGlasspane = t1;
      this.handler = t2;
    },
    _WheelEventListenerMixin: function _WheelEventListenerMixin() {
    },
    _WheelEventListenerMixin__addWheelEventListener_closure: function _WheelEventListenerMixin__addWheelEventListener_closure(t0) {
      this.handler = t0;
    },
    _SanitizedDetails: function _SanitizedDetails(t0, t1) {
      this.change = t0;
      this.buttons = t1;
    },
    _ButtonSanitizer: function _ButtonSanitizer() {
      this._pressedButtons = 0;
    },
    _PointerAdapter: function _PointerAdapter(t0, t1, t2, t3) {
      var _ = this;
      _._sanitizers = t0;
      _.glassPaneElement = t1;
      _.__engine$_callback = t2;
      _._pointerDataConverter = t3;
    },
    _PointerAdapter__ensureSanitizer_closure: function _PointerAdapter__ensureSanitizer_closure() {
    },
    _PointerAdapter__addPointerEventListener_closure: function _PointerAdapter__addPointerEventListener_closure(t0) {
      this.handler = t0;
    },
    _PointerAdapter_setup_closure: function _PointerAdapter_setup_closure(t0) {
      this.$this = t0;
    },
    _PointerAdapter_setup_closure0: function _PointerAdapter_setup_closure0(t0) {
      this.$this = t0;
    },
    _PointerAdapter_setup_closure1: function _PointerAdapter_setup_closure1(t0) {
      this.$this = t0;
    },
    _PointerAdapter_setup_closure2: function _PointerAdapter_setup_closure2(t0) {
      this.$this = t0;
    },
    _PointerAdapter_setup_closure3: function _PointerAdapter_setup_closure3(t0) {
      this.$this = t0;
    },
    _TouchAdapter: function _TouchAdapter(t0, t1, t2, t3) {
      var _ = this;
      _._pressedTouches = t0;
      _.glassPaneElement = t1;
      _.__engine$_callback = t2;
      _._pointerDataConverter = t3;
    },
    _TouchAdapter__addTouchEventListener_closure: function _TouchAdapter__addTouchEventListener_closure(t0) {
      this.handler = t0;
    },
    _TouchAdapter_setup_closure: function _TouchAdapter_setup_closure(t0) {
      this.$this = t0;
    },
    _TouchAdapter_setup_closure0: function _TouchAdapter_setup_closure0(t0) {
      this.$this = t0;
    },
    _TouchAdapter_setup_closure1: function _TouchAdapter_setup_closure1(t0) {
      this.$this = t0;
    },
    _TouchAdapter_setup_closure2: function _TouchAdapter_setup_closure2(t0) {
      this.$this = t0;
    },
    _MouseAdapter: function _MouseAdapter(t0, t1, t2, t3) {
      var _ = this;
      _._sanitizer = t0;
      _.glassPaneElement = t1;
      _.__engine$_callback = t2;
      _._pointerDataConverter = t3;
    },
    _MouseAdapter__addMouseEventListener_closure: function _MouseAdapter__addMouseEventListener_closure(t0) {
      this.handler = t0;
    },
    _MouseAdapter_setup_closure: function _MouseAdapter_setup_closure(t0) {
      this.$this = t0;
    },
    _MouseAdapter_setup_closure0: function _MouseAdapter_setup_closure0(t0) {
      this.$this = t0;
    },
    _MouseAdapter_setup_closure1: function _MouseAdapter_setup_closure1(t0) {
      this.$this = t0;
    },
    _MouseAdapter_setup_closure2: function _MouseAdapter_setup_closure2(t0) {
      this.$this = t0;
    },
    _PointerState: function _PointerState(t0, t1) {
      this.__engine$_pointer = null;
      this.x = t0;
      this.y = t1;
    },
    PointerDataConverter: function PointerDataConverter(t0) {
      this._pointers = t0;
      this._activeButtons = 0;
    },
    PointerDataConverter__ensureStateForPointer_closure: function PointerDataConverter__ensureStateForPointer_closure(t0, t1) {
      this.x = t0;
      this.y = t1;
    },
    Profiler: function Profiler() {
    },
    JsPromise: function JsPromise() {
    },
    ImageDecoder: function ImageDecoder() {
    },
    ImageDecoderOptions: function ImageDecoderOptions() {
    },
    DecodeResult: function DecodeResult() {
    },
    DecodeOptions: function DecodeOptions() {
    },
    VideoFrame: function VideoFrame() {
    },
    ImageTrackList: function ImageTrackList() {
    },
    ImageTrack: function ImageTrack() {
    },
    GlProgram: function GlProgram(t0) {
      this.program = t0;
    },
    GlContext: function GlContext(t0) {
      var _ = this;
      _.glContext = t0;
      _._heightInPixels = _._widthInPixels = _.__engine$_canvas = _._kUnsignedShort = _._kUnsignedByte = _._kLinkStatus = _._kTriangles = _._kColorBufferBit = _._kFloat = _._kStaticDraw = _._kElementArrayBuffer = _._kArrayBuffer = _._kCompileStatus = null;
    },
    OffScreenCanvas: function OffScreenCanvas(t0, t1) {
      var _ = this;
      _.canvasElement = _.offScreenCanvas = null;
      _.width = t0;
      _.height = t1;
    },
    AccessibilityAnnouncements: function AccessibilityAnnouncements() {
      this.__engine$_element = this._removeElementTimer = null;
    },
    AccessibilityAnnouncements$__closure: function AccessibilityAnnouncements$__closure(t0) {
      this.$this = t0;
    },
    AccessibilityAnnouncements_handleMessage_closure: function AccessibilityAnnouncements_handleMessage_closure(t0) {
      this.$this = t0;
    },
    _CheckableKind: function _CheckableKind(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    Checkable: function Checkable(t0, t1) {
      this.__engine$_kind = t0;
      this.semanticsObject = t1;
    },
    ImageRoleManager: function ImageRoleManager(t0) {
      this._auxiliaryImageElement = null;
      this.semanticsObject = t0;
    },
    Incrementable: function Incrementable(t0, t1) {
      var _ = this;
      _.__engine$_element = t0;
      _._currentSurrogateValue = 1;
      _._gestureModeListener = null;
      _._pendingResync = false;
      _.semanticsObject = t1;
    },
    Incrementable_closure: function Incrementable_closure(t0, t1) {
      this.$this = t0;
      this.semanticsObject = t1;
    },
    Incrementable_closure0: function Incrementable_closure0(t0) {
      this.$this = t0;
    },
    LabelAndValue: function LabelAndValue(t0) {
      this._auxiliaryValueElement = null;
      this.semanticsObject = t0;
    },
    LiveRegion: function LiveRegion(t0) {
      this.semanticsObject = t0;
    },
    Scrollable: function Scrollable(t0) {
      var _ = this;
      _._scrollListener = _._gestureModeListener = null;
      _._effectiveNeutralScrollPosition = 0;
      _.semanticsObject = t0;
    },
    Scrollable_update_closure: function Scrollable_update_closure(t0) {
      this.$this = t0;
    },
    Scrollable_update_closure0: function Scrollable_update_closure0(t0) {
      this.$this = t0;
    },
    Scrollable_update_closure1: function Scrollable_update_closure1(t0) {
      this.$this = t0;
    },
    SemanticsUpdate: function SemanticsUpdate(t0) {
      this.__engine$_nodeUpdates = t0;
    },
    SemanticsNodeUpdate: function SemanticsNodeUpdate(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26) {
      var _ = this;
      _.id = t0;
      _.flags = t1;
      _.actions = t2;
      _.textSelectionBase = t3;
      _.textSelectionExtent = t4;
      _.scrollChildren = t5;
      _.scrollIndex = t6;
      _.scrollPosition = t7;
      _.scrollExtentMax = t8;
      _.scrollExtentMin = t9;
      _.rect = t10;
      _.label = t11;
      _.labelAttributes = t12;
      _.hint = t13;
      _.hintAttributes = t14;
      _.value = t15;
      _.valueAttributes = t16;
      _.increasedValue = t17;
      _.increasedValueAttributes = t18;
      _.decreasedValue = t19;
      _.decreasedValueAttributes = t20;
      _.tooltip = t21;
      _.textDirection = t22;
      _.transform = t23;
      _.childrenInTraversalOrder = t24;
      _.childrenInHitTestOrder = t25;
      _.additionalActions = t26;
    },
    Role: function Role(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    _roleFactories_closure: function _roleFactories_closure() {
    },
    _roleFactories_closure0: function _roleFactories_closure0() {
    },
    _roleFactories_closure1: function _roleFactories_closure1() {
    },
    _roleFactories_closure2: function _roleFactories_closure2() {
    },
    _roleFactories_closure3: function _roleFactories_closure3() {
    },
    _roleFactories_closure4: function _roleFactories_closure4() {
    },
    _roleFactories_closure5: function _roleFactories_closure5() {
    },
    _roleFactories_closure6: function _roleFactories_closure6() {
    },
    RoleManager: function RoleManager() {
    },
    SemanticsObject: function SemanticsObject(t0, t1, t2, t3) {
      var _ = this;
      _.__engine$_flags = 0;
      _._tooltip = _._additionalActions = _._childrenInHitTestOrder = _.__engine$_childrenInTraversalOrder = _.__engine$_transform = _.__engine$_textDirection = _._decreasedValueAttributes = _._decreasedValue = _._increasedValueAttributes = _._increasedValue = _._valueAttributes = _.__engine$_value = _._hintAttributes = _._hint = _._labelAttributes = _._label = _.__engine$_rect = _.__engine$_scrollExtentMin = _.__engine$_scrollExtentMax = _.__engine$_scrollPosition = _.__engine$_scrollIndex = _._scrollChildren = _._textSelectionExtent = _._textSelectionBase = _.__engine$_actions = null;
      _.id = t0;
      _.owner = t1;
      _.element = t2;
      _._dirtyFields = -1;
      _.__engine$_parent = _._childContainerElement = null;
      _._roleManagers = t3;
      _.horizontalContainerAdjustment = _.verticalContainerAdjustment = 0;
      _._previousChildrenInTraversalOrder = null;
    },
    AccessibilityMode: function AccessibilityMode(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    GestureMode: function GestureMode(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    EngineSemanticsOwner: function EngineSemanticsOwner(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._semanticsTree = t0;
      _._attachments = t1;
      _._detachments = t2;
      _._oneTimePostUpdateCallbacks = t3;
      _._rootSemanticsElement = null;
      _._now = t4;
      _.semanticsHelper = t5;
      _._semanticsEnabled = false;
      _._gestureMode = t6;
      _._gestureModeClock = null;
      _._gestureModeListeners = t7;
    },
    EngineSemanticsOwner$__closure: function EngineSemanticsOwner$__closure(t0) {
      this.$this = t0;
    },
    EngineSemanticsOwner__now_closure: function EngineSemanticsOwner__now_closure() {
    },
    EngineSemanticsOwner__getGestureModeClock_closure: function EngineSemanticsOwner__getGestureModeClock_closure(t0) {
      this.$this = t0;
    },
    EnabledState: function EnabledState(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    SemanticsHelper: function SemanticsHelper(t0) {
      this._semanticsEnabler = t0;
    },
    SemanticsEnabler: function SemanticsEnabler() {
    },
    DesktopSemanticsEnabler: function DesktopSemanticsEnabler() {
      this._semanticsPlaceholder = null;
    },
    DesktopSemanticsEnabler_prepareAccessibilityPlaceholder_closure: function DesktopSemanticsEnabler_prepareAccessibilityPlaceholder_closure(t0) {
      this.$this = t0;
    },
    MobileSemanticsEnabler: function MobileSemanticsEnabler() {
      var _ = this;
      _._semanticsPlaceholder = _.semanticsActivationTimer = null;
      _.semanticsActivationAttempts = 0;
      _._schedulePlaceholderRemoval = false;
    },
    MobileSemanticsEnabler_tryEnableSemantics_closure: function MobileSemanticsEnabler_tryEnableSemantics_closure(t0) {
      this.$this = t0;
    },
    MobileSemanticsEnabler_prepareAccessibilityPlaceholder_closure: function MobileSemanticsEnabler_prepareAccessibilityPlaceholder_closure(t0) {
      this.$this = t0;
    },
    Tappable: function Tappable(t0) {
      this._clickListener = null;
      this.semanticsObject = t0;
    },
    Tappable_update_closure: function Tappable_update_closure(t0) {
      this.$this = t0;
    },
    SemanticsTextEditingStrategy: function SemanticsTextEditingStrategy(t0, t1) {
      var _ = this;
      _._queuedStyle = _.inputConfig = _.activeTextField = null;
      _.owner = t0;
      _.isEnabled = false;
      _.domElement = null;
      _.__DefaultTextEditingStrategy_inputConfiguration = $;
      _.onAction = _.onChange = _.geometry = _.style = _._editingDeltaState = _.lastEditingState = null;
      _.subscriptions = t1;
      _._appendedToForm = false;
    },
    TextField: function TextField(t0) {
      this.__TextField_editableElement = $;
      this._hasFocused = false;
      this.semanticsObject = t0;
    },
    TextField__initializeForBlink_closure: function TextField__initializeForBlink_closure(t0) {
      this.$this = t0;
    },
    TextField__initializeForWebkit_closure: function TextField__initializeForWebkit_closure(t0) {
      this._box_0 = t0;
    },
    TextField__initializeForWebkit_closure0: function TextField__initializeForWebkit_closure0(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    TextField_update_closure: function TextField_update_closure(t0) {
      this.$this = t0;
    },
    _TypedDataBuffer: function _TypedDataBuffer() {
    },
    _IntBuffer: function _IntBuffer() {
    },
    Uint8Buffer: function Uint8Buffer(t0, t1) {
      this.__engine$_buffer = t0;
      this.__engine$_length = t1;
    },
    MethodCall: function MethodCall(t0, t1) {
      this.method = t0;
      this.$arguments = t1;
    },
    JSONMessageCodec: function JSONMessageCodec() {
    },
    JSONMethodCodec: function JSONMethodCodec() {
    },
    StandardMessageCodec: function StandardMessageCodec() {
    },
    StandardMessageCodec_writeValue_closure: function StandardMessageCodec_writeValue_closure(t0, t1) {
      this.$this = t0;
      this.buffer = t1;
    },
    StandardMethodCodec: function StandardMethodCodec() {
    },
    WriteBuffer: function WriteBuffer(t0, t1, t2) {
      var _ = this;
      _._debugFinalized = false;
      _.__engine$_buffer = t0;
      _._eightBytes = t1;
      _._eightBytesAsList = t2;
    },
    ReadBuffer: function ReadBuffer(t0) {
      this.data = t0;
      this.__engine$_position = 0;
    },
    SurfaceShadowData: function SurfaceShadowData(t0, t1) {
      this.blurWidth = t0;
      this.offset = t1;
    },
    CanvasParagraph: function CanvasParagraph(t0, t1, t2, t3) {
      var _ = this;
      _.spans = t0;
      _.paragraphStyle = t1;
      _.plainText = t2;
      _.drawOnCanvas = t3;
      _.isLaidOut = false;
      _._lastUsedConstraints = null;
      _.__CanvasParagraph__paintService = _.__CanvasParagraph__layoutService = $;
      _._cachedDomElement = null;
    },
    FlatTextSpan: function FlatTextSpan(t0, t1, t2) {
      this.style = t0;
      this.start = t1;
      this.end = t2;
    },
    StyleNode: function StyleNode() {
    },
    ChildStyleNode: function ChildStyleNode(t0, t1) {
      this.parent = t0;
      this.style = t1;
      this._cachedStyle = null;
    },
    RootStyleNode: function RootStyleNode(t0) {
      this.paragraphStyle = t0;
      this._cachedStyle = null;
    },
    CanvasParagraphBuilder: function CanvasParagraphBuilder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._plainTextBuffer = t0;
      _._paragraphStyle = t1;
      _._spans = t2;
      _._styleStack = t3;
      _._rootStyleNode = t4;
      _._placeholderScales = t5;
      _._drawOnCanvas = true;
    },
    FontCollection: function FontCollection() {
      this._testFontManager = this._assetFontManager = null;
    },
    FontManager: function FontManager(t0) {
      this._fontLoadingFutures = t0;
    },
    FontManager__loadFontFace_closure: function FontManager__loadFontFace_closure(t0) {
      this.fontFace = t0;
    },
    FontManager__loadFontFace_closure0: function FontManager__loadFontFace_closure0(t0) {
      this.family = t0;
    },
    _PolyfillFontManager: function _PolyfillFontManager(t0) {
      this._fontLoadingFutures = t0;
    },
    _PolyfillFontManager_registerAsset__watchWidth: function _PolyfillFontManager_registerAsset__watchWidth(t0, t1, t2, t3, t4) {
      var _ = this;
      _.paragraph = t0;
      _.sansSerifWidth = t1;
      _.completer = t2;
      _._fontLoadStart = t3;
      _.family = t4;
    },
    _PolyfillFontManager_registerAsset_closure: function _PolyfillFontManager_registerAsset_closure(t0) {
      this.fontStyleMap = t0;
    },
    TextLayoutService: function TextLayoutService(t0, t1, t2) {
      var _ = this;
      _.paragraph = t0;
      _.context = t1;
      _.width = -1;
      _.height = 0;
      _.longestLine = null;
      _.maxIntrinsicWidth = _.minIntrinsicWidth = 0;
      _.ideographicBaseline = _.alphabeticBaseline = -1;
      _.didExceedMaxLines = false;
      _.lines = t2;
    },
    RangeBox: function RangeBox() {
    },
    PlaceholderBox: function PlaceholderBox() {
    },
    SpanBox: function SpanBox(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.spanometer = t0;
      _.span = t1;
      _.contentDirection = t2;
      _.isSpaceOnly = t3;
      _.height = t4;
      _.baseline = t5;
      _.start = t6;
      _.end = t7;
      _.__RangeBox_startOffset = $;
      _.width = t8;
      _.__RangeBox_lineWidth = $;
      _.paragraphDirection = t9;
      _.boxDirection = t10;
    },
    LineSegment: function LineSegment(t0, t1, t2, t3, t4) {
      var _ = this;
      _.span = t0;
      _.start = t1;
      _.end = t2;
      _.width = t3;
      _.widthIncludingSpace = t4;
    },
    LineBuilder: function LineBuilder(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _._segments = t0;
      _._boxes = t1;
      _.maxWidth = t2;
      _.paragraph = t3;
      _.spanometer = t4;
      _.start = t5;
      _.lineNumber = t6;
      _.accumulatedHeight = t7;
      _.__engine$_end = t8;
      _.descent = _.ascent = _.widthIncludingSpace = _.width = 0;
      _.isBreakable = false;
      _._spaceBoxCount = 0;
      _.__LineBuilder__currentContentDirection = _.__LineBuilder__currentBoxDirection = $;
      _._currentBoxStartOffset = 0;
      _._cachedNextBreak = null;
    },
    Spanometer: function Spanometer(t0, t1) {
      var _ = this;
      _.paragraph = t0;
      _.context = t1;
      _._cssFontString = "";
      _._currentSpan = _._currentRuler = null;
    },
    LineCharProperty: function LineCharProperty(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    LineBreakType: function LineBreakType(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    LineBreakResult: function LineBreakResult(t0, t1, t2, t3) {
      var _ = this;
      _.index = t0;
      _.indexWithoutTrailingNewlines = t1;
      _.indexWithoutTrailingSpaces = t2;
      _.type = t3;
    },
    RulerHost: function RulerHost(t0) {
      this._rulerHost = t0;
    },
    TextPaintService: function TextPaintService(t0) {
      this.paragraph = t0;
    },
    EngineLineMetrics: function EngineLineMetrics(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _.ellipsis = t0;
      _.startIndex = t1;
      _.endIndex = t2;
      _.endIndexWithoutNewlines = t3;
      _.boxes = t4;
      _.spaceBoxCount = t5;
      _.hardBreak = t6;
      _.ascent = t7;
      _.descent = t8;
      _.height = t9;
      _.width = t10;
      _.widthWithTrailingSpaces = t11;
      _.left = t12;
      _.baseline = t13;
      _.lineNumber = t14;
    },
    EngineParagraphStyle: function EngineParagraphStyle(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.textAlign = t0;
      _.textDirection = t1;
      _.fontWeight = t2;
      _.fontStyle = t3;
      _.maxLines = t4;
      _.fontFamily = t5;
      _.fontSize = t6;
      _.height = t7;
      _._textHeightBehavior = t8;
      _._strutStyle = t9;
      _.ellipsis = t10;
      _.locale = t11;
    },
    EngineTextStyle: function EngineTextStyle(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19) {
      var _ = this;
      _.color = t0;
      _.decoration = t1;
      _.decorationColor = t2;
      _.decorationStyle = t3;
      _.decorationThickness = t4;
      _.fontWeight = t5;
      _.fontStyle = t6;
      _.textBaseline = t7;
      _.isFontFamilyProvided = t8;
      _.fontFamily = t9;
      _.fontFamilyFallback = t10;
      _.fontFeatures = t11;
      _.fontSize = t12;
      _.letterSpacing = t13;
      _.wordSpacing = t14;
      _.height = t15;
      _.locale = t16;
      _.background = t17;
      _.foreground = t18;
      _.shadows = t19;
      _._cssFontString = null;
      _.__EngineTextStyle_heightStyle = $;
    },
    TextHeightStyle: function TextHeightStyle(t0, t1, t2, t3) {
      var _ = this;
      _.fontFamily = t0;
      _.fontSize = t1;
      _.height = t2;
      _.fontFeatures = t3;
      _.__TextHeightStyle_hashCode = $;
    },
    TextDimensions: function TextDimensions(t0) {
      this.__engine$_element = t0;
      this._cachedBoundingClientRect = null;
    },
    TextHeightRuler: function TextHeightRuler(t0, t1, t2) {
      var _ = this;
      _.textHeightStyle = t0;
      _.rulerHost = t1;
      _.__TextHeightRuler__host = _.__TextHeightRuler__probe = $;
      _._dimensions = t2;
      _.__TextHeightRuler_height = _.__TextHeightRuler_alphabeticBaseline = $;
    },
    DirectionalPosition: function DirectionalPosition(t0, t1, t2) {
      this.lineBreak = t0;
      this.textDirection = t1;
      this.isSpaceOnly = t2;
    },
    _ComparisonResult: function _ComparisonResult(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    UnicodeRange: function UnicodeRange(t0, t1, t2, t3) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _.property = t2;
      _.$ti = t3;
    },
    UnicodePropertyLookup: function UnicodePropertyLookup(t0, t1, t2, t3) {
      var _ = this;
      _.ranges = t0;
      _.defaultProperty = t1;
      _.__engine$_cache = t2;
      _.$ti = t3;
    },
    BrowserAutofillHints: function BrowserAutofillHints(t0) {
      this._flutterToEngineMap = t0;
    },
    EngineInputType: function EngineInputType() {
    },
    NoTextInputType: function NoTextInputType() {
    },
    TextInputType: function TextInputType() {
    },
    NumberInputType: function NumberInputType() {
    },
    DecimalInputType: function DecimalInputType() {
    },
    PhoneInputType: function PhoneInputType() {
    },
    EmailInputType: function EmailInputType() {
    },
    UrlInputType: function UrlInputType() {
    },
    MultilineInputType: function MultilineInputType() {
    },
    TextCapitalization: function TextCapitalization(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TextCapitalizationConfig: function TextCapitalizationConfig(t0) {
      this.textCapitalization = t0;
    },
    EngineAutofillForm: function EngineAutofillForm(t0, t1, t2, t3) {
      var _ = this;
      _.formElement = t0;
      _.elements = t1;
      _.items = t2;
      _.formIdentifier = t3;
    },
    EngineAutofillForm_fromFrameworkMessage_closure: function EngineAutofillForm_fromFrameworkMessage_closure() {
    },
    EngineAutofillForm_addInputEventListeners_addSubscriptionForKey: function EngineAutofillForm_addInputEventListeners_addSubscriptionForKey(t0, t1) {
      this.$this = t0;
      this.subscriptions = t1;
    },
    EngineAutofillForm_addInputEventListeners_addSubscriptionForKey_closure: function EngineAutofillForm_addInputEventListeners_addSubscriptionForKey_closure(t0, t1, t2) {
      this.$this = t0;
      this.key = t1;
      this.element = t2;
    },
    AutofillInfo: function AutofillInfo(t0, t1, t2, t3) {
      var _ = this;
      _.editingState = t0;
      _.uniqueIdentifier = t1;
      _.autofillHint = t2;
      _.placeholder = t3;
    },
    TextEditingDeltaState: function TextEditingDeltaState(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.oldText = t0;
      _.deltaText = t1;
      _.deltaStart = t2;
      _.deltaEnd = t3;
      _.baseOffset = t4;
      _.extentOffset = t5;
      _.composingOffset = t6;
      _.composingExtent = t7;
    },
    EditingState: function EditingState(t0, t1, t2) {
      this.text = t0;
      this.baseOffset = t1;
      this.extentOffset = t2;
    },
    InputConfiguration: function InputConfiguration(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.inputType = t0;
      _.inputAction = t1;
      _.readOnly = t2;
      _.obscureText = t3;
      _.autocorrect = t4;
      _.enableDeltaModel = t5;
      _.autofill = t6;
      _.autofillGroup = t7;
      _.textCapitalization = t8;
    },
    GloballyPositionedTextEditingStrategy: function GloballyPositionedTextEditingStrategy(t0, t1) {
      var _ = this;
      _.owner = t0;
      _.isEnabled = false;
      _.domElement = null;
      _.__DefaultTextEditingStrategy_inputConfiguration = $;
      _.onAction = _.onChange = _.geometry = _.style = _._editingDeltaState = _.lastEditingState = null;
      _.subscriptions = t1;
      _._appendedToForm = false;
    },
    SafariDesktopTextEditingStrategy: function SafariDesktopTextEditingStrategy(t0, t1) {
      var _ = this;
      _.owner = t0;
      _.isEnabled = false;
      _.domElement = null;
      _.__DefaultTextEditingStrategy_inputConfiguration = $;
      _.onAction = _.onChange = _.geometry = _.style = _._editingDeltaState = _.lastEditingState = null;
      _.subscriptions = t1;
      _._appendedToForm = false;
    },
    DefaultTextEditingStrategy: function DefaultTextEditingStrategy() {
    },
    DefaultTextEditingStrategy_addEventHandlers_closure: function DefaultTextEditingStrategy_addEventHandlers_closure(t0) {
      this.$this = t0;
    },
    DefaultTextEditingStrategy_preventDefaultForMouseEvents_closure: function DefaultTextEditingStrategy_preventDefaultForMouseEvents_closure() {
    },
    DefaultTextEditingStrategy_preventDefaultForMouseEvents_closure0: function DefaultTextEditingStrategy_preventDefaultForMouseEvents_closure0() {
    },
    DefaultTextEditingStrategy_preventDefaultForMouseEvents_closure1: function DefaultTextEditingStrategy_preventDefaultForMouseEvents_closure1() {
    },
    IOSTextEditingStrategy: function IOSTextEditingStrategy(t0, t1) {
      var _ = this;
      _._positionInputElementTimer = null;
      _._canPosition = true;
      _.owner = t0;
      _.isEnabled = false;
      _.domElement = null;
      _.__DefaultTextEditingStrategy_inputConfiguration = $;
      _.onAction = _.onChange = _.geometry = _.style = _._editingDeltaState = _.lastEditingState = null;
      _.subscriptions = t1;
      _._appendedToForm = false;
    },
    IOSTextEditingStrategy_addEventHandlers_closure: function IOSTextEditingStrategy_addEventHandlers_closure(t0) {
      this.$this = t0;
    },
    IOSTextEditingStrategy_addEventHandlers_closure0: function IOSTextEditingStrategy_addEventHandlers_closure0(t0) {
      this.$this = t0;
    },
    IOSTextEditingStrategy__addTapListener_closure: function IOSTextEditingStrategy__addTapListener_closure(t0) {
      this.$this = t0;
    },
    IOSTextEditingStrategy__schedulePlacement_closure: function IOSTextEditingStrategy__schedulePlacement_closure(t0) {
      this.$this = t0;
    },
    AndroidTextEditingStrategy: function AndroidTextEditingStrategy(t0, t1) {
      var _ = this;
      _.owner = t0;
      _.isEnabled = false;
      _.domElement = null;
      _.__DefaultTextEditingStrategy_inputConfiguration = $;
      _.onAction = _.onChange = _.geometry = _.style = _._editingDeltaState = _.lastEditingState = null;
      _.subscriptions = t1;
      _._appendedToForm = false;
    },
    AndroidTextEditingStrategy_addEventHandlers_closure: function AndroidTextEditingStrategy_addEventHandlers_closure(t0) {
      this.$this = t0;
    },
    FirefoxTextEditingStrategy: function FirefoxTextEditingStrategy(t0, t1) {
      var _ = this;
      _.owner = t0;
      _.isEnabled = false;
      _.domElement = null;
      _.__DefaultTextEditingStrategy_inputConfiguration = $;
      _.onAction = _.onChange = _.geometry = _.style = _._editingDeltaState = _.lastEditingState = null;
      _.subscriptions = t1;
      _._appendedToForm = false;
    },
    FirefoxTextEditingStrategy_addEventHandlers_closure: function FirefoxTextEditingStrategy_addEventHandlers_closure(t0) {
      this.$this = t0;
    },
    FirefoxTextEditingStrategy_addEventHandlers_closure0: function FirefoxTextEditingStrategy_addEventHandlers_closure0(t0) {
      this.$this = t0;
    },
    FirefoxTextEditingStrategy__postponeFocus_closure: function FirefoxTextEditingStrategy__postponeFocus_closure(t0) {
      this.$this = t0;
    },
    TextInputCommand: function TextInputCommand() {
    },
    TextInputSetClient: function TextInputSetClient(t0, t1) {
      this.clientId = t0;
      this.configuration = t1;
    },
    TextInputUpdateConfig: function TextInputUpdateConfig() {
    },
    TextInputSetEditingState: function TextInputSetEditingState(t0) {
      this.state = t0;
    },
    TextInputShow: function TextInputShow() {
    },
    TextInputSetEditableSizeAndTransform: function TextInputSetEditableSizeAndTransform(t0) {
      this.geometry = t0;
    },
    TextInputSetStyle: function TextInputSetStyle(t0) {
      this.style = t0;
    },
    TextInputClearClient: function TextInputClearClient() {
    },
    TextInputHide: function TextInputHide() {
    },
    TextInputSetMarkedTextRect: function TextInputSetMarkedTextRect() {
    },
    TextInputSetCaretRect: function TextInputSetCaretRect() {
    },
    TextInputRequestAutofill: function TextInputRequestAutofill() {
    },
    TextInputFinishAutofillContext: function TextInputFinishAutofillContext(t0) {
      this.saveForm = t0;
    },
    saveForms_closure: function saveForms_closure() {
    },
    TextEditingChannel: function TextEditingChannel(t0) {
      this.implementation = t0;
    },
    TextEditingChannel_handleTextInput_closure: function TextEditingChannel_handleTextInput_closure(t0) {
      this.callback = t0;
    },
    HybridTextEditing: function HybridTextEditing() {
      var _ = this;
      _.__HybridTextEditing_channel = $;
      _._clientId = null;
      _.isEditing = false;
      _.configuration = null;
      _.__HybridTextEditing_strategy = $;
    },
    HybridTextEditing__startEditing_closure0: function HybridTextEditing__startEditing_closure0(t0) {
      this.$this = t0;
    },
    HybridTextEditing__startEditing_closure: function HybridTextEditing__startEditing_closure(t0) {
      this.$this = t0;
    },
    EditableTextStyle: function EditableTextStyle(t0, t1, t2, t3, t4) {
      var _ = this;
      _.fontSize = t0;
      _.fontWeight = t1;
      _.fontFamily = t2;
      _.textAlign = t3;
      _.textDirection = t4;
    },
    EditableTextGeometry: function EditableTextGeometry(t0, t1, t2) {
      this.width = t0;
      this.height = t1;
      this.globalTransform = t2;
    },
    TransformKind: function TransformKind(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    Matrix40: function Matrix40(t0) {
      this.__engine$_m4storage = t0;
    },
    EngineFlutterWindow: function EngineFlutterWindow() {
    },
    EngineFlutterWindow_closure: function EngineFlutterWindow_closure(t0) {
      this.$this = t0;
    },
    EngineFlutterWindow_handleNavigationMessage_closure: function EngineFlutterWindow_handleNavigationMessage_closure(t0, t1) {
      this.$this = t0;
      this.data = t1;
    },
    EngineSingletonFlutterWindow: function EngineSingletonFlutterWindow(t0, t1, t2, t3) {
      var _ = this;
      _._debugDevicePixelRatio = null;
      _._windowId = t0;
      _.platformDispatcher = t1;
      _._browserHistory = null;
      _._endOfTheLine = t2;
      _._viewInsets = t3;
      _._physicalSize = null;
    },
    WindowPadding: function WindowPadding(t0, t1, t2, t3) {
      var _ = this;
      _.left = t0;
      _.top = t1;
      _.right = t2;
      _.bottom = t3;
    },
    _DomCanvas_EngineCanvas_SaveElementStackTracking: function _DomCanvas_EngineCanvas_SaveElementStackTracking() {
    },
    _PersistedClipRect_PersistedContainerSurface__DomClip: function _PersistedClipRect_PersistedContainerSurface__DomClip() {
    },
    _PersistedPhysicalShape_PersistedContainerSurface__DomClip: function _PersistedPhysicalShape_PersistedContainerSurface__DomClip() {
    },
    __MouseAdapter__BaseAdapter__WheelEventListenerMixin: function __MouseAdapter__BaseAdapter__WheelEventListenerMixin() {
    },
    __PointerAdapter__BaseAdapter__WheelEventListenerMixin: function __PointerAdapter__BaseAdapter__WheelEventListenerMixin() {
    },
    JS_CONST: function JS_CONST() {
    },
    CastIterable_CastIterable(source, $S, $T) {
      if ($S._eval$1("EfficientLengthIterable<0>")._is(source))
        return new A._EfficientLengthCastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("_EfficientLengthCastIterable<1,2>"));
      return new A.CastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastIterable<1,2>"));
    },
    LateError$fieldADI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has been assigned during initialization.");
    },
    LateError$fieldNI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    LateError$localNI(localName) {
      return new A.LateError("Local '" + localName + "' has not been initialized.");
    },
    hexDigitValue(char) {
      var letter,
        digit = char ^ 48;
      if (digit <= 9)
        return digit;
      letter = char | 32;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    parseHexByte(source, index) {
      var digit1 = A.hexDigitValue(B.JSString_methods.codeUnitAt$1(source, index)),
        digit2 = A.hexDigitValue(B.JSString_methods.codeUnitAt$1(source, index + 1));
      return digit1 * 16 + digit2 - (digit2 & 256);
    },
    SystemHash_combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    SystemHash_finish(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    SystemHash_hash2(v1, v2, seed) {
      return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(seed, v1), v2));
    },
    SystemHash_hash4(v1, v2, v3, v4, seed) {
      return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(seed, v1), v2), v3), v4));
    },
    checkNotNullable(value, $name, $T) {
      return value;
    },
    SubListIterable$(_iterable, _start, _endOrLength, $E) {
      A.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        A.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          A.throwExpression(A.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new A.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    MappedIterable_MappedIterable(iterable, $function, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
      return new A.MappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    TakeIterable_TakeIterable(iterable, takeCount, $E) {
      var _s9_ = "takeCount";
      A.ArgumentError_checkNotNull(takeCount, _s9_);
      A.RangeError_checkNotNegative(takeCount, _s9_);
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthTakeIterable(iterable, takeCount, $E._eval$1("EfficientLengthTakeIterable<0>"));
      return new A.TakeIterable(iterable, takeCount, $E._eval$1("TakeIterable<0>"));
    },
    SkipIterable_SkipIterable(iterable, count, $E) {
      var _s5_ = "count";
      if (type$.EfficientLengthIterable_dynamic._is(iterable)) {
        A.ArgumentError_checkNotNull(count, _s5_);
        A.RangeError_checkNotNegative(count, _s5_);
        return new A.EfficientLengthSkipIterable(iterable, count, $E._eval$1("EfficientLengthSkipIterable<0>"));
      }
      A.ArgumentError_checkNotNull(count, _s5_);
      A.RangeError_checkNotNegative(count, _s5_);
      return new A.SkipIterable(iterable, count, $E._eval$1("SkipIterable<0>"));
    },
    FollowedByIterable_FollowedByIterable$firstEfficient(first, second, $E) {
      return new A.FollowedByIterable(first, second, $E._eval$1("FollowedByIterable<0>"));
    },
    IterableElementError_noElement() {
      return new A.StateError("No element");
    },
    IterableElementError_tooMany() {
      return new A.StateError("Too many elements");
    },
    IterableElementError_tooFew() {
      return new A.StateError("Too few elements");
    },
    Sort_sort(a, compare) {
      A.Sort__doSort(a, 0, J.get$length$asx(a) - 1, compare);
    },
    Sort__doSort(a, left, right, compare) {
      if (right - left <= 32)
        A.Sort__insertionSort(a, left, right, compare);
      else
        A.Sort__dualPivotQuicksort(a, left, right, compare);
    },
    Sort__insertionSort(a, left, right, compare) {
      var i, t1, el, j, j0;
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (!(j > left && compare.call$2(t1.$index(a, j - 1), el) > 0))
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort(a, left, right, compare) {
      var t0, less, great, k, ak, comp, great0, less0, pivots_are_equal, t2,
        sixth = B.JSInt_methods._tdivFast$1(right - left + 1, 6),
        index1 = left + sixth,
        index5 = right - sixth,
        index3 = B.JSInt_methods._tdivFast$1(left + right, 2),
        index2 = index3 - sixth,
        index4 = index3 + sixth,
        t1 = J.getInterceptor$asx(a),
        el1 = t1.$index(a, index1),
        el2 = t1.$index(a, index2),
        el3 = t1.$index(a, index3),
        el4 = t1.$index(a, index4),
        el5 = t1.$index(a, index5);
      if (compare.call$2(el1, el2) > 0) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      if (compare.call$2(el4, el5) > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      if (compare.call$2(el1, el3) > 0) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      if (compare.call$2(el2, el3) > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (compare.call$2(el1, el4) > 0) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      if (compare.call$2(el3, el4) > 0) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      if (compare.call$2(el2, el5) > 0) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      if (compare.call$2(el2, el3) > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (compare.call$2(el4, el5) > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) > 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) > 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      A.Sort__doSort(a, left, less - 2, compare);
      A.Sort__doSort(a, great + 2, right, compare);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        A.Sort__doSort(a, less, great, compare);
      } else
        A.Sort__doSort(a, less, great, compare);
    },
    _CastIterableBase: function _CastIterableBase() {
    },
    CastIterator: function CastIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastIterable: function CastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _EfficientLengthCastIterable: function _EfficientLengthCastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _CastListBase: function _CastListBase() {
    },
    CastList: function CastList(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    LateError: function LateError(t0) {
      this._message = t0;
    },
    CodeUnits: function CodeUnits(t0) {
      this._string = t0;
    },
    nullFuture_closure: function nullFuture_closure() {
    },
    SentinelValue: function SentinelValue() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1) {
      this.__internal$_current = null;
      this._iterator = t0;
      this._f = t1;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1) {
      this._iterator = t0;
      this._f = t1;
    },
    ExpandIterable: function ExpandIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterator: function ExpandIterator(t0, t1, t2) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._currentExpansion = t2;
      _.__internal$_current = null;
    },
    TakeIterable: function TakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    EfficientLengthTakeIterable: function EfficientLengthTakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    TakeIterator: function TakeIterator(t0, t1) {
      this._iterator = t0;
      this._remaining = t1;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1) {
      this._iterator = t0;
      this._skipCount = t1;
    },
    SkipWhileIterable: function SkipWhileIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    SkipWhileIterator: function SkipWhileIterator(t0, t1) {
      this._iterator = t0;
      this._f = t1;
      this._hasSkipped = false;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator() {
    },
    FollowedByIterable: function FollowedByIterable(t0, t1, t2) {
      this.__internal$_first = t0;
      this._second = t1;
      this.$ti = t2;
    },
    FollowedByIterator: function FollowedByIterator(t0, t1) {
      this._currentIterator = t0;
      this._nextIterable = t1;
    },
    WhereTypeIterable: function WhereTypeIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    WhereTypeIterator: function WhereTypeIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    Symbol: function Symbol(t0) {
      this.__internal$_name = t0;
    },
    __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {
    },
    ConstantMap__throwUnmodifiable() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    GeneralConstantMap__constantMapHashCode(key) {
      if (typeof key == "number")
        return B.JSNumber_methods.get$hashCode(key);
      if (type$.Symbol._is(key))
        return key.get$hashCode(key);
      if (type$.Type._is(key))
        return A.Primitives_objectHashCode(key);
      return A.objectHashCode(key);
    },
    GeneralConstantMap__typeTest($T) {
      return new A.GeneralConstantMap__typeTest_closure($T);
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    Primitives_objectHashCode(object) {
      var t1, hash,
        property = $.Primitives__identityHashCodeProperty;
      if (property == null) {
        t1 = Symbol("identityHashCode");
        property = $.Primitives__identityHashCodeProperty = t1;
      }
      hash = object[property];
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object[property] = hash;
      }
      return hash;
    },
    Primitives_parseInt(source, radix) {
      var decimalMatch, maxCharCode, digitsPart, t1, i, _null = null,
        match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return _null;
      decimalMatch = match[3];
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((B.JSString_methods._codeUnitAt$1(digitsPart, i) | 32) > maxCharCode)
            return _null;
      }
      return parseInt(source, radix);
    },
    Primitives_parseDouble(source) {
      var result, trimmed;
      if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
        return null;
      result = parseFloat(source);
      if (isNaN(result)) {
        trimmed = B.JSString_methods.trim$0(source);
        if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
          return result;
        return null;
      }
      return result;
    },
    Primitives_objectTypeName(object) {
      return A.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti(object) {
      var interceptor, dispatchName, t1, $constructor, constructorName;
      if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
      interceptor = J.getInterceptor$(object);
      if (interceptor === B.Interceptor_methods || interceptor === B.JavaScriptObject_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = B.C_JS_CONST(object);
        t1 = dispatchName !== "Object" && dispatchName !== "";
        if (t1)
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string")
            t1 = constructorName !== "Object" && constructorName !== "";
          else
            t1 = false;
          if (t1)
            return constructorName;
        }
      }
      return A._rtiToString(A.instanceType(object), null);
    },
    Primitives_dateNow() {
      return Date.now();
    },
    Primitives_initTicker() {
      var $window, performance;
      if ($.Primitives_timerFrequency !== 0)
        return;
      $.Primitives_timerFrequency = 1000;
      if (typeof window == "undefined")
        return;
      $window = window;
      if ($window == null)
        return;
      performance = $window.performance;
      if (performance == null)
        return;
      if (typeof performance.now != "function")
        return;
      $.Primitives_timerFrequency = 1000000;
      $.Primitives_timerTicks = new A.Primitives_initTicker_closure(performance);
    },
    Primitives__fromCharCodeApply(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints(codePoints) {
      var t1, _i, i,
        a = A._setArrayType([], type$.JSArray_int);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, A.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i <= 65535)
          a.push(i);
        else if (i <= 1114111) {
          a.push(55296 + (B.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          a.push(56320 + (i & 1023));
        } else
          throw A.wrapException(A.argumentErrorValue(i));
      }
      return A.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i < 0)
          throw A.wrapException(A.argumentErrorValue(i));
        if (i > 65535)
          return A.Primitives_stringFromCodePoints(charCodes);
      }
      return A.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode(charCode) {
      var bits;
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((B.JSInt_methods._shrOtherPositive$1(bits, 10) | 55296) >>> 0, bits & 1023 | 56320);
        }
      }
      throw A.wrapException(A.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_lazyAsJsDate(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._core$_value);
      return receiver.date;
    },
    Primitives_getYear(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : A.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : A.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : A.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : A.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : A.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments) {
      var $arguments, namedArgumentList, t1 = {};
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      B.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && namedArguments._length !== 0)
        namedArguments.forEach$1(0, new A.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      return J.noSuchMethod$1$($function, new A.JSInvocationMirror(B.Symbol_call, 0, $arguments, namedArgumentList, 0));
    },
    Primitives_applyFunction($function, positionalArguments, namedArguments) {
      var t1, argumentCount, jsStub;
      if (Array.isArray(positionalArguments))
        t1 = namedArguments == null || namedArguments._length === 0;
      else
        t1 = false;
      if (t1) {
        argumentCount = positionalArguments.length;
        if (argumentCount === 0) {
          if (!!$function.call$0)
            return $function.call$0();
        } else if (argumentCount === 1) {
          if (!!$function.call$1)
            return $function.call$1(positionalArguments[0]);
        } else if (argumentCount === 2) {
          if (!!$function.call$2)
            return $function.call$2(positionalArguments[0], positionalArguments[1]);
        } else if (argumentCount === 3) {
          if (!!$function.call$3)
            return $function.call$3(positionalArguments[0], positionalArguments[1], positionalArguments[2]);
        } else if (argumentCount === 4) {
          if (!!$function.call$4)
            return $function.call$4(positionalArguments[0], positionalArguments[1], positionalArguments[2], positionalArguments[3]);
        } else if (argumentCount === 5)
          if (!!$function.call$5)
            return $function.call$5(positionalArguments[0], positionalArguments[1], positionalArguments[2], positionalArguments[3], positionalArguments[4]);
        jsStub = $function["call" + "$" + argumentCount];
        if (jsStub != null)
          return jsStub.apply($function, positionalArguments);
      }
      return A.Primitives__generalApplyFunction($function, positionalArguments, namedArguments);
    },
    Primitives__generalApplyFunction($function, positionalArguments, namedArguments) {
      var defaultValuesClosure, t1, defaultValues, interceptor, jsFunction, maxArguments, missingDefaults, keys, _i, defaultValue, used, t2,
        $arguments = Array.isArray(positionalArguments) ? positionalArguments : A.List_List$of(positionalArguments, true, type$.dynamic),
        argumentCount = $arguments.length,
        requiredParameterCount = $function.$requiredArgCount;
      if (argumentCount < requiredParameterCount)
        return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      defaultValuesClosure = $function.$defaultValues;
      t1 = defaultValuesClosure == null;
      defaultValues = !t1 ? defaultValuesClosure() : null;
      interceptor = J.getInterceptor$($function);
      jsFunction = interceptor["call*"];
      if (typeof jsFunction == "string")
        jsFunction = interceptor[jsFunction];
      if (t1) {
        if (namedArguments != null && namedArguments._length !== 0)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount === requiredParameterCount)
          return jsFunction.apply($function, $arguments);
        return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      }
      if (Array.isArray(defaultValues)) {
        if (namedArguments != null && namedArguments._length !== 0)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        maxArguments = requiredParameterCount + defaultValues.length;
        if (argumentCount > maxArguments)
          return A.Primitives_functionNoSuchMethod($function, $arguments, null);
        if (argumentCount < maxArguments) {
          missingDefaults = defaultValues.slice(argumentCount - requiredParameterCount);
          if ($arguments === positionalArguments)
            $arguments = A.List_List$of($arguments, true, type$.dynamic);
          B.JSArray_methods.addAll$1($arguments, missingDefaults);
        }
        return jsFunction.apply($function, $arguments);
      } else {
        if (argumentCount > requiredParameterCount)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if ($arguments === positionalArguments)
          $arguments = A.List_List$of($arguments, true, type$.dynamic);
        keys = Object.keys(defaultValues);
        if (namedArguments == null)
          for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            defaultValue = defaultValues[keys[_i]];
            if (B.C__Required === defaultValue)
              return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
            B.JSArray_methods.add$1($arguments, defaultValue);
          }
        else {
          for (t1 = keys.length, used = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            t2 = keys[_i];
            if (namedArguments.containsKey$1(0, t2)) {
              ++used;
              B.JSArray_methods.add$1($arguments, namedArguments.$index(0, t2));
            } else {
              defaultValue = defaultValues[t2];
              if (B.C__Required === defaultValue)
                return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
              B.JSArray_methods.add$1($arguments, defaultValue);
            }
          }
          if (used !== namedArguments._length)
            return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        return jsFunction.apply($function, $arguments);
      }
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index";
      if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, null);
      $length = J.get$length$asx(indexable);
      if (index < 0 || index >= $length)
        return A.IndexError$(index, indexable, _s5_, null, $length);
      return A.RangeError$value(index, _s5_);
    },
    diagnoseRangeError(start, end, $length) {
      if (start > $length)
        return A.RangeError$range(start, 0, $length, "start", null);
      if (end != null)
        if (end < start || end > $length)
          return A.RangeError$range(end, start, $length, "end", null);
      return new A.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue(object) {
      return new A.ArgumentError(true, object, null, null);
    },
    checkNum(value) {
      return value;
    },
    wrapException(ex) {
      var wrapper, t1;
      if (ex == null)
        ex = new A.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex) {
      throw A.wrapException(ex);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = A.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = A._setArrayType([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new A.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new A.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException(ex) {
      if (ex == null)
        return new A.NullThrownFromJavaScriptException(ex);
      if (ex instanceof A.ExceptionAndStackTrace)
        return A.saveStackTrace(ex, ex.dartException);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return A.saveStackTrace(ex, ex.dartException);
      return A._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException(ex) {
      var message, number, ieErrorCode, t1, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, _null = null;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((B.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
              t1 = A.S(message) + " (Error " + ieErrorCode + ")";
              return A.saveStackTrace(ex, new A.NullError(t1, _null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return A.saveStackTrace(ex, A.JsNoSuchMethodError$(message, match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(message, match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t1 = match != null;
                        } else
                          t1 = true;
                      } else
                        t1 = true;
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                } else
                  t1 = true;
              } else
                t1 = true;
            } else
              t1 = true;
            if (t1)
              return A.saveStackTrace(ex, new A.NullError(message, match == null ? _null : match.method));
          }
        }
        return A.saveStackTrace(ex, new A.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new A.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return A.saveStackTrace(ex, new A.ArgumentError(false, _null, _null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new A.StackOverflowError();
      return ex;
    },
    getTraceFromException(exception) {
      var trace;
      if (exception instanceof A.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new A._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new A._StackTrace(exception);
    },
    objectHashCode(object) {
      if (object == null || typeof object != "object")
        return J.get$hashCode$(object);
      else
        return A.Primitives_objectHashCode(object);
    },
    fillLiteralMap(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    fillLiteralSet(values, result) {
      var index,
        $length = values.length;
      for (index = 0; index < $length; ++index)
        result.add$1(0, values[index]);
      return result;
    },
    invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      switch (numberOfArguments) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw A.wrapException(A.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
      var $function;
      if (closure == null)
        return null;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, A.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else
        $constructor = function tear_off(a, b) {
          this.$initialize(a, b);
        };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunctionNewRti(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      var arity, t1;
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      arity = $function.length;
      t1 = A.Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var receiverField, arity, t1,
        interceptorField = $.BoundClosure__interceptorFieldNameCache;
      interceptorField == null ? $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor") : interceptorField;
      receiverField = $.BoundClosure__receiverFieldNameCache;
      receiverField == null ? $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver") : receiverField;
      arity = $function.length;
      t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var t1, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template));
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found.", null));
    },
    throwCyclicInit(staticName) {
      throw A.wrapException(new A.CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    LinkedHashMapKeyIterator$(_map, _modifications) {
      var t1 = new A.LinkedHashMapKeyIterator(_map, _modifications);
      t1._cell = _map._first;
      return t1;
    },
    defineProperty(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = $.getTagFunction.call$1(obj),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = $.alternateTagFunction.call$2(obj, tag);
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      A.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
      hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new A.initHooks_closure(getTag);
      $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, unicode, dotAll, global) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        g = global ? "g" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw A.wrapException(A.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    stringContainsUnchecked(receiver, other, startIndex) {
      var t1 = receiver.indexOf(other, startIndex);
      return t1 >= 0;
    },
    escapeReplacement(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked(receiver, pattern, replacement) {
      var t1 = A.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      return t1;
    },
    stringReplaceAllUncheckedString(receiver, pattern, replacement) {
      var $length, t1, i, index;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        t1 = "" + replacement;
        for (i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      index = receiver.indexOf(pattern, 0);
      if (index < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(A.quoteStringForRegExp(pattern), "g"), A.escapeReplacement(replacement));
    },
    stringReplaceFirstUnchecked(receiver, pattern, replacement, startIndex) {
      var index = receiver.indexOf(pattern, startIndex);
      if (index < 0)
        return receiver;
      return A.stringReplaceRangeUnchecked(receiver, index, index + pattern.length, replacement);
    },
    stringReplaceRangeUnchecked(receiver, start, end, replacement) {
      var prefix = receiver.substring(0, start),
        suffix = receiver.substring(end);
      return prefix + replacement + suffix;
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
      var _ = this;
      _._length = t0;
      _._jsObject = t1;
      _._keys = t2;
      _.$ti = t3;
    },
    ConstantStringMap_values_closure: function ConstantStringMap_values_closure(t0) {
      this.$this = t0;
    },
    _ConstantMapKeyIterable: function _ConstantMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    GeneralConstantMap: function GeneralConstantMap(t0, t1) {
      this._jsData = t0;
      this.$ti = t1;
    },
    GeneralConstantMap__typeTest_closure: function GeneralConstantMap__typeTest_closure(t0) {
      this.T = t0;
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4) {
      var _ = this;
      _.__js_helper$_memberName = t0;
      _.__js_helper$_kind = t1;
      _._arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
    },
    Primitives_initTicker_closure: function Primitives_initTicker_closure(t0) {
      this.performance = t0;
    },
    Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.namedArgumentList = t1;
      this.$arguments = t2;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this.__js_helper$_message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _Required: function _Required() {
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _._length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    JsLinkedHashMap_containsValue_closure: function JsLinkedHashMap_containsValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _._previous = _._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _.__js_helper$_string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _StringAllMatchesIterable: function _StringAllMatchesIterable(t0, t1, t2) {
      this._input = t0;
      this._pattern = t1;
      this.__js_helper$_index = t2;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
    },
    throwLateFieldADI(fieldName) {
      return A.throwExpression(A.LateError$fieldADI(fieldName));
    },
    _Cell$named(_name) {
      var t1 = new A._Cell(_name);
      return t1.__late_helper$_value = t1;
    },
    _lateReadCheck(value, $name) {
      if (value === $)
        throw A.wrapException(A.LateError$fieldNI($name));
      return value;
    },
    _lateWriteOnceCheck(value, $name) {
      if (value !== $)
        throw A.wrapException(new A.LateError("Field '" + $name + "' has already been initialized."));
    },
    _lateInitializeOnceCheck(value, $name) {
      if (value !== $)
        throw A.wrapException(A.LateError$fieldADI($name));
    },
    _Cell: function _Cell(t0) {
      this.__late_helper$_name = t0;
      this.__late_helper$_value = null;
    },
    _checkViewArguments(buffer, offsetInBytes, $length) {
    },
    _ensureNativeList(list) {
      var t1, result, i;
      if (type$.JSIndexable_dynamic._is(list))
        return list;
      t1 = J.getInterceptor$asx(list);
      result = A.List_List$filled(t1.get$length(list), null, false, type$.dynamic);
      for (i = 0; i < t1.get$length(list); ++i)
        result[i] = t1.$index(list, i);
      return result;
    },
    NativeByteData_NativeByteData$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new DataView(buffer, offsetInBytes) : new DataView(buffer, offsetInBytes, $length);
    },
    NativeFloat32List_NativeFloat32List($length) {
      return new Float32Array($length);
    },
    NativeFloat64List_NativeFloat64List($length) {
      return new Float64Array($length);
    },
    NativeFloat64List_NativeFloat64List$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      return new Float64Array(buffer, offsetInBytes, $length);
    },
    NativeInt32List_NativeInt32List($length) {
      return new Int32Array($length);
    },
    NativeInt32List_NativeInt32List$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      return new Int32Array(buffer, offsetInBytes, $length);
    },
    NativeInt8List__create1(arg) {
      return new Int8Array(arg);
    },
    NativeUint16List_NativeUint16List$fromList(list) {
      return new Uint16Array(A._ensureNativeList(list));
    },
    NativeUint8List_NativeUint8List$fromList(elements) {
      return new Uint8Array(A._ensureNativeList(elements));
    },
    NativeUint8List_NativeUint8List$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
    },
    _checkValidIndex(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw A.wrapException(A.diagnoseIndexError(list, index));
    },
    _checkValidRange(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw A.wrapException(A.diagnoseRangeError(start, end, $length));
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getQuestionFromStar(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = A._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return A.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 11 || kind === 12;
    },
    Rti__getCanonicalRecipe(rti) {
      return rti._canonicalRecipe;
    },
    findType(recipe) {
      return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          returnType = rti._primary;
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new A._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      var rti;
      if (object instanceof A.Object) {
        rti = object.$ti;
        return rti != null ? rti : A._instanceTypeFromConstructor(object);
      }
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof A.Closure ? instance.__proto__.__proto__.constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    getRuntimeType(object) {
      var rti = object instanceof A.Closure ? A.closureFunctionType(object) : null;
      return A.createRuntimeType(rti == null ? A.instanceType(object) : rti);
    },
    createRuntimeType(rti) {
      var recipe, starErasedRecipe, starErasedRti,
        type = rti._cachedRuntimeType;
      if (type != null)
        return type;
      recipe = rti._canonicalRecipe;
      starErasedRecipe = recipe.replace(/\*/g, "");
      if (starErasedRecipe === recipe)
        return rti._cachedRuntimeType = new A._Type(rti);
      starErasedRti = A._Universe_eval(init.typeUniverse, starErasedRecipe, true);
      type = starErasedRti._cachedRuntimeType;
      return rti._cachedRuntimeType = type == null ? starErasedRti._cachedRuntimeType = new A._Type(starErasedRti) : type;
    },
    typeLiteral(recipe) {
      return A.createRuntimeType(A._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest(object) {
      var t1, unstarred, isFn, $name, testRti = this;
      if (testRti === type$.Object)
        return A._finishIsFn(testRti, object, A._isObject);
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return A._finishIsFn(testRti, object, A._isTop);
      t1 = testRti._kind;
      unstarred = t1 === 6 ? testRti._primary : testRti;
      if (unstarred === type$.int)
        isFn = A._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = A._isNum;
      else if (unstarred === type$.String)
        isFn = A._isString;
      else
        isFn = unstarred === type$.bool ? A._isBool : null;
      if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
      if (unstarred._kind === 9) {
        $name = unstarred._primary;
        if (unstarred._rest.every(A.isTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
          return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
      } else if (t1 === 7)
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
      return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
      var t1, testRti = this,
        asFn = A._generalAsCheckImplementation;
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        asFn = A._asTop;
      else if (testRti === type$.Object)
        asFn = A._asObject;
      else {
        t1 = A.isNullable(testRti);
        if (t1)
          asFn = A._generalNullableAsCheckImplementation;
      }
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs(testRti) {
      var t1,
        kind = testRti._kind;
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          if (!(testRti === type$.legacy_Never))
            if (kind !== 7)
              t1 = kind === 8 && A._nullIs(testRti._primary) || testRti === type$.Null || testRti === type$.JSNull;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      return A._isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), null, testRti, null);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var t1, testRti = this;
      if (object == null) {
        t1 = A.isNullable(testRti);
        if (t1)
          return object;
      } else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _failedAsCheck(object, testRti) {
      throw A.wrapException(A._TypeError$fromMessage(A._Error_compose(object, A.instanceOrFunctionType(object, testRti), A._rtiToString(testRti, null))));
    },
    _Error_compose(object, objectRti, checkedTypeDescription) {
      var objectDescription = A.Error_safeToString(object),
        objectTypeDescription = A._rtiToString(objectRti == null ? A.instanceType(object) : objectRti, null);
      return objectDescription + ": type '" + objectTypeDescription + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage(message) {
      return new A._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType(object, type) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, null, type));
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num?"));
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
      return s;
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, outerContextLength, offset, i, t1, t2, typeParametersText, typeSep, boundRti, kind, t3, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ";
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null) {
          genericContext = A._setArrayType([], type$.JSArray_String);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          genericContext.push("T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          typeParametersText = B.JSString_methods.$add(typeParametersText + typeSep, genericContext[genericContext.length - 1 - i]);
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            if (!(boundRti === t2))
              t3 = false;
            else
              t3 = true;
          else
            t3 = true;
          if (!t3)
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else {
        typeParametersText = "";
        outerContextLength = null;
      }
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = A._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var s, questionArgument, argumentKind, $name, $arguments, t1,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        s = A._rtiToString(rti._primary, genericContext);
        return s;
      }
      if (kind === 7) {
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 11 || argumentKind === 12 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 8)
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 9) {
        $name = A._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return A._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 13) {
        t1 = rti._primary;
        return genericContext[genericContext.length - 1 - t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, null, recipe, normalize));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = A._installSpecializedAsCheck;
      rti._is = A._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isStrongTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new A.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isStrongTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              t1 = baseKind === 8 && A.isNullable(baseType._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          if (starArgument._kind === 8 && A.isNullable(starArgument._primary))
            return starArgument;
          else
            return A.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, t2, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (!A.isStrongTopType(baseType))
          if (!(baseType === type$.legacy_Object))
            t2 = false;
          else
            t2 = true;
        else
          t2 = true;
        if (t2 || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 13;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep, s0,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s0 = $arguments[i + 2]._canonicalRecipe;
        s += sep + t1 + nameSep + s0;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var sep, t1, key, probe, rti,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        t1 = A._Universe__canonicalRecipeJoin(optionalPositional);
        recipe += sep + "[" + t1 + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        t1 = A._Universe__canonicalRecipeJoinNamed(named);
        recipe += sep + "{" + t1 + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 11;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 12;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t2, i, ch, t3, array, head, base, parameters, optionalPositional, named, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = A._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36)
          i = A._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(A._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(A._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              t3 = parser.u;
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              head = t1.pop();
              if (typeof head == "string")
                t1.push(A._Universe__lookupInterfaceRti(t3, head, array));
              else {
                base = A._Parser_toType(t3, parser.e, head);
                switch (base._kind) {
                  case 11:
                    t1.push(A._Universe__lookupGenericFunctionRti(t3, base, array, parser.n));
                    break;
                  default:
                    t1.push(A._Universe__lookupBindingRti(t3, base, array));
                    break;
                }
              }
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, t1);
              break;
            case 42:
              t3 = parser.u;
              t1.push(A._Universe__lookupStarRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 63:
              t3 = parser.u;
              t1.push(A._Universe__lookupQuestionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(A._Universe__lookupFutureOrRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              t3 = parser.u;
              parameters = new A._FunctionParameters();
              optionalPositional = t3.sEA;
              named = t3.sEA;
              head = t1.pop();
              if (typeof head == "number")
                switch (head) {
                  case -1:
                    optionalPositional = t1.pop();
                    break;
                  case -2:
                    named = t1.pop();
                    break;
                  default:
                    t1.push(head);
                    break;
                }
              else
                t1.push(head);
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              parameters._requiredPositional = array;
              parameters._optionalPositional = optionalPositional;
              parameters._named = named;
              t1.push(A._Universe__lookupFunctionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parameters));
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              A._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = A._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number")
        return A._Parser_indexToType(universe, environment, item);
      else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    _isSubtype(universe, s, sEnv, t, tEnv) {
      var t1, sKind, leftTypeVariable, tKind, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!A.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (A.isStrongTopType(s))
        return false;
      if (s._kind !== 1)
        t1 = false;
      else
        t1 = true;
      if (t1)
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      t1 = s === type$.Null || s === type$.JSNull;
      if (t1) {
        if (tKind === 8)
          return A._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t === type$.Null || t === type$.JSNull || tKind === 7 || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 8)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        if (sKind === 6)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return sKind !== 7;
      }
      if (sKind === 6)
        return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 6) {
        t1 = A.Rti__getQuestionFromStar(universe, t);
        return A._isSubtype(universe, s, sEnv, t1, tEnv);
      }
      if (sKind === 8) {
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 7) {
        t1 = A._isSubtype(universe, type$.Null, sEnv, t, tEnv);
        return t1 && A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      }
      if (tKind === 8) {
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 7) {
        t1 = A._isSubtype(universe, s, sEnv, type$.Null, tEnv);
        return t1 || A._isSubtype(universe, s, sEnv, t._primary, tEnv);
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && t === type$.Function)
        return true;
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 12)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return A._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 11) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv) {
      var rule, recipes, $length, supertypeArgs, i, t1, t2,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv);
      }
      t1 = s._rest;
      t2 = t._rest;
      return A._areArgumentsSubtypes(universe, t1, null, sEnv, t2, tEnv);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv) {
      var i, t1, t2,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i) {
        t1 = sArgs[i];
        t2 = tArgs[i];
        if (!A._isSubtype(universe, t1, sEnv, t2, tEnv))
          return false;
      }
      return true;
    },
    isNullable(t) {
      var t1,
        kind = t._kind;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isStrongTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && A.isNullable(t._primary)))
              t1 = kind === 8 && A.isNullable(t._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isTopType(t) {
      var t1;
      if (!A.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isStrongTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    _AsyncRun__initializeScheduleImmediate() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(callback), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      A.Timer__createTimer(B.Duration_0, callback);
    },
    Timer__createTimer(duration, callback) {
      var milliseconds = B.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return A._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    Timer__createPeriodicTimer(duration, callback) {
      var milliseconds = B.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return A._TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new A._TimerImpl(true);
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _TimerImpl$periodic(milliseconds, callback) {
      var t1 = new A._TimerImpl(false);
      t1._TimerImpl$periodic$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter($T) {
      return new A._AsyncAwaitCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait(object, bodyFunction) {
      A._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn(object, completer) {
      completer.complete$1(0, object);
    },
    _asyncRethrow(object, completer) {
      completer.completeError$2(A.unwrapException(object), A.getTraceFromException(object));
    },
    _awaitOnObject(object, bodyFunction) {
      var t1, future,
        thenCallback = new A._awaitOnObject_closure(bodyFunction),
        errorCallback = new A._awaitOnObject_closure0(bodyFunction);
      if (object instanceof A._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (type$.Future_dynamic._is(object))
          object.then$1$2$onError(0, thenCallback, errorCallback, t1);
        else {
          future = new A._Future($.Zone__current, type$._Future_dynamic);
          future._state = 8;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$1(new A._wrapJsFunctionForAsync_closure($protected));
    },
    _IterationMarker_yieldStar(values) {
      return new A._IterationMarker(values, 1);
    },
    _IterationMarker_endOfIteration() {
      return B._IterationMarker_null_2;
    },
    _IterationMarker_uncaughtError(error) {
      return new A._IterationMarker(error, 3);
    },
    _makeSyncStarIterable(body, $T) {
      return new A._SyncStarIterable(body, $T._eval$1("_SyncStarIterable<0>"));
    },
    AsyncError$(error, stackTrace) {
      var t1 = A.checkNotNullable(error, "error", type$.Object);
      return new A.AsyncError(t1, stackTrace == null ? A.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    AsyncError_defaultStackTrace(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return B.C__StringStackTrace;
    },
    Future_Future(computation, $T) {
      var result = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      A.Timer_Timer(B.Duration_0, new A.Future_Future_closure(result, computation));
      return result;
    },
    Future_Future$value(value, $T) {
      var t1, t2;
      if (value == null) {
        $T._as(value);
        t1 = value;
      } else
        t1 = value;
      t2 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t2._asyncComplete$1(t1);
      return t2;
    },
    Future_Future$error(error, stackTrace, $T) {
      var t1;
      A.checkNotNullable(error, "error", type$.Object);
      $.Zone__current !== B.C__RootZone;
      if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t1._asyncCompleteError$2(error, stackTrace);
      return t1;
    },
    Future_Future$delayed(duration, $T) {
      var result,
        t1 = !$T._is(null);
      if (t1)
        throw A.wrapException(A.ArgumentError$value(null, "computation", "The type parameter is not nullable"));
      result = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      A.Timer_Timer(duration, new A.Future_Future$delayed_closure(null, result, $T));
      return result;
    },
    Future_wait(futures, $T) {
      var error, stackTrace, handleError, future, pos, e, st, t1, t2, exception, _box_0 = {}, cleanUp = null,
        eagerError = false,
        _future = new A._Future($.Zone__current, $T._eval$1("_Future<List<0>>"));
      _box_0.values = null;
      _box_0.remaining = 0;
      error = A._Cell$named("error");
      stackTrace = A._Cell$named("stackTrace");
      handleError = new A.Future_wait_handleError(_box_0, cleanUp, eagerError, _future, error, stackTrace);
      try {
        for (t1 = J.get$iterator$ax(futures), t2 = type$.Null; t1.moveNext$0();) {
          future = t1.get$current(t1);
          pos = _box_0.remaining;
          J.then$1$2$onError$x(future, new A.Future_wait_closure(_box_0, pos, _future, cleanUp, eagerError, error, stackTrace, $T), handleError, t2);
          ++_box_0.remaining;
        }
        t1 = _box_0.remaining;
        if (t1 === 0) {
          t1 = _future;
          t1._completeWithValue$1(A._setArrayType([], $T._eval$1("JSArray<0>")));
          return t1;
        }
        _box_0.values = A.List_List$filled(t1, null, false, $T._eval$1("0?"));
      } catch (exception) {
        e = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        if (_box_0.remaining === 0 || eagerError)
          return A.Future_Future$error(e, st, $T._eval$1("List<0>"));
        else {
          error.__late_helper$_value = e;
          stackTrace.__late_helper$_value = st;
        }
      }
      return _future;
    },
    _completeWithErrorCallback(result, error, stackTrace) {
      if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      result._completeError$2(error, stackTrace);
    },
    _Future__chainCoreFuture(source, target) {
      var t1, listeners;
      for (; t1 = source._state, (t1 & 4) !== 0;)
        source = source._resultOrListeners;
      if ((t1 & 24) !== 0) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(source);
        A._Future__propagateToListeners(target, listeners);
      } else {
        listeners = target._resultOrListeners;
        target._state = target._state & 1 | 4;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners(source, listeners) {
      var t2, _box_0, t3, t4, hasError, nextListener, nextListener0, sourceResult, t5, zone, oldZone, result, current, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.Future_dynamic; true;) {
        _box_0 = {};
        t3 = t1._state;
        t4 = (t3 & 16) === 0;
        hasError = !t4;
        if (listeners == null) {
          if (hasError && (t3 & 1) === 0) {
            t1 = t1._resultOrListeners;
            A._rootHandleError(t1.error, t1.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          A._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t3 = _box_1.source;
        sourceResult = t3._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        if (t4) {
          t5 = t1.state;
          t5 = (t5 & 1) !== 0 || (t5 & 15) === 8;
        } else
          t5 = true;
        if (t5) {
          zone = t1.result._zone;
          if (hasError) {
            t3 = t3._zone === zone;
            t3 = !(t3 || t3);
          } else
            t3 = false;
          if (t3) {
            A._rootHandleError(sourceResult.error, sourceResult.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = null;
          t1 = t1.state;
          if ((t1 & 15) === 8)
            new A._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t4) {
            if ((t1 & 1) !== 0)
              new A._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new A._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t2._is(t1)) {
            t3 = _box_0.listener.$ti;
            t3 = t3._eval$1("Future<2>")._is(t1) || !t3._rest[1]._is(t1);
          } else
            t3 = false;
          if (t3) {
            result = _box_0.listener.result;
            if (t1 instanceof A._Future)
              if ((t1._state & 24) !== 0) {
                current = result._resultOrListeners;
                result._resultOrListeners = null;
                listeners = result._reverseListeners$1(current);
                result._state = t1._state & 30 | result._state & 1;
                result._resultOrListeners = t1._resultOrListeners;
                _box_1.source = t1;
                continue;
              } else
                A._Future__chainCoreFuture(t1, result);
            else
              result._chainForeignFuture$1(t1);
            return;
          }
        }
        result = _box_0.listener.result;
        current = result._resultOrListeners;
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t3 = _box_0.listenerValueOrError;
        if (!t1) {
          result._state = 8;
          result._resultOrListeners = t3;
        } else {
          result._state = result._state & 1 | 16;
          result._resultOrListeners = t3;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler(errorHandler, zone) {
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$1(errorHandler);
      if (type$.dynamic_Function_Object._is(errorHandler))
        return errorHandler;
      throw A.wrapException(A.ArgumentError$value(errorHandler, "onError", string$.Error_));
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        A._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback(callback) {
      var newEntry = new A._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        A._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new A._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask(callback) {
      var _null = null,
        currentZone = $.Zone__current;
      if (B.C__RootZone === currentZone) {
        A._rootScheduleMicrotask(_null, _null, B.C__RootZone, callback);
        return;
      }
      A._rootScheduleMicrotask(_null, _null, currentZone, currentZone.bindCallbackGuarded$1(callback));
    },
    StreamIterator_StreamIterator(stream) {
      A.checkNotNullable(stream, "stream", type$.Object);
      return new A._StreamIterator();
    },
    _runGuarded(notificationHandler) {
      var e, s, exception;
      if (notificationHandler == null)
        return;
      try {
        notificationHandler.call$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(e, s);
      }
    },
    _BufferingStreamSubscription__registerDataHandler(zone, handleData) {
      return handleData == null ? A.async___nullDataHandler$closure() : handleData;
    },
    _BufferingStreamSubscription__registerErrorHandler(zone, handleError) {
      if (type$.void_Function_Object_StackTrace._is(handleError))
        return zone.registerBinaryCallback$1(handleError);
      if (type$.void_Function_Object._is(handleError))
        return handleError;
      throw A.wrapException(A.ArgumentError$("handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace.", null));
    },
    _nullDataHandler(value) {
    },
    Timer_Timer(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return A.Timer__createTimer(duration, callback);
      return A.Timer__createTimer(duration, t1.bindCallbackGuarded$1(callback));
    },
    Timer_Timer$periodic(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return A.Timer__createPeriodicTimer(duration, callback);
      return A.Timer__createPeriodicTimer(duration, t1.bindUnaryCallbackGuarded$1$1(callback, type$.Timer));
    },
    _rootHandleError(error, stackTrace) {
      A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary($self, $parent, zone, f, arg) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary($self, $parent, zone, f, arg1, arg2) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask($self, $parent, zone, f) {
      if (B.C__RootZone !== zone)
        f = zone.bindCallbackGuarded$1(f);
      A._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl(t0) {
      this._once = t0;
      this._handle = null;
      this._tick = 0;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _TimerImpl$periodic_closure: function _TimerImpl$periodic_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.milliseconds = t1;
      _.start = t2;
      _.callback = t3;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    _IterationMarker: function _IterationMarker(t0, t1) {
      this.value = t0;
      this.state = t1;
    },
    _SyncStarIterator: function _SyncStarIterator(t0) {
      var _ = this;
      _._body = t0;
      _._suspendedBodies = _._nestedIterator = _._async$_current = null;
    },
    _SyncStarIterable: function _SyncStarIterable(t0, t1) {
      this._outerHelper = t0;
      this.$ti = t1;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    Future_Future_closure: function Future_Future_closure(t0, t1) {
      this.result = t0;
      this.computation = t1;
    },
    Future_Future$delayed_closure: function Future_Future$delayed_closure(t0, t1, t2) {
      this.computation = t0;
      this.result = t1;
      this.T = t2;
    },
    Future_wait_handleError: function Future_wait_handleError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.cleanUp = t1;
      _.eagerError = t2;
      _._future = t3;
      _.error = t4;
      _.stackTrace = t5;
    },
    Future_wait_closure: function Future_wait_closure(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._box_0 = t0;
      _.pos = t1;
      _._future = t2;
      _.cleanUp = t3;
      _.eagerError = t4;
      _.error = t5;
      _.stackTrace = t6;
      _.T = t7;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.$this = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    StreamSubscription: function StreamSubscription() {
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    _StreamController: function _StreamController() {
    },
    _StreamController__subscribe_closure: function _StreamController__subscribe_closure(t0) {
      this.$this = t0;
    },
    _StreamController__recordCancel_complete: function _StreamController__recordCancel_complete(t0) {
      this.$this = t0;
    },
    _AsyncStreamControllerDispatch: function _AsyncStreamControllerDispatch() {
    },
    _AsyncStreamController: function _AsyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _ControllerStream: function _ControllerStream(t0, t1) {
      this._async$_controller = t0;
      this.$ti = t1;
    },
    _ControllerSubscription: function _ControllerSubscription(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._async$_controller = t0;
      _._async$_onData = t1;
      _._onDone = t2;
      _._zone = t3;
      _._state = t4;
      _._pending = _._cancelFuture = null;
      _.$ti = t5;
    },
    _BufferingStreamSubscription: function _BufferingStreamSubscription() {
    },
    _BufferingStreamSubscription__sendDone_sendDone: function _BufferingStreamSubscription__sendDone_sendDone(t0) {
      this.$this = t0;
    },
    _StreamImpl: function _StreamImpl() {
    },
    _DelayedEvent: function _DelayedEvent() {
    },
    _DelayedData: function _DelayedData(t0) {
      this.value = t0;
      this.next = null;
    },
    _DelayedDone: function _DelayedDone() {
    },
    _PendingEvents: function _PendingEvents() {
    },
    _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(t0, t1) {
      this.$this = t0;
      this.dispatch = t1;
    },
    _StreamImplEvents: function _StreamImplEvents() {
      this.lastPendingEvent = this.firstPendingEvent = null;
      this._state = 0;
    },
    _StreamIterator: function _StreamIterator() {
    },
    _Zone: function _Zone() {
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    _RootZone_bindBinaryCallbackGuarded_closure: function _RootZone_bindBinaryCallbackGuarded_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.f = t1;
      _.T1 = t2;
      _.T2 = t3;
    },
    HashMap_HashMap($K, $V) {
      return new A._HashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_HashMap<1,2>"));
    },
    _HashMap__getTableEntry(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__newHashTable() {
      var table = Object.create(null);
      A._HashMap__setTableEntry(table, "<non-identifier-key>", table);
      delete table["<non-identifier-key>"];
      return table;
    },
    LinkedHashMap_LinkedHashMap(hashCode, isValidKey, $K, $V) {
      if (isValidKey == null) {
        if (hashCode == null)
          return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
      } else if (hashCode == null)
        hashCode = A.collection___defaultHashCode$closure();
      return A._LinkedCustomHashMap$(A.collection___defaultEquals$closure(), hashCode, isValidKey, $K, $V);
    },
    LinkedHashMap_LinkedHashMap$_literal(keyValuePairs, $K, $V) {
      return A.fillLiteralMap(keyValuePairs, new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>")));
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    _LinkedCustomHashMap$(_equals, _hashCode, validKey, $K, $V) {
      var t1 = validKey != null ? validKey : new A._LinkedCustomHashMap_closure($K);
      return new A._LinkedCustomHashMap(_equals, _hashCode, t1, $K._eval$1("@<0>")._bind$1($V)._eval$1("_LinkedCustomHashMap<1,2>"));
    },
    HashSet_HashSet($E) {
      return new A._HashSet($E._eval$1("_HashSet<0>"));
    },
    _HashSet__newHashTable() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    LinkedHashSet_LinkedHashSet($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_empty($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_literal(values, $E) {
      return A.fillLiteralSet(values, new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>")));
    },
    _LinkedHashSet__newHashTable() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$(_set, _modifications) {
      var t1 = new A._LinkedHashSetIterator(_set, _modifications);
      t1._collection$_cell = _set._collection$_first;
      return t1;
    },
    _defaultEquals(a, b) {
      return J.$eq$(a, b);
    },
    _defaultHashCode(a) {
      return J.get$hashCode$(a);
    },
    IterableBase_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      $._toStringVisiting.push(iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        $._toStringVisiting.pop();
      }
      t1 = A.StringBuffer__writeAll(leftDelimiter, parts, ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      $._toStringVisiting.push(iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current(it));
        parts.push(next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        ultimateString = parts.pop();
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current(it);
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            parts.push(A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current(it);
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current(it);
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                $length -= parts.pop().length + 2;
                --count;
              }
              parts.push("...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        parts.push(elision);
      parts.push(penultimateString);
      parts.push(ultimateString);
    },
    LinkedHashMap_LinkedHashMap$of(other, $K, $V) {
      var t1 = A.LinkedHashMap_LinkedHashMap(null, null, $K, $V);
      t1.addAll$1(0, other);
      return t1;
    },
    LinkedHashSet_LinkedHashSet$from(elements, $E) {
      var t1,
        result = A.LinkedHashSet_LinkedHashSet($E);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        result.add$1(0, $E._as(t1.get$current(t1)));
      return result;
    },
    LinkedHashSet_LinkedHashSet$of(elements, $E) {
      var t1 = A.LinkedHashSet_LinkedHashSet($E);
      t1.addAll$1(0, elements);
      return t1;
    },
    MapBase_mapToString(m) {
      var result, t1 = {};
      if (A._isToStringVisiting(m))
        return "{...}";
      result = new A.StringBuffer("");
      try {
        $._toStringVisiting.push(m);
        result._contents += "{";
        t1.first = true;
        J.forEach$1$ax(m, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    MapBase__fillMapWithIterables(map, keys, values) {
      var t2,
        keyIterator = new A.MappedIterator(J.get$iterator$ax(keys.__internal$_iterable), keys._f),
        t1 = values._map,
        valueIterator = A.LinkedHashMapKeyIterator$(t1, t1._modifications),
        hasNextKey = keyIterator.moveNext$0(),
        hasNextValue = valueIterator.moveNext$0();
      t1 = A._instanceType(keyIterator)._rest[1];
      while (true) {
        if (!(hasNextKey && hasNextValue))
          break;
        t2 = keyIterator.__internal$_current;
        if (t2 == null)
          t2 = t1._as(t2);
        map.$indexSet(0, t2, valueIterator.__js_helper$_current);
        hasNextKey = keyIterator.moveNext$0();
        hasNextValue = valueIterator.moveNext$0();
      }
      if (hasNextKey || hasNextValue)
        throw A.wrapException(A.ArgumentError$("Iterables do not have same length.", null));
    },
    DoubleLinkedQueue$($E) {
      var t1 = new A._DoubleLinkedQueueSentinel($E._eval$1("_DoubleLinkedQueueSentinel<0>"));
      t1._previousLink = t1;
      t1._nextLink = t1;
      return new A.DoubleLinkedQueue(t1, $E._eval$1("DoubleLinkedQueue<0>"));
    },
    ListQueue$(initialCapacity, $E) {
      return new A.ListQueue(A.List_List$filled(A.ListQueue__calculateCapacity(initialCapacity), null, false, $E._eval$1("0?")), $E._eval$1("ListQueue<0>"));
    },
    ListQueue__calculateCapacity(initialCapacity) {
      if (initialCapacity == null || initialCapacity < 8)
        return 8;
      else if ((initialCapacity & initialCapacity - 1) >>> 0 !== 0)
        return A.ListQueue__nextPowerOf2(initialCapacity);
      return initialCapacity;
    },
    ListQueue__nextPowerOf2(number) {
      var nextNumber;
      number = (number << 1 >>> 0) - 1;
      for (; true; number = nextNumber) {
        nextNumber = (number & number - 1) >>> 0;
        if (nextNumber === 0)
          return number;
      }
    },
    _UnmodifiableSetMixin__throwUnmodifiable() {
      throw A.wrapException(A.UnsupportedError$("Cannot change an unmodifiable set"));
    },
    _HashMap: function _HashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _IdentityHashMap: function _IdentityHashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1) {
      var _ = this;
      _._collection$_map = t0;
      _._collection$_keys = t1;
      _._offset = 0;
      _._collection$_current = null;
    },
    _LinkedCustomHashMap: function _LinkedCustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _._length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t3;
    },
    _LinkedCustomHashMap_closure: function _LinkedCustomHashMap_closure(t0) {
      this.K = t0;
    },
    _HashSet: function _HashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_elements = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashSetIterator: function _HashSetIterator(t0, t1) {
      var _ = this;
      _._set = t0;
      _._collection$_elements = t1;
      _._offset = 0;
      _._collection$_current = null;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._collection$_previous = this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
    },
    IterableBase: function IterableBase() {
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    MapMixin_entries_closure: function MapMixin_entries_closure(t0) {
      this.$this = t0;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView() {
    },
    _DoubleLinkedQueueEntry: function _DoubleLinkedQueueEntry() {
    },
    _DoubleLinkedQueueElement: function _DoubleLinkedQueueElement(t0, t1, t2) {
      var _ = this;
      _._queue = t0;
      _.element = t1;
      _._nextLink = _._previousLink = null;
      _.$ti = t2;
    },
    _DoubleLinkedQueueSentinel: function _DoubleLinkedQueueSentinel(t0) {
      this._nextLink = this._previousLink = null;
      this.$ti = t0;
    },
    DoubleLinkedQueue: function DoubleLinkedQueue(t0, t1) {
      this._sentinel = t0;
      this._elementCount = 0;
      this.$ti = t1;
    },
    _DoubleLinkedQueueIterator: function _DoubleLinkedQueueIterator(t0, t1) {
      this._queue = t0;
      this._nextEntry = t1;
      this._collection$_current = null;
    },
    ListQueue: function ListQueue(t0, t1) {
      var _ = this;
      _._table = t0;
      _._modificationCount = _._tail = _._head = 0;
      _.$ti = t1;
    },
    _ListQueueIterator: function _ListQueueIterator(t0, t1, t2, t3) {
      var _ = this;
      _._queue = t0;
      _._end = t1;
      _._modificationCount = t2;
      _._collection$_position = t3;
      _._collection$_current = null;
    },
    SetMixin: function SetMixin() {
    },
    _SetBase: function _SetBase() {
    },
    _UnmodifiableSetMixin: function _UnmodifiableSetMixin() {
    },
    _UnmodifiableSet: function _UnmodifiableSet(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    __SetBase_Object_SetMixin: function __SetBase_Object_SetMixin() {
    },
    __UnmodifiableSet__SetBase__UnmodifiableSetMixin: function __UnmodifiableSet__SetBase__UnmodifiableSetMixin() {
    },
    _parseJson(source, reviver) {
      var e, exception, t1, parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.FormatException$(String(e), null, null);
        throw A.wrapException(t1);
      }
      t1 = A._convertJsonToDartLazy(parsed);
      return t1;
    },
    _convertJsonToDartLazy(object) {
      var i;
      if (object == null)
        return null;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new A._JsonMap(object, Object.create(null));
      for (i = 0; i < object.length; ++i)
        object[i] = A._convertJsonToDartLazy(object[i]);
      return object;
    },
    Utf8Decoder__convertIntercepted(allowMalformed, codeUnits, start, end) {
      var casted, result;
      if (codeUnits instanceof Uint8Array) {
        casted = codeUnits;
        end = casted.length;
        if (end - start < 15)
          return null;
        result = A.Utf8Decoder__convertInterceptedUint8List(allowMalformed, casted, start, end);
        if (result != null && allowMalformed)
          if (result.indexOf("\ufffd") >= 0)
            return null;
        return result;
      }
      return null;
    },
    Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end) {
      var decoder = allowMalformed ? $.$get$Utf8Decoder__decoderNonfatal() : $.$get$Utf8Decoder__decoder();
      if (decoder == null)
        return null;
      if (0 === start && end === codeUnits.length)
        return A.Utf8Decoder__useTextDecoder(decoder, codeUnits);
      return A.Utf8Decoder__useTextDecoder(decoder, codeUnits.subarray(start, A.RangeError_checkValidRange(start, end, codeUnits.length)));
    },
    Utf8Decoder__useTextDecoder(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
      }
      return null;
    },
    Base64Codec__checkPadding(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      if (B.JSInt_methods.$mod($length, 4) !== 0)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (firstPadding + paddingCount !== $length)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    JsonUnsupportedObjectError$(unsupportedObject, cause, partialResult) {
      return new A.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    _defaultToEncodable(object) {
      return object.toJson$0();
    },
    _JsonStringStringifier$(_sink, _toEncodable) {
      return new A._JsonStringStringifier(_sink, [], A.convert___defaultToEncodable$closure());
    },
    _JsonStringStringifier_stringify(object, toEncodable, indent) {
      var t1,
        output = new A.StringBuffer(""),
        stringifier = A._JsonStringStringifier$(output, toEncodable);
      stringifier.writeObject$1(object);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    LineSplitter_split($async$lines) {
      return A._makeSyncStarIterable(function() {
        var lines = $async$lines;
        var $async$goto = 0, $async$handler = 1, $async$currentError, sliceStart, char, i, char0, end;
        return function $async$LineSplitter_split($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                end = A.RangeError_checkValidRange(0, null, lines.length);
                sliceStart = 0, char = 0, i = 0;
              case 2:
                // for condition
                if (!(i < end)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                char0 = B.JSString_methods._codeUnitAt$1(lines, i);
                if (char0 !== 13) {
                  if (char0 !== 10) {
                    // goto for update
                    $async$goto = 3;
                    break;
                  }
                  if (char === 13) {
                    sliceStart = i + 1;
                    // goto for update
                    $async$goto = 3;
                    break;
                  }
                }
                $async$goto = 5;
                return B.JSString_methods.substring$2(lines, sliceStart, i);
              case 5:
                // after yield
                sliceStart = i + 1;
              case 3:
                // for update
                ++i, char = char0;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                $async$goto = sliceStart < end ? 6 : 7;
                break;
              case 6:
                // then
                $async$goto = 8;
                return B.JSString_methods.substring$2(lines, sliceStart, end);
              case 8:
                // after yield
              case 7:
                // join
                // implicit return
                return A._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return A._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, type$.String);
    },
    _Utf8Decoder_errorDescription(state) {
      switch (state) {
        case 65:
          return "Missing extension byte";
        case 67:
          return "Unexpected extension byte";
        case 69:
          return "Invalid UTF-8 byte";
        case 71:
          return "Overlong encoding";
        case 73:
          return "Out of unicode range";
        case 75:
          return "Encoded surrogate";
        case 77:
          return "Unfinished UTF-8 octet sequence";
        default:
          return "";
      }
    },
    _Utf8Decoder__makeUint8List(codeUnits, start, end) {
      var t1, i, b,
        $length = end - start,
        bytes = new Uint8Array($length);
      for (t1 = J.getInterceptor$asx(codeUnits), i = 0; i < $length; ++i) {
        b = t1.$index(codeUnits, start + i);
        bytes[i] = (b & 4294967040) >>> 0 !== 0 ? 255 : b;
      }
      return bytes;
    },
    _JsonMap: function _JsonMap(t0, t1) {
      this._original = t0;
      this._processed = t1;
      this._data = null;
    },
    _JsonMapKeyIterable: function _JsonMapKeyIterable(t0) {
      this._convert$_parent = t0;
    },
    Utf8Decoder__decoder_closure: function Utf8Decoder__decoder_closure() {
    },
    Utf8Decoder__decoderNonfatal_closure: function Utf8Decoder__decoderNonfatal_closure() {
    },
    Base64Codec: function Base64Codec() {
    },
    Base64Encoder: function Base64Encoder() {
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    Encoding: function Encoding() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCodec: function JsonCodec() {
    },
    JsonEncoder: function JsonEncoder(t0) {
      this._toEncodable = t0;
    },
    JsonDecoder: function JsonDecoder(t0) {
      this._reviver = t0;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = 0;
      this._buffer = t0;
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0) {
      this.allowMalformed = t0;
      this._convert$_state = 16;
      this._charOrIndex = 0;
    },
    Function_apply($function, positionalArguments) {
      return A.Primitives_applyFunction($function, positionalArguments, null);
    },
    int_parse(source, radix) {
      var value = A.Primitives_parseInt(source, radix);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$(source, null, null));
    },
    double_parse(source) {
      var value = A.Primitives_parseDouble(source);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$("Invalid double", source, null));
    },
    Error__objectToString(object) {
      if (object instanceof A.Closure)
        return object.toString$0(0);
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    Error__throw(error, stackTrace) {
      error = A.wrapException(error);
      error.stack = stackTrace.toString$0(0);
      throw error;
      throw A.wrapException("unreachable");
    },
    DateTime$fromMillisecondsSinceEpoch(millisecondsSinceEpoch, isUtc) {
      var t1;
      if (Math.abs(millisecondsSinceEpoch) <= 864e13)
        t1 = false;
      else
        t1 = true;
      if (t1)
        A.throwExpression(A.ArgumentError$("DateTime is outside valid range: " + millisecondsSinceEpoch, null));
      A.checkNotNullable(isUtc, "isUtc", type$.bool);
      return new A.DateTime(millisecondsSinceEpoch, isUtc);
    },
    List_List$filled($length, fill, growable, $E) {
      var i,
        result = growable ? J.JSArray_JSArray$growable($length, $E) : J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from(elements, growable, $E) {
      var t1,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        list.push(t1.get$current(t1));
      if (growable)
        return list;
      return J.JSArray_markFixedList(list);
    },
    List_List$of(elements, growable, $E) {
      var t1;
      if (growable)
        return A.List_List$_of(elements, $E);
      t1 = J.JSArray_markFixedList(A.List_List$_of(elements, $E));
      return t1;
    },
    List_List$_of(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return A._setArrayType(elements.slice(0), $E._eval$1("JSArray<0>"));
      list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        list.push(t1.get$current(t1));
      return list;
    },
    List_List$unmodifiable(elements, $E) {
      return J.JSArray_markUnmodifiableList(A.List_List$from(elements, false, $E));
    },
    String_String$fromCharCodes(charCodes, start, end) {
      var array, len;
      if (Array.isArray(charCodes)) {
        array = charCodes;
        len = array.length;
        end = A.RangeError_checkValidRange(start, end, len);
        return A.Primitives_stringFromCharCodes(start > 0 || end < len ? array.slice(start, end) : array);
      }
      if (type$.NativeUint8List._is(charCodes))
        return A.Primitives_stringFromNativeUint8List(charCodes, start, A.RangeError_checkValidRange(start, end, charCodes.length));
      return A.String__stringFromIterable(charCodes, start, end);
    },
    String__stringFromIterable(charCodes, start, end) {
      var t1, it, i, list, _null = null;
      if (start < 0)
        throw A.wrapException(A.RangeError$range(start, 0, J.get$length$asx(charCodes), _null, _null));
      t1 = end == null;
      if (!t1 && end < start)
        throw A.wrapException(A.RangeError$range(end, start, J.get$length$asx(charCodes), _null, _null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw A.wrapException(A.RangeError$range(start, 0, i, _null, _null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current(it));
      else
        for (i = start; i < end; ++i) {
          if (!it.moveNext$0())
            throw A.wrapException(A.RangeError$range(end, start, i, _null, _null));
          list.push(it.get$current(it));
        }
      return A.Primitives_stringFromCharCodes(list);
    },
    RegExp_RegExp(source, caseSensitive) {
      return new A.JSSyntaxRegExp(source, A.JSSyntaxRegExp_makeNative(source, false, caseSensitive, false, false, false));
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += A.S(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      } else {
        string += A.S(iterator.get$current(iterator));
        for (; iterator.moveNext$0();)
          string = string + separator + A.S(iterator.get$current(iterator));
      }
      return string;
    },
    NoSuchMethodError$(receiver, memberName, positionalArguments, namedArguments) {
      return new A.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments);
    },
    _Uri__uriEncode(canonicalTable, text, encoding, spaceToPlus) {
      var t1, bytes, i, t2, byte,
        _s16_ = "0123456789ABCDEF";
      if (encoding === B.C_Utf8Codec) {
        t1 = $.$get$_Uri__needsNoEncoding()._nativeRegExp;
        t1 = t1.test(text);
      } else
        t1 = false;
      if (t1)
        return text;
      bytes = encoding.get$encoder().convert$1(text);
      for (t1 = bytes.length, i = 0, t2 = ""; i < t1; ++i) {
        byte = bytes[i];
        if (byte < 128 && (canonicalTable[byte >>> 4] & 1 << (byte & 15)) !== 0)
          t2 += A.Primitives_stringFromCharCode(byte);
        else
          t2 = spaceToPlus && byte === 32 ? t2 + "+" : t2 + "%" + _s16_[byte >>> 4 & 15] + _s16_[byte & 15];
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    StackTrace_current() {
      var stackTrace, exception;
      if ($.$get$_hasErrorStackProperty())
        return A.getTraceFromException(new Error());
      try {
        throw A.wrapException("");
      } catch (exception) {
        stackTrace = A.getTraceFromException(exception);
        return stackTrace;
      }
    },
    DateTime$_withValue(_value, isUtc) {
      var t1;
      if (Math.abs(_value) <= 864e13)
        t1 = false;
      else
        t1 = true;
      if (t1)
        A.throwExpression(A.ArgumentError$("DateTime is outside valid range: " + _value, null));
      A.checkNotNullable(isUtc, "isUtc", type$.bool);
      return new A.DateTime(_value, isUtc);
    },
    DateTime__fourDigits(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Duration$(microseconds, milliseconds) {
      return new A.Duration(microseconds + 1000 * milliseconds);
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Error__objectToString(object);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message, $name) {
      return new A.ArgumentError(false, null, $name, message);
    },
    ArgumentError$value(value, $name, message) {
      return new A.ArgumentError(true, value, $name, message);
    },
    ArgumentError_checkNotNull(argument, $name) {
      return argument;
    },
    RangeError$value(value, $name) {
      return new A.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValueInInterval(value, minValue, maxValue, $name) {
      if (value < minValue || value > maxValue)
        throw A.wrapException(A.RangeError$range(value, minValue, maxValue, $name, null));
      return value;
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative(value, $name) {
      if (value < 0)
        throw A.wrapException(A.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$(invalidValue, indexable, $name, message, $length) {
      var t1 = $length == null ? J.get$length$asx(indexable) : $length;
      return new A.IndexError(t1, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    StateError$(message) {
      return new A.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception(message) {
      return new A._Exception(message);
    },
    FormatException$(message, source, offset) {
      return new A.FormatException(message, source, offset);
    },
    Object_hash(object1, object2, object3, object4, object5, object6) {
      var t1, t2;
      if (B.C_SentinelValue === object3)
        return A.SystemHash_hash2(J.get$hashCode$(object1), J.get$hashCode$(object2), $.$get$_hashSeed());
      if (B.C_SentinelValue === object4) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3));
      }
      if (B.C_SentinelValue === object5)
        return A.SystemHash_hash4(J.get$hashCode$(object1), J.get$hashCode$(object2), J.get$hashCode$(object3), J.get$hashCode$(object4), $.$get$_hashSeed());
      if (B.C_SentinelValue === object6) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        object4 = J.get$hashCode$(object4);
        object5 = object5.get$hashCode(object5);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4), object5));
      }
      t1 = J.get$hashCode$(object1);
      object2 = J.get$hashCode$(object2);
      object3 = J.get$hashCode$(object3);
      object4 = J.get$hashCode$(object4);
      object5 = object5.get$hashCode(object5);
      object6 = object6.get$hashCode(object6);
      t2 = $.$get$_hashSeed();
      return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(t2, t1), object2), object3), object4), object5), object6));
    },
    Object_hashAll(objects) {
      var t1,
        hash = $.$get$_hashSeed();
      for (t1 = J.get$iterator$ax(objects); t1.moveNext$0();)
        hash = A.SystemHash_combine(hash, J.get$hashCode$(t1.get$current(t1)));
      return A.SystemHash_finish(hash);
    },
    print(object) {
      A.printString(A.S(object));
    },
    Stopwatch$() {
      $.$get$Stopwatch__frequency();
      return new A.Stopwatch();
    },
    _combineSurrogatePair(start, end) {
      return 65536 + ((start & 1023) << 10) + (end & 1023);
    },
    Uri_parse(uri) {
      var delta, indices, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, t1, t2, schemeAuth, queryStart0, pathStart0, userInfoStart, userInfo, host, portNumber, port, path, query, _null = null,
        end = uri.length;
      if (end >= 5) {
        delta = ((B.JSString_methods._codeUnitAt$1(uri, 4) ^ 58) * 3 | B.JSString_methods._codeUnitAt$1(uri, 0) ^ 100 | B.JSString_methods._codeUnitAt$1(uri, 1) ^ 97 | B.JSString_methods._codeUnitAt$1(uri, 2) ^ 116 | B.JSString_methods._codeUnitAt$1(uri, 3) ^ 97) >>> 0;
        if (delta === 0)
          return A.UriData__parse(end < end ? B.JSString_methods.substring$2(uri, 0, end) : uri, 5, _null).get$uri();
        else if (delta === 32)
          return A.UriData__parse(B.JSString_methods.substring$2(uri, 5, end), 0, _null).get$uri();
      }
      indices = A.List_List$filled(8, 0, false, type$.int);
      indices[0] = 0;
      indices[1] = -1;
      indices[2] = -1;
      indices[7] = -1;
      indices[3] = 0;
      indices[4] = 0;
      indices[5] = end;
      indices[6] = end;
      if (A._scan(uri, 0, end, 0, indices) >= 14)
        indices[7] = end;
      schemeEnd = indices[1];
      if (schemeEnd >= 0)
        if (A._scan(uri, 0, schemeEnd, 20, indices) === 20)
          indices[7] = schemeEnd;
      hostStart = indices[2] + 1;
      portStart = indices[3];
      pathStart = indices[4];
      queryStart = indices[5];
      fragmentStart = indices[6];
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (portStart < hostStart)
        portStart = pathStart;
      isSimple = indices[7] < 0;
      if (isSimple)
        if (hostStart > schemeEnd + 3) {
          scheme = _null;
          isSimple = false;
        } else {
          t1 = portStart > 0;
          if (t1 && portStart + 1 === pathStart) {
            scheme = _null;
            isSimple = false;
          } else {
            if (!(queryStart < end && queryStart === pathStart + 2 && B.JSString_methods.startsWith$2(uri, "..", pathStart)))
              t2 = queryStart > pathStart + 2 && B.JSString_methods.startsWith$2(uri, "/..", queryStart - 3);
            else
              t2 = true;
            if (t2) {
              scheme = _null;
              isSimple = false;
            } else {
              if (schemeEnd === 4)
                if (B.JSString_methods.startsWith$2(uri, "file", 0)) {
                  if (hostStart <= 0) {
                    if (!B.JSString_methods.startsWith$2(uri, "/", pathStart)) {
                      schemeAuth = "file:///";
                      delta = 3;
                    } else {
                      schemeAuth = "file://";
                      delta = 2;
                    }
                    uri = schemeAuth + B.JSString_methods.substring$2(uri, pathStart, end);
                    schemeEnd -= 0;
                    t1 = delta - 0;
                    queryStart += t1;
                    fragmentStart += t1;
                    end = uri.length;
                    hostStart = 7;
                    portStart = 7;
                    pathStart = 7;
                  } else if (pathStart === queryStart) {
                    ++fragmentStart;
                    queryStart0 = queryStart + 1;
                    uri = B.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                    ++end;
                    queryStart = queryStart0;
                  }
                  scheme = "file";
                } else if (B.JSString_methods.startsWith$2(uri, "http", 0)) {
                  if (t1 && portStart + 3 === pathStart && B.JSString_methods.startsWith$2(uri, "80", portStart + 1)) {
                    fragmentStart -= 3;
                    pathStart0 = pathStart - 3;
                    queryStart -= 3;
                    uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                    end -= 3;
                    pathStart = pathStart0;
                  }
                  scheme = "http";
                } else
                  scheme = _null;
              else if (schemeEnd === 5 && B.JSString_methods.startsWith$2(uri, "https", 0)) {
                if (t1 && portStart + 4 === pathStart && B.JSString_methods.startsWith$2(uri, "443", portStart + 1)) {
                  fragmentStart -= 4;
                  pathStart0 = pathStart - 4;
                  queryStart -= 4;
                  uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                  end -= 3;
                  pathStart = pathStart0;
                }
                scheme = "https";
              } else
                scheme = _null;
              isSimple = true;
            }
          }
        }
      else
        scheme = _null;
      if (isSimple) {
        if (end < uri.length) {
          uri = B.JSString_methods.substring$2(uri, 0, end);
          schemeEnd -= 0;
          hostStart -= 0;
          portStart -= 0;
          pathStart -= 0;
          queryStart -= 0;
          fragmentStart -= 0;
        }
        return new A._SimpleUri(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      }
      if (scheme == null)
        if (schemeEnd > 0)
          scheme = A._Uri__makeScheme(uri, 0, schemeEnd);
        else {
          if (schemeEnd === 0)
            A._Uri__fail(uri, 0, "Invalid empty scheme");
          scheme = "";
        }
      if (hostStart > 0) {
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? A._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = A._Uri__makeHost(uri, hostStart, portStart, false);
        t1 = portStart + 1;
        if (t1 < pathStart) {
          portNumber = A.Primitives_parseInt(B.JSString_methods.substring$2(uri, t1, pathStart), _null);
          port = A._Uri__makePort(portNumber == null ? A.throwExpression(A.FormatException$("Invalid port", uri, t1)) : portNumber, scheme);
        } else
          port = _null;
      } else {
        port = _null;
        host = port;
        userInfo = "";
      }
      path = A._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      query = queryStart < fragmentStart ? A._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragmentStart < end ? A._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    Uri_decodeComponent(encodedComponent) {
      return A._Uri__uriDecode(encodedComponent, 0, encodedComponent.length, B.C_Utf8Codec, false);
    },
    Uri__parseIPv4Address(host, start, end) {
      var i, partStart, partIndex, char, part, partIndex0,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _s37_ = "each part must be in the range 0..255",
        error = new A.Uri__parseIPv4Address_error(host),
        result = new Uint8Array(4);
      for (i = start, partStart = i, partIndex = 0; i < end; ++i) {
        char = B.JSString_methods.codeUnitAt$1(host, i);
        if (char !== 46) {
          if ((char ^ 48) > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = A.int_parse(B.JSString_methods.substring$2(host, partStart, i), null);
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = A.int_parse(B.JSString_methods.substring$2(host, partStart, end), null);
      if (part > 255)
        error.call$2(_s37_, partStart);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address(host, start, end) {
      var parts, i, partStart, wildcardSeen, seenDot, char, atEnd, t1, last, bytes, wildCardLength, index, value, j, _null = null,
        error = new A.Uri_parseIPv6Address_error(host),
        parseHex = new A.Uri_parseIPv6Address_parseHex(error, host);
      if (host.length < 2)
        error.call$2("address is too short", _null);
      parts = A._setArrayType([], type$.JSArray_int);
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; i < end; ++i) {
        char = B.JSString_methods.codeUnitAt$1(host, i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (B.JSString_methods.codeUnitAt$1(host, i) !== 58)
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            parts.push(-1);
            wildcardSeen = true;
          } else
            parts.push(parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        error.call$2("too few parts", _null);
      atEnd = partStart === end;
      t1 = B.JSArray_methods.get$last(parts);
      if (atEnd && t1 !== -1)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          parts.push(parseHex.call$2(partStart, end));
        else {
          last = A.Uri__parseIPv4Address(host, partStart, end);
          parts.push((last[0] << 8 | last[1]) >>> 0);
          parts.push((last[2] << 8 | last[3]) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$2("an address with a wildcard must have less than 7 parts", _null);
      } else if (parts.length !== 8)
        error.call$2("an address without a wildcard must contain exactly 8 parts", _null);
      bytes = new Uint8Array(16);
      for (t1 = parts.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            bytes[index] = 0;
            bytes[index + 1] = 0;
            index += 2;
          }
        else {
          bytes[index] = B.JSInt_methods._shrOtherPositive$1(value, 8);
          bytes[index + 1] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri$_internal(scheme, _userInfo, _host, _port, path, _query, _fragment) {
      return new A._Uri(scheme, _userInfo, _host, _port, path, _query, _fragment);
    },
    _Uri__defaultPort(scheme) {
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__fail(uri, index, message) {
      throw A.wrapException(A.FormatException$(message, uri, index));
    },
    _Uri__makePort(port, scheme) {
      if (port != null && port === A._Uri__defaultPort(scheme))
        return null;
      return port;
    },
    _Uri__makeHost(host, start, end, strictIPv6) {
      var t1, t2, index, zoneIDstart, zoneID, i;
      if (host == null)
        return null;
      if (start === end)
        return "";
      if (B.JSString_methods.codeUnitAt$1(host, start) === 91) {
        t1 = end - 1;
        if (B.JSString_methods.codeUnitAt$1(host, t1) !== 93)
          A._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        t2 = start + 1;
        index = A._Uri__checkZoneID(host, t2, t1);
        if (index < t1) {
          zoneIDstart = index + 1;
          zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, t1, "%25");
        } else
          zoneID = "";
        A.Uri_parseIPv6Address(host, t2, index);
        return B.JSString_methods.substring$2(host, start, index).toLowerCase() + zoneID + "]";
      }
      for (i = start; i < end; ++i)
        if (B.JSString_methods.codeUnitAt$1(host, i) === 58) {
          index = B.JSString_methods.indexOf$2(host, "%", start);
          index = index >= start && index < end ? index : end;
          if (index < end) {
            zoneIDstart = index + 1;
            zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, end, "%25");
          } else
            zoneID = "";
          A.Uri_parseIPv6Address(host, start, index);
          return "[" + B.JSString_methods.substring$2(host, start, index) + zoneID + "]";
        }
      return A._Uri__normalizeRegName(host, start, end);
    },
    _Uri__checkZoneID(host, start, end) {
      var index = B.JSString_methods.indexOf$2(host, "%", start);
      return index >= start && index < end ? index : end;
    },
    _Uri__normalizeZoneID(host, start, end, prefix) {
      var index, sectionStart, isNormalized, char, replacement, t1, t2, tail, sourceLength, slice,
        buffer = prefix !== "" ? new A.StringBuffer(prefix) : null;
      for (index = start, sectionStart = index, isNormalized = true; index < end;) {
        char = B.JSString_methods.codeUnitAt$1(host, index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          t2 = buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
          if (t1)
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%")
            A._Uri__fail(host, index, "ZoneID should not contain % anymore");
          buffer._contents = t2 + replacement;
          index += 3;
          sectionStart = index;
          isNormalized = true;
        } else if (char < 127 && (B.List_nxB[char >>> 4] & 1 << (char & 15)) !== 0) {
          if (isNormalized && 65 <= char && 90 >= char) {
            if (buffer == null)
              buffer = new A.StringBuffer("");
            if (sectionStart < index) {
              buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
              sectionStart = index;
            }
            isNormalized = false;
          }
          ++index;
        } else {
          if ((char & 64512) === 55296 && index + 1 < end) {
            tail = B.JSString_methods.codeUnitAt$1(host, index + 1);
            if ((tail & 64512) === 56320) {
              char = (char & 1023) << 10 | tail & 1023 | 65536;
              sourceLength = 2;
            } else
              sourceLength = 1;
          } else
            sourceLength = 1;
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t1 = buffer;
          } else
            t1 = buffer;
          t1._contents += slice;
          t1._contents += A._Uri__escapeChar(char);
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end)
        buffer._contents += B.JSString_methods.substring$2(host, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__normalizeRegName(host, start, end) {
      var index, sectionStart, buffer, isNormalized, char, replacement, t1, slice, t2, sourceLength, tail;
      for (index = start, sectionStart = index, buffer = null, isNormalized = true; index < end;) {
        char = B.JSString_methods.codeUnitAt$1(host, index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          t2 = buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
          if (t1) {
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
            sourceLength = 3;
          } else if (replacement === "%") {
            replacement = "%25";
            sourceLength = 1;
          } else
            sourceLength = 3;
          buffer._contents = t2 + replacement;
          index += sourceLength;
          sectionStart = index;
          isNormalized = true;
        } else if (char < 127 && (B.List_qNA[char >>> 4] & 1 << (char & 15)) !== 0) {
          if (isNormalized && 65 <= char && 90 >= char) {
            if (buffer == null)
              buffer = new A.StringBuffer("");
            if (sectionStart < index) {
              buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
              sectionStart = index;
            }
            isNormalized = false;
          }
          ++index;
        } else if (char <= 93 && (B.List_2Vk[char >>> 4] & 1 << (char & 15)) !== 0)
          A._Uri__fail(host, index, "Invalid character");
        else {
          if ((char & 64512) === 55296 && index + 1 < end) {
            tail = B.JSString_methods.codeUnitAt$1(host, index + 1);
            if ((tail & 64512) === 56320) {
              char = (char & 1023) << 10 | tail & 1023 | 65536;
              sourceLength = 2;
            } else
              sourceLength = 1;
          } else
            sourceLength = 1;
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (!isNormalized)
            slice = slice.toLowerCase();
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t1 = buffer;
          } else
            t1 = buffer;
          t1._contents += slice;
          t1._contents += A._Uri__escapeChar(char);
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = B.JSString_methods.substring$2(host, sectionStart, end);
        buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeScheme(scheme, start, end) {
      var i, containsUpperCase, codeUnit;
      if (start === end)
        return "";
      if (!A._Uri__isAlphabeticCharacter(B.JSString_methods._codeUnitAt$1(scheme, start)))
        A._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      for (i = start, containsUpperCase = false; i < end; ++i) {
        codeUnit = B.JSString_methods._codeUnitAt$1(scheme, i);
        if (!(codeUnit < 128 && (B.List_JYB[codeUnit >>> 4] & 1 << (codeUnit & 15)) !== 0))
          A._Uri__fail(scheme, i, "Illegal scheme character");
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
      }
      scheme = B.JSString_methods.substring$2(scheme, start, end);
      return A._Uri__canonicalizeScheme(containsUpperCase ? scheme.toLowerCase() : scheme);
    },
    _Uri__canonicalizeScheme(scheme) {
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo(userInfo, start, end) {
      if (userInfo == null)
        return "";
      return A._Uri__normalizeOrSubstring(userInfo, start, end, B.List_gRj, false);
    },
    _Uri__makePath(path, start, end, pathSegments, scheme, hasAuthority) {
      var result,
        isFile = scheme === "file",
        ensureLeadingSlash = isFile || hasAuthority;
      if (path == null)
        return isFile ? "/" : "";
      else
        result = A._Uri__normalizeOrSubstring(path, start, end, B.List_qg4, true);
      if (result.length === 0) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !B.JSString_methods.startsWith$1(result, "/"))
        result = "/" + result;
      return A._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath(path, scheme, hasAuthority) {
      var t1 = scheme.length === 0;
      if (t1 && !hasAuthority && !B.JSString_methods.startsWith$1(path, "/"))
        return A._Uri__normalizeRelativePath(path, !t1 || hasAuthority);
      return A._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery(query, start, end, queryParameters) {
      var result, t1 = {};
      if (query != null) {
        if (queryParameters != null)
          throw A.wrapException(A.ArgumentError$("Both query and queryParameters specified", null));
        return A._Uri__normalizeOrSubstring(query, start, end, B.List_CVk, true);
      }
      if (queryParameters == null)
        return null;
      result = new A.StringBuffer("");
      t1.separator = "";
      queryParameters.forEach$1(0, new A._Uri__makeQuery_closure(new A._Uri__makeQuery_writeParameter(t1, result)));
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeFragment(fragment, start, end) {
      if (fragment == null)
        return null;
      return A._Uri__normalizeOrSubstring(fragment, start, end, B.List_CVk, true);
    },
    _Uri__normalizeEscape(source, index, lowerCase) {
      var firstDigit, secondDigit, firstDigitValue, secondDigitValue, value,
        t1 = index + 2;
      if (t1 >= source.length)
        return "%";
      firstDigit = B.JSString_methods.codeUnitAt$1(source, index + 1);
      secondDigit = B.JSString_methods.codeUnitAt$1(source, t1);
      firstDigitValue = A.hexDigitValue(firstDigit);
      secondDigitValue = A.hexDigitValue(secondDigit);
      if (firstDigitValue < 0 || secondDigitValue < 0)
        return "%";
      value = firstDigitValue * 16 + secondDigitValue;
      if (value < 127 && (B.List_nxB[B.JSInt_methods._shrOtherPositive$1(value, 4)] & 1 << (value & 15)) !== 0)
        return A.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (firstDigit >= 97 || secondDigit >= 97)
        return B.JSString_methods.substring$2(source, index, index + 3).toUpperCase();
      return null;
    },
    _Uri__escapeChar(char) {
      var codeUnits, flag, encodedBytes, index, byte,
        _s16_ = "0123456789ABCDEF";
      if (char < 128) {
        codeUnits = new Uint8Array(3);
        codeUnits[0] = 37;
        codeUnits[1] = B.JSString_methods._codeUnitAt$1(_s16_, char >>> 4);
        codeUnits[2] = B.JSString_methods._codeUnitAt$1(_s16_, char & 15);
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        codeUnits = new Uint8Array(3 * encodedBytes);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = B.JSInt_methods._shrReceiverPositive$1(char, 6 * encodedBytes) & 63 | flag;
          codeUnits[index] = 37;
          codeUnits[index + 1] = B.JSString_methods._codeUnitAt$1(_s16_, byte >>> 4);
          codeUnits[index + 2] = B.JSString_methods._codeUnitAt$1(_s16_, byte & 15);
          index += 3;
        }
      }
      return A.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring(component, start, end, charTable, escapeDelimiters) {
      var t1 = A._Uri__normalize(component, start, end, charTable, escapeDelimiters);
      return t1 == null ? B.JSString_methods.substring$2(component, start, end) : t1;
    },
    _Uri__normalize(component, start, end, charTable, escapeDelimiters) {
      var t1, index, sectionStart, buffer, char, replacement, sourceLength, t2, tail, t3, _null = null;
      for (t1 = !escapeDelimiters, index = start, sectionStart = index, buffer = _null; index < end;) {
        char = B.JSString_methods.codeUnitAt$1(component, index);
        if (char < 127 && (charTable[char >>> 4] & 1 << (char & 15)) !== 0)
          ++index;
        else {
          if (char === 37) {
            replacement = A._Uri__normalizeEscape(component, index, false);
            if (replacement == null) {
              index += 3;
              continue;
            }
            if ("%" === replacement) {
              replacement = "%25";
              sourceLength = 1;
            } else
              sourceLength = 3;
          } else if (t1 && char <= 93 && (B.List_2Vk[char >>> 4] & 1 << (char & 15)) !== 0) {
            A._Uri__fail(component, index, "Invalid character");
            sourceLength = _null;
            replacement = sourceLength;
          } else {
            if ((char & 64512) === 55296) {
              t2 = index + 1;
              if (t2 < end) {
                tail = B.JSString_methods.codeUnitAt$1(component, t2);
                if ((tail & 64512) === 56320) {
                  char = (char & 1023) << 10 | tail & 1023 | 65536;
                  sourceLength = 2;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
            } else
              sourceLength = 1;
            replacement = A._Uri__escapeChar(char);
          }
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t2 = buffer;
          } else
            t2 = buffer;
          t3 = t2._contents += B.JSString_methods.substring$2(component, sectionStart, index);
          t2._contents = t3 + A.S(replacement);
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return _null;
      if (sectionStart < end)
        buffer._contents += B.JSString_methods.substring$2(component, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__mayContainDotSegments(path) {
      if (B.JSString_methods.startsWith$1(path, "."))
        return true;
      return B.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments(path) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!A._Uri__mayContainDotSegments(path))
        return path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (J.$eq$(segment, "..")) {
          if (output.length !== 0) {
            output.pop();
            if (output.length === 0)
              output.push("");
          }
          appendSlash = true;
        } else if ("." === segment)
          appendSlash = true;
        else {
          output.push(segment);
          appendSlash = false;
        }
      }
      if (appendSlash)
        output.push("");
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath(path, allowScheme) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!A._Uri__mayContainDotSegments(path))
        return !allowScheme ? A._Uri__escapeScheme(path) : path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (".." === segment)
          if (output.length !== 0 && B.JSArray_methods.get$last(output) !== "..") {
            output.pop();
            appendSlash = true;
          } else {
            output.push("..");
            appendSlash = false;
          }
        else if ("." === segment)
          appendSlash = true;
        else {
          output.push(segment);
          appendSlash = false;
        }
      }
      t1 = output.length;
      if (t1 !== 0)
        t1 = t1 === 1 && output[0].length === 0;
      else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || B.JSArray_methods.get$last(output) === "..")
        output.push("");
      if (!allowScheme)
        output[0] = A._Uri__escapeScheme(output[0]);
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme(path) {
      var i, char,
        t1 = path.length;
      if (t1 >= 2 && A._Uri__isAlphabeticCharacter(B.JSString_methods._codeUnitAt$1(path, 0)))
        for (i = 1; i < t1; ++i) {
          char = B.JSString_methods._codeUnitAt$1(path, i);
          if (char === 58)
            return B.JSString_methods.substring$2(path, 0, i) + "%3A" + B.JSString_methods.substring$1(path, i + 1);
          if (char > 127 || (B.List_JYB[char >>> 4] & 1 << (char & 15)) === 0)
            break;
        }
      return path;
    },
    _Uri__hexCharPairToByte(s, pos) {
      var byte, i, charCode;
      for (byte = 0, i = 0; i < 2; ++i) {
        charCode = B.JSString_methods._codeUnitAt$1(s, pos + i);
        if (48 <= charCode && charCode <= 57)
          byte = byte * 16 + charCode - 48;
        else {
          charCode |= 32;
          if (97 <= charCode && charCode <= 102)
            byte = byte * 16 + charCode - 87;
          else
            throw A.wrapException(A.ArgumentError$("Invalid URL encoding", null));
        }
      }
      return byte;
    },
    _Uri__uriDecode(text, start, end, encoding, plusToSpace) {
      var simple, codeUnit, t1, bytes,
        i = start;
      while (true) {
        if (!(i < end)) {
          simple = true;
          break;
        }
        codeUnit = B.JSString_methods._codeUnitAt$1(text, i);
        if (codeUnit <= 127)
          if (codeUnit !== 37)
            t1 = false;
          else
            t1 = true;
        else
          t1 = true;
        if (t1) {
          simple = false;
          break;
        }
        ++i;
      }
      if (simple) {
        if (B.C_Utf8Codec !== encoding)
          t1 = false;
        else
          t1 = true;
        if (t1)
          return B.JSString_methods.substring$2(text, start, end);
        else
          bytes = new A.CodeUnits(B.JSString_methods.substring$2(text, start, end));
      } else {
        bytes = A._setArrayType([], type$.JSArray_int);
        for (t1 = text.length, i = start; i < end; ++i) {
          codeUnit = B.JSString_methods._codeUnitAt$1(text, i);
          if (codeUnit > 127)
            throw A.wrapException(A.ArgumentError$("Illegal percent encoding in URI", null));
          if (codeUnit === 37) {
            if (i + 3 > t1)
              throw A.wrapException(A.ArgumentError$("Truncated URI", null));
            bytes.push(A._Uri__hexCharPairToByte(text, i + 1));
            i += 2;
          } else
            bytes.push(codeUnit);
        }
      }
      return encoding.decode$1(0, bytes);
    },
    _Uri__isAlphabeticCharacter(codeUnit) {
      var lowerCase = codeUnit | 32;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    UriData__parse(text, start, sourceUri) {
      var t1, i, slashIndex, char, equalsIndex, lastSeparator, t2, data,
        _s17_ = "Invalid MIME type",
        indices = A._setArrayType([start - 1], type$.JSArray_int);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = B.JSString_methods._codeUnitAt$1(text, i);
        if (char === 44 || char === 59)
          break;
        if (char === 47) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw A.wrapException(A.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw A.wrapException(A.FormatException$(_s17_, text, i));
      for (; char !== 44;) {
        indices.push(i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          char = B.JSString_methods._codeUnitAt$1(text, i);
          if (char === 61) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (char === 59 || char === 44)
            break;
        }
        if (equalsIndex >= 0)
          indices.push(equalsIndex);
        else {
          lastSeparator = B.JSArray_methods.get$last(indices);
          if (char !== 44 || i !== lastSeparator + 7 || !B.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1))
            throw A.wrapException(A.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      indices.push(i);
      t2 = i + 1;
      if ((indices.length & 1) === 1)
        text = B.C_Base64Codec.normalize$3(0, text, t2, t1);
      else {
        data = A._Uri__normalize(text, t2, t1, B.List_CVk, true);
        if (data != null)
          text = B.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return new A.UriData(text, indices, sourceUri);
    },
    _createTables() {
      var _i, t1, t2, t3, b,
        _s77_ = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=",
        _s1_ = ".", _s1_0 = ":", _s1_1 = "/", _s1_2 = "?", _s1_3 = "#",
        tables = J.JSArray_JSArray$allocateGrowable(22, type$.Uint8List);
      for (_i = 0; _i < 22; ++_i)
        tables[_i] = new Uint8Array(96);
      t1 = new A._createTables_build(tables);
      t2 = new A._createTables_setChars();
      t3 = new A._createTables_setRange();
      b = t1.call$2(0, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 14);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 3);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(14, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 15);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(15, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, "%", 225);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(1, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(2, 235);
      t2.call$3(b, _s77_, 139);
      t2.call$3(b, _s1_1, 131);
      t2.call$3(b, _s1_, 146);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(3, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 68);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(4, 229);
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "[", 232);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(5, 229);
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(6, 231);
      t3.call$3(b, "19", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(7, 231);
      t3.call$3(b, "09", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      t2.call$3(t1.call$2(8, 8), "]", 5);
      b = t1.call$2(9, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 16);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(16, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 17);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(17, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(10, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(18, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 19);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(19, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(11, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(12, 236);
      t2.call$3(b, _s77_, 12);
      t2.call$3(b, _s1_2, 12);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(13, 237);
      t2.call$3(b, _s77_, 13);
      t2.call$3(b, _s1_2, 13);
      t3.call$3(t1.call$2(20, 245), "az", 21);
      b = t1.call$2(21, 245);
      t3.call$3(b, "az", 21);
      t3.call$3(b, "09", 21);
      t2.call$3(b, "+-.", 21);
      return tables;
    },
    _scan(uri, start, end, state, indices) {
      var i, table, char, transition,
        tables = $.$get$_scannerTables();
      for (i = start; i < end; ++i) {
        table = tables[state];
        char = B.JSString_methods._codeUnitAt$1(uri, i) ^ 96;
        transition = table[char > 95 ? 31 : char];
        state = transition & 31;
        indices[transition >>> 5] = i;
      }
      return state;
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
      this._box_0 = t0;
      this.sb = t1;
    },
    Comparable: function Comparable() {
    },
    DateTime: function DateTime(t0, t1) {
      this._core$_value = t0;
      this.isUtc = t1;
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    _Enum: function _Enum() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3) {
      var _ = this;
      _._core$_receiver = t0;
      _._memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    Iterable: function Iterable() {
    },
    Iterator: function Iterator() {
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    Stopwatch: function Stopwatch() {
      this._stop = this._start = 0;
    },
    RuneIterator: function RuneIterator(t0) {
      var _ = this;
      _.string = t0;
      _._nextPosition = _._core$_position = 0;
      _._currentCodePoint = -1;
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1) {
      this.error = t0;
      this.host = t1;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode = _.___Uri_pathSegments = _.___Uri__text = $;
    },
    _Uri__makeQuery_writeParameter: function _Uri__makeQuery_writeParameter(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    _Uri__makeQuery_closure: function _Uri__makeQuery_closure(t0) {
      this.writeParameter = t0;
    },
    UriData: function UriData(t0, t1, t2) {
      this._text = t0;
      this._separatorIndices = t1;
      this._uriCache = t2;
    },
    _createTables_build: function _createTables_build(t0) {
      this.tables = t0;
    },
    _createTables_setChars: function _createTables_setChars() {
    },
    _createTables_setRange: function _createTables_setRange() {
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode = _.___Uri_pathSegments = _.___Uri__text = $;
    },
    _FakeUserTag__FakeUserTag(label) {
      var t1,
        existingTag = $._FakeUserTag__instances.$index(0, label);
      if (existingTag != null)
        return existingTag;
      if ($._FakeUserTag__instances._length === 64)
        throw A.wrapException(A.UnsupportedError$("UserTag instance limit (64) reached."));
      t1 = new A._FakeUserTag();
      $._FakeUserTag__instances.$indexSet(0, label, t1);
      return t1;
    },
    ServiceExtensionResponse$result(result) {
      A.ArgumentError_checkNotNull(result, "result");
      return new A.ServiceExtensionResponse();
    },
    ServiceExtensionResponse__validateErrorCode(errorCode) {
      var _s9_ = "errorCode";
      A.ArgumentError_checkNotNull(errorCode, _s9_);
      if (errorCode === -32602)
        return;
      if (errorCode >= -32016 && errorCode <= -32000)
        return;
      throw A.wrapException(A.ArgumentError$value(errorCode, _s9_, "Out of range"));
    },
    registerExtension(method, handler) {
      A.ArgumentError_checkNotNull(method, "method");
      if (!B.JSString_methods.startsWith$1(method, "ext."))
        throw A.wrapException(A.ArgumentError$value(method, "method", "Must begin with ext."));
      if ($._extensions.$index(0, method) != null)
        throw A.wrapException(A.ArgumentError$("Extension already registered: " + method, null));
      A.ArgumentError_checkNotNull(handler, "handler");
      $._extensions.$indexSet(0, method, handler);
    },
    postEvent(eventKind, eventData) {
      A.ArgumentError_checkNotNull(eventKind, "eventKind");
      A.ArgumentError_checkNotNull(eventData, "eventData");
      B.C_JsonCodec.encode$1(eventData);
    },
    Timeline_startSync($name, $arguments, flow) {
      A.ArgumentError_checkNotNull($name, "name");
      $.Timeline__stack.push(null);
      return;
    },
    Timeline_finishSync() {
      var block, t1;
      if ($.Timeline__stack.length === 0)
        throw A.wrapException(A.StateError$("Uneven calls to startSync and finishSync"));
      block = $.Timeline__stack.pop();
      if (block == null)
        return;
      A._argumentsAsJson(block._developer$_arguments);
      t1 = block._flow;
      if (t1 != null) {
        A.S(t1.id);
        block._flow.toString;
        A._argumentsAsJson(null);
      }
    },
    Timeline_instantSync($name, $arguments) {
      A.ArgumentError_checkNotNull($name, "name");
      return;
    },
    TimelineTask$() {
      return new A.TimelineTask(0, A._setArrayType([], type$.JSArray_nullable__AsyncBlock));
    },
    _argumentsAsJson($arguments) {
      if ($arguments == null || $arguments.get$length($arguments) === 0)
        return "{}";
      return B.C_JsonCodec.encode$1($arguments);
    },
    _FakeUserTag: function _FakeUserTag() {
    },
    ServiceExtensionResponse: function ServiceExtensionResponse() {
    },
    TimelineTask: function TimelineTask(t0, t1) {
      this._taskId = t0;
      this._stack = t1;
    },
    window() {
      return window;
    },
    document() {
      return document;
    },
    CanvasElement_CanvasElement(height, width) {
      var e = document.createElement("canvas");
      if (width != null)
        e.width = width;
      if (height != null)
        e.height = height;
      return e;
    },
    _ChildrenElementList__first(_element) {
      var result = _element.firstElementChild;
      if (result == null)
        throw A.wrapException(A.StateError$("No elements"));
      return result;
    },
    Element_Element$html(html, treeSanitizer, validator) {
      var t1 = document.body;
      t1.toString;
      t1 = new A.WhereIterable(new A._ChildNodeListLazy(B.BodyElement_methods.createFragment$3$treeSanitizer$validator(t1, html, treeSanitizer, validator)), new A.Element_Element$html_closure(), type$._ChildNodeListLazy._eval$1("WhereIterable<ListMixin.E>"));
      return type$.Element._as(t1.get$single(t1));
    },
    Element_Element$tag(tag) {
      return A._ElementFactoryProvider_createElement_tag(tag, null);
    },
    Element__safeTagName(element) {
      var t1, exception,
        result = "element tag unavailable";
      try {
        t1 = J.getInterceptor$x(element);
        t1.get$tagName(element);
        result = t1.get$tagName(element);
      } catch (exception) {
      }
      return result;
    },
    _ElementFactoryProvider_createElement_tag(tag, typeExtension) {
      return document.createElement(tag);
    },
    FontFace_FontFace(family, source, descriptors) {
      var t1 = new FontFace(family, source, A.convertDartToNative_Dictionary(descriptors));
      return t1;
    },
    HttpRequest_request(url, responseType) {
      var t2,
        t1 = new A._Future($.Zone__current, type$._Future_HttpRequest),
        completer = new A._AsyncCompleter(t1, type$._AsyncCompleter_HttpRequest),
        xhr = new XMLHttpRequest();
      B.HttpRequest_methods.open$3$async(xhr, "GET", url, true);
      xhr.responseType = responseType;
      t2 = type$.ProgressEvent;
      A._EventStreamSubscription$(xhr, "load", new A.HttpRequest_request_closure(xhr, completer), false, t2);
      A._EventStreamSubscription$(xhr, "error", completer.get$completeError(), false, t2);
      xhr.send();
      return t1;
    },
    InputElement_InputElement() {
      var exception, type = null,
        t1 = document.createElement("input"),
        e = type$.InputElement._as(t1);
      if (type != null)
        try {
          e.type = type;
        } catch (exception) {
        }
      return e;
    },
    _EventStreamSubscription$(_target, _eventType, onData, _useCapture, $T) {
      var t1 = onData == null ? null : A._wrapZone(new A._EventStreamSubscription_closure(onData), type$.Event);
      t1 = new A._EventStreamSubscription(_target, _eventType, t1, false, $T._eval$1("_EventStreamSubscription<0>"));
      t1._tryResume$0();
      return t1;
    },
    _Html5NodeValidator$(uriPolicy) {
      var e = document.createElement("a"),
        t1 = new A._SameOriginUriPolicy(e, window.location);
      t1 = new A._Html5NodeValidator(t1);
      t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
      return t1;
    },
    _Html5NodeValidator__standardAttributeValidator(element, attributeName, value, context) {
      return true;
    },
    _Html5NodeValidator__uriAttributeValidator(element, attributeName, value, context) {
      var t3,
        t1 = context.uriPolicy,
        t2 = t1._hiddenAnchor;
      t2.href = value;
      t3 = t2.hostname;
      t1 = t1._loc;
      if (!(t3 == t1.hostname && t2.port === t1.port && t2.protocol === t1.protocol))
        if (t3 === "")
          if (t2.port === "") {
            t1 = t2.protocol;
            t1 = t1 === ":" || t1 === "";
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = true;
      return t1;
    },
    _TemplatingNodeValidator$() {
      var t1 = type$.String,
        t2 = A.LinkedHashSet_LinkedHashSet$from(B.List_wSV, t1),
        t3 = A._setArrayType(["TEMPLATE"], type$.JSArray_String);
      t1 = new A._TemplatingNodeValidator(t2, A.LinkedHashSet_LinkedHashSet(t1), A.LinkedHashSet_LinkedHashSet(t1), A.LinkedHashSet_LinkedHashSet(t1), null);
      t1._SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes(null, new A.MappedListIterable(B.List_wSV, new A._TemplatingNodeValidator_closure(), type$.MappedListIterable_String_String), t3, null);
      return t1;
    },
    _convertNativeToDart_EventTarget(e) {
      var $window;
      if ("postMessage" in e) {
        $window = A._DOMWindowCrossFrame__createSafe(e);
        return $window;
      } else
        return e;
    },
    _convertNativeToDart_XHR_Response(o) {
      if (type$.Document._is(o))
        return o;
      return new A._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(o, true);
    },
    _DOMWindowCrossFrame__createSafe(w) {
      if (w === window)
        return w;
      else
        return new A._DOMWindowCrossFrame(w);
    },
    _wrapZone(callback, $T) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    _wrapBinaryZone(callback, T1, T2) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return callback;
      return t1.bindBinaryCallbackGuarded$2$1(callback, T1, T2);
    },
    HtmlElement: function HtmlElement() {
    },
    AccessibleNodeList: function AccessibleNodeList() {
    },
    AnchorElement: function AnchorElement() {
    },
    AreaElement: function AreaElement() {
    },
    BaseElement: function BaseElement() {
    },
    Blob: function Blob() {
    },
    Body: function Body() {
    },
    BodyElement: function BodyElement() {
    },
    BroadcastChannel: function BroadcastChannel() {
    },
    ButtonElement: function ButtonElement() {
    },
    CanvasElement: function CanvasElement() {
    },
    CanvasRenderingContext2D: function CanvasRenderingContext2D() {
    },
    CharacterData: function CharacterData() {
    },
    Credential: function Credential() {
    },
    CredentialUserData: function CredentialUserData() {
    },
    CssKeyframesRule: function CssKeyframesRule() {
    },
    CssPerspective: function CssPerspective() {
    },
    CssRule: function CssRule() {
    },
    CssStyleDeclaration: function CssStyleDeclaration() {
    },
    CssStyleDeclarationBase: function CssStyleDeclarationBase() {
    },
    CssStyleSheet: function CssStyleSheet() {
    },
    CssStyleValue: function CssStyleValue() {
    },
    CssTransformComponent: function CssTransformComponent() {
    },
    CssTransformValue: function CssTransformValue() {
    },
    CssUnparsedValue: function CssUnparsedValue() {
    },
    DataTransferItemList: function DataTransferItemList() {
    },
    DivElement: function DivElement() {
    },
    Document: function Document() {
    },
    DomError: function DomError() {
    },
    DomException: function DomException() {
    },
    DomRectList: function DomRectList() {
    },
    DomRectReadOnly: function DomRectReadOnly() {
    },
    DomStringList: function DomStringList() {
    },
    DomTokenList: function DomTokenList() {
    },
    _ChildrenElementList: function _ChildrenElementList(t0, t1) {
      this._html$_element = t0;
      this._childElements = t1;
    },
    _FrozenElementList: function _FrozenElementList(t0, t1) {
      this._nodeList = t0;
      this.$ti = t1;
    },
    Element: function Element() {
    },
    Element_Element$html_closure: function Element_Element$html_closure() {
    },
    EmbedElement: function EmbedElement() {
    },
    Entry: function Entry() {
    },
    Entry_remove_closure: function Entry_remove_closure(t0) {
      this.completer = t0;
    },
    Entry_remove_closure0: function Entry_remove_closure0(t0) {
      this.completer = t0;
    },
    Event: function Event() {
    },
    EventTarget: function EventTarget() {
    },
    FederatedCredential: function FederatedCredential() {
    },
    FieldSetElement: function FieldSetElement() {
    },
    File: function File() {
    },
    FileList: function FileList() {
    },
    FileSystem: function FileSystem() {
    },
    FileWriter: function FileWriter() {
    },
    FontFace: function FontFace() {
    },
    FormElement: function FormElement() {
    },
    Gamepad: function Gamepad() {
    },
    History: function History() {
    },
    HtmlCollection: function HtmlCollection() {
    },
    HtmlDocument: function HtmlDocument() {
    },
    HttpRequest: function HttpRequest() {
    },
    HttpRequest_request_closure: function HttpRequest_request_closure(t0, t1) {
      this.xhr = t0;
      this.completer = t1;
    },
    HttpRequestEventTarget: function HttpRequestEventTarget() {
    },
    IFrameElement: function IFrameElement() {
    },
    ImageData: function ImageData() {
    },
    InputElement: function InputElement() {
    },
    KeyboardEvent: function KeyboardEvent() {
    },
    LabelElement: function LabelElement() {
    },
    Location: function Location() {
    },
    MapElement: function MapElement() {
    },
    MediaKeySession: function MediaKeySession() {
    },
    MediaList: function MediaList() {
    },
    MediaQueryList: function MediaQueryList() {
    },
    MediaQueryListEvent: function MediaQueryListEvent() {
    },
    MessagePort: function MessagePort() {
    },
    MetaElement: function MetaElement() {
    },
    MidiInputMap: function MidiInputMap() {
    },
    MidiInputMap_keys_closure: function MidiInputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MidiOutputMap: function MidiOutputMap() {
    },
    MidiOutputMap_keys_closure: function MidiOutputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MidiPort: function MidiPort() {
    },
    MimeType: function MimeType() {
    },
    MimeTypeArray: function MimeTypeArray() {
    },
    MouseEvent: function MouseEvent() {
    },
    MutationObserver: function MutationObserver() {
    },
    MutationObserver_observe_override: function MutationObserver_observe_override(t0) {
      this.parsedOptions = t0;
    },
    MutationRecord: function MutationRecord() {
    },
    NavigatorUserMediaError: function NavigatorUserMediaError() {
    },
    _ChildNodeListLazy: function _ChildNodeListLazy(t0) {
      this._this = t0;
    },
    Node: function Node() {
    },
    NodeList: function NodeList() {
    },
    ObjectElement: function ObjectElement() {
    },
    OffscreenCanvas: function OffscreenCanvas() {
    },
    OutputElement: function OutputElement() {
    },
    OverconstrainedError: function OverconstrainedError() {
    },
    ParagraphElement: function ParagraphElement() {
    },
    ParamElement: function ParamElement() {
    },
    PasswordCredential: function PasswordCredential() {
    },
    PerformanceEntry: function PerformanceEntry() {
    },
    PerformanceServerTiming: function PerformanceServerTiming() {
    },
    Plugin: function Plugin() {
    },
    PluginArray: function PluginArray() {
    },
    PointerEvent0: function PointerEvent0() {
    },
    ProgressEvent: function ProgressEvent() {
    },
    RtcStatsReport: function RtcStatsReport() {
    },
    RtcStatsReport_keys_closure: function RtcStatsReport_keys_closure(t0) {
      this.keys = t0;
    },
    ScreenOrientation: function ScreenOrientation() {
    },
    SelectElement: function SelectElement() {
    },
    SharedWorkerGlobalScope: function SharedWorkerGlobalScope() {
    },
    SlotElement: function SlotElement() {
    },
    SourceBuffer: function SourceBuffer() {
    },
    SourceBufferList: function SourceBufferList() {
    },
    SpeechGrammar: function SpeechGrammar() {
    },
    SpeechGrammarList: function SpeechGrammarList() {
    },
    SpeechRecognitionResult: function SpeechRecognitionResult() {
    },
    SpeechSynthesisEvent: function SpeechSynthesisEvent() {
    },
    SpeechSynthesisVoice: function SpeechSynthesisVoice() {
    },
    Storage: function Storage() {
    },
    Storage_keys_closure: function Storage_keys_closure(t0) {
      this.keys = t0;
    },
    StyleElement: function StyleElement() {
    },
    StyleSheet: function StyleSheet() {
    },
    TableElement: function TableElement() {
    },
    TableRowElement: function TableRowElement() {
    },
    TableSectionElement: function TableSectionElement() {
    },
    TemplateElement: function TemplateElement() {
    },
    TextAreaElement: function TextAreaElement() {
    },
    TextTrack: function TextTrack() {
    },
    TextTrackCue: function TextTrackCue() {
    },
    TextTrackCueList: function TextTrackCueList() {
    },
    TextTrackList: function TextTrackList() {
    },
    TimeRanges: function TimeRanges() {
    },
    Touch: function Touch() {
    },
    TouchEvent: function TouchEvent() {
    },
    TouchList: function TouchList() {
    },
    TrackDefaultList: function TrackDefaultList() {
    },
    UIEvent: function UIEvent() {
    },
    Url: function Url() {
    },
    VideoTrackList: function VideoTrackList() {
    },
    WheelEvent: function WheelEvent() {
    },
    Window: function Window() {
    },
    WorkerGlobalScope: function WorkerGlobalScope() {
    },
    _Attr: function _Attr() {
    },
    _CssRuleList: function _CssRuleList() {
    },
    _DomRect: function _DomRect() {
    },
    _GamepadList: function _GamepadList() {
    },
    _NamedNodeMap: function _NamedNodeMap() {
    },
    _SpeechRecognitionResultList: function _SpeechRecognitionResultList() {
    },
    _StyleSheetList: function _StyleSheetList() {
    },
    _AttributeMap: function _AttributeMap() {
    },
    _ElementAttributeMap: function _ElementAttributeMap(t0) {
      this._html$_element = t0;
    },
    EventStreamProvider: function EventStreamProvider(t0, t1) {
      this._eventType = t0;
      this.$ti = t1;
    },
    _EventStream: function _EventStream(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _ElementEventStreamImpl: function _ElementEventStreamImpl(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    },
    _Html5NodeValidator: function _Html5NodeValidator(t0) {
      this.uriPolicy = t0;
    },
    ImmutableListMixin: function ImmutableListMixin() {
    },
    NodeValidatorBuilder: function NodeValidatorBuilder(t0) {
      this._validators = t0;
    },
    NodeValidatorBuilder_allowsElement_closure: function NodeValidatorBuilder_allowsElement_closure(t0) {
      this.element = t0;
    },
    NodeValidatorBuilder_allowsAttribute_closure: function NodeValidatorBuilder_allowsAttribute_closure(t0, t1, t2) {
      this.element = t0;
      this.attributeName = t1;
      this.value = t2;
    },
    _SimpleNodeValidator: function _SimpleNodeValidator() {
    },
    _SimpleNodeValidator_closure: function _SimpleNodeValidator_closure() {
    },
    _SimpleNodeValidator_closure0: function _SimpleNodeValidator_closure0() {
    },
    _TemplatingNodeValidator: function _TemplatingNodeValidator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._templateAttrs = t0;
      _.allowedElements = t1;
      _.allowedAttributes = t2;
      _.allowedUriAttributes = t3;
      _.uriPolicy = t4;
    },
    _TemplatingNodeValidator_closure: function _TemplatingNodeValidator_closure() {
    },
    _SvgNodeValidator: function _SvgNodeValidator() {
    },
    FixedSizeListIterator: function FixedSizeListIterator(t0, t1) {
      var _ = this;
      _._array = t0;
      _._html$_length = t1;
      _._position = -1;
      _._current = null;
    },
    Console: function Console() {
    },
    _DOMWindowCrossFrame: function _DOMWindowCrossFrame(t0) {
      this._html$_window = t0;
    },
    _SameOriginUriPolicy: function _SameOriginUriPolicy(t0, t1) {
      this._hiddenAnchor = t0;
      this._loc = t1;
    },
    _ValidatingTreeSanitizer: function _ValidatingTreeSanitizer(t0) {
      this.validator = t0;
      this.numTreeModifications = 0;
    },
    _ValidatingTreeSanitizer_sanitizeTree_walk: function _ValidatingTreeSanitizer_sanitizeTree_walk(t0) {
      this.$this = t0;
    },
    _CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase: function _CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase() {
    },
    _DomRectList_JavaScriptObject_ListMixin: function _DomRectList_JavaScriptObject_ListMixin() {
    },
    _DomRectList_JavaScriptObject_ListMixin_ImmutableListMixin: function _DomRectList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _DomStringList_JavaScriptObject_ListMixin: function _DomStringList_JavaScriptObject_ListMixin() {
    },
    _DomStringList_JavaScriptObject_ListMixin_ImmutableListMixin: function _DomStringList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _FileList_JavaScriptObject_ListMixin: function _FileList_JavaScriptObject_ListMixin() {
    },
    _FileList_JavaScriptObject_ListMixin_ImmutableListMixin: function _FileList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _HtmlCollection_JavaScriptObject_ListMixin: function _HtmlCollection_JavaScriptObject_ListMixin() {
    },
    _HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin: function _HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _MidiInputMap_JavaScriptObject_MapMixin: function _MidiInputMap_JavaScriptObject_MapMixin() {
    },
    _MidiOutputMap_JavaScriptObject_MapMixin: function _MidiOutputMap_JavaScriptObject_MapMixin() {
    },
    _MimeTypeArray_JavaScriptObject_ListMixin: function _MimeTypeArray_JavaScriptObject_ListMixin() {
    },
    _MimeTypeArray_JavaScriptObject_ListMixin_ImmutableListMixin: function _MimeTypeArray_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _NodeList_JavaScriptObject_ListMixin: function _NodeList_JavaScriptObject_ListMixin() {
    },
    _NodeList_JavaScriptObject_ListMixin_ImmutableListMixin: function _NodeList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _PluginArray_JavaScriptObject_ListMixin: function _PluginArray_JavaScriptObject_ListMixin() {
    },
    _PluginArray_JavaScriptObject_ListMixin_ImmutableListMixin: function _PluginArray_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _RtcStatsReport_JavaScriptObject_MapMixin: function _RtcStatsReport_JavaScriptObject_MapMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin: function _SourceBufferList_EventTarget_ListMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin: function _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _SpeechGrammarList_JavaScriptObject_ListMixin: function _SpeechGrammarList_JavaScriptObject_ListMixin() {
    },
    _SpeechGrammarList_JavaScriptObject_ListMixin_ImmutableListMixin: function _SpeechGrammarList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _Storage_JavaScriptObject_MapMixin: function _Storage_JavaScriptObject_MapMixin() {
    },
    _TextTrackCueList_JavaScriptObject_ListMixin: function _TextTrackCueList_JavaScriptObject_ListMixin() {
    },
    _TextTrackCueList_JavaScriptObject_ListMixin_ImmutableListMixin: function _TextTrackCueList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin: function _TextTrackList_EventTarget_ListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin_ImmutableListMixin: function _TextTrackList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _TouchList_JavaScriptObject_ListMixin: function _TouchList_JavaScriptObject_ListMixin() {
    },
    _TouchList_JavaScriptObject_ListMixin_ImmutableListMixin: function _TouchList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    __CssRuleList_JavaScriptObject_ListMixin: function __CssRuleList_JavaScriptObject_ListMixin() {
    },
    __CssRuleList_JavaScriptObject_ListMixin_ImmutableListMixin: function __CssRuleList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    __GamepadList_JavaScriptObject_ListMixin: function __GamepadList_JavaScriptObject_ListMixin() {
    },
    __GamepadList_JavaScriptObject_ListMixin_ImmutableListMixin: function __GamepadList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    __NamedNodeMap_JavaScriptObject_ListMixin: function __NamedNodeMap_JavaScriptObject_ListMixin() {
    },
    __NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin: function __NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    __SpeechRecognitionResultList_JavaScriptObject_ListMixin: function __SpeechRecognitionResultList_JavaScriptObject_ListMixin() {
    },
    __SpeechRecognitionResultList_JavaScriptObject_ListMixin_ImmutableListMixin: function __SpeechRecognitionResultList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    __StyleSheetList_JavaScriptObject_ListMixin: function __StyleSheetList_JavaScriptObject_ListMixin() {
    },
    __StyleSheetList_JavaScriptObject_ListMixin_ImmutableListMixin: function __StyleSheetList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _convertNativeToDart_Value(value) {
      var values, i;
      if (value == null)
        return value;
      if (typeof value == "string" || typeof value == "number" || A._isBool(value))
        return value;
      if (A.isJavaScriptSimpleObject(value))
        return A.convertNativeToDart_Dictionary(value);
      if (Array.isArray(value)) {
        values = [];
        for (i = 0; i < value.length; ++i)
          values.push(A._convertNativeToDart_Value(value[i]));
        return values;
      }
      return value;
    },
    convertNativeToDart_Dictionary(object) {
      var dict, keys, t1, _i, key;
      if (object == null)
        return null;
      dict = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      keys = Object.getOwnPropertyNames(object);
      for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
        key = keys[_i];
        dict.$indexSet(0, key, A._convertNativeToDart_Value(object[key]));
      }
      return dict;
    },
    _convertDartToNative_Value(value) {
      var array;
      if (value == null)
        return value;
      if (typeof value == "string" || typeof value == "number" || A._isBool(value))
        return value;
      if (type$.Map_dynamic_dynamic._is(value))
        return A.convertDartToNative_Dictionary(value);
      if (type$.List_dynamic._is(value)) {
        array = [];
        J.forEach$1$ax(value, new A._convertDartToNative_Value_closure(array));
        value = array;
      }
      return value;
    },
    convertDartToNative_Dictionary(dict) {
      var object = {};
      J.forEach$1$ax(dict, new A.convertDartToNative_Dictionary_closure(object));
      return object;
    },
    isJavaScriptSimpleObject(value) {
      var proto = Object.getPrototypeOf(value);
      return proto === Object.prototype || proto === null;
    },
    Device_userAgent() {
      return window.navigator.userAgent;
    },
    _StructuredClone: function _StructuredClone() {
    },
    _StructuredClone_walk_closure: function _StructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _StructuredClone_walk_closure0: function _StructuredClone_walk_closure0(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _AcceptStructuredClone: function _AcceptStructuredClone() {
    },
    _AcceptStructuredClone_walk_closure: function _AcceptStructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _convertDartToNative_Value_closure: function _convertDartToNative_Value_closure(t0) {
      this.array = t0;
    },
    convertDartToNative_Dictionary_closure: function convertDartToNative_Dictionary_closure(t0) {
      this.object = t0;
    },
    _StructuredCloneDart2Js: function _StructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
    },
    _AcceptStructuredCloneDart2Js: function _AcceptStructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
      this.mustCopy = false;
    },
    FilteredElementList: function FilteredElementList(t0, t1) {
      this._html_common$_node = t0;
      this._childNodes = t1;
    },
    FilteredElementList__iterable_closure: function FilteredElementList__iterable_closure() {
    },
    FilteredElementList__iterable_closure0: function FilteredElementList__iterable_closure0() {
    },
    FilteredElementList_removeRange_closure: function FilteredElementList_removeRange_closure() {
    },
    Database: function Database() {
    },
    Index: function Index() {
    },
    KeyRange: function KeyRange() {
    },
    ObjectStore: function ObjectStore() {
    },
    VersionChangeEvent: function VersionChangeEvent() {
    },
    _callDartFunction(callback, captureThis, $self, $arguments) {
      var arguments0, t1;
      if (captureThis) {
        arguments0 = [$self];
        B.JSArray_methods.addAll$1(arguments0, $arguments);
        $arguments = arguments0;
      }
      t1 = type$.dynamic;
      return A._convertToJS(A.Function_apply(callback, A.List_List$from(J.map$1$1$ax($arguments, A.js___convertToDart$closure(), t1), true, t1)));
    },
    JsObject_JsObject($constructor) {
      var t1 = A._wrapToDart(new (A._convertToJS($constructor))());
      return t1;
    },
    JsObject_JsObject$jsify(object) {
      return A._wrapToDart(A.JsObject__convertDataTree(object));
    },
    JsObject__convertDataTree(data) {
      return new A.JsObject__convertDataTree__convert(new A._IdentityHashMap(type$._IdentityHashMap_dynamic_dynamic)).call$1(data);
    },
    JsArray__checkRange(start, end, $length) {
      var _null = null;
      if (start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, _null, _null));
      if (end < start || end > $length)
        throw A.wrapException(A.RangeError$range(end, start, $length, _null, _null));
    },
    _castToJsObject(o) {
      return o;
    },
    _defineProperty(o, $name, value) {
      var exception;
      try {
        if (Object.isExtensible(o) && !Object.prototype.hasOwnProperty.call(o, $name)) {
          Object.defineProperty(o, $name, {value: value});
          return true;
        }
      } catch (exception) {
      }
      return false;
    },
    _getOwnProperty(o, $name) {
      if (Object.prototype.hasOwnProperty.call(o, $name))
        return o[$name];
      return null;
    },
    _convertToJS(o) {
      if (o == null || typeof o == "string" || typeof o == "number" || A._isBool(o))
        return o;
      if (o instanceof A.JsObject)
        return o._js$_jsObject;
      if (A.isBrowserObject(o))
        return o;
      if (type$.TypedData._is(o))
        return o;
      if (o instanceof A.DateTime)
        return A.Primitives_lazyAsJsDate(o);
      if (type$.Function._is(o))
        return A._getJsProxy(o, "$dart_jsFunction", new A._convertToJS_closure());
      return A._getJsProxy(o, "_$dart_jsObject", new A._convertToJS_closure0($.$get$_dartProxyCtor()));
    },
    _getJsProxy(o, propertyName, createProxy) {
      var jsProxy = A._getOwnProperty(o, propertyName);
      if (jsProxy == null) {
        jsProxy = createProxy.call$1(o);
        A._defineProperty(o, propertyName, jsProxy);
      }
      return jsProxy;
    },
    _convertToDart(o) {
      if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
        return o;
      else if (o instanceof Object && A.isBrowserObject(o))
        return o;
      else if (o instanceof Object && type$.TypedData._is(o))
        return o;
      else if (o instanceof Date)
        return A.DateTime$fromMillisecondsSinceEpoch(o.getTime(), false);
      else if (o.constructor === $.$get$_dartProxyCtor())
        return o.o;
      else
        return A._wrapToDart(o);
    },
    _wrapToDart(o) {
      if (typeof o == "function")
        return A._getDartProxy(o, $.$get$DART_CLOSURE_PROPERTY_NAME(), new A._wrapToDart_closure());
      if (o instanceof Array)
        return A._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new A._wrapToDart_closure0());
      return A._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new A._wrapToDart_closure1());
    },
    _getDartProxy(o, propertyName, createProxy) {
      var dartProxy = A._getOwnProperty(o, propertyName);
      if (dartProxy == null || !(o instanceof Object)) {
        dartProxy = createProxy.call$1(o);
        A._defineProperty(o, propertyName, dartProxy);
      }
      return dartProxy;
    },
    _convertDartFunctionFast(f) {
      var ret,
        existing = f.$dart_jsFunction;
      if (existing != null)
        return existing;
      ret = function(_call, f) {
        return function() {
          return _call(f, Array.prototype.slice.apply(arguments));
        };
      }(A._callDartFunctionFast, f);
      ret[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      f.$dart_jsFunction = ret;
      return ret;
    },
    _callDartFunctionFast(callback, $arguments) {
      return A.Function_apply(callback, $arguments);
    },
    allowInterop(f) {
      if (typeof f == "function")
        return f;
      else
        return A._convertDartFunctionFast(f);
    },
    JsObject__convertDataTree__convert: function JsObject__convertDataTree__convert(t0) {
      this._convertedObjects = t0;
    },
    _convertToJS_closure: function _convertToJS_closure() {
    },
    _convertToJS_closure0: function _convertToJS_closure0(t0) {
      this.ctor = t0;
    },
    _wrapToDart_closure: function _wrapToDart_closure() {
    },
    _wrapToDart_closure0: function _wrapToDart_closure0() {
    },
    _wrapToDart_closure1: function _wrapToDart_closure1() {
    },
    JsObject: function JsObject(t0) {
      this._js$_jsObject = t0;
    },
    JsFunction: function JsFunction(t0) {
      this._js$_jsObject = t0;
    },
    JsArray: function JsArray(t0, t1) {
      this._js$_jsObject = t0;
      this.$ti = t1;
    },
    _JsArray_JsObject_ListMixin: function _JsArray_JsObject_ListMixin() {
    },
    hasProperty(o, $name) {
      return $name in o;
    },
    callMethod(o, method, args) {
      return o[method].apply(o, args);
    },
    _callMethodUnchecked0(o, method) {
      return o[method]();
    },
    promiseToFuture(jsPromise, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>")),
        completer = new A._AsyncCompleter(t1, $T._eval$1("_AsyncCompleter<0>"));
      jsPromise.then(A.convertDartClosureToJS(new A.promiseToFuture_closure(completer), 1), A.convertDartClosureToJS(new A.promiseToFuture_closure0(completer), 1));
      return t1;
    },
    NullRejectionException: function NullRejectionException(t0) {
      this.isUndefined = t0;
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0) {
      this.completer = t0;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    },
    Point: function Point(t0, t1, t2) {
      this.x = t0;
      this.y = t1;
      this.$ti = t2;
    },
    SvgSvgElement_SvgSvgElement() {
      var el = type$.SvgElement._as(B.HtmlDocument_methods.createElementNS$2(document, "http://www.w3.org/2000/svg", "svg"));
      el.setAttribute("version", "1.1");
      return type$.SvgSvgElement._as(el);
    },
    ClipPathElement: function ClipPathElement() {
    },
    DefsElement: function DefsElement() {
    },
    GeometryElement: function GeometryElement() {
    },
    GraphicsElement: function GraphicsElement() {
    },
    Length: function Length() {
    },
    LengthList: function LengthList() {
    },
    Number: function Number() {
    },
    NumberList: function NumberList() {
    },
    PathElement: function PathElement() {
    },
    PointList: function PointList() {
    },
    ScriptElement0: function ScriptElement0() {
    },
    StringList: function StringList() {
    },
    SvgElement: function SvgElement() {
    },
    SvgSvgElement: function SvgSvgElement() {
    },
    Transform0: function Transform0() {
    },
    TransformList: function TransformList() {
    },
    _LengthList_JavaScriptObject_ListMixin: function _LengthList_JavaScriptObject_ListMixin() {
    },
    _LengthList_JavaScriptObject_ListMixin_ImmutableListMixin: function _LengthList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _NumberList_JavaScriptObject_ListMixin: function _NumberList_JavaScriptObject_ListMixin() {
    },
    _NumberList_JavaScriptObject_ListMixin_ImmutableListMixin: function _NumberList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _StringList_JavaScriptObject_ListMixin: function _StringList_JavaScriptObject_ListMixin() {
    },
    _StringList_JavaScriptObject_ListMixin_ImmutableListMixin: function _StringList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _TransformList_JavaScriptObject_ListMixin: function _TransformList_JavaScriptObject_ListMixin() {
    },
    _TransformList_JavaScriptObject_ListMixin_ImmutableListMixin: function _TransformList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    Endian: function Endian() {
    },
    PictureRecorder_PictureRecorder() {
      if ($.$get$useCanvasKit())
        return new A.CkPictureRecorder();
      else
        return new A.EnginePictureRecorder();
    },
    Canvas_Canvas(recorder) {
      var _s62_ = '"recorder" must not already be associated with another Canvas.';
      if ($.$get$useCanvasKit()) {
        if (recorder.get$isRecording())
          A.throwExpression(A.ArgumentError$(_s62_, null));
        return new A.CanvasKitCanvas(type$.CkPictureRecorder._as(recorder).beginRecording$1(0, B.Rect_aha));
      } else {
        type$.EnginePictureRecorder._as(recorder);
        if (recorder._isRecording)
          A.throwExpression(A.ArgumentError$(_s62_, null));
        return new A.SurfaceCanvas(recorder.beginRecording$1(0, B.Rect_aha));
      }
    },
    SceneBuilder_SceneBuilder() {
      var t1, t2, t3;
      if ($.$get$useCanvasKit()) {
        t1 = new A.RootLayer(A._setArrayType([], type$.JSArray_Layer), B.Rect_0_0_0_0);
        t2 = new A.LayerSceneBuilder(t1);
        t2.__LayerSceneBuilder_currentLayer = t1;
        return t2;
      } else {
        t1 = A._setArrayType([], type$.JSArray_PersistedContainerSurface);
        t2 = $.SurfaceSceneBuilder__lastFrameScene;
        t3 = A._setArrayType([], type$.JSArray_PersistedSurface);
        t2 = new A.FrameReference(t2 != null && t2.__engine$_state === B.PersistedSurfaceState_1 ? t2 : null);
        $.frameReferences.push(t2);
        t2 = new A.PersistedScene(t3, t2, B.PersistedSurfaceState_0);
        t2.transform = A.Matrix4$identity();
        t1.push(t2);
        return new A.SurfaceSceneBuilder(t1);
      }
    },
    Offset_lerp(a, b, t) {
      var t1 = A._lerpDouble(a._dx, b._dx, t),
        t2 = A._lerpDouble(a._dy, b._dy, t);
      return new A.Offset(t1, t2);
    },
    Rect$fromCircle(center, radius) {
      var t1 = center._dx,
        t2 = radius * 2 / 2,
        t3 = center._dy;
      return new A.Rect(t1 - t2, t3 - t2, t1 + t2, t3 + t2);
    },
    Radius_lerp(a, b, t) {
      var t1 = A._lerpDouble(a.x, b.x, t),
        t2 = A._lerpDouble(a.y, b.y, t);
      return new A.Radius(t1, t2);
    },
    RRect$fromRectAndCorners(rect, bottomLeft, bottomRight, topLeft, topRight) {
      var t1 = topLeft.x,
        t2 = topLeft.y,
        t3 = topRight.x,
        t4 = topRight.y,
        t5 = bottomLeft.x,
        t6 = bottomLeft.y,
        t7 = bottomRight.x,
        t8 = bottomRight.y,
        t9 = t1 === t2 && t1 === t3 && t1 === t4 && t1 === t5 && t1 === t6 && t1 === t7 && t1 === t8;
      return new A.RRect(rect.left, rect.top, rect.right, rect.bottom, t1, t2, t3, t4, t7, t8, t5, t6, t9);
    },
    _Jenkins_combine(hash, o) {
      hash = hash + J.get$hashCode$(o) & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    _Jenkins_finish(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    hashValues(arg01, arg02, arg03, arg04, arg05, arg06, arg07, arg08, arg09, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20) {
      var result = A._Jenkins_combine(A._Jenkins_combine(0, arg01), arg02);
      if (!J.$eq$(arg03, B.C__HashEnd)) {
        result = A._Jenkins_combine(result, arg03);
        if (!J.$eq$(arg04, B.C__HashEnd)) {
          result = A._Jenkins_combine(result, arg04);
          if (!J.$eq$(arg05, B.C__HashEnd)) {
            result = A._Jenkins_combine(result, arg05);
            if (!J.$eq$(arg06, B.C__HashEnd)) {
              result = A._Jenkins_combine(result, arg06);
              if (!J.$eq$(arg07, B.C__HashEnd)) {
                result = A._Jenkins_combine(result, arg07);
                if (!J.$eq$(arg08, B.C__HashEnd)) {
                  result = A._Jenkins_combine(result, arg08);
                  if (!J.$eq$(arg09, B.C__HashEnd)) {
                    result = A._Jenkins_combine(result, arg09);
                    if (!J.$eq$(arg10, B.C__HashEnd)) {
                      result = A._Jenkins_combine(result, arg10);
                      if (!J.$eq$(arg11, B.C__HashEnd)) {
                        result = A._Jenkins_combine(result, arg11);
                        if (!J.$eq$(arg12, B.C__HashEnd)) {
                          result = A._Jenkins_combine(result, arg12);
                          if (!J.$eq$(arg13, B.C__HashEnd)) {
                            result = A._Jenkins_combine(result, arg13);
                            if (!J.$eq$(arg14, B.C__HashEnd)) {
                              result = A._Jenkins_combine(result, arg14);
                              if (!J.$eq$(arg15, B.C__HashEnd)) {
                                result = A._Jenkins_combine(result, arg15);
                                if (arg16 !== B.C__HashEnd) {
                                  result = A._Jenkins_combine(result, arg16);
                                  if (arg17 !== B.C__HashEnd) {
                                    result = A._Jenkins_combine(result, arg17);
                                    if (arg18 !== B.C__HashEnd) {
                                      result = A._Jenkins_combine(result, arg18);
                                      if (arg19 !== B.C__HashEnd) {
                                        result = A._Jenkins_combine(result, arg19);
                                        if (!J.$eq$(arg20, B.C__HashEnd))
                                          result = A._Jenkins_combine(result, arg20);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return A._Jenkins_finish(result);
    },
    hashList($arguments) {
      var t1, result, _i;
      if ($arguments != null)
        for (t1 = $arguments.length, result = 0, _i = 0; _i < $arguments.length; $arguments.length === t1 || (0, A.throwConcurrentModificationError)($arguments), ++_i)
          result = A._Jenkins_combine(result, $arguments[_i]);
      else
        result = 0;
      return A._Jenkins_finish(result);
    },
    webOnlyInitializePlatform() {
      var initializationFuture = A._initializePlatform(null);
      A.scheduleMicrotask(new A.webOnlyInitializePlatform_closure());
      return initializationFuture;
    },
    _initializePlatform(assetManager) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        t1;
      var $async$_initializePlatform = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              A.initializeEngine();
              t1 = $.$get$useCanvasKit();
              $async$goto = t1 ? 2 : 3;
              break;
            case 2:
              // then
              $async$goto = 4;
              return A._asyncAwait(A.initializeCanvasKit(), $async$_initializePlatform);
            case 4:
              // returning from await.
            case 3:
              // join
              $async$goto = 5;
              return A._asyncAwait(A.webOnlySetAssetManager(B.C_AssetManager), $async$_initializePlatform);
            case 5:
              // returning from await.
              $async$goto = t1 ? 6 : 8;
              break;
            case 6:
              // then
              $async$goto = 9;
              return A._asyncAwait($._skiaFontCollection.ensureFontsLoaded$0(), $async$_initializePlatform);
            case 9:
              // returning from await.
              // goto join
              $async$goto = 7;
              break;
            case 8:
              // else
              $async$goto = 10;
              return A._asyncAwait($._fontCollection.ensureFontsLoaded$0(), $async$_initializePlatform);
            case 10:
              // returning from await.
            case 7:
              // join
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_initializePlatform, $async$completer);
    },
    webOnlySetAssetManager(assetManager) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, t1, t2;
      var $async$webOnlySetAssetManager = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (assetManager === $._assetManager) {
                // goto return
                $async$goto = 1;
                break;
              }
              $._assetManager = assetManager;
              t1 = $.$get$useCanvasKit();
              if (t1) {
                if ($._skiaFontCollection == null) {
                  t2 = type$.String;
                  $._skiaFontCollection = new A.SkiaFontCollection(A.LinkedHashSet_LinkedHashSet$_empty(t2), A._setArrayType([], type$.JSArray_Future_nullable_RegisteredFont), A._setArrayType([], type$.JSArray_RegisteredFont), A.LinkedHashMap_LinkedHashMap$_empty(t2, type$.List_SkFont));
                }
              } else {
                t2 = $._fontCollection;
                if (t2 == null)
                  t2 = $._fontCollection = new A.FontCollection();
                t2._testFontManager = t2._assetFontManager = null;
                if ($.$get$supportsFontsClearApi())
                  document.fonts.clear();
              }
              t2 = $._assetManager;
              $async$goto = t2 != null ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = t1 ? 5 : 7;
              break;
            case 5:
              // then
              $async$goto = 8;
              return A._asyncAwait($._skiaFontCollection.registerFonts$1(t2), $async$webOnlySetAssetManager);
            case 8:
              // returning from await.
              // goto join
              $async$goto = 6;
              break;
            case 7:
              // else
              $async$goto = 9;
              return A._asyncAwait($._fontCollection.registerFonts$1(t2), $async$webOnlySetAssetManager);
            case 9:
              // returning from await.
            case 6:
              // join
            case 4:
              // join
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$webOnlySetAssetManager, $async$completer);
    },
    KeyData__typeToString(type) {
      switch (type.index) {
        case 1:
          return "up";
        case 0:
          return "down";
        case 2:
          return "repeat";
      }
    },
    lerpDouble(a, b, t) {
      var t1;
      if (a != b)
        if ((a == null ? null : isNaN(a)) === true)
          t1 = (b == null ? null : isNaN(b)) === true;
        else
          t1 = false;
      else
        t1 = true;
      if (t1)
        return a == null ? null : a;
      if (a == null)
        a = 0;
      if (b == null)
        b = 0;
      return a * (1 - t) + b * t;
    },
    _lerpDouble(a, b, t) {
      return a * (1 - t) + b * t;
    },
    _lerpInt(a, b, t) {
      return a * (1 - t) + b * t;
    },
    _scaleAlpha(a, factor) {
      var t1 = a.value;
      return A.Color$fromARGB(A.clampInt(B.JSNumber_methods.round$0((t1 >>> 24 & 255) * factor), 0, 255), t1 >>> 16 & 255, t1 >>> 8 & 255, t1 & 255);
    },
    Color$fromARGB(a, r, g, b) {
      return new A.Color(((a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255) >>> 0);
    },
    Color__linearizeColorComponent(component) {
      if (component <= 0.03928)
        return component / 12.92;
      return Math.pow((component + 0.055) / 1.055, 2.4);
    },
    Color_lerp(a, b, t) {
      var t1, t2;
      if (b == null)
        if (a == null)
          return null;
        else
          return A._scaleAlpha(a, 1 - t);
      else if (a == null)
        return A._scaleAlpha(b, t);
      else {
        t1 = a.value;
        t2 = b.value;
        return A.Color$fromARGB(A.clampInt(B.JSNumber_methods.toInt$0(A._lerpInt(t1 >>> 24 & 255, t2 >>> 24 & 255, t)), 0, 255), A.clampInt(B.JSNumber_methods.toInt$0(A._lerpInt(t1 >>> 16 & 255, t2 >>> 16 & 255, t)), 0, 255), A.clampInt(B.JSNumber_methods.toInt$0(A._lerpInt(t1 >>> 8 & 255, t2 >>> 8 & 255, t)), 0, 255), A.clampInt(B.JSNumber_methods.toInt$0(A._lerpInt(t1 & 255, t2 & 255, t)), 0, 255));
      }
    },
    Color_alphaBlend(foreground, background) {
      var invAlpha, t2, backAlpha, t3, t4, t5, t6, outAlpha,
        t1 = foreground.value,
        alpha = t1 >>> 24 & 255;
      if (alpha === 0)
        return background;
      invAlpha = 255 - alpha;
      t2 = background.value;
      backAlpha = t2 >>> 24 & 255;
      t3 = t1 & 255;
      t4 = t2 & 255;
      t5 = t1 >>> 16 & 255;
      t6 = t2 >>> 16 & 255;
      t1 = t1 >>> 8 & 255;
      t2 = t2 >>> 8 & 255;
      if (backAlpha === 255)
        return A.Color$fromARGB(255, B.JSInt_methods._tdivFast$1(alpha * t5 + invAlpha * t6, 255), B.JSInt_methods._tdivFast$1(alpha * t1 + invAlpha * t2, 255), B.JSInt_methods._tdivFast$1(alpha * t3 + invAlpha * t4, 255));
      else {
        backAlpha = B.JSInt_methods._tdivFast$1(backAlpha * invAlpha, 255);
        outAlpha = alpha + backAlpha;
        return A.Color$fromARGB(outAlpha, B.JSInt_methods.$tdiv(t5 * alpha + t6 * backAlpha, outAlpha), B.JSInt_methods.$tdiv(t1 * alpha + t2 * backAlpha, outAlpha), B.JSInt_methods.$tdiv(t3 * alpha + t4 * backAlpha, outAlpha));
      }
    },
    Gradient_Gradient$linear(from, to, colors, colorStops, tileMode) {
      var t1;
      if ($.$get$useCanvasKit()) {
        t1 = new A.CkGradientLinear(from, to, colors, colorStops, tileMode, null);
        t1.ManagedSkiaObject$1(null, type$.SkShader);
      } else
        t1 = new A.GradientLinear(from, to, colors, colorStops, tileMode, null);
      return t1;
    },
    Shadow_convertRadiusToSigma(radius) {
      return radius > 0 ? radius * 0.57735 + 0.5 : 0;
    },
    Path_Path() {
      if ($.$get$useCanvasKit()) {
        var t1 = new A.CkPath(B.PathFillType_0);
        t1.ManagedSkiaObject$1(null, type$.SkPath);
        return t1;
      } else
        return A.SurfacePath$();
    },
    PlatformConfiguration$(accessibilityFeatures, alwaysUse24HourFormat, defaultRouteName, locales, platformBrightness, semanticsEnabled, textScaleFactor) {
      return new A.PlatformConfiguration(accessibilityFeatures, false, semanticsEnabled, platformBrightness, textScaleFactor, locales, defaultRouteName);
    },
    PointerData$(buttons, change, device, distance, distanceMax, kind, obscured, orientation, physicalDeltaX, physicalDeltaY, physicalX, physicalY, platformData, pointerIdentifier, pressure, pressureMax, pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, scrollDeltaX, scrollDeltaY, signalKind, size, synthesized, tilt, timeStamp) {
      return new A.PointerData(timeStamp, change, kind, signalKind, device, pointerIdentifier, physicalX, physicalY, physicalDeltaX, physicalDeltaY, buttons, false, synthesized, pressure, pressureMin, pressureMax, distance, distanceMax, size, radiusMajor, radiusMinor, radiusMin, radiusMax, orientation, tilt, platformData, scrollDeltaX, scrollDeltaY);
    },
    FontWeight_lerp(a, b, t) {
      var t2,
        t1 = a == null;
      if (t1 && b == null)
        return null;
      t1 = t1 ? null : a.index;
      if (t1 == null)
        t1 = 3;
      t2 = b == null ? null : b.index;
      t1 = A.lerpDouble(t1, t2 == null ? 3 : t2, t);
      t1.toString;
      return B.List_27p[A.clampInt(B.JSNumber_methods.round$0(t1), 0, 8)];
    },
    TextStyle_TextStyle(background, color, decoration, decorationColor, decorationStyle, decorationThickness, fontFamily, fontFamilyFallback, fontFeatures, fontSize, fontStyle, fontWeight, foreground, height, leadingDistribution, letterSpacing, locale, shadows, textBaseline, wordSpacing) {
      var t1;
      if ($.$get$useCanvasKit()) {
        t1 = type$.nullable_CkPaint;
        return A.CkTextStyle_CkTextStyle(t1._as(background), color, decoration, decorationColor, decorationStyle, decorationThickness, fontFamily, fontFamilyFallback, fontFeatures, fontSize, fontStyle, fontWeight, t1._as(foreground), height, leadingDistribution, letterSpacing, locale, shadows, textBaseline, wordSpacing);
      } else
        return A.EngineTextStyle$only(background, color, decoration, decorationColor, decorationStyle, decorationThickness, fontFamily, fontFamilyFallback, fontFeatures, fontSize, fontStyle, fontWeight, foreground, height, letterSpacing, locale, shadows, textBaseline, wordSpacing);
    },
    ParagraphStyle_ParagraphStyle(ellipsis, fontFamily, fontSize, fontStyle, fontWeight, height, locale, maxLines, strutStyle, textAlign, textDirection, textHeightBehavior) {
      var properties, t1, t2, t3, skStrutStyle, effectiveLeadingDistribution, skTextStyle, _null = null;
      if ($.$get$useCanvasKit()) {
        properties = A.SkParagraphStyleProperties$(_null);
        t1 = $.$get$_skTextAligns()[textAlign.index];
        properties.textAlign = t1;
        t1 = textDirection == null;
        if (!t1)
          properties.textDirection = $.$get$_skTextDirections()[textDirection.index];
        t2 = height != null;
        if (t2)
          properties.heightMultiplier = height;
        t3 = textHeightBehavior == null;
        if (!t3)
          properties.textHeightBehavior = $.$get$_skTextHeightBehaviors()[0];
        if (ellipsis != null)
          properties.ellipsis = ellipsis;
        if (strutStyle != null) {
          type$.CkStrutStyle._as(strutStyle);
          skStrutStyle = A.SkStrutStyleProperties$(_null);
          skStrutStyle.fontFamilies = A._getEffectiveFontFamilies(strutStyle._fontFamily, strutStyle._fontFamilyFallback);
          skStrutStyle.heightMultiplier = strutStyle.__engine$_height;
          effectiveLeadingDistribution = t3 ? _null : textHeightBehavior.leadingDistribution;
          switch (effectiveLeadingDistribution) {
            case null:
              break;
            case B.TextLeadingDistribution_1:
              skStrutStyle.halfLeading = true;
              break;
            case B.TextLeadingDistribution_0:
              skStrutStyle.halfLeading = false;
              break;
          }
          skStrutStyle.leading = strutStyle._leading;
          skStrutStyle.fontStyle = A.toSkFontStyle(strutStyle._fontWeight, strutStyle._fontStyle);
          skStrutStyle.forceStrutHeight = strutStyle._forceStrutHeight;
          skStrutStyle.strutEnabled = true;
          properties.strutStyle = skStrutStyle;
        }
        skTextStyle = A.SkTextStyleProperties$(_null);
        if (fontWeight != null || false)
          skTextStyle.fontStyle = A.toSkFontStyle(fontWeight, fontStyle);
        if (fontSize != null)
          skTextStyle.fontSize = fontSize;
        if (t2)
          skTextStyle.heightMultiplier = height;
        skTextStyle.fontFamilies = A._getEffectiveFontFamilies(fontFamily, _null);
        properties.textStyle = skTextStyle;
        t2 = J.ParagraphStyle$1$x($.__canvasKit._readField$0(), properties);
        t1 = t1 ? B.TextDirection_1 : textDirection;
        return new A.CkParagraphStyle(t2, t1, fontFamily, fontSize, height, fontWeight, fontStyle, t3 ? _null : textHeightBehavior.leadingDistribution);
      } else
        return new A.EngineParagraphStyle(textAlign, textDirection, fontWeight, fontStyle, maxLines, fontFamily, fontSize, height, textHeightBehavior, type$.nullable_EngineStrutStyle._as(strutStyle), ellipsis, locale);
    },
    ParagraphBuilder_ParagraphBuilder(style) {
      if ($.$get$useCanvasKit())
        return A.CkParagraphBuilder$(style);
      type$.EngineParagraphStyle._as(style);
      return new A.CanvasParagraphBuilder(new A.StringBuffer(""), style, A._setArrayType([], type$.JSArray_ParagraphSpan), A._setArrayType([], type$.JSArray_StyleNode), new A.RootStyleNode(style), A._setArrayType([], type$.JSArray_double));
    },
    ClipOp: function ClipOp(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    PathFillType: function PathFillType(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    _ChannelCallbackRecord: function _ChannelCallbackRecord(t0, t1) {
      this._callback = t0;
      this._ui$_zone = t1;
    },
    _StoredMessage: function _StoredMessage(t0, t1, t2) {
      this.data = t0;
      this._callback = t1;
      this._ui$_zone = t2;
    },
    _Channel: function _Channel(t0, t1) {
      var _ = this;
      _._ui$_queue = t0;
      _.debugEnableDiscardWarnings = true;
      _._capacity = t1;
      _._draining = false;
      _._channelCallbackRecord = null;
    },
    ChannelBuffers: function ChannelBuffers(t0) {
      this._channels = t0;
    },
    ChannelBuffers_push_closure: function ChannelBuffers_push_closure() {
    },
    ChannelBuffers_setListener_closure: function ChannelBuffers_setListener_closure() {
    },
    OffsetBase: function OffsetBase() {
    },
    Offset: function Offset(t0, t1) {
      this._dx = t0;
      this._dy = t1;
    },
    Size: function Size(t0, t1) {
      this._dx = t0;
      this._dy = t1;
    },
    Rect: function Rect(t0, t1, t2, t3) {
      var _ = this;
      _.left = t0;
      _.top = t1;
      _.right = t2;
      _.bottom = t3;
    },
    Radius: function Radius(t0, t1) {
      this.x = t0;
      this.y = t1;
    },
    RRect: function RRect(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.left = t0;
      _.top = t1;
      _.right = t2;
      _.bottom = t3;
      _.tlRadiusX = t4;
      _.tlRadiusY = t5;
      _.trRadiusX = t6;
      _.trRadiusY = t7;
      _.brRadiusX = t8;
      _.brRadiusY = t9;
      _.blRadiusX = t10;
      _.blRadiusY = t11;
      _.webOnlyUniformRadii = t12;
    },
    _HashEnd: function _HashEnd() {
    },
    webOnlyInitializePlatform_closure: function webOnlyInitializePlatform_closure() {
    },
    KeyEventType: function KeyEventType(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    KeyData: function KeyData(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.timeStamp = t0;
      _.type = t1;
      _.physical = t2;
      _.logical = t3;
      _.character = t4;
      _.synthesized = t5;
    },
    KeyData__logicalToString_closure: function KeyData__logicalToString_closure(t0) {
      this.planeNum = t0;
    },
    KeyData__quotedCharCode_closure: function KeyData__quotedCharCode_closure() {
    },
    Color: function Color(t0) {
      this.value = t0;
    },
    StrokeCap: function StrokeCap(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    StrokeJoin: function StrokeJoin(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    PaintingStyle: function PaintingStyle(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    BlendMode: function BlendMode(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    Clip: function Clip(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    MaskFilter: function MaskFilter(t0, t1) {
      this._ui$_style = t0;
      this._sigma = t1;
    },
    FilterQuality: function FilterQuality(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    Shadow: function Shadow() {
    },
    PlatformDispatcher: function PlatformDispatcher() {
    },
    PlatformConfiguration: function PlatformConfiguration(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.accessibilityFeatures = t0;
      _.alwaysUse24HourFormat = t1;
      _.semanticsEnabled = t2;
      _.platformBrightness = t3;
      _.textScaleFactor = t4;
      _.locales = t5;
      _.defaultRouteName = t6;
    },
    ViewConfiguration0: function ViewConfiguration0() {
    },
    FrameTiming: function FrameTiming(t0) {
      this._ui$_data = t0;
    },
    AppLifecycleState: function AppLifecycleState(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    Locale: function Locale(t0, t1) {
      this._languageCode = t0;
      this._countryCode = t1;
    },
    PointerChange: function PointerChange(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    PointerDeviceKind: function PointerDeviceKind(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    PointerSignalKind: function PointerSignalKind(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    PointerData: function PointerData(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27) {
      var _ = this;
      _.timeStamp = t0;
      _.change = t1;
      _.kind = t2;
      _.signalKind = t3;
      _.device = t4;
      _.pointerIdentifier = t5;
      _.physicalX = t6;
      _.physicalY = t7;
      _.physicalDeltaX = t8;
      _.physicalDeltaY = t9;
      _.buttons = t10;
      _.obscured = t11;
      _.synthesized = t12;
      _.pressure = t13;
      _.pressureMin = t14;
      _.pressureMax = t15;
      _.distance = t16;
      _.distanceMax = t17;
      _.size = t18;
      _.radiusMajor = t19;
      _.radiusMinor = t20;
      _.radiusMin = t21;
      _.radiusMax = t22;
      _.orientation = t23;
      _.tilt = t24;
      _.platformData = t25;
      _.scrollDeltaX = t26;
      _.scrollDeltaY = t27;
    },
    PointerDataPacket: function PointerDataPacket(t0) {
      this.data = t0;
    },
    SemanticsAction: function SemanticsAction(t0) {
      this.index = t0;
    },
    SemanticsFlag: function SemanticsFlag(t0) {
      this.index = t0;
    },
    SemanticsUpdateBuilder: function SemanticsUpdateBuilder(t0) {
      this._nodeUpdates = t0;
    },
    PlaceholderAlignment: function PlaceholderAlignment(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    FontWeight: function FontWeight(t0) {
      this.index = t0;
    },
    TextAlign: function TextAlign(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TextBaseline: function TextBaseline(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TextDecoration: function TextDecoration(t0) {
      this._mask = t0;
    },
    TextLeadingDistribution: function TextLeadingDistribution(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TextHeightBehavior: function TextHeightBehavior(t0) {
      this.leadingDistribution = t0;
    },
    TextDirection: function TextDirection(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TextBox: function TextBox(t0, t1, t2, t3, t4) {
      var _ = this;
      _.left = t0;
      _.top = t1;
      _.right = t2;
      _.bottom = t3;
      _.direction = t4;
    },
    TextAffinity: function TextAffinity(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TextPosition: function TextPosition(t0, t1) {
      this.offset = t0;
      this.affinity = t1;
    },
    TextRange: function TextRange(t0, t1) {
      this.start = t0;
      this.end = t1;
    },
    ParagraphConstraints: function ParagraphConstraints(t0) {
      this.width = t0;
    },
    BoxHeightStyle: function BoxHeightStyle(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    BoxWidthStyle: function BoxWidthStyle(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TileMode: function TileMode(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    FlutterView: function FlutterView() {
    },
    FlutterWindow: function FlutterWindow() {
    },
    SingletonFlutterWindow: function SingletonFlutterWindow() {
    },
    AccessibilityFeatures: function AccessibilityFeatures() {
    },
    Brightness: function Brightness(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    GestureSettings: function GestureSettings() {
    },
    AudioBuffer: function AudioBuffer() {
    },
    AudioParamMap: function AudioParamMap() {
    },
    AudioParamMap_keys_closure: function AudioParamMap_keys_closure(t0) {
      this.keys = t0;
    },
    AudioTrackList: function AudioTrackList() {
    },
    BaseAudioContext: function BaseAudioContext() {
    },
    OfflineAudioContext: function OfflineAudioContext() {
    },
    _AudioParamMap_JavaScriptObject_MapMixin: function _AudioParamMap_JavaScriptObject_MapMixin() {
    },
    ActiveInfo: function ActiveInfo() {
    },
    HeapPriorityQueue: function HeapPriorityQueue(t0, t1, t2) {
      var _ = this;
      _.comparison = t0;
      _._priority_queue$_queue = t1;
      _._priority_queue$_modificationCount = _._priority_queue$_length = 0;
      _.$ti = t2;
    },
    AnimationStatus: function AnimationStatus(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    Animation0: function Animation0() {
    },
    AnimationController$(debugLabel, duration, vsync) {
      var t1 = new A.AnimationController(debugLabel, duration, B._AnimationDirection_0, B.AnimationStatus_0, new A.ObserverList(A._setArrayType([], type$.JSArray_of_void_Function_AnimationStatus), type$.ObserverList_of_void_Function_AnimationStatus), new A.ObserverList(A._setArrayType([], type$.JSArray_of_void_Function), type$.ObserverList_of_void_Function));
      t1._ticker = vsync.createTicker$1(t1.get$_animation_controller$_tick());
      t1._internalSetValue$1(0);
      return t1;
    },
    _AnimationDirection: function _AnimationDirection(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    AnimationBehavior: function AnimationBehavior(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    AnimationController: function AnimationController(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.debugLabel = t0;
      _.duration = t1;
      _._simulation = _._ticker = null;
      _.__AnimationController__value = $;
      _._animation_controller$_direction = t2;
      _.__AnimationController__status = $;
      _._lastReportedStatus = t3;
      _.AnimationLocalStatusListenersMixin__statusListeners = t4;
      _.AnimationLocalListenersMixin__listeners = t5;
    },
    _InterpolationSimulation: function _InterpolationSimulation(t0, t1, t2, t3) {
      var _ = this;
      _._durationInSeconds = t0;
      _._begin = t1;
      _._animation_controller$_end = t2;
      _._curve = t3;
    },
    _AnimationController_Animation_AnimationEagerListenerMixin: function _AnimationController_Animation_AnimationEagerListenerMixin() {
    },
    _AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin: function _AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin() {
    },
    _AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin: function _AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin() {
    },
    CurvedAnimation$(curve, $parent) {
      var t1 = new A.CurvedAnimation($parent, curve);
      t1._updateCurveDirection$1(A._lateReadCheck($parent.__AnimationController__status, "_status"));
      $parent.addStatusListener$1(t1.get$_updateCurveDirection());
      return t1;
    },
    AnimationWithParentMixin: function AnimationWithParentMixin() {
    },
    CurvedAnimation: function CurvedAnimation(t0, t1) {
      this.parent = t0;
      this.curve = t1;
      this._curveDirection = null;
    },
    _CurvedAnimation_Animation_AnimationWithParentMixin: function _CurvedAnimation_Animation_AnimationWithParentMixin() {
    },
    ParametricCurve: function ParametricCurve() {
    },
    Curve: function Curve() {
    },
    _Linear: function _Linear() {
    },
    Cubic: function Cubic(t0, t1, t2) {
      this.a = t0;
      this.b = t1;
      this.c = t2;
    },
    AnimationEagerListenerMixin: function AnimationEagerListenerMixin() {
    },
    AnimationLocalListenersMixin: function AnimationLocalListenersMixin() {
    },
    AnimationLocalStatusListenersMixin: function AnimationLocalStatusListenersMixin() {
    },
    Animatable: function Animatable() {
    },
    _AnimatedEvaluation: function _AnimatedEvaluation(t0, t1, t2) {
      this.parent = t0;
      this._evaluatable = t1;
      this.$ti = t2;
    },
    Tween: function Tween(t0, t1, t2) {
      this.begin = t0;
      this.end = t1;
      this.$ti = t2;
    },
    ColorTween: function ColorTween(t0, t1) {
      this.begin = t0;
      this.end = t1;
    },
    IntTween: function IntTween(t0, t1) {
      this.begin = t0;
      this.end = t1;
    },
    __AnimatedEvaluation_Animation_AnimationWithParentMixin: function __AnimatedEvaluation_Animation_AnimationWithParentMixin() {
    },
    defaultTargetPlatform() {
      var t1 = $.$get$_testPlatform();
      return t1 == null ? $.$get$_browserPlatform() : t1;
    },
    _testPlatform_closure: function _testPlatform_closure() {
    },
    _browserPlatform_closure: function _browserPlatform_closure() {
    },
    ErrorDescription$(message) {
      var _null = null,
        t1 = A._setArrayType([message], type$.JSArray_Object);
      return new A.ErrorDescription(_null, false, true, _null, _null, _null, false, t1, _null, B.DiagnosticLevel_3, _null, false, false, _null, B.DiagnosticsTreeStyle_7);
    },
    ErrorSummary$(message) {
      var _null = null,
        t1 = A._setArrayType([message], type$.JSArray_Object);
      return new A.ErrorSummary(_null, false, true, _null, _null, _null, false, t1, _null, B.DiagnosticLevel_6, _null, false, false, _null, B.DiagnosticsTreeStyle_7);
    },
    ErrorHint$(message) {
      var _null = null,
        t1 = A._setArrayType([message], type$.JSArray_Object);
      return new A.ErrorHint(_null, false, true, _null, _null, _null, false, t1, _null, B.DiagnosticLevel_5, _null, false, false, _null, B.DiagnosticsTreeStyle_7);
    },
    ErrorSpacer$() {
      var _null = null;
      return new A.ErrorSpacer("", false, true, _null, _null, _null, false, _null, B.C__NoDefaultValue, B.DiagnosticLevel_3, "", true, false, _null, B.DiagnosticsTreeStyle_8);
    },
    FlutterError_FlutterError(message) {
      var lines = A._setArrayType(message.split("\n"), type$.JSArray_String),
        t1 = A._setArrayType([A.ErrorSummary$(B.JSArray_methods.get$first(lines))], type$.JSArray_DiagnosticsNode),
        t2 = A.SubListIterable$(lines, 1, null, type$.String);
      B.JSArray_methods.addAll$1(t1, new A.MappedListIterable(t2, new A.FlutterError_FlutterError_closure(), t2.$ti._eval$1("MappedListIterable<ListIterable.E,DiagnosticsNode>")));
      return new A.FlutterError(t1);
    },
    FlutterError$fromParts(diagnostics) {
      return new A.FlutterError(diagnostics);
    },
    FlutterError__defaultStackTraceDemangler(stackTrace) {
      return stackTrace;
    },
    FlutterError_dumpErrorToConsole(details, forceReport) {
      if ($.FlutterError__errorCount === 0 || false)
        A.debugPrintStack(J.toString$0$(details.exception), 100, details.stack);
      else
        A.print__debugPrintThrottled$closure().call$1("Another exception was thrown: " + details.get$summary().toString$0(0));
      $.FlutterError__errorCount = $.FlutterError__errorCount + 1;
    },
    FlutterError_defaultStackFilter($frames) {
      var skipped, index, t1, frame, className, $package, reasons, t2, _i, result, index0, t3, t4, suffix,
        removedPackagesAndClasses = A.LinkedHashMap_LinkedHashMap$_literal(["dart:async-patch", 0, "dart:async", 0, "package:stack_trace", 0, "class _AssertionError", 0, "class _FakeAsync", 0, "class _FrameCallbackEntry", 0, "class _Timer", 0, "class _RawReceivePortImpl", 0], type$.String, type$.int),
        parsedFrames = A.StackFrame_fromStackString(J.join$1$ax($frames, "\n"));
      for (skipped = 0, index = 0; t1 = parsedFrames.length, index < t1; ++index) {
        frame = parsedFrames[index];
        className = "class " + frame.className;
        $package = frame.packageScheme + ":" + frame.$package;
        if (removedPackagesAndClasses.containsKey$1(0, className)) {
          ++skipped;
          removedPackagesAndClasses.update$2(removedPackagesAndClasses, className, new A.FlutterError_defaultStackFilter_closure());
          B.JSArray_methods.removeAt$1(parsedFrames, index);
          --index;
        } else if (removedPackagesAndClasses.containsKey$1(0, $package)) {
          ++skipped;
          removedPackagesAndClasses.update$2(removedPackagesAndClasses, $package, new A.FlutterError_defaultStackFilter_closure0());
          B.JSArray_methods.removeAt$1(parsedFrames, index);
          --index;
        }
      }
      reasons = A.List_List$filled(t1, null, false, type$.nullable_String);
      for (t2 = $.FlutterError__stackFilters.length, _i = 0; _i < $.FlutterError__stackFilters.length; $.FlutterError__stackFilters.length === t2 || (0, A.throwConcurrentModificationError)($.FlutterError__stackFilters), ++_i)
        $.FlutterError__stackFilters[_i].filter$2(0, parsedFrames, reasons);
      t2 = type$.JSArray_String;
      result = A._setArrayType([], t2);
      for (--t1, index = 0; index < parsedFrames.length; index = index0 + 1) {
        index0 = index;
        while (true) {
          if (index0 < t1) {
            t3 = reasons[index0];
            t3 = t3 != null && J.$eq$(reasons[index0 + 1], t3);
          } else
            t3 = false;
          if (!t3)
            break;
          ++index0;
        }
        t3 = reasons[index0];
        t4 = t3 == null;
        if (!t4)
          suffix = index0 !== index ? " (" + (index0 - index + 2) + " frames)" : " (1 frame)";
        else
          suffix = "";
        result.push(A.S(t4 ? parsedFrames[index0].source : t3) + suffix);
      }
      t1 = A._setArrayType([], t2);
      for (t2 = removedPackagesAndClasses.get$entries(removedPackagesAndClasses), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        t3 = t2.get$current(t2);
        if (t3.value > 0)
          t1.push(t3.key);
      }
      B.JSArray_methods.sort$0(t1);
      if (skipped === 1)
        result.push("(elided one frame from " + B.JSArray_methods.get$single(t1) + ")");
      else if (skipped > 1) {
        t2 = t1.length;
        if (t2 > 1)
          t1[t2 - 1] = "and " + B.JSArray_methods.get$last(t1);
        if (t1.length > 2)
          result.push("(elided " + skipped + " frames from " + B.JSArray_methods.join$1(t1, ", ") + ")");
        else
          result.push("(elided " + skipped + " frames from " + B.JSArray_methods.join$1(t1, " ") + ")");
      }
      return result;
    },
    FlutterError_reportError(details) {
      var t1 = $.$get$FlutterError_onError();
      if (t1 != null)
        t1.call$1(details);
    },
    debugPrintStack(label, maxFrames, stackTrace) {
      var lines, t1;
      if (label != null)
        A.print__debugPrintThrottled$closure().call$1(label);
      lines = A._setArrayType(B.JSString_methods.trimRight$0(J.toString$0$(stackTrace == null ? A.StackTrace_current() : A.FlutterError__defaultStackTraceDemangler(stackTrace))).split("\n"), type$.JSArray_String);
      t1 = lines.length;
      lines = J.take$1$ax(t1 !== 0 ? new A.SkipWhileIterable(lines, new A.debugPrintStack_closure(), type$.SkipWhileIterable_String) : lines, maxFrames);
      A.print__debugPrintThrottled$closure().call$1(B.JSArray_methods.join$1(A.FlutterError_defaultStackFilter(lines), "\n"));
    },
    DiagnosticsStackTrace$($name, stack, stackFilter) {
      var t1 = A.DiagnosticsStackTrace__applyStackFilter(stack, stackFilter);
      return new A.DiagnosticsStackTrace(B.List_empty, t1, "", stack, true, $name, true, true, null, B.DiagnosticsTreeStyle_7);
    },
    DiagnosticsStackTrace__applyStackFilter(stack, stackFilter) {
      if (stack == null)
        return A._setArrayType([], type$.JSArray_DiagnosticsNode);
      return J.map$1$1$ax(A.FlutterError_defaultStackFilter(A._setArrayType(B.JSString_methods.trimRight$0(A.S(A.FlutterError__defaultStackTraceDemangler(stack))).split("\n"), type$.JSArray_String)), A.assertions_DiagnosticsStackTrace__createStackFrame$closure(), type$.DiagnosticsNode).toList$0(0);
    },
    DiagnosticsStackTrace__createStackFrame(frame) {
      return A.DiagnosticsNode_DiagnosticsNode$message(frame, false);
    },
    _FlutterErrorDetailsNode$($name, style, value) {
      return new A._FlutterErrorDetailsNode(value, $name, true, true, null, style);
    },
    _ErrorDiagnostic: function _ErrorDiagnostic() {
    },
    ErrorDescription: function ErrorDescription(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _._description = t0;
      _.expandableValue = t1;
      _.allowWrap = t2;
      _.ifNull = t3;
      _.ifEmpty = t4;
      _.tooltip = t5;
      _.missingIfNull = t6;
      _._value = t7;
      _._valueComputed = true;
      _._diagnostics$_exception = null;
      _.defaultValue = t8;
      _._defaultLevel = t9;
      _.name = t10;
      _.showSeparator = t11;
      _.showName = t12;
      _.linePrefix = t13;
      _.style = t14;
    },
    ErrorSummary: function ErrorSummary(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _._description = t0;
      _.expandableValue = t1;
      _.allowWrap = t2;
      _.ifNull = t3;
      _.ifEmpty = t4;
      _.tooltip = t5;
      _.missingIfNull = t6;
      _._value = t7;
      _._valueComputed = true;
      _._diagnostics$_exception = null;
      _.defaultValue = t8;
      _._defaultLevel = t9;
      _.name = t10;
      _.showSeparator = t11;
      _.showName = t12;
      _.linePrefix = t13;
      _.style = t14;
    },
    ErrorHint: function ErrorHint(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _._description = t0;
      _.expandableValue = t1;
      _.allowWrap = t2;
      _.ifNull = t3;
      _.ifEmpty = t4;
      _.tooltip = t5;
      _.missingIfNull = t6;
      _._value = t7;
      _._valueComputed = true;
      _._diagnostics$_exception = null;
      _.defaultValue = t8;
      _._defaultLevel = t9;
      _.name = t10;
      _.showSeparator = t11;
      _.showName = t12;
      _.linePrefix = t13;
      _.style = t14;
    },
    ErrorSpacer: function ErrorSpacer(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _._description = t0;
      _.expandableValue = t1;
      _.allowWrap = t2;
      _.ifNull = t3;
      _.ifEmpty = t4;
      _.tooltip = t5;
      _.missingIfNull = t6;
      _._value = t7;
      _._valueComputed = true;
      _._diagnostics$_exception = null;
      _.defaultValue = t8;
      _._defaultLevel = t9;
      _.name = t10;
      _.showSeparator = t11;
      _.showName = t12;
      _.linePrefix = t13;
      _.style = t14;
    },
    FlutterErrorDetails: function FlutterErrorDetails(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.exception = t0;
      _.stack = t1;
      _.library = t2;
      _.context = t3;
      _.informationCollector = t4;
      _.silent = t5;
    },
    FlutterErrorDetails_summary_formatException: function FlutterErrorDetails_summary_formatException(t0) {
      this.$this = t0;
    },
    FlutterErrorDetails_summary_closure: function FlutterErrorDetails_summary_closure() {
    },
    FlutterErrorDetails_summary_closure0: function FlutterErrorDetails_summary_closure0() {
    },
    FlutterErrorDetails_debugFillProperties_closure: function FlutterErrorDetails_debugFillProperties_closure() {
    },
    FlutterError: function FlutterError(t0) {
      this.diagnostics = t0;
    },
    FlutterError_FlutterError_closure: function FlutterError_FlutterError_closure() {
    },
    FlutterError_defaultStackFilter_closure: function FlutterError_defaultStackFilter_closure() {
    },
    FlutterError_defaultStackFilter_closure0: function FlutterError_defaultStackFilter_closure0() {
    },
    FlutterError_toString_closure: function FlutterError_toString_closure(t0) {
      this.renderer = t0;
    },
    debugPrintStack_closure: function debugPrintStack_closure() {
    },
    DiagnosticsStackTrace: function DiagnosticsStackTrace(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _._children = t0;
      _._properties = t1;
      _._description = t2;
      _.value = t3;
      _.allowTruncate = t4;
      _.name = t5;
      _.showSeparator = t6;
      _.showName = t7;
      _.linePrefix = t8;
      _.style = t9;
    },
    _FlutterErrorDetailsNode: function _FlutterErrorDetailsNode(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.value = t0;
      _._cachedBuilder = null;
      _.name = t1;
      _.showSeparator = t2;
      _.showName = t3;
      _.linePrefix = t4;
      _.style = t5;
    },
    _FlutterError_Error_DiagnosticableTreeMixin: function _FlutterError_Error_DiagnosticableTreeMixin() {
    },
    _FlutterErrorDetails_Object_Diagnosticable: function _FlutterErrorDetails_Object_Diagnosticable() {
    },
    BindingBase: function BindingBase() {
    },
    BindingBase_initServiceExtensions_closure: function BindingBase_initServiceExtensions_closure() {
    },
    BindingBase_initServiceExtensions_closure0: function BindingBase_initServiceExtensions_closure0() {
    },
    BindingBase_initServiceExtensions_closure1: function BindingBase_initServiceExtensions_closure1() {
    },
    BindingBase_initServiceExtensions_closure2: function BindingBase_initServiceExtensions_closure2() {
    },
    BindingBase_lockEvents_closure: function BindingBase_lockEvents_closure(t0, t1) {
      this.$this = t0;
      this.timelineTask = t1;
    },
    BindingBase_registerBoolServiceExtension_closure: function BindingBase_registerBoolServiceExtension_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.setter = t1;
      _.name = t2;
      _.getter = t3;
    },
    BindingBase_registerNumericServiceExtension_closure: function BindingBase_registerNumericServiceExtension_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.name = t1;
      _.setter = t2;
      _.getter = t3;
    },
    BindingBase_registerStringServiceExtension_closure: function BindingBase_registerStringServiceExtension_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.setter = t1;
      _.name = t2;
      _.getter = t3;
    },
    BindingBase_registerServiceExtension_closure: function BindingBase_registerServiceExtension_closure(t0, t1) {
      this.methodName = t0;
      this.callback = t1;
    },
    BindingBase_registerServiceExtension__closure: function BindingBase_registerServiceExtension__closure() {
    },
    DebugReassembleConfig: function DebugReassembleConfig(t0) {
      this.widgetName = t0;
    },
    Listenable: function Listenable() {
    },
    ChangeNotifier: function ChangeNotifier() {
    },
    ChangeNotifier_notifyListeners_closure: function ChangeNotifier_notifyListeners_closure(t0) {
      this.$this = t0;
    },
    ValueNotifier: function ValueNotifier(t0, t1) {
      var _ = this;
      _._change_notifier$_value = t0;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t1;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__debugDisposed = false;
    },
    TextTreeConfiguration$(addBlankLineIfNoChildren, afterDescriptionIfBody, afterName, afterProperties, beforeName, beforeProperties, bodyIndent, footer, isBlankLineBetweenPropertiesAndChildren, isNameOnOwnLine, lineBreak, lineBreakProperties, linkCharacter, mandatoryFooter, prefixLastChildLineOne, prefixLineOne, prefixOtherLines, prefixOtherLinesRootNode, propertyPrefixIfChildren, propertyPrefixNoChildren, propertySeparator, showChildren, suffixLineOne) {
      return new A.TextTreeConfiguration(prefixLineOne, suffixLineOne, prefixOtherLines, prefixLastChildLineOne, prefixOtherLinesRootNode, propertyPrefixIfChildren, propertyPrefixNoChildren, linkCharacter, B.JSString_methods.$mul(" ", linkCharacter.length), lineBreak, lineBreakProperties, beforeName, afterName, afterDescriptionIfBody, beforeProperties, afterProperties, propertySeparator, bodyIndent, showChildren, addBlankLineIfNoChildren, isNameOnOwnLine, footer, mandatoryFooter, isBlankLineBetweenPropertiesAndChildren);
    },
    _PrefixedStringBuilder__wordWrapLine(message, wrapRanges, width, otherLineOffset, startOffset) {
      var wrappedLine, startForLengthCalculations, lastWordStart, noWrap, t2, addPrefix, index, mode, lastWordEnd, start, t3, _box_0 = {},
        t1 = message.length;
      if (t1 + startOffset < width)
        return A._setArrayType([message], type$.JSArray_String);
      wrappedLine = A._setArrayType([], type$.JSArray_String);
      startForLengthCalculations = -startOffset;
      lastWordStart = A._Cell$named("lastWordStart");
      _box_0.currentChunk = 0;
      noWrap = new A._PrefixedStringBuilder__wordWrapLine_noWrap(_box_0, wrapRanges);
      for (t2 = lastWordStart.__late_helper$_name, addPrefix = false, index = 0, mode = B._WordWrapParseMode_0, lastWordEnd = null, start = 0; true;)
        switch (mode.index) {
          case 0:
            while (true) {
              if (!(index < t1 && message[index] === " "))
                break;
              ++index;
            }
            lastWordStart.__late_helper$_value = index;
            mode = B._WordWrapParseMode_1;
            break;
          case 1:
            while (true) {
              if (index < t1)
                t3 = message[index] !== " " || noWrap.call$1(index);
              else
                t3 = false;
              if (!t3)
                break;
              ++index;
            }
            mode = B._WordWrapParseMode_2;
            break;
          case 2:
            t3 = index - startForLengthCalculations;
            if (t3 > width || index === t1) {
              if (t3 <= width || lastWordEnd == null)
                lastWordEnd = index;
              wrappedLine.push(B.JSString_methods.substring$2(message, start, lastWordEnd));
              if (lastWordEnd >= t1)
                return wrappedLine;
              if (lastWordEnd === index) {
                while (true) {
                  if (!(index < t1 && message[index] === " "))
                    break;
                  ++index;
                }
                start = index;
                mode = B._WordWrapParseMode_1;
              } else {
                start = lastWordStart.__late_helper$_value;
                if (start === lastWordStart)
                  A.throwExpression(A.LateError$localNI(t2));
                mode = B._WordWrapParseMode_2;
              }
              startForLengthCalculations = start - otherLineOffset;
              addPrefix = true;
              lastWordEnd = null;
            } else {
              lastWordEnd = index;
              mode = B._WordWrapParseMode_0;
            }
            break;
        }
    },
    DiagnosticsNode_DiagnosticsNode$message(message, allowWrap) {
      var _null = null;
      return A.DiagnosticsProperty$("", _null, allowWrap, B.C__NoDefaultValue, message, false, _null, _null, B.DiagnosticLevel_3, false, false, true, B.DiagnosticsTreeStyle_8, _null, type$.void);
    },
    DiagnosticsProperty$($name, value, allowWrap, defaultValue, description, expandableValue, ifEmpty, ifNull, level, missingIfNull, showName, showSeparator, style, tooltip, $T) {
      var t1;
      if (ifNull == null)
        t1 = missingIfNull ? "MISSING" : null;
      else
        t1 = ifNull;
      return new A.DiagnosticsProperty(description, false, allowWrap, t1, ifEmpty, tooltip, missingIfNull, value, defaultValue, level, $name, showSeparator, showName, null, style, $T._eval$1("DiagnosticsProperty<0>"));
    },
    DiagnosticableTreeNode$($name, style, value) {
      return new A.DiagnosticableTreeNode(value, $name, true, true, null, style);
    },
    shortHash(object) {
      return B.JSString_methods.padLeft$2(B.JSInt_methods.toRadixString$1(J.get$hashCode$(object) & 1048575, 16), 5, "0");
    },
    DiagnosticLevel: function DiagnosticLevel(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    DiagnosticsTreeStyle: function DiagnosticsTreeStyle(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TextTreeConfiguration: function TextTreeConfiguration(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23) {
      var _ = this;
      _.prefixLineOne = t0;
      _.suffixLineOne = t1;
      _.prefixOtherLines = t2;
      _.prefixLastChildLineOne = t3;
      _.prefixOtherLinesRootNode = t4;
      _.propertyPrefixIfChildren = t5;
      _.propertyPrefixNoChildren = t6;
      _.linkCharacter = t7;
      _.childLinkSpace = t8;
      _.lineBreak = t9;
      _.lineBreakProperties = t10;
      _.beforeName = t11;
      _.afterName = t12;
      _.afterDescriptionIfBody = t13;
      _.beforeProperties = t14;
      _.afterProperties = t15;
      _.propertySeparator = t16;
      _.bodyIndent = t17;
      _.showChildren = t18;
      _.addBlankLineIfNoChildren = t19;
      _.isNameOnOwnLine = t20;
      _.footer = t21;
      _.mandatoryFooter = t22;
      _.isBlankLineBetweenPropertiesAndChildren = t23;
    },
    _WordWrapParseMode: function _WordWrapParseMode(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    _PrefixedStringBuilder: function _PrefixedStringBuilder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.prefixLineOne = t0;
      _._prefixOtherLines = t1;
      _._nextPrefixOtherLines = null;
      _.wrapWidth = t2;
      _._diagnostics$_buffer = t3;
      _._currentLine = t4;
      _._wrappableRanges = t5;
      _._numLines = 0;
    },
    _PrefixedStringBuilder__wordWrapLine_noWrap: function _PrefixedStringBuilder__wordWrapLine_noWrap(t0, t1) {
      this._box_0 = t0;
      this.wrapRanges = t1;
    },
    _NoDefaultValue: function _NoDefaultValue() {
    },
    TextTreeRenderer: function TextTreeRenderer(t0, t1, t2, t3) {
      var _ = this;
      _._wrapWidth = t0;
      _._wrapWidthProperties = t1;
      _._minLevel = t2;
      _._maxDescendentsTruncatableNode = t3;
    },
    TextTreeRenderer__debugRender_visitor: function TextTreeRenderer__debugRender_visitor(t0, t1) {
      this._box_0 = t0;
      this.descendants = t1;
    },
    TextTreeRenderer__debugRender_closure: function TextTreeRenderer__debugRender_closure(t0) {
      this.$this = t0;
    },
    DiagnosticsNode: function DiagnosticsNode() {
    },
    DiagnosticsProperty: function DiagnosticsProperty(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15) {
      var _ = this;
      _._description = t0;
      _.expandableValue = t1;
      _.allowWrap = t2;
      _.ifNull = t3;
      _.ifEmpty = t4;
      _.tooltip = t5;
      _.missingIfNull = t6;
      _._value = t7;
      _._valueComputed = true;
      _._diagnostics$_exception = null;
      _.defaultValue = t8;
      _._defaultLevel = t9;
      _.name = t10;
      _.showSeparator = t11;
      _.showName = t12;
      _.linePrefix = t13;
      _.style = t14;
      _.$ti = t15;
    },
    DiagnosticableNode: function DiagnosticableNode() {
    },
    DiagnosticableTreeNode: function DiagnosticableTreeNode(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.value = t0;
      _._cachedBuilder = null;
      _.name = t1;
      _.showSeparator = t2;
      _.showName = t3;
      _.linePrefix = t4;
      _.style = t5;
    },
    DiagnosticPropertiesBuilder: function DiagnosticPropertiesBuilder(t0, t1) {
      this.properties = t0;
      this.defaultDiagnosticsTreeStyle = t1;
      this.emptyBodyDescription = null;
    },
    Diagnosticable: function Diagnosticable() {
    },
    DiagnosticableTree: function DiagnosticableTree() {
    },
    DiagnosticableTreeMixin: function DiagnosticableTreeMixin() {
    },
    DiagnosticsBlock: function DiagnosticsBlock() {
    },
    _DiagnosticableTree_Object_Diagnosticable: function _DiagnosticableTree_Object_Diagnosticable() {
    },
    Key: function Key() {
    },
    LocalKey: function LocalKey() {
    },
    LicenseEntry: function LicenseEntry() {
    },
    LicenseEntryWithLineBreaks: function LicenseEntryWithLineBreaks() {
    },
    AbstractNode: function AbstractNode() {
    },
    ObserverList: function ObserverList(t0, t1) {
      var _ = this;
      _._list = t0;
      _._isDirty = false;
      _.__ObserverList__set = $;
      _.$ti = t1;
    },
    HashedObserverList: function HashedObserverList(t0, t1) {
      this._observer_list$_map = t0;
      this.$ti = t1;
    },
    TargetPlatform: function TargetPlatform(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    WriteBuffer$() {
      var t1 = A.Uint8Buffer$(),
        t2 = new DataView(new ArrayBuffer(8));
      t1 = new A.WriteBuffer0(t1, t2);
      t1.__WriteBuffer__eightBytesAsList = A.NativeUint8List_NativeUint8List$view(t2.buffer, 0, null);
      return t1;
    },
    WriteBuffer0: function WriteBuffer0(t0, t1) {
      var _ = this;
      _._serialization$_buffer = t0;
      _._isDone = false;
      _._serialization$_eightBytes = t1;
      _.__WriteBuffer__eightBytesAsList = $;
    },
    ReadBuffer0: function ReadBuffer0(t0) {
      this.data = t0;
      this._serialization$_position = 0;
    },
    StackFrame_fromStackString(stack) {
      var t1 = type$.WhereTypeIterable_StackFrame;
      return A.List_List$of(new A.WhereTypeIterable(new A.MappedIterable(new A.WhereIterable(A._setArrayType(B.JSString_methods.trim$0(stack).split("\n"), type$.JSArray_String), new A.StackFrame_fromStackString_closure(), type$.WhereIterable_String), A.stack_frame_StackFrame_fromStackTraceLine$closure(), type$.MappedIterable_of_String_and_nullable_StackFrame), t1), true, t1._eval$1("Iterable.E"));
    },
    StackFrame__parseWebFrame(line) {
      var t1 = A.StackFrame__parseWebNonDebugFrame(line);
      return t1;
    },
    StackFrame__parseWebNonDebugFrame(line) {
      var classAndMethod, className,
        _s9_ = "<unknown>",
        match = $.$get$StackFrame__webNonDebugFramePattern().firstMatch$1(line);
      if (match == null)
        return null;
      classAndMethod = A._setArrayType(match._match[1].split("."), type$.JSArray_String);
      className = classAndMethod.length > 1 ? B.JSArray_methods.get$first(classAndMethod) : _s9_;
      return new A.StackFrame(line, -1, _s9_, _s9_, _s9_, -1, -1, className, classAndMethod.length > 1 ? A.SubListIterable$(classAndMethod, 1, null, type$.String).join$1(0, ".") : B.JSArray_methods.get$single(classAndMethod));
    },
    StackFrame_fromStackTraceLine(line) {
      var t1, t2, method, className, parts, packageUri, packagePath, $package, t3, t4,
        _s9_ = "<unknown>";
      if (line === "<asynchronous suspension>")
        return B.StackFrame_SOW;
      else if (line === "...")
        return B.StackFrame_8sg;
      if (!B.JSString_methods.startsWith$1(line, "#"))
        return A.StackFrame__parseWebFrame(line);
      t1 = A.RegExp_RegExp("^#(\\d+) +(.+) \\((.+?):?(\\d+){0,1}:?(\\d+){0,1}\\)$", true).firstMatch$1(line)._match;
      t2 = t1[2];
      t2.toString;
      method = A.stringReplaceAllUnchecked(t2, ".<anonymous closure>", "");
      if (B.JSString_methods.startsWith$1(method, "new")) {
        className = method.split(" ").length > 1 ? method.split(" ")[1] : _s9_;
        if (B.JSString_methods.contains$1(className, ".")) {
          parts = className.split(".");
          className = parts[0];
          method = parts[1];
        } else
          method = "";
      } else if (B.JSString_methods.contains$1(method, ".")) {
        parts = method.split(".");
        className = parts[0];
        method = parts[1];
      } else
        className = "";
      t2 = t1[3];
      t2.toString;
      packageUri = A.Uri_parse(t2);
      packagePath = packageUri.get$path(packageUri);
      if (packageUri.get$scheme() === "dart" || packageUri.get$scheme() === "package") {
        $package = packageUri.get$pathSegments()[0];
        packagePath = B.JSString_methods.replaceFirst$2(packageUri.get$path(packageUri), A.S(packageUri.get$pathSegments()[0]) + "/", "");
      } else
        $package = _s9_;
      t2 = t1[1];
      t2.toString;
      t2 = A.int_parse(t2, null);
      t3 = packageUri.get$scheme();
      t4 = t1[4];
      if (t4 == null)
        t4 = -1;
      else {
        t4 = t4;
        t4.toString;
        t4 = A.int_parse(t4, null);
      }
      t1 = t1[5];
      if (t1 == null)
        t1 = -1;
      else {
        t1 = t1;
        t1.toString;
        t1 = A.int_parse(t1, null);
      }
      return new A.StackFrame(line, t2, t3, $package, packagePath, t4, t1, className, method);
    },
    StackFrame: function StackFrame(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.source = t0;
      _.number = t1;
      _.packageScheme = t2;
      _.$package = t3;
      _.packagePath = t4;
      _.line = t5;
      _.column = t6;
      _.className = t7;
      _.method = t8;
    },
    StackFrame_fromStackString_closure: function StackFrame_fromStackString_closure() {
    },
    GestureDisposition: function GestureDisposition(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    GestureArenaMember: function GestureArenaMember() {
    },
    GestureArenaEntry: function GestureArenaEntry(t0, t1, t2) {
      this._arena = t0;
      this._pointer = t1;
      this._member = t2;
    },
    _GestureArena: function _GestureArena(t0) {
      var _ = this;
      _.members = t0;
      _.isOpen = true;
      _.hasPendingSweep = _.isHeld = false;
      _.eagerWinner = null;
    },
    _GestureArena_toString_closure: function _GestureArena_toString_closure(t0) {
      this.$this = t0;
    },
    GestureArenaManager: function GestureArenaManager(t0) {
      this._arenas = t0;
    },
    GestureArenaManager_add_closure: function GestureArenaManager_add_closure(t0, t1) {
      this.$this = t0;
      this.pointer = t1;
    },
    GestureArenaManager__tryToResolveArena_closure: function GestureArenaManager__tryToResolveArena_closure(t0, t1, t2) {
      this.$this = t0;
      this.pointer = t1;
      this.state = t2;
    },
    FlutterErrorDetailsForPointerEventDispatcher$(context, $event, exception, hitTestEntry, informationCollector, library, stack) {
      return new A.FlutterErrorDetailsForPointerEventDispatcher(exception, stack, library, context, informationCollector, false);
    },
    _Resampler: function _Resampler(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._resamplers = t0;
      _._frameCallbackScheduled = false;
      _._frameTime = t1;
      _._frameTimeAge = t2;
      _._lastSampleTime = t3;
      _._lastEventTime = t4;
      _._binding0$_handlePointerEvent = t5;
      _._handleSampleTimeChanged = t6;
      _._samplingInterval = t7;
      _._binding0$_timer = null;
    },
    GestureBinding: function GestureBinding() {
    },
    GestureBinding_dispatchEvent_closure: function GestureBinding_dispatchEvent_closure(t0) {
      this.event = t0;
    },
    GestureBinding_dispatchEvent_closure0: function GestureBinding_dispatchEvent_closure0(t0, t1) {
      this.event = t0;
      this.entry = t1;
    },
    FlutterErrorDetailsForPointerEventDispatcher: function FlutterErrorDetailsForPointerEventDispatcher(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.exception = t0;
      _.stack = t1;
      _.library = t2;
      _.context = t3;
      _.informationCollector = t4;
      _.silent = t5;
    },
    _synthesiseDownButtons(buttons, kind) {
      switch (kind.index) {
        case 1:
          return buttons;
        case 0:
        case 2:
        case 3:
          return buttons === 0 ? 1 : buttons;
        case 4:
        default:
          return buttons === 0 ? 1 : buttons;
      }
    },
    PointerEventConverter_expand(data, devicePixelRatio) {
      var t1 = A._arrayInstanceType(data);
      return new A.MappedIterable(new A.WhereIterable(data, new A.PointerEventConverter_expand_closure(), t1._eval$1("WhereIterable<1>")), new A.PointerEventConverter_expand_closure0(devicePixelRatio), t1._eval$1("MappedIterable<1,PointerEvent>"));
    },
    PointerEventConverter_expand_closure: function PointerEventConverter_expand_closure() {
    },
    PointerEventConverter_expand_closure0: function PointerEventConverter_expand_closure0(t0) {
      this.devicePixelRatio = t0;
    },
    PointerEvent_transformPosition(transform, position) {
      var position3, t1;
      if (transform == null)
        return position;
      position3 = new A.Vector3(new Float64Array(3));
      position3.setValues$3(position._dx, position._dy, 0);
      t1 = transform.perspectiveTransform$1(position3)._v3storage;
      return new A.Offset(t1[0], t1[1]);
    },
    PointerEvent_removePerspectiveTransform(transform) {
      var t2, t3,
        t1 = new Float64Array(4);
      t1[3] = 0;
      t1[2] = 1;
      t1[1] = 0;
      t1[0] = 0;
      t2 = new Float64Array(16);
      t3 = new A.Matrix4(t2);
      t3.setFrom$1(transform);
      t2[11] = t1[3];
      t2[10] = t1[2];
      t2[9] = t1[1];
      t2[8] = t1[0];
      t2[2] = t1[0];
      t2[6] = t1[1];
      t2[10] = t1[2];
      t2[14] = t1[3];
      return t3;
    },
    PointerAddedEvent$(device, distance, distanceMax, embedderId, kind, obscured, orientation, position, pressureMax, pressureMin, radiusMax, radiusMin, tilt, timeStamp) {
      return new A.PointerAddedEvent(embedderId, timeStamp, 0, kind, device, position, B.Offset_0_0, 0, false, false, 0, pressureMin, pressureMax, distance, distanceMax, 0, 0, 0, radiusMin, radiusMax, orientation, tilt, 0, false, null, null);
    },
    PointerRemovedEvent$(device, distanceMax, embedderId, kind, obscured, position, pressureMax, pressureMin, radiusMax, radiusMin, timeStamp) {
      return new A.PointerRemovedEvent(embedderId, timeStamp, 0, kind, device, position, B.Offset_0_0, 0, false, false, 0, pressureMin, pressureMax, 0, distanceMax, 0, 0, 0, radiusMin, radiusMax, 0, 0, 0, false, null, null);
    },
    PointerHoverEvent$(buttons, delta, device, distance, distanceMax, embedderId, kind, obscured, orientation, position, pressureMax, pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, size, synthesized, tilt, timeStamp) {
      return new A.PointerHoverEvent(embedderId, timeStamp, 0, kind, device, position, delta, buttons, false, false, 0, pressureMin, pressureMax, distance, distanceMax, size, radiusMajor, radiusMinor, radiusMin, radiusMax, orientation, tilt, 0, synthesized, null, null);
    },
    PointerEnterEvent$(buttons, delta, device, distance, distanceMax, down, embedderId, kind, obscured, orientation, pointer, position, pressureMax, pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, size, synthesized, tilt, timeStamp) {
      return new A.PointerEnterEvent(embedderId, timeStamp, pointer, kind, device, position, delta, buttons, down, false, 0, pressureMin, pressureMax, distance, distanceMax, size, radiusMajor, radiusMinor, radiusMin, radiusMax, orientation, tilt, 0, synthesized, null, null);
    },
    PointerExitEvent$(buttons, delta, device, distance, distanceMax, down, embedderId, kind, obscured, orientation, pointer, position, pressureMax, pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, size, synthesized, tilt, timeStamp) {
      return new A.PointerExitEvent(embedderId, timeStamp, pointer, kind, device, position, delta, buttons, down, false, 0, pressureMin, pressureMax, distance, distanceMax, size, radiusMajor, radiusMinor, radiusMin, radiusMax, orientation, tilt, 0, synthesized, null, null);
    },
    PointerDownEvent$(buttons, device, distanceMax, embedderId, kind, obscured, orientation, pointer, position, pressure, pressureMax, pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, size, tilt, timeStamp) {
      return new A.PointerDownEvent(embedderId, timeStamp, pointer, kind, device, position, B.Offset_0_0, buttons, true, false, pressure, pressureMin, pressureMax, 0, distanceMax, size, radiusMajor, radiusMinor, radiusMin, radiusMax, orientation, tilt, 0, false, null, null);
    },
    PointerMoveEvent$(buttons, delta, device, distanceMax, embedderId, kind, obscured, orientation, platformData, pointer, position, pressure, pressureMax, pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, size, synthesized, tilt, timeStamp) {
      return new A.PointerMoveEvent(embedderId, timeStamp, pointer, kind, device, position, delta, buttons, true, false, pressure, pressureMin, pressureMax, 0, distanceMax, size, radiusMajor, radiusMinor, radiusMin, radiusMax, orientation, tilt, platformData, synthesized, null, null);
    },
    PointerUpEvent$(buttons, device, distance, distanceMax, embedderId, kind, obscured, orientation, pointer, position, pressure, pressureMax, pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, size, tilt, timeStamp) {
      return new A.PointerUpEvent(embedderId, timeStamp, pointer, kind, device, position, B.Offset_0_0, buttons, false, false, pressure, pressureMin, pressureMax, distance, distanceMax, size, radiusMajor, radiusMinor, radiusMin, radiusMax, orientation, tilt, 0, false, null, null);
    },
    PointerScrollEvent$(device, embedderId, kind, position, scrollDelta, timeStamp) {
      return new A.PointerScrollEvent(scrollDelta, embedderId, timeStamp, 0, kind, device, position, B.Offset_0_0, 0, false, false, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, null, null);
    },
    PointerCancelEvent$(buttons, device, distance, distanceMax, embedderId, kind, obscured, orientation, pointer, position, pressureMax, pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, size, tilt, timeStamp) {
      return new A.PointerCancelEvent(embedderId, timeStamp, pointer, kind, device, position, B.Offset_0_0, buttons, false, false, 0, pressureMin, pressureMax, distance, distanceMax, size, radiusMajor, radiusMinor, radiusMin, radiusMax, orientation, tilt, 0, false, null, null);
    },
    PointerEvent: function PointerEvent() {
    },
    _PointerEventDescription: function _PointerEventDescription() {
    },
    _AbstractPointerEvent: function _AbstractPointerEvent() {
    },
    _TransformedPointerEvent: function _TransformedPointerEvent() {
    },
    _CopyPointerAddedEvent: function _CopyPointerAddedEvent() {
    },
    PointerAddedEvent: function PointerAddedEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25) {
      var _ = this;
      _.embedderId = t0;
      _.timeStamp = t1;
      _.pointer = t2;
      _.kind = t3;
      _.device = t4;
      _.position = t5;
      _.delta = t6;
      _.buttons = t7;
      _.down = t8;
      _.obscured = t9;
      _.pressure = t10;
      _.pressureMin = t11;
      _.pressureMax = t12;
      _.distance = t13;
      _.distanceMax = t14;
      _.size = t15;
      _.radiusMajor = t16;
      _.radiusMinor = t17;
      _.radiusMin = t18;
      _.radiusMax = t19;
      _.orientation = t20;
      _.tilt = t21;
      _.platformData = t22;
      _.synthesized = t23;
      _.transform = t24;
      _.original = t25;
    },
    _TransformedPointerAddedEvent: function _TransformedPointerAddedEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta = _.___TransformedPointerEvent_localPosition = $;
    },
    _CopyPointerRemovedEvent: function _CopyPointerRemovedEvent() {
    },
    PointerRemovedEvent: function PointerRemovedEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25) {
      var _ = this;
      _.embedderId = t0;
      _.timeStamp = t1;
      _.pointer = t2;
      _.kind = t3;
      _.device = t4;
      _.position = t5;
      _.delta = t6;
      _.buttons = t7;
      _.down = t8;
      _.obscured = t9;
      _.pressure = t10;
      _.pressureMin = t11;
      _.pressureMax = t12;
      _.distance = t13;
      _.distanceMax = t14;
      _.size = t15;
      _.radiusMajor = t16;
      _.radiusMinor = t17;
      _.radiusMin = t18;
      _.radiusMax = t19;
      _.orientation = t20;
      _.tilt = t21;
      _.platformData = t22;
      _.synthesized = t23;
      _.transform = t24;
      _.original = t25;
    },
    _TransformedPointerRemovedEvent: function _TransformedPointerRemovedEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta = _.___TransformedPointerEvent_localPosition = $;
    },
    _CopyPointerHoverEvent: function _CopyPointerHoverEvent() {
    },
    PointerHoverEvent: function PointerHoverEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25) {
      var _ = this;
      _.embedderId = t0;
      _.timeStamp = t1;
      _.pointer = t2;
      _.kind = t3;
      _.device = t4;
      _.position = t5;
      _.delta = t6;
      _.buttons = t7;
      _.down = t8;
      _.obscured = t9;
      _.pressure = t10;
      _.pressureMin = t11;
      _.pressureMax = t12;
      _.distance = t13;
      _.distanceMax = t14;
      _.size = t15;
      _.radiusMajor = t16;
      _.radiusMinor = t17;
      _.radiusMin = t18;
      _.radiusMax = t19;
      _.orientation = t20;
      _.tilt = t21;
      _.platformData = t22;
      _.synthesized = t23;
      _.transform = t24;
      _.original = t25;
    },
    _TransformedPointerHoverEvent: function _TransformedPointerHoverEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta = _.___TransformedPointerEvent_localPosition = $;
    },
    _CopyPointerEnterEvent: function _CopyPointerEnterEvent() {
    },
    PointerEnterEvent: function PointerEnterEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25) {
      var _ = this;
      _.embedderId = t0;
      _.timeStamp = t1;
      _.pointer = t2;
      _.kind = t3;
      _.device = t4;
      _.position = t5;
      _.delta = t6;
      _.buttons = t7;
      _.down = t8;
      _.obscured = t9;
      _.pressure = t10;
      _.pressureMin = t11;
      _.pressureMax = t12;
      _.distance = t13;
      _.distanceMax = t14;
      _.size = t15;
      _.radiusMajor = t16;
      _.radiusMinor = t17;
      _.radiusMin = t18;
      _.radiusMax = t19;
      _.orientation = t20;
      _.tilt = t21;
      _.platformData = t22;
      _.synthesized = t23;
      _.transform = t24;
      _.original = t25;
    },
    _TransformedPointerEnterEvent: function _TransformedPointerEnterEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta = _.___TransformedPointerEvent_localPosition = $;
    },
    _CopyPointerExitEvent: function _CopyPointerExitEvent() {
    },
    PointerExitEvent: function PointerExitEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25) {
      var _ = this;
      _.embedderId = t0;
      _.timeStamp = t1;
      _.pointer = t2;
      _.kind = t3;
      _.device = t4;
      _.position = t5;
      _.delta = t6;
      _.buttons = t7;
      _.down = t8;
      _.obscured = t9;
      _.pressure = t10;
      _.pressureMin = t11;
      _.pressureMax = t12;
      _.distance = t13;
      _.distanceMax = t14;
      _.size = t15;
      _.radiusMajor = t16;
      _.radiusMinor = t17;
      _.radiusMin = t18;
      _.radiusMax = t19;
      _.orientation = t20;
      _.tilt = t21;
      _.platformData = t22;
      _.synthesized = t23;
      _.transform = t24;
      _.original = t25;
    },
    _TransformedPointerExitEvent: function _TransformedPointerExitEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta = _.___TransformedPointerEvent_localPosition = $;
    },
    _CopyPointerDownEvent: function _CopyPointerDownEvent() {
    },
    PointerDownEvent: function PointerDownEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25) {
      var _ = this;
      _.embedderId = t0;
      _.timeStamp = t1;
      _.pointer = t2;
      _.kind = t3;
      _.device = t4;
      _.position = t5;
      _.delta = t6;
      _.buttons = t7;
      _.down = t8;
      _.obscured = t9;
      _.pressure = t10;
      _.pressureMin = t11;
      _.pressureMax = t12;
      _.distance = t13;
      _.distanceMax = t14;
      _.size = t15;
      _.radiusMajor = t16;
      _.radiusMinor = t17;
      _.radiusMin = t18;
      _.radiusMax = t19;
      _.orientation = t20;
      _.tilt = t21;
      _.platformData = t22;
      _.synthesized = t23;
      _.transform = t24;
      _.original = t25;
    },
    _TransformedPointerDownEvent: function _TransformedPointerDownEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta = _.___TransformedPointerEvent_localPosition = $;
    },
    _CopyPointerMoveEvent: function _CopyPointerMoveEvent() {
    },
    PointerMoveEvent: function PointerMoveEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25) {
      var _ = this;
      _.embedderId = t0;
      _.timeStamp = t1;
      _.pointer = t2;
      _.kind = t3;
      _.device = t4;
      _.position = t5;
      _.delta = t6;
      _.buttons = t7;
      _.down = t8;
      _.obscured = t9;
      _.pressure = t10;
      _.pressureMin = t11;
      _.pressureMax = t12;
      _.distance = t13;
      _.distanceMax = t14;
      _.size = t15;
      _.radiusMajor = t16;
      _.radiusMinor = t17;
      _.radiusMin = t18;
      _.radiusMax = t19;
      _.orientation = t20;
      _.tilt = t21;
      _.platformData = t22;
      _.synthesized = t23;
      _.transform = t24;
      _.original = t25;
    },
    _TransformedPointerMoveEvent: function _TransformedPointerMoveEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta = _.___TransformedPointerEvent_localPosition = $;
    },
    _CopyPointerUpEvent: function _CopyPointerUpEvent() {
    },
    PointerUpEvent: function PointerUpEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25) {
      var _ = this;
      _.embedderId = t0;
      _.timeStamp = t1;
      _.pointer = t2;
      _.kind = t3;
      _.device = t4;
      _.position = t5;
      _.delta = t6;
      _.buttons = t7;
      _.down = t8;
      _.obscured = t9;
      _.pressure = t10;
      _.pressureMin = t11;
      _.pressureMax = t12;
      _.distance = t13;
      _.distanceMax = t14;
      _.size = t15;
      _.radiusMajor = t16;
      _.radiusMinor = t17;
      _.radiusMin = t18;
      _.radiusMax = t19;
      _.orientation = t20;
      _.tilt = t21;
      _.platformData = t22;
      _.synthesized = t23;
      _.transform = t24;
      _.original = t25;
    },
    _TransformedPointerUpEvent: function _TransformedPointerUpEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta = _.___TransformedPointerEvent_localPosition = $;
    },
    PointerSignalEvent: function PointerSignalEvent() {
    },
    _CopyPointerScrollEvent: function _CopyPointerScrollEvent() {
    },
    PointerScrollEvent: function PointerScrollEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26) {
      var _ = this;
      _.scrollDelta = t0;
      _.embedderId = t1;
      _.timeStamp = t2;
      _.pointer = t3;
      _.kind = t4;
      _.device = t5;
      _.position = t6;
      _.delta = t7;
      _.buttons = t8;
      _.down = t9;
      _.obscured = t10;
      _.pressure = t11;
      _.pressureMin = t12;
      _.pressureMax = t13;
      _.distance = t14;
      _.distanceMax = t15;
      _.size = t16;
      _.radiusMajor = t17;
      _.radiusMinor = t18;
      _.radiusMin = t19;
      _.radiusMax = t20;
      _.orientation = t21;
      _.tilt = t22;
      _.platformData = t23;
      _.synthesized = t24;
      _.transform = t25;
      _.original = t26;
    },
    _TransformedPointerScrollEvent: function _TransformedPointerScrollEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta = _.___TransformedPointerEvent_localPosition = $;
    },
    _CopyPointerCancelEvent: function _CopyPointerCancelEvent() {
    },
    PointerCancelEvent: function PointerCancelEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25) {
      var _ = this;
      _.embedderId = t0;
      _.timeStamp = t1;
      _.pointer = t2;
      _.kind = t3;
      _.device = t4;
      _.position = t5;
      _.delta = t6;
      _.buttons = t7;
      _.down = t8;
      _.obscured = t9;
      _.pressure = t10;
      _.pressureMin = t11;
      _.pressureMax = t12;
      _.distance = t13;
      _.distanceMax = t14;
      _.size = t15;
      _.radiusMajor = t16;
      _.radiusMinor = t17;
      _.radiusMin = t18;
      _.radiusMax = t19;
      _.orientation = t20;
      _.tilt = t21;
      _.platformData = t22;
      _.synthesized = t23;
      _.transform = t24;
      _.original = t25;
    },
    _TransformedPointerCancelEvent: function _TransformedPointerCancelEvent(t0, t1) {
      var _ = this;
      _.original = t0;
      _.transform = t1;
      _.___TransformedPointerEvent_localDelta = _.___TransformedPointerEvent_localPosition = $;
    },
    _PointerAddedEvent_PointerEvent__PointerEventDescription: function _PointerAddedEvent_PointerEvent__PointerEventDescription() {
    },
    _PointerAddedEvent_PointerEvent__PointerEventDescription__CopyPointerAddedEvent: function _PointerAddedEvent_PointerEvent__PointerEventDescription__CopyPointerAddedEvent() {
    },
    _PointerCancelEvent_PointerEvent__PointerEventDescription: function _PointerCancelEvent_PointerEvent__PointerEventDescription() {
    },
    _PointerCancelEvent_PointerEvent__PointerEventDescription__CopyPointerCancelEvent: function _PointerCancelEvent_PointerEvent__PointerEventDescription__CopyPointerCancelEvent() {
    },
    _PointerDownEvent_PointerEvent__PointerEventDescription: function _PointerDownEvent_PointerEvent__PointerEventDescription() {
    },
    _PointerDownEvent_PointerEvent__PointerEventDescription__CopyPointerDownEvent: function _PointerDownEvent_PointerEvent__PointerEventDescription__CopyPointerDownEvent() {
    },
    _PointerEnterEvent_PointerEvent__PointerEventDescription: function _PointerEnterEvent_PointerEvent__PointerEventDescription() {
    },
    _PointerEnterEvent_PointerEvent__PointerEventDescription__CopyPointerEnterEvent: function _PointerEnterEvent_PointerEvent__PointerEventDescription__CopyPointerEnterEvent() {
    },
    _PointerEvent_Object_Diagnosticable: function _PointerEvent_Object_Diagnosticable() {
    },
    _PointerExitEvent_PointerEvent__PointerEventDescription: function _PointerExitEvent_PointerEvent__PointerEventDescription() {
    },
    _PointerExitEvent_PointerEvent__PointerEventDescription__CopyPointerExitEvent: function _PointerExitEvent_PointerEvent__PointerEventDescription__CopyPointerExitEvent() {
    },
    _PointerHoverEvent_PointerEvent__PointerEventDescription: function _PointerHoverEvent_PointerEvent__PointerEventDescription() {
    },
    _PointerHoverEvent_PointerEvent__PointerEventDescription__CopyPointerHoverEvent: function _PointerHoverEvent_PointerEvent__PointerEventDescription__CopyPointerHoverEvent() {
    },
    _PointerMoveEvent_PointerEvent__PointerEventDescription: function _PointerMoveEvent_PointerEvent__PointerEventDescription() {
    },
    _PointerMoveEvent_PointerEvent__PointerEventDescription__CopyPointerMoveEvent: function _PointerMoveEvent_PointerEvent__PointerEventDescription__CopyPointerMoveEvent() {
    },
    _PointerRemovedEvent_PointerEvent__PointerEventDescription: function _PointerRemovedEvent_PointerEvent__PointerEventDescription() {
    },
    _PointerRemovedEvent_PointerEvent__PointerEventDescription__CopyPointerRemovedEvent: function _PointerRemovedEvent_PointerEvent__PointerEventDescription__CopyPointerRemovedEvent() {
    },
    _PointerScrollEvent_PointerSignalEvent__PointerEventDescription: function _PointerScrollEvent_PointerSignalEvent__PointerEventDescription() {
    },
    _PointerScrollEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollEvent: function _PointerScrollEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollEvent() {
    },
    _PointerUpEvent_PointerEvent__PointerEventDescription: function _PointerUpEvent_PointerEvent__PointerEventDescription() {
    },
    _PointerUpEvent_PointerEvent__PointerEventDescription__CopyPointerUpEvent: function _PointerUpEvent_PointerEvent__PointerEventDescription__CopyPointerUpEvent() {
    },
    __TransformedPointerAddedEvent__TransformedPointerEvent__CopyPointerAddedEvent: function __TransformedPointerAddedEvent__TransformedPointerEvent__CopyPointerAddedEvent() {
    },
    __TransformedPointerCancelEvent__TransformedPointerEvent__CopyPointerCancelEvent: function __TransformedPointerCancelEvent__TransformedPointerEvent__CopyPointerCancelEvent() {
    },
    __TransformedPointerDownEvent__TransformedPointerEvent__CopyPointerDownEvent: function __TransformedPointerDownEvent__TransformedPointerEvent__CopyPointerDownEvent() {
    },
    __TransformedPointerEnterEvent__TransformedPointerEvent__CopyPointerEnterEvent: function __TransformedPointerEnterEvent__TransformedPointerEvent__CopyPointerEnterEvent() {
    },
    __TransformedPointerEvent__AbstractPointerEvent_Diagnosticable: function __TransformedPointerEvent__AbstractPointerEvent_Diagnosticable() {
    },
    __TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription: function __TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription() {
    },
    __TransformedPointerExitEvent__TransformedPointerEvent__CopyPointerExitEvent: function __TransformedPointerExitEvent__TransformedPointerEvent__CopyPointerExitEvent() {
    },
    __TransformedPointerHoverEvent__TransformedPointerEvent__CopyPointerHoverEvent: function __TransformedPointerHoverEvent__TransformedPointerEvent__CopyPointerHoverEvent() {
    },
    __TransformedPointerMoveEvent__TransformedPointerEvent__CopyPointerMoveEvent: function __TransformedPointerMoveEvent__TransformedPointerEvent__CopyPointerMoveEvent() {
    },
    __TransformedPointerRemovedEvent__TransformedPointerEvent__CopyPointerRemovedEvent: function __TransformedPointerRemovedEvent__TransformedPointerEvent__CopyPointerRemovedEvent() {
    },
    __TransformedPointerScrollEvent__TransformedPointerEvent__CopyPointerScrollEvent: function __TransformedPointerScrollEvent__TransformedPointerEvent__CopyPointerScrollEvent() {
    },
    __TransformedPointerUpEvent__TransformedPointerEvent__CopyPointerUpEvent: function __TransformedPointerUpEvent__TransformedPointerEvent__CopyPointerUpEvent() {
    },
    DeviceGestureSettings: function DeviceGestureSettings(t0) {
      this.touchSlop = t0;
    },
    HitTestResult$() {
      var t1 = A._setArrayType([], type$.JSArray_HitTestEntry_HitTestTarget),
        t2 = new A.Matrix4(new Float64Array(16));
      t2.setIdentity$0();
      return new A.HitTestResult(t1, A._setArrayType([t2], type$.JSArray_Matrix4_2), A._setArrayType([], type$.JSArray__TransformPart));
    },
    HitTestEntry: function HitTestEntry(t0, t1) {
      this.target = t0;
      this._hit_test$_transform = null;
      this.$ti = t1;
    },
    _TransformPart: function _TransformPart() {
    },
    _MatrixTransformPart: function _MatrixTransformPart(t0) {
      this.matrix = t0;
    },
    _OffsetTransformPart: function _OffsetTransformPart(t0) {
      this.offset = t0;
    },
    HitTestResult: function HitTestResult(t0, t1, t2) {
      this._path = t0;
      this._transforms = t1;
      this._localTransforms = t2;
    },
    LongPressGestureRecognizer: function LongPressGestureRecognizer(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._longPressAccepted = false;
      _._velocityTracker = _.onTertiaryLongPressEnd = _.onTertiaryLongPressUp = _.onTertiaryLongPressMoveUpdate = _.onTertiaryLongPressStart = _.onTertiaryLongPress = _.onTertiaryLongPressCancel = _.onTertiaryLongPressDown = _.onSecondaryLongPressEnd = _.onSecondaryLongPressUp = _.onSecondaryLongPressMoveUpdate = _.onSecondaryLongPressStart = _.onSecondaryLongPress = _.onSecondaryLongPressCancel = _.onSecondaryLongPressDown = _.onLongPressEnd = _.onLongPressUp = _.onLongPressMoveUpdate = _.onLongPressStart = _.onLongPress = _.onLongPressCancel = _.onLongPressDown = _._initialButtons = _._longPressOrigin = null;
      _.deadline = t0;
      _.postAcceptSlopTolerance = t1;
      _._recognizer$_state = t2;
      _._initialPosition = _._primaryPointer = null;
      _._gestureAccepted = false;
      _._timer = null;
      _._entries = t3;
      _._trackedPointers = t4;
      _.debugOwner = t5;
      _._supportedDevices = t6;
      _._pointerToKind = t7;
    },
    _Vector: function _Vector(t0, t1, t2) {
      this._lsq_solver$_offset = t0;
      this._lsq_solver$_length = t1;
      this._lsq_solver$_elements = t2;
    },
    _Matrix: function _Matrix(t0, t1) {
      this._columns = t0;
      this._lsq_solver$_elements = t1;
    },
    PolynomialFit: function PolynomialFit(t0) {
      this.coefficients = t0;
      this.__PolynomialFit_confidence = $;
    },
    LeastSquaresSolver: function LeastSquaresSolver(t0, t1, t2) {
      this.x = t0;
      this.y = t1;
      this.w = t2;
    },
    _CountdownZoned: function _CountdownZoned() {
      this._timeout = false;
    },
    _TapTracker: function _TapTracker(t0, t1, t2, t3, t4) {
      var _ = this;
      _.pointer = t0;
      _.entry = t1;
      _._initialGlobalPosition = t2;
      _.initialButtons = t3;
      _._doubleTapMinTimeCountdown = t4;
      _._isTrackingPointer = false;
    },
    DoubleTapGestureRecognizer: function DoubleTapGestureRecognizer(t0, t1, t2, t3) {
      var _ = this;
      _._firstTap = _._doubleTapTimer = _.onDoubleTapCancel = _.onDoubleTap = _.onDoubleTapDown = null;
      _._trackers = t0;
      _.debugOwner = t1;
      _._supportedDevices = t2;
      _._pointerToKind = t3;
    },
    PointerRouter: function PointerRouter(t0, t1) {
      this._routeMap = t0;
      this._globalRoutes = t1;
    },
    PointerRouter_addRoute_closure: function PointerRouter_addRoute_closure() {
    },
    PointerRouter__dispatchEventToRoutes_closure: function PointerRouter__dispatchEventToRoutes_closure(t0, t1, t2) {
      this.$this = t0;
      this.referenceRoutes = t1;
      this.event = t2;
    },
    PointerSignalResolver: function PointerSignalResolver() {
      this._currentEvent = this._firstRegisteredCallback = null;
    },
    DragStartBehavior: function DragStartBehavior(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    GestureRecognizer: function GestureRecognizer() {
    },
    OneSequenceGestureRecognizer: function OneSequenceGestureRecognizer() {
    },
    GestureRecognizerState: function GestureRecognizerState(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    PrimaryPointerGestureRecognizer: function PrimaryPointerGestureRecognizer() {
    },
    PrimaryPointerGestureRecognizer_addAllowedPointer_closure: function PrimaryPointerGestureRecognizer_addAllowedPointer_closure(t0, t1) {
      this.$this = t0;
      this.event = t1;
    },
    OffsetPair: function OffsetPair(t0, t1) {
      this.local = t0;
      this.global = t1;
    },
    _GestureRecognizer_GestureArenaMember_DiagnosticableTreeMixin: function _GestureRecognizer_GestureArenaMember_DiagnosticableTreeMixin() {
    },
    TapDownDetails: function TapDownDetails(t0) {
      this.globalPosition = t0;
    },
    TapUpDetails: function TapUpDetails() {
    },
    BaseTapGestureRecognizer: function BaseTapGestureRecognizer() {
    },
    TapGestureRecognizer: function TapGestureRecognizer(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.onTertiaryTapCancel = _.onTertiaryTapUp = _.onTertiaryTapDown = _.onSecondaryTapCancel = _.onSecondaryTapUp = _.onSecondaryTapDown = _.onSecondaryTap = _.onTapCancel = _.onTap = _.onTapUp = _.onTapDown = null;
      _._wonArenaForPrimaryPointer = _._sentTapDown = false;
      _._up = _._down = null;
      _.deadline = t0;
      _.postAcceptSlopTolerance = t1;
      _._recognizer$_state = t2;
      _._initialPosition = _._primaryPointer = null;
      _._gestureAccepted = false;
      _._timer = null;
      _._entries = t3;
      _._trackedPointers = t4;
      _.debugOwner = t5;
      _._supportedDevices = t6;
      _._pointerToKind = t7;
    },
    TapGestureRecognizer_handleTapDown_closure: function TapGestureRecognizer_handleTapDown_closure(t0, t1) {
      this.$this = t0;
      this.details = t1;
    },
    TapGestureRecognizer_handleTapUp_closure: function TapGestureRecognizer_handleTapUp_closure(t0, t1) {
      this.$this = t0;
      this.details = t1;
    },
    VelocityEstimate: function VelocityEstimate(t0, t1, t2, t3) {
      var _ = this;
      _.pixelsPerSecond = t0;
      _.confidence = t1;
      _.duration = t2;
      _.offset = t3;
    },
    _PointAtTime: function _PointAtTime(t0, t1) {
      this.time = t0;
      this.point = t1;
    },
    VelocityTracker: function VelocityTracker(t0, t1) {
      this.kind = t0;
      this._samples = t1;
      this._velocity_tracker$_index = 0;
    },
    AppBarTheme: function AppBarTheme() {
    },
    _AppBarTheme_Object_Diagnosticable: function _AppBarTheme_Object_Diagnosticable() {
    },
    MaterialBannerThemeData: function MaterialBannerThemeData() {
    },
    _MaterialBannerThemeData_Object_Diagnosticable: function _MaterialBannerThemeData_Object_Diagnosticable() {
    },
    BottomAppBarTheme: function BottomAppBarTheme() {
    },
    _BottomAppBarTheme_Object_Diagnosticable: function _BottomAppBarTheme_Object_Diagnosticable() {
    },
    BottomNavigationBarThemeData: function BottomNavigationBarThemeData() {
    },
    _BottomNavigationBarThemeData_Object_Diagnosticable: function _BottomNavigationBarThemeData_Object_Diagnosticable() {
    },
    BottomSheetThemeData: function BottomSheetThemeData() {
    },
    _BottomSheetThemeData_Object_Diagnosticable: function _BottomSheetThemeData_Object_Diagnosticable() {
    },
    ButtonBarThemeData: function ButtonBarThemeData() {
    },
    _ButtonBarThemeData_Object_Diagnosticable: function _ButtonBarThemeData_Object_Diagnosticable() {
    },
    ButtonTextTheme: function ButtonTextTheme(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    ButtonThemeData: function ButtonThemeData(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._buttonColor = t0;
      _._disabledColor = t1;
      _._focusColor = t2;
      _._hoverColor = t3;
      _._highlightColor = t4;
      _._splashColor = t5;
      _.colorScheme = t6;
      _._materialTapTargetSize = t7;
    },
    _ButtonThemeData_Object_Diagnosticable: function _ButtonThemeData_Object_Diagnosticable() {
    },
    CardTheme: function CardTheme() {
    },
    _CardTheme_Object_Diagnosticable: function _CardTheme_Object_Diagnosticable() {
    },
    CheckboxThemeData: function CheckboxThemeData() {
    },
    _CheckboxThemeData_Object_Diagnosticable: function _CheckboxThemeData_Object_Diagnosticable() {
    },
    ChipThemeData: function ChipThemeData() {
    },
    _ChipThemeData_Object_Diagnosticable: function _ChipThemeData_Object_Diagnosticable() {
    },
    CircleAvatar: function CircleAvatar(t0, t1) {
      this.child = t0;
      this.key = t1;
    },
    ColorScheme$(background, brightness, error, errorContainer, inversePrimary, inverseSurface, onBackground, onError, onErrorContainer, onInverseSurface, onPrimary, onPrimaryContainer, onSecondary, onSecondaryContainer, onSurface, onSurfaceVariant, onTertiary, onTertiaryContainer, outline, primary, primaryContainer, primaryVariant, secondary, secondaryContainer, secondaryVariant, shadow, surface, surfaceVariant, tertiary, tertiaryContainer) {
      return new A.ColorScheme(brightness, primary, onPrimary, primaryContainer, onPrimaryContainer, secondary, onSecondary, secondaryContainer, onSecondaryContainer, tertiary, onTertiary, tertiaryContainer, onTertiaryContainer, error, onError, errorContainer, onErrorContainer, background, onBackground, surface, onSurface, surfaceVariant, onSurfaceVariant, outline, shadow, inverseSurface, onInverseSurface, inversePrimary, primaryVariant, secondaryVariant);
    },
    ColorScheme: function ColorScheme(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29) {
      var _ = this;
      _.brightness = t0;
      _.primary = t1;
      _.onPrimary = t2;
      _._primaryContainer = t3;
      _._onPrimaryContainer = t4;
      _.secondary = t5;
      _.onSecondary = t6;
      _._secondaryContainer = t7;
      _._onSecondaryContainer = t8;
      _._tertiary = t9;
      _._onTertiary = t10;
      _._tertiaryContainer = t11;
      _._onTertiaryContainer = t12;
      _.error = t13;
      _.onError = t14;
      _._errorContainer = t15;
      _._onErrorContainer = t16;
      _.background = t17;
      _.onBackground = t18;
      _.surface = t19;
      _.onSurface = t20;
      _._surfaceVariant = t21;
      _._onSurfaceVariant = t22;
      _._outline = t23;
      _._shadow = t24;
      _._inverseSurface = t25;
      _._onInverseSurface = t26;
      _._inversePrimary = t27;
      _._primaryVariant = t28;
      _._secondaryVariant = t29;
    },
    _ColorScheme_Object_Diagnosticable: function _ColorScheme_Object_Diagnosticable() {
    },
    MaterialColor: function MaterialColor(t0, t1) {
      this._swatch = t0;
      this.value = t1;
    },
    DataTableThemeData: function DataTableThemeData() {
    },
    _DataTableThemeData_Object_Diagnosticable: function _DataTableThemeData_Object_Diagnosticable() {
    },
    DialogTheme: function DialogTheme() {
    },
    _DialogTheme_Object_Diagnosticable: function _DialogTheme_Object_Diagnosticable() {
    },
    DividerThemeData: function DividerThemeData() {
    },
    _DividerThemeData_Object_Diagnosticable: function _DividerThemeData_Object_Diagnosticable() {
    },
    DrawerThemeData: function DrawerThemeData() {
    },
    _DrawerThemeData_Object_Diagnosticable: function _DrawerThemeData_Object_Diagnosticable() {
    },
    ElevatedButtonThemeData: function ElevatedButtonThemeData() {
    },
    _ElevatedButtonThemeData_Object_Diagnosticable: function _ElevatedButtonThemeData_Object_Diagnosticable() {
    },
    FloatingActionButtonThemeData: function FloatingActionButtonThemeData() {
    },
    _FloatingActionButtonThemeData_Object_Diagnosticable: function _FloatingActionButtonThemeData_Object_Diagnosticable() {
    },
    Ink: function Ink(t0, t1, t2) {
      this.child = t0;
      this.decoration = t1;
      this.key = t2;
    },
    _InkState: function _InkState(t0, t1) {
      var _ = this;
      _._boxKey = t0;
      _._widget = _._ink = null;
      _._debugLifecycleState = t1;
      _._framework$_element = null;
    },
    InkDecoration: function InkDecoration(t0, t1, t2, t3) {
      var _ = this;
      _._ink_decoration$_decoration = _._painter = null;
      _._ink_decoration$_configuration = t0;
      _._material$_controller = t1;
      _.referenceBox = t2;
      _.onRemoved = t3;
      _._material$_debugDisposed = false;
    },
    InkHighlight: function InkHighlight(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _._ink_highlight$_shape = t0;
      _._radius = t1;
      _._ink_highlight$_borderRadius = t2;
      _._customBorder = t3;
      _._rectCallback = t4;
      _._ink_highlight$_textDirection = t5;
      _.__InkHighlight__alphaController = _.__InkHighlight__alpha = $;
      _._active = true;
      _._ink_well$_color = t6;
      _._material$_controller = t7;
      _.referenceBox = t8;
      _.onRemoved = t9;
      _._material$_debugDisposed = false;
    },
    _getClipCallback(referenceBox, containedInkWell, rectCallback) {
      if (rectCallback != null)
        return rectCallback;
      return new A._getClipCallback_closure(referenceBox);
    },
    _getTargetRadius(referenceBox, containedInkWell, rectCallback, position) {
      var t1, size, d1, d2, t2, d3, d4;
      if (rectCallback != null) {
        t1 = rectCallback.call$0();
        size = new A.Size(t1.right - t1.left, t1.bottom - t1.top);
      } else {
        t1 = referenceBox._size;
        t1.toString;
        size = t1;
      }
      d1 = position.$sub(0, B.Offset_0_0).get$distance();
      t1 = 0 + size._dx;
      d2 = position.$sub(0, new A.Offset(t1, 0)).get$distance();
      t2 = 0 + size._dy;
      d3 = position.$sub(0, new A.Offset(0, t2)).get$distance();
      d4 = position.$sub(0, new A.Offset(t1, t2)).get$distance();
      return Math.ceil(Math.max(Math.max(d1, d2), Math.max(d3, d4)));
    },
    _getClipCallback_closure: function _getClipCallback_closure(t0) {
      this.referenceBox = t0;
    },
    _InkSplashFactory: function _InkSplashFactory() {
    },
    InkSplash: function InkSplash(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _._ink_splash$_position = t0;
      _._ink_splash$_borderRadius = t1;
      _._ink_splash$_customBorder = t2;
      _._targetRadius = t3;
      _._clipCallback = t4;
      _._repositionToReferenceBox = t5;
      _._ink_splash$_textDirection = t6;
      _.__InkSplash__alpha = _.__InkSplash__radiusController = _.__InkSplash__radius = $;
      _._alphaController = null;
      _._ink_well$_color = t7;
      _._material$_controller = t8;
      _.referenceBox = t9;
      _.onRemoved = t10;
      _._material$_debugDisposed = false;
    },
    InteractiveInkFeature: function InteractiveInkFeature() {
    },
    InteractiveInkFeatureFactory: function InteractiveInkFeatureFactory() {
    },
    _ParentInkResponseProvider: function _ParentInkResponseProvider(t0, t1, t2) {
      this.state = t0;
      this.child = t1;
      this.key = t2;
    },
    InkResponse: function InkResponse() {
    },
    _InkResponseStateWidget: function _InkResponseStateWidget(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30) {
      var _ = this;
      _.child = t0;
      _.onTap = t1;
      _.onTapDown = t2;
      _.onTapUp = t3;
      _.onTapCancel = t4;
      _.onDoubleTap = t5;
      _.onLongPress = t6;
      _.onHighlightChanged = t7;
      _.onHover = t8;
      _.mouseCursor = t9;
      _.containedInkWell = t10;
      _.highlightShape = t11;
      _.radius = t12;
      _.borderRadius = t13;
      _.customBorder = t14;
      _.focusColor = t15;
      _.hoverColor = t16;
      _.highlightColor = t17;
      _.overlayColor = t18;
      _.splashColor = t19;
      _.splashFactory = t20;
      _.enableFeedback = t21;
      _.excludeFromSemantics = t22;
      _.onFocusChange = t23;
      _.autofocus = t24;
      _.focusNode = t25;
      _.canRequestFocus = t26;
      _.parentState = t27;
      _.getRectCallback = t28;
      _.debugCheckContext = t29;
      _.key = t30;
    },
    _HighlightType: function _HighlightType(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    _InkResponseState: function _InkResponseState(t0, t1, t2, t3) {
      var _ = this;
      _._currentSplash = _._splashes = null;
      _._hovering = false;
      _._highlights = t0;
      _.___InkResponseState__actionMap = $;
      _._activeChildren = t1;
      _._hasFocus = false;
      _.AutomaticKeepAliveClientMixin__keepAliveHandle = t2;
      _._widget = null;
      _._debugLifecycleState = t3;
      _._framework$_element = null;
    },
    _InkResponseState_highlightsExist_closure: function _InkResponseState_highlightsExist_closure() {
    },
    _InkResponseState_updateHighlight_handleInkRemoval: function _InkResponseState_updateHighlight_handleInkRemoval(t0, t1) {
      this.$this = t0;
      this.type = t1;
    },
    _InkResponseState__createInkFeature_onRemoved: function _InkResponseState__createInkFeature_onRemoved(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _InkResponseState__handleFocusHighlightModeChange_closure: function _InkResponseState__handleFocusHighlightModeChange_closure(t0) {
      this.$this = t0;
    },
    InkWell: function InkWell(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27) {
      var _ = this;
      _.child = t0;
      _.onTap = t1;
      _.onTapDown = t2;
      _.onTapUp = t3;
      _.onTapCancel = t4;
      _.onDoubleTap = t5;
      _.onLongPress = t6;
      _.onHighlightChanged = t7;
      _.onHover = t8;
      _.mouseCursor = t9;
      _.containedInkWell = t10;
      _.highlightShape = t11;
      _.radius = t12;
      _.borderRadius = t13;
      _.customBorder = t14;
      _.focusColor = t15;
      _.hoverColor = t16;
      _.highlightColor = t17;
      _.overlayColor = t18;
      _.splashColor = t19;
      _.splashFactory = t20;
      _.enableFeedback = t21;
      _.excludeFromSemantics = t22;
      _.onFocusChange = t23;
      _.autofocus = t24;
      _.focusNode = t25;
      _.canRequestFocus = t26;
      _.key = t27;
    },
    __InkResponseState_State_AutomaticKeepAliveClientMixin: function __InkResponseState_State_AutomaticKeepAliveClientMixin() {
    },
    FloatingLabelAlignment__stringify(x) {
      if (x === -1)
        return "FloatingLabelAlignment.start";
      if (x === 0)
        return "FloatingLabelAlignment.center";
      return "FloatingLabelAlignment(x: " + B.JSInt_methods.toStringAsFixed$1(x, 1) + ")";
    },
    FloatingLabelBehavior: function FloatingLabelBehavior(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    FloatingLabelAlignment: function FloatingLabelAlignment() {
    },
    InputDecorationTheme: function InputDecorationTheme() {
    },
    _InputDecorationTheme_Object_Diagnosticable: function _InputDecorationTheme_Object_Diagnosticable() {
    },
    _RenderListTile__layoutBox(box, constraints) {
      var t1;
      if (box == null)
        return B.Size_0_0;
      box.layout$2$parentUsesSize(0, constraints, true);
      t1 = box._size;
      t1.toString;
      return t1;
    },
    ListTileThemeData: function ListTileThemeData() {
    },
    ListTile: function ListTile(t0, t1, t2) {
      this.leading = t0;
      this.title = t1;
      this.key = t2;
    },
    _ListTileSlot: function _ListTileSlot(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    _ListTile: function _ListTile(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13) {
      var _ = this;
      _.leading = t0;
      _.title = t1;
      _.subtitle = t2;
      _.trailing = t3;
      _.isThreeLine = t4;
      _.isDense = t5;
      _.visualDensity = t6;
      _.textDirection = t7;
      _.titleBaselineType = t8;
      _.subtitleBaselineType = t9;
      _.horizontalTitleGap = t10;
      _.minVerticalPadding = t11;
      _.minLeadingWidth = t12;
      _.key = t13;
    },
    _RenderListTile: function _RenderListTile(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _._isDense = t0;
      _._visualDensity = t1;
      _._isThreeLine = t2;
      _._list_tile$_textDirection = t3;
      _._titleBaselineType = t4;
      _._subtitleBaselineType = t5;
      _._horizontalTitleGap = t6;
      _._minVerticalPadding = t7;
      _._minLeadingWidth = t8;
      _.SlottedContainerRenderObjectMixin__slotToChild = t9;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._object$_constraints = _._relayoutBoundary = null;
      _._debugDoingThisPaint = false;
      _._layerHandle = t10;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing = $;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _RenderListTile_paint_doPaint: function _RenderListTile_paint_doPaint(t0, t1) {
      this.context = t0;
      this.offset = t1;
    },
    _RenderListTile_hitTestChildren_closure: function _RenderListTile_hitTestChildren_closure(t0, t1, t2) {
      this.position = t0;
      this.parentData = t1;
      this.child = t2;
    },
    _ListTileThemeData_Object_Diagnosticable: function _ListTileThemeData_Object_Diagnosticable() {
    },
    __ListTile_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin: function __ListTile_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin() {
    },
    __RenderListTile_RenderBox_SlottedContainerRenderObjectMixin: function __RenderListTile_RenderBox_SlottedContainerRenderObjectMixin() {
    },
    MaterialType: function MaterialType(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    Material: function Material(t0, t1) {
      this.child = t0;
      this.key = t1;
    },
    _MaterialState: function _MaterialState(t0, t1, t2, t3) {
      var _ = this;
      _._inkFeatureRenderer = t0;
      _.TickerProviderStateMixin__tickers = t1;
      _.TickerProviderStateMixin__tickerModeNotifier = t2;
      _._widget = null;
      _._debugLifecycleState = t3;
      _._framework$_element = null;
    },
    _MaterialState_build_closure: function _MaterialState_build_closure(t0) {
      this.$this = t0;
    },
    _RenderInkFeatures: function _RenderInkFeatures(t0, t1, t2, t3) {
      var _ = this;
      _.vsync = t0;
      _.absorbHitTest = t1;
      _._inkFeatures = null;
      _.RenderObjectWithChildMixin__child = t2;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._object$_constraints = _._relayoutBoundary = null;
      _._debugDoingThisPaint = false;
      _._layerHandle = t3;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing = $;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _InkFeatures: function _InkFeatures(t0, t1, t2, t3, t4) {
      var _ = this;
      _.color = t0;
      _.vsync = t1;
      _.absorbHitTest = t2;
      _.child = t3;
      _.key = t4;
    },
    InkFeature: function InkFeature() {
    },
    __MaterialState_State_TickerProviderStateMixin: function __MaterialState_State_TickerProviderStateMixin() {
    },
    MaterialStateProperty_resolveAs(value, states, $T) {
      if ($T._eval$1("MaterialStateProperty<0>")._is(value))
        return value.resolve$1(states);
      return value;
    },
    MaterialState: function MaterialState(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    MaterialStateMouseCursor: function MaterialStateMouseCursor() {
    },
    _EnabledAndDisabledMouseCursor: function _EnabledAndDisabledMouseCursor() {
    },
    NavigationBarThemeData: function NavigationBarThemeData() {
    },
    _NavigationBarThemeData_Object_Diagnosticable: function _NavigationBarThemeData_Object_Diagnosticable() {
    },
    NavigationRailThemeData: function NavigationRailThemeData() {
    },
    _NavigationRailThemeData_Object_Diagnosticable: function _NavigationRailThemeData_Object_Diagnosticable() {
    },
    OutlinedButtonThemeData: function OutlinedButtonThemeData() {
    },
    _OutlinedButtonThemeData_Object_Diagnosticable: function _OutlinedButtonThemeData_Object_Diagnosticable() {
    },
    PageTransitionsBuilder: function PageTransitionsBuilder() {
    },
    FadeUpwardsPageTransitionsBuilder: function FadeUpwardsPageTransitionsBuilder() {
    },
    CupertinoPageTransitionsBuilder: function CupertinoPageTransitionsBuilder() {
    },
    PageTransitionsTheme: function PageTransitionsTheme() {
    },
    PageTransitionsTheme__all_closure: function PageTransitionsTheme__all_closure(t0) {
      this.builders = t0;
    },
    _PageTransitionsTheme_Object_Diagnosticable: function _PageTransitionsTheme_Object_Diagnosticable() {
    },
    PopupMenuThemeData: function PopupMenuThemeData() {
    },
    _PopupMenuThemeData_Object_Diagnosticable: function _PopupMenuThemeData_Object_Diagnosticable() {
    },
    ProgressIndicatorThemeData: function ProgressIndicatorThemeData() {
    },
    _ProgressIndicatorThemeData_Object_Diagnosticable: function _ProgressIndicatorThemeData_Object_Diagnosticable() {
    },
    RadioThemeData: function RadioThemeData() {
    },
    _RadioThemeData_Object_Diagnosticable: function _RadioThemeData_Object_Diagnosticable() {
    },
    ScrollbarThemeData: function ScrollbarThemeData() {
    },
    _ScrollbarThemeData_Object_Diagnosticable: function _ScrollbarThemeData_Object_Diagnosticable() {
    },
    SliderThemeData: function SliderThemeData() {
    },
    _SliderThemeData_Object_Diagnosticable: function _SliderThemeData_Object_Diagnosticable() {
    },
    SnackBarThemeData: function SnackBarThemeData() {
    },
    _SnackBarThemeData_Object_Diagnosticable: function _SnackBarThemeData_Object_Diagnosticable() {
    },
    SwitchThemeData: function SwitchThemeData() {
    },
    _SwitchThemeData_Object_Diagnosticable: function _SwitchThemeData_Object_Diagnosticable() {
    },
    TabBarTheme: function TabBarTheme() {
    },
    _TabBarTheme_Object_Diagnosticable: function _TabBarTheme_Object_Diagnosticable() {
    },
    TextButtonThemeData: function TextButtonThemeData() {
    },
    _TextButtonThemeData_Object_Diagnosticable: function _TextButtonThemeData_Object_Diagnosticable() {
    },
    TextSelectionThemeData: function TextSelectionThemeData() {
    },
    _TextSelectionThemeData_Object_Diagnosticable: function _TextSelectionThemeData_Object_Diagnosticable() {
    },
    TextTheme$(bodyLarge, bodyMedium, bodySmall, displayLarge, displayMedium, displaySmall, headlineLarge, headlineMedium, headlineSmall, labelLarge, labelMedium, labelSmall, titleLarge, titleMedium, titleSmall) {
      var _null = null,
        t1 = displayLarge == null ? _null : displayLarge,
        t2 = displayMedium == null ? _null : displayMedium,
        t3 = displaySmall == null ? _null : displaySmall,
        t4 = headlineMedium == null ? _null : headlineMedium,
        t5 = headlineSmall == null ? _null : headlineSmall,
        t6 = titleLarge == null ? _null : titleLarge,
        t7 = titleMedium == null ? _null : titleMedium,
        t8 = titleSmall == null ? _null : titleSmall,
        t9 = bodyLarge == null ? _null : bodyLarge,
        t10 = bodyMedium == null ? _null : bodyMedium,
        t11 = bodySmall == null ? _null : bodySmall,
        t12 = labelLarge == null ? _null : labelLarge;
      return new A.TextTheme(t1, t2, t3, headlineLarge, t4, t5, t6, t7, t8, t9, t10, t11, t12, labelMedium, labelSmall == null ? _null : labelSmall);
    },
    TextTheme: function TextTheme(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _.displayLarge = t0;
      _.displayMedium = t1;
      _.displaySmall = t2;
      _.headlineLarge = t3;
      _.headlineMedium = t4;
      _.headlineSmall = t5;
      _.titleLarge = t6;
      _.titleMedium = t7;
      _.titleSmall = t8;
      _.bodyLarge = t9;
      _.bodyMedium = t10;
      _.bodySmall = t11;
      _.labelLarge = t12;
      _.labelMedium = t13;
      _.labelSmall = t14;
    },
    _TextTheme_Object_Diagnosticable: function _TextTheme_Object_Diagnosticable() {
    },
    ThemeData$raw(accentColor, accentColorBrightness, accentIconTheme, accentTextTheme, androidOverscrollIndicator, appBarTheme, applyElevationOverlayColor, backgroundColor, bannerTheme, bottomAppBarColor, bottomAppBarTheme, bottomNavigationBarTheme, bottomSheetTheme, buttonBarTheme, buttonColor, buttonTheme, canvasColor, cardColor, cardTheme, checkboxTheme, chipTheme, colorScheme, cupertinoOverrideTheme, cursorColor, dataTableTheme, dialogBackgroundColor, dialogTheme, disabledColor, dividerColor, dividerTheme, drawerTheme, elevatedButtonTheme, errorColor, fixTextFieldOutlineLabel, floatingActionButtonTheme, focusColor, highlightColor, hintColor, hoverColor, iconTheme, indicatorColor, inputDecorationTheme, listTileTheme, materialTapTargetSize, navigationBarTheme, navigationRailTheme, outlinedButtonTheme, pageTransitionsTheme, platform, popupMenuTheme, primaryColor, primaryColorBrightness, primaryColorDark, primaryColorLight, primaryIconTheme, primaryTextTheme, progressIndicatorTheme, radioTheme, scaffoldBackgroundColor, scrollbarTheme, secondaryHeaderColor, selectedRowColor, shadowColor, sliderTheme, snackBarTheme, splashColor, splashFactory, switchTheme, tabBarTheme, textButtonTheme, textSelectionColor, textSelectionHandleColor, textSelectionTheme, textTheme, timePickerTheme, toggleButtonsTheme, toggleableActiveColor, tooltipTheme, typography, unselectedWidgetColor, useMaterial3, useTextSelectionTheme, visualDensity) {
      return new A.ThemeData(androidOverscrollIndicator, applyElevationOverlayColor, cupertinoOverrideTheme, inputDecorationTheme, materialTapTargetSize, pageTransitionsTheme, platform, scrollbarTheme, splashFactory, visualDensity, false, colorScheme, primaryColor, primaryColorLight, primaryColorDark, focusColor, hoverColor, shadowColor, canvasColor, scaffoldBackgroundColor, bottomAppBarColor, cardColor, dividerColor, highlightColor, splashColor, selectedRowColor, unselectedWidgetColor, disabledColor, secondaryHeaderColor, backgroundColor, dialogBackgroundColor, indicatorColor, hintColor, errorColor, toggleableActiveColor, typography, textTheme, primaryTextTheme, iconTheme, primaryIconTheme, appBarTheme, bannerTheme, bottomAppBarTheme, bottomNavigationBarTheme, bottomSheetTheme, buttonBarTheme, buttonTheme, cardTheme, checkboxTheme, chipTheme, dataTableTheme, dialogTheme, dividerTheme, drawerTheme, elevatedButtonTheme, floatingActionButtonTheme, listTileTheme, navigationBarTheme, navigationRailTheme, outlinedButtonTheme, popupMenuTheme, progressIndicatorTheme, radioTheme, sliderTheme, snackBarTheme, switchTheme, tabBarTheme, textButtonTheme, textSelectionTheme, timePickerTheme, toggleButtonsTheme, tooltipTheme, true, textSelectionColor, cursorColor, textSelectionHandleColor, accentColor, accentColorBrightness, accentTextTheme, accentIconTheme, buttonColor, true, primaryColorBrightness);
    },
    ThemeData_ThemeData$fallback() {
      var materialTapTargetSize, visualDensity, effectiveBrightness, isDark, t1, primaryColor, estimatedPrimaryColorBrightness, primaryColorLight, primaryColorDark, primaryIsDark, toggleableActiveColor, accentColor, accentColorBrightness, accentIsDark, focusColor, hoverColor, canvasColor, bottomAppBarColor, cardColor, dividerColor, primaryIsDark0, t2, t3, t4, t5, t6, t7, colorScheme, unselectedWidgetColor, secondaryHeaderColor, backgroundColor, dialogBackgroundColor, indicatorColor, hintColor, buttonTheme, disabledColor, highlightColor, splashColor, typography, defaultTextTheme, defaultPrimaryTextTheme, defaultAccentTextTheme, textTheme, primaryTextTheme, iconTheme, primaryIconTheme, textSelectionColor, textSelectionHandleColor, accentTextTheme, accentIconTheme, buttonColor, _null = null,
        platform = A.defaultTargetPlatform();
      platform = platform;
      switch (platform.index) {
        case 0:
        case 1:
        case 2:
          materialTapTargetSize = B.MaterialTapTargetSize_0;
          break;
        case 3:
        case 4:
        case 5:
          materialTapTargetSize = B.MaterialTapTargetSize_1;
          break;
        default:
          materialTapTargetSize = _null;
      }
      visualDensity = A.VisualDensity_adaptivePlatformDensity();
      effectiveBrightness = B.Brightness_1;
      isDark = effectiveBrightness === B.Brightness_0;
      if (isDark) {
        t1 = B.Map_HFpTk.$index(0, 900);
        t1.toString;
        primaryColor = t1;
      } else
        primaryColor = B.MaterialColor_Map_JNwaj_4280391411;
      estimatedPrimaryColorBrightness = A.ThemeData_estimateBrightnessForColor(primaryColor);
      if (isDark) {
        t1 = B.Map_HFpTk.$index(0, 500);
        t1.toString;
        primaryColorLight = t1;
      } else {
        t1 = B.Map_JNwaj.$index(0, 100);
        t1.toString;
        primaryColorLight = t1;
      }
      if (isDark)
        primaryColorDark = B.Color_4278190080;
      else {
        t1 = B.Map_JNwaj.$index(0, 700);
        t1.toString;
        primaryColorDark = t1;
      }
      primaryIsDark = estimatedPrimaryColorBrightness === B.Brightness_0;
      if (isDark) {
        t1 = B.Map_iTYZn.$index(0, 200);
        t1.toString;
        toggleableActiveColor = t1;
      } else {
        t1 = B.Map_JNwaj.$index(0, 600);
        t1.toString;
        toggleableActiveColor = t1;
      }
      if (isDark) {
        t1 = B.Map_iTYZn.$index(0, 200);
        t1.toString;
        accentColor = t1;
      } else {
        t1 = B.Map_JNwaj.$index(0, 500);
        t1.toString;
        accentColor = t1;
      }
      accentColorBrightness = A.ThemeData_estimateBrightnessForColor(accentColor);
      accentIsDark = accentColorBrightness === B.Brightness_0;
      focusColor = isDark ? A.Color$fromARGB(31, 255, 255, 255) : A.Color$fromARGB(31, 0, 0, 0);
      hoverColor = isDark ? A.Color$fromARGB(10, 255, 255, 255) : A.Color$fromARGB(10, 0, 0, 0);
      if (isDark) {
        t1 = B.Map_HFpTk.$index(0, 850);
        t1.toString;
        canvasColor = t1;
      } else {
        t1 = B.Map_HFpTk.$index(0, 50);
        t1.toString;
        canvasColor = t1;
      }
      if (isDark) {
        t1 = B.Map_HFpTk.$index(0, 800);
        t1.toString;
        bottomAppBarColor = t1;
      } else
        bottomAppBarColor = B.Color_4294967295;
      if (isDark) {
        t1 = B.Map_HFpTk.$index(0, 800);
        t1.toString;
        cardColor = t1;
      } else
        cardColor = B.Color_4294967295;
      dividerColor = isDark ? B.Color_536870911 : B.Color_520093696;
      primaryIsDark0 = A.ThemeData_estimateBrightnessForColor(B.MaterialColor_Map_JNwaj_4280391411) === B.Brightness_0;
      t1 = A.ThemeData_estimateBrightnessForColor(accentColor);
      if (isDark) {
        t2 = B.Map_iTYZn.$index(0, 700);
        t2.toString;
      } else {
        t2 = B.Map_JNwaj.$index(0, 700);
        t2.toString;
      }
      if (isDark) {
        t3 = B.Map_HFpTk.$index(0, 700);
        t3.toString;
      } else {
        t3 = B.Map_JNwaj.$index(0, 200);
        t3.toString;
      }
      t4 = B.Map_JNc9P.$index(0, 700);
      t4.toString;
      t5 = primaryIsDark0 ? B.Color_4294967295 : B.Color_4278190080;
      t1 = t1 === B.Brightness_0 ? B.Color_4294967295 : B.Color_4278190080;
      t6 = isDark ? B.Color_4294967295 : B.Color_4278190080;
      t7 = primaryIsDark0 ? B.Color_4294967295 : B.Color_4278190080;
      colorScheme = A.ColorScheme$(t3, effectiveBrightness, t4, _null, _null, _null, t7, isDark ? B.Color_4278190080 : B.Color_4294967295, _null, _null, t5, _null, t1, _null, t6, _null, _null, _null, _null, B.MaterialColor_Map_JNwaj_4280391411, _null, primaryColorDark, accentColor, _null, t2, _null, cardColor, _null, _null, _null);
      t1 = B.Map_HFpTk.$index(0, 100);
      t1.toString;
      unselectedWidgetColor = isDark ? B.Color_3019898879 : B.Color_2315255808;
      if (isDark) {
        t2 = B.Map_HFpTk.$index(0, 700);
        t2.toString;
        secondaryHeaderColor = t2;
      } else {
        t2 = B.Map_JNwaj.$index(0, 50);
        t2.toString;
        secondaryHeaderColor = t2;
      }
      if (isDark) {
        t2 = B.Map_HFpTk.$index(0, 700);
        t2.toString;
        backgroundColor = t2;
      } else {
        t2 = B.Map_JNwaj.$index(0, 200);
        t2.toString;
        backgroundColor = t2;
      }
      if (isDark) {
        t2 = B.Map_HFpTk.$index(0, 800);
        t2.toString;
        dialogBackgroundColor = t2;
      } else
        dialogBackgroundColor = B.Color_4294967295;
      indicatorColor = accentColor.$eq(0, primaryColor) ? B.Color_4294967295 : accentColor;
      hintColor = isDark ? B.Color_2583691263 : A.Color$fromARGB(153, 0, 0, 0);
      t2 = B.Map_JNc9P.$index(0, 700);
      t2.toString;
      if (isDark) {
        t3 = B.Map_JNwaj.$index(0, 600);
        t3.toString;
      } else {
        t3 = B.Map_HFpTk.$index(0, 300);
        t3.toString;
      }
      buttonTheme = new A.ButtonThemeData(t3, _null, focusColor, hoverColor, _null, _null, colorScheme, materialTapTargetSize);
      disabledColor = isDark ? B.Color_1660944383 : B.Color_1627389952;
      highlightColor = isDark ? B.Color_1087163596 : B.Color_1723645116;
      splashColor = isDark ? B.Color_1087163596 : B.Color_1724434632;
      typography = A.Typography_Typography$material2014(platform);
      defaultTextTheme = isDark ? typography.white : typography.black;
      defaultPrimaryTextTheme = primaryIsDark ? typography.white : typography.black;
      defaultAccentTextTheme = accentIsDark ? typography.white : typography.black;
      textTheme = defaultTextTheme.merge$1(_null);
      primaryTextTheme = defaultPrimaryTextTheme.merge$1(_null);
      iconTheme = isDark ? B.IconThemeData_yrt : B.IconThemeData_UfZ;
      primaryIconTheme = primaryIsDark ? B.IconThemeData_yrt : B.IconThemeData_UfZ0;
      if (isDark)
        textSelectionColor = accentColor;
      else {
        t3 = B.Map_JNwaj.$index(0, 200);
        t3.toString;
        textSelectionColor = t3;
      }
      if (isDark) {
        t3 = B.Map_iTYZn.$index(0, 400);
        t3.toString;
        textSelectionHandleColor = t3;
      } else {
        t3 = B.Map_JNwaj.$index(0, 300);
        t3.toString;
        textSelectionHandleColor = t3;
      }
      accentTextTheme = defaultAccentTextTheme.merge$1(_null);
      accentIconTheme = accentIsDark ? B.IconThemeData_yrt : B.IconThemeData_UfZ0;
      if (isDark) {
        t3 = B.Map_JNwaj.$index(0, 600);
        t3.toString;
        buttonColor = t3;
      } else {
        t3 = B.Map_HFpTk.$index(0, 300);
        t3.toString;
        buttonColor = t3;
      }
      return A.ThemeData$raw(accentColor, accentColorBrightness, accentIconTheme, accentTextTheme, _null, B.C_AppBarTheme, false, backgroundColor, B.C_MaterialBannerThemeData, bottomAppBarColor, B.C_BottomAppBarTheme, B.C_BottomNavigationBarThemeData, B.C_BottomSheetThemeData, B.C_ButtonBarThemeData, buttonColor, buttonTheme, canvasColor, cardColor, B.C_CardTheme, B.C_CheckboxThemeData, B.C_ChipThemeData, colorScheme, _null, B.Color_4282549748, B.C_DataTableThemeData, dialogBackgroundColor, B.C_DialogTheme, disabledColor, dividerColor, B.C_DividerThemeData, B.C_DrawerThemeData, B.C_ElevatedButtonThemeData, t2, true, B.C_FloatingActionButtonThemeData, focusColor, highlightColor, hintColor, hoverColor, iconTheme, indicatorColor, B.C_InputDecorationTheme, B.C_ListTileThemeData, materialTapTargetSize, B.C_NavigationBarThemeData, B.C_NavigationRailThemeData, B.C_OutlinedButtonThemeData, B.C_PageTransitionsTheme, platform, B.C_PopupMenuThemeData, primaryColor, estimatedPrimaryColorBrightness, primaryColorDark, primaryColorLight, primaryIconTheme, primaryTextTheme, B.C_ProgressIndicatorThemeData, B.C_RadioThemeData, canvasColor, B.C_ScrollbarThemeData, secondaryHeaderColor, t1, B.Color_4278190080, B.C_SliderThemeData, B.C_SnackBarThemeData, splashColor, B.C__InkSplashFactory, B.C_SwitchThemeData, B.C_TabBarTheme, B.C_TextButtonThemeData, textSelectionColor, textSelectionHandleColor, B.C_TextSelectionThemeData, textTheme, B.C_TimePickerThemeData, B.C_ToggleButtonsThemeData, toggleableActiveColor, B.C_TooltipThemeData, typography, unselectedWidgetColor, false, true, visualDensity);
    },
    ThemeData_localize(baseTheme, localTextGeometry) {
      return $.$get$ThemeData__localizedThemeDataCache().putIfAbsent$2(0, new A._IdentityThemeDataCacheKey(baseTheme, localTextGeometry), new A.ThemeData_localize_closure(baseTheme, localTextGeometry));
    },
    ThemeData_estimateBrightnessForColor(color) {
      var t1 = color.value;
      t1 = 0.2126 * A.Color__linearizeColorComponent((t1 >>> 16 & 255) / 255) + 0.7152 * A.Color__linearizeColorComponent((t1 >>> 8 & 255) / 255) + 0.0722 * A.Color__linearizeColorComponent((t1 & 255) / 255) + 0.05;
      if (t1 * t1 > 0.15)
        return B.Brightness_1;
      return B.Brightness_0;
    },
    VisualDensity_adaptivePlatformDensity() {
      switch (A.defaultTargetPlatform().index) {
        case 0:
        case 2:
        case 1:
          break;
        case 3:
        case 4:
        case 5:
          return B.VisualDensity_m2_m2;
      }
      return B.VisualDensity_0_0;
    },
    MaterialTapTargetSize: function MaterialTapTargetSize(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    ThemeData: function ThemeData(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t80, t81, t82) {
      var _ = this;
      _.androidOverscrollIndicator = t0;
      _.applyElevationOverlayColor = t1;
      _.cupertinoOverrideTheme = t2;
      _.inputDecorationTheme = t3;
      _.materialTapTargetSize = t4;
      _.pageTransitionsTheme = t5;
      _.platform = t6;
      _.scrollbarTheme = t7;
      _.splashFactory = t8;
      _.visualDensity = t9;
      _.useMaterial3 = t10;
      _.colorScheme = t11;
      _.primaryColor = t12;
      _.primaryColorLight = t13;
      _.primaryColorDark = t14;
      _.focusColor = t15;
      _.hoverColor = t16;
      _.shadowColor = t17;
      _.canvasColor = t18;
      _.scaffoldBackgroundColor = t19;
      _.bottomAppBarColor = t20;
      _.cardColor = t21;
      _.dividerColor = t22;
      _.highlightColor = t23;
      _.splashColor = t24;
      _.selectedRowColor = t25;
      _.unselectedWidgetColor = t26;
      _.disabledColor = t27;
      _.secondaryHeaderColor = t28;
      _.backgroundColor = t29;
      _.dialogBackgroundColor = t30;
      _.indicatorColor = t31;
      _.hintColor = t32;
      _.errorColor = t33;
      _.toggleableActiveColor = t34;
      _.typography = t35;
      _.textTheme = t36;
      _.primaryTextTheme = t37;
      _.iconTheme = t38;
      _.primaryIconTheme = t39;
      _.appBarTheme = t40;
      _.bannerTheme = t41;
      _.bottomAppBarTheme = t42;
      _.bottomNavigationBarTheme = t43;
      _.bottomSheetTheme = t44;
      _.buttonBarTheme = t45;
      _.buttonTheme = t46;
      _.cardTheme = t47;
      _.checkboxTheme = t48;
      _.chipTheme = t49;
      _.dataTableTheme = t50;
      _.dialogTheme = t51;
      _.dividerTheme = t52;
      _.drawerTheme = t53;
      _.elevatedButtonTheme = t54;
      _.floatingActionButtonTheme = t55;
      _.listTileTheme = t56;
      _.navigationBarTheme = t57;
      _.navigationRailTheme = t58;
      _.outlinedButtonTheme = t59;
      _.popupMenuTheme = t60;
      _.progressIndicatorTheme = t61;
      _.radioTheme = t62;
      _.sliderTheme = t63;
      _.snackBarTheme = t64;
      _.switchTheme = t65;
      _.tabBarTheme = t66;
      _.textButtonTheme = t67;
      _.textSelectionTheme = t68;
      _.timePickerTheme = t69;
      _.toggleButtonsTheme = t70;
      _.tooltipTheme = t71;
      _.useTextSelectionTheme = t72;
      _.textSelectionColor = t73;
      _.cursorColor = t74;
      _.textSelectionHandleColor = t75;
      _.accentColor = t76;
      _.accentColorBrightness = t77;
      _.accentTextTheme = t78;
      _.accentIconTheme = t79;
      _.buttonColor = t80;
      _.fixTextFieldOutlineLabel = t81;
      _.primaryColorBrightness = t82;
    },
    ThemeData_localize_closure: function ThemeData_localize_closure(t0, t1) {
      this.baseTheme = t0;
      this.localTextGeometry = t1;
    },
    _IdentityThemeDataCacheKey: function _IdentityThemeDataCacheKey(t0, t1) {
      this.baseTheme = t0;
      this.localTextGeometry = t1;
    },
    _FifoCache: function _FifoCache(t0, t1, t2) {
      this._cache = t0;
      this._maximumSize = t1;
      this.$ti = t2;
    },
    VisualDensity: function VisualDensity(t0, t1) {
      this.horizontal = t0;
      this.vertical = t1;
    },
    _ThemeData_Object_Diagnosticable: function _ThemeData_Object_Diagnosticable() {
    },
    _VisualDensity_Object_Diagnosticable: function _VisualDensity_Object_Diagnosticable() {
    },
    TimePickerThemeData: function TimePickerThemeData() {
    },
    _TimePickerThemeData_Object_Diagnosticable: function _TimePickerThemeData_Object_Diagnosticable() {
    },
    ToggleButtonsThemeData: function ToggleButtonsThemeData() {
    },
    _ToggleButtonsThemeData_Object_Diagnosticable: function _ToggleButtonsThemeData_Object_Diagnosticable() {
    },
    TooltipThemeData: function TooltipThemeData() {
    },
    _TooltipThemeData_Object_Diagnosticable: function _TooltipThemeData_Object_Diagnosticable() {
    },
    Typography_Typography$material2014(platform) {
      return A.Typography_Typography$_withPlatform(platform, null, null, B.TextTheme_gSp, B.TextTheme_jnH, B.TextTheme_uww);
    },
    Typography_Typography$_withPlatform(platform, black, white, englishLike, dense, tall) {
      switch (platform) {
        case B.TargetPlatform_2:
          black = B.TextTheme_QJO;
          white = B.TextTheme_vru;
          break;
        case B.TargetPlatform_0:
        case B.TargetPlatform_1:
          black = B.TextTheme_WrZ;
          white = B.TextTheme_8I8;
          break;
        case B.TargetPlatform_5:
          black = B.TextTheme_pEW;
          white = B.TextTheme_3nh;
          break;
        case B.TargetPlatform_4:
          black = B.TextTheme_6bg;
          white = B.TextTheme_uDC;
          break;
        case B.TargetPlatform_3:
          black = B.TextTheme_AZd;
          white = B.TextTheme_Zy0;
          break;
        case null:
          break;
      }
      black.toString;
      white.toString;
      return new A.Typography(black, white, englishLike, dense, tall);
    },
    ScriptCategory: function ScriptCategory(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    Typography: function Typography(t0, t1, t2, t3, t4) {
      var _ = this;
      _.black = t0;
      _.white = t1;
      _.englishLike = t2;
      _.dense = t3;
      _.tall = t4;
    },
    _Typography_Object_Diagnosticable: function _Typography_Object_Diagnosticable() {
    },
    AlignmentGeometry_lerp(a, b, t) {
      var t2, t3,
        t1 = a == null;
      if (t1 && b == null)
        return null;
      if (t1)
        return b.$mul(0, t);
      if (b == null)
        return a.$mul(0, 1 - t);
      if (a instanceof A.Alignment && b instanceof A.Alignment)
        return A.Alignment_lerp(a, b, t);
      if (a instanceof A.AlignmentDirectional && b instanceof A.AlignmentDirectional)
        return A.AlignmentDirectional_lerp(a, b, t);
      t1 = A.lerpDouble(a.get$_x(), b.get$_x(), t);
      t1.toString;
      t2 = A.lerpDouble(a.get$_alignment$_start(a), b.get$_alignment$_start(b), t);
      t2.toString;
      t3 = A.lerpDouble(a.get$_y(), b.get$_y(), t);
      t3.toString;
      return new A._MixedAlignment(t1, t2, t3);
    },
    Alignment_lerp(a, b, t) {
      var t2,
        t1 = A.lerpDouble(a.x, b.x, t);
      t1.toString;
      t2 = A.lerpDouble(a.y, b.y, t);
      t2.toString;
      return new A.Alignment(t1, t2);
    },
    Alignment__stringify(x, y) {
      var t2, t3,
        t1 = x === -1;
      if (t1 && y === -1)
        return "Alignment.topLeft";
      t2 = x === 0;
      if (t2 && y === -1)
        return "Alignment.topCenter";
      t3 = x === 1;
      if (t3 && y === -1)
        return "Alignment.topRight";
      if (t1 && y === 0)
        return "Alignment.centerLeft";
      if (t2 && y === 0)
        return "Alignment.center";
      if (t3 && y === 0)
        return "Alignment.centerRight";
      if (t1 && y === 1)
        return "Alignment.bottomLeft";
      if (t2 && y === 1)
        return "Alignment.bottomCenter";
      if (t3 && y === 1)
        return "Alignment.bottomRight";
      return "Alignment(" + B.JSNumber_methods.toStringAsFixed$1(x, 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(y, 1) + ")";
    },
    AlignmentDirectional_lerp(a, b, t) {
      var t2,
        t1 = A.lerpDouble(a.start, b.start, t);
      t1.toString;
      t2 = A.lerpDouble(a.y, b.y, t);
      t2.toString;
      return new A.AlignmentDirectional(t1, t2);
    },
    AlignmentDirectional__stringify(start, y) {
      var t2, t3,
        t1 = start === -1;
      if (t1 && y === -1)
        return "AlignmentDirectional.topStart";
      t2 = start === 0;
      if (t2 && y === -1)
        return "AlignmentDirectional.topCenter";
      t3 = start === 1;
      if (t3 && y === -1)
        return "AlignmentDirectional.topEnd";
      if (t1 && y === 0)
        return "AlignmentDirectional.centerStart";
      if (t2 && y === 0)
        return "AlignmentDirectional.center";
      if (t3 && y === 0)
        return "AlignmentDirectional.centerEnd";
      if (t1 && y === 1)
        return "AlignmentDirectional.bottomStart";
      if (t2 && y === 1)
        return "AlignmentDirectional.bottomCenter";
      if (t3 && y === 1)
        return "AlignmentDirectional.bottomEnd";
      return "AlignmentDirectional(" + B.JSNumber_methods.toStringAsFixed$1(start, 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(y, 1) + ")";
    },
    AlignmentGeometry: function AlignmentGeometry() {
    },
    Alignment: function Alignment(t0, t1) {
      this.x = t0;
      this.y = t1;
    },
    AlignmentDirectional: function AlignmentDirectional(t0, t1) {
      this.start = t0;
      this.y = t1;
    },
    _MixedAlignment: function _MixedAlignment(t0, t1, t2) {
      this._x = t0;
      this._alignment$_start = t1;
      this._y = t2;
    },
    flipAxis(direction) {
      switch (direction.index) {
        case 0:
          return B.Axis_1;
        case 1:
          return B.Axis_0;
      }
    },
    RenderComparison: function RenderComparison(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    Axis: function Axis(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    VerticalDirection: function VerticalDirection(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    PaintingBinding: function PaintingBinding() {
    },
    _SystemFontsNotifier: function _SystemFontsNotifier(t0) {
      this._systemFontsCallbacks = t0;
    },
    BorderRadiusGeometry_lerp(a, b, t) {
      var t1 = a == null;
      if (t1 && b == null)
        return null;
      if (t1)
        a = B.BorderRadius_tLn;
      return a.add$1(0, (b == null ? B.BorderRadius_tLn : b).subtract$1(a).$mul(0, t));
    },
    BorderRadius_lerp(a, b, t) {
      var t2, t3, t4,
        t1 = a == null;
      if (t1 && b == null)
        return null;
      if (t1)
        return b.$mul(0, t);
      if (b == null)
        return a.$mul(0, 1 - t);
      t1 = A.Radius_lerp(a.topLeft, b.topLeft, t);
      t1.toString;
      t2 = A.Radius_lerp(a.topRight, b.topRight, t);
      t2.toString;
      t3 = A.Radius_lerp(a.bottomLeft, b.bottomLeft, t);
      t3.toString;
      t4 = A.Radius_lerp(a.bottomRight, b.bottomRight, t);
      t4.toString;
      return new A.BorderRadius(t1, t2, t3, t4);
    },
    BorderRadiusGeometry: function BorderRadiusGeometry() {
    },
    BorderRadius: function BorderRadius(t0, t1, t2, t3) {
      var _ = this;
      _.topLeft = t0;
      _.topRight = t1;
      _.bottomLeft = t2;
      _.bottomRight = t3;
    },
    _MixedBorderRadius: function _MixedBorderRadius(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._topLeft = t0;
      _._topRight = t1;
      _._bottomLeft = t2;
      _._bottomRight = t3;
      _._topStart = t4;
      _._topEnd = t5;
      _._bottomStart = t6;
      _._bottomEnd = t7;
    },
    BorderSide_merge(a, b) {
      var t1 = a.style,
        aIsNone = t1 === B.BorderStyle_0 && a.width === 0,
        bIsNone = b.style === B.BorderStyle_0 && b.width === 0;
      if (aIsNone && bIsNone)
        return B.BorderSide_0CF;
      if (aIsNone)
        return b;
      if (bIsNone)
        return a;
      return new A.BorderSide(a.color, a.width + b.width, t1);
    },
    BorderSide_canMerge(a, b) {
      var t2,
        t1 = a.style;
      if (!(t1 === B.BorderStyle_0 && a.width === 0))
        t2 = b.style === B.BorderStyle_0 && b.width === 0;
      else
        t2 = true;
      if (t2)
        return true;
      return t1 === b.style && a.color.$eq(0, b.color);
    },
    BorderSide_lerp(a, b, t) {
      var t1, t2, t3, colorA, colorB;
      if (t === 0)
        return a;
      if (t === 1)
        return b;
      t1 = A.lerpDouble(a.width, b.width, t);
      t1.toString;
      if (t1 < 0)
        return B.BorderSide_0CF;
      t2 = a.style;
      t3 = b.style;
      if (t2 === t3) {
        t3 = A.Color_lerp(a.color, b.color, t);
        t3.toString;
        return new A.BorderSide(t3, t1, t2);
      }
      switch (t2.index) {
        case 1:
          colorA = a.color;
          break;
        case 0:
          t2 = a.color.value;
          colorA = A.Color$fromARGB(0, t2 >>> 16 & 255, t2 >>> 8 & 255, t2 & 255);
          break;
        default:
          colorA = null;
      }
      switch (t3.index) {
        case 1:
          colorB = b.color;
          break;
        case 0:
          t2 = b.color.value;
          colorB = A.Color$fromARGB(0, t2 >>> 16 & 255, t2 >>> 8 & 255, t2 & 255);
          break;
        default:
          colorB = null;
      }
      t2 = A.Color_lerp(colorA, colorB, t);
      t2.toString;
      return new A.BorderSide(t2, t1, B.BorderStyle_1);
    },
    ShapeBorder_lerp(a, b, t) {
      var t1,
        result = b != null ? b.lerpFrom$2(a, t) : null;
      if (result == null && a != null)
        result = a.lerpTo$2(b, t);
      if (result == null)
        t1 = t < 0.5 ? a : b;
      else
        t1 = result;
      return t1;
    },
    _CompoundBorder_lerp(a, b, t) {
      var t1, index, localA, localB, t2, localResult,
        aList = a instanceof A._CompoundBorder ? a.borders : A._setArrayType([a], type$.JSArray_nullable_ShapeBorder),
        bList = b instanceof A._CompoundBorder ? b.borders : A._setArrayType([b], type$.JSArray_nullable_ShapeBorder),
        results = A._setArrayType([], type$.JSArray_ShapeBorder),
        $length = Math.max(aList.length, bList.length);
      for (t1 = 1 - t, index = 0; index < $length; ++index) {
        localA = index < aList.length ? aList[index] : null;
        localB = index < bList.length ? bList[index] : null;
        t2 = localA != null;
        if (t2 && localB != null) {
          localResult = localA.lerpTo$2(localB, t);
          if (localResult == null)
            localResult = localB.lerpFrom$2(localA, t);
          if (localResult != null) {
            results.push(localResult);
            continue;
          }
        }
        if (localB != null)
          results.push(localB.scale$1(0, t));
        if (t2)
          results.push(localA.scale$1(0, t1));
      }
      return new A._CompoundBorder(results);
    },
    paintBorder(canvas, rect, bottom, left, right, $top) {
      var path, t1, t2, t3, t4,
        paint = $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData());
      paint.set$strokeWidth(0);
      path = A.Path_Path();
      switch ($top.style.index) {
        case 1:
          paint.set$color(0, $top.color);
          path.reset$0(0);
          t1 = rect.left;
          t2 = rect.top;
          path.moveTo$2(0, t1, t2);
          t3 = rect.right;
          path.lineTo$2(0, t3, t2);
          t4 = $top.width;
          if (t4 === 0)
            paint.set$style(0, B.PaintingStyle_1);
          else {
            paint.set$style(0, B.PaintingStyle_0);
            t2 += t4;
            path.lineTo$2(0, t3 - right.width, t2);
            path.lineTo$2(0, t1 + left.width, t2);
          }
          canvas.drawPath$2(0, path, paint);
          break;
        case 0:
          break;
      }
      switch (right.style.index) {
        case 1:
          paint.set$color(0, right.color);
          path.reset$0(0);
          t1 = rect.right;
          t2 = rect.top;
          path.moveTo$2(0, t1, t2);
          t3 = rect.bottom;
          path.lineTo$2(0, t1, t3);
          t4 = right.width;
          if (t4 === 0)
            paint.set$style(0, B.PaintingStyle_1);
          else {
            paint.set$style(0, B.PaintingStyle_0);
            t1 -= t4;
            path.lineTo$2(0, t1, t3 - bottom.width);
            path.lineTo$2(0, t1, t2 + $top.width);
          }
          canvas.drawPath$2(0, path, paint);
          break;
        case 0:
          break;
      }
      switch (bottom.style.index) {
        case 1:
          paint.set$color(0, bottom.color);
          path.reset$0(0);
          t1 = rect.right;
          t2 = rect.bottom;
          path.moveTo$2(0, t1, t2);
          t3 = rect.left;
          path.lineTo$2(0, t3, t2);
          t4 = bottom.width;
          if (t4 === 0)
            paint.set$style(0, B.PaintingStyle_1);
          else {
            paint.set$style(0, B.PaintingStyle_0);
            t2 -= t4;
            path.lineTo$2(0, t3 + left.width, t2);
            path.lineTo$2(0, t1 - right.width, t2);
          }
          canvas.drawPath$2(0, path, paint);
          break;
        case 0:
          break;
      }
      switch (left.style.index) {
        case 1:
          paint.set$color(0, left.color);
          path.reset$0(0);
          t1 = rect.left;
          t2 = rect.bottom;
          path.moveTo$2(0, t1, t2);
          t3 = rect.top;
          path.lineTo$2(0, t1, t3);
          t4 = left.width;
          if (t4 === 0)
            paint.set$style(0, B.PaintingStyle_1);
          else {
            paint.set$style(0, B.PaintingStyle_0);
            t1 += t4;
            path.lineTo$2(0, t1, t3 + $top.width);
            path.lineTo$2(0, t1, t2 - bottom.width);
          }
          canvas.drawPath$2(0, path, paint);
          break;
        case 0:
          break;
      }
    },
    BorderStyle: function BorderStyle(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    BorderSide: function BorderSide(t0, t1, t2) {
      this.color = t0;
      this.width = t1;
      this.style = t2;
    },
    ShapeBorder: function ShapeBorder() {
    },
    OutlinedBorder: function OutlinedBorder() {
    },
    _CompoundBorder: function _CompoundBorder(t0) {
      this.borders = t0;
    },
    _CompoundBorder_dimensions_closure: function _CompoundBorder_dimensions_closure() {
    },
    _CompoundBorder_scale_closure: function _CompoundBorder_scale_closure(t0) {
      this.t = t0;
    },
    _CompoundBorder_toString_closure: function _CompoundBorder_toString_closure() {
    },
    BoxBorder_lerp(a, b, t) {
      var t0, t2,
        t1 = type$.nullable_Border;
      if (t1._is(a) && t1._is(b))
        return A.Border_lerp(a, b, t);
      t1 = type$.nullable_BorderDirectional;
      if (t1._is(a) && t1._is(b))
        return A.BorderDirectional_lerp(a, b, t);
      if (b instanceof A.Border && a instanceof A.BorderDirectional) {
        t = 1 - t;
        t0 = b;
        b = a;
        a = t0;
      }
      if (a instanceof A.Border && b instanceof A.BorderDirectional) {
        t1 = b.start;
        if (t1.$eq(0, B.BorderSide_0CF) && b.end.$eq(0, B.BorderSide_0CF))
          return new A.Border(A.BorderSide_lerp(a.top, b.top, t), A.BorderSide_lerp(a.right, B.BorderSide_0CF, t), A.BorderSide_lerp(a.bottom, b.bottom, t), A.BorderSide_lerp(a.left, B.BorderSide_0CF, t));
        t2 = a.left;
        if (t2.$eq(0, B.BorderSide_0CF) && a.right.$eq(0, B.BorderSide_0CF))
          return new A.BorderDirectional(A.BorderSide_lerp(a.top, b.top, t), A.BorderSide_lerp(B.BorderSide_0CF, t1, t), A.BorderSide_lerp(B.BorderSide_0CF, b.end, t), A.BorderSide_lerp(a.bottom, b.bottom, t));
        if (t < 0.5) {
          t1 = t * 2;
          return new A.Border(A.BorderSide_lerp(a.top, b.top, t), A.BorderSide_lerp(a.right, B.BorderSide_0CF, t1), A.BorderSide_lerp(a.bottom, b.bottom, t), A.BorderSide_lerp(t2, B.BorderSide_0CF, t1));
        }
        t2 = (t - 0.5) * 2;
        return new A.BorderDirectional(A.BorderSide_lerp(a.top, b.top, t), A.BorderSide_lerp(B.BorderSide_0CF, t1, t2), A.BorderSide_lerp(B.BorderSide_0CF, b.end, t2), A.BorderSide_lerp(a.bottom, b.bottom, t));
      }
      throw A.wrapException(A.FlutterError$fromParts(A._setArrayType([A.ErrorSummary$("BoxBorder.lerp can only interpolate Border and BorderDirectional classes."), A.ErrorDescription$("BoxBorder.lerp() was called with two objects of type " + J.get$runtimeType$(a).toString$0(0) + " and " + J.get$runtimeType$(b).toString$0(0) + ":\n  " + A.S(a) + "\n  " + A.S(b) + "\nHowever, only Border and BorderDirectional classes are supported by this method."), A.ErrorHint$("For a more general interpolation method, consider using ShapeBorder.lerp instead.")], type$.JSArray_DiagnosticsNode)));
    },
    BoxBorder__paintUniformBorderWithRadius(canvas, rect, side, borderRadius) {
      var outer, width,
        paint = $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData());
      paint.set$color(0, side.color);
      outer = borderRadius.toRRect$1(rect);
      width = side.width;
      if (width === 0) {
        paint.set$style(0, B.PaintingStyle_1);
        paint.set$strokeWidth(0);
        canvas.drawRRect$2(0, outer, paint);
      } else
        canvas.drawDRRect$3(0, outer, outer.inflate$1(-width), paint);
    },
    BoxBorder__paintUniformBorderWithCircle(canvas, rect, side) {
      var paint = side.toPaint$0(),
        t1 = rect.get$shortestSide();
      canvas.drawCircle$3(0, rect.get$center(), (t1 - side.width) / 2, paint);
    },
    BoxBorder__paintUniformBorderWithRectangle(canvas, rect, side) {
      var paint = side.toPaint$0();
      canvas.drawRect$2(0, rect.inflate$1(-(side.width / 2)), paint);
    },
    Border_lerp(a, b, t) {
      var t1 = a == null;
      if (t1 && b == null)
        return null;
      if (t1)
        return b.scale$1(0, t);
      if (b == null)
        return a.scale$1(0, 1 - t);
      return new A.Border(A.BorderSide_lerp(a.top, b.top, t), A.BorderSide_lerp(a.right, b.right, t), A.BorderSide_lerp(a.bottom, b.bottom, t), A.BorderSide_lerp(a.left, b.left, t));
    },
    BorderDirectional_lerp(a, b, t) {
      var t2, t3,
        t1 = a == null;
      if (t1 && b == null)
        return null;
      if (t1)
        return b.scale$1(0, t);
      if (b == null)
        return a.scale$1(0, 1 - t);
      t1 = A.BorderSide_lerp(a.top, b.top, t);
      t2 = A.BorderSide_lerp(a.end, b.end, t);
      t3 = A.BorderSide_lerp(a.bottom, b.bottom, t);
      return new A.BorderDirectional(t1, A.BorderSide_lerp(a.start, b.start, t), t2, t3);
    },
    BoxShape: function BoxShape(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    BoxBorder: function BoxBorder() {
    },
    Border: function Border(t0, t1, t2, t3) {
      var _ = this;
      _.top = t0;
      _.right = t1;
      _.bottom = t2;
      _.left = t3;
    },
    BorderDirectional: function BorderDirectional(t0, t1, t2, t3) {
      var _ = this;
      _.top = t0;
      _.start = t1;
      _.end = t2;
      _.bottom = t3;
    },
    BoxDecoration_lerp(a, b, t) {
      var t1, t2, t3, t4, t5, t6, t7;
      if (t === 0)
        return a;
      if (t === 1)
        return b;
      t1 = A.Color_lerp(a.color, b.color, t);
      t2 = t < 0.5;
      t3 = t2 ? a.image : b.image;
      t4 = A.BoxBorder_lerp(a.border, b.border, t);
      t5 = A.BorderRadiusGeometry_lerp(a.borderRadius, b.borderRadius, t);
      t6 = A.BoxShadow_lerpList(a.boxShadow, b.boxShadow, t);
      t7 = A.Gradient_lerp(a.gradient, b.gradient, t);
      return new A.BoxDecoration(t1, t3, t4, t5, t6, t7, t2 ? a.shape : b.shape);
    },
    BoxDecoration: function BoxDecoration(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.color = t0;
      _.image = t1;
      _.border = t2;
      _.borderRadius = t3;
      _.boxShadow = t4;
      _.gradient = t5;
      _.shape = t6;
    },
    _BoxDecorationPainter: function _BoxDecorationPainter(t0, t1) {
      var _ = this;
      _._box_decoration$_decoration = t0;
      _._box_decoration$_imagePainter = _._rectForCachedBackgroundPaint = _._cachedBackgroundPaint = null;
      _.onChanged = t1;
    },
    BoxFit: function BoxFit(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    BoxShadow_lerp(a, b, t) {
      var t2, t3, t4,
        t1 = A.Color_lerp(a.color, b.color, t);
      t1.toString;
      t2 = A.Offset_lerp(a.offset, b.offset, t);
      t2.toString;
      t3 = A.lerpDouble(a.blurRadius, b.blurRadius, t);
      t3.toString;
      t4 = A.lerpDouble(a.spreadRadius, b.spreadRadius, t);
      t4.toString;
      return new A.BoxShadow(t4, a.blurStyle, t1, t2, t3);
    },
    BoxShadow_lerpList(a, b, t) {
      var commonLength, i, t2, t3, t4, t5, t6,
        t1 = a == null;
      if (t1 && b == null)
        return null;
      if (t1)
        a = A._setArrayType([], type$.JSArray_BoxShadow);
      if (b == null)
        b = A._setArrayType([], type$.JSArray_BoxShadow);
      commonLength = Math.min(a.length, b.length);
      t1 = A._setArrayType([], type$.JSArray_BoxShadow);
      for (i = 0; i < commonLength; ++i) {
        t2 = A.BoxShadow_lerp(a[i], b[i], t);
        t2.toString;
        t1.push(t2);
      }
      for (t2 = 1 - t, i = commonLength; i < a.length; ++i) {
        t3 = a[i];
        t4 = t3.color;
        t5 = t3.offset;
        t6 = t3.blurRadius;
        t1.push(new A.BoxShadow(t3.spreadRadius * t2, t3.blurStyle, t4, new A.Offset(t5._dx * t2, t5._dy * t2), t6 * t2));
      }
      for (i = commonLength; i < b.length; ++i) {
        t2 = b[i];
        t3 = t2.color;
        t4 = t2.offset;
        t5 = t2.blurRadius;
        t1.push(new A.BoxShadow(t2.spreadRadius * t, t2.blurStyle, t3, new A.Offset(t4._dx * t, t4._dy * t), t5 * t));
      }
      return t1;
    },
    BoxShadow: function BoxShadow(t0, t1, t2, t3, t4) {
      var _ = this;
      _.spreadRadius = t0;
      _.blurStyle = t1;
      _.color = t2;
      _.offset = t3;
      _.blurRadius = t4;
    },
    CircleBorder: function CircleBorder(t0) {
      this.side = t0;
    },
    ClipContext: function ClipContext() {
    },
    ClipContext_clipPathAndPaint_closure: function ClipContext_clipPathAndPaint_closure(t0, t1) {
      this.$this = t0;
      this.path = t1;
    },
    ClipContext_clipRectAndPaint_closure: function ClipContext_clipRectAndPaint_closure(t0, t1) {
      this.$this = t0;
      this.rect = t1;
    },
    ColorSwatch: function ColorSwatch() {
    },
    Decoration_lerp(a, b, t) {
      var _null = null,
        t1 = a == null;
      if (t1 && b == null)
        return _null;
      if (t1) {
        t1 = b.lerpFrom$2(_null, t);
        return t1 == null ? b : t1;
      }
      if (b == null) {
        t1 = a.lerpTo$2(_null, t);
        return t1 == null ? a : t1;
      }
      if (t === 0)
        return a;
      if (t === 1)
        return b;
      t1 = b.lerpFrom$2(a, t);
      if (t1 == null)
        t1 = a.lerpTo$2(b, t);
      if (t1 == null)
        if (t < 0.5) {
          t1 = a.lerpTo$2(_null, t * 2);
          if (t1 == null)
            t1 = a;
        } else {
          t1 = b.lerpFrom$2(_null, (t - 0.5) * 2);
          if (t1 == null)
            t1 = b;
        }
      return t1;
    },
    Decoration: function Decoration() {
    },
    BoxPainter: function BoxPainter() {
    },
    _Decoration_Object_Diagnosticable: function _Decoration_Object_Diagnosticable() {
    },
    DecorationImagePainter: function DecorationImagePainter(t0, t1) {
      var _ = this;
      _._details = t0;
      _._onChanged = t1;
      _._image = _._imageStream = null;
    },
    EdgeInsetsGeometry_lerp(a, b, t) {
      var t2, t3, t4, t5, t6,
        t1 = a == null;
      if (t1 && b == null)
        return null;
      if (t1)
        return b.$mul(0, t);
      if (b == null)
        return a.$mul(0, 1 - t);
      if (a instanceof A.EdgeInsets && b instanceof A.EdgeInsets)
        return A.EdgeInsets_lerp(a, b, t);
      if (a instanceof A.EdgeInsetsDirectional && b instanceof A.EdgeInsetsDirectional)
        return A.EdgeInsetsDirectional_lerp(a, b, t);
      t1 = A.lerpDouble(a.get$_left(a), b.get$_left(b), t);
      t1.toString;
      t2 = A.lerpDouble(a.get$_right(a), b.get$_right(b), t);
      t2.toString;
      t3 = A.lerpDouble(a.get$_edge_insets$_start(a), b.get$_edge_insets$_start(b), t);
      t3.toString;
      t4 = A.lerpDouble(a.get$_edge_insets$_end(), b.get$_edge_insets$_end(), t);
      t4.toString;
      t5 = A.lerpDouble(a.get$_top(a), b.get$_top(b), t);
      t5.toString;
      t6 = A.lerpDouble(a.get$_bottom(a), b.get$_bottom(b), t);
      t6.toString;
      return new A._MixedEdgeInsets(t1, t2, t3, t4, t5, t6);
    },
    EdgeInsets$fromWindowPadding(padding, devicePixelRatio) {
      return new A.EdgeInsets(padding.left / devicePixelRatio, padding.top / devicePixelRatio, padding.right / devicePixelRatio, padding.bottom / devicePixelRatio);
    },
    EdgeInsets_lerp(a, b, t) {
      var t2, t3, t4,
        t1 = A.lerpDouble(a.left, b.left, t);
      t1.toString;
      t2 = A.lerpDouble(a.top, b.top, t);
      t2.toString;
      t3 = A.lerpDouble(a.right, b.right, t);
      t3.toString;
      t4 = A.lerpDouble(a.bottom, b.bottom, t);
      t4.toString;
      return new A.EdgeInsets(t1, t2, t3, t4);
    },
    EdgeInsetsDirectional_lerp(a, b, t) {
      var t2, t3, t4,
        t1 = A.lerpDouble(a.start, b.start, t);
      t1.toString;
      t2 = A.lerpDouble(a.top, b.top, t);
      t2.toString;
      t3 = A.lerpDouble(a.end, b.end, t);
      t3.toString;
      t4 = A.lerpDouble(a.bottom, b.bottom, t);
      t4.toString;
      return new A.EdgeInsetsDirectional(t1, t2, t3, t4);
    },
    EdgeInsetsGeometry: function EdgeInsetsGeometry() {
    },
    EdgeInsets: function EdgeInsets(t0, t1, t2, t3) {
      var _ = this;
      _.left = t0;
      _.top = t1;
      _.right = t2;
      _.bottom = t3;
    },
    EdgeInsetsDirectional: function EdgeInsetsDirectional(t0, t1, t2, t3) {
      var _ = this;
      _.start = t0;
      _.top = t1;
      _.end = t2;
      _.bottom = t3;
    },
    _MixedEdgeInsets: function _MixedEdgeInsets(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._left = t0;
      _._right = t1;
      _._edge_insets$_start = t2;
      _._edge_insets$_end = t3;
      _._top = t4;
      _._bottom = t5;
    },
    ImageCache: function ImageCache(t0, t1, t2) {
      var _ = this;
      _._pendingImages = t0;
      _._image_cache$_cache = t1;
      _._liveImages = t2;
      _._currentSizeBytes = 0;
    },
    ImageConfiguration: function ImageConfiguration(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.bundle = t0;
      _.devicePixelRatio = t1;
      _.locale = t2;
      _.textDirection = t3;
      _.size = t4;
      _.platform = t5;
    },
    ImageStreamListener: function ImageStreamListener(t0, t1) {
      this.onImage = t0;
      this.onError = t1;
    },
    InlineSpanSemanticsInformation$(text, recognizer, semanticsLabel, stringAttributes) {
      return new A.InlineSpanSemanticsInformation(text, semanticsLabel, recognizer, false, stringAttributes);
    },
    combineSemanticsInfo(infoList) {
      var t2, workingText, workingLabel, _i, info, effectiveLabel, effectiveLabel0, t3, t4, t5, _i0, infoAttribute, t6,
        combined = A._setArrayType([], type$.JSArray_InlineSpanSemanticsInformation),
        t1 = type$.JSArray_StringAttribute,
        workingAttributes = A._setArrayType([], t1);
      for (t2 = infoList.length, workingText = "", workingLabel = "", _i = 0; _i < infoList.length; infoList.length === t2 || (0, A.throwConcurrentModificationError)(infoList), ++_i) {
        info = infoList[_i];
        if (info.requiresOwnNode) {
          combined.push(new A.InlineSpanSemanticsInformation(workingText, workingLabel, null, false, workingAttributes));
          workingAttributes = A._setArrayType([], t1);
          combined.push(info);
          workingText = "";
          workingLabel = "";
        } else {
          effectiveLabel = info.text;
          workingText += effectiveLabel;
          effectiveLabel0 = info.semanticsLabel;
          effectiveLabel = effectiveLabel0 == null ? effectiveLabel : effectiveLabel0;
          for (t3 = info.stringAttributes, t4 = t3.length, t5 = workingLabel.length, _i0 = 0; _i0 < t3.length; t3.length === t4 || (0, A.throwConcurrentModificationError)(t3), ++_i0) {
            infoAttribute = t3[_i0];
            t6 = infoAttribute.range;
            workingAttributes.push(infoAttribute.copy$1$range(0, new A.TextRange(t6.start + t5, t6.end + t5)));
          }
          workingLabel += effectiveLabel;
        }
      }
      combined.push(A.InlineSpanSemanticsInformation$(workingText, null, workingLabel, workingAttributes));
      return combined;
    },
    Accumulator: function Accumulator() {
      this._inline_span$_value = 0;
    },
    InlineSpanSemanticsInformation: function InlineSpanSemanticsInformation(t0, t1, t2, t3, t4) {
      var _ = this;
      _.text = t0;
      _.semanticsLabel = t1;
      _.recognizer = t2;
      _.requiresOwnNode = t3;
      _.stringAttributes = t4;
    },
    InlineSpan: function InlineSpan() {
    },
    InlineSpan_getSpanForPosition_closure: function InlineSpan_getSpanForPosition_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.position = t1;
      this.offset = t2;
    },
    RoundedRectangleBorder: function RoundedRectangleBorder(t0, t1) {
      this.borderRadius = t0;
      this.side = t1;
    },
    _RoundedRectangleToCircleBorder: function _RoundedRectangleToCircleBorder(t0, t1, t2) {
      this.borderRadius = t0;
      this.circleness = t1;
      this.side = t2;
    },
    ShapeDecoration_ShapeDecoration$fromBoxDecoration(source) {
      var t1, shape, t2;
      switch (source.shape.index) {
        case 1:
          t1 = source.border;
          shape = t1 != null ? new A.CircleBorder(t1.get$top(t1)) : B.CircleBorder_IVQ;
          break;
        case 0:
          t1 = source.borderRadius;
          shape = source.border;
          if (t1 != null) {
            t2 = shape == null ? null : shape.get$top(shape);
            shape = new A.RoundedRectangleBorder(t1, t2 == null ? B.BorderSide_0CF : t2);
          } else if (shape == null)
            shape = B.Border_27z;
          break;
        default:
          shape = null;
      }
      return new A.ShapeDecoration(source.color, source.gradient, source.image, source.boxShadow, shape);
    },
    ShapeDecoration_lerp(a, b, t) {
      var t2, t3, t4, t5, t6, _null = null,
        t1 = a == null;
      if (t1 && b == null)
        return _null;
      if (!t1 && b != null) {
        if (t === 0)
          return a;
        if (t === 1)
          return b;
      }
      t2 = t1 ? _null : a.color;
      t3 = b == null;
      t2 = A.Color_lerp(t2, t3 ? _null : b.color, t);
      t4 = t1 ? _null : a.gradient;
      t4 = A.Gradient_lerp(t4, t3 ? _null : b.gradient, t);
      t5 = t < 0.5 ? a.image : b.image;
      t6 = t1 ? _null : a.shadows;
      t6 = A.BoxShadow_lerpList(t6, t3 ? _null : b.shadows, t);
      t1 = t1 ? _null : a.shape;
      t1 = A.ShapeBorder_lerp(t1, t3 ? _null : b.shape, t);
      t1.toString;
      return new A.ShapeDecoration(t2, t4, t5, t6, t1);
    },
    ShapeDecoration: function ShapeDecoration(t0, t1, t2, t3, t4) {
      var _ = this;
      _.color = t0;
      _.gradient = t1;
      _.image = t2;
      _.shadows = t3;
      _.shape = t4;
    },
    _ShapeDecorationPainter: function _ShapeDecorationPainter(t0, t1) {
      var _ = this;
      _._shape_decoration$_decoration = t0;
      _._lastTextDirection = _._lastRect = null;
      _.___ShapeDecorationPainter__outerPath = $;
      _._shadowCount = _._interiorPaint = _._innerPath = null;
      _.___ShapeDecorationPainter__shadowPaints = _.___ShapeDecorationPainter__shadowPaths = $;
      _._imagePainter = null;
      _.onChanged = t1;
    },
    _ShapeDecorationPainter__precache_closure: function _ShapeDecorationPainter__precache_closure() {
    },
    _ShapeDecorationPainter__precache_closure0: function _ShapeDecorationPainter__precache_closure0(t0, t1, t2) {
      this.$this = t0;
      this.rect = t1;
      this.textDirection = t2;
    },
    TextPainter$(ellipsis, locale, maxLines, strutStyle, text, textAlign, textDirection, textHeightBehavior, textScaleFactor, textWidthBasis) {
      return new A.TextPainter(text, textAlign, textDirection, textScaleFactor, ellipsis, locale, maxLines, strutStyle, textWidthBasis, textHeightBehavior);
    },
    TextOverflow: function TextOverflow(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    PlaceholderDimensions: function PlaceholderDimensions(t0, t1) {
      this.size = t0;
      this.baseline = t1;
    },
    TextWidthBasis: function TextWidthBasis(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TextPainter: function TextPainter(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _._paragraph = null;
      _._rebuildParagraphForPaint = true;
      _._text_painter$_text = t0;
      _._textAlign = t1;
      _._text_painter$_textDirection = t2;
      _._textScaleFactor = t3;
      _._ellipsis = t4;
      _._text_painter$_locale = t5;
      _._maxLines = t6;
      _._text_painter$_strutStyle = t7;
      _._textWidthBasis = t8;
      _._text_painter$_textHeightBehavior = t9;
      _._lastMaxWidth = _._lastMinWidth = _._text_painter$_placeholderDimensions = _._inlinePlaceholderScales = _._inlinePlaceholderBoxes = null;
    },
    TextSpan$(children, style, text) {
      return new A.TextSpan(text, children, B.C__DeferringMouseCursor, style);
    },
    TextSpan: function TextSpan(t0, t1, t2, t3) {
      var _ = this;
      _.text = t0;
      _.children = t1;
      _.mouseCursor = t2;
      _.style = t3;
    },
    TextSpan_debugDescribeChildren_closure: function TextSpan_debugDescribeChildren_closure() {
    },
    TextStyle$(background, backgroundColor, color, debugLabel, decoration, decorationColor, decorationStyle, decorationThickness, fontFamily, fontFamilyFallback, fontFeatures, fontSize, fontStyle, fontWeight, foreground, height, inherit, leadingDistribution, letterSpacing, locale, overflow, $package, shadows, textBaseline, wordSpacing) {
      return new A.TextStyle(inherit, color, backgroundColor, fontFamily, fontFamilyFallback, $package, fontSize, fontWeight, fontStyle, letterSpacing, wordSpacing, textBaseline, height, leadingDistribution, locale, foreground, background, decoration, decorationColor, decorationStyle, decorationThickness, debugLabel, shadows, fontFeatures, overflow);
    },
    TextStyle_lerp(a, b, t) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, _null = null,
        t1 = a == null;
      if (t1 && b == null)
        return _null;
      if (t1) {
        t1 = b.inherit;
        t2 = A.Color_lerp(_null, b.color, t);
        t3 = A.Color_lerp(_null, b.backgroundColor, t);
        t4 = t < 0.5;
        t5 = t4 ? _null : b.fontSize;
        t6 = A.FontWeight_lerp(_null, b.fontWeight, t);
        t7 = t4 ? _null : b.fontStyle;
        t8 = t4 ? _null : b.letterSpacing;
        t9 = t4 ? _null : b.wordSpacing;
        t10 = t4 ? _null : b.textBaseline;
        t11 = t4 ? _null : b.height;
        t12 = t4 ? _null : b.leadingDistribution;
        t13 = t4 ? _null : b.locale;
        t14 = t4 ? _null : b.foreground;
        t15 = t4 ? _null : b.background;
        t16 = t4 ? _null : b.shadows;
        t17 = t4 ? _null : b.fontFeatures;
        t18 = t4 ? _null : b.decoration;
        t19 = A.Color_lerp(_null, b.decorationColor, t);
        t20 = t4 ? _null : b.decorationStyle;
        t21 = t4 ? _null : b.decorationThickness;
        t22 = t4 ? _null : b.get$_text_style$_fontFamily(b);
        t23 = t4 ? _null : b.get$fontFamilyFallback();
        t24 = t4 ? _null : b._package;
        return A.TextStyle$(t15, t3, t2, _null, t18, t19, t20, t21, t22, t23, t17, t5, t7, t6, t14, t11, t1, t12, t8, t13, t4 ? _null : b.overflow, t24, t16, t10, t9);
      }
      if (b == null) {
        t1 = a.inherit;
        t2 = A.Color_lerp(a.color, _null, t);
        t3 = A.Color_lerp(_null, a.backgroundColor, t);
        t4 = t < 0.5;
        t5 = t4 ? a.fontSize : _null;
        t6 = A.FontWeight_lerp(a.fontWeight, _null, t);
        t7 = t4 ? a.fontStyle : _null;
        t8 = t4 ? a.letterSpacing : _null;
        t9 = t4 ? a.wordSpacing : _null;
        t10 = t4 ? a.textBaseline : _null;
        t11 = t4 ? a.height : _null;
        t12 = t4 ? a.leadingDistribution : _null;
        t13 = t4 ? a.locale : _null;
        t14 = t4 ? a.foreground : _null;
        t15 = t4 ? a.background : _null;
        t16 = t4 ? a.shadows : _null;
        t17 = t4 ? a.fontFeatures : _null;
        t18 = t4 ? a.decoration : _null;
        t19 = A.Color_lerp(a.decorationColor, _null, t);
        t20 = t4 ? a.decorationStyle : _null;
        t21 = t4 ? a.decorationThickness : _null;
        t22 = t4 ? a.get$_text_style$_fontFamily(a) : _null;
        t23 = t4 ? a.get$fontFamilyFallback() : _null;
        t24 = t4 ? a._package : _null;
        return A.TextStyle$(t15, t3, t2, _null, t18, t19, t20, t21, t22, t23, t17, t5, t7, t6, t14, t11, t1, t12, t8, t13, t4 ? a.overflow : _null, t24, t16, t10, t9);
      }
      t1 = b.inherit;
      t2 = a.foreground;
      t3 = t2 == null;
      t4 = t3 && b.foreground == null ? A.Color_lerp(a.color, b.color, t) : _null;
      t5 = a.background;
      t6 = t5 == null;
      t7 = t6 && b.background == null ? A.Color_lerp(a.backgroundColor, b.backgroundColor, t) : _null;
      t8 = a.fontSize;
      t9 = t8 == null ? b.fontSize : t8;
      t10 = b.fontSize;
      t8 = A.lerpDouble(t9, t10 == null ? t8 : t10, t);
      t9 = A.FontWeight_lerp(a.fontWeight, b.fontWeight, t);
      t10 = t < 0.5;
      t11 = t10 ? a.fontStyle : b.fontStyle;
      t12 = a.letterSpacing;
      t13 = t12 == null ? b.letterSpacing : t12;
      t14 = b.letterSpacing;
      t12 = A.lerpDouble(t13, t14 == null ? t12 : t14, t);
      t13 = a.wordSpacing;
      t14 = t13 == null ? b.wordSpacing : t13;
      t15 = b.wordSpacing;
      t13 = A.lerpDouble(t14, t15 == null ? t13 : t15, t);
      t14 = t10 ? a.textBaseline : b.textBaseline;
      t15 = a.height;
      t16 = t15 == null ? b.height : t15;
      t17 = b.height;
      t15 = A.lerpDouble(t16, t17 == null ? t15 : t17, t);
      t16 = t10 ? a.leadingDistribution : b.leadingDistribution;
      t17 = t10 ? a.locale : b.locale;
      if (!t3 || b.foreground != null)
        if (t10) {
          if (t3) {
            t2 = $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData());
            t3 = a.color;
            t3.toString;
            t2.set$color(0, t3);
          }
        } else {
          t2 = b.foreground;
          if (t2 == null) {
            t2 = $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData());
            t3 = b.color;
            t3.toString;
            t2.set$color(0, t3);
          }
        }
      else
        t2 = _null;
      if (!t6 || b.background != null)
        if (t10)
          if (t6) {
            t3 = $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData());
            t5 = a.backgroundColor;
            t5.toString;
            t3.set$color(0, t5);
          } else
            t3 = t5;
        else {
          t3 = b.background;
          if (t3 == null) {
            t3 = $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData());
            t5 = b.backgroundColor;
            t5.toString;
            t3.set$color(0, t5);
          }
        }
      else
        t3 = _null;
      t5 = t10 ? a.shadows : b.shadows;
      t6 = t10 ? a.fontFeatures : b.fontFeatures;
      t18 = t10 ? a.decoration : b.decoration;
      t19 = A.Color_lerp(a.decorationColor, b.decorationColor, t);
      t20 = t10 ? a.decorationStyle : b.decorationStyle;
      t21 = a.decorationThickness;
      t22 = t21 == null ? b.decorationThickness : t21;
      t23 = b.decorationThickness;
      t21 = A.lerpDouble(t22, t23 == null ? t21 : t23, t);
      t22 = t10 ? a.get$_text_style$_fontFamily(a) : b.get$_text_style$_fontFamily(b);
      t23 = t10 ? a.get$fontFamilyFallback() : b.get$fontFamilyFallback();
      t24 = t10 ? a._package : b._package;
      return A.TextStyle$(t3, t7, t4, _null, t18, t19, t20, t21, t22, t23, t6, t8, t11, t9, t2, t15, t1, t16, t12, t17, t10 ? a.overflow : b.overflow, t24, t5, t14, t13);
    },
    TextStyle: function TextStyle(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24) {
      var _ = this;
      _.inherit = t0;
      _.color = t1;
      _.backgroundColor = t2;
      _.fontFamily = t3;
      _._text_style$_fontFamilyFallback = t4;
      _._package = t5;
      _.fontSize = t6;
      _.fontWeight = t7;
      _.fontStyle = t8;
      _.letterSpacing = t9;
      _.wordSpacing = t10;
      _.textBaseline = t11;
      _.height = t12;
      _.leadingDistribution = t13;
      _.locale = t14;
      _.foreground = t15;
      _.background = t16;
      _.decoration = t17;
      _.decorationColor = t18;
      _.decorationStyle = t19;
      _.decorationThickness = t20;
      _.debugLabel = t21;
      _.shadows = t22;
      _.fontFeatures = t23;
      _.overflow = t24;
    },
    _TextStyle_Object_Diagnosticable: function _TextStyle_Object_Diagnosticable() {
    },
    Simulation: function Simulation() {
    },
    RendererBinding: function RendererBinding() {
    },
    RendererBinding__scheduleMouseTrackerUpdate_closure: function RendererBinding__scheduleMouseTrackerUpdate_closure(t0) {
      this.$this = t0;
    },
    BoxConstraints$tightFor(height, width) {
      var t3, t4,
        t1 = width == null,
        t2 = t1 ? 0 : width;
      t1 = t1 ? 1 / 0 : width;
      t3 = height == null;
      t4 = t3 ? 0 : height;
      return new A.BoxConstraints(t2, t1, t4, t3 ? 1 / 0 : height);
    },
    BoxConstraints_lerp(a, b, t) {
      var t2, t3, t4,
        t1 = a == null;
      if (t1 && b == null)
        return null;
      if (t1)
        return b.$mul(0, t);
      if (b == null)
        return a.$mul(0, 1 - t);
      t1 = a.minWidth;
      if (isFinite(t1)) {
        t1 = A.lerpDouble(t1, b.minWidth, t);
        t1.toString;
      } else
        t1 = 1 / 0;
      t2 = a.maxWidth;
      if (isFinite(t2)) {
        t2 = A.lerpDouble(t2, b.maxWidth, t);
        t2.toString;
      } else
        t2 = 1 / 0;
      t3 = a.minHeight;
      if (isFinite(t3)) {
        t3 = A.lerpDouble(t3, b.minHeight, t);
        t3.toString;
      } else
        t3 = 1 / 0;
      t4 = a.maxHeight;
      if (isFinite(t4)) {
        t4 = A.lerpDouble(t4, b.maxHeight, t);
        t4.toString;
      } else
        t4 = 1 / 0;
      return new A.BoxConstraints(t1, t2, t3, t4);
    },
    BoxHitTestResult$() {
      var t1 = A._setArrayType([], type$.JSArray_HitTestEntry_HitTestTarget),
        t2 = new A.Matrix4(new Float64Array(16));
      t2.setIdentity$0();
      return new A.BoxHitTestResult(t1, A._setArrayType([t2], type$.JSArray_Matrix4_2), A._setArrayType([], type$.JSArray__TransformPart));
    },
    BoxConstraints: function BoxConstraints(t0, t1, t2, t3) {
      var _ = this;
      _.minWidth = t0;
      _.maxWidth = t1;
      _.minHeight = t2;
      _.maxHeight = t3;
    },
    BoxConstraints_toString_describe: function BoxConstraints_toString_describe() {
    },
    BoxHitTestResult: function BoxHitTestResult(t0, t1, t2) {
      this._path = t0;
      this._transforms = t1;
      this._localTransforms = t2;
    },
    BoxHitTestEntry: function BoxHitTestEntry(t0, t1) {
      this.localPosition = t0;
      this.target = t1;
      this._hit_test$_transform = null;
    },
    BoxParentData: function BoxParentData(t0) {
      this.offset = t0;
    },
    ContainerBoxParentData: function ContainerBoxParentData() {
    },
    RenderBox: function RenderBox() {
    },
    RenderBox_getDryLayout_closure: function RenderBox_getDryLayout_closure(t0, t1) {
      this.$this = t0;
      this.constraints = t1;
    },
    RenderBox_getDistanceToActualBaseline_closure: function RenderBox_getDistanceToActualBaseline_closure(t0, t1) {
      this.$this = t0;
      this.baseline = t1;
    },
    RenderBoxContainerDefaultsMixin: function RenderBoxContainerDefaultsMixin() {
    },
    RenderBoxContainerDefaultsMixin_defaultHitTestChildren_closure: function RenderBoxContainerDefaultsMixin_defaultHitTestChildren_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.position = t1;
      this.childParentData = t2;
    },
    _ContainerBoxParentData_BoxParentData_ContainerParentDataMixin: function _ContainerBoxParentData_BoxParentData_ContainerParentDataMixin() {
    },
    DebugOverflowIndicatorMixin: function DebugOverflowIndicatorMixin() {
    },
    RenderErrorBox: function RenderErrorBox(t0, t1) {
      var _ = this;
      _.message = t0;
      _.__RenderErrorBox__paragraph = $;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._object$_constraints = _._relayoutBoundary = null;
      _._debugDoingThisPaint = false;
      _._layerHandle = t1;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing = $;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _startIsTopLeft(direction, textDirection, verticalDirection) {
      switch (direction.index) {
        case 0:
          switch (textDirection) {
            case B.TextDirection_1:
              return true;
            case B.TextDirection_0:
              return false;
            case null:
              return null;
          }
          break;
        case 1:
          switch (verticalDirection) {
            case B.VerticalDirection_1:
              return true;
            case B.VerticalDirection_0:
              return false;
            case null:
              return null;
          }
          break;
      }
    },
    FlexParentData: function FlexParentData(t0, t1, t2) {
      this.ContainerParentDataMixin_previousSibling = t0;
      this.ContainerParentDataMixin_nextSibling = t1;
      this.offset = t2;
    },
    MainAxisSize: function MainAxisSize(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    MainAxisAlignment: function MainAxisAlignment(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    CrossAxisAlignment: function CrossAxisAlignment(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    RenderFlex: function RenderFlex(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _._direction = t0;
      _._mainAxisAlignment = t1;
      _._mainAxisSize = t2;
      _._crossAxisAlignment = t3;
      _._textDirection = t4;
      _._verticalDirection = t5;
      _._flex$_textBaseline = t6;
      _._overflow = 0;
      _._clipBehavior = t7;
      _._clipRectLayer = t8;
      _.DebugOverflowIndicatorMixin__indicatorLabel = t9;
      _.DebugOverflowIndicatorMixin__overflowReportNeeded = t10;
      _.ContainerRenderObjectMixin__childCount = t11;
      _.ContainerRenderObjectMixin__firstChild = t12;
      _.ContainerRenderObjectMixin__lastChild = t13;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._object$_constraints = _._relayoutBoundary = null;
      _._debugDoingThisPaint = false;
      _._layerHandle = t14;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing = $;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _LayoutSizes: function _LayoutSizes(t0, t1, t2) {
      this.mainSize = t0;
      this.crossSize = t1;
      this.allocatedSize = t2;
    },
    _RenderFlex_RenderBox_ContainerRenderObjectMixin: function _RenderFlex_RenderBox_ContainerRenderObjectMixin() {
    },
    _RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin: function _RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin() {
    },
    _RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin_DebugOverflowIndicatorMixin: function _RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin_DebugOverflowIndicatorMixin() {
    },
    LayerHandle$() {
      return new A.LayerHandle();
    },
    TransformLayer$(transform) {
      return new A.TransformLayer(transform, B.Offset_0_0, A.LayerHandle$());
    },
    PhysicalModelLayer$() {
      return new A.PhysicalModelLayer(B.Clip_0, A.LayerHandle$());
    },
    AnnotationResult: function AnnotationResult(t0, t1) {
      this._layer$_entries = t0;
      this.$ti = t1;
    },
    Layer0: function Layer0() {
    },
    LayerHandle: function LayerHandle() {
      this._layer = null;
    },
    PictureLayer: function PictureLayer(t0, t1) {
      var _ = this;
      _.canvasBounds = t0;
      _._picture = null;
      _._layer$_debugDisposed = _._willChangeHint = _._isComplexHint = false;
      _._parentHandle = t1;
      _._refCount = 0;
      _._needsAddToScene = true;
      _.debugCreator = _._previousSibling = _._nextSibling = _._engineLayer = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    ContainerLayer0: function ContainerLayer0() {
    },
    OffsetLayer: function OffsetLayer(t0, t1) {
      var _ = this;
      _._layer$_offset = t0;
      _._lastChild = _._firstChild = null;
      _._layer$_debugDisposed = false;
      _._parentHandle = t1;
      _._refCount = 0;
      _._needsAddToScene = true;
      _.debugCreator = _._previousSibling = _._nextSibling = _._engineLayer = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    ClipRectLayer: function ClipRectLayer(t0, t1) {
      var _ = this;
      _._layer$_clipRect = null;
      _._layer$_clipBehavior = t0;
      _._lastChild = _._firstChild = null;
      _._layer$_debugDisposed = false;
      _._parentHandle = t1;
      _._refCount = 0;
      _._needsAddToScene = true;
      _.debugCreator = _._previousSibling = _._nextSibling = _._engineLayer = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    ClipPathLayer: function ClipPathLayer(t0, t1) {
      var _ = this;
      _._clipPath = null;
      _._layer$_clipBehavior = t0;
      _._lastChild = _._firstChild = null;
      _._layer$_debugDisposed = false;
      _._parentHandle = t1;
      _._refCount = 0;
      _._needsAddToScene = true;
      _.debugCreator = _._previousSibling = _._nextSibling = _._engineLayer = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    TransformLayer: function TransformLayer(t0, t1, t2) {
      var _ = this;
      _._layer$_transform = t0;
      _._invertedTransform = _._lastEffectiveTransform = null;
      _._inverseDirty = true;
      _._layer$_offset = t1;
      _._lastChild = _._firstChild = null;
      _._layer$_debugDisposed = false;
      _._parentHandle = t2;
      _._refCount = 0;
      _._needsAddToScene = true;
      _.debugCreator = _._previousSibling = _._nextSibling = _._engineLayer = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    PhysicalModelLayer: function PhysicalModelLayer(t0, t1) {
      var _ = this;
      _._clipPath = null;
      _._layer$_clipBehavior = t0;
      _._lastChild = _._firstChild = _._layer$_shadowColor = _._layer$_color = _._layer$_elevation = null;
      _._layer$_debugDisposed = false;
      _._parentHandle = t1;
      _._refCount = 0;
      _._needsAddToScene = true;
      _.debugCreator = _._previousSibling = _._nextSibling = _._engineLayer = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _Layer_AbstractNode_DiagnosticableTreeMixin: function _Layer_AbstractNode_DiagnosticableTreeMixin() {
    },
    MouseTracker__shouldMarkStateDirty(state, $event) {
      var lastEvent;
      if (state == null)
        return true;
      lastEvent = state._latestEvent;
      if (type$.PointerSignalEvent._is($event))
        return false;
      return type$.PointerAddedEvent._is(lastEvent) || type$.PointerRemovedEvent._is($event) || !lastEvent.get$position(lastEvent).$eq(0, $event.get$position($event));
    },
    MouseTracker__handleDeviceUpdateMouseEvents(details) {
      var lastAnnotations, nextAnnotations, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, enteringAnnotations, baseEnterEvent,
        result = details.triggeringEvent;
      if (result == null)
        result = details.previousEvent;
      lastAnnotations = details.lastAnnotations;
      nextAnnotations = details.nextAnnotations;
      t1 = result.get$timeStamp(result);
      t2 = result.get$pointer();
      t3 = result.get$kind(result);
      t4 = result.get$device(result);
      t5 = result.get$position(result);
      t6 = result.get$delta();
      t7 = result.get$buttons(result);
      result.get$obscured();
      t8 = result.get$pressureMin();
      t9 = result.get$pressureMax();
      t10 = result.get$distance();
      t11 = result.get$distanceMax();
      t12 = result.get$size(result);
      t13 = result.get$radiusMajor();
      t14 = result.get$radiusMinor();
      t15 = result.get$radiusMin();
      t16 = result.get$radiusMax();
      t17 = result.get$orientation(result);
      t18 = result.get$tilt();
      lastAnnotations.forEach$1(0, new A.MouseTracker__handleDeviceUpdateMouseEvents_closure(nextAnnotations, A.PointerExitEvent$(t7, t6, t4, t10, t11, result.get$down(), 0, t3, false, t17, t2, t5, t9, t8, t13, t16, t15, t14, t12, result.get$synthesized(), t18, t1).transformed$1(result.get$transform(result)), lastAnnotations));
      t1 = A._instanceType(nextAnnotations)._eval$1("LinkedHashMapKeyIterable<1>");
      t18 = t1._eval$1("WhereIterable<Iterable.E>");
      enteringAnnotations = A.List_List$of(new A.WhereIterable(new A.LinkedHashMapKeyIterable(nextAnnotations, t1), new A.MouseTracker__handleDeviceUpdateMouseEvents_closure0(lastAnnotations), t18), true, t18._eval$1("Iterable.E"));
      t18 = result.get$timeStamp(result);
      t1 = result.get$pointer();
      t12 = result.get$kind(result);
      t14 = result.get$device(result);
      t15 = result.get$position(result);
      t16 = result.get$delta();
      t13 = result.get$buttons(result);
      result.get$obscured();
      t8 = result.get$pressureMin();
      t9 = result.get$pressureMax();
      t5 = result.get$distance();
      t2 = result.get$distanceMax();
      t17 = result.get$size(result);
      t3 = result.get$radiusMajor();
      t11 = result.get$radiusMinor();
      t10 = result.get$radiusMin();
      t4 = result.get$radiusMax();
      t6 = result.get$orientation(result);
      t7 = result.get$tilt();
      baseEnterEvent = A.PointerEnterEvent$(t13, t16, t14, t5, t2, result.get$down(), 0, t12, false, t6, t1, t15, t9, t8, t3, t4, t10, t11, t17, result.get$synthesized(), t7, t18).transformed$1(result.get$transform(result));
      for (t1 = new A.ReversedListIterable(enteringAnnotations, A._arrayInstanceType(enteringAnnotations)._eval$1("ReversedListIterable<1>")), t1 = new A.ListIterator(t1, t1.get$length(t1)), t2 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        if (t3.get$validForMouseTracker() && t3.get$onEnter(t3) != null) {
          t4 = t3.get$onEnter(t3);
          t4.toString;
          t4.call$1(baseEnterEvent.transformed$1(nextAnnotations.$index(0, t3)));
        }
      }
    },
    _MouseState: function _MouseState(t0, t1) {
      this._annotations = t0;
      this._latestEvent = t1;
    },
    _MouseTrackerUpdateDetails: function _MouseTrackerUpdateDetails(t0, t1, t2, t3) {
      var _ = this;
      _.lastAnnotations = t0;
      _.nextAnnotations = t1;
      _.previousEvent = t2;
      _.triggeringEvent = t3;
    },
    MouseTracker: function MouseTracker(t0, t1, t2) {
      var _ = this;
      _._mouseCursorMixin = t0;
      _._mouseStates = t1;
      _._debugDuringDeviceUpdate = false;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t2;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__debugDisposed = false;
    },
    MouseTracker__handleDeviceUpdate_closure: function MouseTracker__handleDeviceUpdate_closure() {
    },
    MouseTracker_updateWithEvent_closure: function MouseTracker_updateWithEvent_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.existingState = t1;
      _.event = t2;
      _.device = t3;
      _.result = t4;
    },
    MouseTracker_updateWithEvent__closure: function MouseTracker_updateWithEvent__closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.existingState = t1;
      _.event = t2;
      _.device = t3;
      _.result = t4;
    },
    MouseTracker_updateAllDevices_closure: function MouseTracker_updateAllDevices_closure(t0, t1) {
      this.$this = t0;
      this.hitTest = t1;
    },
    MouseTracker__handleDeviceUpdateMouseEvents_closure: function MouseTracker__handleDeviceUpdateMouseEvents_closure(t0, t1, t2) {
      this.nextAnnotations = t0;
      this.baseExitEvent = t1;
      this.lastAnnotations = t2;
    },
    MouseTracker__handleDeviceUpdateMouseEvents_closure0: function MouseTracker__handleDeviceUpdateMouseEvents_closure0(t0) {
      this.lastAnnotations = t0;
    },
    __MouseTrackerUpdateDetails_Object_Diagnosticable: function __MouseTrackerUpdateDetails_Object_Diagnosticable() {
    },
    PaintingContext__repaintCompositedChild(child, childContext, debugAlsoPaintedParent) {
      var layer,
        t1 = child._layerHandle,
        childLayer = type$.nullable_OffsetLayer._as(t1._layer);
      if (childLayer == null) {
        layer = new A.OffsetLayer(B.Offset_0_0, A.LayerHandle$());
        t1.set$layer(0, layer);
        t1 = layer;
      } else {
        childLayer.removeAllChildren$0();
        t1 = childLayer;
      }
      childContext = new A.PaintingContext(t1, child.get$paintBounds());
      child._paintWithContext$2(childContext, B.Offset_0_0);
      childContext.stopRecordingIfNeeded$0();
    },
    RenderObject__cleanChildRelayoutBoundary(child) {
      child._cleanRelayoutBoundary$0();
    },
    _SemanticsGeometry__transformRect(rect, transform) {
      var t1;
      if (rect == null)
        return null;
      if (!rect.get$isEmpty(rect)) {
        t1 = transform._m4storage;
        t1 = t1[0] === 0 && t1[1] === 0 && t1[2] === 0 && t1[3] === 0 && t1[4] === 0 && t1[5] === 0 && t1[6] === 0 && t1[7] === 0 && t1[8] === 0 && t1[9] === 0 && t1[10] === 0 && t1[11] === 0 && t1[12] === 0 && t1[13] === 0 && t1[14] === 0 && t1[15] === 0;
      } else
        t1 = true;
      if (t1)
        return B.Rect_0_0_0_0;
      return A.MatrixUtils_inverseTransformRect(transform, rect);
    },
    _SemanticsGeometry__applyIntermediatePaintTransforms(ancestor, child, transform, clipRectTransform) {
      var t2, intermediateParent, t3,
        t1 = child._node$_parent;
      t1.toString;
      t2 = type$.RenderObject;
      t2._as(t1);
      for (intermediateParent = t1; intermediateParent !== ancestor; intermediateParent = t1, child = t3) {
        intermediateParent.applyPaintTransform$2(child, transform);
        t1 = intermediateParent._node$_parent;
        t1.toString;
        t2._as(t1);
        t3 = child._node$_parent;
        t3.toString;
        t2._as(t3);
      }
      ancestor.applyPaintTransform$2(child, transform);
      ancestor.applyPaintTransform$2(child, clipRectTransform);
    },
    _SemanticsGeometry__intersectRects(a, b) {
      if (a == null)
        return b;
      if (b == null)
        return a;
      return a.intersect$1(b);
    },
    ParentData: function ParentData() {
    },
    PaintingContext: function PaintingContext(t0, t1) {
      var _ = this;
      _._containerLayer = t0;
      _.estimatedBounds = t1;
      _._canvas = _._recorder = _._currentLayer = null;
    },
    PaintingContext_pushClipRect_closure: function PaintingContext_pushClipRect_closure(t0, t1, t2) {
      this.$this = t0;
      this.painter = t1;
      this.offset = t2;
    },
    PaintingContext_pushClipPath_closure: function PaintingContext_pushClipPath_closure(t0, t1, t2) {
      this.$this = t0;
      this.painter = t1;
      this.offset = t2;
    },
    Constraints: function Constraints() {
    },
    SemanticsHandle: function SemanticsHandle(t0, t1) {
      this._object$_owner = t0;
      this.listener = t1;
    },
    PipelineOwner: function PipelineOwner(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.onNeedVisualUpdate = t0;
      _.onSemanticsOwnerCreated = t1;
      _.onSemanticsOwnerDisposed = t2;
      _._rootNode = null;
      _._nodesNeedingLayout = t3;
      _._debugDoingLayout = false;
      _._nodesNeedingCompositingBitsUpdate = t4;
      _._nodesNeedingPaint = t5;
      _._debugDoingPaint = false;
      _._semanticsOwner = null;
      _._outstandingSemanticsHandles = 0;
      _._debugDoingSemantics = false;
      _._nodesNeedingSemantics = t6;
    },
    PipelineOwner_flushLayout_closure: function PipelineOwner_flushLayout_closure() {
    },
    PipelineOwner_flushCompositingBits_closure: function PipelineOwner_flushCompositingBits_closure() {
    },
    PipelineOwner_flushPaint_closure: function PipelineOwner_flushPaint_closure() {
    },
    PipelineOwner_flushSemantics_closure: function PipelineOwner_flushSemantics_closure() {
    },
    RenderObject: function RenderObject() {
    },
    RenderObject_reassemble_closure: function RenderObject_reassemble_closure() {
    },
    RenderObject__debugReportException_closure: function RenderObject__debugReportException_closure(t0) {
      this.$this = t0;
    },
    RenderObject__updateCompositingBits_closure: function RenderObject__updateCompositingBits_closure(t0) {
      this.$this = t0;
    },
    RenderObject_clearSemantics_closure: function RenderObject_clearSemantics_closure() {
    },
    RenderObject__getSemanticsForParent_closure: function RenderObject__getSemanticsForParent_closure(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.childrenMergeIntoParent = t2;
      _.fragments = t3;
      _.toBeMarkedExplicit = t4;
      _.config = t5;
      _.producesForkingFragment = t6;
    },
    RenderObjectWithChildMixin: function RenderObjectWithChildMixin() {
    },
    ContainerParentDataMixin: function ContainerParentDataMixin() {
    },
    ContainerRenderObjectMixin: function ContainerRenderObjectMixin() {
    },
    RelayoutWhenSystemFontsChangeMixin: function RelayoutWhenSystemFontsChangeMixin() {
    },
    _SemanticsFragment: function _SemanticsFragment() {
    },
    _ContainerSemanticsFragment: function _ContainerSemanticsFragment(t0, t1) {
      this.interestingFragments = t0;
      this.dropsSemanticsOfPreviousSiblings = t1;
    },
    _InterestingSemanticsFragment: function _InterestingSemanticsFragment() {
    },
    _RootSemanticsFragment: function _RootSemanticsFragment(t0, t1, t2) {
      var _ = this;
      _._object$_children = t0;
      _._ancestorChain = t1;
      _._object$_tagsForChildren = null;
      _.dropsSemanticsOfPreviousSiblings = t2;
    },
    _SwitchableSemanticsFragment: function _SwitchableSemanticsFragment(t0, t1, t2, t3, t4) {
      var _ = this;
      _._mergeIntoParent = t0;
      _._config = t1;
      _._isConfigWritable = false;
      _._object$_children = t2;
      _._isExplicit = false;
      _._ancestorChain = t3;
      _._object$_tagsForChildren = null;
      _.dropsSemanticsOfPreviousSiblings = t4;
    },
    _SemanticsGeometry: function _SemanticsGeometry() {
      var _ = this;
      _._semanticsClipRect = _._paintClipRect = null;
      _.___SemanticsGeometry__rect = _.___SemanticsGeometry__transform = $;
      _._markAsHidden = false;
    },
    _RenderObject_AbstractNode_DiagnosticableTreeMixin: function _RenderObject_AbstractNode_DiagnosticableTreeMixin() {
    },
    TextParentData: function TextParentData(t0, t1, t2) {
      var _ = this;
      _.scale = null;
      _.ContainerParentDataMixin_previousSibling = t0;
      _.ContainerParentDataMixin_nextSibling = t1;
      _.offset = t2;
    },
    RenderParagraph: function RenderParagraph(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._textPainter = t0;
      _._cachedCombinedSemanticsInfos = _._cachedAttributedLabel = null;
      _.__RenderParagraph__placeholderSpans = $;
      _._softWrap = t1;
      _._paragraph$_overflow = t2;
      _._needsClipping = false;
      _._cachedChildNodes = _._semanticsInfo = _._placeholderDimensions = _._overflowShader = null;
      _.ContainerRenderObjectMixin__childCount = t3;
      _.ContainerRenderObjectMixin__firstChild = t4;
      _.ContainerRenderObjectMixin__lastChild = t5;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._object$_constraints = _._relayoutBoundary = null;
      _._debugDoingThisPaint = false;
      _._layerHandle = t6;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing = $;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderParagraph__extractPlaceholderSpans_closure: function RenderParagraph__extractPlaceholderSpans_closure(t0) {
      this.$this = t0;
    },
    RenderParagraph_hitTestChildren_closure: function RenderParagraph_hitTestChildren_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.position = t1;
      this.textParentData = t2;
    },
    RenderParagraph_paint_closure: function RenderParagraph_paint_closure(t0) {
      this._box_0 = t0;
    },
    RenderParagraph_describeSemanticsConfiguration_closure: function RenderParagraph_describeSemanticsConfiguration_closure() {
    },
    _RenderParagraph_RenderBox_ContainerRenderObjectMixin: function _RenderParagraph_RenderBox_ContainerRenderObjectMixin() {
    },
    _RenderParagraph_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin: function _RenderParagraph_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin() {
    },
    _RenderParagraph_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin_RelayoutWhenSystemFontsChangeMixin: function _RenderParagraph_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin_RelayoutWhenSystemFontsChangeMixin() {
    },
    RenderConstrainedBox$(additionalConstraints) {
      var t1 = new A.RenderConstrainedBox(additionalConstraints, null, A.LayerHandle$());
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1.__RenderObject__needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    RenderProxyBox: function RenderProxyBox() {
    },
    RenderProxyBoxMixin: function RenderProxyBoxMixin() {
    },
    HitTestBehavior: function HitTestBehavior(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    RenderProxyBoxWithHitTestBehavior: function RenderProxyBoxWithHitTestBehavior() {
    },
    RenderConstrainedBox: function RenderConstrainedBox(t0, t1, t2) {
      var _ = this;
      _._additionalConstraints = t0;
      _.RenderObjectWithChildMixin__child = t1;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._object$_constraints = _._relayoutBoundary = null;
      _._debugDoingThisPaint = false;
      _._layerHandle = t2;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing = $;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderLimitedBox: function RenderLimitedBox(t0, t1, t2, t3) {
      var _ = this;
      _._maxWidth = t0;
      _._maxHeight = t1;
      _.RenderObjectWithChildMixin__child = t2;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._object$_constraints = _._relayoutBoundary = null;
      _._debugDoingThisPaint = false;
      _._layerHandle = t3;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing = $;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    CustomClipper: function CustomClipper() {
    },
    _RenderCustomClip: function _RenderCustomClip() {
    },
    RenderClipPath: function RenderClipPath(t0, t1, t2, t3) {
      var _ = this;
      _._clipper = t0;
      _._clip = null;
      _._proxy_box$_clipBehavior = t1;
      _._debugText = _._debugPaint = null;
      _.RenderObjectWithChildMixin__child = t2;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._object$_constraints = _._relayoutBoundary = null;
      _._debugDoingThisPaint = false;
      _._layerHandle = t3;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing = $;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _RenderPhysicalModelBase: function _RenderPhysicalModelBase() {
    },
    RenderPhysicalModel: function RenderPhysicalModel(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _._shape = t0;
      _._proxy_box$_borderRadius = t1;
      _._proxy_box$_elevation = t2;
      _._proxy_box$_shadowColor = t3;
      _._proxy_box$_color = t4;
      _._clipper = t5;
      _._clip = null;
      _._proxy_box$_clipBehavior = t6;
      _._debugText = _._debugPaint = null;
      _.RenderObjectWithChildMixin__child = t7;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._object$_constraints = _._relayoutBoundary = null;
      _._debugDoingThisPaint = false;
      _._layerHandle = t8;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing = $;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    DecorationPosition: function DecorationPosition(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    RenderDecoratedBox: function RenderDecoratedBox(t0, t1, t2, t3, t4) {
      var _ = this;
      _._proxy_box$_painter = null;
      _._proxy_box$_decoration = t0;
      _._proxy_box$_position = t1;
      _._proxy_box$_configuration = t2;
      _.RenderObjectWithChildMixin__child = t3;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._object$_constraints = _._relayoutBoundary = null;
      _._debugDoingThisPaint = false;
      _._layerHandle = t4;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing = $;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderTransform: function RenderTransform(t0, t1, t2) {
      var _ = this;
      _._proxy_box$_textDirection = _._proxy_box$_alignment = _._origin = null;
      _.transformHitTests = t0;
      _._proxy_box$_filterQuality = _._proxy_box$_transform = null;
      _.RenderObjectWithChildMixin__child = t1;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._object$_constraints = _._relayoutBoundary = null;
      _._debugDoingThisPaint = false;
      _._layerHandle = t2;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing = $;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderTransform_hitTestChildren_closure: function RenderTransform_hitTestChildren_closure(t0) {
      this.$this = t0;
    },
    RenderPointerListener: function RenderPointerListener(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.onPointerDown = t0;
      _.onPointerMove = t1;
      _.onPointerUp = t2;
      _.onPointerHover = t3;
      _.onPointerCancel = t4;
      _.onPointerSignal = t5;
      _.behavior = t6;
      _.RenderObjectWithChildMixin__child = t7;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._object$_constraints = _._relayoutBoundary = null;
      _._debugDoingThisPaint = false;
      _._layerHandle = t8;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing = $;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderMouseRegion: function RenderMouseRegion(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._opaque = t0;
      _.onEnter = t1;
      _.onHover = t2;
      _.onExit = t3;
      _._cursor = t4;
      _._validForMouseTracker = true;
      _.RenderObjectWithChildMixin__child = t5;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._object$_constraints = _._relayoutBoundary = null;
      _._debugDoingThisPaint = false;
      _._layerHandle = t6;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing = $;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderSemanticsAnnotations: function RenderSemanticsAnnotations(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57) {
      var _ = this;
      _._container = t0;
      _._explicitChildNodes = t1;
      _._excludeSemantics = t2;
      _._checked = t3;
      _._enabled = t4;
      _._selected = t5;
      _._button = t6;
      _._slider = t7;
      _._keyboardKey = t8;
      _._proxy_box$_link = t9;
      _._header = t10;
      _._textField = t11;
      _._readOnly = t12;
      _._focusable = t13;
      _._focused = t14;
      _._inMutuallyExclusiveGroup = t15;
      _._obscured = t16;
      _._multiline = t17;
      _._scopesRoute = t18;
      _._namesRoute = t19;
      _._hidden = t20;
      _._proxy_box$_image = t21;
      _._liveRegion = t22;
      _._proxy_box$_maxValueLength = t23;
      _._proxy_box$_currentValueLength = t24;
      _._toggled = t25;
      _._attributedLabel = t26;
      _._attributedValue = t27;
      _._attributedIncreasedValue = t28;
      _._attributedDecreasedValue = t29;
      _._attributedHint = t30;
      _._hintOverrides = t31;
      _._proxy_box$_textDirection = t32;
      _._proxy_box$_sortKey = t33;
      _._tagForChildren = t34;
      _._onTap = t35;
      _._onDismiss = t36;
      _._onLongPress = t37;
      _._onScrollLeft = t38;
      _._onScrollRight = t39;
      _._onScrollUp = t40;
      _._onScrollDown = t41;
      _._onIncrease = t42;
      _._onDecrease = t43;
      _._onCopy = t44;
      _._onCut = t45;
      _._onPaste = t46;
      _._onMoveCursorForwardByCharacter = t47;
      _._onMoveCursorBackwardByCharacter = t48;
      _._onMoveCursorForwardByWord = t49;
      _._onMoveCursorBackwardByWord = t50;
      _._onSetSelection = t51;
      _._onSetText = t52;
      _._onDidGainAccessibilityFocus = t53;
      _._onDidLoseAccessibilityFocus = t54;
      _._proxy_box$_customSemanticsActions = t55;
      _.RenderObjectWithChildMixin__child = t56;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._object$_constraints = _._relayoutBoundary = null;
      _._debugDoingThisPaint = false;
      _._layerHandle = t57;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing = $;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _RenderProxyBox_RenderBox_RenderObjectWithChildMixin: function _RenderProxyBox_RenderBox_RenderObjectWithChildMixin() {
    },
    _RenderProxyBox_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin: function _RenderProxyBox_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin() {
    },
    RenderShiftedBox: function RenderShiftedBox() {
    },
    RenderShiftedBox_hitTestChildren_closure: function RenderShiftedBox_hitTestChildren_closure(t0, t1, t2) {
      this.$this = t0;
      this.position = t1;
      this.childParentData = t2;
    },
    RenderPadding: function RenderPadding(t0, t1, t2, t3) {
      var _ = this;
      _._resolvedPadding = null;
      _._padding = t0;
      _._shifted_box$_textDirection = t1;
      _.RenderObjectWithChildMixin__child = t2;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._object$_constraints = _._relayoutBoundary = null;
      _._debugDoingThisPaint = false;
      _._layerHandle = t3;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing = $;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderAligningShiftedBox: function RenderAligningShiftedBox() {
    },
    RenderPositionedBox: function RenderPositionedBox(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._widthFactor = t0;
      _._heightFactor = t1;
      _._resolvedAlignment = null;
      _._shifted_box$_alignment = t2;
      _._shifted_box$_textDirection = t3;
      _.RenderObjectWithChildMixin__child = t4;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._object$_constraints = _._relayoutBoundary = null;
      _._debugDoingThisPaint = false;
      _._layerHandle = t5;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing = $;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _RenderShiftedBox_RenderBox_RenderObjectWithChildMixin: function _RenderShiftedBox_RenderBox_RenderObjectWithChildMixin() {
    },
    AlignmentGeometryTween: function AlignmentGeometryTween(t0, t1) {
      this.begin = t0;
      this.end = t1;
    },
    ViewConfiguration: function ViewConfiguration(t0, t1) {
      this.size = t0;
      this.devicePixelRatio = t1;
    },
    RenderView: function RenderView(t0, t1, t2, t3, t4) {
      var _ = this;
      _._view$_size = t0;
      _._view$_configuration = t1;
      _._window = t2;
      _._rootTransform = null;
      _.RenderObjectWithChildMixin__child = t3;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._object$_constraints = _._relayoutBoundary = null;
      _._debugDoingThisPaint = false;
      _._layerHandle = t4;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing = $;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _RenderView_RenderObject_RenderObjectWithChildMixin: function _RenderView_RenderObject_RenderObjectWithChildMixin() {
    },
    timeDilation(value) {
      var t1;
      if ($._timeDilation === value)
        return;
      t1 = $.SchedulerBinding__instance;
      if (t1 != null)
        t1.resetEpoch$0();
      $._timeDilation = value;
    },
    SchedulerBinding__taskSorter(e1, e2) {
      return -B.JSInt_methods.compareTo$1(e1.priority, e2.priority);
    },
    defaultSchedulingStrategy(priority, scheduler) {
      if (scheduler.SchedulerBinding__transientCallbacks._length > 0)
        return priority >= 100000;
      return true;
    },
    _FrameCallbackEntry: function _FrameCallbackEntry(t0) {
      this.callback = t0;
      this.debugStack = null;
    },
    SchedulerPhase: function SchedulerPhase(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    SchedulerBinding: function SchedulerBinding() {
    },
    SchedulerBinding_endOfFrame_closure: function SchedulerBinding_endOfFrame_closure(t0) {
      this.$this = t0;
    },
    SchedulerBinding_scheduleWarmUpFrame_closure: function SchedulerBinding_scheduleWarmUpFrame_closure(t0) {
      this.$this = t0;
    },
    SchedulerBinding_scheduleWarmUpFrame_closure0: function SchedulerBinding_scheduleWarmUpFrame_closure0(t0, t1) {
      this.$this = t0;
      this.hadScheduledFrame = t1;
    },
    SchedulerBinding_scheduleWarmUpFrame_closure1: function SchedulerBinding_scheduleWarmUpFrame_closure1(t0, t1) {
      this.$this = t0;
      this.timelineTask = t1;
    },
    SchedulerBinding_handleBeginFrame_closure: function SchedulerBinding_handleBeginFrame_closure(t0) {
      this.$this = t0;
    },
    Ticker: function Ticker(t0, t1) {
      var _ = this;
      _._ticker$_future = null;
      _._muted = false;
      _._startTime = null;
      _._onTick = t0;
      _._animationId = null;
      _.debugLabel = t1;
      _.__Ticker__debugCreationStack = $;
    },
    TickerFuture: function TickerFuture(t0) {
      this._primaryCompleter = t0;
      this._completed = null;
    },
    SemanticsBinding: function SemanticsBinding() {
    },
    CustomSemanticsAction_getIdentifier(action) {
      var result = $.CustomSemanticsAction__ids.$index(0, action);
      if (result == null) {
        result = $.CustomSemanticsAction__nextId;
        $.CustomSemanticsAction__nextId = result + 1;
        $.CustomSemanticsAction__ids.$indexSet(0, action, result);
        $.CustomSemanticsAction__actions.$indexSet(0, result, action);
      }
      return result;
    },
    SemanticsData__sortedListsEqual(left, right) {
      var i;
      if (left.length !== right.length)
        return false;
      for (i = 0; i < left.length; ++i)
        if (!J.$eq$(left[i], right[i]))
          return false;
      return true;
    },
    _SemanticsDiagnosticableNode$(childOrder, $name, style, value) {
      return new A._SemanticsDiagnosticableNode(childOrder, value, $name, true, true, null, style);
    },
    SemanticsNode$(key, showOnScreen) {
      var t13,
        t1 = $.$get$SemanticsNode__kEmptyConfig(),
        t2 = t1._actions,
        t3 = t1._customSemanticsActions,
        t4 = t1._actionsAsBits,
        t5 = t1._flags,
        t6 = t1._semantics$_attributedLabel,
        t7 = t1._semantics$_attributedValue,
        t8 = t1._semantics$_attributedIncreasedValue,
        t9 = t1._semantics$_attributedDecreasedValue,
        t10 = t1._semantics$_attributedHint,
        t11 = t1._semantics$_elevation,
        t12 = t1._thickness;
      t1 = t1._semantics$_textDirection;
      t13 = ($.SemanticsNode__lastIdentifier + 1) % 65535;
      $.SemanticsNode__lastIdentifier = t13;
      return new A.SemanticsNode(key, t13, showOnScreen, B.Rect_0_0_0_0, false, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t1);
    },
    _pointInParentCoordinates(node, point) {
      var t1, vector;
      if (node._semantics$_transform == null)
        return point;
      t1 = new Float64Array(3);
      vector = new A.Vector3(t1);
      vector.setValues$3(point._dx, point._dy, 0);
      node._semantics$_transform.transform3$1(vector);
      return new A.Offset(t1[0], t1[1]);
    },
    _childrenInDefaultOrder(children, textDirection) {
      var t1, _i, child, t2, verticalGroups, group, depth, edge,
        edges = A._setArrayType([], type$.JSArray__BoxEdge);
      for (t1 = children.length, _i = 0; _i < children.length; children.length === t1 || (0, A.throwConcurrentModificationError)(children), ++_i) {
        child = children[_i];
        t2 = child._rect;
        edges.push(new A._BoxEdge(true, A._pointInParentCoordinates(child, new A.Offset(t2.left - -0.1, t2.top - -0.1))._dy, child));
        edges.push(new A._BoxEdge(false, A._pointInParentCoordinates(child, new A.Offset(t2.right + -0.1, t2.bottom + -0.1))._dy, child));
      }
      B.JSArray_methods.sort$0(edges);
      verticalGroups = A._setArrayType([], type$.JSArray__SemanticsSortGroup);
      for (t1 = edges.length, t2 = type$.JSArray_SemanticsNode, group = null, depth = 0, _i = 0; _i < edges.length; edges.length === t1 || (0, A.throwConcurrentModificationError)(edges), ++_i) {
        edge = edges[_i];
        if (edge.isLeadingEdge) {
          ++depth;
          if (group == null)
            group = new A._SemanticsSortGroup(edge.offset, textDirection, A._setArrayType([], t2));
          group.nodes.push(edge.node);
        } else
          --depth;
        if (depth === 0) {
          group.toString;
          verticalGroups.push(group);
          group = null;
        }
      }
      B.JSArray_methods.sort$0(verticalGroups);
      t1 = type$.ExpandIterable__SemanticsSortGroup_SemanticsNode;
      return A.List_List$of(new A.ExpandIterable(verticalGroups, new A._childrenInDefaultOrder_closure(), t1), true, t1._eval$1("Iterable.E"));
    },
    SemanticsConfiguration$() {
      return new A.SemanticsConfiguration(A.LinkedHashMap_LinkedHashMap$_empty(type$.SemanticsAction, type$.void_Function_nullable_Object), A.LinkedHashMap_LinkedHashMap$_empty(type$.CustomSemanticsAction, type$.void_Function), new A.AttributedString("", B.List_empty2), new A.AttributedString("", B.List_empty2), new A.AttributedString("", B.List_empty2), new A.AttributedString("", B.List_empty2), new A.AttributedString("", B.List_empty2));
    },
    _concatAttributedString(otherAttributedString, otherTextDirection, thisAttributedString, thisTextDirection) {
      if (otherAttributedString.string.length === 0)
        return thisAttributedString;
      if (thisTextDirection != otherTextDirection && otherTextDirection != null)
        switch (otherTextDirection.index) {
          case 0:
            otherAttributedString = new A.AttributedString("\u202b", B.List_empty2).$add(0, otherAttributedString).$add(0, new A.AttributedString("\u202c", B.List_empty2));
            break;
          case 1:
            otherAttributedString = new A.AttributedString("\u202a", B.List_empty2).$add(0, otherAttributedString).$add(0, new A.AttributedString("\u202c", B.List_empty2));
            break;
        }
      if (thisAttributedString.string.length === 0)
        return otherAttributedString;
      return thisAttributedString.$add(0, new A.AttributedString("\n", B.List_empty2)).$add(0, otherAttributedString);
    },
    AttributedString: function AttributedString(t0, t1) {
      this.string = t0;
      this.attributes = t1;
    },
    SemanticsData: function SemanticsData(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22) {
      var _ = this;
      _.flags = t0;
      _.actions = t1;
      _.attributedLabel = t2;
      _.attributedValue = t3;
      _.attributedIncreasedValue = t4;
      _.attributedDecreasedValue = t5;
      _.attributedHint = t6;
      _.textDirection = t7;
      _.textSelection = t8;
      _.scrollChildCount = t9;
      _.scrollIndex = t10;
      _.scrollPosition = t11;
      _.scrollExtentMax = t12;
      _.scrollExtentMin = t13;
      _.platformViewId = t14;
      _.maxValueLength = t15;
      _.currentValueLength = t16;
      _.rect = t17;
      _.tags = t18;
      _.transform = t19;
      _.elevation = t20;
      _.thickness = t21;
      _.customSemanticsActionIds = t22;
    },
    _SemanticsDiagnosticableNode: function _SemanticsDiagnosticableNode(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.childOrder = t0;
      _.value = t1;
      _._cachedBuilder = null;
      _.name = t2;
      _.showSeparator = t3;
      _.showName = t4;
      _.linePrefix = t5;
      _.style = t6;
    },
    SemanticsProperties: function SemanticsProperties(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55) {
      var _ = this;
      _.enabled = t0;
      _.checked = t1;
      _.toggled = t2;
      _.selected = t3;
      _.button = t4;
      _.link = t5;
      _.header = t6;
      _.textField = t7;
      _.slider = t8;
      _.keyboardKey = t9;
      _.readOnly = t10;
      _.focusable = t11;
      _.focused = t12;
      _.inMutuallyExclusiveGroup = t13;
      _.hidden = t14;
      _.obscured = t15;
      _.multiline = t16;
      _.scopesRoute = t17;
      _.namesRoute = t18;
      _.image = t19;
      _.liveRegion = t20;
      _.maxValueLength = t21;
      _.currentValueLength = t22;
      _.label = t23;
      _.attributedLabel = t24;
      _.value = t25;
      _.attributedValue = t26;
      _.increasedValue = t27;
      _.attributedIncreasedValue = t28;
      _.decreasedValue = t29;
      _.attributedDecreasedValue = t30;
      _.hint = t31;
      _.attributedHint = t32;
      _.hintOverrides = t33;
      _.textDirection = t34;
      _.sortKey = t35;
      _.tagForChildren = t36;
      _.onTap = t37;
      _.onLongPress = t38;
      _.onScrollLeft = t39;
      _.onScrollRight = t40;
      _.onScrollUp = t41;
      _.onScrollDown = t42;
      _.onIncrease = t43;
      _.onDecrease = t44;
      _.onCopy = t45;
      _.onCut = t46;
      _.onPaste = t47;
      _.onMoveCursorForwardByCharacter = t48;
      _.onMoveCursorBackwardByCharacter = t49;
      _.onSetSelection = t50;
      _.onSetText = t51;
      _.onDidGainAccessibilityFocus = t52;
      _.onDidLoseAccessibilityFocus = t53;
      _.onDismiss = t54;
      _.customSemanticsActions = t55;
    },
    SemanticsNode: function SemanticsNode(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16) {
      var _ = this;
      _.key = t0;
      _._id = t1;
      _._showOnScreen = t2;
      _._semantics$_transform = null;
      _._rect = t3;
      _.indexInParent = _.elevationAdjustment = _.parentPaintClipRect = _.parentSemanticsClipRect = null;
      _._isMergedIntoParent = false;
      _._mergeAllDescendantsIntoThisNode = t4;
      _._semantics$_children = null;
      _.__SemanticsNode__debugPreviousSnapshot = $;
      _._semantics$_dirty = _._dead = false;
      _._actions = t5;
      _._customSemanticsActions = t6;
      _._actionsAsBits = t7;
      _.tags = null;
      _._flags = t8;
      _._semantics$_attributedLabel = t9;
      _._semantics$_attributedValue = t10;
      _._semantics$_attributedIncreasedValue = t11;
      _._semantics$_attributedDecreasedValue = t12;
      _._semantics$_attributedHint = t13;
      _._semantics$_elevation = t14;
      _._thickness = t15;
      _._semantics$_hintOverrides = null;
      _._semantics$_textDirection = t16;
      _._currentValueLength = _._maxValueLength = _._platformViewId = _._scrollExtentMin = _._scrollExtentMax = _._scrollPosition = _._scrollIndex = _._scrollChildCount = _._textSelection = _._sortKey = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    SemanticsNode__childrenInTraversalOrder_closure: function SemanticsNode__childrenInTraversalOrder_closure() {
    },
    SemanticsNode_debugDescribeChildren_closure: function SemanticsNode_debugDescribeChildren_closure(t0) {
      this.childOrder = t0;
    },
    _BoxEdge: function _BoxEdge(t0, t1, t2) {
      this.isLeadingEdge = t0;
      this.offset = t1;
      this.node = t2;
    },
    _SemanticsSortGroup: function _SemanticsSortGroup(t0, t1, t2) {
      this.startOffset = t0;
      this.textDirection = t1;
      this.nodes = t2;
    },
    _SemanticsSortGroup_sortedWithinVerticalGroup_closure: function _SemanticsSortGroup_sortedWithinVerticalGroup_closure() {
    },
    _SemanticsSortGroup_sortedWithinKnot_closure: function _SemanticsSortGroup_sortedWithinKnot_closure() {
    },
    _SemanticsSortGroup_sortedWithinKnot_search: function _SemanticsSortGroup_sortedWithinKnot_search(t0, t1, t2) {
      this.visitedIds = t0;
      this.edges = t1;
      this.sortedIds = t2;
    },
    _SemanticsSortGroup_sortedWithinKnot_closure0: function _SemanticsSortGroup_sortedWithinKnot_closure0() {
    },
    _SemanticsSortGroup_sortedWithinKnot_closure1: function _SemanticsSortGroup_sortedWithinKnot_closure1(t0) {
      this.nodeMap = t0;
    },
    _childrenInDefaultOrder_closure: function _childrenInDefaultOrder_closure() {
    },
    _TraversalSortNode: function _TraversalSortNode(t0, t1, t2) {
      this.node = t0;
      this.sortKey = t1;
      this.position = t2;
    },
    SemanticsOwner: function SemanticsOwner(t0, t1, t2, t3) {
      var _ = this;
      _._semantics$_dirtyNodes = t0;
      _._nodes = t1;
      _._detachedNodes = t2;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t3;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__debugDisposed = false;
    },
    SemanticsOwner_sendSemanticsUpdate_closure: function SemanticsOwner_sendSemanticsUpdate_closure(t0) {
      this.$this = t0;
    },
    SemanticsOwner_sendSemanticsUpdate_closure0: function SemanticsOwner_sendSemanticsUpdate_closure0() {
    },
    SemanticsOwner_sendSemanticsUpdate_closure1: function SemanticsOwner_sendSemanticsUpdate_closure1() {
    },
    SemanticsOwner__getSemanticsActionHandlerForId_closure: function SemanticsOwner__getSemanticsActionHandlerForId_closure(t0, t1) {
      this._box_0 = t0;
      this.action = t1;
    },
    SemanticsConfiguration: function SemanticsConfiguration(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._hasBeenAnnotated = _.isBlockingSemanticsOfPreviouslyPaintedNodes = _.explicitChildNodes = _._isSemanticBoundary = false;
      _._actions = t0;
      _._actionsAsBits = 0;
      _._currentValueLength = _._maxValueLength = _._platformViewId = _._scrollIndex = _._scrollChildCount = _._indexInParent = _._sortKey = null;
      _._isMergingSemanticsOfDescendants = false;
      _._customSemanticsActions = t1;
      _._semantics$_attributedLabel = t2;
      _._semantics$_attributedValue = t3;
      _._semantics$_attributedIncreasedValue = t4;
      _._semantics$_attributedDecreasedValue = t5;
      _._semantics$_attributedHint = t6;
      _._semantics$_hintOverrides = null;
      _._thickness = _._semantics$_elevation = 0;
      _._tagsForChildren = _._scrollExtentMin = _._scrollExtentMax = _._scrollPosition = _._textSelection = _._semantics$_textDirection = null;
      _._flags = 0;
    },
    SemanticsConfiguration__addArgumentlessAction_closure: function SemanticsConfiguration__addArgumentlessAction_closure(t0) {
      this.handler = t0;
    },
    DebugSemanticsDumpOrder: function DebugSemanticsDumpOrder(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    SemanticsSortKey: function SemanticsSortKey() {
    },
    OrdinalSortKey: function OrdinalSortKey(t0, t1) {
      this.order = t0;
      this.name = t1;
    },
    _SemanticsData_Object_Diagnosticable: function _SemanticsData_Object_Diagnosticable() {
    },
    _SemanticsNode_AbstractNode_DiagnosticableTreeMixin: function _SemanticsNode_AbstractNode_DiagnosticableTreeMixin() {
    },
    _SemanticsSortKey_Object_Diagnosticable: function _SemanticsSortKey_Object_Diagnosticable() {
    },
    AssetBundle__utf8decode(data) {
      return B.C_Utf8Codec.decode$1(0, A.NativeUint8List_NativeUint8List$view(data.buffer, 0, null));
    },
    AssetBundle: function AssetBundle() {
    },
    CachingAssetBundle: function CachingAssetBundle() {
    },
    PlatformAssetBundle: function PlatformAssetBundle(t0, t1) {
      this._stringCache = t0;
      this._structuredDataCache = t1;
    },
    BinaryMessenger: function BinaryMessenger() {
    },
    ServicesBinding__parseLicenses(rawLicenses) {
      var t1, _i, license, t2, split,
        licenseSeparator = "\n" + B.JSString_methods.$mul("-", 80) + "\n",
        result = A._setArrayType([], type$.JSArray_LicenseEntry),
        licenses = rawLicenses.split(licenseSeparator);
      for (t1 = licenses.length, _i = 0; _i < t1; ++_i) {
        license = licenses[_i];
        t2 = J.getInterceptor$asx(license);
        split = t2.indexOf$1(license, "\n\n");
        if (split >= 0) {
          t2.substring$2(license, 0, split).split("\n");
          t2.substring$1(license, split + 2);
          result.push(new A.LicenseEntryWithLineBreaks());
        } else
          result.push(new A.LicenseEntryWithLineBreaks());
      }
      return result;
    },
    ServicesBinding__parseAppLifecycleMessage(message) {
      switch (message) {
        case "AppLifecycleState.paused":
          return B.AppLifecycleState_2;
        case "AppLifecycleState.resumed":
          return B.AppLifecycleState_0;
        case "AppLifecycleState.inactive":
          return B.AppLifecycleState_1;
        case "AppLifecycleState.detached":
          return B.AppLifecycleState_3;
      }
      return null;
    },
    ServicesBinding: function ServicesBinding() {
    },
    ServicesBinding__addLicenses_closure: function ServicesBinding__addLicenses_closure(t0) {
      this.controller = t0;
    },
    _DefaultBinaryMessenger: function _DefaultBinaryMessenger() {
    },
    _DefaultBinaryMessenger_send_closure: function _DefaultBinaryMessenger_send_closure(t0) {
      this.completer = t0;
    },
    _DefaultBinaryMessenger_setMessageHandler_closure: function _DefaultBinaryMessenger_setMessageHandler_closure(t0) {
      this.handler = t0;
    },
    KeyEventManager__eventFromData(keyData) {
      var logicalKey, timeStamp,
        t1 = keyData.physical,
        physicalKey = B.Map_Q5S3m.$index(0, t1);
      if (physicalKey == null)
        physicalKey = new A.PhysicalKeyboardKey(t1);
      t1 = keyData.logical;
      logicalKey = B.Map_mUsBb.$index(0, t1);
      if (logicalKey == null)
        logicalKey = new A.LogicalKeyboardKey(t1);
      timeStamp = keyData.timeStamp;
      switch (keyData.type.index) {
        case 0:
          return new A.KeyDownEvent(physicalKey, logicalKey, keyData.character, timeStamp, keyData.synthesized);
        case 1:
          return new A.KeyUpEvent(physicalKey, logicalKey, null, timeStamp, keyData.synthesized);
        case 2:
          return new A.KeyRepeatEvent(physicalKey, logicalKey, keyData.character, timeStamp, false);
      }
    },
    KeyboardLockMode: function KeyboardLockMode(t0) {
      this.logicalKey = t0;
    },
    KeyEvent: function KeyEvent() {
    },
    KeyDownEvent: function KeyDownEvent(t0, t1, t2, t3, t4) {
      var _ = this;
      _.physicalKey = t0;
      _.logicalKey = t1;
      _.character = t2;
      _.timeStamp = t3;
      _.synthesized = t4;
    },
    KeyUpEvent: function KeyUpEvent(t0, t1, t2, t3, t4) {
      var _ = this;
      _.physicalKey = t0;
      _.logicalKey = t1;
      _.character = t2;
      _.timeStamp = t3;
      _.synthesized = t4;
    },
    KeyRepeatEvent: function KeyRepeatEvent(t0, t1, t2, t3, t4) {
      var _ = this;
      _.physicalKey = t0;
      _.logicalKey = t1;
      _.character = t2;
      _.timeStamp = t3;
      _.synthesized = t4;
    },
    HardwareKeyboard: function HardwareKeyboard(t0, t1, t2) {
      var _ = this;
      _._pressedKeys = t0;
      _._lockModes = t1;
      _._handlers = t2;
      _._duringDispatch = false;
      _._modifiedHandlers = null;
    },
    KeyDataTransitMode: function KeyDataTransitMode(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    KeyMessage: function KeyMessage(t0, t1) {
      this.events = t0;
      this.rawEvent = t1;
    },
    KeyEventManager: function KeyEventManager(t0, t1, t2) {
      var _ = this;
      _.keyMessageHandler = null;
      _._hardwareKeyboard = t0;
      _._rawKeyboard = t1;
      _._transitMode = null;
      _._keyEventsSinceLastMessage = t2;
    },
    _KeyEvent_Object_Diagnosticable: function _KeyEvent_Object_Diagnosticable() {
    },
    KeyboardKey: function KeyboardKey() {
    },
    LogicalKeyboardKey: function LogicalKeyboardKey(t0) {
      this.keyId = t0;
    },
    PhysicalKeyboardKey: function PhysicalKeyboardKey(t0) {
      this.usbHidUsage = t0;
    },
    _KeyboardKey_Object_Diagnosticable: function _KeyboardKey_Object_Diagnosticable() {
    },
    PlatformException$(code, details, message, stacktrace) {
      return new A.PlatformException(code, message, details, stacktrace);
    },
    MethodCall0: function MethodCall0(t0, t1) {
      this.method = t0;
      this.$arguments = t1;
    },
    PlatformException: function PlatformException(t0, t1, t2, t3) {
      var _ = this;
      _.code = t0;
      _.message = t1;
      _.details = t2;
      _.stacktrace = t3;
    },
    MissingPluginException: function MissingPluginException(t0) {
      this.message = t0;
    },
    StringCodec: function StringCodec() {
    },
    JSONMessageCodec0: function JSONMessageCodec0() {
    },
    JSONMethodCodec0: function JSONMethodCodec0() {
    },
    StandardMessageCodec0: function StandardMessageCodec0() {
    },
    StandardMessageCodec_writeValue_closure0: function StandardMessageCodec_writeValue_closure0(t0, t1) {
      this.$this = t0;
      this.buffer = t1;
    },
    StandardMethodCodec0: function StandardMethodCodec0() {
    },
    _DeferringMouseCursor_firstNonDeferred(cursors) {
      var t1, t2, t3;
      for (t1 = new A.MappedIterator(J.get$iterator$ax(cursors.__internal$_iterable), cursors._f), t2 = A._instanceType(t1)._rest[1]; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        if (!t3.$eq(0, B.C__DeferringMouseCursor))
          return t3;
      }
      return null;
    },
    MouseCursorManager: function MouseCursorManager(t0, t1) {
      this.fallbackMouseCursor = t0;
      this._lastSession = t1;
    },
    MouseCursorSession: function MouseCursorSession() {
    },
    MouseCursor0: function MouseCursor0() {
    },
    _DeferringMouseCursor: function _DeferringMouseCursor() {
    },
    _SystemMouseCursorSession: function _SystemMouseCursorSession(t0, t1) {
      this.cursor = t0;
      this.device = t1;
    },
    SystemMouseCursor: function SystemMouseCursor(t0) {
      this.kind = t0;
    },
    _MouseCursor_Object_Diagnosticable: function _MouseCursor_Object_Diagnosticable() {
    },
    BasicMessageChannel: function BasicMessageChannel(t0, t1, t2) {
      this.name = t0;
      this.codec = t1;
      this.$ti = t2;
    },
    BasicMessageChannel_setMessageHandler_closure: function BasicMessageChannel_setMessageHandler_closure(t0, t1) {
      this.$this = t0;
      this.handler = t1;
    },
    MethodChannel: function MethodChannel(t0, t1) {
      this.name = t0;
      this.codec = t1;
    },
    MethodChannel_setMethodCallHandler_closure: function MethodChannel_setMethodCallHandler_closure(t0, t1) {
      this.$this = t0;
      this.handler = t1;
    },
    OptionalMethodChannel: function OptionalMethodChannel(t0, t1) {
      this.name = t0;
      this.codec = t1;
    },
    RawKeyEvent_RawKeyEvent$fromMessage(message) {
      var data, t1, t2, repeat, _box_0 = {};
      _box_0.character = null;
      data = new A.RawKeyEvent_RawKeyEvent$fromMessage__dataFromWeb(_box_0, message).call$0();
      t1 = $.$get$RawKeyboard_instance()._keysPressed;
      t2 = A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>");
      repeat = A.LinkedHashSet_LinkedHashSet$of(new A.LinkedHashMapKeyIterable(t1, t2), t2._eval$1("Iterable.E")).contains$1(0, data.get$physicalKey());
      t2 = J.$index$asx(message, "type");
      t2.toString;
      A._asString(t2);
      switch (t2) {
        case "keydown":
          return new A.RawKeyDownEvent(_box_0.character, repeat, data);
        case "keyup":
          return new A.RawKeyUpEvent(null, false, data);
        default:
          throw A.wrapException(A.FlutterError_FlutterError("Unknown key event type: " + t2));
      }
    },
    KeyboardSide: function KeyboardSide(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    ModifierKey: function ModifierKey(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    RawKeyEventData: function RawKeyEventData() {
    },
    RawKeyEvent: function RawKeyEvent() {
    },
    RawKeyEvent_RawKeyEvent$fromMessage__dataFromWeb: function RawKeyEvent_RawKeyEvent$fromMessage__dataFromWeb(t0, t1) {
      this._box_0 = t0;
      this.message = t1;
    },
    RawKeyDownEvent: function RawKeyDownEvent(t0, t1, t2) {
      this.character = t0;
      this.repeat = t1;
      this.data = t2;
    },
    RawKeyUpEvent: function RawKeyUpEvent(t0, t1, t2) {
      this.character = t0;
      this.repeat = t1;
      this.data = t2;
    },
    RawKeyboard: function RawKeyboard(t0, t1, t2) {
      this._raw_keyboard$_listeners = t0;
      this._keysPressed = t1;
      this._hiddenKeysPressed = t2;
    },
    RawKeyboard__synchronizeModifiers_closure: function RawKeyboard__synchronizeModifiers_closure(t0) {
      this.anySideKeys = t0;
    },
    _ModifierSidePair: function _ModifierSidePair(t0, t1) {
      this.modifier = t0;
      this.side = t1;
    },
    _RawKeyEvent_Object_Diagnosticable: function _RawKeyEvent_Object_Diagnosticable() {
    },
    _RawKeyEventData_Object_Diagnosticable: function _RawKeyEventData_Object_Diagnosticable() {
    },
    RawKeyEventDataFuchsia: function RawKeyEventDataFuchsia() {
    },
    RawKeyEventDataLinux: function RawKeyEventDataLinux() {
    },
    RawKeyEventDataMacOs: function RawKeyEventDataMacOs() {
    },
    RawKeyEventDataWeb: function RawKeyEventDataWeb(t0, t1, t2, t3, t4) {
      var _ = this;
      _.code = t0;
      _.key = t1;
      _.location = t2;
      _.metaState = t3;
      _.keyCode = t4;
    },
    RestorationManager: function RestorationManager(t0, t1) {
      var _ = this;
      _._pendingRootBucket = _._rootBucket = null;
      _._serializationScheduled = _._debugDoingUpdate = _._isReplacing = _._rootBucketIsValid = false;
      _._bucketsNeedingSerialization = t0;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t1;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__debugDisposed = false;
    },
    RestorationManager_handleRestorationUpdateFromEngine_closure: function RestorationManager_handleRestorationUpdateFromEngine_closure(t0) {
      this.$this = t0;
    },
    RestorationManager_scheduleSerializationFor_closure: function RestorationManager_scheduleSerializationFor_closure(t0) {
      this.$this = t0;
    },
    RestorationBucket: function RestorationBucket(t0, t1, t2, t3) {
      var _ = this;
      _._rawData = t0;
      _._debugOwner = null;
      _._restoration$_manager = t1;
      _._restoration$_parent = null;
      _._claimedChildren = t2;
      _._childrenToAdd = t3;
      _._debugDisposed = _._needsSerialization = false;
    },
    RestorationBucket__rawChildren_closure: function RestorationBucket__rawChildren_closure() {
    },
    RestorationBucket__visitChildren_closure: function RestorationBucket__visitChildren_closure() {
    },
    Action: function Action() {
    },
    CallbackAction: function CallbackAction(t0, t1) {
      this._listeners = t0;
      this.$ti = t1;
    },
    Actions: function Actions(t0, t1, t2) {
      this.actions = t0;
      this.child = t1;
      this.key = t2;
    },
    _ActionsState: function _ActionsState(t0, t1, t2) {
      var _ = this;
      _.listenedActions = t0;
      _.rebuildKey = t1;
      _._widget = null;
      _._debugLifecycleState = t2;
      _._framework$_element = null;
    },
    _ActionsState__handleActionChanged_closure: function _ActionsState__handleActionChanged_closure(t0) {
      this.$this = t0;
    },
    _ActionsMarker: function _ActionsMarker(t0, t1, t2, t3, t4) {
      var _ = this;
      _.dispatcher = t0;
      _.actions = t1;
      _.rebuildKey = t2;
      _.child = t3;
      _.key = t4;
    },
    _Action_Object_Diagnosticable: function _Action_Object_Diagnosticable() {
    },
    KeepAliveNotification: function KeepAliveNotification() {
    },
    KeepAliveHandle: function KeepAliveHandle(t0) {
      var _ = this;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t0;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__debugDisposed = false;
    },
    AutomaticKeepAliveClientMixin: function AutomaticKeepAliveClientMixin() {
    },
    _NullWidget: function _NullWidget(t0) {
      this.key = t0;
    },
    Directionality_maybeOf(context) {
      var widget = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality);
      return widget == null ? null : widget.textDirection;
    },
    ClipPath$(child, clipBehavior, clipper) {
      return new A.ClipPath(clipper, clipBehavior, child, null);
    },
    RichText__extractChildren(span) {
      var result, t1 = {};
      t1.index = 0;
      result = A._setArrayType([], type$.JSArray_Widget);
      span.visitChildren$1(new A.RichText__extractChildren_closure(t1, result));
      return result;
    },
    Semantics$(child, enabled, focusable, focused, label, onLongPress, onTap, selected, tagForChildren, textDirection) {
      var _null = null;
      return new A.Semantics(new A.SemanticsProperties(enabled, _null, _null, selected, _null, _null, _null, _null, _null, _null, _null, focusable, focused, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, label, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, textDirection, _null, tagForChildren, onTap, onLongPress, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null), false, false, false, child, _null);
    },
    Directionality: function Directionality(t0, t1, t2) {
      this.textDirection = t0;
      this.child = t1;
      this.key = t2;
    },
    ClipPath: function ClipPath(t0, t1, t2, t3) {
      var _ = this;
      _.clipper = t0;
      _.clipBehavior = t1;
      _.child = t2;
      _.key = t3;
    },
    PhysicalModel: function PhysicalModel(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.shape = t0;
      _.clipBehavior = t1;
      _.borderRadius = t2;
      _.elevation = t3;
      _.color = t4;
      _.shadowColor = t5;
      _.child = t6;
      _.key = t7;
    },
    Transform: function Transform(t0, t1, t2, t3) {
      var _ = this;
      _.transform = t0;
      _.alignment = t1;
      _.child = t2;
      _.key = t3;
    },
    Padding: function Padding(t0, t1, t2) {
      this.padding = t0;
      this.child = t1;
      this.key = t2;
    },
    Align: function Align(t0, t1, t2, t3, t4) {
      var _ = this;
      _.alignment = t0;
      _.widthFactor = t1;
      _.heightFactor = t2;
      _.child = t3;
      _.key = t4;
    },
    Center: function Center(t0, t1, t2, t3, t4) {
      var _ = this;
      _.alignment = t0;
      _.widthFactor = t1;
      _.heightFactor = t2;
      _.child = t3;
      _.key = t4;
    },
    ConstrainedBox: function ConstrainedBox(t0, t1, t2) {
      this.constraints = t0;
      this.child = t1;
      this.key = t2;
    },
    LimitedBox: function LimitedBox(t0, t1, t2, t3) {
      var _ = this;
      _.maxWidth = t0;
      _.maxHeight = t1;
      _.child = t2;
      _.key = t3;
    },
    Flex: function Flex() {
    },
    Column: function Column(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.direction = t0;
      _.mainAxisAlignment = t1;
      _.mainAxisSize = t2;
      _.crossAxisAlignment = t3;
      _.textDirection = t4;
      _.verticalDirection = t5;
      _.textBaseline = t6;
      _.children = t7;
      _.key = t8;
    },
    RichText: function RichText(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.text = t0;
      _.textAlign = t1;
      _.textDirection = t2;
      _.softWrap = t3;
      _.overflow = t4;
      _.textScaleFactor = t5;
      _.maxLines = t6;
      _.locale = t7;
      _.strutStyle = t8;
      _.textWidthBasis = t9;
      _.textHeightBehavior = t10;
      _.children = t11;
      _.key = t12;
    },
    RichText__extractChildren_closure: function RichText__extractChildren_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    Listener: function Listener(t0, t1, t2, t3) {
      var _ = this;
      _.onPointerDown = t0;
      _.behavior = t1;
      _.child = t2;
      _.key = t3;
    },
    MouseRegion: function MouseRegion(t0, t1, t2, t3, t4) {
      var _ = this;
      _.onEnter = t0;
      _.onExit = t1;
      _.cursor = t2;
      _.child = t3;
      _.key = t4;
    },
    Semantics: function Semantics(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.properties = t0;
      _.container = t1;
      _.explicitChildNodes = t2;
      _.excludeSemantics = t3;
      _.child = t4;
      _.key = t5;
    },
    Builder: function Builder(t0, t1) {
      this.builder = t0;
      this.key = t1;
    },
    RenderObjectToWidgetElement$(widget, $T) {
      return new A.RenderObjectToWidgetElement(widget, B._ElementLifecycle_0, $T._eval$1("RenderObjectToWidgetElement<0>"));
    },
    WidgetsFlutterBinding$() {
      var t9, _null = null,
        t1 = A._setArrayType([], type$.JSArray_WidgetsBindingObserver),
        t2 = $.Zone__current,
        t3 = A._setArrayType([], type$.JSArray_of_void_Function_List_FrameTiming),
        t4 = A.List_List$filled(7, _null, false, type$.nullable__TaskEntry_dynamic),
        t5 = type$.int,
        t6 = A.HashSet_HashSet(t5),
        t7 = type$.JSArray_of_void_Function_Duration,
        t8 = A._setArrayType([], t7);
      t7 = A._setArrayType([], t7);
      t9 = A.TimelineTask$();
      t1 = new A.WidgetsFlutterBinding(_null, t1, true, new A._AsyncCompleter(new A._Future(t2, type$._Future_void), type$._AsyncCompleter_void), false, _null, false, false, _null, $, _null, false, 0, false, $, $, new A._SystemFontsNotifier(A.LinkedHashSet_LinkedHashSet$_empty(type$.void_Function)), $, $, $, $, _null, t3, _null, A.binding__defaultSchedulingStrategy$closure(), new A.HeapPriorityQueue(A.binding_SchedulerBinding__taskSorter$closure(), t4, type$.HeapPriorityQueue__TaskEntry_dynamic), false, 0, A.LinkedHashMap_LinkedHashMap$_empty(t5, type$._FrameCallbackEntry), t6, t8, t7, _null, false, B.SchedulerPhase_0, true, false, _null, B.Duration_0, B.Duration_0, _null, 0, _null, false, t9, A.ListQueue$(_null, type$.PointerEvent_2), new A.PointerRouter(A.LinkedHashMap_LinkedHashMap$_empty(t5, type$.Map_of_void_Function_PointerEvent_and_nullable_Matrix4), A.LinkedHashMap_LinkedHashMap$_empty(type$.void_Function_PointerEvent, type$.nullable_Matrix4)), new A.GestureArenaManager(A.LinkedHashMap_LinkedHashMap$_empty(t5, type$._GestureArena)), new A.PointerSignalResolver(), A.LinkedHashMap_LinkedHashMap$_empty(t5, type$.HitTestResult), $, false, B.Duration_m38000);
      t1.BindingBase$0();
      return t1;
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure0: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure0() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure1: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure1() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure2: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure2() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure3: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure3() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure4: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure4() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure5: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure5() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_dispatchEvent_closure: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_dispatchEvent_closure(t0, t1, t2) {
      this.$this = t0;
      this.hitTestResult = t1;
      this.event = t2;
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initInstances_closure: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initInstances_closure(t0) {
      this.$this = t0;
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure0: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure0() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initInstances_closure: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initInstances_closure(t0) {
      this.$this = t0;
    },
    WidgetsBindingObserver: function WidgetsBindingObserver() {
    },
    WidgetsBinding: function WidgetsBinding() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure0: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure0(t0) {
      this.$this = t0;
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure1: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure1(t0) {
      this.$this = t0;
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure2: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure2(t0) {
      this.$this = t0;
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure3: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure3() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure4: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure4() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_drawFrame_closure: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_drawFrame_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    RenderObjectToWidgetAdapter: function RenderObjectToWidgetAdapter(t0, t1, t2, t3) {
      var _ = this;
      _.child = t0;
      _.container = t1;
      _.key = t2;
      _.$ti = t3;
    },
    RenderObjectToWidgetAdapter_attachToRenderTree_closure: function RenderObjectToWidgetAdapter_attachToRenderTree_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.owner = t2;
    },
    RenderObjectToWidgetAdapter_attachToRenderTree_closure0: function RenderObjectToWidgetAdapter_attachToRenderTree_closure0(t0) {
      this._box_0 = t0;
    },
    RenderObjectToWidgetElement: function RenderObjectToWidgetElement(t0, t1, t2) {
      var _ = this;
      _._slot = _._debugReassembleConfig = _._parent = _._ancestorRenderObjectElement = _._renderObject = _._newWidget = _._child = null;
      _.__Element__depth = $;
      _._widget = t0;
      _._owner = null;
      _._lifecycleState = t1;
      _._dependencies = _._inheritedLookup = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
      _.$ti = t2;
    },
    WidgetsFlutterBinding: function WidgetsFlutterBinding(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52) {
      var _ = this;
      _.WidgetsBinding__buildOwner = t0;
      _.WidgetsBinding__observers = t1;
      _.WidgetsBinding__needToReportFirstFrame = t2;
      _.WidgetsBinding__firstFrameCompleter = t3;
      _.WidgetsBinding_debugBuildingDirtyElements = t4;
      _.WidgetsBinding__renderViewElement = t5;
      _.WidgetsBinding__readyToProduceFrames = t6;
      _.RendererBinding__debugIsRenderViewInitialized = t7;
      _.RendererBinding__mouseTracker = t8;
      _.RendererBinding___RendererBinding__pipelineOwner = t9;
      _.RendererBinding__semanticsHandle = t10;
      _.RendererBinding__debugMouseTrackerUpdateScheduled = t11;
      _.RendererBinding__firstFrameDeferredCount = t12;
      _.RendererBinding__firstFrameSent = t13;
      _.SemanticsBinding___SemanticsBinding__accessibilityFeatures = t14;
      _.PaintingBinding___PaintingBinding__imageCache = t15;
      _.PaintingBinding__systemFonts = t16;
      _.ServicesBinding___ServicesBinding__keyboard = t17;
      _.ServicesBinding___ServicesBinding__keyEventManager = t18;
      _.ServicesBinding___ServicesBinding__defaultBinaryMessenger = t19;
      _.ServicesBinding___ServicesBinding__restorationManager = t20;
      _.ServicesBinding__systemUiChangeCallback = t21;
      _.SchedulerBinding__timingsCallbacks = t22;
      _.SchedulerBinding__lifecycleState = t23;
      _.SchedulerBinding_schedulingStrategy = t24;
      _.SchedulerBinding__taskQueue = t25;
      _.SchedulerBinding__hasRequestedAnEventLoopCallback = t26;
      _.SchedulerBinding__nextFrameCallbackId = t27;
      _.SchedulerBinding__transientCallbacks = t28;
      _.SchedulerBinding__removedIds = t29;
      _.SchedulerBinding__persistentCallbacks = t30;
      _.SchedulerBinding__postFrameCallbacks = t31;
      _.SchedulerBinding__nextFrameCompleter = t32;
      _.SchedulerBinding__hasScheduledFrame = t33;
      _.SchedulerBinding__schedulerPhase = t34;
      _.SchedulerBinding__framesEnabled = t35;
      _.SchedulerBinding__warmUpFrame = t36;
      _.SchedulerBinding__firstRawTimeStampInEpoch = t37;
      _.SchedulerBinding__epochStart = t38;
      _.SchedulerBinding__lastRawTimeStamp = t39;
      _.SchedulerBinding__currentFrameTimeStamp = t40;
      _.SchedulerBinding__debugFrameNumber = t41;
      _.SchedulerBinding__debugBanner = t42;
      _.SchedulerBinding__rescheduleAfterWarmUpFrame = t43;
      _.SchedulerBinding__frameTimelineTask = t44;
      _.GestureBinding__pendingPointerEvents = t45;
      _.GestureBinding_pointerRouter = t46;
      _.GestureBinding_gestureArena = t47;
      _.GestureBinding_pointerSignalResolver = t48;
      _.GestureBinding__hitTests = t49;
      _.GestureBinding___GestureBinding__resampler = t50;
      _.GestureBinding_resamplingEnabled = t51;
      _.GestureBinding_samplingOffset = t52;
      _._debugConstructed = false;
      _._lockCount = 0;
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding: function _WidgetsFlutterBinding_BindingBase_GestureBinding() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding: function _WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding() {
    },
    DecoratedBox$(child, decoration, position) {
      return new A.DecoratedBox(decoration, position, child, null);
    },
    Container$(alignment, child, clipBehavior, constraints, decoration, foregroundDecoration, margin, padding, transform, transformAlignment) {
      return new A.Container(child, alignment, padding, decoration, foregroundDecoration, constraints, margin, transform, transformAlignment, clipBehavior, null);
    },
    DecoratedBox: function DecoratedBox(t0, t1, t2, t3) {
      var _ = this;
      _.decoration = t0;
      _.position = t1;
      _.child = t2;
      _.key = t3;
    },
    Container: function Container(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.child = t0;
      _.alignment = t1;
      _.padding = t2;
      _.decoration = t3;
      _.foregroundDecoration = t4;
      _.constraints = t5;
      _.margin = t6;
      _.transform = t7;
      _.transformAlignment = t8;
      _.clipBehavior = t9;
      _.key = t10;
    },
    _DecorationClipper: function _DecorationClipper(t0, t1) {
      this.textDirection = t0;
      this.decoration = t1;
    },
    combineKeyEventResults(results) {
      var t1, hasSkipRemainingHandlers, _i;
      for (t1 = results.length, hasSkipRemainingHandlers = false, _i = 0; _i < t1; ++_i)
        switch (results[_i]) {
          case B.KeyEventResult_0:
            return B.KeyEventResult_0;
          case B.KeyEventResult_2:
            hasSkipRemainingHandlers = true;
            break;
          case B.KeyEventResult_1:
            break;
        }
      return hasSkipRemainingHandlers ? B.KeyEventResult_2 : B.KeyEventResult_1;
    },
    FocusNode$(canRequestFocus, debugLabel, descendantsAreFocusable, descendantsAreTraversable, onKey, onKeyEvent, skipTraversal) {
      return new A.FocusNode(false, canRequestFocus, true, true, onKey, onKeyEvent, A._setArrayType([], type$.JSArray_FocusNode), $.$get$ChangeNotifier__emptyListeners());
    },
    FocusManager__defaultModeForPlatform() {
      switch (A.defaultTargetPlatform().index) {
        case 0:
        case 1:
        case 2:
          if ($.WidgetsBinding__instance.RendererBinding__mouseTracker._mouseStates._length !== 0)
            return B.FocusHighlightMode_1;
          return B.FocusHighlightMode_0;
        case 3:
        case 4:
        case 5:
          return B.FocusHighlightMode_1;
      }
    },
    KeyEventResult: function KeyEventResult(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    FocusAttachment: function FocusAttachment(t0) {
      this._node = t0;
    },
    UnfocusDisposition: function UnfocusDisposition(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    FocusNode: function FocusNode(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._skipTraversal = t0;
      _._focus_manager$_canRequestFocus = t1;
      _._descendantsAreFocusable = t2;
      _._descendantsAreTraversable = t3;
      _._context = null;
      _.onKey = t4;
      _.onKeyEvent = t5;
      _._focus_manager$_parent = _._descendants = _._ancestors = _._manager = null;
      _._focus_manager$_children = t6;
      _._attachment = _._focus_manager$_debugLabel = null;
      _._requestFocusWhenReparented = false;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t7;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__debugDisposed = false;
    },
    FocusNode_debugDescribeChildren_closure: function FocusNode_debugDescribeChildren_closure(t0) {
      this._box_0 = t0;
    },
    FocusScopeNode: function FocusScopeNode(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _._focusedChildren = t0;
      _._skipTraversal = t1;
      _._focus_manager$_canRequestFocus = t2;
      _._descendantsAreFocusable = t3;
      _._descendantsAreTraversable = t4;
      _._context = null;
      _.onKey = t5;
      _.onKeyEvent = t6;
      _._focus_manager$_parent = _._descendants = _._ancestors = _._manager = null;
      _._focus_manager$_children = t7;
      _._attachment = _._focus_manager$_debugLabel = null;
      _._requestFocusWhenReparented = false;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t8;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__debugDisposed = false;
    },
    FocusHighlightMode: function FocusHighlightMode(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    FocusHighlightStrategy: function FocusHighlightStrategy(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    FocusManager: function FocusManager(t0, t1, t2, t3, t4) {
      var _ = this;
      _._lastInteractionWasTouch = _._highlightMode = null;
      _._focus_manager$_listeners = t0;
      _.rootScope = t1;
      _._primaryFocus = null;
      _._dirtyNodes = t2;
      _._markedForFocus = null;
      _._pendingAutofocuses = t3;
      _._haveScheduledUpdate = false;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t4;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__debugDisposed = false;
    },
    _FocusManager_Object_DiagnosticableTreeMixin: function _FocusManager_Object_DiagnosticableTreeMixin() {
    },
    _FocusManager_Object_DiagnosticableTreeMixin_ChangeNotifier: function _FocusManager_Object_DiagnosticableTreeMixin_ChangeNotifier() {
    },
    _FocusNode_Object_DiagnosticableTreeMixin: function _FocusNode_Object_DiagnosticableTreeMixin() {
    },
    _FocusNode_Object_DiagnosticableTreeMixin_ChangeNotifier: function _FocusNode_Object_DiagnosticableTreeMixin_ChangeNotifier() {
    },
    Focus_maybeOf(context, scopeOk) {
      var marker = context.dependOnInheritedWidgetOfExactType$1$0(type$._FocusMarker),
        node = marker == null ? null : marker.notifier;
      if (node == null)
        return null;
      return node;
    },
    Focus: function Focus(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.child = t0;
      _.focusNode = t1;
      _.autofocus = t2;
      _.onFocusChange = t3;
      _._focus_scope$_canRequestFocus = t4;
      _.key = t5;
    },
    _FocusState: function _FocusState(t0) {
      var _ = this;
      _._internalNode = null;
      _.___FocusState__descendantsWereTraversable = _.___FocusState__descendantsWereFocusable = _.___FocusState__couldRequestFocus = _.___FocusState__hadPrimaryFocus = $;
      _._didAutofocus = false;
      _._widget = _._focusAttachment = null;
      _._debugLifecycleState = t0;
      _._framework$_element = null;
    },
    _FocusState__handleFocusChanged_closure: function _FocusState__handleFocusChanged_closure(t0, t1) {
      this.$this = t0;
      this.hasPrimaryFocus = t1;
    },
    _FocusState__handleFocusChanged_closure0: function _FocusState__handleFocusChanged_closure0(t0, t1) {
      this.$this = t0;
      this.canRequestFocus = t1;
    },
    _FocusState__handleFocusChanged_closure1: function _FocusState__handleFocusChanged_closure1(t0, t1) {
      this.$this = t0;
      this.descendantsAreFocusable = t1;
    },
    _FocusState__handleFocusChanged_closure2: function _FocusState__handleFocusChanged_closure2(t0, t1) {
      this.$this = t0;
      this.descendantsAreTraversable = t1;
    },
    _FocusMarker: function _FocusMarker(t0, t1, t2) {
      this.notifier = t0;
      this.child = t1;
      this.key = t2;
    },
    _InactiveElements__deactivateRecursively(element) {
      element.deactivate$0();
      element.visitChildren$1(A.framework__InactiveElements__deactivateRecursively$closure());
    },
    Element__sort(a, b) {
      var t1, _s6_ = "_depth";
      if (A._lateReadCheck(a.__Element__depth, _s6_) < A._lateReadCheck(b.__Element__depth, _s6_))
        return -1;
      if (A._lateReadCheck(b.__Element__depth, _s6_) < A._lateReadCheck(a.__Element__depth, _s6_))
        return 1;
      t1 = b._dirty;
      if (t1 && !a._dirty)
        return -1;
      if (a._dirty && !t1)
        return 1;
      return 0;
    },
    Element__activateRecursively(element) {
      element.activate$0();
      element.visitChildren$1(A.framework_Element__activateRecursively$closure());
    },
    _ElementDiagnosticableTreeNode$($name, stateful, style, value) {
      return new A._ElementDiagnosticableTreeNode(stateful, value, $name, true, true, null, style);
    },
    ErrorWidget__defaultErrorWidgetBuilder(details) {
      var exception = details.exception,
        t1 = exception instanceof A.FlutterError ? exception : null;
      return new A.ErrorWidget("", t1, new A.UniqueKey());
    },
    StatefulElement$(widget) {
      var t1 = widget.createState$0(),
        t2 = new A.StatefulElement(t1, widget, B._ElementLifecycle_0);
      t1._framework$_element = t2;
      t1._widget = widget;
      return t2;
    },
    InheritedElement$(widget) {
      return new A.InheritedElement(A.HashMap_HashMap(type$.Element_2, type$.nullable_Object), widget, B._ElementLifecycle_0);
    },
    _debugReportException(context, exception, stack, informationCollector) {
      var details = new A.FlutterErrorDetails(exception, stack, "widgets library", context, informationCollector, false);
      A.FlutterError_reportError(details);
      return details;
    },
    UniqueKey: function UniqueKey() {
    },
    GlobalKey: function GlobalKey() {
    },
    LabeledGlobalKey: function LabeledGlobalKey(t0, t1) {
      this._debugLabel = t0;
      this.$ti = t1;
    },
    GlobalObjectKey: function GlobalObjectKey(t0, t1) {
      this.value = t0;
      this.$ti = t1;
    },
    Widget: function Widget() {
    },
    InheritedTreeCache: function InheritedTreeCache(t0, t1) {
      this._parent = t0;
      this._framework$_current = t1;
    },
    StatelessWidget: function StatelessWidget() {
    },
    StatefulWidget: function StatefulWidget() {
    },
    _StateLifecycle: function _StateLifecycle(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    State: function State() {
    },
    ProxyWidget: function ProxyWidget() {
    },
    InheritedWidget: function InheritedWidget() {
    },
    RenderObjectWidget: function RenderObjectWidget() {
    },
    LeafRenderObjectWidget: function LeafRenderObjectWidget() {
    },
    SingleChildRenderObjectWidget: function SingleChildRenderObjectWidget() {
    },
    MultiChildRenderObjectWidget: function MultiChildRenderObjectWidget() {
    },
    _ElementLifecycle: function _ElementLifecycle(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    _InactiveElements: function _InactiveElements(t0) {
      this._locked = false;
      this._elements = t0;
    },
    _InactiveElements__unmount_closure: function _InactiveElements__unmount_closure(t0, t1) {
      this.$this = t0;
      this.element = t1;
    },
    BuildOwner: function BuildOwner(t0, t1, t2, t3) {
      var _ = this;
      _.onBuildScheduled = null;
      _._inactiveElements = t0;
      _._dirtyElements = t1;
      _._scheduledFlushDirtyElements = false;
      _._dirtyElementsNeedsResorting = null;
      _.focusManager = t2;
      _._debugStateLockLevel = 0;
      _._debugBuilding = false;
      _._debugElementsThatWillNeedToBeRebuiltDueToGlobalKeyShenanigans = _._debugCurrentBuildTarget = null;
      _._globalKeyRegistry = t3;
    },
    BuildOwner_buildScope_closure: function BuildOwner_buildScope_closure(t0, t1, t2) {
      this._box_1 = t0;
      this.$this = t1;
      this.element = t2;
    },
    Element0: function Element0() {
    },
    Element_renderObject_visit: function Element_renderObject_visit(t0) {
      this._box_0 = t0;
    },
    Element_updateSlotForChild_visit: function Element_updateSlotForChild_visit(t0) {
      this.newSlot = t0;
    },
    Element__updateDepth_closure: function Element__updateDepth_closure(t0) {
      this.expectedDepth = t0;
    },
    Element_detachRenderObject_closure: function Element_detachRenderObject_closure() {
    },
    Element_attachRenderObject_closure: function Element_attachRenderObject_closure(t0) {
      this.newSlot = t0;
    },
    Element_debugDescribeChildren_closure: function Element_debugDescribeChildren_closure(t0) {
      this.children = t0;
    },
    _ElementDiagnosticableTreeNode: function _ElementDiagnosticableTreeNode(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.stateful = t0;
      _.value = t1;
      _._cachedBuilder = null;
      _.name = t2;
      _.showSeparator = t3;
      _.showName = t4;
      _.linePrefix = t5;
      _.style = t6;
    },
    ErrorWidget: function ErrorWidget(t0, t1, t2) {
      this.message = t0;
      this._flutterError = t1;
      this.key = t2;
    },
    ComponentElement: function ComponentElement() {
    },
    ComponentElement_performRebuild_closure: function ComponentElement_performRebuild_closure(t0) {
      this.$this = t0;
    },
    ComponentElement_performRebuild_closure0: function ComponentElement_performRebuild_closure0(t0) {
      this.$this = t0;
    },
    StatelessElement: function StatelessElement(t0, t1) {
      var _ = this;
      _._slot = _._debugReassembleConfig = _._parent = _._framework$_child = null;
      _.__Element__depth = $;
      _._widget = t0;
      _._owner = null;
      _._lifecycleState = t1;
      _._dependencies = _._inheritedLookup = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
    },
    StatefulElement: function StatefulElement(t0, t1, t2) {
      var _ = this;
      _._framework$_state = t0;
      _._didChangeDependencies = false;
      _._slot = _._debugReassembleConfig = _._parent = _._framework$_child = null;
      _.__Element__depth = $;
      _._widget = t1;
      _._owner = null;
      _._lifecycleState = t2;
      _._dependencies = _._inheritedLookup = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
    },
    ProxyElement: function ProxyElement() {
    },
    InheritedElement: function InheritedElement(t0, t1, t2) {
      var _ = this;
      _._dependents = t0;
      _._slot = _._debugReassembleConfig = _._parent = _._framework$_child = null;
      _.__Element__depth = $;
      _._widget = t1;
      _._owner = null;
      _._lifecycleState = t2;
      _._dependencies = _._inheritedLookup = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
    },
    RenderObjectElement: function RenderObjectElement() {
    },
    RenderObjectElement_updateChildren_replaceWithNullIfForgotten: function RenderObjectElement_updateChildren_replaceWithNullIfForgotten(t0) {
      this.forgottenChildren = t0;
    },
    RenderObjectElement_updateChildren_slotFor: function RenderObjectElement_updateChildren_slotFor(t0) {
      this.slots = t0;
    },
    RootRenderObjectElement: function RootRenderObjectElement() {
    },
    LeafRenderObjectElement: function LeafRenderObjectElement(t0, t1) {
      var _ = this;
      _._slot = _._debugReassembleConfig = _._parent = _._ancestorRenderObjectElement = _._renderObject = null;
      _.__Element__depth = $;
      _._widget = t0;
      _._owner = null;
      _._lifecycleState = t1;
      _._dependencies = _._inheritedLookup = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
    },
    SingleChildRenderObjectElement: function SingleChildRenderObjectElement(t0, t1) {
      var _ = this;
      _._slot = _._debugReassembleConfig = _._parent = _._ancestorRenderObjectElement = _._renderObject = _._framework$_child = null;
      _.__Element__depth = $;
      _._widget = t0;
      _._owner = null;
      _._lifecycleState = t1;
      _._dependencies = _._inheritedLookup = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
    },
    MultiChildRenderObjectElement: function MultiChildRenderObjectElement(t0, t1, t2) {
      var _ = this;
      _.__MultiChildRenderObjectElement__children = $;
      _._forgottenChildren = t0;
      _._slot = _._debugReassembleConfig = _._parent = _._ancestorRenderObjectElement = _._renderObject = null;
      _.__Element__depth = $;
      _._widget = t1;
      _._owner = null;
      _._lifecycleState = t2;
      _._dependencies = _._inheritedLookup = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
    },
    IndexedSlot: function IndexedSlot(t0, t1, t2) {
      this.value = t0;
      this.index = t1;
      this.$ti = t2;
    },
    _NullElement: function _NullElement(t0, t1) {
      var _ = this;
      _._slot = _._debugReassembleConfig = _._parent = null;
      _.__Element__depth = $;
      _._widget = t0;
      _._owner = null;
      _._lifecycleState = t1;
      _._dependencies = _._inheritedLookup = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
    },
    _NullWidget0: function _NullWidget0(t0) {
      this.key = t0;
    },
    _State_Object_Diagnosticable: function _State_Object_Diagnosticable() {
    },
    GestureRecognizerFactory: function GestureRecognizerFactory() {
    },
    GestureRecognizerFactoryWithHandlers: function GestureRecognizerFactoryWithHandlers(t0, t1, t2) {
      this._constructor = t0;
      this._initializer = t1;
      this.$ti = t2;
    },
    GestureDetector: function GestureDetector(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.child = t0;
      _.onTapDown = t1;
      _.onTapUp = t2;
      _.onTap = t3;
      _.onTapCancel = t4;
      _.onDoubleTap = t5;
      _.onLongPress = t6;
      _.behavior = t7;
      _.excludeFromSemantics = t8;
      _.key = t9;
    },
    GestureDetector_build_closure: function GestureDetector_build_closure(t0) {
      this.$this = t0;
    },
    GestureDetector_build_closure0: function GestureDetector_build_closure0(t0) {
      this.$this = t0;
    },
    GestureDetector_build_closure1: function GestureDetector_build_closure1(t0) {
      this.$this = t0;
    },
    GestureDetector_build_closure2: function GestureDetector_build_closure2(t0) {
      this.$this = t0;
    },
    GestureDetector_build_closure3: function GestureDetector_build_closure3(t0) {
      this.$this = t0;
    },
    GestureDetector_build_closure4: function GestureDetector_build_closure4(t0) {
      this.$this = t0;
    },
    RawGestureDetector: function RawGestureDetector(t0, t1, t2, t3, t4) {
      var _ = this;
      _.child = t0;
      _.gestures = t1;
      _.behavior = t2;
      _.excludeFromSemantics = t3;
      _.key = t4;
    },
    RawGestureDetectorState: function RawGestureDetectorState(t0, t1) {
      var _ = this;
      _._recognizers = t0;
      _._widget = _._gesture_detector$_semantics = null;
      _._debugLifecycleState = t1;
      _._framework$_element = null;
    },
    SemanticsGestureDelegate: function SemanticsGestureDelegate() {
    },
    _DefaultSemanticsGestureDelegate: function _DefaultSemanticsGestureDelegate(t0) {
      this.detectorState = t0;
    },
    IconTheme$(child, data, key) {
      return new A.IconTheme(data, child, key);
    },
    IconTheme_merge(child, data) {
      return new A.Builder(new A.IconTheme_merge_closure(null, data, child), null);
    },
    IconTheme: function IconTheme(t0, t1, t2) {
      this.data = t0;
      this.child = t1;
      this.key = t2;
    },
    IconTheme_merge_closure: function IconTheme_merge_closure(t0, t1, t2) {
      this.key = t0;
      this.data = t1;
      this.child = t2;
    },
    IconThemeData: function IconThemeData(t0, t1, t2, t3) {
      var _ = this;
      _.color = t0;
      _._opacity = t1;
      _.size = t2;
      _.shadows = t3;
    },
    _IconThemeData_Object_Diagnosticable: function _IconThemeData_Object_Diagnosticable() {
    },
    AnimatedDefaultTextStyle$(child, duration, style) {
      return new A.AnimatedDefaultTextStyle(child, style, B.C__Linear, duration, null, null);
    },
    BoxConstraintsTween: function BoxConstraintsTween(t0, t1) {
      this.begin = t0;
      this.end = t1;
    },
    DecorationTween: function DecorationTween(t0, t1) {
      this.begin = t0;
      this.end = t1;
    },
    EdgeInsetsGeometryTween: function EdgeInsetsGeometryTween(t0, t1) {
      this.begin = t0;
      this.end = t1;
    },
    BorderRadiusTween: function BorderRadiusTween(t0, t1) {
      this.begin = t0;
      this.end = t1;
    },
    Matrix4Tween: function Matrix4Tween(t0, t1) {
      this.begin = t0;
      this.end = t1;
    },
    TextStyleTween: function TextStyleTween(t0, t1) {
      this.begin = t0;
      this.end = t1;
    },
    ImplicitlyAnimatedWidget: function ImplicitlyAnimatedWidget() {
    },
    ImplicitlyAnimatedWidgetState: function ImplicitlyAnimatedWidgetState() {
    },
    ImplicitlyAnimatedWidgetState_initState_closure: function ImplicitlyAnimatedWidgetState_initState_closure(t0) {
      this.$this = t0;
    },
    ImplicitlyAnimatedWidgetState_didUpdateWidget_closure: function ImplicitlyAnimatedWidgetState_didUpdateWidget_closure(t0) {
      this.$this = t0;
    },
    ImplicitlyAnimatedWidgetState__constructTweens_closure: function ImplicitlyAnimatedWidgetState__constructTweens_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    AnimatedWidgetBaseState: function AnimatedWidgetBaseState() {
    },
    AnimatedWidgetBaseState__handleAnimationChanged_closure: function AnimatedWidgetBaseState__handleAnimationChanged_closure() {
    },
    AnimatedContainer: function AnimatedContainer(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.child = t0;
      _.decoration = t1;
      _.foregroundDecoration = t2;
      _.constraints = t3;
      _.curve = t4;
      _.duration = t5;
      _.onEnd = t6;
      _.key = t7;
    },
    _AnimatedContainerState: function _AnimatedContainerState(t0, t1, t2) {
      var _ = this;
      _._transformAlignment = _._transform = _._margin = _._constraints = _._foregroundDecoration = _._implicit_animations$_decoration = _._implicit_animations$_padding = _._alignment = null;
      _.__ImplicitlyAnimatedWidgetState__animation = _.__ImplicitlyAnimatedWidgetState__controller = $;
      _.SingleTickerProviderStateMixin__ticker = t0;
      _.SingleTickerProviderStateMixin__tickerModeNotifier = t1;
      _._widget = null;
      _._debugLifecycleState = t2;
      _._framework$_element = null;
    },
    _AnimatedContainerState_forEachTween_closure: function _AnimatedContainerState_forEachTween_closure() {
    },
    _AnimatedContainerState_forEachTween_closure0: function _AnimatedContainerState_forEachTween_closure0() {
    },
    _AnimatedContainerState_forEachTween_closure1: function _AnimatedContainerState_forEachTween_closure1() {
    },
    _AnimatedContainerState_forEachTween_closure2: function _AnimatedContainerState_forEachTween_closure2() {
    },
    _AnimatedContainerState_forEachTween_closure3: function _AnimatedContainerState_forEachTween_closure3() {
    },
    _AnimatedContainerState_forEachTween_closure4: function _AnimatedContainerState_forEachTween_closure4() {
    },
    _AnimatedContainerState_forEachTween_closure5: function _AnimatedContainerState_forEachTween_closure5() {
    },
    _AnimatedContainerState_forEachTween_closure6: function _AnimatedContainerState_forEachTween_closure6() {
    },
    AnimatedDefaultTextStyle: function AnimatedDefaultTextStyle(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.child = t0;
      _.style = t1;
      _.curve = t2;
      _.duration = t3;
      _.onEnd = t4;
      _.key = t5;
    },
    _AnimatedDefaultTextStyleState: function _AnimatedDefaultTextStyleState(t0, t1, t2) {
      var _ = this;
      _._implicit_animations$_style = null;
      _.__ImplicitlyAnimatedWidgetState__animation = _.__ImplicitlyAnimatedWidgetState__controller = $;
      _.SingleTickerProviderStateMixin__ticker = t0;
      _.SingleTickerProviderStateMixin__tickerModeNotifier = t1;
      _._widget = null;
      _._debugLifecycleState = t2;
      _._framework$_element = null;
    },
    _AnimatedDefaultTextStyleState_forEachTween_closure: function _AnimatedDefaultTextStyleState_forEachTween_closure() {
    },
    AnimatedPhysicalModel: function AnimatedPhysicalModel(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.child = t0;
      _.shape = t1;
      _.clipBehavior = t2;
      _.elevation = t3;
      _.color = t4;
      _.animateColor = t5;
      _.shadowColor = t6;
      _.curve = t7;
      _.duration = t8;
      _.onEnd = t9;
      _.key = t10;
    },
    _AnimatedPhysicalModelState: function _AnimatedPhysicalModelState(t0, t1, t2) {
      var _ = this;
      _._shadowColor = _._implicit_animations$_color = _._elevation = _._borderRadius = null;
      _.__ImplicitlyAnimatedWidgetState__animation = _.__ImplicitlyAnimatedWidgetState__controller = $;
      _.SingleTickerProviderStateMixin__ticker = t0;
      _.SingleTickerProviderStateMixin__tickerModeNotifier = t1;
      _._widget = null;
      _._debugLifecycleState = t2;
      _._framework$_element = null;
    },
    _AnimatedPhysicalModelState_forEachTween_closure: function _AnimatedPhysicalModelState_forEachTween_closure() {
    },
    _AnimatedPhysicalModelState_forEachTween_closure0: function _AnimatedPhysicalModelState_forEachTween_closure0() {
    },
    _AnimatedPhysicalModelState_forEachTween_closure1: function _AnimatedPhysicalModelState_forEachTween_closure1() {
    },
    _AnimatedPhysicalModelState_forEachTween_closure2: function _AnimatedPhysicalModelState_forEachTween_closure2() {
    },
    _ImplicitlyAnimatedWidgetState_State_SingleTickerProviderStateMixin: function _ImplicitlyAnimatedWidgetState_State_SingleTickerProviderStateMixin() {
    },
    InheritedNotifier: function InheritedNotifier() {
    },
    _InheritedNotifierElement: function _InheritedNotifierElement(t0, t1, t2, t3) {
      var _ = this;
      _._inherited_notifier$_dirty = false;
      _._dependents = t0;
      _._slot = _._debugReassembleConfig = _._parent = _._framework$_child = null;
      _.__Element__depth = $;
      _._widget = t1;
      _._owner = null;
      _._lifecycleState = t2;
      _._dependencies = _._inheritedLookup = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
      _.$ti = t3;
    },
    InheritedTheme: function InheritedTheme() {
    },
    MediaQueryData$(accessibleNavigation, alwaysUse24HourFormat, boldText, devicePixelRatio, disableAnimations, displayFeatures, gestureSettings, highContrast, invertColors, navigationMode, padding, platformBrightness, size, systemGestureInsets, textScaleFactor, viewInsets, viewPadding) {
      return new A.MediaQueryData(size, devicePixelRatio, textScaleFactor, platformBrightness, viewInsets, padding, viewPadding, systemGestureInsets, false, accessibleNavigation, invertColors, highContrast, disableAnimations, boldText, navigationMode, gestureSettings, displayFeatures);
    },
    MediaQuery_maybeOf(context) {
      var t1 = context.dependOnInheritedWidgetOfExactType$1$0(type$.MediaQuery);
      return t1 == null ? null : t1.data;
    },
    MediaQueryData: function MediaQueryData(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16) {
      var _ = this;
      _.size = t0;
      _.devicePixelRatio = t1;
      _.textScaleFactor = t2;
      _.platformBrightness = t3;
      _.viewInsets = t4;
      _.padding = t5;
      _.viewPadding = t6;
      _.systemGestureInsets = t7;
      _.alwaysUse24HourFormat = t8;
      _.accessibleNavigation = t9;
      _.invertColors = t10;
      _.highContrast = t11;
      _.disableAnimations = t12;
      _.boldText = t13;
      _.navigationMode = t14;
      _.gestureSettings = t15;
      _.displayFeatures = t16;
    },
    MediaQuery: function MediaQuery(t0, t1, t2) {
      this.data = t0;
      this.child = t1;
      this.key = t2;
    },
    NavigationMode: function NavigationMode(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    _MediaQueryFromWindow: function _MediaQueryFromWindow(t0, t1) {
      this.child = t0;
      this.key = t1;
    },
    _MediaQueryFromWindowState: function _MediaQueryFromWindowState(t0) {
      this._widget = null;
      this._debugLifecycleState = t0;
      this._framework$_element = null;
    },
    _MediaQueryFromWindowState_didChangeMetrics_closure: function _MediaQueryFromWindowState_didChangeMetrics_closure() {
    },
    _MediaQueryFromWindowState_didChangeTextScaleFactor_closure: function _MediaQueryFromWindowState_didChangeTextScaleFactor_closure() {
    },
    _MediaQueryFromWindowState_didChangePlatformBrightness_closure: function _MediaQueryFromWindowState_didChangePlatformBrightness_closure() {
    },
    __MediaQueryFromWindowState_State_WidgetsBindingObserver: function __MediaQueryFromWindowState_State_WidgetsBindingObserver() {
    },
    Notification0: function Notification0() {
    },
    NotificationListener: function NotificationListener(t0, t1, t2, t3) {
      var _ = this;
      _.child = t0;
      _.onNotification = t1;
      _.key = t2;
      _.$ti = t3;
    },
    SafeArea: function SafeArea(t0, t1, t2, t3, t4) {
      var _ = this;
      _.top = t0;
      _.bottom = t1;
      _.minimum = t2;
      _.child = t3;
      _.key = t4;
    },
    SlottedMultiChildRenderObjectWidgetMixin: function SlottedMultiChildRenderObjectWidgetMixin() {
    },
    SlottedContainerRenderObjectMixin: function SlottedContainerRenderObjectMixin() {
    },
    SlottedRenderObjectElement: function SlottedRenderObjectElement(t0, t1, t2, t3) {
      var _ = this;
      _._slotToChild = t0;
      _._slot = _._debugReassembleConfig = _._parent = _._ancestorRenderObjectElement = _._renderObject = _._debugPreviousSlots = null;
      _.__Element__depth = $;
      _._widget = t1;
      _._owner = null;
      _._lifecycleState = t2;
      _._dependencies = _._inheritedLookup = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
      _.$ti = t3;
    },
    DefaultTextStyle$(child, maxLines, overflow, softWrap, style, textAlign, textHeightBehavior, textWidthBasis) {
      return new A.DefaultTextStyle(style, textAlign, true, overflow, maxLines, textWidthBasis, textHeightBehavior, child, null);
    },
    Text$(data) {
      return new A.Text(data, null);
    },
    DefaultTextStyle: function DefaultTextStyle(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.style = t0;
      _.textAlign = t1;
      _.softWrap = t2;
      _.overflow = t3;
      _.maxLines = t4;
      _.textWidthBasis = t5;
      _.textHeightBehavior = t6;
      _.child = t7;
      _.key = t8;
    },
    _NullWidget1: function _NullWidget1(t0) {
      this.key = t0;
    },
    Text: function Text(t0, t1) {
      this.data = t0;
      this.key = t1;
    },
    TickerMode_getNotifier(context) {
      var t1 = context._inheritedLookup,
        ancestor = t1 == null ? null : t1.$index(0, A.createRuntimeType(type$._EffectiveTickerMode));
      if (ancestor == null)
        t1 = null;
      else {
        t1 = ancestor._widget;
        t1.toString;
      }
      type$.nullable__EffectiveTickerMode._as(t1);
      t1 = $.$get$ChangeNotifier__emptyListeners();
      return new A.ValueNotifier(true, t1);
    },
    SingleTickerProviderStateMixin: function SingleTickerProviderStateMixin() {
    },
    TickerProviderStateMixin: function TickerProviderStateMixin() {
    },
    _WidgetTicker: function _WidgetTicker(t0, t1, t2) {
      var _ = this;
      _._creator = t0;
      _._ticker$_future = null;
      _._muted = false;
      _._startTime = null;
      _._onTick = t1;
      _._animationId = null;
      _.debugLabel = t2;
      _.__Ticker__debugCreationStack = $;
    },
    Uint8Buffer$() {
      return new A.Uint8Buffer0(new Uint8Array(0), 0);
    },
    TypedDataBuffer: function TypedDataBuffer() {
    },
    _IntBuffer0: function _IntBuffer0() {
    },
    Uint8Buffer0: function Uint8Buffer0(t0, t1) {
      this._typed_buffer$_buffer = t0;
      this._typed_buffer$_length = t1;
    },
    Matrix4_tryInvert(other) {
      var r = new A.Matrix4(new Float64Array(16));
      if (r.copyInverse$1(other) === 0)
        return null;
      return r;
    },
    Matrix4$zero() {
      return new A.Matrix4(new Float64Array(16));
    },
    Matrix4_Matrix4$identity() {
      var t1 = new A.Matrix4(new Float64Array(16));
      t1.setIdentity$0();
      return t1;
    },
    Matrix4_Matrix4$translationValues(x, y, z) {
      var t1 = new Float64Array(16),
        t2 = new A.Matrix4(t1);
      t2.setIdentity$0();
      t1[14] = z;
      t1[13] = y;
      t1[12] = x;
      return t2;
    },
    Matrix4_Matrix4$diagonal3Values(x, y, z) {
      var t1 = new Float64Array(16);
      t1[15] = 1;
      t1[10] = z;
      t1[5] = y;
      t1[0] = x;
      return new A.Matrix4(t1);
    },
    Quaternion_Quaternion$identity() {
      var t1 = new Float64Array(4);
      t1[3] = 1;
      return new A.Quaternion(t1);
    },
    Matrix3: function Matrix3(t0) {
      this._m3storage = t0;
    },
    Matrix4: function Matrix4(t0) {
      this._m4storage = t0;
    },
    Quaternion: function Quaternion(t0) {
      this._qStorage = t0;
    },
    Vector3: function Vector3(t0) {
      this._v3storage = t0;
    },
    Vector4: function Vector4(t0) {
      this._v4storage = t0;
    },
    Theme_of(context) {
      var theme;
      context.dependOnInheritedWidgetOfExactType$1$0(type$._InheritedTheme);
      context.dependOnInheritedWidgetOfExactType$1$0(type$._LocalizationsScope);
      theme = $.$get$Theme__kFallbackTheme();
      return A.ThemeData_localize(theme, theme.typography.geometryThemeFor$1(B.ScriptCategory_0));
    },
    Localizations_maybeLocaleOf(context) {
      context.dependOnInheritedWidgetOfExactType$1$0(type$._LocalizationsScope);
      return null;
    },
    isBrowserObject(o) {
      return type$.Blob._is(o) || type$.Event._is(o) || type$.KeyRange._is(o) || type$.ImageData._is(o) || type$.Node._is(o) || type$.Window._is(o) || type$.WorkerGlobalScope._is(o);
    },
    printString(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    },
    compute(callback, message, debugLabel, $Q, $R) {
      return A.compute$body(callback, message, debugLabel, $Q, $R, $R);
    },
    compute$body(callback, message, debugLabel, $Q, $R, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue;
      var $async$compute = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(null, $async$compute);
            case 3:
              // returning from await.
              $async$returnValue = callback.call$1(message);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$compute, $async$completer);
    },
    setEquals(a, b) {
      var t1, t2, value;
      if (a == null)
        return b == null;
      if (b == null || a._collection$_length !== b._collection$_length)
        return false;
      if (a === b)
        return true;
      for (t1 = A._LinkedHashSetIterator$(a, a._collection$_modifications), t2 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
        value = t1._collection$_current;
        if (!b.contains$1(0, value == null ? t2._as(value) : value))
          return false;
      }
      return true;
    },
    listEquals0(a, b) {
      var index;
      if (a == null)
        return b == null;
      if (b == null || a.length !== b.length)
        return false;
      if (a === b)
        return true;
      for (index = 0; index < a.length; ++index)
        if (!J.$eq$(a[index], b[index]))
          return false;
      return true;
    },
    mapEquals(a, b) {
      var key,
        t1 = a.get$length(a),
        t2 = b.get$length(b);
      if (t1 !== t2)
        return false;
      if (a === b)
        return true;
      for (t1 = a.get$keys(a), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        key = t1.get$current(t1);
        if (!b.containsKey$1(0, key) || !J.$eq$(b.$index(0, key), a.$index(0, key)))
          return false;
      }
      return true;
    },
    debugInstrumentAction(description, action, $T) {
      return A.debugInstrumentAction$body(description, action, $T, $T);
    },
    debugInstrumentAction$body(description, action, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, t1;
      var $async$debugInstrumentAction = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = action.call$0();
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$debugInstrumentAction, $async$completer);
    },
    debugFormatDouble(value) {
      if (value == null)
        return "null";
      return B.JSNumber_methods.toStringAsFixed$1(value, 1);
    },
    debugPrintThrottled(message, wrapWidth) {
      var messageLines = A._setArrayType(message.split("\n"), type$.JSArray_String);
      $.$get$_debugPrintBuffer().addAll$1(0, messageLines);
      if (!$._debugPrintScheduled)
        A._debugPrintTask();
    },
    _debugPrintTask() {
      var line,
        t1 = $._debugPrintScheduled = false,
        t2 = $.$get$_debugPrintStopwatch();
      if (A.Duration$(t2.get$elapsedMicroseconds(), 0)._duration > 1000000) {
        if (t2._stop == null)
          t2._stop = $.Primitives_timerTicks.call$0();
        t2.reset$0(0);
        $._debugPrintedCharacters = 0;
      }
      while (true) {
        if ($._debugPrintedCharacters < 12288) {
          t2 = $.$get$_debugPrintBuffer();
          t2 = !t2.get$isEmpty(t2);
        } else
          t2 = t1;
        if (!t2)
          break;
        line = $.$get$_debugPrintBuffer().removeFirst$0();
        $._debugPrintedCharacters = $._debugPrintedCharacters + line.length;
        A.printString(line);
      }
      t1 = $.$get$_debugPrintBuffer();
      if (!t1.get$isEmpty(t1)) {
        $._debugPrintScheduled = true;
        $._debugPrintedCharacters = 0;
        A.Timer_Timer(B.Duration_1000000, A.print___debugPrintTask$closure());
        if ($._debugPrintCompleter == null)
          $._debugPrintCompleter = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void);
      } else {
        $.$get$_debugPrintStopwatch().start$0(0);
        t1 = $._debugPrintCompleter;
        if (t1 != null)
          t1.complete$0(0);
        $._debugPrintCompleter = null;
      }
    },
    ElevationOverlay_applyOverlay(context, color, elevation) {
      var t1, t2,
        theme = A.Theme_of(context);
      if (elevation > 0)
        if (theme.applyElevationOverlayColor) {
          t1 = theme.colorScheme;
          if (t1.brightness === B.Brightness_0) {
            t2 = color.value;
            t1 = t1.surface.value;
            t1 = A.Color$fromARGB(255, t2 >>> 16 & 255, t2 >>> 8 & 255, t2 & 255).$eq(0, A.Color$fromARGB(255, t1 >>> 16 & 255, t1 >>> 8 & 255, t1 & 255));
          } else
            t1 = false;
        } else
          t1 = false;
      else
        t1 = false;
      if (t1) {
        t1 = theme.colorScheme.onSurface.value;
        return A.Color_alphaBlend(A.Color$fromARGB(B.JSNumber_methods.round$0(255 * ((4.5 * Math.log(elevation + 1) + 2) / 100)), t1 >>> 16 & 255, t1 >>> 8 & 255, t1 & 255), color);
      }
      return color;
    },
    Gradient_lerp(a, b, t) {
      return null;
    },
    MatrixUtils_getAsTranslation(transform) {
      var values = transform._m4storage;
      if (values[0] === 1 && values[1] === 0 && values[2] === 0 && values[3] === 0 && values[4] === 0 && values[5] === 1 && values[6] === 0 && values[7] === 0 && values[8] === 0 && values[9] === 0 && values[10] === 1 && values[11] === 0 && values[14] === 0 && values[15] === 1)
        return new A.Offset(values[12], values[13]);
      return null;
    },
    MatrixUtils_matrixEquals(a, b) {
      var t1, t2;
      if (a === b)
        return true;
      if (a == null)
        return A.MatrixUtils_isIdentity(b);
      t1 = a._m4storage;
      t2 = b._m4storage;
      return t1[0] === t2[0] && t1[1] === t2[1] && t1[2] === t2[2] && t1[3] === t2[3] && t1[4] === t2[4] && t1[5] === t2[5] && t1[6] === t2[6] && t1[7] === t2[7] && t1[8] === t2[8] && t1[9] === t2[9] && t1[10] === t2[10] && t1[11] === t2[11] && t1[12] === t2[12] && t1[13] === t2[13] && t1[14] === t2[14] && t1[15] === t2[15];
    },
    MatrixUtils_isIdentity(a) {
      var t1 = a._m4storage;
      return t1[0] === 1 && t1[1] === 0 && t1[2] === 0 && t1[3] === 0 && t1[4] === 0 && t1[5] === 1 && t1[6] === 0 && t1[7] === 0 && t1[8] === 0 && t1[9] === 0 && t1[10] === 1 && t1[11] === 0 && t1[12] === 0 && t1[13] === 0 && t1[14] === 0 && t1[15] === 1;
    },
    MatrixUtils_transformPoint(transform, point) {
      var storage = transform._m4storage,
        x = point._dx,
        y = point._dy,
        rx = storage[0] * x + storage[4] * y + storage[12],
        ry = storage[1] * x + storage[5] * y + storage[13],
        rw = storage[3] * x + storage[7] * y + storage[15];
      if (rw === 1)
        return new A.Offset(rx, ry);
      else
        return new A.Offset(rx / rw, ry / rw);
    },
    MatrixUtils__accumulate(m, x, y, first, isAffine) {
      var t1,
        w = isAffine ? 1 : 1 / (m[3] * x + m[7] * y + m[15]),
        tx = (m[0] * x + m[4] * y + m[12]) * w,
        ty = (m[1] * x + m[5] * y + m[13]) * w;
      if (first) {
        t1 = $.$get$MatrixUtils__minMax();
        t1[2] = tx;
        t1[0] = tx;
        t1[3] = ty;
        t1[1] = ty;
      } else {
        t1 = $.$get$MatrixUtils__minMax();
        if (tx < t1[0])
          t1[0] = tx;
        if (ty < t1[1])
          t1[1] = ty;
        if (tx > t1[2])
          t1[2] = tx;
        if (ty > t1[3])
          t1[3] = ty;
      }
    },
    MatrixUtils_transformRect(transform, rect) {
      var isAffine, wx, hx, rx, wy, hy, ry, left, right, $top, bottom, hw, rw, ulx, uly, urx, t3, ury, t4, llx, lly, lrx, lry,
        storage = transform._m4storage,
        x = rect.left,
        y = rect.top,
        t1 = rect.right,
        w = t1 - x,
        t2 = rect.bottom,
        h = t2 - y;
      if (!isFinite(w) || !isFinite(h)) {
        isAffine = storage[3] === 0 && storage[7] === 0 && storage[15] === 1;
        A.MatrixUtils__accumulate(storage, x, y, true, isAffine);
        A.MatrixUtils__accumulate(storage, t1, y, false, isAffine);
        A.MatrixUtils__accumulate(storage, x, t2, false, isAffine);
        A.MatrixUtils__accumulate(storage, t1, t2, false, isAffine);
        t1 = $.$get$MatrixUtils__minMax();
        return new A.Rect(t1[0], t1[1], t1[2], t1[3]);
      }
      t1 = storage[0];
      wx = t1 * w;
      t2 = storage[4];
      hx = t2 * h;
      rx = t1 * x + t2 * y + storage[12];
      t2 = storage[1];
      wy = t2 * w;
      t1 = storage[5];
      hy = t1 * h;
      ry = t2 * x + t1 * y + storage[13];
      t1 = storage[3];
      if (t1 === 0 && storage[7] === 0 && storage[15] === 1) {
        left = rx + wx;
        if (wx < 0)
          right = rx;
        else {
          right = left;
          left = rx;
        }
        if (hx < 0)
          left += hx;
        else
          right += hx;
        $top = ry + wy;
        if (wy < 0)
          bottom = ry;
        else {
          bottom = $top;
          $top = ry;
        }
        if (hy < 0)
          $top += hy;
        else
          bottom += hy;
        return new A.Rect(left, $top, right, bottom);
      } else {
        t2 = storage[7];
        hw = t2 * h;
        rw = t1 * x + t2 * y + storage[15];
        ulx = rx / rw;
        uly = ry / rw;
        t2 = rx + wx;
        t1 = rw + t1 * w;
        urx = t2 / t1;
        t3 = ry + wy;
        ury = t3 / t1;
        t4 = rw + hw;
        llx = (rx + hx) / t4;
        lly = (ry + hy) / t4;
        t1 += hw;
        lrx = (t2 + hx) / t1;
        lry = (t3 + hy) / t1;
        return new A.Rect(A.MatrixUtils__min4(ulx, urx, llx, lrx), A.MatrixUtils__min4(uly, ury, lly, lry), A.MatrixUtils__max4(ulx, urx, llx, lrx), A.MatrixUtils__max4(uly, ury, lly, lry));
      }
    },
    MatrixUtils__min4(a, b, c, d) {
      var e = a < b ? a : b,
        f = c < d ? c : d;
      return e < f ? e : f;
    },
    MatrixUtils__max4(a, b, c, d) {
      var e = a > b ? a : b,
        f = c > d ? c : d;
      return e > f ? e : f;
    },
    MatrixUtils_inverseTransformRect(transform, rect) {
      var transform0;
      if (A.MatrixUtils_isIdentity(transform))
        return rect;
      transform0 = new A.Matrix4(new Float64Array(16));
      transform0.setFrom$1(transform);
      transform0.copyInverse$1(transform0);
      return A.MatrixUtils_transformRect(transform0, rect);
    },
    ChildLayoutHelper_dryLayoutChild(child, constraints) {
      return child.getDryLayout$1(constraints);
    },
    ChildLayoutHelper_layoutChild(child, constraints) {
      var t1;
      child.layout$2$parentUsesSize(0, constraints, true);
      t1 = child._size;
      t1.toString;
      return t1;
    },
    SystemNavigator_pop() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$SystemNavigator_pop = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(B.OptionalMethodChannel_cWd.invokeMethod$1$2("SystemNavigator.pop", null, type$.void), $async$SystemNavigator_pop);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$SystemNavigator_pop, $async$completer);
    },
    createLocalImageConfiguration(context) {
      var t1, t2;
      context.dependOnInheritedWidgetOfExactType$1$0(type$.DefaultAssetBundle);
      t1 = $.$get$rootBundle();
      t2 = A.MediaQuery_maybeOf(context);
      t2 = t2 == null ? null : t2.devicePixelRatio;
      if (t2 == null)
        t2 = 1;
      return new A.ImageConfiguration(t1, t2, A.Localizations_maybeLocaleOf(context), A.Directionality_maybeOf(context), null, A.defaultTargetPlatform());
    },
    main() {
      var t1, t2, _list, index, root, results, t3, i, sw, t4, count, t5, _null = null;
      if ($.WidgetsBinding__instance == null)
        A.WidgetsFlutterBinding$();
      t1 = $.WidgetsBinding__instance;
      t1.toString;
      t2 = $.$get$window().platformDispatcher;
      t2._onPointerDataPacket = null;
      t2._onPointerDataPacketZone = $.Zone__current;
      _list = J.JSArray_JSArray$allocateGrowable(9, type$.Widget);
      for (index = 0; index < 9; ++index)
        _list[index] = new A.ListTile(new A.CircleAvatar(A.Text$(B.JSInt_methods.toString$0(index)), _null), A.Text$("Content " + index), _null);
      root = new A._MediaQueryFromWindow(new A.Directionality(B.TextDirection_1, new A.Material(new A.Column(B.Axis_1, B.MainAxisAlignment_0, B.MainAxisSize_1, B.CrossAxisAlignment_2, _null, B.VerticalDirection_1, _null, _list, _null), _null), _null), _null);
      A.print("starting....");
      results = [];
      for (t2 = type$.GlobalObjectKey_State_StatefulWidget, t3 = type$.RenderObjectToWidgetAdapter_RenderBox, i = 0; i < 10;) {
        sw = new A.Stopwatch();
        $.$get$Stopwatch__frequency();
        t4 = $.Primitives_timerTicks.call$0();
        sw._start = t4 - 0;
        sw._stop = null;
        for (count = 0; count < 1000; ++count) {
          t4 = A._lateReadCheck(t1.RendererBinding___RendererBinding__pipelineOwner, "_pipelineOwner")._rootNode;
          t4.toString;
          t5 = t1.WidgetsBinding__buildOwner;
          t5.toString;
          new A.RenderObjectToWidgetAdapter(root, t4, new A.GlobalObjectKey(t4, t2), t3).attachToRenderTree$2(t5, _null);
        }
        if (sw._stop == null)
          sw._stop = $.Primitives_timerTicks.call$0();
        ++i;
        A.printString("" + i + " / 10");
        results.push(sw.get$elapsedMilliseconds());
      }
      A.print(results);
    },
    main0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$main0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.webOnlyInitializePlatform(), $async$main0);
            case 2:
              // returning from await.
              A.main();
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$main0, $async$completer);
    }
  },
  J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          A.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = A.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return B.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return B.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: B.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return B.UnknownJavaScriptObject_methods;
      }
      return B.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$allocateGrowable($length, $E) {
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$markFixed(allocation, $E) {
      return J.JSArray_markFixedList(A._setArrayType(allocation, $E._eval$1("JSArray<0>")));
    },
    JSArray_markFixedList(list) {
      list.fixed$length = Array;
      return list;
    },
    JSArray_markUnmodifiableList(list) {
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    JSArray__compareAny(a, b) {
      return J.compareTo$1$ns(a, b);
    },
    JSString__isWhitespace(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = B.JSString_methods._codeUnitAt$1(string, index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace(string, index) {
      var index0, codeUnit;
      for (; index > 0; index = index0) {
        index0 = index - 1;
        codeUnit = B.JSString_methods.codeUnitAt$1(string, index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ansx(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$n(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$z(receiver) {
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    set$length$asx(receiver, value) {
      return J.getInterceptor$asx(receiver).set$length(receiver, value);
    },
    get$All$x(receiver) {
      return J.getInterceptor$x(receiver).get$All(receiver);
    },
    get$Alphabetic$x(receiver) {
      return J.getInterceptor$x(receiver).get$Alphabetic(receiver);
    },
    get$Bevel$x(receiver) {
      return J.getInterceptor$x(receiver).get$Bevel(receiver);
    },
    get$BlendMode$x(receiver) {
      return J.getInterceptor$x(receiver).get$BlendMode(receiver);
    },
    get$BlurStyle$x(receiver) {
      return J.getInterceptor$x(receiver).get$BlurStyle(receiver);
    },
    get$Bold$x(receiver) {
      return J.getInterceptor$x(receiver).get$Bold(receiver);
    },
    get$Butt$x(receiver) {
      return J.getInterceptor$x(receiver).get$Butt(receiver);
    },
    get$Center$x(receiver) {
      return J.getInterceptor$x(receiver).get$Center(receiver);
    },
    get$Clamp$x(receiver) {
      return J.getInterceptor$x(receiver).get$Clamp(receiver);
    },
    get$Clear$x(receiver) {
      return J.getInterceptor$x(receiver).get$Clear(receiver);
    },
    get$ClipOp$x(receiver) {
      return J.getInterceptor$x(receiver).get$ClipOp(receiver);
    },
    get$Color$x(receiver) {
      return J.getInterceptor$x(receiver).get$Color(receiver);
    },
    get$ColorBurn$x(receiver) {
      return J.getInterceptor$x(receiver).get$ColorBurn(receiver);
    },
    get$ColorDodge$x(receiver) {
      return J.getInterceptor$x(receiver).get$ColorDodge(receiver);
    },
    get$Darken$x(receiver) {
      return J.getInterceptor$x(receiver).get$Darken(receiver);
    },
    get$Decal$x(receiver) {
      return J.getInterceptor$x(receiver).get$Decal(receiver);
    },
    get$Difference$x(receiver) {
      return J.getInterceptor$x(receiver).get$Difference(receiver);
    },
    get$DisableAll$x(receiver) {
      return J.getInterceptor$x(receiver).get$DisableAll(receiver);
    },
    get$DisableFirstAscent$x(receiver) {
      return J.getInterceptor$x(receiver).get$DisableFirstAscent(receiver);
    },
    get$DisableLastDescent$x(receiver) {
      return J.getInterceptor$x(receiver).get$DisableLastDescent(receiver);
    },
    get$Dst$x(receiver) {
      return J.getInterceptor$x(receiver).get$Dst(receiver);
    },
    get$DstATop$x(receiver) {
      return J.getInterceptor$x(receiver).get$DstATop(receiver);
    },
    get$DstIn$x(receiver) {
      return J.getInterceptor$x(receiver).get$DstIn(receiver);
    },
    get$DstOut$x(receiver) {
      return J.getInterceptor$x(receiver).get$DstOut(receiver);
    },
    get$DstOver$x(receiver) {
      return J.getInterceptor$x(receiver).get$DstOver(receiver);
    },
    get$End$x(receiver) {
      return J.getInterceptor$x(receiver).get$End(receiver);
    },
    get$EvenOdd$x(receiver) {
      return J.getInterceptor$x(receiver).get$EvenOdd(receiver);
    },
    get$Exclusion$x(receiver) {
      return J.getInterceptor$x(receiver).get$Exclusion(receiver);
    },
    get$ExtraBlack$x(receiver) {
      return J.getInterceptor$x(receiver).get$ExtraBlack(receiver);
    },
    get$ExtraBold$x(receiver) {
      return J.getInterceptor$x(receiver).get$ExtraBold(receiver);
    },
    get$ExtraLight$x(receiver) {
      return J.getInterceptor$x(receiver).get$ExtraLight(receiver);
    },
    get$Fill$x(receiver) {
      return J.getInterceptor$x(receiver).get$Fill(receiver);
    },
    get$FillType$x(receiver) {
      return J.getInterceptor$x(receiver).get$FillType(receiver);
    },
    get$FontWeight$x(receiver) {
      return J.getInterceptor$x(receiver).get$FontWeight(receiver);
    },
    get$HardLight$x(receiver) {
      return J.getInterceptor$x(receiver).get$HardLight(receiver);
    },
    get$Hue$x(receiver) {
      return J.getInterceptor$x(receiver).get$Hue(receiver);
    },
    get$Ideographic$x(receiver) {
      return J.getInterceptor$x(receiver).get$Ideographic(receiver);
    },
    get$IncludeLineSpacingBottom$x(receiver) {
      return J.getInterceptor$x(receiver).get$IncludeLineSpacingBottom(receiver);
    },
    get$IncludeLineSpacingMiddle$x(receiver) {
      return J.getInterceptor$x(receiver).get$IncludeLineSpacingMiddle(receiver);
    },
    get$IncludeLineSpacingTop$x(receiver) {
      return J.getInterceptor$x(receiver).get$IncludeLineSpacingTop(receiver);
    },
    get$Inner$x(receiver) {
      return J.getInterceptor$x(receiver).get$Inner(receiver);
    },
    get$Intersect$x(receiver) {
      return J.getInterceptor$x(receiver).get$Intersect(receiver);
    },
    get$Justify$x(receiver) {
      return J.getInterceptor$x(receiver).get$Justify(receiver);
    },
    get$LTR$x(receiver) {
      return J.getInterceptor$x(receiver).get$LTR(receiver);
    },
    get$Left$x(receiver) {
      return J.getInterceptor$x(receiver).get$Left(receiver);
    },
    get$Light$x(receiver) {
      return J.getInterceptor$x(receiver).get$Light(receiver);
    },
    get$Lighten$x(receiver) {
      return J.getInterceptor$x(receiver).get$Lighten(receiver);
    },
    get$LineThroughDecoration$x(receiver) {
      return J.getInterceptor$x(receiver).get$LineThroughDecoration(receiver);
    },
    get$Luminosity$x(receiver) {
      return J.getInterceptor$x(receiver).get$Luminosity(receiver);
    },
    get$MaskFilter$x(receiver) {
      return J.getInterceptor$x(receiver).get$MaskFilter(receiver);
    },
    get$Max$x(receiver) {
      return J.getInterceptor$x(receiver).get$Max(receiver);
    },
    get$Medium$x(receiver) {
      return J.getInterceptor$x(receiver).get$Medium(receiver);
    },
    get$Mirror$x(receiver) {
      return J.getInterceptor$x(receiver).get$Mirror(receiver);
    },
    get$Miter$x(receiver) {
      return J.getInterceptor$x(receiver).get$Miter(receiver);
    },
    get$Modulate$x(receiver) {
      return J.getInterceptor$x(receiver).get$Modulate(receiver);
    },
    get$Multiply$x(receiver) {
      return J.getInterceptor$x(receiver).get$Multiply(receiver);
    },
    get$NoDecoration$x(receiver) {
      return J.getInterceptor$x(receiver).get$NoDecoration(receiver);
    },
    get$Normal$x(receiver) {
      return J.getInterceptor$x(receiver).get$Normal(receiver);
    },
    get$Outer$x(receiver) {
      return J.getInterceptor$x(receiver).get$Outer(receiver);
    },
    get$Overlay$x(receiver) {
      return J.getInterceptor$x(receiver).get$Overlay(receiver);
    },
    get$OverlineDecoration$x(receiver) {
      return J.getInterceptor$x(receiver).get$OverlineDecoration(receiver);
    },
    get$PaintStyle$x(receiver) {
      return J.getInterceptor$x(receiver).get$PaintStyle(receiver);
    },
    get$ParagraphBuilder$x(receiver) {
      return J.getInterceptor$x(receiver).get$ParagraphBuilder(receiver);
    },
    get$Path$x(receiver) {
      return J.getInterceptor$x(receiver).get$Path(receiver);
    },
    get$Plus$x(receiver) {
      return J.getInterceptor$x(receiver).get$Plus(receiver);
    },
    get$RTL$x(receiver) {
      return J.getInterceptor$x(receiver).get$RTL(receiver);
    },
    get$RectHeightStyle$x(receiver) {
      return J.getInterceptor$x(receiver).get$RectHeightStyle(receiver);
    },
    get$RectWidthStyle$x(receiver) {
      return J.getInterceptor$x(receiver).get$RectWidthStyle(receiver);
    },
    get$Repeat$x(receiver) {
      return J.getInterceptor$x(receiver).get$Repeat(receiver);
    },
    get$Right$x(receiver) {
      return J.getInterceptor$x(receiver).get$Right(receiver);
    },
    get$Round$x(receiver) {
      return J.getInterceptor$x(receiver).get$Round(receiver);
    },
    get$Saturation$x(receiver) {
      return J.getInterceptor$x(receiver).get$Saturation(receiver);
    },
    get$Screen$x(receiver) {
      return J.getInterceptor$x(receiver).get$Screen(receiver);
    },
    get$SemiBold$x(receiver) {
      return J.getInterceptor$x(receiver).get$SemiBold(receiver);
    },
    get$Shader$x(receiver) {
      return J.getInterceptor$x(receiver).get$Shader(receiver);
    },
    get$SoftLight$x(receiver) {
      return J.getInterceptor$x(receiver).get$SoftLight(receiver);
    },
    get$Solid$x(receiver) {
      return J.getInterceptor$x(receiver).get$Solid(receiver);
    },
    get$Square$x(receiver) {
      return J.getInterceptor$x(receiver).get$Square(receiver);
    },
    get$Src$x(receiver) {
      return J.getInterceptor$x(receiver).get$Src(receiver);
    },
    get$SrcATop$x(receiver) {
      return J.getInterceptor$x(receiver).get$SrcATop(receiver);
    },
    get$SrcIn$x(receiver) {
      return J.getInterceptor$x(receiver).get$SrcIn(receiver);
    },
    get$SrcOut$x(receiver) {
      return J.getInterceptor$x(receiver).get$SrcOut(receiver);
    },
    get$SrcOver$x(receiver) {
      return J.getInterceptor$x(receiver).get$SrcOver(receiver);
    },
    get$Start$x(receiver) {
      return J.getInterceptor$x(receiver).get$Start(receiver);
    },
    get$Stroke$x(receiver) {
      return J.getInterceptor$x(receiver).get$Stroke(receiver);
    },
    get$StrokeCap$x(receiver) {
      return J.getInterceptor$x(receiver).get$StrokeCap(receiver);
    },
    get$StrokeJoin$x(receiver) {
      return J.getInterceptor$x(receiver).get$StrokeJoin(receiver);
    },
    get$Strut$x(receiver) {
      return J.getInterceptor$x(receiver).get$Strut(receiver);
    },
    get$TextAlign$x(receiver) {
      return J.getInterceptor$x(receiver).get$TextAlign(receiver);
    },
    get$TextBaseline$x(receiver) {
      return J.getInterceptor$x(receiver).get$TextBaseline(receiver);
    },
    get$TextDirection$x(receiver) {
      return J.getInterceptor$x(receiver).get$TextDirection(receiver);
    },
    get$TextHeightBehavior$x(receiver) {
      return J.getInterceptor$x(receiver).get$TextHeightBehavior(receiver);
    },
    get$Thin$x(receiver) {
      return J.getInterceptor$x(receiver).get$Thin(receiver);
    },
    get$Tight$x(receiver) {
      return J.getInterceptor$x(receiver).get$Tight(receiver);
    },
    get$TileMode$x(receiver) {
      return J.getInterceptor$x(receiver).get$TileMode(receiver);
    },
    get$Typeface$x(receiver) {
      return J.getInterceptor$x(receiver).get$Typeface(receiver);
    },
    get$TypefaceFontProvider$x(receiver) {
      return J.getInterceptor$x(receiver).get$TypefaceFontProvider(receiver);
    },
    get$UnderlineDecoration$x(receiver) {
      return J.getInterceptor$x(receiver).get$UnderlineDecoration(receiver);
    },
    get$Winding$x(receiver) {
      return J.getInterceptor$x(receiver).get$Winding(receiver);
    },
    get$Xor$x(receiver) {
      return J.getInterceptor$x(receiver).get$Xor(receiver);
    },
    get$add$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$add(receiver);
    },
    get$attributes$x(receiver) {
      return J.getInterceptor$x(receiver).get$attributes(receiver);
    },
    get$baseline$z(receiver) {
      return J.getInterceptor$z(receiver).get$baseline(receiver);
    },
    get$canvasKit$x(receiver) {
      return J.getInterceptor$x(receiver).get$canvasKit(receiver);
    },
    get$canvasKitBaseUrl$x(receiver) {
      return J.getInterceptor$x(receiver).get$canvasKitBaseUrl(receiver);
    },
    get$canvasKitForceCpuOnly$x(receiver) {
      return J.getInterceptor$x(receiver).get$canvasKitForceCpuOnly(receiver);
    },
    get$canvasKitMaximumSurfaces$x(receiver) {
      return J.getInterceptor$x(receiver).get$canvasKitMaximumSurfaces(receiver);
    },
    get$children$x(receiver) {
      return J.getInterceptor$x(receiver).get$children(receiver);
    },
    get$debugShowSemanticsNodes$x(receiver) {
      return J.getInterceptor$x(receiver).get$debugShowSemanticsNodes(receiver);
    },
    get$first$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$keys$x(receiver) {
      return J.getInterceptor$x(receiver).get$keys(receiver);
    },
    get$length$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$message$z(receiver) {
      return J.getInterceptor$z(receiver).get$message(receiver);
    },
    get$name$x(receiver) {
      return J.getInterceptor$x(receiver).get$name(receiver);
    },
    get$offset$x(receiver) {
      return J.getInterceptor$x(receiver).get$offset(receiver);
    },
    get$runtimeType$(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    get$target$x(receiver) {
      return J.getInterceptor$x(receiver).get$target(receiver);
    },
    get$value$x(receiver) {
      return J.getInterceptor$x(receiver).get$value(receiver);
    },
    $add$ansx(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ansx(receiver).$add(receiver, a0);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax(receiver, a0, a1) {
      if (typeof a0 === "number")
        if ((receiver.constructor == Array || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
          return receiver[a0] = a1;
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    $mul$ns(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver * a0;
      return J.getInterceptor$ns(receiver).$mul(receiver, a0);
    },
    $sub$n(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver - a0;
      return J.getInterceptor$n(receiver).$sub(receiver, a0);
    },
    GetWebGLContext$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).GetWebGLContext$2(receiver, a0, a1);
    },
    Make$0$x(receiver) {
      return J.getInterceptor$x(receiver).Make$0(receiver);
    },
    MakeBlur$3$x(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).MakeBlur$3(receiver, a0, a1, a2);
    },
    MakeFreeTypeFaceFromData$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).MakeFreeTypeFaceFromData$1(receiver, a0);
    },
    MakeFromCmds$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).MakeFromCmds$1(receiver, a0);
    },
    MakeFromFontProvider$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).MakeFromFontProvider$2(receiver, a0, a1);
    },
    MakeGrContext$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).MakeGrContext$1(receiver, a0);
    },
    MakeLinearGradient$6$x(receiver, a0, a1, a2, a3, a4, a5) {
      return J.getInterceptor$x(receiver).MakeLinearGradient$6(receiver, a0, a1, a2, a3, a4, a5);
    },
    MakeOnScreenGLSurface$4$x(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$x(receiver).MakeOnScreenGLSurface$4(receiver, a0, a1, a2, a3);
    },
    MakeSWCanvasSurface$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).MakeSWCanvasSurface$1(receiver, a0);
    },
    ParagraphStyle$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).ParagraphStyle$1(receiver, a0);
    },
    TextStyle$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).TextStyle$1(receiver, a0);
    },
    _replaceChild$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
    },
    add$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    addEventListener$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).addEventListener$2(receiver, a0, a1);
    },
    addEventListener$3$x(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
    },
    addOval$3$x(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).addOval$3(receiver, a0, a1, a2);
    },
    addPopStateListener$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).addPopStateListener$1(receiver, a0);
    },
    addRRect$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).addRRect$2(receiver, a0, a1);
    },
    addRect$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).addRect$1(receiver, a0);
    },
    addText$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).addText$1(receiver, a0);
    },
    beginRecording$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).beginRecording$1(receiver, a0);
    },
    build$0$x(receiver) {
      return J.getInterceptor$x(receiver).build$0(receiver);
    },
    cancel$0$z(receiver) {
      return J.getInterceptor$z(receiver).cancel$0(receiver);
    },
    cast$1$0$ax(receiver, $T1) {
      return J.getInterceptor$ax(receiver).cast$1$0(receiver, $T1);
    },
    clamp$2$n(receiver, a0, a1) {
      return J.getInterceptor$n(receiver).clamp$2(receiver, a0, a1);
    },
    clear$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).clear$1(receiver, a0);
    },
    clipPath$3$x(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).clipPath$3(receiver, a0, a1, a2);
    },
    clipRRect$3$x(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).clipRRect$3(receiver, a0, a1, a2);
    },
    clipRect$3$x(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).clipRect$3(receiver, a0, a1, a2);
    },
    close$0$x(receiver) {
      return J.getInterceptor$x(receiver).close$0(receiver);
    },
    compareTo$1$ns(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    complete$0$z(receiver) {
      return J.getInterceptor$z(receiver).complete$0(receiver);
    },
    computeTonalColors$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).computeTonalColors$1(receiver, a0);
    },
    concat$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).concat$1(receiver, a0);
    },
    contains$1$asx(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    contains$2$asx(receiver, a0, a1) {
      return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
    },
    containsKey$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).containsKey$1(receiver, a0);
    },
    copy$0$x(receiver) {
      return J.getInterceptor$x(receiver).copy$0(receiver);
    },
    copy$1$range$x(receiver, a0) {
      return J.getInterceptor$x(receiver).copy$1$range(receiver, a0);
    },
    delete$0$x(receiver) {
      return J.getInterceptor$x(receiver).delete$0(receiver);
    },
    didExceedMaxLines$0$x(receiver) {
      return J.getInterceptor$x(receiver).didExceedMaxLines$0(receiver);
    },
    dispose$0$x(receiver) {
      return J.getInterceptor$x(receiver).dispose$0(receiver);
    },
    drawCircle$4$x(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$x(receiver).drawCircle$4(receiver, a0, a1, a2, a3);
    },
    drawDRRect$3$x(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).drawDRRect$3(receiver, a0, a1, a2);
    },
    drawPaint$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).drawPaint$1(receiver, a0);
    },
    drawParagraph$3$x(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).drawParagraph$3(receiver, a0, a1, a2);
    },
    drawPath$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).drawPath$2(receiver, a0, a1);
    },
    drawPicture$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).drawPicture$1(receiver, a0);
    },
    drawRRect$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).drawRRect$2(receiver, a0, a1);
    },
    drawRect$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).drawRect$2(receiver, a0, a1);
    },
    drawShadow$7$x(receiver, a0, a1, a2, a3, a4, a5, a6) {
      return J.getInterceptor$x(receiver).drawShadow$7(receiver, a0, a1, a2, a3, a4, a5, a6);
    },
    elementAt$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    flush$0$x(receiver) {
      return J.getInterceptor$x(receiver).flush$0(receiver);
    },
    focus$0$x(receiver) {
      return J.getInterceptor$x(receiver).focus$0(receiver);
    },
    forEach$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
    },
    getAlphabeticBaseline$0$x(receiver) {
      return J.getInterceptor$x(receiver).getAlphabeticBaseline$0(receiver);
    },
    getBounds$0$x(receiver) {
      return J.getInterceptor$x(receiver).getBounds$0(receiver);
    },
    getCanvas$0$x(receiver) {
      return J.getInterceptor$x(receiver).getCanvas$0(receiver);
    },
    getComputedStyle$0$x(receiver) {
      return J.getInterceptor$x(receiver).getComputedStyle$0(receiver);
    },
    getGlyphBounds$3$x(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).getGlyphBounds$3(receiver, a0, a1, a2);
    },
    getGlyphIDs$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).getGlyphIDs$1(receiver, a0);
    },
    getGlyphPositionAtCoordinate$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).getGlyphPositionAtCoordinate$2(receiver, a0, a1);
    },
    getH5vccSkSurface$0$x(receiver) {
      return J.getInterceptor$x(receiver).getH5vccSkSurface$0(receiver);
    },
    getHeight$0$x(receiver) {
      return J.getInterceptor$x(receiver).getHeight$0(receiver);
    },
    getIdeographicBaseline$0$x(receiver) {
      return J.getInterceptor$x(receiver).getIdeographicBaseline$0(receiver);
    },
    getLongestLine$0$x(receiver) {
      return J.getInterceptor$x(receiver).getLongestLine$0(receiver);
    },
    getMaxIntrinsicWidth$0$x(receiver) {
      return J.getInterceptor$x(receiver).getMaxIntrinsicWidth$0(receiver);
    },
    getMaxWidth$0$x(receiver) {
      return J.getInterceptor$x(receiver).getMaxWidth$0(receiver);
    },
    getMinIntrinsicWidth$0$x(receiver) {
      return J.getInterceptor$x(receiver).getMinIntrinsicWidth$0(receiver);
    },
    getPath$0$x(receiver) {
      return J.getInterceptor$x(receiver).getPath$0(receiver);
    },
    getRectsForPlaceholders$0$x(receiver) {
      return J.getInterceptor$x(receiver).getRectsForPlaceholders$0(receiver);
    },
    getRectsForRange$4$x(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$x(receiver).getRectsForRange$4(receiver, a0, a1, a2, a3);
    },
    getState$0$x(receiver) {
      return J.getInterceptor$x(receiver).getState$0(receiver);
    },
    go$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).go$1(receiver, a0);
    },
    isDeleted$0$x(receiver) {
      return J.getInterceptor$x(receiver).isDeleted$0(receiver);
    },
    isIdentity$0$z(receiver) {
      return J.getInterceptor$z(receiver).isIdentity$0(receiver);
    },
    join$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).join$0(receiver);
    },
    join$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).join$1(receiver, a0);
    },
    layout$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).layout$1(receiver, a0);
    },
    lineTo$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).lineTo$2(receiver, a0, a1);
    },
    map$1$1$ax(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    moveTo$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).moveTo$2(receiver, a0, a1);
    },
    noSuchMethod$1$(receiver, a0) {
      return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
    },
    pop$0$x(receiver) {
      return J.getInterceptor$x(receiver).pop$0(receiver);
    },
    pushPaintStyle$3$x(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).pushPaintStyle$3(receiver, a0, a1, a2);
    },
    pushState$3$x(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).pushState$3(receiver, a0, a1, a2);
    },
    pushStyle$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).pushStyle$1(receiver, a0);
    },
    putIfAbsent$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).putIfAbsent$2(receiver, a0, a1);
    },
    register$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).register$2(receiver, a0, a1);
    },
    registerFont$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).registerFont$2(receiver, a0, a1);
    },
    releaseResourcesAndAbandonContext$0$x(receiver) {
      return J.getInterceptor$x(receiver).releaseResourcesAndAbandonContext$0(receiver);
    },
    remove$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).remove$0(receiver);
    },
    remove$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
    },
    removeEventListener$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).removeEventListener$2(receiver, a0, a1);
    },
    removeEventListener$3$x(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
    },
    replaceState$3$x(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).replaceState$3(receiver, a0, a1, a2);
    },
    replaceWith$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
    },
    reset$0$x(receiver) {
      return J.getInterceptor$x(receiver).reset$0(receiver);
    },
    restore$0$x(receiver) {
      return J.getInterceptor$x(receiver).restore$0(receiver);
    },
    restoreToCount$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).restoreToCount$1(receiver, a0);
    },
    save$0$x(receiver) {
      return J.getInterceptor$x(receiver).save$0(receiver);
    },
    saveLayer$4$x(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$x(receiver).saveLayer$4(receiver, a0, a1, a2, a3);
    },
    select$0$x(receiver) {
      return J.getInterceptor$x(receiver).select$0(receiver);
    },
    setBlendMode$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).setBlendMode$1(receiver, a0);
    },
    setColorInt$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).setColorInt$1(receiver, a0);
    },
    setFillType$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).setFillType$1(receiver, a0);
    },
    setMaskFilter$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).setMaskFilter$1(receiver, a0);
    },
    setRange$4$ax(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
    },
    setResourceCacheLimitBytes$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).setResourceCacheLimitBytes$1(receiver, a0);
    },
    setShader$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).setShader$1(receiver, a0);
    },
    setStrokeWidth$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).setStrokeWidth$1(receiver, a0);
    },
    setStyle$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).setStyle$1(receiver, a0);
    },
    skip$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    sort$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
    },
    split$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).split$1(receiver, a0);
    },
    submit$0$z(receiver) {
      return J.getInterceptor$z(receiver).submit$0(receiver);
    },
    take$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).take$1(receiver, a0);
    },
    then$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).then$1(receiver, a0);
    },
    then$1$1$x(receiver, a0, $T1) {
      return J.getInterceptor$x(receiver).then$1$1(receiver, a0, $T1);
    },
    then$1$2$onError$x(receiver, a0, a1, $T1) {
      return J.getInterceptor$x(receiver).then$1$2$onError(receiver, a0, a1, $T1);
    },
    toCmds$0$x(receiver) {
      return J.getInterceptor$x(receiver).toCmds$0(receiver);
    },
    toLowerCase$0$s(receiver) {
      return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    toTypedArray$0$x(receiver) {
      return J.getInterceptor$x(receiver).toTypedArray$0(receiver);
    },
    transform$9$x(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8) {
      return J.getInterceptor$x(receiver).transform$9(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8);
    },
    translate$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).translate$2(receiver, a0, a1);
    },
    trimLeft$0$s(receiver) {
      return J.getInterceptor$s(receiver).trimLeft$0(receiver);
    },
    trimRight$0$s(receiver) {
      return J.getInterceptor$s(receiver).trimRight$0(receiver);
    },
    unlock$0$x(receiver) {
      return J.getInterceptor$x(receiver).unlock$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    LegacyJavaScriptObject: function LegacyJavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1) {
      var _ = this;
      _._iterable = t0;
      _.__interceptors$_length = t1;
      _._index = 0;
      _.__interceptors$_current = null;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  B = {};
  var holders = [A, J, B];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  A.AlarmClock.prototype = {
    set$datetime(value) {
      var now, t1, t2, _this = this;
      if (J.$eq$(value, _this._datetime))
        return;
      if (value == null) {
        _this._cancelTimer$0();
        _this._datetime = null;
        return;
      }
      now = _this._timestampFunction.call$0();
      t1 = value._core$_value;
      t2 = now._core$_value;
      if (t1 < t2) {
        _this._cancelTimer$0();
        _this._datetime = value;
        return;
      }
      if (_this.__engine$_timer == null)
        _this.__engine$_timer = A.Timer_Timer(A.Duration$(0, t1 - t2), _this.get$_timerDidFire());
      else if (_this._datetime._core$_value > t1) {
        _this._cancelTimer$0();
        _this.__engine$_timer = A.Timer_Timer(A.Duration$(0, t1 - t2), _this.get$_timerDidFire());
      }
      _this._datetime = value;
    },
    _cancelTimer$0() {
      var t1 = this.__engine$_timer;
      if (t1 != null)
        t1.cancel$0(0);
      this.__engine$_timer = null;
    },
    _timerDidFire$0() {
      var _this = this,
        now = _this._timestampFunction.call$0(),
        t1 = _this._datetime,
        t2 = now._core$_value;
      t1 = t1._core$_value;
      if (t2 >= t1) {
        _this.__engine$_timer = null;
        t1 = _this.callback;
        if (t1 != null)
          t1.call$0();
      } else
        _this.__engine$_timer = A.Timer_Timer(A.Duration$(0, t1 - t2), _this.get$_timerDidFire());
    }
  };
  A.AssetManager.prototype = {
    get$_baseUrl() {
      var t1 = new A.WhereTypeIterable(new A._FrozenElementList(window.document.querySelectorAll("meta"), type$._FrozenElementList_Element), type$.WhereTypeIterable_nullable_MetaElement).firstWhere$2$orElse(0, new A.AssetManager__baseUrl_closure(), new A.AssetManager__baseUrl_closure0());
      return t1 == null ? null : t1.content;
    },
    getAssetUrl$1(asset) {
      var t1;
      if (A.Uri_parse(asset).get$hasScheme())
        return A._Uri__uriEncode(B.List_gnE, asset, B.C_Utf8Codec, false);
      t1 = this.get$_baseUrl();
      if (t1 == null)
        t1 = "";
      return A._Uri__uriEncode(B.List_gnE, t1 + ("assets/" + asset), B.C_Utf8Codec, false);
    },
    load$1(_, asset) {
      return this.load$body$AssetManager(0, asset);
    },
    load$body$AssetManager(_, asset) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.ByteData),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, request, response, e, target, t1, exception, url, $async$exception;
      var $async$load$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              url = $async$self.getAssetUrl$1(asset);
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(A.HttpRequest_request(url, "arraybuffer"), $async$load$1);
            case 7:
              // returning from await.
              request = $async$result;
              response = type$.ByteBuffer._as(A._convertNativeToDart_XHR_Response(request.response));
              t1 = A.NativeByteData_NativeByteData$view(response, 0, null);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (type$.ProgressEvent._is(t1)) {
                e = t1;
                target = A._convertNativeToDart_EventTarget(e.target);
                if (type$.HttpRequest._is(target)) {
                  if (target.status === 404 && asset === "AssetManifest.json") {
                    $.$get$printWarning().call$1("Asset manifest does not exist at `" + A.S(url) + "` \u2013 ignoring.");
                    $async$returnValue = A.NativeByteData_NativeByteData$view(new Uint8Array(A._ensureNativeList(B.C_Utf8Codec.get$encoder().convert$1("{}"))).buffer, 0, null);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  t1 = target.status;
                  t1.toString;
                  throw A.wrapException(new A.AssetManagerException(url, t1));
                }
                $.$get$printWarning().call$1("Caught ProgressEvent with target: " + A.S(target));
                throw $async$exception;
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$load$1, $async$completer);
    }
  };
  A.AssetManager__baseUrl_closure.prototype = {
    call$1(e) {
      return J.$eq$(J.get$name$x(e), "assetBase");
    },
    $signature: 62
  };
  A.AssetManager__baseUrl_closure0.prototype = {
    call$0() {
      return null;
    },
    $signature: 10
  };
  A.AssetManagerException.prototype = {
    toString$0(_) {
      return 'Failed to load asset at "' + this.url + '" (' + this.httpStatus + ")";
    },
    $isException: 1
  };
  A.BrowserEngine.prototype = {
    toString$0(_) {
      return "BrowserEngine." + this._name;
    }
  };
  A.OperatingSystem.prototype = {
    toString$0(_) {
      return "OperatingSystem." + this._name;
    }
  };
  A.CanvasPool.prototype = {
    get$context(_) {
      var t1,
        ctx = this.__engine$_context;
      if (ctx == null) {
        this._createCanvas$0();
        t1 = this.__engine$_context;
        t1.toString;
        ctx = t1;
      }
      return ctx;
    },
    get$contextHandle() {
      if (this.__engine$_canvas == null)
        this._createCanvas$0();
      var t1 = this._contextHandle;
      t1.toString;
      return t1;
    },
    _createCanvas$0() {
      var canvas0, requiresClearRect, t2, t3, t4, t5, exception, ctx, _this = this,
        reused = false,
        canvas = null,
        t1 = _this.__engine$_canvas;
      if (t1 != null) {
        t1.width = 0;
        _this.__engine$_canvas.height = 0;
        _this.__engine$_canvas = null;
      }
      t1 = _this._reusablePool;
      if (t1 != null && t1.length !== 0) {
        t1.toString;
        canvas0 = B.JSArray_methods.removeAt$1(t1, 0);
        _this.__engine$_canvas = canvas0;
        canvas = canvas0;
        reused = true;
        requiresClearRect = true;
      } else {
        t1 = _this._widthInBitmapPixels;
        t2 = A.EnginePlatformDispatcher_browserDevicePixelRatio();
        t3 = _this._heightInBitmapPixels;
        t4 = A.EnginePlatformDispatcher_browserDevicePixelRatio();
        canvas = _this._allocCanvas$2(t1, t3);
        t5 = canvas;
        _this.__engine$_canvas = t5;
        if (t5 == null) {
          A.reduceCanvasMemoryUsage();
          canvas = _this._allocCanvas$2(t1, t3);
        }
        t5 = canvas.style;
        t5.position = "absolute";
        t1 = A.S(t1 / t2) + "px";
        t5.width = t1;
        t1 = A.S(t3 / t4) + "px";
        t5.height = t1;
        requiresClearRect = false;
      }
      t1 = _this._rootElement;
      t2 = t1.lastChild;
      t3 = canvas;
      if (t2 == null ? t3 != null : t2 !== t3)
        t1.appendChild(canvas);
      try {
        if (reused)
          canvas.style.removeProperty("z-index");
        _this.__engine$_context = canvas.getContext("2d");
      } catch (exception) {
      }
      t1 = _this.__engine$_context;
      if (t1 == null) {
        A.reduceCanvasMemoryUsage();
        t1 = _this.__engine$_context = canvas.getContext("2d");
      }
      t2 = _this._density;
      _this._contextHandle = new A.ContextStateHandle(t1, _this, t2, B.BlendMode_3, B.StrokeCap_0, B.StrokeJoin_0);
      ctx = _this.get$context(_this);
      ctx.save();
      ++_this._saveContextCount;
      ctx.setTransform(1, 0, 0, 1, 0, 0);
      if (requiresClearRect)
        ctx.clearRect(0, 0, _this._widthInBitmapPixels * t2, _this._heightInBitmapPixels * t2);
      ctx.scale(A.EnginePlatformDispatcher_browserDevicePixelRatio() * t2, A.EnginePlatformDispatcher_browserDevicePixelRatio() * t2);
      _this._replayClipStack$0();
    },
    _allocCanvas$2(width, height) {
      var t1 = this._density;
      return A.tryCreateCanvasElement(B.JSNumber_methods.ceil$0(width * t1), B.JSNumber_methods.ceil$0(height * t1));
    },
    clear$0(_) {
      var ctx, e, exception, t1, t2, _this = this;
      _this.super$_SaveStackTracking$clear(0);
      if (_this.__engine$_canvas != null) {
        ctx = _this.__engine$_context;
        if (ctx != null)
          try {
            ctx.font = "";
          } catch (exception) {
            e = A.unwrapException(exception);
            if (!J.$eq$(e.name, "NS_ERROR_FAILURE"))
              throw exception;
          }
      }
      if (_this.__engine$_canvas != null) {
        _this._restoreContextSave$0();
        _this._contextHandle.reset$0(0);
        t1 = _this._activeCanvasList;
        if (t1 == null)
          t1 = _this._activeCanvasList = A._setArrayType([], type$.JSArray_CanvasElement);
        t2 = _this.__engine$_canvas;
        t2.toString;
        t1.push(t2);
        _this._contextHandle = _this.__engine$_context = null;
      }
      _this._reusablePool = _this._activeCanvasList;
      _this._contextHandle = _this.__engine$_context = _this.__engine$_canvas = _this._activeCanvasList = null;
    },
    _replaySingleSaveEntry$4(clipDepth, prevTransform, transform, clipStack) {
      var clipCount, t1, t2, clipEntry, clipTimeTransform, t3, t4, ratio, t5, path, _this = this,
        ctx = _this.get$context(_this);
      if (clipStack != null)
        for (clipCount = clipStack.length, t1 = _this._density, t2 = type$.SurfacePath; clipDepth < clipCount; ++clipDepth) {
          clipEntry = clipStack[clipDepth];
          clipTimeTransform = clipEntry.currentTransform;
          t3 = clipTimeTransform.__engine$_m4storage;
          t4 = prevTransform.__engine$_m4storage;
          if (t3[0] !== t4[0] || t3[1] !== t4[1] || t3[4] !== t4[4] || t3[5] !== t4[5] || t3[12] !== t4[12] || t3[13] !== t4[13]) {
            ratio = window.devicePixelRatio;
            ratio = (ratio === 0 ? 1 : ratio) * t1;
            ctx.setTransform(ratio, 0, 0, ratio, 0, 0);
            ctx.transform(t3[0], t3[1], t3[4], t3[5], t3[12], t3[13]);
            prevTransform = clipTimeTransform;
          }
          t3 = clipEntry.rect;
          if (t3 != null) {
            ctx.beginPath();
            t4 = t3.left;
            t5 = t3.top;
            ctx.rect(t4, t5, t3.right - t4, t3.bottom - t5);
            ctx.clip();
          } else {
            t3 = clipEntry.rrect;
            if (t3 != null) {
              path = A.Path_Path();
              path.addRRect$1(0, t3);
              _this._runPath$2(ctx, t2._as(path));
              ctx.clip();
            } else {
              t3 = clipEntry.path;
              if (t3 != null) {
                _this._runPath$2(ctx, t3);
                if (t3._fillType === B.PathFillType_0)
                  ctx.clip();
                else
                  ctx.clip("evenodd");
              }
            }
          }
        }
      t1 = transform.__engine$_m4storage;
      t2 = prevTransform.__engine$_m4storage;
      if (t1[0] !== t2[0] || t1[1] !== t2[1] || t1[4] !== t2[4] || t1[5] !== t2[5] || t1[12] !== t2[12] || t1[13] !== t2[13]) {
        ratio = A.EnginePlatformDispatcher_browserDevicePixelRatio() * _this._density;
        ctx.setTransform(ratio, 0, 0, ratio, 0, 0);
        ctx.transform(t1[0], t1[1], t1[4], t1[5], t1[12], t1[13]);
      }
      return clipDepth;
    },
    _replayClipStack$0() {
      var clipDepth, saveStackIndex, saveEntry, prevTransform0, _this = this,
        ctx = _this.get$context(_this),
        prevTransform = A.Matrix4$identity(),
        t1 = _this._saveStack,
        len = t1.length;
      for (clipDepth = 0, saveStackIndex = 0; saveStackIndex < len; ++saveStackIndex, prevTransform = prevTransform0) {
        saveEntry = t1[saveStackIndex];
        prevTransform0 = saveEntry.transform;
        clipDepth = _this._replaySingleSaveEntry$4(clipDepth, prevTransform, prevTransform0, saveEntry.clipStack);
        ctx.save();
        ++_this._saveContextCount;
      }
      _this._replaySingleSaveEntry$4(clipDepth, prevTransform, _this._currentTransform, _this.clipStack);
    },
    endOfPaint$0() {
      var t2, _i, e, t3,
        t1 = this._reusablePool;
      if (t1 != null) {
        for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
          e = t1[_i];
          t3 = $.$get$_browserEngine();
          if (t3 === B.BrowserEngine_1) {
            e.height = 0;
            e.width = 0;
          }
          t3 = e.parentNode;
          if (t3 != null)
            t3.removeChild(e);
        }
        this._reusablePool = null;
      }
      this._restoreContextSave$0();
    },
    _restoreContextSave$0() {
      for (; this._saveContextCount !== 0;) {
        this.__engine$_context.restore();
        --this._saveContextCount;
      }
    },
    translate$2(_, dx, dy) {
      var _this = this;
      _this.super$_SaveStackTracking$translate(0, dx, dy);
      if (_this.__engine$_canvas != null)
        _this.get$context(_this).translate(dx, dy);
    },
    _clipRect$2(ctx, rect) {
      var t1, t2;
      ctx.beginPath();
      t1 = rect.left;
      t2 = rect.top;
      ctx.rect(t1, t2, rect.right - t1, rect.bottom - t2);
      ctx.clip();
    },
    _clipRRect$2(ctx, rrect) {
      var path = A.Path_Path();
      path.addRRect$1(0, rrect);
      this._runPath$2(ctx, type$.SurfacePath._as(path));
      ctx.clip();
    },
    clipPath$1(_, path) {
      var ctx, _this = this;
      _this.super$_SaveStackTracking$clipPath(0, path);
      if (_this.__engine$_canvas != null) {
        ctx = _this.get$context(_this);
        _this._runPath$2(ctx, path);
        if (path._fillType === B.PathFillType_0)
          ctx.clip();
        else
          ctx.clip("evenodd");
      }
    },
    _runPath$2(ctx, path) {
      var p, t1, iter, verb, w, points, len, i, t2, t3;
      ctx.beginPath();
      p = $.$get$CanvasPool__runBuffer();
      t1 = path.pathRef;
      iter = new A.PathRefIterator(t1);
      iter.PathRefIterator$1(t1);
      for (; verb = iter.next$1(0, p), verb !== 6;)
        switch (verb) {
          case 0:
            ctx.moveTo(p[0], p[1]);
            break;
          case 1:
            ctx.lineTo(p[2], p[3]);
            break;
          case 4:
            ctx.bezierCurveTo(p[2], p[3], p[4], p[5], p[6], p[7]);
            break;
          case 2:
            ctx.quadraticCurveTo(p[2], p[3], p[4], p[5]);
            break;
          case 3:
            w = t1._conicWeights[iter._conicWeightIndex];
            points = new A.Conic(p[0], p[1], p[2], p[3], p[4], p[5], w).toQuads$0();
            len = points.length;
            for (i = 1; i < len; i += 2) {
              t2 = points[i];
              t3 = points[i + 1];
              ctx.quadraticCurveTo(t2._dx, t2._dy, t3._dx, t3._dy);
            }
            break;
          case 5:
            ctx.closePath();
            break;
          default:
            throw A.wrapException(A.UnimplementedError$("Unknown path verb " + verb));
        }
    },
    _runPathWithOffset$4(ctx, path, offsetX, offsetY) {
      var p, t1, iter, verb, w, points, len, i, t2, t3;
      ctx.beginPath();
      p = $.$get$CanvasPool__runBuffer();
      t1 = path.pathRef;
      iter = new A.PathRefIterator(t1);
      iter.PathRefIterator$1(t1);
      for (; verb = iter.next$1(0, p), verb !== 6;)
        switch (verb) {
          case 0:
            ctx.moveTo(p[0] + offsetX, p[1] + offsetY);
            break;
          case 1:
            ctx.lineTo(p[2] + offsetX, p[3] + offsetY);
            break;
          case 4:
            ctx.bezierCurveTo(p[2] + offsetX, p[3] + offsetY, p[4] + offsetX, p[5] + offsetY, p[6] + offsetX, p[7] + offsetY);
            break;
          case 2:
            ctx.quadraticCurveTo(p[2] + offsetX, p[3] + offsetY, p[4] + offsetX, p[5] + offsetY);
            break;
          case 3:
            w = t1._conicWeights[iter._conicWeightIndex];
            points = new A.Conic(p[0], p[1], p[2], p[3], p[4], p[5], w).toQuads$0();
            len = points.length;
            for (i = 1; i < len; i += 2) {
              t2 = points[i];
              t3 = points[i + 1];
              ctx.quadraticCurveTo(t2._dx + offsetX, t2._dy + offsetY, t3._dx + offsetX, t3._dy + offsetY);
            }
            break;
          case 5:
            ctx.closePath();
            break;
          default:
            throw A.wrapException(A.UnimplementedError$("Unknown path verb " + verb));
        }
    },
    drawPath$2(_, path, style) {
      var t2, _this = this,
        shaderBounds = _this.get$contextHandle()._shaderBounds,
        t1 = type$.SurfacePath;
      if (shaderBounds == null)
        _this._runPath$2(_this.get$context(_this), t1._as(path));
      else
        _this._runPathWithOffset$4(_this.get$context(_this), t1._as(path), -shaderBounds.left, -shaderBounds.top);
      t1 = _this.get$contextHandle();
      t2 = path._fillType;
      if (style === B.PaintingStyle_1)
        t1.context.stroke();
      else {
        t1 = t1.context;
        if (t2 === B.PathFillType_0)
          t1.fill();
        else
          t1.fill("evenodd");
      }
    },
    dispose$0(_) {
      var t1 = $.$get$_browserEngine();
      if (t1 === B.BrowserEngine_1 && this.__engine$_canvas != null) {
        t1 = this.__engine$_canvas;
        t1.height = 0;
        t1.width = 0;
      }
      this._clearActiveCanvasList$0();
    },
    _clearActiveCanvasList$0() {
      var t2, _i, c, t3,
        t1 = this._activeCanvasList;
      if (t1 != null)
        for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
          c = t1[_i];
          t3 = $.$get$_browserEngine();
          if (t3 === B.BrowserEngine_1) {
            c.height = 0;
            c.width = 0;
          }
          t3 = c.parentNode;
          if (t3 != null)
            t3.removeChild(c);
        }
      this._activeCanvasList = null;
    }
  };
  A.ContextStateHandle.prototype = {
    set$fillStyle(_, colorOrGradient) {
      var t1 = this._currentFillStyle;
      if (colorOrGradient == null ? t1 != null : colorOrGradient !== t1) {
        this._currentFillStyle = colorOrGradient;
        this.context.fillStyle = colorOrGradient;
      }
    },
    set$strokeStyle(_, colorOrGradient) {
      var t1 = this._currentStrokeStyle;
      if (colorOrGradient == null ? t1 != null : colorOrGradient !== t1) {
        this._currentStrokeStyle = colorOrGradient;
        this.context.strokeStyle = colorOrGradient;
      }
    },
    setUpPaint$2(paint, shaderBounds) {
      var t1, t2, paintStyle, colorString, maskFilter, tempVector, shadowOffsetX, shadowOffsetY, _this = this;
      _this._lastUsedPaint = paint;
      t1 = paint.strokeWidth;
      if (t1 == null)
        t1 = 1;
      if (t1 !== _this._currentLineWidth) {
        _this._currentLineWidth = t1;
        _this.context.lineWidth = t1;
      }
      t1 = paint.blendMode;
      if (t1 != _this._currentBlendMode) {
        _this._currentBlendMode = t1;
        t1 = A.blendModeToCssMixBlendMode(t1);
        if (t1 == null)
          t1 = "source-over";
        _this.context.globalCompositeOperation = t1;
      }
      if (B.StrokeCap_0 !== _this._currentStrokeCap) {
        _this._currentStrokeCap = B.StrokeCap_0;
        t1 = A.stringForStrokeCap(B.StrokeCap_0);
        t1.toString;
        _this.context.lineCap = t1;
      }
      if (B.StrokeJoin_0 !== _this._currentStrokeJoin) {
        _this._currentStrokeJoin = B.StrokeJoin_0;
        _this.context.lineJoin = A.stringForStrokeJoin(B.StrokeJoin_0);
      }
      t1 = paint.shader;
      if (t1 != null) {
        if (t1 instanceof A.EngineGradient) {
          t2 = _this._canvasPool;
          paintStyle = t1.createPaintStyle$3(t2.get$context(t2), shaderBounds, _this.density);
          _this.set$fillStyle(0, paintStyle);
          _this.set$strokeStyle(0, paintStyle);
          _this._shaderBounds = shaderBounds;
          _this.context.translate(shaderBounds.left, shaderBounds.top);
        }
      } else {
        t1 = paint.color;
        if (t1 != null) {
          colorString = A.colorToCssString(t1);
          _this.set$fillStyle(0, colorString);
          _this.set$strokeStyle(0, colorString);
        } else {
          _this.set$fillStyle(0, "#000000");
          _this.set$strokeStyle(0, "#000000");
        }
      }
      maskFilter = paint.maskFilter;
      t1 = $.$get$_browserEngine();
      if (!(t1 === B.BrowserEngine_1 || false)) {
        if (!J.$eq$(_this._currentFilter, maskFilter)) {
          _this._currentFilter = maskFilter;
          _this.context.filter = A.maskFilterToCanvasFilter(maskFilter);
        }
      } else if (maskFilter != null) {
        t1 = _this.context;
        t1.save();
        t1.shadowBlur = maskFilter._sigma * 2;
        t2 = paint.color;
        if (t2 != null) {
          t2 = t2.value;
          t2 = A.colorToCssString(A.Color$fromARGB(255, t2 >>> 16 & 255, t2 >>> 8 & 255, t2 & 255));
          t2.toString;
          t1.shadowColor = t2;
        } else {
          t2 = A.colorToCssString(B.Color_4278190080);
          t2.toString;
          t1.shadowColor = t2;
        }
        t1.translate(-50000, 0);
        tempVector = new Float32Array(2);
        t2 = $.$get$window()._debugDevicePixelRatio;
        tempVector[0] = 50000 * (t2 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t2);
        t2 = _this._canvasPool;
        t2._currentTransform.transform2$1(tempVector);
        shadowOffsetX = tempVector[0];
        shadowOffsetY = tempVector[1];
        tempVector[1] = 0;
        tempVector[0] = 0;
        t2._currentTransform.transform2$1(tempVector);
        t1.shadowOffsetX = shadowOffsetX - tempVector[0];
        t1.shadowOffsetY = shadowOffsetY - tempVector[1];
      }
    },
    tearDownPaint$0() {
      var _this = this,
        t1 = _this._lastUsedPaint;
      if ((t1 == null ? null : t1.maskFilter) != null) {
        t1 = $.$get$_browserEngine();
        t1 = t1 === B.BrowserEngine_1 || false;
      } else
        t1 = false;
      if (t1)
        _this.context.restore();
      t1 = _this._shaderBounds;
      if (t1 != null) {
        _this.context.translate(-t1.left, -t1.top);
        _this._shaderBounds = null;
      }
    },
    paint$1(style) {
      var t1 = this.context;
      if (style === B.PaintingStyle_1)
        t1.stroke();
      else
        t1.fill();
    },
    reset$0(_) {
      var _this = this,
        t1 = _this.context;
      t1.fillStyle = "";
      _this._currentFillStyle = t1.fillStyle;
      t1.strokeStyle = "";
      _this._currentStrokeStyle = t1.strokeStyle;
      t1.shadowBlur = 0;
      t1.shadowColor = "none";
      t1.shadowOffsetX = 0;
      t1.shadowOffsetY = 0;
      t1.globalCompositeOperation = "source-over";
      _this._currentBlendMode = B.BlendMode_3;
      t1.lineWidth = 1;
      _this._currentLineWidth = 1;
      t1.lineCap = "butt";
      _this._currentStrokeCap = B.StrokeCap_0;
      t1.lineJoin = "miter";
      _this._currentStrokeJoin = B.StrokeJoin_0;
      _this._shaderBounds = null;
    }
  };
  A._SaveStackTracking.prototype = {
    clear$0(_) {
      B.JSArray_methods.set$length(this._saveStack, 0);
      this.clipStack = null;
      this._currentTransform = A.Matrix4$identity();
    },
    save$0(_) {
      var t1 = this._currentTransform,
        t2 = new A.Matrix40(new Float32Array(16));
      t2.setFrom$1(t1);
      t1 = this.clipStack;
      t1 = t1 == null ? null : A.List_List$from(t1, true, type$.SaveClipEntry);
      this._saveStack.push(new A.SaveStackEntry(t2, t1));
    },
    restore$0(_) {
      var entry,
        t1 = this._saveStack;
      if (t1.length === 0)
        return;
      entry = t1.pop();
      this._currentTransform = entry.transform;
      this.clipStack = entry.clipStack;
    },
    translate$2(_, dx, dy) {
      this._currentTransform.translate$2(0, dx, dy);
    },
    transform$1(_, matrix4) {
      this._currentTransform.multiply$1(0, new A.Matrix40(matrix4));
    },
    clipRect$1(_, rect) {
      var t2, t3,
        t1 = this.clipStack;
      if (t1 == null)
        t1 = this.clipStack = A._setArrayType([], type$.JSArray_SaveClipEntry);
      t2 = this._currentTransform;
      t3 = new A.Matrix40(new Float32Array(16));
      t3.setFrom$1(t2);
      t1.push(new A.SaveClipEntry(rect, null, null, t3));
    },
    clipRRect$1(_, rrect) {
      var t2, t3,
        t1 = this.clipStack;
      if (t1 == null)
        t1 = this.clipStack = A._setArrayType([], type$.JSArray_SaveClipEntry);
      t2 = this._currentTransform;
      t3 = new A.Matrix40(new Float32Array(16));
      t3.setFrom$1(t2);
      t1.push(new A.SaveClipEntry(null, rrect, null, t3));
    },
    clipPath$1(_, path) {
      var t2, t3,
        t1 = this.clipStack;
      if (t1 == null)
        t1 = this.clipStack = A._setArrayType([], type$.JSArray_SaveClipEntry);
      t2 = this._currentTransform;
      t3 = new A.Matrix40(new Float32Array(16));
      t3.setFrom$1(t2);
      t1.push(new A.SaveClipEntry(null, null, path, t3));
    }
  };
  A.CkCanvas.prototype = {
    clear$1(_, color) {
      J.clear$1$ax(this.skCanvas, A._populateSkColor($.$get$_sharedSkColor1(), color));
    },
    clipPath$2(_, path, doAntiAlias) {
      J.clipPath$3$x(this.skCanvas, path.get$skiaObject(), $.$get$_clipOpIntersect(), doAntiAlias);
    },
    clipRRect$2(_, rrect, doAntiAlias) {
      J.clipRRect$3$x(this.skCanvas, A.toSkRRect(rrect), $.$get$_clipOpIntersect(), true);
    },
    clipRect$3(_, rect, clipOp, doAntiAlias) {
      J.clipRect$3$x(this.skCanvas, A.toSkRect(rect), $.$get$_skClipOps()[clipOp.index], doAntiAlias);
    },
    drawCircle$3(_, c, radius, paint) {
      J.drawCircle$4$x(this.skCanvas, c._dx, c._dy, radius, paint.get$skiaObject());
    },
    drawDRRect$3(_, outer, inner, paint) {
      J.drawDRRect$3$x(this.skCanvas, A.toSkRRect(outer), A.toSkRRect(inner), paint.get$skiaObject());
    },
    drawPaint$1(_, paint) {
      J.drawPaint$1$x(this.skCanvas, paint.get$skiaObject());
    },
    drawParagraph$2(_, paragraph, offset) {
      var t1 = paragraph._lastLayoutConstraints;
      t1.toString;
      J.drawParagraph$3$x(this.skCanvas, paragraph._ensureInitialized$1(t1), offset._dx, offset._dy);
      if (!$.$get$CkParagraph__paragraphCache().markUsed$1(paragraph))
        $.$get$CkParagraph__paragraphCache().add$1(0, paragraph);
    },
    drawPath$2(_, path, paint) {
      J.drawPath$2$x(this.skCanvas, path.get$skiaObject(), paint.get$skiaObject());
    },
    drawPicture$1(_, picture) {
      J.drawPicture$1$x(this.skCanvas, picture.get$skiaObject());
    },
    drawRRect$2(_, rrect, paint) {
      J.drawRRect$2$x(this.skCanvas, A.toSkRRect(rrect), paint.get$skiaObject());
    },
    drawRect$2(_, rect, paint) {
      J.drawRect$2$x(this.skCanvas, A.toSkRect(rect), paint.get$skiaObject());
    },
    drawShadow$4(_, path, color, elevation, transparentOccluder) {
      var t1 = $.$get$window()._debugDevicePixelRatio;
      if (t1 == null)
        t1 = A.EnginePlatformDispatcher_browserDevicePixelRatio();
      A.drawSkShadow(this.skCanvas, path, color, elevation, transparentOccluder, t1);
    },
    restore$0(_) {
      J.restore$0$x(this.skCanvas);
    },
    restoreToCount$1(_, count) {
      J.restoreToCount$1$x(this.skCanvas, count);
    },
    save$0(_) {
      return J.save$0$x(this.skCanvas);
    },
    saveLayer$2(_, bounds, paint) {
      var t1 = paint == null ? null : paint.get$skiaObject();
      J.saveLayer$4$x(this.skCanvas, t1, A.toSkRect(bounds), null, null);
    },
    transform$1(_, matrix4) {
      J.concat$1$x(this.skCanvas, A.toSkM44FromFloat32(matrix4));
    },
    translate$2(_, dx, dy) {
      J.translate$2$x(this.skCanvas, dx, dy);
    },
    get$pictureSnapshot() {
      return null;
    }
  };
  A.RecordingCkCanvas.prototype = {
    clear$1(_, color) {
      this.super$CkCanvas$clear(0, color);
      this.pictureSnapshot._commands.push(new A.CkClearCommand(color));
    },
    clipPath$2(_, path, doAntiAlias) {
      this.super$CkCanvas$clipPath(0, path, doAntiAlias);
      this.pictureSnapshot._commands.push(new A.CkClipPathCommand(path, doAntiAlias));
    },
    clipRRect$2(_, rrect, doAntiAlias) {
      this.super$CkCanvas$clipRRect(0, rrect, true);
      this.pictureSnapshot._commands.push(new A.CkClipRRectCommand(rrect, true));
    },
    clipRect$3(_, rect, clipOp, doAntiAlias) {
      this.super$CkCanvas$clipRect(0, rect, clipOp, doAntiAlias);
      this.pictureSnapshot._commands.push(new A.CkClipRectCommand(rect, clipOp, doAntiAlias));
    },
    drawCircle$3(_, c, radius, paint) {
      this.super$CkCanvas$drawCircle(0, c, radius, paint);
      this.pictureSnapshot._commands.push(new A.CkDrawCircleCommand(c, radius, paint));
    },
    drawDRRect$3(_, outer, inner, paint) {
      this.super$CkCanvas$drawDRRect(0, outer, inner, paint);
      this.pictureSnapshot._commands.push(new A.CkDrawDRRectCommand(outer, inner, paint));
    },
    drawPaint$1(_, paint) {
      this.super$CkCanvas$drawPaint(0, paint);
      this.pictureSnapshot._commands.push(new A.CkDrawPaintCommand(paint));
    },
    drawParagraph$2(_, paragraph, offset) {
      this.super$CkCanvas$drawParagraph(0, paragraph, offset);
      this.pictureSnapshot._commands.push(new A.CkDrawParagraphCommand(paragraph, offset));
    },
    drawPath$2(_, path, paint) {
      this.super$CkCanvas$drawPath(0, path, paint);
      this.pictureSnapshot._commands.push(new A.CkDrawPathCommand(path, paint));
    },
    drawPicture$1(_, picture) {
      this.super$CkCanvas$drawPicture(0, picture);
      this.pictureSnapshot._commands.push(new A.CkDrawPictureCommand(picture));
    },
    drawRRect$2(_, rrect, paint) {
      this.super$CkCanvas$drawRRect(0, rrect, paint);
      this.pictureSnapshot._commands.push(new A.CkDrawRRectCommand(rrect, paint));
    },
    drawRect$2(_, rect, paint) {
      this.super$CkCanvas$drawRect(0, rect, paint);
      this.pictureSnapshot._commands.push(new A.CkDrawRectCommand(rect, paint));
    },
    drawShadow$4(_, path, color, elevation, transparentOccluder) {
      this.super$CkCanvas$drawShadow(0, path, color, elevation, transparentOccluder);
      this.pictureSnapshot._commands.push(new A.CkDrawShadowCommand(path, color, elevation, transparentOccluder));
    },
    restore$0(_) {
      this.super$CkCanvas$restore(0);
      this.pictureSnapshot._commands.push(B.C_CkRestoreCommand);
    },
    restoreToCount$1(_, count) {
      this.super$CkCanvas$restoreToCount(0, count);
      this.pictureSnapshot._commands.push(new A.CkRestoreToCountCommand(count));
    },
    save$0(_) {
      this.pictureSnapshot._commands.push(B.C_CkSaveCommand);
      return this.super$CkCanvas$save(0);
    },
    saveLayer$2(_, bounds, paint) {
      this.super$CkCanvas$saveLayer(0, bounds, paint);
      this.pictureSnapshot._commands.push(new A.CkSaveLayerCommand(bounds, paint));
    },
    transform$1(_, matrix4) {
      this.super$CkCanvas$transform(0, matrix4);
      this.pictureSnapshot._commands.push(new A.CkTransformCommand(matrix4));
    },
    translate$2(_, dx, dy) {
      this.super$CkCanvas$translate(0, dx, dy);
      this.pictureSnapshot._commands.push(new A.CkTranslateCommand(dx, dy));
    },
    get$pictureSnapshot() {
      return this.pictureSnapshot;
    }
  };
  A.CkPictureSnapshot.prototype = {
    toPicture$0() {
      var t2, t3, _i, skPicture,
        recorder = new self.window.flutterCanvasKit.PictureRecorder(),
        t1 = J.getInterceptor$x(recorder),
        skCanvas = t1.beginRecording$1(recorder, A.toSkRect(this._bounds));
      for (t2 = this._commands, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i)
        t2[_i].apply$1(skCanvas);
      skPicture = t1.finishRecordingAsPicture$0(recorder);
      t1.delete$0(recorder);
      return skPicture;
    },
    dispose$0(_) {
      var t1, t2, _i;
      for (t1 = this._commands, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].dispose$0(0);
    }
  };
  A.CkPaintCommand.prototype = {
    dispose$0(_) {
    }
  };
  A.CkClearCommand.prototype = {
    apply$1(canvas) {
      J.clear$1$ax(canvas, A._populateSkColor($.$get$_sharedSkColor1(), this.color));
    }
  };
  A.CkSaveCommand.prototype = {
    apply$1(canvas) {
      J.save$0$x(canvas);
    }
  };
  A.CkRestoreCommand.prototype = {
    apply$1(canvas) {
      J.restore$0$x(canvas);
    }
  };
  A.CkRestoreToCountCommand.prototype = {
    apply$1(canvas) {
      J.restoreToCount$1$x(canvas, this.count);
    }
  };
  A.CkTranslateCommand.prototype = {
    apply$1(canvas) {
      J.translate$2$x(canvas, this.dx, this.dy);
    }
  };
  A.CkTransformCommand.prototype = {
    apply$1(canvas) {
      J.concat$1$x(canvas, A.toSkM44FromFloat32(this.matrix4));
    }
  };
  A.CkClipRectCommand.prototype = {
    apply$1(canvas) {
      J.clipRect$3$x(canvas, A.toSkRect(this.rect), $.$get$_skClipOps()[this.clipOp.index], this.doAntiAlias);
    }
  };
  A.CkClipRRectCommand.prototype = {
    apply$1(canvas) {
      J.clipRRect$3$x(canvas, A.toSkRRect(this.rrect), $.$get$_clipOpIntersect(), true);
    }
  };
  A.CkClipPathCommand.prototype = {
    apply$1(canvas) {
      J.clipPath$3$x(canvas, this.path.get$skiaObject(), $.$get$_clipOpIntersect(), this.doAntiAlias);
    }
  };
  A.CkDrawPaintCommand.prototype = {
    apply$1(canvas) {
      J.drawPaint$1$x(canvas, this.paint.get$skiaObject());
    }
  };
  A.CkDrawRectCommand.prototype = {
    apply$1(canvas) {
      J.drawRect$2$x(canvas, A.toSkRect(this.rect), this.paint.get$skiaObject());
    }
  };
  A.CkDrawRRectCommand.prototype = {
    apply$1(canvas) {
      J.drawRRect$2$x(canvas, A.toSkRRect(this.rrect), this.paint.get$skiaObject());
    }
  };
  A.CkDrawDRRectCommand.prototype = {
    apply$1(canvas) {
      J.drawDRRect$3$x(canvas, A.toSkRRect(this.outer), A.toSkRRect(this.inner), this.paint.get$skiaObject());
    }
  };
  A.CkDrawCircleCommand.prototype = {
    apply$1(canvas) {
      var t1 = this.c;
      J.drawCircle$4$x(canvas, t1._dx, t1._dy, this.radius, this.paint.get$skiaObject());
    }
  };
  A.CkDrawPathCommand.prototype = {
    apply$1(canvas) {
      J.drawPath$2$x(canvas, this.path.get$skiaObject(), this.paint.get$skiaObject());
    }
  };
  A.CkDrawShadowCommand.prototype = {
    apply$1(canvas) {
      var _this = this,
        t1 = $.$get$window()._debugDevicePixelRatio;
      if (t1 == null)
        t1 = A.EnginePlatformDispatcher_browserDevicePixelRatio();
      A.drawSkShadow(canvas, _this.path, _this.color, _this.elevation, _this.transparentOccluder, t1);
    }
  };
  A.CkDrawParagraphCommand.prototype = {
    apply$1(canvas) {
      var t3,
        t1 = this.paragraph,
        t2 = t1._lastLayoutConstraints;
      t2.toString;
      t3 = this.offset;
      J.drawParagraph$3$x(canvas, t1._ensureInitialized$1(t2), t3._dx, t3._dy);
      if (!$.$get$CkParagraph__paragraphCache().markUsed$1(t1))
        $.$get$CkParagraph__paragraphCache().add$1(0, t1);
    }
  };
  A.CkDrawPictureCommand.prototype = {
    apply$1(canvas) {
      J.drawPicture$1$x(canvas, this.picture.get$skiaObject());
    }
  };
  A.CkSaveLayerCommand.prototype = {
    apply$1(canvas) {
      var t1 = this.paint;
      t1 = t1 == null ? null : t1.get$skiaObject();
      J.saveLayer$4$x(canvas, t1, A.toSkRect(this.bounds), null, null);
    }
  };
  A.H5vcc.prototype = {};
  A.CanvasKit.prototype = {};
  A.CanvasKitInitOptions.prototype = {};
  A.CanvasKitInitPromise.prototype = {};
  A.ColorSpace.prototype = {};
  A.SkWebGLContextOptions.prototype = {};
  A.SkSurface.prototype = {};
  A.SkGrContext.prototype = {};
  A.SkFontSlantEnum.prototype = {};
  A.SkFontSlant.prototype = {};
  A.SkFontWeightEnum.prototype = {};
  A.SkFontWeight.prototype = {};
  A.SkAffinityEnum.prototype = {};
  A.SkAffinity.prototype = {};
  A.SkTextDirectionEnum.prototype = {};
  A.SkTextDirection.prototype = {};
  A.SkTextAlignEnum.prototype = {};
  A.SkTextAlign.prototype = {};
  A.SkTextHeightBehaviorEnum.prototype = {};
  A.SkTextHeightBehavior.prototype = {};
  A.SkRectHeightStyleEnum.prototype = {};
  A.SkRectHeightStyle.prototype = {};
  A.SkRectWidthStyleEnum.prototype = {};
  A.SkRectWidthStyle.prototype = {};
  A.SkVertexModeEnum.prototype = {};
  A.SkVertexMode.prototype = {};
  A.SkPointModeEnum.prototype = {};
  A.SkPointMode.prototype = {};
  A.SkClipOpEnum.prototype = {};
  A.SkClipOp.prototype = {};
  A.SkFillTypeEnum.prototype = {};
  A.SkFillType.prototype = {};
  A.SkPathOpEnum.prototype = {};
  A.SkPathOp.prototype = {};
  A.SkBlurStyleEnum.prototype = {};
  A.SkBlurStyle.prototype = {};
  A.SkStrokeCapEnum.prototype = {};
  A.SkStrokeCap.prototype = {};
  A.SkPaintStyleEnum.prototype = {};
  A.SkPaintStyle.prototype = {};
  A.SkBlendModeEnum.prototype = {};
  A.SkBlendMode.prototype = {};
  A.SkStrokeJoinEnum.prototype = {};
  A.SkStrokeJoin.prototype = {};
  A.SkTileModeEnum.prototype = {};
  A.SkTileMode.prototype = {};
  A.SkFilterModeEnum.prototype = {};
  A.SkFilterMode.prototype = {};
  A.SkMipmapModeEnum.prototype = {};
  A.SkMipmapMode.prototype = {};
  A.SkAlphaTypeEnum.prototype = {};
  A.SkAlphaType.prototype = {};
  A.SkColorTypeEnum.prototype = {};
  A.SkColorType.prototype = {};
  A.SkAnimatedImage.prototype = {};
  A.SkImage.prototype = {};
  A.SkShaderNamespace.prototype = {};
  A.SkShader.prototype = {};
  A.SkMaskFilterNamespace.prototype = {};
  A.SkPaint.prototype = {};
  A.CkFilterOptions.prototype = {};
  A._CkCubicFilterOptions.prototype = {};
  A._CkTransformFilterOptions.prototype = {};
  A.SkMaskFilter.prototype = {};
  A.SkColorFilterNamespace.prototype = {};
  A.SkColorFilter.prototype = {};
  A.SkImageFilterNamespace.prototype = {};
  A.SkImageFilter.prototype = {};
  A.SkPathNamespace.prototype = {};
  A._NativeFloat32ArrayType.prototype = {};
  A.SkFloat32List.prototype = {};
  A.SkPath.prototype = {};
  A.SkContourMeasureIter.prototype = {};
  A.SkContourMeasure.prototype = {};
  A.SkPictureRecorder.prototype = {};
  A.SkCanvas.prototype = {};
  A.SkPicture.prototype = {};
  A.SkParagraphBuilderNamespace.prototype = {};
  A.SkParagraphBuilder.prototype = {};
  A.SkParagraphStyle.prototype = {};
  A.SkParagraphStyleProperties.prototype = {};
  A.SkTextStyle.prototype = {};
  A.SkTextDecorationStyleEnum.prototype = {};
  A.SkTextDecorationStyle.prototype = {};
  A.SkTextBaselineEnum.prototype = {};
  A.SkTextBaseline.prototype = {};
  A.SkPlaceholderAlignmentEnum.prototype = {};
  A.SkPlaceholderAlignment.prototype = {};
  A.SkTextStyleProperties.prototype = {};
  A.SkStrutStyleProperties.prototype = {};
  A.SkFontStyle.prototype = {};
  A.SkTextShadow.prototype = {};
  A.SkFontFeature.prototype = {};
  A.SkTypeface.prototype = {};
  A.SkFont.prototype = {};
  A.SkFontMgr.prototype = {};
  A.TypefaceFontProvider.prototype = {};
  A.SkLineMetrics.prototype = {};
  A.SkParagraph.prototype = {};
  A.SkTextPosition.prototype = {};
  A.SkTextRange.prototype = {};
  A.SkVertices.prototype = {};
  A.SkTonalColors.prototype = {};
  A.SkFontMgrNamespace.prototype = {};
  A.TypefaceFontProviderNamespace.prototype = {};
  A.SkTypefaceFactory.prototype = {};
  A.ProductionCollector.prototype = {
    ProductionCollector$0() {
      var t1 = new self.window.FinalizationRegistry(A.allowInterop(new A.ProductionCollector_closure(this)));
      A._lateWriteOnceCheck(this.__ProductionCollector__skObjectFinalizationRegistry, "_skObjectFinalizationRegistry");
      this.__ProductionCollector__skObjectFinalizationRegistry = t1;
    },
    register$2(_, wrapper, deletable) {
      J.register$2$x(A._lateReadCheck(this.__ProductionCollector__skObjectFinalizationRegistry, "_skObjectFinalizationRegistry"), wrapper, deletable);
    },
    collect$1(deletable) {
      var _this = this;
      _this._skiaObjectCollectionQueue.push(deletable);
      if (_this._skiaObjectCollectionTimer == null)
        _this._skiaObjectCollectionTimer = A.Timer_Timer(B.Duration_0, new A.ProductionCollector_collect_closure(_this));
    },
    collectSkiaObjectsNow$0() {
      var firstError, firstStackTrace, deletable, error, stackTrace, $length, i, exception,
        _s25_ = "SkObject collection-start",
        _s23_ = "SkObject collection-end";
      window.performance.mark(_s25_);
      $length = this._skiaObjectCollectionQueue.length;
      firstError = null;
      firstStackTrace = null;
      for (i = 0; i < $length; ++i) {
        deletable = this._skiaObjectCollectionQueue[i];
        if (J.isDeleted$0$x(deletable))
          continue;
        try {
          J.delete$0$x(deletable);
        } catch (exception) {
          error = A.unwrapException(exception);
          stackTrace = A.getTraceFromException(exception);
          if (firstError == null) {
            firstError = error;
            firstStackTrace = stackTrace;
          }
        }
      }
      this._skiaObjectCollectionQueue = A._setArrayType([], type$.JSArray_SkDeletable);
      window.performance.mark(_s23_);
      window.performance.measure("SkObject collection", _s25_, _s23_);
      if (firstError != null)
        throw A.wrapException(new A.SkiaObjectCollectionError(firstError, firstStackTrace));
    }
  };
  A.ProductionCollector_closure.prototype = {
    call$1(deletable) {
      if (!J.isDeleted$0$x(deletable))
        this.$this.collect$1(deletable);
    },
    $signature: 105
  };
  A.ProductionCollector_collect_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._skiaObjectCollectionTimer = null;
      t1.collectSkiaObjectsNow$0();
    },
    $signature: 0
  };
  A.SkiaObjectCollectionError.prototype = {
    toString$0(_) {
      return "SkiaObjectCollectionError: " + A.S(this.error) + "\n" + A.S(this.stackTrace);
    },
    $isError: 1,
    get$stackTrace() {
      return this.stackTrace;
    }
  };
  A.SkDeletable.prototype = {};
  A.JsConstructor.prototype = {};
  A.SkObjectFinalizationRegistry.prototype = {};
  A.SkData.prototype = {};
  A.SkImageInfo.prototype = {};
  A.SkPartialImageInfo.prototype = {};
  A.patchCanvasKitModule_closure.prototype = {
    call$0() {
      if (document.currentScript === this.canvasKitScript)
        return A.JsObject_JsObject(this.objectConstructor);
      else
        return $.$get$_context().$index(0, "_flutterWebCachedExports");
    },
    $signature: 30
  };
  A.patchCanvasKitModule_closure0.prototype = {
    call$1(value) {
      $.$get$_context().$indexSet(0, "_flutterWebCachedExports", value);
    },
    $signature: 4
  };
  A.patchCanvasKitModule_closure1.prototype = {
    call$0() {
      if (document.currentScript === this.canvasKitScript)
        return A.JsObject_JsObject(this.objectConstructor);
      else
        return $.$get$_context().$index(0, "_flutterWebCachedModule");
    },
    $signature: 30
  };
  A.patchCanvasKitModule_closure2.prototype = {
    call$1(value) {
      $.$get$_context().$indexSet(0, "_flutterWebCachedModule", value);
    },
    $signature: 4
  };
  A.CanvasKitCanvas.prototype = {
    save$0(_) {
      this.__engine$_canvas.save$0(0);
    },
    saveLayer$2(_, bounds, paint) {
      this.__engine$_canvas.saveLayer$2(0, bounds, type$.CkPaint._as(paint));
    },
    restore$0(_) {
      this.__engine$_canvas.restore$0(0);
    },
    translate$2(_, dx, dy) {
      this.__engine$_canvas.translate$2(0, dx, dy);
    },
    transform$1(_, matrix4) {
      this.__engine$_canvas.transform$1(0, A.toMatrix32(matrix4));
    },
    clipRect$3$clipOp$doAntiAlias(_, rect, clipOp, doAntiAlias) {
      this.__engine$_canvas.clipRect$3(0, rect, clipOp, doAntiAlias);
    },
    clipRect$1($receiver, rect) {
      return this.clipRect$3$clipOp$doAntiAlias($receiver, rect, B.ClipOp_1, true);
    },
    clipRect$2$doAntiAlias($receiver, rect, doAntiAlias) {
      return this.clipRect$3$clipOp$doAntiAlias($receiver, rect, B.ClipOp_1, doAntiAlias);
    },
    clipRRect$2$doAntiAlias(_, rrect, doAntiAlias) {
      this.__engine$_canvas.clipRRect$2(0, rrect, true);
    },
    clipRRect$1($receiver, rrect) {
      return this.clipRRect$2$doAntiAlias($receiver, rrect, true);
    },
    clipPath$2$doAntiAlias(_, path, doAntiAlias) {
      this.__engine$_canvas.clipPath$2(0, type$.CkPath._as(path), doAntiAlias);
    },
    drawRect$2(_, rect, paint) {
      this.__engine$_canvas.drawRect$2(0, rect, type$.CkPaint._as(paint));
    },
    drawRRect$2(_, rrect, paint) {
      this.__engine$_canvas.drawRRect$2(0, rrect, type$.CkPaint._as(paint));
    },
    drawDRRect$3(_, outer, inner, paint) {
      this.__engine$_canvas.drawDRRect$3(0, outer, inner, type$.CkPaint._as(paint));
    },
    drawCircle$3(_, c, radius, paint) {
      this.__engine$_canvas.drawCircle$3(0, c, radius, type$.CkPaint._as(paint));
    },
    drawPath$2(_, path, paint) {
      this.__engine$_canvas.drawPath$2(0, type$.CkPath._as(path), type$.CkPaint._as(paint));
    },
    drawParagraph$2(_, paragraph, offset) {
      this.__engine$_canvas.drawParagraph$2(0, type$.CkParagraph._as(paragraph), offset);
    }
  };
  A.HtmlViewEmbedder.prototype = {
    getOverlayCanvases$0() {
      var t2, overlayCanvases,
        t1 = $._configuration;
      if (t1 == null)
        t1 = $._configuration = new A.FlutterConfiguration(self.window.flutterConfiguration);
      t1 = t1.get$canvasKitMaximumSurfaces(t1) <= 1;
      if (t1)
        return B.List_empty7;
      t1 = this._pictureRecordersCreatedDuringPreroll;
      t2 = A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,CkCanvas>");
      overlayCanvases = A.List_List$of(new A.MappedListIterable(t1, new A.HtmlViewEmbedder_getOverlayCanvases_closure(), t2), true, t2._eval$1("ListIterable.E"));
      return overlayCanvases;
    },
    _cleanUpClipDefs$1(viewId) {
      var clipDefs, nodesToRemove, t2, t3, child, _i, node,
        t1 = this._svgClipDefs;
      if (t1.containsKey$1(0, viewId)) {
        clipDefs = null.querySelector$1(0, "#sk_path_defs");
        nodesToRemove = A._setArrayType([], type$.JSArray_Element);
        t2 = t1.$index(0, viewId);
        t2.toString;
        for (t3 = clipDefs.get$children(clipDefs), t3 = t3.get$iterator(t3); t3.moveNext$0();) {
          child = t3.get$current(t3);
          if (t2.contains$1(0, child.get$id(child)))
            nodesToRemove.push(child);
        }
        for (t2 = nodesToRemove.length, _i = 0; _i < nodesToRemove.length; nodesToRemove.length === t2 || (0, A.throwConcurrentModificationError)(nodesToRemove), ++_i) {
          node = nodesToRemove[_i];
          node.parentNode.removeChild(node);
        }
        t1.$index(0, viewId).clear$0(0);
      }
    },
    submitFrame$0(_) {
      var t2, diffResult, t3, t4, insertBeforeMap, t5, t6, _didPaintBackupSurface, i, viewId, t7, viewType, t8, t9, t10, t11, backupFrame, frame, unusedViews, elementToInsertBefore, _i, platformViewRoot, overlay, _this = this, _null = null,
        _s20_ = "flt-canvas-container",
        t1 = _this._activeCompositionOrder;
      if (t1.length !== 0)
        if (_this._compositionOrder.length !== 0) {
          t2 = $._configuration;
          if (t2 == null)
            t2 = $._configuration = new A.FlutterConfiguration(self.window.flutterConfiguration);
          t2 = t2.get$canvasKitMaximumSurfaces(t2) <= 1;
        } else
          t2 = true;
      else
        t2 = true;
      if (t2)
        diffResult = _null;
      else {
        t2 = A._arrayInstanceType(t1)._eval$1("WhereIterable<1>");
        t3 = _this._compositionOrder;
        t4 = A._arrayInstanceType(t3)._eval$1("WhereIterable<1>");
        diffResult = A.diffViewList(A.List_List$of(new A.WhereIterable(t1, new A.HtmlViewEmbedder_submitFrame_closure(), t2), true, t2._eval$1("Iterable.E")), A.List_List$of(new A.WhereIterable(t3, new A.HtmlViewEmbedder_submitFrame_closure0(), t4), true, t4._eval$1("Iterable.E")));
      }
      insertBeforeMap = _this._updateOverlays$1(diffResult);
      t2 = $._configuration;
      if (t2 == null)
        t2 = $._configuration = new A.FlutterConfiguration(self.window.flutterConfiguration);
      t2 = t2.get$canvasKitMaximumSurfaces(t2) <= 1;
      if (!t2)
        for (t2 = _this._compositionOrder, t3 = _this._overlays, t4 = _this._pictureRecorders, t5 = _this._viewsUsingBackupSurface, t6 = type$.JSArray_Surface, _didPaintBackupSurface = false, i = 0; i < t2.length; ++i) {
          viewId = t2[i];
          t7 = $.$get$platformViewManager();
          viewType = t7._viewIdToType.$index(0, viewId);
          if (viewType != null && t7._invisibleViews.contains$1(0, viewType))
            continue;
          if (t5.contains$1(0, viewId)) {
            if (!_didPaintBackupSurface) {
              t7 = $.SurfaceFactory__instance;
              if (t7 == null) {
                t7 = $._configuration;
                t7 = (t7 == null ? $._configuration = new A.FlutterConfiguration(self.window.flutterConfiguration) : t7)._js;
                t7 = t7 == null ? _null : J.get$canvasKitMaximumSurfaces$x(t7);
                if (t7 == null)
                  t7 = 8;
                t8 = A._ElementFactoryProvider_createElement_tag(_s20_, _null);
                t9 = A._ElementFactoryProvider_createElement_tag(_s20_, _null);
                t10 = A._setArrayType([], t6);
                t11 = A._setArrayType([], t6);
                t7 = $.SurfaceFactory__instance = new A.SurfaceFactory(new A.Surface(t8), new A.Surface(t9), t7, t10, t11);
              }
              backupFrame = t7.backupSurface.acquireFrame$1(_this._frameSize);
              t7 = J.getCanvas$0$x(backupFrame.skiaSurface.surface);
              t8 = _this._backupPictureRecorder.endRecording$0();
              t9 = t8.rawSkiaObject;
              J.drawPicture$1$x(t7, t9 == null ? t8._doResurrect$0() : t9);
              _this._backupPictureRecorder = null;
              backupFrame.submit$0(0);
              _didPaintBackupSurface = true;
            }
          } else {
            frame = t3.$index(0, viewId).acquireFrame$1(_this._frameSize);
            t7 = J.getCanvas$0$x(frame.skiaSurface.surface);
            t8 = t4.$index(0, viewId).endRecording$0();
            t9 = t8.rawSkiaObject;
            J.drawPicture$1$x(t7, t9 == null ? t8._doResurrect$0() : t9);
            frame.submit$0(0);
          }
        }
      else
        _didPaintBackupSurface = false;
      B.JSArray_methods.set$length(_this._pictureRecordersCreatedDuringPreroll, 0);
      t2 = _this._pictureRecorders;
      t2.clear$0(0);
      _this._viewsUsingBackupSurface.clear$0(0);
      t3 = _this._compositionOrder;
      if (A.listEquals(t3, t1)) {
        B.JSArray_methods.set$length(t3, 0);
        return;
      }
      unusedViews = A.LinkedHashSet_LinkedHashSet$from(t1, type$.int);
      B.JSArray_methods.set$length(t1, 0);
      if (diffResult != null) {
        t4 = diffResult.viewsToRemove;
        _this.disposeViews$1(A.LinkedHashSet_LinkedHashSet$from(t4, A._arrayInstanceType(t4)._precomputed1));
        B.JSArray_methods.addAll$1(t1, t3);
        unusedViews.removeAll$1(t3);
        t1 = diffResult.addToBeginning;
        if (t1) {
          t4 = diffResult.viewToInsertBefore;
          t4.toString;
          t4 = _this._viewClipChains.$index(0, t4);
          elementToInsertBefore = t4.get$root(t4);
        } else
          elementToInsertBefore = _null;
        for (t4 = diffResult.viewsToAdd, t5 = t4.length, t6 = _this._viewClipChains, t7 = _this._overlays, _i = 0; _i < t4.length; t4.length === t5 || (0, A.throwConcurrentModificationError)(t4), ++_i) {
          viewId = t4[_i];
          if (t1) {
            t8 = t6.$index(0, viewId);
            platformViewRoot = t8.get$root(t8);
            $.skiaSceneHost.insertBefore(platformViewRoot, elementToInsertBefore);
            overlay = t7.$index(0, viewId);
            if (overlay != null)
              $.skiaSceneHost.insertBefore(overlay.htmlElement, elementToInsertBefore);
          } else {
            t8 = t6.$index(0, viewId);
            platformViewRoot = t8.get$root(t8);
            $.skiaSceneHost.appendChild(platformViewRoot);
            overlay = t7.$index(0, viewId);
            if (overlay != null)
              $.skiaSceneHost.appendChild(overlay.htmlElement);
          }
        }
        if (insertBeforeMap != null)
          insertBeforeMap.forEach$1(0, new A.HtmlViewEmbedder_submitFrame_closure1(_this));
        if (_didPaintBackupSurface) {
          t1 = $.skiaSceneHost;
          t1.toString;
          t1.appendChild(A.SurfaceFactory_instance().backupSurface.htmlElement);
        }
      } else {
        t4 = A.SurfaceFactory_instance();
        B.JSArray_methods.forEach$1(t4.__engine$_cache, t4.get$_removeFromDom());
        J.remove$0$ax(t4.backupSurface.htmlElement);
        for (t4 = _this._viewClipChains, t5 = _this._overlays, i = 0; i < t3.length; ++i) {
          viewId = t3[i];
          t6 = t4.$index(0, viewId);
          platformViewRoot = t6.get$root(t6);
          overlay = t5.$index(0, viewId);
          $.skiaSceneHost.appendChild(platformViewRoot);
          if (overlay != null)
            $.skiaSceneHost.appendChild(overlay.htmlElement);
          t1.push(viewId);
          unusedViews.remove$1(0, viewId);
        }
        if (_didPaintBackupSurface) {
          t1 = $.skiaSceneHost;
          t1.toString;
          t1.appendChild(A.SurfaceFactory_instance().backupSurface.htmlElement);
        }
      }
      B.JSArray_methods.set$length(t3, 0);
      _this.disposeViews$1(unusedViews);
      t2.clear$0(0);
    },
    disposeViews$1(viewsToDispose) {
      var t1, t2, t3, t4, t5, t6, t7, _this = this;
      for (t1 = A._LinkedHashSetIterator$(viewsToDispose, viewsToDispose._collection$_modifications), t2 = _this._currentCompositionParams, t3 = _this._viewsToRecomposite, t4 = _this._svgClipDefs, t5 = _this._viewClipChains, t6 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
        t7 = t1._collection$_current;
        if (t7 == null)
          t7 = t6._as(t7);
        t5.remove$1(0, t7);
        t2.remove$1(0, t7);
        t3.remove$1(0, t7);
        _this._cleanUpClipDefs$1(t7);
        t4.remove$1(0, t7);
      }
    },
    _releaseOverlay$1(viewId) {
      var t2,
        t1 = this._overlays;
      if (t1.$index(0, viewId) != null) {
        t2 = t1.$index(0, viewId);
        t2.toString;
        A.SurfaceFactory_instance().releaseSurface$1(t2);
        t1.remove$1(0, viewId);
      }
    },
    _updateOverlays$1(diffResult) {
      var t1, t2, t3, viewsNeedingOverlays, numOverlays, i, viewId, t4, t5, t6, t7, overlay, availableOverlays, viewsToDispose, index, index0, t8, t9, t10, t11, overlaysToAssign, lastOriginalIndex, insertBeforeMap, viewType, _this = this, _null = null,
        _s20_ = "flt-canvas-container";
      if (_this._viewsUsingBackupSurface._collection$_length === 0)
        A.SurfaceFactory_instance().releaseSurface$1(A.SurfaceFactory_instance().backupSurface);
      t1 = diffResult == null;
      if (!t1 && diffResult.viewsToAdd.length === 0 && diffResult.viewsToRemove.length === 0)
        return _null;
      if (t1) {
        t1 = A.SurfaceFactory_instance();
        t2 = t1._liveSurfaces;
        B.JSArray_methods.addAll$1(t1.__engine$_cache, t2);
        B.JSArray_methods.set$length(t2, 0);
        t2 = _this._overlays;
        t2.clear$0(0);
        t1 = _this._compositionOrder;
        t3 = A._arrayInstanceType(t1)._eval$1("WhereIterable<1>");
        viewsNeedingOverlays = A.List_List$of(new A.WhereIterable(t1, new A.HtmlViewEmbedder__updateOverlays_closure(), t3), true, t3._eval$1("Iterable.E"));
        numOverlays = Math.min(A.SurfaceFactory_instance().maximumSurfaces - 2, viewsNeedingOverlays.length);
        for (t1 = type$.JSArray_Surface, i = 0; i < numOverlays; ++i) {
          viewId = viewsNeedingOverlays[i];
          t3 = $.SurfaceFactory__instance;
          if (t3 == null) {
            t3 = $._configuration;
            t3 = (t3 == null ? $._configuration = new A.FlutterConfiguration(self.window.flutterConfiguration) : t3)._js;
            t3 = t3 == null ? _null : J.get$canvasKitMaximumSurfaces$x(t3);
            if (t3 == null)
              t3 = 8;
            t4 = A._ElementFactoryProvider_createElement_tag(_s20_, _null);
            t5 = A._ElementFactoryProvider_createElement_tag(_s20_, _null);
            t6 = A._setArrayType([], t1);
            t7 = A._setArrayType([], t1);
            t3 = $.SurfaceFactory__instance = new A.SurfaceFactory(new A.Surface(t4), new A.Surface(t5), t3, t6, t7);
          }
          overlay = t3.getOverlay$0();
          overlay.createOrUpdateSurface$1(_this._frameSize);
          t2.$indexSet(0, viewId, overlay);
        }
        _this._assertOverlaysInitialized$0();
        return _null;
      } else {
        t1 = diffResult.viewsToRemove;
        B.JSArray_methods.forEach$1(t1, _this.get$_releaseOverlay());
        t2 = A.SurfaceFactory_instance();
        availableOverlays = t2.maximumSurfaces - 2 - t2._liveSurfaces.length;
        if (diffResult.addToBeginning) {
          t1 = diffResult.viewsToAdd;
          if (t1.length > availableOverlays) {
            viewsToDispose = Math.min(A.SurfaceFactory_instance().maximumSurfaces - 2, t1.length - availableOverlays);
            index = A.SurfaceFactory_instance().maximumSurfaces - 2 - t1.length;
            for (t2 = _this._overlays, t3 = _this._activeCompositionOrder, t4 = type$.JSArray_Surface; viewsToDispose > 0; index = index0) {
              index0 = index + 1;
              t5 = t3[index];
              if (t2.$index(0, t5) != null) {
                t6 = t2.$index(0, t5);
                t6.toString;
                t7 = $.SurfaceFactory__instance;
                if (t7 == null) {
                  t7 = $._configuration;
                  t7 = (t7 == null ? $._configuration = new A.FlutterConfiguration(self.window.flutterConfiguration) : t7)._js;
                  t7 = t7 == null ? _null : J.get$canvasKitMaximumSurfaces$x(t7);
                  if (t7 == null)
                    t7 = 8;
                  t8 = A._ElementFactoryProvider_createElement_tag(_s20_, _null);
                  t9 = A._ElementFactoryProvider_createElement_tag(_s20_, _null);
                  t10 = A._setArrayType([], t4);
                  t11 = A._setArrayType([], t4);
                  t7 = $.SurfaceFactory__instance = new A.SurfaceFactory(new A.Surface(t8), new A.Surface(t9), t7, t10, t11);
                }
                t7.releaseSurface$1(t6);
                t2.remove$1(0, t5);
              }
              --viewsToDispose;
            }
          }
          t2 = t1.length;
          t3 = A.SurfaceFactory_instance();
          overlaysToAssign = Math.min(t2, t3.maximumSurfaces - 2 - t3._liveSurfaces.length);
          for (t2 = _this._overlays, t3 = type$.JSArray_Surface, i = 0; i < overlaysToAssign; ++i) {
            t4 = t1[i];
            t5 = $.SurfaceFactory__instance;
            if (t5 == null) {
              t5 = $._configuration;
              t5 = (t5 == null ? $._configuration = new A.FlutterConfiguration(self.window.flutterConfiguration) : t5)._js;
              t5 = t5 == null ? _null : J.get$canvasKitMaximumSurfaces$x(t5);
              if (t5 == null)
                t5 = 8;
              t6 = A._ElementFactoryProvider_createElement_tag(_s20_, _null);
              t7 = A._ElementFactoryProvider_createElement_tag(_s20_, _null);
              t8 = A._setArrayType([], t3);
              t9 = A._setArrayType([], t3);
              t5 = $.SurfaceFactory__instance = new A.SurfaceFactory(new A.Surface(t6), new A.Surface(t7), t5, t8, t9);
            }
            overlay = t5.getOverlay$0();
            overlay.createOrUpdateSurface$1(_this._frameSize);
            t2.$indexSet(0, t4, overlay);
          }
          _this._assertOverlaysInitialized$0();
          return _null;
        } else {
          t2 = _this._compositionOrder;
          overlaysToAssign = Math.min(t2.length, availableOverlays);
          lastOriginalIndex = _this._activeCompositionOrder.length - t1.length;
          t1 = type$.int;
          insertBeforeMap = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
          t1 = _this._overlays;
          t3 = type$.JSArray_Surface;
          index = 0;
          while (true) {
            if (!(overlaysToAssign > 0 && index < t2.length))
              break;
            viewId = t2[index];
            if (!t1.containsKey$1(0, viewId)) {
              t4 = $.$get$platformViewManager();
              viewType = t4._viewIdToType.$index(0, viewId);
              t4 = !(viewType != null && t4._invisibleViews.contains$1(0, viewType));
            } else
              t4 = false;
            if (t4) {
              t4 = $.SurfaceFactory__instance;
              if (t4 == null) {
                t4 = $._configuration;
                t4 = (t4 == null ? $._configuration = new A.FlutterConfiguration(self.window.flutterConfiguration) : t4)._js;
                t4 = t4 == null ? _null : J.get$canvasKitMaximumSurfaces$x(t4);
                if (t4 == null)
                  t4 = 8;
                t5 = A._ElementFactoryProvider_createElement_tag(_s20_, _null);
                t6 = A._ElementFactoryProvider_createElement_tag(_s20_, _null);
                t7 = A._setArrayType([], t3);
                t8 = A._setArrayType([], t3);
                t4 = $.SurfaceFactory__instance = new A.SurfaceFactory(new A.Surface(t5), new A.Surface(t6), t4, t7, t8);
              }
              overlay = t4.getOverlay$0();
              overlay.createOrUpdateSurface$1(_this._frameSize);
              t1.$indexSet(0, viewId, overlay);
              --overlaysToAssign;
              if (index < lastOriginalIndex) {
                t4 = index + 1;
                if (t4 < t2.length)
                  insertBeforeMap.$indexSet(0, viewId, t2[t4]);
                else
                  insertBeforeMap.$indexSet(0, viewId, -1);
              }
            }
            ++index;
          }
          _this._assertOverlaysInitialized$0();
          return insertBeforeMap;
        }
      }
    },
    _assertOverlaysInitialized$0() {
    }
  };
  A.HtmlViewEmbedder_getOverlayCanvases_closure.prototype = {
    call$1(r) {
      var t1 = r._recordingCanvas;
      t1.toString;
      return t1;
    },
    $signature: 81
  };
  A.HtmlViewEmbedder_submitFrame_closure.prototype = {
    call$1(viewId) {
      return !$.$get$platformViewManager().isInvisible$1(viewId);
    },
    $signature: 19
  };
  A.HtmlViewEmbedder_submitFrame_closure0.prototype = {
    call$1(viewId) {
      return !$.$get$platformViewManager().isInvisible$1(viewId);
    },
    $signature: 19
  };
  A.HtmlViewEmbedder_submitFrame_closure1.prototype = {
    call$2(viewId, viewIdToInsertBefore) {
      var nextSibling,
        t1 = this.$this,
        overlay = t1._overlays.$index(0, viewId).htmlElement;
      if (viewIdToInsertBefore !== -1) {
        t1 = t1._viewClipChains.$index(0, viewIdToInsertBefore);
        nextSibling = t1.get$root(t1);
        $.skiaSceneHost.insertBefore(overlay, nextSibling);
      } else
        $.skiaSceneHost.appendChild(overlay);
    },
    $signature: 215
  };
  A.HtmlViewEmbedder__updateOverlays_closure.prototype = {
    call$1(viewId) {
      return !$.$get$platformViewManager().isInvisible$1(viewId);
    },
    $signature: 19
  };
  A.MutatorType.prototype = {
    toString$0(_) {
      return "MutatorType." + this._name;
    }
  };
  A.Mutator.prototype = {
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof A.Mutator))
        return false;
      t1 = _this.type;
      if (t1 !== other.type)
        return false;
      switch (t1.index) {
        case 0:
          return J.$eq$(_this.rect, other.rect);
        case 1:
          return true;
        case 2:
          return _this.path == other.path;
        case 3:
          return _this.matrix == other.matrix;
        case 4:
          return true;
        default:
          return false;
      }
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.type, _this.rect, _this.rrect, _this.path, _this.matrix, _this.alpha, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    }
  };
  A.MutatorsStack.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      return other instanceof A.MutatorsStack && A.listEquals(other._mutators, this._mutators);
    },
    get$hashCode(_) {
      return A.hashList(this._mutators);
    },
    get$iterator(_) {
      var t1 = this._mutators;
      t1 = new A.ReversedListIterable(t1, A._arrayInstanceType(t1)._eval$1("ReversedListIterable<1>"));
      return new A.ListIterator(t1, t1.get$length(t1));
    }
  };
  A.ViewListDiffResult.prototype = {};
  A.FontFallbackData.prototype = {
    ensureFontsSupportText$2(text, fontFamilies) {
      var isAscii, runesToCheck, t2, t3, rune, codeUnits, fonts, _i, font, typefacesForFamily, codeUnitsSupported, testString, glyphs, t4, t5, missingCodeUnits, _this = this,
        t1 = text.length,
        i = 0;
      while (true) {
        if (!(i < t1)) {
          isAscii = true;
          break;
        }
        if (B.JSString_methods._codeUnitAt$1(text, i) >= 160) {
          isAscii = false;
          break;
        }
        ++i;
      }
      if (isAscii)
        return;
      runesToCheck = A.LinkedHashSet_LinkedHashSet$_empty(type$.int);
      for (t1 = new A.RuneIterator(text), t2 = _this.knownCoveredCodeUnits, t3 = _this.codeUnitsWithNoKnownFont; t1.moveNext$0();) {
        rune = t1._currentCodePoint;
        if (!(rune < 160 || t2.contains$1(0, rune) || t3.contains$1(0, rune)))
          runesToCheck.add$1(0, rune);
      }
      if (runesToCheck._collection$_length === 0)
        return;
      codeUnits = A.List_List$of(runesToCheck, true, runesToCheck.$ti._eval$1("SetMixin.E"));
      fonts = A._setArrayType([], type$.JSArray_SkFont);
      for (t1 = fontFamilies.length, _i = 0; _i < fontFamilies.length; fontFamilies.length === t1 || (0, A.throwConcurrentModificationError)(fontFamilies), ++_i) {
        font = fontFamilies[_i];
        typefacesForFamily = $._skiaFontCollection.familyToFontMap.$index(0, font);
        if (typefacesForFamily != null)
          B.JSArray_methods.addAll$1(fonts, typefacesForFamily);
      }
      t1 = codeUnits.length;
      codeUnitsSupported = A.List_List$filled(t1, false, false, type$.bool);
      testString = A.String_String$fromCharCodes(codeUnits, 0, null);
      for (t2 = fonts.length, _i = 0; _i < fonts.length; fonts.length === t2 || (0, A.throwConcurrentModificationError)(fonts), ++_i) {
        glyphs = J.getGlyphIDs$1$x(fonts[_i], testString);
        for (t3 = glyphs.length, i = 0; i < t3; ++i) {
          t4 = codeUnitsSupported[i];
          if (glyphs[i] === 0) {
            t5 = codeUnits[i];
            if (!(t5 < 32))
              t5 = t5 > 127 && t5 < 160;
            else
              t5 = true;
          } else
            t5 = true;
          codeUnitsSupported[i] = B.JSBool_methods.$or(t4, t5);
        }
      }
      if (B.JSArray_methods.any$1(codeUnitsSupported, new A.FontFallbackData_ensureFontsSupportText_closure())) {
        missingCodeUnits = A._setArrayType([], type$.JSArray_int);
        for (i = 0; i < t1; ++i)
          if (!codeUnitsSupported[i])
            missingCodeUnits.push(codeUnits[i]);
        _this._codeUnitsToCheckAgainstFallbackFonts.addAll$1(0, missingCodeUnits);
        if (!_this._scheduledCodeUnitCheck) {
          _this._scheduledCodeUnitCheck = true;
          $.$get$EnginePlatformDispatcher__instance().get$rasterizer()._postFrameCallbacks.push(_this.get$_ensureFallbackFonts());
        }
      }
    },
    _ensureFallbackFonts$0() {
      var t1, codeUnits, codeUnitsSupported, testString, t2, t3, t4, _i, font, fontsForFamily, t5, glyphs, t6, i, t7, t8, keepGoing, _i0, _this = this;
      _this._scheduledCodeUnitCheck = false;
      t1 = _this._codeUnitsToCheckAgainstFallbackFonts;
      codeUnits = A.List_List$of(t1, true, A._instanceType(t1)._eval$1("SetMixin.E"));
      t1.clear$0(0);
      t1 = codeUnits.length;
      codeUnitsSupported = A.List_List$filled(t1, false, false, type$.bool);
      testString = A.String_String$fromCharCodes(codeUnits, 0, null);
      for (t2 = _this.globalFontFallbacks, t3 = t2.length, t4 = _this.knownCoveredCodeUnits, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
        font = t2[_i];
        fontsForFamily = $._skiaFontCollection.familyToFontMap.$index(0, font);
        if (fontsForFamily == null) {
          $.$get$printWarning().call$1("A fallback font was registered but we cannot retrieve the typeface for it.");
          continue;
        }
        for (t5 = J.get$iterator$ax(fontsForFamily); t5.moveNext$0();) {
          glyphs = J.getGlyphIDs$1$x(t5.get$current(t5), testString);
          for (t6 = glyphs.length, i = 0; i < t6; ++i) {
            t7 = glyphs[i] === 0;
            if (!t7)
              t4.add$1(0, codeUnits[i]);
            t8 = codeUnitsSupported[i];
            if (t7) {
              t7 = codeUnits[i];
              if (!(t7 < 32))
                t7 = t7 > 127 && t7 < 160;
              else
                t7 = true;
            } else
              t7 = true;
            codeUnitsSupported[i] = B.JSBool_methods.$or(t8, t7);
          }
        }
        _i0 = 0;
        while (true) {
          if (!(_i0 < t1)) {
            keepGoing = false;
            break;
          }
          if (!codeUnitsSupported[_i0]) {
            keepGoing = true;
            break;
          }
          ++_i0;
        }
        if (!keepGoing)
          return;
      }
      for (i = codeUnits.length - 1; i >= 0; --i)
        if (codeUnitsSupported[i])
          B.JSArray_methods.removeAt$1(codeUnits, i);
      A.findFontsForMissingCodeunits(codeUnits);
    },
    registerFallbackFont$2(family, bytes) {
      var t1, t2, t3, countedFamily, _this = this,
        typeface = J.MakeFreeTypeFaceFromData$1$x(J.get$Typeface$x($.__canvasKit._readField$0()), bytes.buffer);
      if (typeface == null) {
        $.$get$printWarning().call$1("Failed to parse fallback font " + family + " as a font.");
        return;
      }
      t1 = _this.fontFallbackCounts;
      t1.putIfAbsent$2(0, family, new A.FontFallbackData_registerFallbackFont_closure());
      t2 = t1.$index(0, family);
      t2.toString;
      t3 = t1.$index(0, family);
      t3.toString;
      t1.$indexSet(0, family, t3 + 1);
      countedFamily = family + " " + A.S(t2);
      _this.registeredFallbackFonts.push(A.RegisteredFont$(bytes, countedFamily, typeface));
      if (family === "Noto Color Emoji Compat") {
        t1 = _this.globalFontFallbacks;
        if (B.JSArray_methods.get$first(t1) === "Roboto")
          B.JSArray_methods.insert$2(t1, 1, countedFamily);
        else
          B.JSArray_methods.insert$2(t1, 0, countedFamily);
      } else
        _this.globalFontFallbacks.push(countedFamily);
    }
  };
  A.FontFallbackData_createNotoFontTree_closure.prototype = {
    call$0() {
      return A._setArrayType([], type$.JSArray_CodeunitRange);
    },
    $signature: 48
  };
  A.FontFallbackData_ensureFontsSupportText_closure.prototype = {
    call$1(x) {
      return !x;
    },
    $signature: 83
  };
  A.FontFallbackData_registerFallbackFont_closure.prototype = {
    call$0() {
      return 0;
    },
    $signature: 32
  };
  A._makeResolvedNotoFontFromCss_closure.prototype = {
    call$0() {
      return A._setArrayType([], type$.JSArray_CodeunitRange);
    },
    $signature: 48
  };
  A._registerSymbolsAndEmoji_extractUrlFromCss.prototype = {
    call$1(css) {
      var t1, t2, urlStart;
      for (t1 = new A._SyncStarIterator(A.LineSplitter_split(css)._outerHelper()); t1.moveNext$0();) {
        t2 = t1.get$current(t1);
        if (B.JSString_methods.startsWith$1(t2, "  src:")) {
          urlStart = B.JSString_methods.indexOf$1(t2, "url(");
          if (urlStart === -1) {
            $.$get$printWarning().call$1("Unable to resolve Noto font URL: " + t2);
            return null;
          }
          return B.JSString_methods.substring$2(t2, urlStart + 4, B.JSString_methods.indexOf$1(t2, ")"));
        }
      }
      $.$get$printWarning().call$1("Unable to determine URL for Noto font");
      return null;
    },
    $signature: 119
  };
  A.findMinimumFontsForCodeUnits_closure.prototype = {
    call$1(font) {
      return B.JSArray_methods.contains$1($.$get$_cjkFonts(), font);
    },
    $signature: 168
  };
  A.findMinimumFontsForCodeUnits_closure0.prototype = {
    call$1(codeUnit) {
      return this._box_0.bestFont.resolvedFont.tree.root.containsDeep$1(codeUnit);
    },
    $signature: 19
  };
  A.NotoFont.prototype = {
    ensureResolved$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, $async$temp1;
      var $async$ensureResolved$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = $async$self.resolvedFont == null ? 2 : 3;
              break;
            case 2:
              // then
              t1 = $async$self._decodingCompleter;
              $async$goto = t1 == null ? 4 : 6;
              break;
            case 4:
              // then
              $async$self._decodingCompleter = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void);
              t1 = $.$get$notoDownloadQueue().downloader;
              t2 = $async$self.name;
              $async$temp1 = A;
              $async$goto = 7;
              return A._asyncAwait(t1.downloadAsString$1("https://fonts.googleapis.com/css2?family=" + A.stringReplaceAllUnchecked(t2, " ", "+")), $async$ensureResolved$0);
            case 7:
              // returning from await.
              $async$self.resolvedFont = $async$temp1._makeResolvedNotoFontFromCss($async$result, t2);
              $async$self._decodingCompleter.complete$0(0);
              // goto join
              $async$goto = 5;
              break;
            case 6:
              // else
              $async$goto = 8;
              return A._asyncAwait(t1.future, $async$ensureResolved$0);
            case 8:
              // returning from await.
            case 5:
              // join
            case 3:
              // join
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$ensureResolved$0, $async$completer);
    },
    get$name(receiver) {
      return this.name;
    }
  };
  A.CodeunitRange.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CodeunitRange))
        return false;
      return other.start === this.start && other.end === this.end;
    },
    get$hashCode(_) {
      return A.hashValues(this.start, this.end, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      return "[" + this.start + ", " + this.end + "]";
    }
  };
  A._ResolvedNotoFont.prototype = {
    get$name(receiver) {
      return this.name;
    }
  };
  A._ResolvedNotoSubset.prototype = {
    toString$0(_) {
      return "_ResolvedNotoSubset(" + this.family + ", " + this.url + ")";
    }
  };
  A.FallbackFontDownloadQueue.prototype = {
    add$1(_, subset) {
      var t1, t2, _this = this;
      if (_this.downloadedSubsets.contains$1(0, subset) || _this.pendingSubsets.containsKey$1(0, subset.url))
        return;
      t1 = _this.pendingSubsets;
      t2 = t1._length;
      t1.$indexSet(0, subset.url, subset);
      if (t2 === 0)
        A.Timer_Timer(B.Duration_0, _this.get$startDownloads());
    },
    startDownloads$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, t2, t3, t4, t5, downloadOrder, _i, url, t1, downloads, downloadedData;
      var $async$startDownloads$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.String;
              downloads = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Future_void);
              downloadedData = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Uint8List);
              for (t1 = $async$self.pendingSubsets, t2 = t1.get$values(t1), t2 = new A.MappedIterator(J.get$iterator$ax(t2.__internal$_iterable), t2._f), t3 = type$.void, t4 = A._instanceType(t2)._rest[1]; t2.moveNext$0();) {
                t5 = t2.__internal$_current;
                if (t5 == null)
                  t5 = t4._as(t5);
                downloads.$indexSet(0, t5.url, A.Future_Future(new A.FallbackFontDownloadQueue_startDownloads_closure($async$self, t5, downloadedData), t3));
              }
              $async$goto = 2;
              return A._asyncAwait(A.Future_wait(downloads.get$values(downloads), t3), $async$startDownloads$0);
            case 2:
              // returning from await.
              t2 = downloadedData.$ti._eval$1("LinkedHashMapKeyIterable<1>");
              t2 = A.List_List$of(new A.LinkedHashMapKeyIterable(downloadedData, t2), true, t2._eval$1("Iterable.E"));
              B.JSArray_methods.sort$0(t2);
              t3 = A._arrayInstanceType(t2)._eval$1("ReversedListIterable<1>");
              downloadOrder = A.List_List$of(new A.ReversedListIterable(t2, t3), true, t3._eval$1("ListIterable.E"));
              t2 = downloadOrder.length, _i = 0;
            case 3:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              url = downloadOrder[_i];
              t3 = t1.remove$1(0, url);
              t3.toString;
              t4 = downloadedData.$index(0, url);
              t4.toString;
              $.$get$FontFallbackData__instance().registerFallbackFont$2(t3.family, t4);
              $async$goto = t1._length === 0 ? 6 : 7;
              break;
            case 6:
              // then
              t3 = $._skiaFontCollection.ensureFontsLoaded$0();
              $async$self._fontsLoading = t3;
              $async$handler = 8;
              $async$goto = 11;
              return A._asyncAwait(t3, $async$startDownloads$0);
            case 11:
              // returning from await.
              $async$next.push(10);
              // goto finally
              $async$goto = 9;
              break;
            case 8:
              // uncaught
              $async$next = [1];
            case 9:
              // finally
              $async$handler = 1;
              $async$self._fontsLoading = null;
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 10:
              // after finally
              A.sendFontChangeMessage();
            case 7:
              // join
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$goto = t1._length !== 0 ? 12 : 13;
              break;
            case 12:
              // then
              $async$goto = 14;
              return A._asyncAwait($async$self.startDownloads$0(), $async$startDownloads$0);
            case 14:
              // returning from await.
            case 13:
              // join
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$startDownloads$0, $async$completer);
    }
  };
  A.FallbackFontDownloadQueue_startDownloads_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, e, t1, exception, t2, buffer, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              buffer = null;
              $async$handler = 4;
              t1 = $async$self.subset;
              $async$goto = 7;
              return A._asyncAwait($async$self.$this.downloader.downloadAsBytes$2$debugDescription(t1.url, t1.family), $async$call$0);
            case 7:
              // returning from await.
              buffer = $async$result;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = A.unwrapException($async$exception);
              t1 = $async$self.subset;
              t2 = t1.url;
              $async$self.$this.pendingSubsets.remove$1(0, t2);
              $.$get$printWarning().call$1("Failed to load font " + t1.family + " at " + t2);
              $.$get$printWarning().call$1(J.toString$0$(e));
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              t1 = $async$self.subset;
              $async$self.$this.downloadedSubsets.add$1(0, t1);
              $async$self.downloadedData.$indexSet(0, t1.url, A.NativeUint8List_NativeUint8List$view(buffer, 0, null));
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 12
  };
  A.NotoDownloader.prototype = {
    downloadAsBytes$2$debugDescription(url, debugDescription) {
      var result = A.httpFetch(url).then$1$1(0, new A.NotoDownloader_downloadAsBytes_closure(), type$.ByteBuffer);
      return result;
    },
    downloadAsString$1(url) {
      var result = A.httpFetch(url).then$1$1(0, new A.NotoDownloader_downloadAsString_closure(), type$.String);
      return result;
    }
  };
  A.NotoDownloader_downloadAsBytes_closure.prototype = {
    call$1(fetchResult) {
      return A.promiseToFuture(fetchResult.arrayBuffer(), type$.dynamic).then$1$1(0, new A.NotoDownloader_downloadAsBytes__closure(), type$.ByteBuffer);
    },
    $signature: 72
  };
  A.NotoDownloader_downloadAsBytes__closure.prototype = {
    call$1(x) {
      return type$.ByteBuffer._as(x);
    },
    $signature: 71
  };
  A.NotoDownloader_downloadAsString_closure.prototype = {
    call$1(response) {
      var t1 = type$.String;
      return A.promiseToFuture(response.text(), t1).then$1$1(0, new A.NotoDownloader_downloadAsString__closure(), t1);
    },
    $signature: 96
  };
  A.NotoDownloader_downloadAsString__closure.prototype = {
    call$1(x) {
      return A._asString(x);
    },
    $signature: 104
  };
  A.SkiaFontCollection.prototype = {
    ensureFontsLoaded$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, t3, _i, font, t4, t5;
      var $async$ensureFontsLoaded$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self._loadFonts$0(), $async$ensureFontsLoaded$0);
            case 2:
              // returning from await.
              t1 = $async$self.fontProvider;
              if (t1 != null) {
                J.delete$0$x(t1);
                $async$self.fontProvider = null;
              }
              $async$self.fontProvider = J.Make$0$x(J.get$TypefaceFontProvider$x($.__canvasKit._readField$0()));
              t1 = $async$self.familyToFontMap;
              t1.clear$0(0);
              for (t2 = $async$self._downloadedFonts, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
                font = t2[_i];
                t4 = $async$self.fontProvider;
                t4.toString;
                t5 = font.family;
                J.registerFont$2$x(t4, font.bytes, t5);
                J.add$1$ax(t1.putIfAbsent$2(0, t5, new A.SkiaFontCollection_ensureFontsLoaded_closure()), new self.window.flutterCanvasKit.Font(font.typeface));
              }
              for (t2 = $.$get$FontFallbackData__instance().registeredFallbackFonts, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
                font = t2[_i];
                t4 = $async$self.fontProvider;
                t4.toString;
                t5 = font.family;
                J.registerFont$2$x(t4, font.bytes, t5);
                J.add$1$ax(t1.putIfAbsent$2(0, t5, new A.SkiaFontCollection_ensureFontsLoaded_closure0()), new self.window.flutterCanvasKit.Font(font.typeface));
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$ensureFontsLoaded$0, $async$completer);
    },
    _loadFonts$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t2, t3, t4, t1, $async$temp1;
      var $async$_loadFonts$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._pendingFonts;
              if (t1.length === 0) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$temp1 = J;
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(t1, type$.nullable_RegisteredFont), $async$_loadFonts$0);
            case 3:
              // returning from await.
              t2 = $async$temp1.get$iterator$ax($async$result), t3 = $async$self._downloadedFonts;
            case 4:
              // for condition
              if (!t2.moveNext$0()) {
                // goto after for
                $async$goto = 5;
                break;
              }
              t4 = t2.get$current(t2);
              if (t4 != null)
                t3.push(t4);
              // goto for condition
              $async$goto = 4;
              break;
            case 5:
              // after for
              B.JSArray_methods.set$length(t1, 0);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_loadFonts$0, $async$completer);
    },
    registerFonts$1(assetManager) {
      return this.registerFonts$body$SkiaFontCollection(assetManager);
    },
    registerFonts$body$SkiaFontCollection(assetManager) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, e, exception, t1, fontManifest, t2, t3, t4, t5, t6, family, byteData, $async$exception;
      var $async$registerFonts$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              byteData = null;
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(assetManager.load$1(0, "FontManifest.json"), $async$registerFonts$1);
            case 7:
              // returning from await.
              byteData = $async$result;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.AssetManagerException) {
                e = t1;
                if (e.httpStatus === 404) {
                  $.$get$printWarning().call$1("Font manifest does not exist at `" + e.url + "` \u2013 ignoring.");
                  // goto return
                  $async$goto = 1;
                  break;
                } else
                  throw $async$exception;
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              fontManifest = type$.nullable_List_dynamic._as(B.C_JsonCodec.decode$1(0, B.C_Utf8Codec.decode$1(0, A.NativeUint8List_NativeUint8List$view(byteData.buffer, 0, null))));
              if (fontManifest == null)
                throw A.wrapException(A.AssertionError$(string$.There_));
              for (t1 = type$.Map_String_dynamic, t2 = J.cast$1$0$ax(fontManifest, t1), t2 = new A.ListIterator(t2, t2.get$length(t2)), t3 = type$.List_dynamic, t4 = A._instanceType(t2)._precomputed1; t2.moveNext$0();) {
                t5 = t2.__internal$_current;
                if (t5 == null)
                  t5 = t4._as(t5);
                t6 = J.getInterceptor$asx(t5);
                family = A._asString(t6.$index(t5, "family"));
                for (t5 = J.get$iterator$ax(t3._as(t6.$index(t5, "fonts"))); t5.moveNext$0();)
                  $async$self._registerFont$2(assetManager.getAssetUrl$1(A._asString(J.$index$asx(t1._as(t5.get$current(t5)), "asset"))), family);
              }
              if (!$async$self._registeredFontFamilies.contains$1(0, "Roboto"))
                $async$self._registerFont$2("https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Me5WZLCzYlKw.ttf", "Roboto");
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$registerFonts$1, $async$completer);
    },
    _registerFont$2(url, family) {
      this._registeredFontFamilies.add$1(0, family);
      this._pendingFonts.push(new A.SkiaFontCollection__registerFont__downloadFont(this, url, family).call$0());
    },
    _getArrayBuffer$1(fetchResult) {
      return A.promiseToFuture(fetchResult.arrayBuffer(), type$.dynamic).then$1$1(0, new A.SkiaFontCollection__getArrayBuffer_closure(), type$.ByteBuffer);
    }
  };
  A.SkiaFontCollection_ensureFontsLoaded_closure.prototype = {
    call$0() {
      return A._setArrayType([], type$.JSArray_SkFont);
    },
    $signature: 70
  };
  A.SkiaFontCollection_ensureFontsLoaded_closure0.prototype = {
    call$0() {
      return A._setArrayType([], type$.JSArray_SkFont);
    },
    $signature: 70
  };
  A.SkiaFontCollection__registerFont__downloadFont.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_RegisteredFont),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, e, exception, bytes, typeface, t1, t2, buffer, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              buffer = null;
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(A.httpFetch($async$self.url).then$1$1(0, $async$self.$this.get$_getArrayBuffer(), type$.ByteBuffer), $async$call$0);
            case 7:
              // returning from await.
              buffer = $async$result;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = A.unwrapException($async$exception);
              $.$get$printWarning().call$1("Failed to load font " + $async$self.family + " at " + $async$self.url);
              $.$get$printWarning().call$1(J.toString$0$(e));
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              bytes = A.NativeUint8List_NativeUint8List$view(buffer, 0, null);
              typeface = J.MakeFreeTypeFaceFromData$1$x(J.get$Typeface$x($.__canvasKit._readField$0()), bytes.buffer);
              t1 = $async$self.family;
              if (typeface != null) {
                $async$returnValue = A.RegisteredFont$(bytes, t1, typeface);
                // goto return
                $async$goto = 1;
                break;
              } else {
                t2 = $async$self.url;
                $.$get$printWarning().call$1("Failed to load font " + t1 + " at " + t2);
                $.$get$printWarning().call$1("Verify that " + t2 + " contains a valid font.");
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 108
  };
  A.SkiaFontCollection__getArrayBuffer_closure.prototype = {
    call$1(x) {
      return type$.ByteBuffer._as(x);
    },
    $signature: 71
  };
  A.RegisteredFont.prototype = {};
  A.downloadCanvasKit_closure.prototype = {
    call$2(file, unusedBase) {
      var t1 = $._configuration;
      if (t1 == null)
        t1 = $._configuration = new A.FlutterConfiguration(self.window.flutterConfiguration);
      t1 = t1.get$canvasKitBaseUrl(t1) + "profiling/";
      return t1 + file;
    },
    $signature: 110
  };
  A.downloadCanvasKit_closure0.prototype = {
    call$1(ck) {
      this.canvasKitInitCompleter.complete$1(0, ck);
    },
    $signature: 118
  };
  A._downloadCanvasKitJs_closure.prototype = {
    call$1(_) {
      J.cancel$0$z(this.loadSubscription._readLocal$0());
      this.canvasKitLoadCompleter.complete$0(0);
    },
    $signature: 1
  };
  A.IntervalTree.prototype = {};
  A.IntervalTree_IntervalTree$createFromRanges_closure.prototype = {
    call$2(key, rangeList) {
      var t1, t2, t3, t4, t5;
      for (t1 = J.get$iterator$ax(rangeList), t2 = this.intervals, t3 = this.T._eval$1("IntervalTreeNode<0>"); t1.moveNext$0();) {
        t4 = t1.get$current(t1);
        t5 = t4.start;
        t4 = t4.end;
        t2.push(new A.IntervalTreeNode(key, t5, t4, t4, t3));
      }
    },
    $signature() {
      return this.T._eval$1("~(0,List<CodeunitRange>)");
    }
  };
  A.IntervalTree_IntervalTree$createFromRanges_closure0.prototype = {
    call$2(a, b) {
      return a.low - b.low;
    },
    $signature() {
      return this.T._eval$1("int(IntervalTreeNode<0>,IntervalTreeNode<0>)");
    }
  };
  A.IntervalTree_IntervalTree$createFromRanges__makeBalancedTree.prototype = {
    call$1(nodes) {
      var mid, root,
        t1 = nodes.length;
      if (t1 === 0)
        return null;
      if (t1 === 1)
        return B.JSArray_methods.get$single(nodes);
      mid = t1 / 2 | 0;
      root = nodes[mid];
      root.left = this.call$1(B.JSArray_methods.sublist$2(nodes, 0, mid));
      root.right = this.call$1(B.JSArray_methods.sublist$1(nodes, mid + 1));
      return root;
    },
    $signature() {
      return this.T._eval$1("IntervalTreeNode<0>?(List<IntervalTreeNode<0>>)");
    }
  };
  A.IntervalTree_IntervalTree$createFromRanges__computeHigh.prototype = {
    call$1(root) {
      var t3, _this = this,
        t1 = root.left,
        t2 = t1 == null;
      if (t2 && root.right == null)
        root.computedHigh = root.high;
      else if (t2) {
        t1 = root.right;
        t1.toString;
        _this.call$1(t1);
        root.computedHigh = Math.max(root.high, root.right.computedHigh);
      } else {
        t2 = root.right;
        t3 = root.high;
        if (t2 == null) {
          _this.call$1(t1);
          root.computedHigh = Math.max(t3, root.left.computedHigh);
        } else {
          _this.call$1(t2);
          t1 = root.left;
          t1.toString;
          _this.call$1(t1);
          root.computedHigh = Math.max(t3, Math.max(root.left.computedHigh, root.right.computedHigh));
        }
      }
    },
    $signature() {
      return this.T._eval$1("~(IntervalTreeNode<0>)");
    }
  };
  A.IntervalTreeNode.prototype = {
    containsShallow$1(x) {
      return this.low <= x && x <= this.high;
    },
    containsDeep$1(x) {
      var t1, _this = this;
      if (x > _this.computedHigh)
        return false;
      if (_this.containsShallow$1(x))
        return true;
      t1 = _this.left;
      if ((t1 == null ? null : t1.containsDeep$1(x)) === true)
        return true;
      if (x < _this.low)
        return false;
      t1 = _this.right;
      return (t1 == null ? null : t1.containsDeep$1(x)) === true;
    },
    searchForPoint$2(x, result) {
      var t1, _this = this;
      if (x > _this.computedHigh)
        return;
      t1 = _this.left;
      if (t1 != null)
        t1.searchForPoint$2(x, result);
      if (_this.containsShallow$1(x))
        result.push(_this.value);
      if (x < _this.low)
        return;
      t1 = _this.right;
      if (t1 != null)
        t1.searchForPoint$2(x, result);
    }
  };
  A.Layer.prototype = {
    dispose$0(_) {
    }
  };
  A.PrerollContext.prototype = {};
  A.PaintContext.prototype = {};
  A.ContainerLayer.prototype = {
    preroll$2(prerollContext, matrix) {
      this.paintBounds = this.prerollChildren$2(prerollContext, matrix);
    },
    prerollChildren$2(context, childMatrix) {
      var t1, t2, childPaintBounds, _i, layer, t3;
      for (t1 = this._layers, t2 = t1.length, childPaintBounds = B.Rect_0_0_0_0, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        layer = t1[_i];
        layer.preroll$2(context, childMatrix);
        if (childPaintBounds.left >= childPaintBounds.right || childPaintBounds.top >= childPaintBounds.bottom)
          childPaintBounds = layer.paintBounds;
        else {
          t3 = layer.paintBounds;
          if (!(t3.left >= t3.right || t3.top >= t3.bottom))
            childPaintBounds = childPaintBounds.expandToInclude$1(t3);
        }
      }
      return childPaintBounds;
    },
    paintChildren$1(context) {
      var t1, t2, _i, layer, t3;
      for (t1 = this._layers, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        layer = t1[_i];
        t3 = layer.paintBounds;
        if (!(t3.left >= t3.right || t3.top >= t3.bottom))
          layer.paint$1(context);
      }
    }
  };
  A.RootLayer.prototype = {
    paint$1(paintContext) {
      this.paintChildren$1(paintContext);
    }
  };
  A.ClipPathEngineLayer.prototype = {
    preroll$2(prerollContext, matrix) {
      var childPaintBounds, clipBounds, _null = null,
        t1 = this.__engine$_clipPath,
        t2 = prerollContext.mutatorsStack._mutators;
      t2.push(new A.Mutator(B.MutatorType_2, _null, _null, t1, _null, _null));
      childPaintBounds = this.prerollChildren$2(prerollContext, matrix);
      clipBounds = A.fromSkRect(J.getBounds$0$x(t1.get$skiaObject()));
      if (childPaintBounds.overlaps$1(clipBounds))
        this.paintBounds = childPaintBounds.intersect$1(clipBounds);
      t2.pop();
    },
    paint$1(paintContext) {
      var t2, _this = this,
        t1 = paintContext.internalNodesCanvas;
      t1.save$0(0);
      t2 = _this.__engine$_clipBehavior;
      t1.clipPath$2(0, _this.__engine$_clipPath, t2 !== B.Clip_1);
      t2 = t2 === B.Clip_3;
      if (t2)
        t1.saveLayer$2(0, _this.paintBounds, null);
      _this.paintChildren$1(paintContext);
      if (t2)
        t1.restore$0(0);
      t1.restore$0(0);
    },
    $isClipPathEngineLayer0: 1
  };
  A.ClipRectEngineLayer.prototype = {
    preroll$2(prerollContext, matrix) {
      var childPaintBounds, _null = null,
        t1 = this._clipRect,
        t2 = prerollContext.mutatorsStack._mutators;
      t2.push(new A.Mutator(B.MutatorType_0, t1, _null, _null, _null, _null));
      childPaintBounds = this.prerollChildren$2(prerollContext, matrix);
      if (childPaintBounds.overlaps$1(t1))
        this.paintBounds = childPaintBounds.intersect$1(t1);
      t2.pop();
    },
    paint$1(paintContext) {
      var t2, t3,
        t1 = paintContext.internalNodesCanvas;
      t1.save$0(0);
      t2 = this._clipRect;
      t3 = this.__engine$_clipBehavior;
      t1.clipRect$3(0, t2, B.ClipOp_1, t3 !== B.Clip_1);
      t3 = t3 === B.Clip_3;
      if (t3)
        t1.saveLayer$2(0, t2, null);
      this.paintChildren$1(paintContext);
      if (t3)
        t1.restore$0(0);
      t1.restore$0(0);
    },
    $isClipRectEngineLayer0: 1
  };
  A.TransformEngineLayer.prototype = {
    preroll$2(prerollContext, matrix) {
      var _null = null,
        t1 = this.__engine$_transform,
        childMatrix = matrix.multiplied$1(t1),
        t2 = prerollContext.mutatorsStack._mutators;
      t2.push(new A.Mutator(B.MutatorType_3, _null, _null, _null, t1, _null));
      this.paintBounds = A.transformRect(t1, this.prerollChildren$2(prerollContext, childMatrix));
      t2.pop();
    },
    paint$1(paintContext) {
      var t1 = paintContext.internalNodesCanvas;
      t1.save$0(0);
      t1.transform$1(0, this.__engine$_transform.__engine$_m4storage);
      this.paintChildren$1(paintContext);
      t1.restore$0(0);
    },
    $isTransformEngineLayer0: 1
  };
  A.OffsetEngineLayer.prototype = {$isOffsetEngineLayer0: 1};
  A.PictureLayer0.prototype = {
    preroll$2(prerollContext, matrix) {
      this.paintBounds = this.picture.cullRect.shift$1(this.offset);
    },
    paint$1(paintContext) {
      var t2,
        t1 = paintContext.leafNodesCanvas;
      t1.save$0(0);
      t2 = this.offset;
      t1.translate$2(0, t2._dx, t2._dy);
      t1.drawPicture$1(0, this.picture);
      t1.restore$0(0);
    }
  };
  A.PhysicalShapeEngineLayer.prototype = {
    preroll$2(prerollContext, matrix) {
      var t1, _this = this;
      _this.prerollChildren$2(prerollContext, matrix);
      t1 = $.$get$window()._debugDevicePixelRatio;
      if (t1 == null)
        t1 = A.EnginePlatformDispatcher_browserDevicePixelRatio();
      _this.paintBounds = A.computeSkShadowBounds(_this.__engine$_path, _this.__engine$_elevation, t1, matrix);
    },
    paint$1(paintContext) {
      var t2, paint, t3, saveCount, _this = this,
        t1 = _this.__engine$_elevation;
      if (t1 !== 0) {
        t2 = _this.__engine$_shadowColor;
        t2.toString;
        paintContext.leafNodesCanvas.drawShadow$4(0, _this.__engine$_path, t2, t1, (_this._color.value >>> 24 & 255) !== 255);
      }
      paint = A.CkPaint$();
      paint.set$color(0, _this._color);
      t1 = _this.__engine$_clipBehavior;
      t2 = t1 === B.Clip_3;
      if (!t2)
        paintContext.leafNodesCanvas.drawPath$2(0, _this.__engine$_path, paint);
      t3 = paintContext.internalNodesCanvas;
      saveCount = t3.save$0(0);
      switch (t1.index) {
        case 1:
          t3.clipPath$2(0, _this.__engine$_path, false);
          break;
        case 2:
          t3.clipPath$2(0, _this.__engine$_path, true);
          break;
        case 3:
          t3.clipPath$2(0, _this.__engine$_path, true);
          t3.saveLayer$2(0, _this.paintBounds, null);
          break;
        case 0:
          break;
      }
      if (t2)
        paintContext.leafNodesCanvas.drawPaint$1(0, paint);
      _this.paintChildren$1(paintContext);
      t3.restoreToCount$1(0, saveCount);
    },
    $isPhysicalShapeEngineLayer0: 1
  };
  A.LayerScene.prototype = {
    dispose$0(_) {
    }
  };
  A.LayerSceneBuilder.prototype = {
    addPicture$4$isComplexHint$willChangeHint(offset, picture, isComplexHint, willChangeHint) {
      var t1 = A._lateReadCheck(this.__LayerSceneBuilder_currentLayer, "currentLayer"),
        t2 = new A.PictureLayer0(type$.CkPicture._as(picture), offset, B.Rect_0_0_0_0);
      t2.parent = t1;
      t1._layers.push(t2);
    },
    addRetained$1(retainedLayer) {
      var t1 = A._lateReadCheck(this.__LayerSceneBuilder_currentLayer, "currentLayer");
      type$.Layer._as(retainedLayer);
      retainedLayer.parent = t1;
      t1._layers.push(retainedLayer);
    },
    build$0(_) {
      return new A.LayerScene(new A.LayerTree(this.rootLayer, $.$get$window().get$physicalSize()));
    },
    pop$0(_) {
      var t1, _this = this,
        _s12_ = "currentLayer";
      if (A._lateReadCheck(_this.__LayerSceneBuilder_currentLayer, _s12_) === _this.rootLayer)
        return;
      t1 = A._lateReadCheck(_this.__LayerSceneBuilder_currentLayer, _s12_).parent;
      t1.toString;
      _this.__LayerSceneBuilder_currentLayer = t1;
    },
    pushClipPath$3$clipBehavior$oldLayer(path, clipBehavior, oldLayer) {
      return this.pushLayer$1(new A.ClipPathEngineLayer(type$.CkPath._as(path), clipBehavior, A._setArrayType([], type$.JSArray_Layer), B.Rect_0_0_0_0));
    },
    pushClipRect$3$clipBehavior$oldLayer(rect, clipBehavior, oldLayer) {
      return this.pushLayer$1(new A.ClipRectEngineLayer(rect, clipBehavior, A._setArrayType([], type$.JSArray_Layer), B.Rect_0_0_0_0));
    },
    pushOffset$3$oldLayer(dx, dy, oldLayer) {
      var t1 = A.Matrix4$identity();
      t1.setTranslationRaw$3(dx, dy, 0);
      return this.pushLayer$1(new A.OffsetEngineLayer(t1, A._setArrayType([], type$.JSArray_Layer), B.Rect_0_0_0_0));
    },
    pushPhysicalShape$6$clipBehavior$color$elevation$oldLayer$path$shadowColor(clipBehavior, color, elevation, oldLayer, path, shadowColor) {
      return this.pushLayer$1(new A.PhysicalShapeEngineLayer(elevation, color, shadowColor, type$.CkPath._as(path), clipBehavior, A._setArrayType([], type$.JSArray_Layer), B.Rect_0_0_0_0));
    },
    pushTransform$2$oldLayer(matrix4, oldLayer) {
      return this.pushLayer$1(new A.TransformEngineLayer(new A.Matrix40(A.toMatrix32(matrix4)), A._setArrayType([], type$.JSArray_Layer), B.Rect_0_0_0_0));
    },
    pushLayer$1$1(layer) {
      var t1 = A._lateReadCheck(this.__LayerSceneBuilder_currentLayer, "currentLayer");
      layer.parent = t1;
      t1._layers.push(layer);
      return this.__LayerSceneBuilder_currentLayer = layer;
    },
    pushLayer$1(layer) {
      return this.pushLayer$1$1(layer, type$.ContainerLayer);
    }
  };
  A.LayerTree.prototype = {
    paint$2$ignoreRasterCache(frame, ignoreRasterCache) {
      var overlayCanvases, i, t3,
        t1 = A._setArrayType([], type$.JSArray_CkCanvas),
        internalNodesCanvas = new A.CkNWayCanvas(t1),
        t2 = frame.canvas;
      t1.push(t2);
      overlayCanvases = frame.viewEmbedder.getOverlayCanvases$0();
      for (i = 0; i < overlayCanvases.length; ++i)
        t1.push(overlayCanvases[i]);
      internalNodesCanvas.clear$1(0, B.Color_0);
      t1 = this.rootLayer;
      t3 = t1.paintBounds;
      if (!t3.get$isEmpty(t3))
        t1.paintChildren$1(new A.PaintContext(internalNodesCanvas, t2));
    }
  };
  A.Frame.prototype = {
    raster$2$ignoreRasterCache(layerTree, ignoreRasterCache) {
      A.timeAction("preroll_frame", new A.Frame_raster_closure(this, layerTree, true));
      A.timeAction("apply_frame", new A.Frame_raster_closure0(this, layerTree, true));
      return true;
    }
  };
  A.Frame_raster_closure.prototype = {
    call$0() {
      var t1 = this.layerTree.rootLayer;
      t1.paintBounds = t1.prerollChildren$2(new A.PrerollContext(new A.MutatorsStack(A._setArrayType([], type$.JSArray_Mutator))), A.Matrix4$identity());
    },
    $signature: 0
  };
  A.Frame_raster_closure0.prototype = {
    call$0() {
      this.layerTree.paint$2$ignoreRasterCache(this.$this, this.ignoreRasterCache);
    },
    $signature: 0
  };
  A.CompositorContext.prototype = {};
  A.CkMaskFilter.prototype = {
    createDefault$0() {
      return this._initSkiaObject$0();
    },
    resurrect$0() {
      return this._initSkiaObject$0();
    },
    _initSkiaObject$0() {
      var t1 = J.MakeBlur$3$x(J.get$MaskFilter$x($.__canvasKit._readField$0()), $.$get$_skBlurStyles()[this._blurStyle.index], this.__engine$_sigma, true);
      t1.toString;
      return t1;
    },
    delete$0(_) {
      var t1 = this.rawSkiaObject;
      if (t1 != null)
        J.delete$0$x(t1);
    }
  };
  A.CkNWayCanvas.prototype = {
    save$0(_) {
      var t1, saveCount, i;
      for (t1 = this._canvases, saveCount = 0, i = 0; i < t1.length; ++i)
        saveCount = t1[i].save$0(0);
      return saveCount;
    },
    saveLayer$2(_, bounds, paint) {
      var t1, i;
      for (t1 = this._canvases, i = 0; i < t1.length; ++i)
        t1[i].saveLayer$2(0, bounds, paint);
    },
    restore$0(_) {
      var t1, i;
      for (t1 = this._canvases, i = 0; i < t1.length; ++i)
        t1[i].restore$0(0);
    },
    restoreToCount$1(_, count) {
      var t1, i;
      for (t1 = this._canvases, i = 0; i < t1.length; ++i)
        t1[i].restoreToCount$1(0, count);
    },
    transform$1(_, matrix) {
      var t1, i;
      for (t1 = this._canvases, i = 0; i < t1.length; ++i)
        t1[i].transform$1(0, matrix);
    },
    clear$1(_, color) {
      var t1, i;
      for (t1 = this._canvases, i = 0; i < t1.length; ++i)
        t1[i].clear$1(0, color);
    },
    clipPath$2(_, path, doAntiAlias) {
      var t1, i;
      for (t1 = this._canvases, i = 0; i < t1.length; ++i)
        t1[i].clipPath$2(0, path, doAntiAlias);
    },
    clipRect$3(_, rect, clipOp, doAntiAlias) {
      var t1, i;
      for (t1 = this._canvases, i = 0; i < t1.length; ++i)
        t1[i].clipRect$3(0, rect, clipOp, doAntiAlias);
    }
  };
  A.CkPaint.prototype = {
    set$blendMode(value) {
      if (this._blendMode === value)
        return;
      this._blendMode = value;
      J.setBlendMode$1$x(this.get$skiaObject(), $.$get$_skBlendModes()[value.index]);
    },
    get$style(_) {
      return this._style;
    },
    set$style(_, value) {
      if (this._style === value)
        return;
      this._style = value;
      J.setStyle$1$x(this.get$skiaObject(), $.$get$_skPaintStyles()[value.index]);
    },
    get$strokeWidth() {
      return this._strokeWidth;
    },
    set$strokeWidth(value) {
      if (this._strokeWidth === value)
        return;
      this._strokeWidth = value;
      J.setStrokeWidth$1$x(this.get$skiaObject(), value);
    },
    get$color(_) {
      return this._color;
    },
    set$color(_, value) {
      if (this._color.$eq(0, value))
        return;
      this._color = value;
      J.setColorInt$1$x(this.get$skiaObject(), value.value);
    },
    set$shader(value) {
      var t1, t2, _this = this;
      if (_this._shader == value)
        return;
      _this._shader = type$.nullable_CkShader._as(value);
      t1 = _this.get$skiaObject();
      t2 = _this._shader;
      J.setShader$1$x(t1, t2 == null ? null : t2.get$skiaObject());
    },
    set$maskFilter(value) {
      var t1, t2, _this = this;
      if (value.$eq(0, _this._maskFilter))
        return;
      _this._maskFilter = value;
      t1 = value._sigma;
      if (!(isFinite(t1) && t1 > 0))
        _this._ckMaskFilter = null;
      else {
        t1 = new A.CkMaskFilter(value._ui$_style, t1);
        t1.ManagedSkiaObject$1(null, type$.SkMaskFilter);
        _this._ckMaskFilter = t1;
      }
      t1 = _this.get$skiaObject();
      t2 = _this._ckMaskFilter;
      J.setMaskFilter$1$x(t1, t2 == null ? null : t2.get$skiaObject());
    },
    createDefault$0() {
      var paint = new self.window.flutterCanvasKit.Paint(),
        t1 = J.getInterceptor$x(paint);
      t1.setAntiAlias$1(paint, this._isAntiAlias);
      t1.setColorInt$1(paint, this._color.value);
      return paint;
    },
    resurrect$0() {
      var _this = this, _null = null,
        paint = new self.window.flutterCanvasKit.Paint(),
        t1 = _this._blendMode,
        t2 = J.getInterceptor$x(paint);
      t2.setBlendMode$1(paint, $.$get$_skBlendModes()[t1.index]);
      t1 = _this._style;
      t2.setStyle$1(paint, $.$get$_skPaintStyles()[t1.index]);
      t2.setStrokeWidth$1(paint, _this._strokeWidth);
      t2.setAntiAlias$1(paint, _this._isAntiAlias);
      t2.setColorInt$1(paint, _this._color.value);
      t1 = _this._shader;
      t2.setShader$1(paint, t1 == null ? _null : t1.get$skiaObject());
      t1 = _this._ckMaskFilter;
      t2.setMaskFilter$1(paint, t1 == null ? _null : t1.get$skiaObject());
      t1 = _this._effectiveColorFilter;
      t2.setColorFilter$1(paint, t1 == null ? _null : t1.get$skiaObject());
      t1 = _this._managedImageFilter;
      t2.setImageFilter$1(paint, t1 == null ? _null : t1.get$skiaObject());
      t2.setStrokeCap$1(paint, $.$get$_skStrokeCaps()[0]);
      t2.setStrokeJoin$1(paint, $.$get$_skStrokeJoins()[0]);
      t2.setStrokeMiter$1(paint, 0);
      return paint;
    },
    delete$0(_) {
      var t1 = this.rawSkiaObject;
      if (t1 != null)
        J.delete$0$x(t1);
    },
    $isPaint: 1
  };
  A.CkPath.prototype = {
    set$fillType(newFillType) {
      if (this._fillType === newFillType)
        return;
      this._fillType = newFillType;
      J.setFillType$1$x(this.get$skiaObject(), $.$get$_skFillTypes()[newFillType.index]);
    },
    addOval$1(_, oval) {
      J.addOval$3$x(this.get$skiaObject(), A.toSkRect(oval), false, 1);
    },
    addRRect$1(_, rrect) {
      J.addRRect$2$x(this.get$skiaObject(), A.toSkRRect(rrect), false);
    },
    addRect$1(_, rect) {
      J.addRect$1$x(this.get$skiaObject(), A.toSkRect(rect));
    },
    close$0(_) {
      J.close$0$x(this.get$skiaObject());
    },
    contains$1(_, point) {
      return J.contains$2$asx(this.get$skiaObject(), point._dx, point._dy);
    },
    getBounds$0(_) {
      var t1 = J.getBounds$0$x(this.get$skiaObject());
      return new A.Rect(t1[0], t1[1], t1[2], t1[3]);
    },
    lineTo$2(_, x, y) {
      J.lineTo$2$x(this.get$skiaObject(), x, y);
    },
    moveTo$2(_, x, y) {
      J.moveTo$2$x(this.get$skiaObject(), x, y);
    },
    reset$0(_) {
      this._fillType = B.PathFillType_0;
      J.reset$0$x(this.get$skiaObject());
    },
    shift$1(offset) {
      var t1, t2, t3,
        shiftedPath = J.copy$0$x(this.get$skiaObject());
      J.transform$9$x(shiftedPath, 1, 0, offset._dx, 0, 1, offset._dy, 0, 0, 1);
      t1 = new A.CkPath(this._fillType);
      t1.ManagedSkiaObject$1(shiftedPath, type$.SkPath);
      t2 = t1.get$skiaObject();
      t3 = t1._fillType;
      J.setFillType$1$x(t2, $.$get$_skFillTypes()[t3.index]);
      return t1;
    },
    get$isResurrectionExpensive() {
      return true;
    },
    createDefault$0() {
      var path = new self.window.flutterCanvasKit.Path(),
        t1 = this._fillType;
      J.setFillType$1$x(path, $.$get$_skFillTypes()[t1.index]);
      return path;
    },
    delete$0(_) {
      var t1;
      this._cachedCommands = J.toCmds$0$x(this.get$skiaObject());
      t1 = this.rawSkiaObject;
      if (t1 != null)
        J.delete$0$x(t1);
    },
    resurrect$0() {
      var path,
        t1 = J.get$Path$x($.__canvasKit._readField$0()),
        t2 = this._cachedCommands;
      t2.toString;
      path = J.MakeFromCmds$1$x(t1, t2);
      t2 = this._fillType;
      J.setFillType$1$x(path, $.$get$_skFillTypes()[t2.index]);
      return path;
    },
    $isPath: 1
  };
  A.CkPicture.prototype = {
    dispose$0(_) {
      var t1, _this = this;
      _this._isDisposed = true;
      t1 = _this._snapshot;
      if (t1 != null)
        t1.dispose$0(0);
      t1 = _this.rawSkiaObject;
      if (t1 != null)
        J.delete$0$x(t1);
      _this.rawSkiaObject = null;
    },
    get$isResurrectionExpensive() {
      return true;
    },
    createDefault$0() {
      throw A.wrapException(A.StateError$("Unreachable code"));
    },
    resurrect$0() {
      return this._snapshot.toPicture$0();
    },
    delete$0(_) {
      var t1;
      if (!this._isDisposed) {
        t1 = this.rawSkiaObject;
        if (t1 != null)
          J.delete$0$x(t1);
      }
    }
  };
  A.CkPictureRecorder.prototype = {
    beginRecording$1(_, bounds) {
      var recorder, skCanvas;
      this._cullRect = bounds;
      recorder = new self.window.flutterCanvasKit.PictureRecorder();
      this._skRecorder = recorder;
      skCanvas = J.beginRecording$1$x(recorder, A.toSkRect(bounds));
      return this._recordingCanvas = $.$get$browserSupportsFinalizationRegistry() ? new A.CkCanvas(skCanvas) : new A.RecordingCkCanvas(new A.CkPictureSnapshot(bounds, A._setArrayType([], type$.JSArray_CkPaintCommand)), skCanvas);
    },
    endRecording$0() {
      var t1, skPicture, _this = this,
        recorder = _this._skRecorder;
      if (recorder == null)
        throw A.wrapException(A.StateError$("PictureRecorder is not recording"));
      t1 = J.getInterceptor$x(recorder);
      skPicture = t1.finishRecordingAsPicture$0(recorder);
      t1.delete$0(recorder);
      _this._skRecorder = null;
      t1 = new A.CkPicture(_this._cullRect, _this._recordingCanvas.get$pictureSnapshot());
      t1.ManagedSkiaObject$1(skPicture, type$.SkPicture);
      return t1;
    },
    get$isRecording() {
      return this._skRecorder != null;
    }
  };
  A.Rasterizer.prototype = {
    draw$1(layerTree) {
      var frame, canvas, compositorFrame, t1, t2;
      try {
        t1 = layerTree.frameSize;
        if (t1.get$isEmpty(t1))
          return;
        frame = A.SurfaceFactory_instance().baseSurface.acquireFrame$1(t1);
        $.$get$HtmlViewEmbedder_instance()._frameSize = t1;
        canvas = new A.CkCanvas(J.getCanvas$0$x(frame.skiaSurface.surface));
        compositorFrame = new A.Frame(canvas, null, $.$get$HtmlViewEmbedder_instance());
        compositorFrame.raster$2$ignoreRasterCache(layerTree, true);
        t1 = A.SurfaceFactory_instance().baseSurface;
        if (!t1._addedToScene) {
          t2 = $.skiaSceneHost;
          t2.toString;
          J.get$children$x(t2).insert$2(0, 0, t1.htmlElement);
        }
        t1._addedToScene = true;
        J.submit$0$z(frame);
        $.$get$HtmlViewEmbedder_instance().submitFrame$0(0);
      } finally {
        this._runPostFrameCallbacks$0();
      }
    },
    _runPostFrameCallbacks$0() {
      var t1, i;
      for (t1 = this._postFrameCallbacks, i = 0; i < t1.length; ++i)
        t1[i].call$0();
      for (t1 = $.frameReferences, i = 0; i < t1.length; ++i)
        t1[i].value = null;
      B.JSArray_methods.set$length(t1, 0);
    }
  };
  A.CkShader.prototype = {
    delete$0(_) {
      var t1 = this.rawSkiaObject;
      if (t1 != null)
        J.delete$0$x(t1);
    }
  };
  A.CkGradientLinear.prototype = {
    createDefault$0() {
      var _this = this,
        t1 = J.get$Shader$x($.__canvasKit._readField$0()),
        t2 = A.toSkPoint(_this.from),
        t3 = A.toSkPoint(_this.to),
        t4 = A.toFlatColors(_this.colors),
        t5 = A.toSkColorStops(_this.colorStops),
        t6 = $.$get$_skTileModes()[_this.tileMode.index],
        t7 = _this.matrix4;
      return J.MakeLinearGradient$6$x(t1, t2, t3, t4, t5, t6, t7 != null ? A.toSkMatrixFromFloat32(t7) : null);
    },
    resurrect$0() {
      return this.createDefault$0();
    }
  };
  A.SkiaObjectCache.prototype = {
    get$length(_) {
      return this._itemQueue._elementCount;
    },
    add$1(_, object) {
      var t2, _this = this,
        t1 = _this._itemQueue;
      t1.addFirst$1(object);
      t2 = t1._sentinel._nextLink._asNonSentinelEntry$0();
      t2.toString;
      _this._itemMap.$indexSet(0, object, t2);
      if (t1._elementCount > _this.maximumSize)
        A.SkiaObjects_markCacheForResize(_this);
    },
    resize$0(_) {
      var t1, t2, t3, i, result,
        itemsToDelete = this.maximumSize / 2 | 0;
      for (t1 = this._itemQueue, t2 = t1._sentinel, t3 = this._itemMap, i = 0; i < itemsToDelete; ++i) {
        result = t2._previousLink._remove$0(0);
        --t1._elementCount;
        t3.remove$1(0, result);
        result.delete$0(0);
        result.didDelete$0();
      }
    }
  };
  A.SynchronousSkiaObjectCache.prototype = {
    get$length(_) {
      return this._itemQueue._elementCount;
    },
    add$1(_, object) {
      var t1 = this._itemQueue;
      t1.addFirst$1(object);
      t1 = t1._sentinel._nextLink._asNonSentinelEntry$0();
      t1.toString;
      this._itemMap.$indexSet(0, object, t1);
      this._enforceCacheLimit$0();
    },
    markUsed$1(object) {
      var t2,
        t1 = this._itemMap,
        item = t1.$index(0, object);
      if (item == null)
        return false;
      item.remove$0(0);
      t2 = this._itemQueue;
      t2.addFirst$1(object);
      t2 = t2._sentinel._nextLink._asNonSentinelEntry$0();
      t2.toString;
      t1.$indexSet(0, object, t2);
      return true;
    },
    _enforceCacheLimit$0() {
      var t1, t2, t3, t4, result;
      for (t1 = this._itemQueue, t2 = this.maximumSize, t3 = t1._sentinel, t4 = this._itemMap; t1._elementCount > t2;) {
        result = t3._previousLink._remove$0(0);
        --t1._elementCount;
        t4.remove$1(0, result);
        result.delete$0(0);
        result.didDelete$0();
      }
    }
  };
  A.SkiaObject.prototype = {};
  A.ManagedSkiaObject.prototype = {
    ManagedSkiaObject$1(instance, $T) {
      var _this = this,
        defaultObject = instance == null ? _this.createDefault$0() : instance;
      _this.rawSkiaObject = defaultObject;
      if ($.$get$browserSupportsFinalizationRegistry())
        $.$get$Collector__instance().register$2(0, _this, type$.SkDeletable._as(defaultObject));
      else if (_this.get$isResurrectionExpensive()) {
        A.SkiaObjects_registerCleanupCallback();
        $.$get$SkiaObjects_expensiveCache().add$1(0, _this);
      } else {
        A.SkiaObjects_registerCleanupCallback();
        $.SkiaObjects_resurrectableObjects.push(_this);
      }
    },
    get$skiaObject() {
      var skiaObject, _this = this,
        t1 = _this.rawSkiaObject;
      if (t1 == null) {
        skiaObject = _this.resurrect$0();
        _this.rawSkiaObject = skiaObject;
        if (_this.get$isResurrectionExpensive()) {
          A.SkiaObjects_registerCleanupCallback();
          $.$get$SkiaObjects_expensiveCache().add$1(0, _this);
        } else {
          A.SkiaObjects_registerCleanupCallback();
          $.SkiaObjects_resurrectableObjects.push(_this);
        }
        t1 = skiaObject;
      }
      return t1;
    },
    didDelete$0() {
      if (this.rawSkiaObject == null)
        return;
      this.rawSkiaObject = null;
    },
    get$isResurrectionExpensive() {
      return false;
    }
  };
  A.SurfaceFrame.prototype = {
    submit$0(_) {
      return this.submitCallback.call$2(this, new A.CkCanvas(J.getCanvas$0$x(this.skiaSurface.surface)));
    }
  };
  A.Surface.prototype = {
    _syncCacheBytes$0() {
      var t2,
        t1 = this._skiaCacheBytes;
      if (t1 != null) {
        t2 = this._grContext;
        if (t2 != null)
          J.setResourceCacheLimitBytes$1$x(t2, t1);
      }
    },
    acquireFrame$1(size) {
      return new A.SurfaceFrame(this.createOrUpdateSurface$1(size), new A.Surface_acquireFrame_closure(this));
    },
    createOrUpdateSurface$1(size) {
      var t1, previousSurfaceSize, t2, previousCanvasSize, newSize, htmlCanvas, t3, glContext, surfaceHeight, _this = this,
        _s20_ = "webglcontextrestored",
        _s16_ = "webglcontextlost";
      if ($.$get$useH5vccCanvasKit()) {
        t1 = _this._surface;
        return t1 == null ? _this._surface = new A.CkSurface(J.getH5vccSkSurface$0$x($.__canvasKit._readField$0())) : t1;
      }
      if (size.get$isEmpty(size))
        throw A.wrapException(A.CanvasKitError$("Cannot create surfaces of empty size."));
      previousSurfaceSize = _this._currentSurfaceSize;
      if (!_this._forceNewContext && previousSurfaceSize != null && size._dx === previousSurfaceSize._dx && size._dy === previousSurfaceSize._dy) {
        t1 = $.$get$window()._debugDevicePixelRatio;
        if (t1 == null)
          t1 = A.EnginePlatformDispatcher_browserDevicePixelRatio();
        if (t1 !== _this._currentDevicePixelRatio)
          _this._updateLogicalHtmlCanvasSize$0();
        t1 = _this._surface;
        t1.toString;
        return t1;
      }
      t1 = $.$get$window();
      t2 = t1._debugDevicePixelRatio;
      _this._currentDevicePixelRatio = t2 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t2;
      previousCanvasSize = _this._currentCanvasPhysicalSize;
      if (_this._forceNewContext || previousCanvasSize == null || size._dx > previousCanvasSize._dx || size._dy > previousCanvasSize._dy) {
        newSize = previousCanvasSize == null ? size : size.$mul(0, 1.4);
        t2 = _this._surface;
        if (t2 != null)
          t2.dispose$0(0);
        _this._surface = null;
        _this._addedToScene = false;
        t2 = _this._grContext;
        if (t2 != null)
          J.releaseResourcesAndAbandonContext$0$x(t2);
        t2 = _this._grContext;
        if (t2 != null)
          J.delete$0$x(t2);
        _this._grContext = null;
        t2 = _this.htmlCanvas;
        if (t2 != null) {
          B.CanvasElement_methods.removeEventListener$3(t2, _s20_, _this._cachedContextRestoredListener, false);
          t2 = _this.htmlCanvas;
          t2.toString;
          B.CanvasElement_methods.removeEventListener$3(t2, _s16_, _this._cachedContextLostListener, false);
          t2 = _this.htmlCanvas;
          t2.toString;
          B.CanvasElement_methods.remove$0(t2);
          _this._cachedContextLostListener = _this._cachedContextRestoredListener = null;
        }
        _this._pixelWidth = B.JSNumber_methods.ceil$0(newSize._dx);
        t2 = B.JSNumber_methods.ceil$0(newSize._dy);
        _this._pixelHeight = t2;
        htmlCanvas = _this.htmlCanvas = A.CanvasElement_CanvasElement(t2, _this._pixelWidth);
        t2 = htmlCanvas.style;
        t2.position = "absolute";
        _this._updateLogicalHtmlCanvasSize$0();
        _this._cachedContextRestoredListener = _this.get$_contextRestoredListener();
        t2 = _this.get$_contextLostListener();
        _this._cachedContextLostListener = t2;
        B.CanvasElement_methods.addEventListener$3(htmlCanvas, _s16_, t2, false);
        B.CanvasElement_methods.addEventListener$3(htmlCanvas, _s20_, _this._cachedContextRestoredListener, false);
        t2 = _this._contextLost = _this._forceNewContext = false;
        t3 = $._cachedWebGLVersion;
        if ((t3 == null ? $._cachedWebGLVersion = A._detectWebGLVersion() : t3) !== -1) {
          t2 = $._configuration;
          if (t2 == null)
            t2 = $._configuration = new A.FlutterConfiguration(self.window.flutterConfiguration);
          t2 = !t2.get$canvasKitForceCpuOnly(t2);
        }
        if (t2) {
          t2 = $.__canvasKit._readField$0();
          t3 = $._cachedWebGLVersion;
          if (t3 == null)
            t3 = $._cachedWebGLVersion = A._detectWebGLVersion();
          glContext = _this._glContext = J.GetWebGLContext$2$x(t2, htmlCanvas, {antialias: 0, majorVersion: t3});
          if (glContext !== 0) {
            t2 = J.MakeGrContext$1$x($.__canvasKit._readField$0(), glContext);
            _this._grContext = t2;
            if (t2 == null)
              A.throwExpression(A.CanvasKitError$("Failed to initialize CanvasKit. CanvasKit.MakeGrContext returned null."));
            _this._syncCacheBytes$0();
          }
        }
        _this.htmlElement.appendChild(htmlCanvas);
        _this._currentCanvasPhysicalSize = newSize;
      }
      _this._currentSurfaceSize = size;
      surfaceHeight = B.JSNumber_methods.ceil$0(size._dy);
      t2 = _this._pixelHeight;
      t1 = t1._debugDevicePixelRatio;
      if (t1 == null)
        t1 = A.EnginePlatformDispatcher_browserDevicePixelRatio();
      t3 = _this.htmlCanvas.style;
      t1 = "translate(0, -" + A.S((t2 - surfaceHeight) / t1) + "px)";
      B.CssStyleDeclaration_methods._setPropertyHelper$3(t3, B.CssStyleDeclaration_methods._browserPropertyName$1(t3, "transform"), t1, "");
      return _this._surface = _this._createNewSurface$1(size);
    },
    _updateLogicalHtmlCanvasSize$0() {
      var t4, t5,
        t1 = this._pixelWidth,
        t2 = $.$get$window(),
        t3 = t2._debugDevicePixelRatio;
      if (t3 == null)
        t3 = A.EnginePlatformDispatcher_browserDevicePixelRatio();
      t4 = this._pixelHeight;
      t2 = t2._debugDevicePixelRatio;
      if (t2 == null)
        t2 = A.EnginePlatformDispatcher_browserDevicePixelRatio();
      t5 = this.htmlCanvas.style;
      t3 = A.S(t1 / t3) + "px";
      t5.width = t3;
      t1 = A.S(t4 / t2) + "px";
      t5.height = t1;
    },
    _contextRestoredListener$1($event) {
      this._contextLost = false;
      $.$get$EnginePlatformDispatcher__instance().invokeOnMetricsChanged$0();
      $event.stopPropagation();
      $event.preventDefault();
    },
    _contextLostListener$1($event) {
      var _this = this,
        factory = A.SurfaceFactory_instance();
      _this._contextLost = true;
      if (factory.isLive$1(_this)) {
        _this._forceNewContext = true;
        $event.preventDefault();
      } else
        _this.dispose$0(0);
    },
    _createNewSurface$1(size) {
      var t2, skSurface, _this = this,
        t1 = $._cachedWebGLVersion;
      if ((t1 == null ? $._cachedWebGLVersion = A._detectWebGLVersion() : t1) === -1) {
        t1 = _this.htmlCanvas;
        t1.toString;
        return _this._makeSoftwareCanvasSurface$2(t1, "WebGL support not detected");
      } else {
        t1 = $._configuration;
        if (t1 == null)
          t1 = $._configuration = new A.FlutterConfiguration(self.window.flutterConfiguration);
        if (t1.get$canvasKitForceCpuOnly(t1)) {
          t1 = _this.htmlCanvas;
          t1.toString;
          return _this._makeSoftwareCanvasSurface$2(t1, "CPU rendering forced by application");
        } else if (_this._glContext === 0) {
          t1 = _this.htmlCanvas;
          t1.toString;
          return _this._makeSoftwareCanvasSurface$2(t1, "Failed to initialize WebGL context");
        } else {
          t1 = $.__canvasKit._readField$0();
          t2 = _this._grContext;
          t2.toString;
          skSurface = J.MakeOnScreenGLSurface$4$x(t1, t2, B.JSNumber_methods.ceil$0(size._dx), B.JSNumber_methods.ceil$0(size._dy), self.window.flutterCanvasKit.ColorSpace.SRGB);
          if (skSurface == null) {
            t1 = _this.htmlCanvas;
            t1.toString;
            return _this._makeSoftwareCanvasSurface$2(t1, "Failed to initialize WebGL surface");
          }
          return new A.CkSurface(skSurface);
        }
      }
    },
    _makeSoftwareCanvasSurface$2(htmlCanvas, reason) {
      if (!$.Surface__didWarnAboutWebGlInitializationFailure) {
        $.$get$printWarning().call$1("WARNING: Falling back to CPU-only rendering. " + reason + ".");
        $.Surface__didWarnAboutWebGlInitializationFailure = true;
      }
      return new A.CkSurface(J.MakeSWCanvasSurface$1$x($.__canvasKit._readField$0(), htmlCanvas));
    },
    dispose$0(_) {
      var _this = this,
        t1 = _this.htmlCanvas;
      if (t1 != null)
        B.CanvasElement_methods.removeEventListener$3(t1, "webglcontextlost", _this._cachedContextLostListener, false);
      t1 = _this.htmlCanvas;
      if (t1 != null)
        B.CanvasElement_methods.removeEventListener$3(t1, "webglcontextrestored", _this._cachedContextRestoredListener, false);
      _this._cachedContextRestoredListener = _this._cachedContextLostListener = null;
      J.remove$0$ax(_this.htmlElement);
      t1 = _this._surface;
      if (t1 != null)
        t1.dispose$0(0);
    }
  };
  A.Surface_acquireFrame_closure.prototype = {
    call$2(surfaceFrame, canvas) {
      J.flush$0$x(this.$this._surface.surface);
      return true;
    },
    $signature: 121
  };
  A.CkSurface.prototype = {
    dispose$0(_) {
      if (this._isDisposed)
        return;
      J.dispose$0$x(this.surface);
      this._isDisposed = true;
    }
  };
  A.SurfaceFactory.prototype = {
    getOverlay$0() {
      var surface, _this = this,
        t1 = _this.__engine$_cache,
        t2 = t1.length;
      if (t2 !== 0) {
        surface = t1.pop();
        _this._liveSurfaces.push(surface);
        return surface;
      } else {
        t1 = _this._liveSurfaces;
        if (t1.length + t2 + 2 < _this.maximumSurfaces) {
          surface = new A.Surface(A._ElementFactoryProvider_createElement_tag("flt-canvas-container", null));
          t1.push(surface);
          return surface;
        } else
          return null;
      }
    },
    _removeFromDom$1(surface) {
      J.remove$0$ax(surface.htmlElement);
    },
    releaseSurface$1(surface) {
      if (surface === this.backupSurface) {
        J.remove$0$ax(surface.htmlElement);
        return;
      }
      J.remove$0$ax(surface.htmlElement);
      B.JSArray_methods.remove$1(this._liveSurfaces, surface);
      this.__engine$_cache.push(surface);
    },
    isLive$1(surface) {
      if (surface === this.baseSurface || surface === this.backupSurface || B.JSArray_methods.contains$1(this._liveSurfaces, surface))
        return true;
      return false;
    }
  };
  A.CkParagraphStyle.prototype = {};
  A.CkTextStyle.prototype = {
    get$skTextStyle() {
      var result, _this = this,
        value = _this.__CkTextStyle_skTextStyle;
      if (value === $) {
        result = new A.CkTextStyle_skTextStyle_closure(_this).call$0();
        A._lateInitializeOnceCheck(_this.__CkTextStyle_skTextStyle, "skTextStyle");
        _this.__CkTextStyle_skTextStyle = result;
        value = result;
      }
      return value;
    }
  };
  A.CkTextStyle_skTextStyle_closure.prototype = {
    call$0() {
      var decorationValue, t2, value, result,
        t1 = this.$this,
        color = t1.color,
        decoration = t1.decoration,
        decorationColor = t1.decorationColor,
        decorationThickness = t1.decorationThickness,
        fontWeight = t1.fontWeight,
        textBaseline = t1.textBaseline,
        fontSize = t1.fontSize,
        letterSpacing = t1.letterSpacing,
        wordSpacing = t1.wordSpacing,
        height = t1.height,
        background = t1.background,
        foreground = t1.foreground,
        properties = A.SkTextStyleProperties$(null);
      if (background != null)
        properties.backgroundColor = A.makeFreshSkColor(background._color);
      if (color != null)
        properties.color = A.makeFreshSkColor(color);
      if (decoration != null) {
        decorationValue = J.get$NoDecoration$x($.__canvasKit._readField$0());
        t2 = decoration._mask;
        if ((t2 | 1) === t2)
          decorationValue = (decorationValue | J.get$UnderlineDecoration$x($.__canvasKit._readField$0())) >>> 0;
        if ((t2 | 2) === t2)
          decorationValue = (decorationValue | J.get$OverlineDecoration$x($.__canvasKit._readField$0())) >>> 0;
        properties.decoration = (t2 | 4) === t2 ? (decorationValue | J.get$LineThroughDecoration$x($.__canvasKit._readField$0())) >>> 0 : decorationValue;
      }
      if (decorationThickness != null)
        properties.decorationThickness = decorationThickness;
      if (decorationColor != null)
        properties.decorationColor = A.makeFreshSkColor(decorationColor);
      if (textBaseline != null)
        properties.textBaseline = $.$get$_skTextBaselines()[textBaseline.index];
      if (fontSize != null)
        properties.fontSize = fontSize;
      if (letterSpacing != null)
        properties.letterSpacing = letterSpacing;
      if (wordSpacing != null)
        properties.wordSpacing = wordSpacing;
      if (height != null)
        properties.heightMultiplier = height;
      switch (t1.leadingDistribution) {
        case null:
          break;
        case B.TextLeadingDistribution_1:
          properties.halfLeading = true;
          break;
        case B.TextLeadingDistribution_0:
          properties.halfLeading = false;
          break;
      }
      value = t1.__CkTextStyle_effectiveFontFamilies;
      if (value === $) {
        result = A._getEffectiveFontFamilies(t1.fontFamily, t1.fontFamilyFallback);
        A._lateInitializeOnceCheck(t1.__CkTextStyle_effectiveFontFamilies, "effectiveFontFamilies");
        t1.__CkTextStyle_effectiveFontFamilies = result;
        value = result;
      }
      properties.fontFamilies = value;
      if (fontWeight != null || false)
        properties.fontStyle = A.toSkFontStyle(fontWeight, t1.fontStyle);
      if (foreground != null)
        properties.foregroundColor = A.makeFreshSkColor(foreground._color);
      return J.TextStyle$1$x($.__canvasKit._readField$0(), properties);
    },
    $signature: 165
  };
  A.CkParagraph.prototype = {
    _ensureInitialized$1(constraints) {
      var e, builder, t1, t2, t3, t4, t5, _i, command, t6, didRebuildSkiaObject, constraintsChanged, exception, _this = this,
        paragraph = _this._skParagraph;
      if (paragraph == null) {
        builder = A.CkParagraphBuilder$(_this._paragraphStyle);
        for (t1 = _this._paragraphCommands, t2 = t1.length, t3 = builder._commands, t4 = builder._paragraphBuilder, t5 = J.getInterceptor$x(t4), _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
          command = t1[_i];
          switch (command.type.index) {
            case 0:
              t6 = command.text;
              t6.toString;
              builder.addText$1(0, t6);
              break;
            case 1:
              builder.pop$0(0);
              break;
            case 2:
              t6 = command.style;
              t6.toString;
              builder.pushStyle$1(0, t6);
              break;
            case 3:
              t6 = command.placeholderStyle;
              t6.toString;
              t3.push(new A._ParagraphCommand(B._ParagraphCommandType_3, null, null, t6));
              t5.addPlaceholder$5(t4, t6.get$width(t6), t6.get$height(t6), t6.get$alignment(), t6.get$baseline(t6), t6.get$offset(t6));
              break;
          }
        }
        paragraph = builder._buildSkParagraph$0();
        _this._skParagraph = paragraph;
        didRebuildSkiaObject = true;
      } else
        didRebuildSkiaObject = false;
      constraintsChanged = !J.$eq$(_this._lastLayoutConstraints, constraints);
      if (didRebuildSkiaObject || constraintsChanged) {
        _this._lastLayoutConstraints = constraints;
        try {
          J.layout$1$x(paragraph, constraints.width);
          _this._alphabeticBaseline = J.getAlphabeticBaseline$0$x(paragraph);
          _this._didExceedMaxLines = J.didExceedMaxLines$0$x(paragraph);
          _this.__engine$_height = J.getHeight$0$x(paragraph);
          _this._ideographicBaseline = J.getIdeographicBaseline$0$x(paragraph);
          _this._longestLine = J.getLongestLine$0$x(paragraph);
          _this._maxIntrinsicWidth = J.getMaxIntrinsicWidth$0$x(paragraph);
          _this._minIntrinsicWidth = J.getMinIntrinsicWidth$0$x(paragraph);
          _this.__engine$_width = J.getMaxWidth$0$x(paragraph);
          _this._boxesForPlaceholders = _this.skRectsToTextBoxes$1(J.getRectsForPlaceholders$0$x(paragraph));
        } catch (exception) {
          e = A.unwrapException(exception);
          $.$get$printWarning().call$1('CanvasKit threw an exception while laying out the paragraph. The font was "' + A.S(_this._paragraphStyle._fontFamily) + '". Exception:\n' + A.S(e));
          throw exception;
        }
      }
      return paragraph;
    },
    delete$0(_) {
      var t1 = this._skParagraph;
      t1.toString;
      J.delete$0$x(t1);
    },
    didDelete$0() {
      this._skParagraph = null;
    },
    get$alphabeticBaseline(_) {
      return this._alphabeticBaseline;
    },
    get$didExceedMaxLines(_) {
      return this._didExceedMaxLines;
    },
    get$height(_) {
      return this.__engine$_height;
    },
    get$ideographicBaseline(_) {
      return this._ideographicBaseline;
    },
    get$longestLine() {
      return this._longestLine;
    },
    get$maxIntrinsicWidth() {
      return this._maxIntrinsicWidth;
    },
    get$width(_) {
      return this.__engine$_width;
    },
    getBoxesForPlaceholders$0() {
      var t1 = this._boxesForPlaceholders;
      t1.toString;
      return t1;
    },
    getBoxesForRange$4$boxHeightStyle$boxWidthStyle(start, end, boxHeightStyle, boxWidthStyle) {
      var t1, paragraph, index, t2;
      if (start < 0 || end < 0)
        return B.List_empty6;
      t1 = this._lastLayoutConstraints;
      t1.toString;
      paragraph = this._ensureInitialized$1(t1);
      t1 = $.$get$_skRectHeightStyles()[boxHeightStyle.index];
      index = boxWidthStyle.index;
      t2 = $.$get$_skRectWidthStyles();
      return this.skRectsToTextBoxes$1(J.getRectsForRange$4$x(paragraph, start, end, t1, t2[index < 2 ? index : 0]));
    },
    skRectsToTextBoxes$1(skRects) {
      var t1, t2, t3, i, rect, t4,
        result = A._setArrayType([], type$.JSArray_TextBox);
      for (t1 = J.getInterceptor$asx(skRects), t2 = type$.List_double, t3 = this._paragraphStyle.__engine$_textDirection, i = 0; i < t1.get$length(skRects); ++i) {
        rect = t2._as(t1.$index(skRects, i));
        t4 = J.getInterceptor$asx(rect);
        result.push(new A.TextBox(t4.$index(rect, 0), t4.$index(rect, 1), t4.$index(rect, 2), t4.$index(rect, 3), t3));
      }
      return result;
    },
    getPositionForOffset$1(offset) {
      var positionWithAffinity, affinity,
        t1 = this._lastLayoutConstraints;
      t1.toString;
      positionWithAffinity = J.getGlyphPositionAtCoordinate$2$x(this._ensureInitialized$1(t1), offset._dx, offset._dy);
      t1 = J.getInterceptor$x(positionWithAffinity);
      affinity = B.List_TextAffinity_0_TextAffinity_1[J.get$value$x(t1.get$affinity(positionWithAffinity))];
      return new A.TextPosition(t1.get$pos(positionWithAffinity), affinity);
    },
    layout$1(_, constraints) {
      var _this = this;
      if (J.$eq$(_this._lastLayoutConstraints, constraints))
        return;
      _this._ensureInitialized$1(constraints);
      if (!$.$get$CkParagraph__paragraphCache().markUsed$1(_this))
        $.$get$CkParagraph__paragraphCache().add$1(0, _this);
    }
  };
  A.CkParagraphBuilder.prototype = {
    addText$1(_, text) {
      var fontFamilies = A._setArrayType([], type$.JSArray_String),
        style = B.JSArray_methods.get$last(this._styleStack),
        t1 = style.fontFamily;
      if (t1 != null)
        fontFamilies.push(t1);
      t1 = style.fontFamilyFallback;
      if (t1 != null)
        B.JSArray_methods.addAll$1(fontFamilies, t1);
      $.$get$FontFallbackData__instance().ensureFontsSupportText$2(text, fontFamilies);
      this._commands.push(new A._ParagraphCommand(B._ParagraphCommandType_0, text, null, null));
      J.addText$1$x(this._paragraphBuilder, text);
    },
    build$0(_) {
      return new A.CkParagraph(this._buildSkParagraph$0(), this._style, this._commands);
    },
    _buildSkParagraph$0() {
      var t1 = this._paragraphBuilder,
        t2 = J.getInterceptor$x(t1),
        result = t2.build$0(t1);
      t2.delete$0(t1);
      return result;
    },
    get$placeholderScales() {
      return this._placeholderScales;
    },
    pop$0(_) {
      var t1 = this._styleStack;
      if (t1.length <= 1)
        return;
      this._commands.push(B._ParagraphCommand_6TA);
      t1.pop();
      J.pop$0$x(this._paragraphBuilder);
    },
    pushStyle$1(_, style) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, skStyle, foreground, background, _this = this, _null = null,
        t1 = _this._styleStack,
        baseStyle = B.JSArray_methods.get$last(t1);
      type$.CkTextStyle._as(style);
      t2 = style.color;
      if (t2 == null)
        t2 = baseStyle.color;
      t3 = style.decoration;
      if (t3 == null)
        t3 = baseStyle.decoration;
      t4 = style.decorationColor;
      if (t4 == null)
        t4 = baseStyle.decorationColor;
      t5 = style.decorationThickness;
      if (t5 == null)
        t5 = baseStyle.decorationThickness;
      t6 = style.fontWeight;
      if (t6 == null)
        t6 = baseStyle.fontWeight;
      t7 = style.textBaseline;
      if (t7 == null)
        t7 = baseStyle.textBaseline;
      t8 = style.fontFamily;
      if (t8 == null)
        t8 = baseStyle.fontFamily;
      t9 = style.fontFamilyFallback;
      if (t9 == null)
        t9 = baseStyle.fontFamilyFallback;
      t10 = style.fontSize;
      if (t10 == null)
        t10 = baseStyle.fontSize;
      t11 = style.letterSpacing;
      if (t11 == null)
        t11 = baseStyle.letterSpacing;
      t12 = style.wordSpacing;
      if (t12 == null)
        t12 = baseStyle.wordSpacing;
      t13 = style.height;
      if (t13 == null)
        t13 = baseStyle.height;
      t14 = style.leadingDistribution;
      if (t14 == null)
        t14 = baseStyle.leadingDistribution;
      t15 = style.background;
      if (t15 == null)
        t15 = baseStyle.background;
      t16 = style.foreground;
      if (t16 == null)
        t16 = baseStyle.foreground;
      skStyle = A.CkTextStyle_CkTextStyle(t15, t2, t3, t4, baseStyle.decorationStyle, t5, t8, t9, baseStyle.fontFeatures, t10, baseStyle.fontStyle, t6, t16, t13, t14, t11, baseStyle.locale, baseStyle.shadows, t7, t12);
      t1.push(skStyle);
      _this._commands.push(new A._ParagraphCommand(B._ParagraphCommandType_2, _null, style, _null));
      t1 = skStyle.foreground;
      t2 = t1 == null;
      if (!t2 || skStyle.background != null) {
        foreground = t2 ? _null : t1.get$skiaObject();
        if (foreground == null) {
          foreground = $.$get$CkParagraphBuilder__defaultTextForeground();
          t1 = skStyle.color;
          t1 = t1 == null ? _null : t1.value;
          J.setColorInt$1$x(foreground, t1 == null ? 4278190080 : t1);
        }
        t1 = skStyle.background;
        background = t1 == null ? _null : t1.get$skiaObject();
        if (background == null)
          background = $.$get$CkParagraphBuilder__defaultTextBackground();
        J.pushPaintStyle$3$x(_this._paragraphBuilder, skStyle.get$skTextStyle(), foreground, background);
      } else
        J.pushStyle$1$x(_this._paragraphBuilder, skStyle.get$skTextStyle());
    }
  };
  A._ParagraphCommand.prototype = {};
  A._ParagraphCommandType.prototype = {
    toString$0(_) {
      return "_ParagraphCommandType." + this._name;
    }
  };
  A._getEffectiveFontFamilies_closure.prototype = {
    call$1(font) {
      return this.fontFamily === font;
    },
    $signature: 15
  };
  A.CanvasKitError.prototype = {
    toString$0(_) {
      return "CanvasKitError: " + this.message;
    }
  };
  A.ClipboardMessageHandler.prototype = {
    setDataMethodCall$2(methodCall, callback) {
      var t1 = {};
      t1.errorEnvelopeEncoded = false;
      this._copyToClipboardStrategy.setData$1(0, A._asStringQ(J.$index$asx(methodCall.$arguments, "text"))).then$1$1(0, new A.ClipboardMessageHandler_setDataMethodCall_closure(t1, callback), type$.Null).catchError$1(new A.ClipboardMessageHandler_setDataMethodCall_closure0(t1, callback));
    },
    getDataMethodCall$1(callback) {
      this._pasteFromClipboardStrategy.getData$0(0).then$1$1(0, new A.ClipboardMessageHandler_getDataMethodCall_closure(callback), type$.Null).catchError$1(new A.ClipboardMessageHandler_getDataMethodCall_closure0(this, callback));
    }
  };
  A.ClipboardMessageHandler_setDataMethodCall_closure.prototype = {
    call$1(success) {
      var t1 = this.callback;
      if (success) {
        t1.toString;
        t1.call$1(B.C_JSONMessageCodec.encodeMessage$1([true]));
      } else {
        t1.toString;
        t1.call$1(B.C_JSONMessageCodec.encodeMessage$1(["copy_fail", "Clipboard.setData failed", null]));
        this._box_0.errorEnvelopeEncoded = true;
      }
    },
    $signature: 35
  };
  A.ClipboardMessageHandler_setDataMethodCall_closure0.prototype = {
    call$1(_) {
      var t1;
      if (!this._box_0.errorEnvelopeEncoded) {
        t1 = this.callback;
        t1.toString;
        t1.call$1(B.C_JSONMessageCodec.encodeMessage$1(["copy_fail", "Clipboard.setData failed", null]));
      }
    },
    $signature: 4
  };
  A.ClipboardMessageHandler_getDataMethodCall_closure.prototype = {
    call$1(data) {
      var map = A.LinkedHashMap_LinkedHashMap$_literal(["text", data], type$.String, type$.dynamic),
        t1 = this.callback;
      t1.toString;
      t1.call$1(B.C_JSONMessageCodec.encodeMessage$1([map]));
    },
    $signature: 179
  };
  A.ClipboardMessageHandler_getDataMethodCall_closure0.prototype = {
    call$1(error) {
      var t1;
      if (error instanceof A.UnimplementedError) {
        A.Future_Future$delayed(B.Duration_0, type$.void).then$1$1(0, new A.ClipboardMessageHandler_getDataMethodCall__closure(this.callback), type$.Null);
        return;
      }
      t1 = this.callback;
      A.print("Could not get text from clipboard: " + A.S(error));
      t1.toString;
      t1.call$1(B.C_JSONMessageCodec.encodeMessage$1(["paste_fail", "Clipboard.getData failed", null]));
    },
    $signature: 4
  };
  A.ClipboardMessageHandler_getDataMethodCall__closure.prototype = {
    call$1(_) {
      var t1 = this.callback;
      if (t1 != null)
        t1.call$1(null);
    },
    $signature: 24
  };
  A.ClipboardAPICopyStrategy.prototype = {
    setData$1(_, text) {
      return this.setData$body$ClipboardAPICopyStrategy(0, text);
    },
    setData$body$ClipboardAPICopyStrategy(_, text) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], error, t1, exception, $async$exception;
      var $async$setData$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              t1 = window.navigator.clipboard;
              t1.toString;
              text.toString;
              $async$goto = 7;
              return A._asyncAwait(A.promiseToFuture(t1.writeText(text), type$.dynamic), $async$setData$1);
            case 7:
              // returning from await.
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              error = A.unwrapException($async$exception);
              A.print("copy is not successful " + A.S(error));
              t1 = A.Future_Future$value(false, type$.bool);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              $async$returnValue = A.Future_Future$value(true, type$.bool);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$setData$1, $async$completer);
    }
  };
  A.ClipboardAPIPasteStrategy.prototype = {
    getData$0(_) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue;
      var $async$getData$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = A.promiseToFuture(window.navigator.clipboard.readText(), type$.String);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$getData$0, $async$completer);
    }
  };
  A.ExecCommandCopyStrategy.prototype = {
    setData$1(_, text) {
      return A.Future_Future$value(this._setDataSync$1(text), type$.bool);
    },
    _setDataSync$1(text) {
      var tempTextArea, result, error, exception,
        _s8_ = "-99999px",
        _s11_ = "transparent",
        t1 = document,
        tempElement = t1.createElement("textarea"),
        elementStyle = tempElement.style;
      elementStyle.position = "absolute";
      elementStyle.top = _s8_;
      elementStyle.left = _s8_;
      B.CssStyleDeclaration_methods._setPropertyHelper$3(elementStyle, B.CssStyleDeclaration_methods._browserPropertyName$1(elementStyle, "opacity"), "0", "");
      elementStyle.color = _s11_;
      elementStyle.backgroundColor = _s11_;
      elementStyle.background = _s11_;
      t1.body.appendChild(tempElement);
      tempTextArea = tempElement;
      tempTextArea.value = text;
      J.focus$0$x(tempTextArea);
      J.select$0$x(tempTextArea);
      result = false;
      try {
        result = t1.execCommand("copy");
        if (!result)
          A.print("copy is not successful");
      } catch (exception) {
        error = A.unwrapException(exception);
        A.print("copy is not successful " + A.S(error));
      } finally {
        J.remove$0$ax(tempTextArea);
      }
      return result;
    }
  };
  A.ExecCommandPasteStrategy.prototype = {
    getData$0(_) {
      return A.Future_Future$error(new A.UnimplementedError("Paste is not implemented for this browser."), null, type$.String);
    }
  };
  A.FlutterConfiguration.prototype = {
    get$canvasKitBaseUrl(_) {
      var t1 = this._js;
      t1 = t1 == null ? null : J.get$canvasKitBaseUrl$x(t1);
      return t1 == null ? "https://unpkg.com/canvaskit-wasm@0.33.0/bin/" : t1;
    },
    get$canvasKitForceCpuOnly(_) {
      var t1 = this._js;
      t1 = t1 == null ? null : J.get$canvasKitForceCpuOnly$x(t1);
      return t1 == null ? false : t1;
    },
    get$canvasKitMaximumSurfaces(_) {
      var t1 = this._js;
      t1 = t1 == null ? null : J.get$canvasKitMaximumSurfaces$x(t1);
      return t1 == null ? 8 : t1;
    },
    get$debugShowSemanticsNodes(_) {
      var t1 = this._js;
      t1 = t1 == null ? null : J.get$debugShowSemanticsNodes$x(t1);
      return t1 == null ? false : t1;
    }
  };
  A.JsFlutterConfiguration.prototype = {};
  A.FlutterViewEmbedder.prototype = {
    renderScene$1(sceneElement) {
      var t1 = this._sceneElement;
      if (sceneElement == null ? t1 != null : sceneElement !== t1) {
        if (t1 != null)
          J.remove$0$ax(t1);
        this._sceneElement = sceneElement;
        t1 = this._sceneHostElement;
        t1.toString;
        sceneElement.toString;
        t1.appendChild(sceneElement);
      }
    },
    reset$0(_) {
      var t3, t4, t5, t6, glassPaneElement, glassPaneElementHostNode, semanticsHostElement, _accessibilityPlaceholder, _this = this, _s1_ = "0", _s4_ = "none",
        _s8_ = "absolute",
        _box_0 = {},
        t1 = $.$get$_browserEngine(),
        isWebKit = t1 === B.BrowserEngine_1,
        t2 = _this._styleElement;
      if (t2 != null)
        B.StyleElement_methods.remove$0(t2);
      t2 = document;
      t3 = t2.createElement("style");
      _this._styleElement = t3;
      _this._resourcesHost = null;
      t2.head.appendChild(t3);
      t3 = _this._styleElement.sheet;
      t3.toString;
      type$.CssStyleSheet._as(t3);
      if (t1 !== B.BrowserEngine_0)
        if (t1 !== B.BrowserEngine_5)
          t4 = isWebKit;
        else
          t4 = true;
      else
        t4 = true;
      A.applyGlobalCssRulesToSheet(t3, t1, t4);
      t4 = t2.body;
      t4.toString;
      t4.setAttribute("flt-renderer", ($.$get$useCanvasKit() ? "canvaskit" : "html") + " (auto-selected)");
      t4.setAttribute("flt-build-mode", "profile");
      A.setElementStyle(t4, "position", "fixed");
      A.setElementStyle(t4, "top", _s1_);
      A.setElementStyle(t4, "right", _s1_);
      A.setElementStyle(t4, "bottom", _s1_);
      A.setElementStyle(t4, "left", _s1_);
      A.setElementStyle(t4, "overflow", "hidden");
      A.setElementStyle(t4, "padding", _s1_);
      A.setElementStyle(t4, "margin", _s1_);
      A.setElementStyle(t4, "user-select", _s4_);
      A.setElementStyle(t4, "-webkit-user-select", _s4_);
      A.setElementStyle(t4, "-ms-user-select", _s4_);
      A.setElementStyle(t4, "-moz-user-select", _s4_);
      A.setElementStyle(t4, "touch-action", _s4_);
      A.setElementStyle(t4, "font", "normal normal 14px sans-serif");
      A.setElementStyle(t4, "color", "red");
      t4.spellcheck = false;
      for (t1 = new A._FrozenElementList(t2.head.querySelectorAll('meta[name="viewport"]'), type$._FrozenElementList_Element), t1 = new A.ListIterator(t1, t1.get$length(t1)), t3 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
        t5 = t1.__internal$_current;
        if (t5 == null)
          t5 = t3._as(t5);
        t6 = t5.parentNode;
        if (t6 != null)
          t6.removeChild(t5);
      }
      t1 = _this._viewportMeta;
      if (t1 != null)
        B.MetaElement_methods.remove$0(t1);
      t1 = t2.createElement("meta");
      t1.setAttribute("flt-viewport", "");
      t1.name = "viewport";
      t1.content = "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no";
      _this._viewportMeta = t1;
      t2.head.appendChild(t1);
      t1 = _this._glassPaneElement;
      if (t1 != null)
        J.remove$0$ax(t1);
      glassPaneElement = t2.createElement("flt-glass-pane");
      _this._glassPaneElement = glassPaneElement;
      t1 = glassPaneElement.style;
      t1.position = _s8_;
      t1.top = _s1_;
      t1.right = _s1_;
      t1.bottom = _s1_;
      t1.left = _s1_;
      t4.appendChild(glassPaneElement);
      glassPaneElementHostNode = _this._glassPaneShadow = _this._createHostNode$1(glassPaneElement);
      t1 = t2.createElement("flt-scene-host");
      t3 = t1.style;
      B.CssStyleDeclaration_methods._setPropertyHelper$3(t3, B.CssStyleDeclaration_methods._browserPropertyName$1(t3, "pointer-events"), _s4_, "");
      _this._sceneHostElement = t1;
      semanticsHostElement = t2.createElement("flt-semantics-host");
      t1 = semanticsHostElement.style;
      t1.position = _s8_;
      B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "transform-origin"), "0 0 0", "");
      _this._semanticsHostElement = semanticsHostElement;
      _this.updateSemanticsScreenProperties$0();
      t1 = $.EngineSemanticsOwner__instance;
      _accessibilityPlaceholder = (t1 == null ? $.EngineSemanticsOwner__instance = A.EngineSemanticsOwner$_() : t1).semanticsHelper._semanticsEnabler.prepareAccessibilityPlaceholder$0();
      t1 = glassPaneElementHostNode.get$nodes(glassPaneElementHostNode);
      t2 = _this._sceneHostElement;
      t2.toString;
      t1.addAll$1(0, A._setArrayType([semanticsHostElement, _accessibilityPlaceholder, t2], type$.JSArray_Node));
      t1 = $._configuration;
      if (t1 == null)
        t1 = $._configuration = new A.FlutterConfiguration(self.window.flutterConfiguration);
      if (t1.get$debugShowSemanticsNodes(t1)) {
        t1 = _this._sceneHostElement.style;
        B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "opacity"), "0.3", "");
      }
      if ($.PointerBinding__instance == null) {
        t1 = new A.PointerBinding(glassPaneElement, new A.PointerDataConverter(A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$._PointerState)));
        t1.__PointerBinding__adapter = t1._createAdapter$0();
        $.PointerBinding__instance = t1;
      }
      if ($.KeyboardBinding__instance == null) {
        t1 = new A.KeyboardBinding(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic_Function_Event));
        t1._setup$0();
        $.KeyboardBinding__instance = t1;
      }
      _this._sceneHostElement.setAttribute("aria-hidden", "true");
      if (window.visualViewport == null && isWebKit) {
        t1 = window.innerWidth;
        t1.toString;
        _box_0.checkCount = 0;
        A.Timer_Timer$periodic(B.Duration_100000, new A.FlutterViewEmbedder_reset_closure(_box_0, _this, t1));
      }
      t1 = _this.get$_metricsDidChange();
      t2 = type$.Event;
      if (window.visualViewport != null) {
        t3 = window.visualViewport;
        t3.toString;
        _this._resizeSubscription = A._EventStreamSubscription$(t3, "resize", t1, false, t2);
      } else
        _this._resizeSubscription = A._EventStreamSubscription$(window, "resize", t1, false, t2);
      _this._localeSubscription = A._EventStreamSubscription$(window, "languagechange", _this.get$_languageDidChange(), false, t2);
      t1 = $.$get$EnginePlatformDispatcher__instance();
      t1._configuration = t1._configuration.copyWith$1$locales(A.EnginePlatformDispatcher_parseBrowserLanguages());
    },
    _createHostNode$1(root) {
      var t1, t2, shadowRootStyleElement, t3, t4;
      if (root.attachShadow != null) {
        t1 = new A.ShadowDomHostNode();
        t2 = root.attachShadow(A.convertDartToNative_Dictionary(A.LinkedHashMap_LinkedHashMap$_literal(["mode", "open", "delegatesFocus", false], type$.String, type$.dynamic)));
        t1.__ShadowDomHostNode__shadow = t2;
        shadowRootStyleElement = document.createElement("style");
        A._lateReadCheck(t2, "_shadow").appendChild(shadowRootStyleElement);
        t2 = shadowRootStyleElement.sheet;
        t2.toString;
        type$.CssStyleSheet._as(t2);
        t3 = $.$get$_browserEngine();
        if (t3 !== B.BrowserEngine_0)
          if (t3 !== B.BrowserEngine_5)
            t4 = t3 === B.BrowserEngine_1;
          else
            t4 = true;
        else
          t4 = true;
        A.applyGlobalCssRulesToSheet(t2, t3, t4);
        return t1;
      } else {
        t1 = new A.ElementHostNode();
        t2 = document.createElement("flt-element-host-node");
        t1.__ElementHostNode__element = t2;
        root.appendChild(A._lateReadCheck(t2, "_element"));
        return t1;
      }
    },
    updateSemanticsScreenProperties$0() {
      var t1 = this._semanticsHostElement.style,
        t2 = "scale(" + A.S(1 / window.devicePixelRatio) + ")";
      B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "transform"), t2, "");
    },
    _metricsDidChange$1($event) {
      var t1;
      this.updateSemanticsScreenProperties$0();
      t1 = $.$get$_operatingSystem();
      if (!J.containsKey$1$x(B.Set_69tl2._collection$_map, t1) && !$.$get$window().isRotation$0() && $.$get$textEditing().isEditing) {
        $.$get$window().computeOnScreenKeyboardInsets$1(true);
        $.$get$EnginePlatformDispatcher__instance().invokeOnMetricsChanged$0();
      } else {
        t1 = $.$get$window();
        t1.computePhysicalSize$0();
        t1.computeOnScreenKeyboardInsets$1(false);
        $.$get$EnginePlatformDispatcher__instance().invokeOnMetricsChanged$0();
      }
    },
    _languageDidChange$1($event) {
      var t1 = $.$get$EnginePlatformDispatcher__instance();
      t1._configuration = t1._configuration.copyWith$1$locales(A.EnginePlatformDispatcher_parseBrowserLanguages());
      t1 = $.$get$window().platformDispatcher._onLocaleChanged;
      if (t1 != null)
        t1.call$0();
    },
    setPreferredOrientation$1(orientations) {
      var lockType, completer, t1, exception,
        screenOrientation = window.screen.orientation;
      if (screenOrientation != null) {
        t1 = J.getInterceptor$asx(orientations);
        if (t1.get$isEmpty(orientations)) {
          t1 = screenOrientation;
          t1.toString;
          J.unlock$0$x(t1);
          return A.Future_Future$value(true, type$.bool);
        } else {
          lockType = A.FlutterViewEmbedder__deviceOrientationToLockType(A._asStringQ(t1.get$first(orientations)));
          if (lockType != null) {
            completer = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_bool), type$._AsyncCompleter_bool);
            try {
              A.promiseToFuture(screenOrientation.lock(lockType), type$.dynamic).then$1$1(0, new A.FlutterViewEmbedder_setPreferredOrientation_closure(completer), type$.Null).catchError$1(new A.FlutterViewEmbedder_setPreferredOrientation_closure0(completer));
            } catch (exception) {
              t1 = A.Future_Future$value(false, type$.bool);
              return t1;
            }
            return completer.future;
          }
        }
      }
      return A.Future_Future$value(false, type$.bool);
    }
  };
  A.FlutterViewEmbedder_reset_closure.prototype = {
    call$1(t) {
      var t1 = ++this._box_0.checkCount;
      if (this.initialInnerWidth !== window.innerWidth) {
        t.cancel$0(0);
        this.$this._metricsDidChange$1(null);
      } else if (t1 > 5)
        t.cancel$0(0);
    },
    $signature: 229
  };
  A.FlutterViewEmbedder_setPreferredOrientation_closure.prototype = {
    call$1(_) {
      this.completer.complete$1(0, true);
    },
    $signature: 4
  };
  A.FlutterViewEmbedder_setPreferredOrientation_closure0.prototype = {
    call$1(error) {
      this.completer.complete$1(0, false);
    },
    $signature: 4
  };
  A.EngineCanvas.prototype = {};
  A.SaveStackEntry.prototype = {};
  A.SaveClipEntry.prototype = {};
  A._SaveElementStackEntry.prototype = {};
  A.SaveElementStackTracking.prototype = {
    save$0(_) {
      var t2, t3, _this = this,
        t1 = _this.SaveElementStackTracking__elementStack;
      t1 = t1.length === 0 ? _this.rootElement : B.JSArray_methods.get$last(t1);
      t2 = _this.SaveElementStackTracking__currentTransform;
      t3 = new A.Matrix40(new Float32Array(16));
      t3.setFrom$1(t2);
      _this.SaveElementStackTracking__saveStack.push(new A._SaveElementStackEntry(t1, t3));
    },
    restore$0(_) {
      var entry, t2, t3, _this = this,
        t1 = _this.SaveElementStackTracking__saveStack;
      if (t1.length === 0)
        return;
      entry = t1.pop();
      _this.SaveElementStackTracking__currentTransform = entry.transform;
      t1 = _this.SaveElementStackTracking__elementStack;
      t2 = entry.savedElement;
      t3 = _this.rootElement;
      while (true) {
        if (!((t1.length === 0 ? t3 : B.JSArray_methods.get$last(t1)) !== t2))
          break;
        t1.pop();
      }
    },
    translate$2(_, dx, dy) {
      this.SaveElementStackTracking__currentTransform.translate$2(0, dx, dy);
    },
    transform$1(_, matrix4) {
      this.SaveElementStackTracking__currentTransform.multiply$1(0, new A.Matrix40(matrix4));
    }
  };
  A.sendFontChangeMessage_closure.prototype = {
    call$1(_) {
      $._fontChangeScheduled = false;
      $.$get$EnginePlatformDispatcher__instance().invokeOnPlatformMessage$3("flutter/system", $.$get$_fontChangeMessage(), new A.sendFontChangeMessage__closure());
    },
    $signature: 65
  };
  A.sendFontChangeMessage__closure.prototype = {
    call$1(_) {
    },
    $signature: 5
  };
  A.FrameReference.prototype = {};
  A.CrossFrameCache.prototype = {
    commitFrame$0() {
      var t2, t3, t4, _this = this,
        t1 = _this._reusablePool;
      if (t1 != null)
        for (t1 = t1.get$values(t1), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f), t2 = A._instanceType(t1)._rest[1]; t1.moveNext$0();) {
          t3 = t1.__internal$_current;
          for (t3 = J.get$iterator$ax(t3 == null ? t2._as(t3) : t3); t3.moveNext$0();) {
            t4 = t3.get$current(t3);
            t4.evictCallback.call$1(t4.value);
          }
        }
      _this._reusablePool = _this.__engine$_cache;
      _this.__engine$_cache = null;
    }
  };
  A.ShadowDomHostNode.prototype = {
    append$1(_, node) {
      return A._lateReadCheck(this.__ShadowDomHostNode__shadow, "_shadow").appendChild(node);
    },
    get$node() {
      return A._lateReadCheck(this.__ShadowDomHostNode__shadow, "_shadow");
    },
    get$nodes(_) {
      return new A._ChildNodeListLazy(A._lateReadCheck(this.__ShadowDomHostNode__shadow, "_shadow"));
    }
  };
  A.ElementHostNode.prototype = {
    append$1(_, node) {
      return A._lateReadCheck(this.__ElementHostNode__element, "_element").appendChild(node);
    },
    get$node() {
      return A._lateReadCheck(this.__ElementHostNode__element, "_element");
    },
    get$nodes(_) {
      return new A._ChildNodeListLazy(A._lateReadCheck(this.__ElementHostNode__element, "_element"));
    }
  };
  A.BitmapCanvas.prototype = {
    set$bounds(_, newValue) {
      var newCanvasPositionX, newCanvasPositionY, _this = this;
      _this._bounds = newValue;
      newCanvasPositionX = B.JSNumber_methods.floor$0(newValue.left) - 1;
      newCanvasPositionY = B.JSNumber_methods.floor$0(_this._bounds.top) - 1;
      if (_this._canvasPositionX !== newCanvasPositionX || _this._canvasPositionY !== newCanvasPositionY) {
        _this._canvasPositionX = newCanvasPositionX;
        _this._canvasPositionY = newCanvasPositionY;
        _this._updateRootElementTransform$0();
      }
    },
    _updateRootElementTransform$0() {
      var t1 = this.rootElement.style,
        t2 = "translate(" + this._canvasPositionX + "px, " + this._canvasPositionY + "px)";
      B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "transform"), t2, "");
    },
    _setupInitialTransform$0() {
      var _this = this,
        t1 = _this._bounds,
        t2 = t1.left;
      t1 = t1.top;
      _this._canvasPool.translate$2(0, -t2 + (t2 - 1 - _this._canvasPositionX) + 1, -t1 + (t1 - 1 - _this._canvasPositionY) + 1);
    },
    doesFitBounds$2(newBounds, newDensity) {
      return this.widthInBitmapPixels >= A.BitmapCanvas_widthToPhysical(newBounds.right - newBounds.left) && this.heightInBitmapPixels >= A.BitmapCanvas_heightToPhysical(newBounds.bottom - newBounds.top) && this._density === newDensity;
    },
    clear$0(_) {
      var t1, len, t2, i, child, t3, _this = this;
      _this._contains3dTransform = false;
      _this._canvasPool.clear$0(0);
      t1 = _this.__engine$_children;
      len = t1.length;
      for (t2 = _this.rootElement, i = 0; i < len; ++i) {
        child = t1[i];
        if (child.parentElement === t2) {
          t3 = child.parentNode;
          if (t3 != null)
            t3.removeChild(child);
        }
      }
      B.JSArray_methods.set$length(t1, 0);
      _this._childOverdraw = false;
      _this._cachedLastCssFont = null;
      _this._setupInitialTransform$0();
    },
    save$0(_) {
      var t1 = this._canvasPool;
      t1.super$_SaveStackTracking$save(0);
      if (t1.__engine$_canvas != null) {
        t1.get$context(t1).save();
        ++t1._saveContextCount;
      }
      return this._saveCount++;
    },
    restore$0(_) {
      var t1 = this._canvasPool;
      t1.super$_SaveStackTracking$restore(0);
      if (t1.__engine$_canvas != null) {
        t1.get$context(t1).restore();
        t1.get$contextHandle().reset$0(0);
        --t1._saveContextCount;
      }
      --this._saveCount;
      this._cachedLastCssFont = null;
    },
    translate$2(_, dx, dy) {
      this._canvasPool.translate$2(0, dx, dy);
    },
    transform$1(_, matrix4) {
      var t1;
      if (A.transformKindOf(matrix4) === B.TransformKind_2)
        this._contains3dTransform = true;
      t1 = this._canvasPool;
      t1.super$_SaveStackTracking$transform(0, matrix4);
      if (t1.__engine$_canvas != null)
        t1.get$context(t1).transform(matrix4[0], matrix4[1], matrix4[4], matrix4[5], matrix4[12], matrix4[13]);
    },
    clipRect$2(_, rect, clipOp) {
      var path, t2,
        t1 = this._canvasPool;
      if (clipOp === B.ClipOp_0) {
        path = A.SurfacePath$();
        path._fillType = B.PathFillType_1;
        t2 = this._bounds;
        path.addRectWithDirection$3(new A.Rect(0, 0, 0 + (t2.right - t2.left), 0 + (t2.bottom - t2.top)), 0, 0);
        path.addRectWithDirection$3(rect, 0, 0);
        t1.clipPath$1(0, path);
      } else {
        t1.super$_SaveStackTracking$clipRect(0, rect);
        if (t1.__engine$_canvas != null)
          t1._clipRect$2(t1.get$context(t1), rect);
      }
    },
    clipRRect$1(_, rrect) {
      var t1 = this._canvasPool;
      t1.super$_SaveStackTracking$clipRRect(0, rrect);
      if (t1.__engine$_canvas != null)
        t1._clipRRect$2(t1.get$context(t1), rrect);
    },
    clipPath$1(_, path) {
      this._canvasPool.clipPath$1(0, path);
    },
    _useDomForRenderingFillAndStroke$1(paint) {
      var _this = this,
        t1 = _this._renderStrategy;
      if (!t1.isInsideSvgFilterTree)
        if (!(!_this._preserveImageData && _this._contains3dTransform))
          t1 = (_this._childOverdraw || t1.hasImageElements || t1.hasParagraphs) && _this._canvasPool.__engine$_canvas == null && paint.maskFilter == null && paint.shader == null;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    drawRect$2(_, rect, paint) {
      var t2, shaderBounds, t3, t4, t5, t6,
        t1 = this._canvasPool;
      if (this._useDomForRenderingFillAndStroke$1(paint))
        this._drawElement$3(A.buildDrawRectElement(rect, paint, "draw-rect", t1._currentTransform), new A.Offset(Math.min(rect.left, rect.right), Math.min(rect.top, rect.bottom)), paint);
      else {
        t1.get$contextHandle().setUpPaint$2(paint, rect);
        t2 = paint.style;
        t1.get$context(t1).beginPath();
        shaderBounds = t1.get$contextHandle()._shaderBounds;
        t3 = rect.left;
        t4 = rect.top;
        t5 = rect.right - t3;
        t6 = rect.bottom - t4;
        if (shaderBounds == null)
          t1.get$context(t1).rect(t3, t4, t5, t6);
        else
          t1.get$context(t1).rect(t3 - shaderBounds.left, t4 - shaderBounds.top, t5, t6);
        t1.get$contextHandle().paint$1(t2);
        t1.get$contextHandle().tearDownPaint$0();
      }
    },
    _drawElement$3(element, offset, paint) {
      var clipElements, t3, _i, clipElement, blendMode, _this = this,
        t1 = _this._canvasPool,
        t2 = t1.clipStack;
      if (t2 != null) {
        clipElements = A._clipContent(t2, element, B.Offset_0_0, A.transformWithOffset(t1._currentTransform, offset));
        for (t1 = clipElements.length, t2 = _this.rootElement, t3 = _this.__engine$_children, _i = 0; _i < clipElements.length; clipElements.length === t1 || (0, A.throwConcurrentModificationError)(clipElements), ++_i) {
          clipElement = clipElements[_i];
          t2.appendChild(clipElement);
          t3.push(clipElement);
        }
      } else {
        _this.rootElement.appendChild(element);
        _this.__engine$_children.push(element);
      }
      blendMode = paint.blendMode;
      if (blendMode != null) {
        t1 = element.style;
        t2 = A.blendModeToCssMixBlendMode(blendMode);
        if (t2 == null)
          t2 = "";
        B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "mix-blend-mode"), t2, "");
      }
      _this._closeCurrentCanvas$0();
    },
    drawRRect$2(_, rrect, paint) {
      var element, shaderBounds, left, right, $top, bottom, t0, trRadiusX, tlRadiusX, trRadiusY, tlRadiusY, blRadiusX, brRadiusX, blRadiusY, brRadiusY,
        t1 = rrect.left,
        t2 = rrect.top,
        t3 = rrect.right,
        t4 = rrect.bottom,
        t5 = this._canvasPool;
      if (this._useDomForRenderingFillAndStroke$1(paint)) {
        element = A.buildDrawRectElement(new A.Rect(t1, t2, t3, t4), paint, "draw-rrect", t5._currentTransform);
        A.applyRRectBorderRadius(element.style, rrect);
        this._drawElement$3(element, new A.Offset(Math.min(t1, t3), Math.min(t2, t4)), paint);
      } else {
        t5.get$contextHandle().setUpPaint$2(paint, new A.Rect(t1, t2, t3, t4));
        t1 = paint.style;
        shaderBounds = t5.get$contextHandle()._shaderBounds;
        t2 = t5.get$context(t5);
        rrect = (shaderBounds == null ? rrect : rrect.shift$1(new A.Offset(-shaderBounds.left, -shaderBounds.top))).scaleRadii$0();
        left = rrect.left;
        right = rrect.right;
        $top = rrect.top;
        bottom = rrect.bottom;
        if (left > right) {
          t0 = right;
          right = left;
          left = t0;
        }
        if ($top > bottom) {
          t0 = bottom;
          bottom = $top;
          $top = t0;
        }
        trRadiusX = Math.abs(rrect.trRadiusX);
        tlRadiusX = Math.abs(rrect.tlRadiusX);
        trRadiusY = Math.abs(rrect.trRadiusY);
        tlRadiusY = Math.abs(rrect.tlRadiusY);
        blRadiusX = Math.abs(rrect.blRadiusX);
        brRadiusX = Math.abs(rrect.brRadiusX);
        blRadiusY = Math.abs(rrect.blRadiusY);
        brRadiusY = Math.abs(rrect.brRadiusY);
        t2.beginPath();
        t2.moveTo(left + trRadiusX, $top);
        t3 = right - trRadiusX;
        t2.lineTo(t3, $top);
        A.drawEllipse(t2, t3, $top + trRadiusY, trRadiusX, trRadiusY, 0, 4.71238898038469, 6.283185307179586, false);
        t3 = bottom - brRadiusY;
        t2.lineTo(right, t3);
        A.drawEllipse(t2, right - brRadiusX, t3, brRadiusX, brRadiusY, 0, 0, 1.5707963267948966, false);
        t3 = left + blRadiusX;
        t2.lineTo(t3, bottom);
        A.drawEllipse(t2, t3, bottom - blRadiusY, blRadiusX, blRadiusY, 0, 1.5707963267948966, 3.141592653589793, false);
        t3 = $top + tlRadiusY;
        t2.lineTo(left, t3);
        A.drawEllipse(t2, left + tlRadiusX, t3, tlRadiusX, tlRadiusY, 0, 3.141592653589793, 4.71238898038469, false);
        t5.get$contextHandle().paint$1(t1);
        t5.get$contextHandle().tearDownPaint$0();
      }
    },
    drawCircle$3(_, c, radius, paint) {
      var element, t1, t2, shaderBounds, t3, cx, cy, _this = this,
        rect = A.Rect$fromCircle(c, radius);
      if (_this._useDomForRenderingFillAndStroke$1(paint)) {
        element = A.buildDrawRectElement(rect, paint, "draw-circle", _this._canvasPool._currentTransform);
        _this._drawElement$3(element, new A.Offset(Math.min(rect.left, rect.right), Math.min(rect.top, rect.bottom)), paint);
        t1 = element.style;
        B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "border-radius"), "50%", "");
      } else {
        t1 = paint.shader != null ? A.Rect$fromCircle(c, radius) : null;
        t2 = _this._canvasPool;
        t2.get$contextHandle().setUpPaint$2(paint, t1);
        t1 = paint.style;
        t2.get$context(t2).beginPath();
        shaderBounds = t2.get$contextHandle()._shaderBounds;
        t3 = shaderBounds == null;
        cx = c._dx;
        cx = t3 ? cx : cx - shaderBounds.left;
        cy = c._dy;
        cy = t3 ? cy : cy - shaderBounds.top;
        A.drawEllipse(t2.get$context(t2), cx, cy, radius, radius, 0, 0, 6.283185307179586, false);
        t2.get$contextHandle().paint$1(t1);
        t2.get$contextHandle().tearDownPaint$0();
      }
    },
    drawPath$2(_, path, paint) {
      var t1, transform, pathAsLine, t2, t3, t4, rect, pathAsRect, pathAsRRect, pathBounds, svgElm, style, cssColor, sigma, _this = this;
      if (!_this._renderStrategy.isInsideSvgFilterTree)
        if (!(!_this._preserveImageData && _this._contains3dTransform))
          t1 = _this._childOverdraw && _this._canvasPool.__engine$_canvas == null && paint.maskFilter == null && paint.shader == null && paint.style !== B.PaintingStyle_1;
        else
          t1 = true;
      else
        t1 = true;
      if (t1) {
        t1 = _this._canvasPool;
        transform = t1._currentTransform;
        type$.SurfacePath._as(path);
        pathAsLine = path.pathRef.getStraightLine$0();
        if (pathAsLine != null) {
          t2 = pathAsLine.top;
          t3 = pathAsLine.bottom;
          t4 = pathAsLine.left;
          rect = t2 === t3 ? new A.Rect(t4, t2, t4 + (pathAsLine.right - t4), t2 + 1) : new A.Rect(t4, t2, t4 + 1, t2 + (t3 - t2));
          _this._drawElement$3(A.buildDrawRectElement(rect, paint, "draw-rect", t1._currentTransform), new A.Offset(Math.min(rect.left, rect.right), Math.min(rect.top, rect.bottom)), paint);
          return;
        }
        pathAsRect = path.pathRef.getRect$0();
        if (pathAsRect != null) {
          _this.drawRect$2(0, pathAsRect, paint);
          return;
        }
        t2 = path.pathRef;
        pathAsRRect = t2.fIsRRect ? t2._getRRect$0() : null;
        if (pathAsRRect != null) {
          _this.drawRRect$2(0, pathAsRRect, paint);
          return;
        }
        pathBounds = path.getBounds$0(0);
        svgElm = A.pathToSvgElement(path, paint, A.S(pathBounds.right), A.S(pathBounds.bottom));
        if (t1.clipStack == null) {
          style = svgElm.style;
          style.position = "absolute";
          if (!transform.isIdentity$0(0)) {
            t1 = A.float64ListToCssTransform(transform.__engine$_m4storage);
            B.CssStyleDeclaration_methods._setPropertyHelper$3(style, B.CssStyleDeclaration_methods._browserPropertyName$1(style, "transform"), t1, "");
            B.CssStyleDeclaration_methods._setPropertyHelper$3(style, B.CssStyleDeclaration_methods._browserPropertyName$1(style, "transform-origin"), "0 0 0", "");
          }
        }
        if (paint.maskFilter != null) {
          t1 = paint.style;
          t2 = paint.color;
          if (t2 == null)
            cssColor = "#000000";
          else {
            t2 = A.colorToCssString(t2);
            t2.toString;
            cssColor = t2;
          }
          sigma = paint.maskFilter._sigma;
          t2 = $.$get$_browserEngine();
          if (t2 === B.BrowserEngine_1 && t1 !== B.PaintingStyle_1) {
            t1 = svgElm.style;
            t2 = "0px 0px " + A.S(sigma * 2) + "px " + cssColor;
            B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "box-shadow"), t2, "");
          } else {
            t1 = svgElm.style;
            t2 = "blur(" + A.S(sigma) + "px)";
            B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "filter"), t2, "");
          }
        }
        _this._drawElement$3(svgElm, B.Offset_0_0, paint);
      } else {
        t1 = paint.shader != null ? path.getBounds$0(0) : null;
        t2 = _this._canvasPool;
        t2.get$contextHandle().setUpPaint$2(paint, t1);
        t1 = paint.style;
        if (t1 == null && paint.strokeWidth != null)
          t2.drawPath$2(0, path, B.PaintingStyle_1);
        else
          t2.drawPath$2(0, path, t1);
        t2.get$contextHandle().tearDownPaint$0();
      }
    },
    _closeCurrentCanvas$0() {
      var t2, t3,
        t1 = this._canvasPool;
      if (t1.__engine$_canvas != null) {
        t1._restoreContextSave$0();
        t1._contextHandle.reset$0(0);
        t2 = t1._activeCanvasList;
        if (t2 == null)
          t2 = t1._activeCanvasList = A._setArrayType([], type$.JSArray_CanvasElement);
        t3 = t1.__engine$_canvas;
        t3.toString;
        t2.push(t3);
        t1._contextHandle = t1.__engine$_context = t1.__engine$_canvas = null;
      }
      this._childOverdraw = true;
      this._cachedLastCssFont = null;
    },
    drawText$5$shadows$style(text, x, y, shadows, style) {
      var t1 = this._canvasPool,
        ctx = t1.get$context(t1);
      if (style === B.PaintingStyle_1)
        ctx.strokeText(text, x, y);
      else
        B.CanvasRenderingContext2D_methods.fillText$3(ctx, text, x, y);
    },
    drawText$4$style(text, x, y, style) {
      return this.drawText$5$shadows$style(text, x, y, null, style);
    },
    drawParagraph$2(_, paragraph, offset) {
      var value, paragraphElement, t1, t2, clipElements, t3, _i, clipElement, _this = this;
      if (paragraph.drawOnCanvas && !_this._childOverdraw && !_this._renderStrategy.isInsideSvgFilterTree) {
        value = paragraph.__CanvasParagraph__paintService;
        if (value === $) {
          A._lateInitializeOnceCheck(value, "_paintService");
          value = paragraph.__CanvasParagraph__paintService = new A.TextPaintService(paragraph);
        }
        value.paint$2(_this, offset);
        return;
      }
      paragraphElement = A.drawParagraphElement(paragraph, offset, null);
      t1 = _this._canvasPool;
      t2 = t1.clipStack;
      t1 = t1._currentTransform;
      if (t2 != null) {
        clipElements = A._clipContent(t2, paragraphElement, offset, t1);
        for (t1 = clipElements.length, t2 = _this.rootElement, t3 = _this.__engine$_children, _i = 0; _i < clipElements.length; clipElements.length === t1 || (0, A.throwConcurrentModificationError)(clipElements), ++_i) {
          clipElement = clipElements[_i];
          t2.appendChild(clipElement);
          t3.push(clipElement);
        }
      } else {
        A.setElementTransform(paragraphElement, A.transformWithOffset(t1, offset).__engine$_m4storage);
        _this.rootElement.appendChild(paragraphElement);
      }
      _this.__engine$_children.push(paragraphElement);
      t1 = paragraphElement.style;
      t1.left = "0px";
      t1.top = "0px";
      _this._closeCurrentCanvas$0();
    },
    endOfPaint$0() {
      var t1, t2, t3, t4, t5, paintOrderElement, t6, t7, firstChild, _this = this;
      _this._canvasPool.endOfPaint$0();
      t1 = _this._elementCache;
      if (t1 != null)
        t1.commitFrame$0();
      if (_this._contains3dTransform) {
        t1 = $.$get$_browserEngine();
        t1 = t1 === B.BrowserEngine_1;
      } else
        t1 = false;
      if (t1)
        for (t1 = _this.rootElement, t2 = J.get$children$x(t1), t2 = t2.get$iterator(t2), t3 = _this.__engine$_children, t4 = A._instanceType(t2)._precomputed1; t2.moveNext$0();) {
          t5 = t2.__interceptors$_current;
          if (t5 == null)
            t5 = t4._as(t5);
          paintOrderElement = document.createElement("div");
          t6 = paintOrderElement.style;
          t7 = B.CssStyleDeclaration_methods._browserPropertyName$1(t6, "transform");
          t6.setProperty(t7, "translate3d(0,0,0)", "");
          paintOrderElement.appendChild(t5);
          t1.appendChild(paintOrderElement);
          t3.push(paintOrderElement);
        }
      firstChild = _this.rootElement.firstChild;
      if (firstChild != null && type$.HtmlElement._is(firstChild) && firstChild.tagName.toLowerCase() === "canvas") {
        t1 = firstChild.style;
        t1.zIndex = "-1";
      }
    }
  };
  A.SurfaceCanvas.prototype = {
    save$0(_) {
      var t1 = this.__engine$_canvas;
      t1._paintBounds.saveTransformsAndClip$0();
      t1._commands.push(B.C_PaintSave);
      ++t1._saveCount;
    },
    saveLayer$2(_, bounds, paint) {
      var t1 = this.__engine$_canvas;
      type$.SurfacePaint._as(paint);
      t1.renderStrategy.hasArbitraryPaint = true;
      t1._commands.push(B.C_PaintSave);
      t1._paintBounds.saveTransformsAndClip$0();
      ++t1._saveCount;
    },
    restore$0(_) {
      var t2, clipRect,
        t1 = this.__engine$_canvas;
      if (!t1._recordingEnded && t1._saveCount > 1) {
        t2 = t1._paintBounds;
        t2._currentMatrix = t2.__engine$_transforms.pop();
        clipRect = t2._clipStack.pop();
        if (clipRect != null) {
          t2._currentClipLeft = clipRect.left;
          t2._currentClipTop = clipRect.top;
          t2._currentClipRight = clipRect.right;
          t2._currentClipBottom = clipRect.bottom;
          t2._clipRectInitialized = true;
        } else if (t2._clipRectInitialized)
          t2._clipRectInitialized = false;
      }
      t2 = t1._commands;
      if (t2.length !== 0 && B.JSArray_methods.get$last(t2) instanceof A.PaintSave)
        t2.pop();
      else
        t2.push(B.C_PaintRestore);
      --t1._saveCount;
    },
    translate$2(_, dx, dy) {
      var t1 = this.__engine$_canvas,
        t2 = t1._paintBounds;
      if (dx !== 0 || dy !== 0)
        t2._currentMatrixIsIdentity = false;
      t2._currentMatrix.translate$2(0, dx, dy);
      t1._commands.push(new A.PaintTranslate(dx, dy));
    },
    transform$1(_, matrix4) {
      var t1 = A.toMatrix32(matrix4),
        t2 = this.__engine$_canvas,
        t3 = t2._paintBounds;
      t3._currentMatrix.multiply$1(0, new A.Matrix40(t1));
      t3._currentMatrixIsIdentity = t3._currentMatrix.isIdentity$0(0);
      t2._commands.push(new A.PaintTransform(t1));
    },
    clipRect$3$clipOp$doAntiAlias(_, rect, clipOp, doAntiAlias) {
      var t1 = this.__engine$_canvas,
        command = new A.PaintClipRect(rect, clipOp, -1 / 0, -1 / 0, 1 / 0, 1 / 0);
      switch (clipOp.index) {
        case 1:
          t1._paintBounds.clipRect$2(0, rect, command);
          break;
        case 0:
          break;
      }
      t1.renderStrategy.hasArbitraryPaint = true;
      t1._commands.push(command);
    },
    clipRect$1($receiver, rect) {
      return this.clipRect$3$clipOp$doAntiAlias($receiver, rect, B.ClipOp_1, true);
    },
    clipRect$2$doAntiAlias($receiver, rect, doAntiAlias) {
      return this.clipRect$3$clipOp$doAntiAlias($receiver, rect, B.ClipOp_1, doAntiAlias);
    },
    clipRRect$2$doAntiAlias(_, rrect, doAntiAlias) {
      var t1 = this.__engine$_canvas,
        command = new A.PaintClipRRect(rrect, -1 / 0, -1 / 0, 1 / 0, 1 / 0);
      t1._paintBounds.clipRect$2(0, new A.Rect(rrect.left, rrect.top, rrect.right, rrect.bottom), command);
      t1.renderStrategy.hasArbitraryPaint = true;
      t1._commands.push(command);
    },
    clipRRect$1($receiver, rrect) {
      return this.clipRRect$2$doAntiAlias($receiver, rrect, true);
    },
    clipPath$2$doAntiAlias(_, path, doAntiAlias) {
      var command,
        t1 = this.__engine$_canvas;
      type$.SurfacePath._as(path);
      command = new A.PaintClipPath(path, -1 / 0, -1 / 0, 1 / 0, 1 / 0);
      t1._paintBounds.clipRect$2(0, path.getBounds$0(0), command);
      t1.renderStrategy.hasArbitraryPaint = true;
      t1._commands.push(command);
    },
    drawRect$2(_, rect, paint) {
      this.__engine$_canvas.drawRect$2(0, rect, type$.SurfacePaint._as(paint));
    },
    drawRRect$2(_, rrect, paint) {
      this.__engine$_canvas.drawRRect$2(0, rrect, type$.SurfacePaint._as(paint));
    },
    drawDRRect$3(_, outer, inner, paint) {
      this.__engine$_canvas.drawDRRect$3(0, outer, inner, type$.SurfacePaint._as(paint));
    },
    drawCircle$3(_, c, radius, paint) {
      var paintSpread, command, distance, t2, t3,
        t1 = this.__engine$_canvas;
      type$.SurfacePaint._as(paint);
      t1._didDraw = t1.renderStrategy.hasArbitraryPaint = true;
      paintSpread = A._getPaintSpread(paint);
      paint._frozen = true;
      command = new A.PaintDrawCircle(c, radius, paint._paintData, -1 / 0, -1 / 0, 1 / 0, 1 / 0);
      distance = radius + paintSpread;
      t2 = c._dx;
      t3 = c._dy;
      t1._paintBounds.growLTRB$5(t2 - distance, t3 - distance, t2 + distance, t3 + distance, command);
      t1._commands.push(command);
    },
    drawPath$2(_, path, paint) {
      this.__engine$_canvas.drawPath$2(0, path, type$.SurfacePaint._as(paint));
    },
    drawParagraph$2(_, paragraph, offset) {
      this.__engine$_canvas.drawParagraph$2(0, paragraph, offset);
    }
  };
  A._DomClip.prototype = {
    get$childContainer() {
      return this._DomClip__childContainer;
    },
    createElement$0(_) {
      var element = this.defaultCreateElement$1("flt-clip"),
        t1 = A._ElementFactoryProvider_createElement_tag("flt-clip-interior", null);
      this._DomClip__childContainer = t1;
      t1 = t1.style;
      t1.position = "absolute";
      t1 = this._DomClip__childContainer;
      t1.toString;
      element.appendChild(t1);
      return element;
    }
  };
  A.PersistedClipRect.prototype = {
    recomputeTransformAndClip$0() {
      var _this = this;
      _this.transform = _this.parent.transform;
      if (_this.clipBehavior !== B.Clip_0)
        _this.localClipBounds = _this.rect;
      else
        _this.localClipBounds = null;
      _this.projectedClip = null;
    },
    createElement$0(_) {
      var t1 = this.super$_DomClip$createElement(0);
      t1.setAttribute("clip-type", "rect");
      return t1;
    },
    apply$0() {
      var t5, _this = this,
        t1 = _this.rootElement.style,
        t2 = _this.rect,
        t3 = t2.left,
        t4 = A.S(t3) + "px";
      t1.left = t4;
      t4 = t2.top;
      t5 = A.S(t4) + "px";
      t1.top = t5;
      t5 = A.S(t2.right - t3) + "px";
      t1.width = t5;
      t2 = A.S(t2.bottom - t4) + "px";
      t1.height = t2;
      t1 = _this.rootElement;
      t1.toString;
      if (_this.clipBehavior !== B.Clip_0) {
        t1 = t1.style;
        t1.overflow = "hidden";
        t1.zIndex = "0";
      }
      t1 = _this._DomClip__childContainer.style;
      t3 = A.S(-t3) + "px";
      t1.left = t3;
      t2 = A.S(-t4) + "px";
      t1.top = t2;
    },
    update$1(_, oldSurface) {
      var _this = this;
      _this.super$PersistedContainerSurface$update(0, oldSurface);
      if (!_this.rect.$eq(0, oldSurface.rect) || _this.clipBehavior !== oldSurface.clipBehavior) {
        _this.localClipBounds = null;
        _this.apply$0();
      }
    },
    $isClipRectEngineLayer0: 1
  };
  A.PersistedPhysicalShape.prototype = {
    recomputeTransformAndClip$0() {
      var t1, t2, roundRect, rect, _this = this;
      _this.transform = _this.parent.transform;
      if (_this.clipBehavior !== B.Clip_0) {
        t1 = _this.path;
        t2 = t1.pathRef;
        roundRect = t2.fIsRRect ? t2._getRRect$0() : null;
        if (roundRect != null)
          _this.localClipBounds = new A.Rect(roundRect.left, roundRect.top, roundRect.right, roundRect.bottom);
        else {
          rect = t1.pathRef.getRect$0();
          if (rect != null)
            _this.localClipBounds = rect;
          else
            _this.localClipBounds = null;
        }
      } else
        _this.localClipBounds = null;
      _this.projectedClip = null;
    },
    createElement$0(_) {
      var t1 = this.super$_DomClip$createElement(0);
      t1.setAttribute("clip-type", "physical-shape");
      return t1;
    },
    discard$0() {
      var t1, _this = this;
      _this.super$_PersistedPhysicalShape_PersistedContainerSurface__DomClip$discard();
      t1 = _this._clipElement;
      if (t1 != null)
        B.SvgSvgElement_methods.remove$0(t1);
      _this._clipElement = null;
      t1 = _this._svgElement;
      if (t1 != null)
        B.SvgSvgElement_methods.remove$0(t1);
      _this._svgElement = null;
    },
    apply$0() {
      this._applyShape$0();
    },
    _applyShape$0() {
      var roundRect, borderRadius, style, rect, ovalRect, rx, ry, t4, t5, t6, t7, t8, t9, svgClipPath, rootElementStyle, pathBounds2, boxShadowColor, _this = this,
        _s13_ = "border-radius",
        _s6_ = "hidden",
        t1 = _this.rootElement.style,
        t2 = _this.color,
        t3 = A.colorToCssString(t2);
      t1.backgroundColor = t3 == null ? "" : t3;
      t1 = _this.path;
      t3 = t1.pathRef;
      roundRect = t3.fIsRRect ? t3._getRRect$0() : null;
      if (roundRect != null) {
        borderRadius = A.S(roundRect.tlRadiusX) + "px " + A.S(roundRect.trRadiusX) + "px " + A.S(roundRect.brRadiusX) + "px " + A.S(roundRect.blRadiusX) + "px";
        style = _this.rootElement.style;
        t1 = roundRect.left;
        t2 = A.S(t1) + "px";
        style.left = t2;
        t2 = roundRect.top;
        t3 = A.S(t2) + "px";
        style.top = t3;
        t3 = A.S(roundRect.right - t1) + "px";
        style.width = t3;
        t3 = A.S(roundRect.bottom - t2) + "px";
        style.height = t3;
        B.CssStyleDeclaration_methods._setPropertyHelper$3(style, B.CssStyleDeclaration_methods._browserPropertyName$1(style, _s13_), borderRadius, "");
        t3 = _this._DomClip__childContainer.style;
        t1 = A.S(-t1) + "px";
        t3.left = t1;
        t1 = A.S(-t2) + "px";
        t3.top = t1;
        if (_this.clipBehavior !== B.Clip_0)
          style.overflow = _s6_;
        A.applyCssShadow(_this.rootElement, _this.pathBounds, _this.elevation, _this.shadowColor);
        return;
      } else {
        rect = t1.pathRef.getRect$0();
        if (rect != null) {
          style = _this.rootElement.style;
          t1 = rect.left;
          t2 = A.S(t1) + "px";
          style.left = t2;
          t2 = rect.top;
          t3 = A.S(t2) + "px";
          style.top = t3;
          t3 = A.S(rect.right - t1) + "px";
          style.width = t3;
          t3 = A.S(rect.bottom - t2) + "px";
          style.height = t3;
          B.CssStyleDeclaration_methods._setPropertyHelper$3(style, B.CssStyleDeclaration_methods._browserPropertyName$1(style, _s13_), "", "");
          t3 = _this._DomClip__childContainer.style;
          t1 = A.S(-t1) + "px";
          t3.left = t1;
          t1 = A.S(-t2) + "px";
          t3.top = t1;
          if (_this.clipBehavior !== B.Clip_0)
            style.overflow = _s6_;
          A.applyCssShadow(_this.rootElement, _this.pathBounds, _this.elevation, _this.shadowColor);
          return;
        } else {
          t3 = t1.pathRef;
          ovalRect = (t3.fIsOval ? t3.fRRectOrOvalStartIdx : -1) === -1 ? null : t3.getBounds$0(0);
          if (ovalRect != null) {
            t1 = ovalRect.right;
            t2 = ovalRect.left;
            rx = (t1 - t2) / 2;
            t1 = ovalRect.bottom;
            t3 = ovalRect.top;
            ry = (t1 - t3) / 2;
            borderRadius = rx === ry ? A.S(rx) + "px " : A.S(rx) + "px " + A.S(ry) + "px ";
            style = _this.rootElement.style;
            t1 = A.S(t2) + "px";
            style.left = t1;
            t1 = A.S(t3) + "px";
            style.top = t1;
            t1 = A.S(rx * 2) + "px";
            style.width = t1;
            t1 = A.S(ry * 2) + "px";
            style.height = t1;
            B.CssStyleDeclaration_methods._setPropertyHelper$3(style, B.CssStyleDeclaration_methods._browserPropertyName$1(style, _s13_), borderRadius, "");
            t1 = _this._DomClip__childContainer.style;
            t2 = A.S(-t2) + "px";
            t1.left = t2;
            t2 = A.S(-t3) + "px";
            t1.top = t2;
            if (_this.clipBehavior !== B.Clip_0)
              style.overflow = _s6_;
            A.applyCssShadow(_this.rootElement, _this.pathBounds, _this.elevation, _this.shadowColor);
            return;
          }
        }
      }
      t3 = _this.elevation;
      t4 = t3 === 0;
      t5 = _this.pathBounds;
      t6 = t5.right;
      t7 = t5.bottom;
      if (t4) {
        t8 = t5.left;
        t9 = t5.top;
        svgClipPath = A.pathToSvgClipPath(t1, -t8, -t9, 1 / (t6 - t8), 1 / (t7 - t9));
      } else
        svgClipPath = A.pathToSvgClipPath(t1, 0, 0, 1 / t6, 1 / t7);
      t8 = _this._clipElement;
      if (t8 != null)
        B.SvgSvgElement_methods.remove$0(t8);
      t8 = _this._svgElement;
      if (t8 != null)
        B.SvgSvgElement_methods.remove$0(t8);
      _this._clipElement = svgClipPath;
      _this.rootElement.appendChild(svgClipPath);
      if (t4) {
        t1 = _this.rootElement;
        t1.toString;
        A.setClipPath(t1, "url(#svgClip" + $._clipIdCounter + ")");
        rootElementStyle = _this.rootElement.style;
        rootElementStyle.overflow = "";
        t1 = t5.left;
        t2 = A.S(t1) + "px";
        rootElementStyle.left = t2;
        t2 = t5.top;
        t3 = A.S(t2) + "px";
        rootElementStyle.top = t3;
        t3 = A.S(t6 - t1) + "px";
        rootElementStyle.width = t3;
        t3 = A.S(t7 - t2) + "px";
        rootElementStyle.height = t3;
        B.CssStyleDeclaration_methods._setPropertyHelper$3(rootElementStyle, B.CssStyleDeclaration_methods._browserPropertyName$1(rootElementStyle, _s13_), "", "");
        t3 = _this._DomClip__childContainer.style;
        t1 = "-" + A.S(t1) + "px";
        t3.left = t1;
        t1 = "-" + A.S(t2) + "px";
        t3.top = t1;
        return;
      }
      t4 = _this._DomClip__childContainer;
      t4.toString;
      A.setClipPath(t4, "url(#svgClip" + $._clipIdCounter + ")");
      rootElementStyle = _this.rootElement.style;
      rootElementStyle.overflow = "";
      t4 = t5.left;
      t8 = A.S(t4) + "px";
      rootElementStyle.left = t8;
      t8 = t5.top;
      t9 = A.S(t8) + "px";
      rootElementStyle.top = t9;
      t9 = A.S(t6 - t4) + "px";
      rootElementStyle.width = t9;
      t9 = A.S(t7 - t8) + "px";
      rootElementStyle.height = t9;
      B.CssStyleDeclaration_methods._setPropertyHelper$3(rootElementStyle, B.CssStyleDeclaration_methods._browserPropertyName$1(rootElementStyle, _s13_), "", "");
      t9 = _this._DomClip__childContainer.style;
      t4 = "-" + A.S(t4) + "px";
      t9.left = t4;
      t4 = "-" + A.S(t8) + "px";
      t9.top = t4;
      t4 = A.S(t6) + "px";
      t9.width = t4;
      t4 = A.S(t7) + "px";
      t9.height = t4;
      pathBounds2 = t1.getBounds$0(0);
      t4 = new A.SurfacePaintData();
      t4.style = B.PaintingStyle_0;
      t4.color = t2;
      t4 = A.pathToSvgElement(t1, t4, A.S(pathBounds2.right), A.S(pathBounds2.bottom));
      _this._svgElement = t4;
      _this.rootElement.insertBefore(t4, _this._DomClip__childContainer);
      t3 = A.computeShadow(t5, t3);
      t3.toString;
      boxShadowColor = A.toShadowColor(_this.shadowColor);
      t5 = _this._svgElement.style;
      t4 = t3.offset;
      t1 = boxShadowColor.value;
      t1 = "drop-shadow(" + A.S(t4._dx) + "px " + A.S(t4._dy) + "px " + A.S(t3.blurWidth) + "px rgba(" + (t1 >>> 16 & 255) + ", " + (t1 >>> 8 & 255) + ", " + (t1 & 255) + ", " + A.S((t1 >>> 24 & 255) / 255) + "))";
      B.CssStyleDeclaration_methods._setPropertyHelper$3(t5, B.CssStyleDeclaration_methods._browserPropertyName$1(t5, "filter"), t1, "");
      t1 = "translate(-" + A.S(pathBounds2.left) + "px, -" + A.S(pathBounds2.top) + "px)";
      B.CssStyleDeclaration_methods._setPropertyHelper$3(t5, B.CssStyleDeclaration_methods._browserPropertyName$1(t5, "transform"), t1, "");
      t1 = _this.rootElement.style;
      t1.backgroundColor = "";
    },
    update$1(_, oldSurface) {
      var t1, t2, _this = this;
      _this.super$PersistedContainerSurface$update(0, oldSurface);
      t1 = oldSurface.path === _this.path;
      if (!t1)
        _this.localClipBounds = null;
      t1 = !t1 || oldSurface.elevation !== _this.elevation || !oldSurface.shadowColor.$eq(0, _this.shadowColor) || !oldSurface.color.$eq(0, _this.color);
      t2 = oldSurface._clipElement;
      if (t1) {
        if (t2 != null)
          B.SvgSvgElement_methods.remove$0(t2);
        oldSurface._clipElement = null;
        t1 = oldSurface._svgElement;
        if (t1 != null)
          B.SvgSvgElement_methods.remove$0(t1);
        oldSurface._svgElement = null;
        t1 = _this._clipElement;
        if (t1 != null)
          B.SvgSvgElement_methods.remove$0(t1);
        _this._clipElement = null;
        t1 = _this._svgElement;
        if (t1 != null)
          B.SvgSvgElement_methods.remove$0(t1);
        _this._svgElement = null;
        t1 = _this.rootElement;
        t1.toString;
        A.setClipPath(t1, "");
        _this._applyShape$0();
      } else {
        _this._clipElement = t2;
        if (t2 != null)
          _this.rootElement.appendChild(t2);
        oldSurface._clipElement = null;
        t1 = _this._svgElement = oldSurface._svgElement;
        if (t1 != null)
          _this.rootElement.insertBefore(t1, _this._DomClip__childContainer);
        oldSurface._svgElement = null;
      }
    },
    $isPhysicalShapeEngineLayer0: 1
  };
  A.PersistedClipPath.prototype = {
    createElement$0(_) {
      return this.defaultCreateElement$1("flt-clippath");
    },
    recomputeTransformAndClip$0() {
      var _this = this;
      _this.super$PersistedContainerSurface$recomputeTransformAndClip();
      if (_this.clipBehavior !== B.Clip_0) {
        if (_this.localClipBounds == null)
          _this.localClipBounds = _this.clipPath.getBounds$0(0);
      } else
        _this.localClipBounds = null;
    },
    apply$0() {
      var _this = this,
        t1 = _this._clipElement;
      if (t1 != null)
        B.SvgSvgElement_methods.remove$0(t1);
      t1 = _this.rootElement;
      t1.toString;
      t1 = A.createSvgClipDef(type$.HtmlElement._as(t1), _this.clipPath);
      _this._clipElement = t1;
      _this.rootElement.appendChild(t1);
    },
    update$1(_, oldSurface) {
      var t1, _this = this;
      _this.super$PersistedContainerSurface$update(0, oldSurface);
      if (oldSurface.clipPath !== _this.clipPath) {
        _this.localClipBounds = null;
        t1 = oldSurface._clipElement;
        if (t1 != null)
          B.SvgSvgElement_methods.remove$0(t1);
        _this.apply$0();
      } else
        _this._clipElement = oldSurface._clipElement;
      oldSurface._clipElement = null;
    },
    discard$0() {
      var t1 = this._clipElement;
      if (t1 != null)
        B.SvgSvgElement_methods.remove$0(t1);
      this._clipElement = null;
      this.super$PersistedContainerSurface$discard();
    },
    $isClipPathEngineLayer0: 1
  };
  A.DomCanvas.prototype = {
    clipRect$2(_, rect, clipOp) {
      throw A.wrapException(A.UnimplementedError$(null));
    },
    clipRRect$1(_, rrect) {
      throw A.wrapException(A.UnimplementedError$(null));
    },
    clipPath$1(_, path) {
      throw A.wrapException(A.UnimplementedError$(null));
    },
    drawRect$2(_, rect, paint) {
      var t1 = this.SaveElementStackTracking__elementStack;
      t1 = t1.length === 0 ? this.rootElement : B.JSArray_methods.get$last(t1);
      t1.appendChild(A.buildDrawRectElement(rect, paint, "draw-rect", this.SaveElementStackTracking__currentTransform));
    },
    drawRRect$2(_, rrect, paint) {
      var t1,
        element = A.buildDrawRectElement(new A.Rect(rrect.left, rrect.top, rrect.right, rrect.bottom), paint, "draw-rrect", this.SaveElementStackTracking__currentTransform);
      A.applyRRectBorderRadius(element.style, rrect);
      t1 = this.SaveElementStackTracking__elementStack;
      (t1.length === 0 ? this.rootElement : B.JSArray_methods.get$last(t1)).appendChild(element);
    },
    drawCircle$3(_, c, radius, paint) {
      throw A.wrapException(A.UnimplementedError$(null));
    },
    drawPath$2(_, path, paint) {
      throw A.wrapException(A.UnimplementedError$(null));
    },
    drawParagraph$2(_, paragraph, offset) {
      var paragraphElement = A.drawParagraphElement(paragraph, offset, this.SaveElementStackTracking__currentTransform),
        t1 = this.SaveElementStackTracking__elementStack;
      (t1.length === 0 ? this.rootElement : B.JSArray_methods.get$last(t1)).appendChild(paragraphElement);
    },
    endOfPaint$0() {
    }
  };
  A.PersistedOffset.prototype = {
    recomputeTransformAndClip$0() {
      var t2, t3, _this = this,
        t1 = _this.parent.transform;
      _this.transform = t1;
      t2 = _this.dx;
      if (t2 !== 0 || _this.dy !== 0) {
        t1.toString;
        t3 = new A.Matrix40(new Float32Array(16));
        t3.setFrom$1(t1);
        _this.transform = t3;
        t3.translate$2(0, t2, _this.dy);
      }
      _this.projectedClip = null;
    },
    get$localTransformInverse() {
      var _this = this,
        t1 = _this._localTransformInverse;
      if (t1 == null) {
        t1 = A.Matrix4$identity();
        t1.setTranslationRaw$3(-_this.dx, -_this.dy, 0);
        _this._localTransformInverse = t1;
      }
      return t1;
    },
    createElement$0(_) {
      var element = document.createElement("flt-offset");
      A.setElementStyle(element, "position", "absolute");
      A.setElementStyle(element, "transform-origin", "0 0 0");
      return element;
    },
    apply$0() {
      var t1 = this.rootElement.style,
        t2 = "translate(" + A.S(this.dx) + "px, " + A.S(this.dy) + "px)";
      B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "transform"), t2, "");
    },
    update$1(_, oldSurface) {
      var _this = this;
      _this.super$PersistedContainerSurface$update(0, oldSurface);
      if (oldSurface.dx !== _this.dx || oldSurface.dy !== _this.dy)
        _this.apply$0();
    },
    $isOffsetEngineLayer0: 1
  };
  A.SurfacePaint.prototype = {
    set$blendMode(value) {
      var _this = this;
      if (_this._frozen) {
        _this._paintData = _this._paintData.clone$0(0);
        _this._frozen = false;
      }
      _this._paintData.blendMode = value;
    },
    get$style(_) {
      var t1 = this._paintData.style;
      return t1 == null ? B.PaintingStyle_0 : t1;
    },
    set$style(_, value) {
      var _this = this;
      if (_this._frozen) {
        _this._paintData = _this._paintData.clone$0(0);
        _this._frozen = false;
      }
      _this._paintData.style = value;
    },
    get$strokeWidth() {
      var t1 = this._paintData.strokeWidth;
      return t1 == null ? 0 : t1;
    },
    set$strokeWidth(value) {
      var _this = this;
      if (_this._frozen) {
        _this._paintData = _this._paintData.clone$0(0);
        _this._frozen = false;
      }
      _this._paintData.strokeWidth = value;
    },
    get$color(_) {
      var t1 = this._paintData.color;
      return t1 == null ? B.Color_4278190080 : t1;
    },
    set$color(_, value) {
      var t1, _this = this;
      if (_this._frozen) {
        _this._paintData = _this._paintData.clone$0(0);
        _this._frozen = false;
      }
      t1 = _this._paintData;
      t1.color = A.getRuntimeType(value) === B.Type_Color_MG2 ? value : new A.Color(value.value);
    },
    set$shader(value) {
      var _this = this;
      if (_this._frozen) {
        _this._paintData = _this._paintData.clone$0(0);
        _this._frozen = false;
      }
      _this._paintData.shader = value;
    },
    set$maskFilter(value) {
      var _this = this;
      if (_this._frozen) {
        _this._paintData = _this._paintData.clone$0(0);
        _this._frozen = false;
      }
      _this._paintData.maskFilter = value;
    },
    toString$0(_) {
      var semicolon, _this = this,
        t1 = "" + "Paint(",
        t2 = _this._paintData.style,
        t3 = t2 == null;
      if ((t3 ? B.PaintingStyle_0 : t2) === B.PaintingStyle_1) {
        t1 += (t3 ? B.PaintingStyle_0 : t2).toString$0(0);
        t2 = _this._paintData.strokeWidth;
        t3 = t2 == null;
        if ((t3 ? 0 : t2) !== 0)
          t1 += " " + A.S(t3 ? 0 : t2);
        else
          t1 += " hairline";
        semicolon = "; ";
      } else
        semicolon = "";
      t2 = _this._paintData;
      if (!t2.isAntiAlias) {
        t1 += semicolon + "antialias off";
        semicolon = "; ";
      }
      t2 = t2.color;
      if (!(t2 == null ? B.Color_4278190080 : t2).$eq(0, B.Color_4278190080)) {
        t2 = _this._paintData.color;
        t1 += semicolon + (t2 == null ? B.Color_4278190080 : t2).toString$0(0);
      }
      t1 += ")";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isPaint: 1
  };
  A.SurfacePaintData.prototype = {
    clone$0(_) {
      var _this = this,
        t1 = new A.SurfacePaintData();
      t1.blendMode = _this.blendMode;
      t1.filterQuality = _this.filterQuality;
      t1.maskFilter = _this.maskFilter;
      t1.shader = _this.shader;
      t1.isAntiAlias = _this.isAntiAlias;
      t1.color = _this.color;
      t1.colorFilter = _this.colorFilter;
      t1.strokeWidth = _this.strokeWidth;
      t1.style = _this.style;
      t1.strokeJoin = _this.strokeJoin;
      t1.strokeCap = _this.strokeCap;
      return t1;
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.Conic.prototype = {
    toQuads$0() {
      var dst, t1, t2, t3, controlPointOffset, skipSubdivide, pointCount, hasNonFinitePoints, p, _this = this,
        pointList = A._setArrayType([], type$.JSArray_Offset),
        subdivideCount = _this._computeSubdivisionCount$1(0.25),
        quadCount = B.JSInt_methods._shlPositive$1(1, subdivideCount);
      pointList.push(new A.Offset(_this.p0x, _this.p0y));
      if (subdivideCount === 5) {
        dst = new A._ConicPair();
        _this._chop$1(dst);
        t1 = dst.first;
        t1.toString;
        t2 = dst.second;
        t2.toString;
        t3 = t1.p1x;
        if (t3 === t1.p2x && t1.p1y === t1.p2y && t2.p0x === t2.p1x && t2.p0y === t2.p1y) {
          controlPointOffset = new A.Offset(t3, t1.p1y);
          pointList.push(controlPointOffset);
          pointList.push(controlPointOffset);
          pointList.push(controlPointOffset);
          pointList.push(new A.Offset(t2.p2x, t2.p2y));
          quadCount = 2;
          skipSubdivide = true;
        } else
          skipSubdivide = false;
      } else
        skipSubdivide = false;
      if (!skipSubdivide)
        A.Conic__subdivide(_this, subdivideCount, pointList);
      pointCount = 2 * quadCount + 1;
      p = 0;
      while (true) {
        if (!(p < pointCount)) {
          hasNonFinitePoints = false;
          break;
        }
        t1 = pointList[p];
        if (isNaN(t1._dx) || isNaN(t1._dy)) {
          hasNonFinitePoints = true;
          break;
        }
        ++p;
      }
      if (hasNonFinitePoints)
        for (t1 = pointCount - 1, t2 = _this.p1x, t3 = _this.p1y, p = 1; p < t1; ++p)
          pointList[p] = new A.Offset(t2, t3);
      return pointList;
    },
    _chop$1(pair) {
      var w2, scaleHalf, _this = this,
        t1 = _this.fW,
        scale = 1 / (1 + t1),
        newW = Math.sqrt(0.5 + t1 * 0.5),
        t2 = _this.p1x,
        t3 = t1 * t2,
        t4 = _this.p1y,
        t5 = t1 * t4,
        t6 = _this.p0x,
        t7 = _this.p2x,
        t8 = (t6 + 2 * t3 + t7) * scale * 0.5,
        t9 = _this.p0y,
        t10 = _this.p2y,
        t11 = (t9 + 2 * t5 + t10) * scale * 0.5,
        m = new A.Offset(t8, t11);
      if (isNaN(t8) || isNaN(t11)) {
        w2 = t1 * 2;
        scaleHalf = scale * 0.5;
        m = new A.Offset((t6 + w2 * t2 + t7) * scaleHalf, (t9 + w2 * t4 + t10) * scaleHalf);
      }
      t1 = m._dx;
      t2 = m._dy;
      pair.first = new A.Conic(t6, t9, (t6 + t3) * scale, (t9 + t5) * scale, t1, t2, newW);
      pair.second = new A.Conic(t1, t2, (t7 + t3) * scale, (t10 + t5) * scale, t7, t10, newW);
    },
    chopAtYExtrema$1(dst) {
      var _this = this,
        t = _this._findYExtrema$0();
      if (t == null) {
        dst.push(_this);
        return;
      }
      if (!_this._chopAt$3$cleanupMiddle(t, dst, true)) {
        dst.push(_this);
        return;
      }
    },
    _findYExtrema$0() {
      var wP10, quadRoots, _this = this,
        t1 = _this.p2y,
        t2 = _this.p0y,
        p20 = t1 - t2;
      t1 = _this.fW;
      wP10 = t1 * (_this.p1y - t2);
      quadRoots = new A.QuadRoots();
      if (quadRoots.findRoots$3(t1 * p20 - p20, p20 - 2 * wP10, wP10) === 1)
        return quadRoots.root0;
      return null;
    },
    _chopAt$3$cleanupMiddle(t, dst, cleanupMiddle) {
      var chopPointX, chopPointY, t2, _this = this,
        tx0 = _this.p0x,
        ty0 = _this.p0y,
        t1 = _this.fW,
        tx1 = _this.p1x * t1,
        ty1 = _this.p1y * t1,
        tx2 = _this.p2x,
        ty2 = _this.p2y,
        dx0 = tx0 + (tx1 - tx0) * t,
        dx2 = tx1 + (tx2 - tx1) * t,
        dy0 = ty0 + (ty1 - ty0) * t,
        dz0 = 1 + (t1 - 1) * t,
        dz2 = t1 + (1 - t1) * t,
        dz1 = dz0 + (dz2 - dz0) * t,
        root = Math.sqrt(dz1);
      if (Math.abs(root - 0) < 0.000244140625)
        return false;
      if (Math.abs(dz0 - 0) < 0.000244140625 || Math.abs(dz1 - 0) < 0.000244140625 || Math.abs(dz2 - 0) < 0.000244140625)
        return false;
      chopPointX = (dx0 + (dx2 - dx0) * t) / dz1;
      chopPointY = (dy0 + (ty1 + (ty2 - ty1) * t - dy0) * t) / dz1;
      t1 = _this.p0y;
      t2 = _this.p2y;
      dst.push(new A.Conic(tx0, t1, dx0 / dz0, chopPointY, chopPointX, chopPointY, dz0 / root));
      dst.push(new A.Conic(chopPointX, chopPointY, dx2 / dz2, chopPointY, tx2, t2, dz2 / root));
      return true;
    },
    _computeSubdivisionCount$1(tolerance) {
      var a, k, x, y, error, pow2, _this = this;
      if (tolerance < 0)
        return 0;
      a = _this.fW - 1;
      k = a / (4 * (2 + a));
      x = k * (_this.p0x - 2 * _this.p1x + _this.p2x);
      y = k * (_this.p0y - 2 * _this.p1y + _this.p2y);
      error = Math.sqrt(x * x + y * y);
      for (pow2 = 0; pow2 < 5; ++pow2) {
        if (error <= tolerance)
          break;
        error *= 0.25;
      }
      return pow2;
    },
    evalTangentAt$1(t) {
      var t1, p20x, t2, t3, p20y, cx, cy, quadC, _this = this;
      if (!(t === 0 && _this.p0x === _this.p1x && _this.p0y === _this.p1y))
        t1 = t === 1 && _this.p1x === _this.p2x && _this.p1y === _this.p2y;
      else
        t1 = true;
      if (t1)
        return new A.Offset(_this.p2x - _this.p0x, _this.p2y - _this.p0y);
      t1 = _this.p0x;
      p20x = _this.p2x - t1;
      t2 = _this.p2y;
      t3 = _this.p0y;
      p20y = t2 - t3;
      t2 = _this.fW;
      cx = t2 * (_this.p1x - t1);
      cy = t2 * (_this.p1y - t3);
      quadC = A.SkQuadCoefficients$(t2 * p20x - p20x, t2 * p20y - p20y, p20x - cx - cx, p20y - cy - cy, cx, cy);
      return new A.Offset(quadC.evalX$1(t), quadC.evalY$1(t));
    }
  };
  A.QuadBounds.prototype = {};
  A.ConicBounds.prototype = {};
  A._ConicPair.prototype = {};
  A.CubicBounds.prototype = {};
  A.SurfacePath.prototype = {
    _resetFields$0() {
      var _this = this;
      _this.fLastMoveToIndex = 0;
      _this._fillType = B.PathFillType_0;
      _this._firstDirection = _this._convexityType = -1;
    },
    _copyFields$1(source) {
      var _this = this;
      _this._fillType = source._fillType;
      _this.fLastMoveToIndex = source.fLastMoveToIndex;
      _this._convexityType = source._convexityType;
      _this._firstDirection = source._firstDirection;
    },
    set$fillType(value) {
      this._fillType = value;
    },
    reset$0(_) {
      if (this.pathRef._fVerbsLength !== 0) {
        this.pathRef = A.PathRef$();
        this._resetFields$0();
      }
    },
    moveTo$2(_, x, y) {
      var _this = this,
        pointIndex = _this.pathRef.growForVerb$2(0, 0);
      _this.fLastMoveToIndex = pointIndex + 1;
      _this.pathRef.setPoint$3(pointIndex, x, y);
      _this._firstDirection = _this._convexityType = -1;
    },
    _injectMoveToIfNeeded$0() {
      var t2, x, y, pointIndex,
        t1 = this.fLastMoveToIndex;
      if (t1 <= 0) {
        t2 = this.pathRef;
        if (t2._fPointsLength === 0) {
          x = 0;
          y = 0;
        } else {
          pointIndex = 2 * (-t1 - 1);
          t1 = t2.fPoints;
          x = t1[pointIndex];
          y = t1[pointIndex + 1];
        }
        this.moveTo$2(0, x, y);
      }
    },
    lineTo$2(_, x, y) {
      var pointIndex, _this = this;
      if (_this.fLastMoveToIndex <= 0)
        _this._injectMoveToIfNeeded$0();
      pointIndex = _this.pathRef.growForVerb$2(1, 0);
      _this.pathRef.setPoint$3(pointIndex, x, y);
      _this._firstDirection = _this._convexityType = -1;
    },
    conicTo$5(_, x1, y1, x2, y2, w) {
      var pointIndex, _this = this;
      _this._injectMoveToIfNeeded$0();
      pointIndex = _this.pathRef.growForVerb$2(3, w);
      _this.pathRef.setPoint$3(pointIndex, x1, y1);
      _this.pathRef.setPoint$3(pointIndex + 1, x2, y2);
      _this._firstDirection = _this._convexityType = -1;
    },
    close$0(_) {
      var _this = this,
        t1 = _this.pathRef,
        verbCount = t1._fVerbsLength;
      if (verbCount !== 0 && t1._fVerbs[verbCount - 1] !== 5)
        t1.growForVerb$2(5, 0);
      t1 = _this.fLastMoveToIndex;
      if (t1 >= 0)
        _this.fLastMoveToIndex = -t1;
      _this._firstDirection = _this._convexityType = -1;
    },
    addRect$1(_, rect) {
      this.addRectWithDirection$3(rect, 0, 0);
    },
    _hasOnlyMoveTos$0() {
      var i,
        t1 = this.pathRef,
        verbCount = t1._fVerbsLength;
      for (t1 = t1._fVerbs, i = 0; i < verbCount; ++i)
        switch (t1[i]) {
          case 1:
          case 2:
          case 3:
          case 4:
            return false;
        }
      return true;
    },
    addRectWithDirection$3(rect, direction, startIndex) {
      var pointIndex1, pointIndex2, pointIndex3, t1, t2, t3, t4, t5, _this = this,
        isRect = _this._hasOnlyMoveTos$0(),
        finalDirection = _this._hasOnlyMoveTos$0() ? direction : -1,
        pointIndex0 = _this.pathRef.growForVerb$2(0, 0);
      _this.fLastMoveToIndex = pointIndex0 + 1;
      pointIndex1 = _this.pathRef.growForVerb$2(1, 0);
      pointIndex2 = _this.pathRef.growForVerb$2(1, 0);
      pointIndex3 = _this.pathRef.growForVerb$2(1, 0);
      _this.pathRef.growForVerb$2(5, 0);
      t1 = _this.pathRef;
      t2 = rect.left;
      t3 = rect.top;
      t4 = rect.right;
      t5 = rect.bottom;
      if (direction === 0) {
        t1.setPoint$3(pointIndex0, t2, t3);
        _this.pathRef.setPoint$3(pointIndex1, t4, t3);
        _this.pathRef.setPoint$3(pointIndex2, t4, t5);
        _this.pathRef.setPoint$3(pointIndex3, t2, t5);
      } else {
        t1.setPoint$3(pointIndex3, t2, t5);
        _this.pathRef.setPoint$3(pointIndex2, t4, t5);
        _this.pathRef.setPoint$3(pointIndex1, t4, t3);
        _this.pathRef.setPoint$3(pointIndex0, t2, t3);
      }
      t1 = _this.pathRef;
      t1.fIsRect = isRect;
      t1.fRRectOrOvalIsCCW = direction === 1;
      t1.fRRectOrOvalStartIdx = 0;
      _this._firstDirection = _this._convexityType = -1;
      _this._firstDirection = finalDirection;
    },
    addOval$1(_, oval) {
      this._addOval$3(oval, 0, 0);
    },
    _addOval$3(oval, direction, startIndex) {
      var t1, _this = this,
        isOval = _this._hasOnlyMoveTos$0(),
        left = oval.left,
        right = oval.right,
        centerX = (left + right) / 2,
        $top = oval.top,
        bottom = oval.bottom,
        centerY = ($top + bottom) / 2;
      if (direction === 0) {
        _this.moveTo$2(0, right, centerY);
        _this.conicTo$5(0, right, bottom, centerX, bottom, 0.707106781);
        _this.conicTo$5(0, left, bottom, left, centerY, 0.707106781);
        _this.conicTo$5(0, left, $top, centerX, $top, 0.707106781);
        _this.conicTo$5(0, right, $top, right, centerY, 0.707106781);
      } else {
        _this.moveTo$2(0, right, centerY);
        _this.conicTo$5(0, right, $top, centerX, $top, 0.707106781);
        _this.conicTo$5(0, left, $top, left, centerY, 0.707106781);
        _this.conicTo$5(0, left, bottom, centerX, bottom, 0.707106781);
        _this.conicTo$5(0, right, bottom, right, centerY, 0.707106781);
      }
      _this.close$0(0);
      t1 = _this.pathRef;
      t1.fIsOval = isOval;
      t1.fRRectOrOvalIsCCW = direction === 1;
      t1.fRRectOrOvalStartIdx = 0;
      _this._firstDirection = _this._convexityType = -1;
      if (isOval)
        _this._firstDirection = direction;
    },
    addRRect$1(_, rrect) {
      var t6, width, height, tlRadiusX, trRadiusX, blRadiusX, brRadiusX, tlRadiusY, trRadiusY, blRadiusY, brRadiusY, scale, _this = this,
        isRRect = _this._hasOnlyMoveTos$0(),
        t1 = rrect.left,
        t2 = rrect.top,
        t3 = rrect.right,
        t4 = rrect.bottom,
        bounds = new A.Rect(t1, t2, t3, t4),
        t5 = rrect.tlRadiusX;
      if (t5 === 0 || rrect.tlRadiusY === 0)
        if (rrect.trRadiusX === 0 || rrect.trRadiusY === 0)
          if (rrect.blRadiusX === 0 || rrect.blRadiusY === 0)
            t6 = rrect.brRadiusX === 0 || rrect.brRadiusY === 0;
          else
            t6 = false;
        else
          t6 = false;
      else
        t6 = false;
      if (t6 || t1 >= t3 || t2 >= t4)
        _this.addRectWithDirection$3(bounds, 0, 3);
      else if (A.isRRectOval(rrect))
        _this._addOval$3(bounds, 0, 3);
      else {
        width = t3 - t1;
        height = t4 - t2;
        tlRadiusX = Math.max(0, t5);
        trRadiusX = Math.max(0, rrect.trRadiusX);
        blRadiusX = Math.max(0, rrect.blRadiusX);
        brRadiusX = Math.max(0, rrect.brRadiusX);
        tlRadiusY = Math.max(0, rrect.tlRadiusY);
        trRadiusY = Math.max(0, rrect.trRadiusY);
        blRadiusY = Math.max(0, rrect.blRadiusY);
        brRadiusY = Math.max(0, rrect.brRadiusY);
        scale = A._computeMinScale(blRadiusY, brRadiusY, height, A._computeMinScale(tlRadiusY, trRadiusY, height, A._computeMinScale(blRadiusX, brRadiusX, width, A._computeMinScale(tlRadiusX, trRadiusX, width, 1))));
        t5 = t4 - scale * blRadiusY;
        _this.moveTo$2(0, t1, t5);
        _this.lineTo$2(0, t1, t2 + scale * tlRadiusY);
        _this.conicTo$5(0, t1, t2, t1 + scale * tlRadiusX, t2, 0.707106781);
        _this.lineTo$2(0, t3 - scale * trRadiusX, t2);
        _this.conicTo$5(0, t3, t2, t3, t2 + scale * trRadiusY, 0.707106781);
        _this.lineTo$2(0, t3, t4 - scale * brRadiusY);
        _this.conicTo$5(0, t3, t4, t3 - scale * brRadiusX, t4, 0.707106781);
        _this.lineTo$2(0, t1 + scale * blRadiusX, t4);
        _this.conicTo$5(0, t1, t4, t1, t5, 0.707106781);
        _this.close$0(0);
        _this._firstDirection = isRRect ? 0 : -1;
        t1 = _this.pathRef;
        t1.fIsRRect = isRRect;
        t1.fRRectOrOvalIsCCW = false;
        t1.fRRectOrOvalStartIdx = 6;
      }
    },
    contains$1(_, point) {
      var bounds, x, y, t1, windings, evenOddFill, w, onCurveCount, iter, _buffer, tangents, done, oldCount, t2, last, tangent, dx, dy, index, test, t3, offset, _this = this;
      if (_this.pathRef._fVerbsLength === 0)
        return false;
      bounds = _this.getBounds$0(0);
      x = point._dx;
      y = point._dy;
      if (x < bounds.left || y < bounds.top || x > bounds.right || y > bounds.bottom)
        return false;
      t1 = _this.pathRef;
      windings = new A.PathWinding(t1, x, y, new Float32Array(18));
      windings._walkPath$0();
      evenOddFill = B.PathFillType_1 === _this._fillType;
      w = windings._w;
      if ((evenOddFill ? w & 1 : w) !== 0)
        return true;
      onCurveCount = windings._onCurveCount;
      if (onCurveCount <= 1)
        return B.JSBool_methods.$xor(onCurveCount !== 0, false);
      t1 = onCurveCount & 1;
      if (t1 !== 0 || evenOddFill)
        return t1 !== 0;
      iter = A.PathIterator$(_this.pathRef, true);
      _buffer = new Float32Array(18);
      tangents = A._setArrayType([], type$.JSArray_Offset);
      t1 = iter.pathRef;
      done = false;
      do {
        oldCount = tangents.length;
        switch (iter.next$1(0, _buffer)) {
          case 0:
          case 5:
            break;
          case 1:
            A.tangentLine(_buffer, x, y, tangents);
            break;
          case 2:
            A.tangentQuad(_buffer, x, y, tangents);
            break;
          case 3:
            t2 = iter._conicWeightIndex;
            A.tangentConic(_buffer, x, y, t1._conicWeights[t2], tangents);
            break;
          case 4:
            A.tangentCubic(_buffer, x, y, tangents);
            break;
          case 6:
            done = true;
            break;
        }
        t2 = tangents.length;
        if (t2 > oldCount) {
          last = t2 - 1;
          tangent = tangents[last];
          dx = tangent._dx;
          dy = tangent._dy;
          if (Math.abs(dx * dx + dy * dy - 0) < 0.000244140625)
            B.JSArray_methods.removeAt$1(tangents, last);
          else
            for (index = 0; index < last; ++index) {
              test = tangents[index];
              t2 = test._dx;
              t3 = test._dy;
              if (Math.abs(t2 * dy - t3 * dx - 0) < 0.000244140625) {
                t2 = dx * t2;
                if (t2 < 0)
                  t2 = -1;
                else
                  t2 = t2 > 0 ? 1 : 0;
                if (t2 <= 0) {
                  t2 = dy * t3;
                  if (t2 < 0)
                    t2 = -1;
                  else
                    t2 = t2 > 0 ? 1 : 0;
                  t2 = t2 <= 0;
                } else
                  t2 = false;
              } else
                t2 = false;
              if (t2) {
                offset = B.JSArray_methods.removeAt$1(tangents, last);
                if (index !== tangents.length)
                  tangents[index] = offset;
                break;
              }
            }
        }
      } while (!done);
      return tangents.length !== 0 || false;
    },
    shift$1(offset) {
      var t6,
        t1 = offset._dx,
        t2 = offset._dy,
        t3 = this.pathRef,
        t4 = A.PathRef__fPointsFromSource(t3, t1, t2),
        t5 = t3._fVerbsCapacity,
        verbs = new Uint8Array(t5);
      B.NativeUint8List_methods.setAll$2(verbs, 0, t3._fVerbs);
      t4 = new A.PathRef(t4, verbs);
      t5 = t3._conicWeightsCapacity;
      t4._conicWeightsCapacity = t5;
      t4._conicWeightsLength = t3._conicWeightsLength;
      t6 = t3._conicWeights;
      if (t6 != null) {
        t5 = new Float32Array(t5);
        t4._conicWeights = t5;
        B.NativeFloat32List_methods.setAll$2(t5, 0, t6);
      }
      t4._fVerbsCapacity = t3._fVerbsCapacity;
      t4._fVerbsLength = t3._fVerbsLength;
      t4._fPointsCapacity = t3._fPointsCapacity;
      t4._fPointsLength = t3._fPointsLength;
      t5 = t3.fBoundsIsDirty;
      t4.fBoundsIsDirty = t5;
      if (!t5) {
        t4.fBounds = t3.fBounds.translate$2(0, t1, t2);
        t5 = t3.cachedBounds;
        t4.cachedBounds = t5 == null ? null : t5.translate$2(0, t1, t2);
        t4.fIsFinite = t3.fIsFinite;
      }
      t4.fSegmentMask = t3.fSegmentMask;
      t4.fIsOval = t3.fIsOval;
      t4.fIsRRect = t3.fIsRRect;
      t4.fIsRect = t3.fIsRect;
      t4.fRRectOrOvalIsCCW = t3.fRRectOrOvalIsCCW;
      t4.fRRectOrOvalStartIdx = t3.fRRectOrOvalStartIdx;
      t1 = new A.SurfacePath(t4, B.PathFillType_0);
      t1._copyFields$1(this);
      return t1;
    },
    getBounds$0(_) {
      var t2, iter, points, ltrbInitialized, left, $top, right, bottom, minX, maxX, minY, maxY, cubicBounds, quadBounds, conicBounds, verb, pIndex, pointIndex, x1, pointIndex0, y1, cpX, cpY, x2, y2, t3, t4, t5, denom, t10, tprime, t6, t7, extremaX, extremaY, t20, tprime2, extrema2X, extrema2Y, roots, p20x, wP10x, $B, src2w, p20y, wP10y, startX, startY, cpX1, cpY1, cpX2, cpY2, endX, endY, a, b, s, t, newBounds, _this = this,
        t1 = _this.pathRef;
      if ((t1.fIsRRect ? t1.fRRectOrOvalStartIdx : -1) === -1)
        t2 = (t1.fIsOval ? t1.fRRectOrOvalStartIdx : -1) !== -1;
      else
        t2 = true;
      if (t2)
        return t1.getBounds$0(0);
      if (!t1.fBoundsIsDirty && t1.cachedBounds != null) {
        t1 = t1.cachedBounds;
        t1.toString;
        return t1;
      }
      iter = new A.PathRefIterator(t1);
      iter.PathRefIterator$1(t1);
      points = _this.pathRef.fPoints;
      for (ltrbInitialized = false, left = 0, $top = 0, right = 0, bottom = 0, minX = 0, maxX = 0, minY = 0, maxY = 0, cubicBounds = null, quadBounds = null, conicBounds = null; verb = iter.nextIndex$0(), verb !== 6;) {
        pIndex = iter.iterIndex;
        switch (verb) {
          case 0:
            maxX = points[pIndex];
            maxY = points[pIndex + 1];
            minY = maxY;
            minX = maxX;
            break;
          case 1:
            maxX = points[pIndex + 2];
            maxY = points[pIndex + 3];
            minY = maxY;
            minX = maxX;
            break;
          case 2:
            if (quadBounds == null)
              quadBounds = new A.QuadBounds();
            pointIndex = pIndex + 1;
            x1 = points[pIndex];
            pointIndex0 = pointIndex + 1;
            y1 = points[pointIndex];
            pointIndex = pointIndex0 + 1;
            cpX = points[pointIndex0];
            pointIndex0 = pointIndex + 1;
            cpY = points[pointIndex];
            x2 = points[pointIndex0];
            y2 = points[pointIndex0 + 1];
            t2 = quadBounds.minX = Math.min(x1, x2);
            t3 = quadBounds.minY = Math.min(y1, y2);
            t4 = quadBounds.maxX = Math.max(x1, x2);
            t5 = quadBounds.maxY = Math.max(y1, y2);
            denom = x1 - 2 * cpX + x2;
            if (Math.abs(denom) > 0.000244140625) {
              t10 = (x1 - cpX) / denom;
              if (t10 >= 0 && t10 <= 1) {
                tprime = 1 - t10;
                t6 = tprime * tprime;
                t7 = 2 * t10 * tprime;
                t10 *= t10;
                extremaX = t6 * x1 + t7 * cpX + t10 * x2;
                extremaY = t6 * y1 + t7 * cpY + t10 * y2;
                t2 = Math.min(t2, extremaX);
                quadBounds.minX = t2;
                t4 = Math.max(t4, extremaX);
                quadBounds.maxX = t4;
                t3 = Math.min(t3, extremaY);
                quadBounds.minY = t3;
                t5 = Math.max(t5, extremaY);
                quadBounds.maxY = t5;
              }
            }
            denom = y1 - 2 * cpY + y2;
            if (Math.abs(denom) > 0.000244140625) {
              t20 = (y1 - cpY) / denom;
              if (t20 >= 0 && t20 <= 1) {
                tprime2 = 1 - t20;
                t6 = tprime2 * tprime2;
                t7 = 2 * t20 * tprime2;
                t20 *= t20;
                extrema2X = t6 * x1 + t7 * cpX + t20 * x2;
                extrema2Y = t6 * y1 + t7 * cpY + t20 * y2;
                t2 = Math.min(t2, extrema2X);
                quadBounds.minX = t2;
                t4 = Math.max(t4, extrema2X);
                quadBounds.maxX = t4;
                t3 = Math.min(t3, extrema2Y);
                quadBounds.minY = t3;
                t5 = Math.max(t5, extrema2Y);
                quadBounds.maxY = t5;
              }
              maxY = t5;
              maxX = t4;
              minY = t3;
              minX = t2;
            } else {
              maxY = t5;
              maxX = t4;
              minY = t3;
              minX = t2;
            }
            break;
          case 3:
            if (conicBounds == null)
              conicBounds = new A.ConicBounds();
            t2 = t1._conicWeights[iter._conicWeightIndex];
            pointIndex = pIndex + 1;
            x1 = points[pIndex];
            pointIndex0 = pointIndex + 1;
            y1 = points[pointIndex];
            pointIndex = pointIndex0 + 1;
            cpX = points[pointIndex0];
            pointIndex0 = pointIndex + 1;
            cpY = points[pointIndex];
            x2 = points[pointIndex0];
            y2 = points[pointIndex0 + 1];
            conicBounds.minX = Math.min(x1, x2);
            conicBounds.minY = Math.min(y1, y2);
            conicBounds.maxX = Math.max(x1, x2);
            conicBounds.maxY = Math.max(y1, y2);
            roots = new A.QuadRoots();
            p20x = x2 - x1;
            wP10x = t2 * (cpX - x1);
            if (roots.findRoots$3(t2 * p20x - p20x, p20x - 2 * wP10x, wP10x) !== 0) {
              t3 = roots.root0;
              t3.toString;
              if (t3 >= 0 && t3 <= 1) {
                $B = 2 * (t2 - 1);
                denom = (-$B * t3 + $B) * t3 + 1;
                src2w = cpX * t2;
                extremaX = (((x2 - 2 * src2w + x1) * t3 + 2 * (src2w - x1)) * t3 + x1) / denom;
                src2w = cpY * t2;
                extremaY = (((y2 - 2 * src2w + y1) * t3 + 2 * (src2w - y1)) * t3 + y1) / denom;
                conicBounds.minX = Math.min(conicBounds.minX, extremaX);
                conicBounds.maxX = Math.max(conicBounds.maxX, extremaX);
                conicBounds.minY = Math.min(conicBounds.minY, extremaY);
                conicBounds.maxY = Math.max(conicBounds.maxY, extremaY);
              }
            }
            p20y = y2 - y1;
            wP10y = t2 * (cpY - y1);
            if (roots.findRoots$3(t2 * p20y - p20y, p20y - 2 * wP10y, wP10y) !== 0) {
              t3 = roots.root0;
              t3.toString;
              if (t3 >= 0 && t3 <= 1) {
                $B = 2 * (t2 - 1);
                denom = (-$B * t3 + $B) * t3 + 1;
                src2w = cpX * t2;
                extrema2X = (((x2 - 2 * src2w + x1) * t3 + 2 * (src2w - x1)) * t3 + x1) / denom;
                src2w = cpY * t2;
                extrema2Y = (((y2 - 2 * src2w + y1) * t3 + 2 * (src2w - y1)) * t3 + y1) / denom;
                conicBounds.minX = Math.min(conicBounds.minX, extrema2X);
                conicBounds.maxX = Math.max(conicBounds.maxX, extrema2X);
                conicBounds.minY = Math.min(conicBounds.minY, extrema2Y);
                conicBounds.maxY = Math.max(conicBounds.maxY, extrema2Y);
              }
            }
            minX = conicBounds.minX;
            minY = conicBounds.minY;
            maxX = conicBounds.maxX;
            maxY = conicBounds.maxY;
            break;
          case 4:
            if (cubicBounds == null)
              cubicBounds = new A.CubicBounds();
            pointIndex = pIndex + 1;
            startX = points[pIndex];
            pointIndex0 = pointIndex + 1;
            startY = points[pointIndex];
            pointIndex = pointIndex0 + 1;
            cpX1 = points[pointIndex0];
            pointIndex0 = pointIndex + 1;
            cpY1 = points[pointIndex];
            pointIndex = pointIndex0 + 1;
            cpX2 = points[pointIndex0];
            pointIndex0 = pointIndex + 1;
            cpY2 = points[pointIndex];
            endX = points[pointIndex0];
            endY = points[pointIndex0 + 1];
            t2 = Math.min(startX, endX);
            cubicBounds.minX = t2;
            cubicBounds.minY = Math.min(startY, endY);
            t3 = Math.max(startX, endX);
            cubicBounds.maxX = t3;
            cubicBounds.maxY = Math.max(startY, endY);
            if (!(startX < cpX1 && cpX1 < cpX2 && cpX2 < endX))
              t4 = startX > cpX1 && cpX1 > cpX2 && cpX2 > endX;
            else
              t4 = true;
            if (!t4) {
              t4 = -startX;
              a = t4 + 3 * (cpX1 - cpX2) + endX;
              b = 2 * (startX - 2 * cpX1 + cpX2);
              s = b * b - 4 * a * (t4 + cpX1);
              if (s >= 0 && Math.abs(a) > 0.000244140625) {
                t4 = -b;
                t5 = 2 * a;
                if (s === 0) {
                  t = t4 / t5;
                  tprime = 1 - t;
                  if (t >= 0 && t <= 1) {
                    t4 = 3 * tprime;
                    extremaX = tprime * tprime * tprime * startX + t4 * tprime * t * cpX1 + t4 * t * t * cpX2 + t * t * t * endX;
                    cubicBounds.minX = Math.min(extremaX, t2);
                    cubicBounds.maxX = Math.max(extremaX, t3);
                  }
                } else {
                  s = Math.sqrt(s);
                  t = (t4 - s) / t5;
                  tprime = 1 - t;
                  if (t >= 0 && t <= 1) {
                    t2 = 3 * tprime;
                    extremaX = tprime * tprime * tprime * startX + t2 * tprime * t * cpX1 + t2 * t * t * cpX2 + t * t * t * endX;
                    cubicBounds.minX = Math.min(extremaX, cubicBounds.minX);
                    cubicBounds.maxX = Math.max(extremaX, cubicBounds.maxX);
                  }
                  t = (t4 + s) / t5;
                  tprime = 1 - t;
                  if (t >= 0 && t <= 1) {
                    t2 = 3 * tprime;
                    extremaX = tprime * tprime * tprime * startX + t2 * tprime * t * cpX1 + t2 * t * t * cpX2 + t * t * t * endX;
                    cubicBounds.minX = Math.min(extremaX, cubicBounds.minX);
                    cubicBounds.maxX = Math.max(extremaX, cubicBounds.maxX);
                  }
                }
              }
            }
            if (!(startY < cpY1 && cpY1 < cpY2 && cpY2 < endY))
              t2 = startY > cpY1 && cpY1 > cpY2 && cpY2 > endY;
            else
              t2 = true;
            if (!t2) {
              t2 = -startY;
              a = t2 + 3 * (cpY1 - cpY2) + endY;
              b = 2 * (startY - 2 * cpY1 + cpY2);
              s = b * b - 4 * a * (t2 + cpY1);
              if (s >= 0 && Math.abs(a) > 0.000244140625) {
                t2 = -b;
                t3 = 2 * a;
                if (s === 0) {
                  t = t2 / t3;
                  tprime = 1 - t;
                  if (t >= 0 && t <= 1) {
                    t2 = 3 * tprime;
                    extremaY = tprime * tprime * tprime * startY + t2 * tprime * t * cpY1 + t2 * t * t * cpY2 + t * t * t * endY;
                    cubicBounds.minY = Math.min(extremaY, cubicBounds.minY);
                    cubicBounds.maxY = Math.max(extremaY, cubicBounds.maxY);
                  }
                } else {
                  s = Math.sqrt(s);
                  t = (t2 - s) / t3;
                  tprime = 1 - t;
                  if (t >= 0 && t <= 1) {
                    t4 = 3 * tprime;
                    extremaY = tprime * tprime * tprime * startY + t4 * tprime * t * cpY1 + t4 * t * t * cpY2 + t * t * t * endY;
                    cubicBounds.minY = Math.min(extremaY, cubicBounds.minY);
                    cubicBounds.maxY = Math.max(extremaY, cubicBounds.maxY);
                  }
                  t2 = (t2 + s) / t3;
                  tprime2 = 1 - t2;
                  if (t2 >= 0 && t2 <= 1) {
                    t3 = 3 * tprime2;
                    extremaY = tprime2 * tprime2 * tprime2 * startY + t3 * tprime2 * t2 * cpY1 + t3 * t2 * t2 * cpY2 + t2 * t2 * t2 * endY;
                    cubicBounds.minY = Math.min(extremaY, cubicBounds.minY);
                    cubicBounds.maxY = Math.max(extremaY, cubicBounds.maxY);
                  }
                }
              }
            }
            minX = cubicBounds.minX;
            minY = cubicBounds.minY;
            maxX = cubicBounds.maxX;
            maxY = cubicBounds.maxY;
            break;
        }
        if (!ltrbInitialized) {
          bottom = maxY;
          right = maxX;
          $top = minY;
          left = minX;
          ltrbInitialized = true;
        } else {
          left = Math.min(left, minX);
          right = Math.max(right, maxX);
          $top = Math.min($top, minY);
          bottom = Math.max(bottom, maxY);
        }
      }
      newBounds = ltrbInitialized ? new A.Rect(left, $top, right, bottom) : B.Rect_0_0_0_0;
      _this.pathRef.getBounds$0(0);
      return _this.pathRef.cachedBounds = newBounds;
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    },
    $isPath: 1
  };
  A.PathIterator.prototype = {
    _autoClose$1(outPts) {
      var _this = this,
        t1 = _this._lastPointX,
        t2 = _this._moveToX;
      if (t1 !== t2 || _this._lastPointY !== _this._moveToY) {
        if (isNaN(t1) || isNaN(_this._lastPointY) || isNaN(t2) || isNaN(_this._moveToY))
          return 5;
        outPts[0] = t1;
        outPts[1] = _this._lastPointY;
        outPts[2] = t2;
        t1 = _this._moveToY;
        outPts[3] = t1;
        _this._lastPointX = t2;
        _this._lastPointY = t1;
        return 1;
      } else {
        outPts[0] = t2;
        outPts[1] = _this._moveToY;
        return 5;
      }
    },
    _constructMoveTo$0() {
      var t1, t2, _this = this;
      if (_this._segmentState === 1) {
        _this._segmentState = 2;
        return new A.Offset(_this._moveToX, _this._moveToY);
      }
      t1 = _this.pathRef.fPoints;
      t2 = _this._pointIndex;
      return new A.Offset(t1[t2 - 2], t1[t2 - 1]);
    },
    next$1(_, outPts) {
      var t3, verb, autoVerb, offsetX, offsetY, start, _this = this,
        t1 = _this._verbIndex,
        t2 = _this.pathRef;
      if (t1 === t2._fVerbsLength) {
        if (_this._needClose && _this._segmentState === 2) {
          if (1 === _this._autoClose$1(outPts))
            return 1;
          _this._needClose = false;
          return 5;
        }
        return 6;
      }
      t3 = _this._verbIndex = t1 + 1;
      verb = t2._fVerbs[t1];
      switch (verb) {
        case 0:
          if (_this._needClose) {
            _this._verbIndex = t3 - 1;
            autoVerb = _this._autoClose$1(outPts);
            if (autoVerb === 5)
              _this._needClose = false;
            return autoVerb;
          }
          if (t3 === _this._verbCount)
            return 6;
          t1 = t2.fPoints;
          t2 = _this._pointIndex;
          t3 = _this._pointIndex = t2 + 1;
          offsetX = t1[t2];
          _this._pointIndex = t3 + 1;
          offsetY = t1[t3];
          _this._moveToX = offsetX;
          _this._moveToY = offsetY;
          outPts[0] = offsetX;
          outPts[1] = offsetY;
          _this._segmentState = 1;
          _this._lastPointX = offsetX;
          _this._lastPointY = offsetY;
          _this._needClose = true;
          break;
        case 1:
          start = _this._constructMoveTo$0();
          t1 = t2.fPoints;
          t2 = _this._pointIndex;
          t3 = _this._pointIndex = t2 + 1;
          offsetX = t1[t2];
          _this._pointIndex = t3 + 1;
          offsetY = t1[t3];
          outPts[0] = start._dx;
          outPts[1] = start._dy;
          outPts[2] = offsetX;
          outPts[3] = offsetY;
          _this._lastPointX = offsetX;
          _this._lastPointY = offsetY;
          break;
        case 3:
          ++_this._conicWeightIndex;
          start = _this._constructMoveTo$0();
          outPts[0] = start._dx;
          outPts[1] = start._dy;
          t1 = t2.fPoints;
          t2 = _this._pointIndex;
          t3 = _this._pointIndex = t2 + 1;
          outPts[2] = t1[t2];
          t2 = _this._pointIndex = t3 + 1;
          outPts[3] = t1[t3];
          t3 = _this._pointIndex = t2 + 1;
          t2 = t1[t2];
          outPts[4] = t2;
          _this._lastPointX = t2;
          _this._pointIndex = t3 + 1;
          t3 = t1[t3];
          outPts[5] = t3;
          _this._lastPointY = t3;
          break;
        case 2:
          start = _this._constructMoveTo$0();
          outPts[0] = start._dx;
          outPts[1] = start._dy;
          t1 = t2.fPoints;
          t2 = _this._pointIndex;
          t3 = _this._pointIndex = t2 + 1;
          outPts[2] = t1[t2];
          t2 = _this._pointIndex = t3 + 1;
          outPts[3] = t1[t3];
          t3 = _this._pointIndex = t2 + 1;
          t2 = t1[t2];
          outPts[4] = t2;
          _this._lastPointX = t2;
          _this._pointIndex = t3 + 1;
          t3 = t1[t3];
          outPts[5] = t3;
          _this._lastPointY = t3;
          break;
        case 4:
          start = _this._constructMoveTo$0();
          outPts[0] = start._dx;
          outPts[1] = start._dy;
          t1 = t2.fPoints;
          t2 = _this._pointIndex;
          t3 = _this._pointIndex = t2 + 1;
          outPts[2] = t1[t2];
          t2 = _this._pointIndex = t3 + 1;
          outPts[3] = t1[t3];
          t3 = _this._pointIndex = t2 + 1;
          outPts[4] = t1[t2];
          t2 = _this._pointIndex = t3 + 1;
          outPts[5] = t1[t3];
          t3 = _this._pointIndex = t2 + 1;
          t2 = t1[t2];
          outPts[6] = t2;
          _this._lastPointX = t2;
          _this._pointIndex = t3 + 1;
          t3 = t1[t3];
          outPts[7] = t3;
          _this._lastPointY = t3;
          break;
        case 5:
          verb = _this._autoClose$1(outPts);
          if (verb === 1)
            --_this._verbIndex;
          else {
            _this._needClose = false;
            _this._segmentState = 0;
          }
          _this._lastPointX = _this._moveToX;
          _this._lastPointY = _this._moveToY;
          break;
        case 6:
          break;
        default:
          throw A.wrapException(A.FormatException$("Unsupport Path verb " + verb, null, null));
      }
      return verb;
    }
  };
  A.PathRef.prototype = {
    setPoint$3(pointIndex, x, y) {
      var index = pointIndex * 2,
        t1 = this.fPoints;
      t1[index] = x;
      t1[index + 1] = y;
    },
    atPoint$1(index) {
      var t1 = this.fPoints,
        t2 = index * 2;
      return new A.Offset(t1[t2], t1[t2 + 1]);
    },
    getRect$0() {
      var _this = this;
      if (_this.fIsRect)
        return new A.Rect(_this.atPoint$1(0)._dx, _this.atPoint$1(0)._dy, _this.atPoint$1(1)._dx, _this.atPoint$1(2)._dy);
      else
        return _this._fVerbsLength === 4 ? _this._detectRect$0() : null;
    },
    getBounds$0(_) {
      var t1;
      if (this.fBoundsIsDirty)
        this._computeBounds$0();
      t1 = this.fBounds;
      t1.toString;
      return t1;
    },
    _detectRect$0() {
      var width, x2, y2, height, t1, y3, _this = this, _null = null,
        x0 = _this.atPoint$1(0)._dx,
        y0 = _this.atPoint$1(0)._dy,
        x1 = _this.atPoint$1(1)._dx,
        y1 = _this.atPoint$1(1)._dy;
      if (_this._fVerbs[1] !== 1 || y1 !== y0)
        return _null;
      width = x1 - x0;
      x2 = _this.atPoint$1(2)._dx;
      y2 = _this.atPoint$1(2)._dy;
      if (_this._fVerbs[2] !== 1 || x2 !== x1)
        return _null;
      height = y2 - y1;
      t1 = _this.atPoint$1(3);
      y3 = _this.atPoint$1(3)._dy;
      if (_this._fVerbs[3] !== 1 || y3 !== y2)
        return _null;
      if (x2 - t1._dx !== width || y3 - y0 !== height)
        return _null;
      return new A.Rect(x0, y0, x0 + width, y0 + height);
    },
    getStraightLine$0() {
      var t1, x0, y0, x1, y1;
      if (this._fVerbsLength === 2) {
        t1 = this._fVerbs;
        t1 = t1[0] !== 0 || t1[1] !== 1;
      } else
        t1 = true;
      if (t1)
        return null;
      t1 = this.fPoints;
      x0 = t1[0];
      y0 = t1[1];
      x1 = t1[2];
      y1 = t1[3];
      if (y0 === y1 || x0 === x1)
        return new A.Rect(x0, y0, x1, y1);
      return null;
    },
    _getRRect$0() {
      var pts, cornerIndex, verb, controlPx, controlPy, vector1_0x, vector1_0y, t1, t2, dx, dy, t3,
        bounds = this.getBounds$0(0),
        radii = A._setArrayType([], type$.JSArray_Radius),
        iter = new A.PathRefIterator(this);
      iter.PathRefIterator$1(this);
      pts = new Float32Array(8);
      iter.next$1(0, pts);
      for (cornerIndex = 0; verb = iter.next$1(0, pts), verb !== 6;)
        if (3 === verb) {
          controlPx = pts[2];
          controlPy = pts[3];
          vector1_0x = controlPx - pts[0];
          vector1_0y = controlPy - pts[1];
          t1 = pts[4];
          t2 = pts[5];
          if (vector1_0x !== 0) {
            dx = Math.abs(vector1_0x);
            dy = Math.abs(t2 - controlPy);
          } else {
            dy = Math.abs(vector1_0y);
            dx = vector1_0y !== 0 ? Math.abs(t1 - controlPx) : Math.abs(vector1_0x);
          }
          radii.push(new A.Radius(dx, dy));
          ++cornerIndex;
        }
      t1 = radii[0];
      t2 = radii[1];
      t3 = radii[2];
      return A.RRect$fromRectAndCorners(bounds, radii[3], t3, t1, t2);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return other instanceof A.PathRef && this.equals$1(other);
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.fSegmentMask, _this.fPoints, _this._conicWeights, _this._fVerbs, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    equals$1(ref) {
      var pointCount, len, t1, t2, i, weightCount, verbCount, _this = this;
      if (_this.fSegmentMask !== ref.fSegmentMask)
        return false;
      pointCount = _this._fPointsLength;
      if (pointCount !== ref._fPointsLength)
        return false;
      len = pointCount * 2;
      for (t1 = _this.fPoints, t2 = ref.fPoints, i = 0; i < len; ++i)
        if (t1[i] !== t2[i])
          return false;
      t1 = _this._conicWeights;
      if (t1 == null) {
        if (ref._conicWeights != null)
          return false;
      } else {
        t2 = ref._conicWeights;
        if (t2 == null)
          return false;
        weightCount = t1.length;
        if (t2.length !== weightCount)
          return false;
        for (i = 0; i < weightCount; ++i)
          if (t1[i] !== t2[i])
            return false;
      }
      verbCount = _this._fVerbsLength;
      if (verbCount !== ref._fVerbsLength)
        return false;
      for (t1 = _this._fVerbs, t2 = ref._fVerbs, i = 0; i < verbCount; ++i)
        if (t1[i] !== t2[i])
          return false;
      return true;
    },
    _computeBounds$0() {
      var t1, maxX, maxY, accum, len, minY, minX, i, x, y, _this = this,
        pointCount = _this._fPointsLength;
      _this.fBoundsIsDirty = false;
      _this.cachedBounds = null;
      if (pointCount === 0) {
        _this.fBounds = B.Rect_0_0_0_0;
        _this.fIsFinite = true;
      } else {
        t1 = _this.fPoints;
        maxX = t1[0];
        maxY = t1[1];
        accum = 0 * maxX * maxY;
        len = 2 * pointCount;
        for (minY = maxY, minX = maxX, i = 2; i < len; i += 2) {
          x = t1[i];
          y = t1[i + 1];
          accum = accum * x * y;
          minX = Math.min(minX, x);
          minY = Math.min(minY, y);
          maxX = Math.max(maxX, x);
          maxY = Math.max(maxY, y);
        }
        if (accum * 0 === 0) {
          _this.fBounds = new A.Rect(minX, minY, maxX, maxY);
          _this.fIsFinite = true;
        } else {
          _this.fBounds = B.Rect_0_0_0_0;
          _this.fIsFinite = false;
        }
      }
    },
    growForVerb$2(verb, weight) {
      var pCnt, mask, verbCount, t1, t2, newVerbs, weightCount, newWeights, ptsIndex, newPoints, _this = this;
      switch (verb) {
        case 0:
          pCnt = 1;
          mask = 0;
          break;
        case 1:
          pCnt = 1;
          mask = 1;
          break;
        case 2:
          pCnt = 2;
          mask = 2;
          break;
        case 3:
          pCnt = 2;
          mask = 4;
          break;
        case 4:
          pCnt = 3;
          mask = 8;
          break;
        case 5:
          pCnt = 0;
          mask = 0;
          break;
        case 6:
          pCnt = 0;
          mask = 0;
          break;
        default:
          pCnt = 0;
          mask = 0;
          break;
      }
      _this.fSegmentMask |= mask;
      _this.fBoundsIsDirty = true;
      _this.fIsRect = _this.fIsRRect = _this.fIsOval = false;
      _this.cachedBounds = null;
      verbCount = _this._fVerbsLength;
      t1 = verbCount + 1;
      if (t1 > _this._fVerbsCapacity) {
        t2 = t1 + 8;
        _this._fVerbsCapacity = t2;
        newVerbs = new Uint8Array(t2);
        B.NativeUint8List_methods.setAll$2(newVerbs, 0, _this._fVerbs);
        _this._fVerbs = newVerbs;
      }
      _this._fVerbsLength = t1;
      _this._fVerbs[verbCount] = verb;
      if (3 === verb) {
        weightCount = _this._conicWeightsLength;
        t1 = weightCount + 1;
        if (t1 > _this._conicWeightsCapacity) {
          t2 = t1 + 4;
          _this._conicWeightsCapacity = t2;
          newWeights = new Float32Array(t2);
          t2 = _this._conicWeights;
          if (t2 != null)
            B.NativeFloat32List_methods.setAll$2(newWeights, 0, t2);
          _this._conicWeights = newWeights;
        }
        _this._conicWeightsLength = t1;
        _this._conicWeights[weightCount] = weight;
      }
      ptsIndex = _this._fPointsLength;
      t1 = ptsIndex + pCnt;
      if (t1 > _this._fPointsCapacity) {
        t2 = t1 + 10;
        _this._fPointsCapacity = t2;
        newPoints = new Float32Array(t2 * 2);
        B.NativeFloat32List_methods.setAll$2(newPoints, 0, _this.fPoints);
        _this.fPoints = newPoints;
      }
      _this._fPointsLength = t1;
      return ptsIndex;
    }
  };
  A.PathRefIterator.prototype = {
    PathRefIterator$1(pathRef) {
      var t1;
      this._pointIndex = 0;
      t1 = this.pathRef;
      if (t1.fBoundsIsDirty)
        t1._computeBounds$0();
      if (!t1.fIsFinite)
        this._verbIndex = t1._fVerbsLength;
    },
    nextIndex$0() {
      var verb, _this = this,
        t1 = _this._verbIndex,
        t2 = _this.pathRef;
      if (t1 === t2._fVerbsLength)
        return 6;
      t2 = t2._fVerbs;
      _this._verbIndex = t1 + 1;
      verb = t2[t1];
      switch (verb) {
        case 0:
          t1 = _this._pointIndex;
          _this.iterIndex = t1;
          _this._pointIndex = t1 + 2;
          break;
        case 1:
          t1 = _this._pointIndex;
          _this.iterIndex = t1 - 2;
          _this._pointIndex = t1 + 2;
          break;
        case 3:
          ++_this._conicWeightIndex;
          t1 = _this._pointIndex;
          _this.iterIndex = t1 - 2;
          _this._pointIndex = t1 + 4;
          break;
        case 2:
          t1 = _this._pointIndex;
          _this.iterIndex = t1 - 2;
          _this._pointIndex = t1 + 4;
          break;
        case 4:
          t1 = _this._pointIndex;
          _this.iterIndex = t1 - 2;
          _this._pointIndex = t1 + 6;
          break;
        case 5:
          break;
        case 6:
          break;
        default:
          throw A.wrapException(A.FormatException$("Unsupport Path verb " + verb, null, null));
      }
      return verb;
    },
    next$1(_, outPts) {
      var t3, verb, points, pointIndex, pointIndex0, _this = this,
        t1 = _this._verbIndex,
        t2 = _this.pathRef;
      if (t1 === t2._fVerbsLength)
        return 6;
      t3 = t2._fVerbs;
      _this._verbIndex = t1 + 1;
      verb = t3[t1];
      points = t2.fPoints;
      pointIndex = _this._pointIndex;
      switch (verb) {
        case 0:
          pointIndex0 = pointIndex + 1;
          outPts[0] = points[pointIndex];
          pointIndex = pointIndex0 + 1;
          outPts[1] = points[pointIndex0];
          break;
        case 1:
          outPts[0] = points[pointIndex - 2];
          outPts[1] = points[pointIndex - 1];
          pointIndex0 = pointIndex + 1;
          outPts[2] = points[pointIndex];
          pointIndex = pointIndex0 + 1;
          outPts[3] = points[pointIndex0];
          break;
        case 3:
          ++_this._conicWeightIndex;
          outPts[0] = points[pointIndex - 2];
          outPts[1] = points[pointIndex - 1];
          pointIndex0 = pointIndex + 1;
          outPts[2] = points[pointIndex];
          pointIndex = pointIndex0 + 1;
          outPts[3] = points[pointIndex0];
          pointIndex0 = pointIndex + 1;
          outPts[4] = points[pointIndex];
          pointIndex = pointIndex0 + 1;
          outPts[5] = points[pointIndex0];
          break;
        case 2:
          outPts[0] = points[pointIndex - 2];
          outPts[1] = points[pointIndex - 1];
          pointIndex0 = pointIndex + 1;
          outPts[2] = points[pointIndex];
          pointIndex = pointIndex0 + 1;
          outPts[3] = points[pointIndex0];
          pointIndex0 = pointIndex + 1;
          outPts[4] = points[pointIndex];
          pointIndex = pointIndex0 + 1;
          outPts[5] = points[pointIndex0];
          break;
        case 4:
          outPts[0] = points[pointIndex - 2];
          outPts[1] = points[pointIndex - 1];
          pointIndex0 = pointIndex + 1;
          outPts[2] = points[pointIndex];
          pointIndex = pointIndex0 + 1;
          outPts[3] = points[pointIndex0];
          pointIndex0 = pointIndex + 1;
          outPts[4] = points[pointIndex];
          pointIndex = pointIndex0 + 1;
          outPts[5] = points[pointIndex0];
          pointIndex0 = pointIndex + 1;
          outPts[6] = points[pointIndex];
          pointIndex = pointIndex0 + 1;
          outPts[7] = points[pointIndex0];
          break;
        case 5:
          break;
        case 6:
          break;
        default:
          throw A.wrapException(A.FormatException$("Unsupport Path verb " + verb, null, null));
      }
      _this._pointIndex = pointIndex;
      return verb;
    }
  };
  A.QuadRoots.prototype = {
    findRoots$3(a, b, c) {
      var t1, dr, q, res, rootCount, rootCount0, t2, _this = this;
      if (a === 0) {
        t1 = A.validUnitDivide(-c, b);
        _this.root0 = t1;
        return t1 == null ? 0 : 1;
      }
      dr = b * b - 4 * a * c;
      if (dr < 0)
        return 0;
      dr = Math.sqrt(dr);
      if (!isFinite(dr))
        return 0;
      q = b < 0 ? -(b - dr) / 2 : -(b + dr) / 2;
      res = A.validUnitDivide(q, a);
      if (res != null) {
        _this.root0 = res;
        rootCount = 1;
      } else
        rootCount = 0;
      res = A.validUnitDivide(c, q);
      if (res != null) {
        rootCount0 = rootCount + 1;
        if (rootCount === 0)
          _this.root0 = res;
        else
          _this.root1 = res;
        rootCount = rootCount0;
      }
      if (rootCount === 2) {
        t1 = _this.root0;
        t1.toString;
        t2 = _this.root1;
        t2.toString;
        if (t1 > t2) {
          _this.root0 = t2;
          _this.root1 = t1;
        } else if (t1 === t2)
          return 1;
      }
      return rootCount;
    }
  };
  A.SkQuadCoefficients.prototype = {
    evalX$1(t) {
      return (this.ax * t + this.bx) * t + this.cx;
    },
    evalY$1(t) {
      return (this.ay * t + this.by) * t + this.cy;
    }
  };
  A.PathWinding.prototype = {
    _walkPath$0() {
      var t2, t3, verb, n, winding, t4, t5, t6, t7, t8, t9, t10, isMono, conics, _this = this,
        t1 = _this.pathRef,
        iter = A.PathIterator$(t1, true);
      for (t2 = _this.__engine$_buffer, t3 = type$.JSArray_Conic; verb = iter.next$1(0, t2), verb !== 6;)
        switch (verb) {
          case 0:
          case 5:
            break;
          case 1:
            _this._computeLineWinding$0();
            break;
          case 2:
            n = !A.PathWinding__isQuadMonotonic(t2) ? A.PathWinding__chopQuadAtExtrema(t2) : 0;
            winding = _this._computeMonoQuadWinding$6(t2[0], t2[1], t2[2], t2[3], t2[4], t2[5]);
            _this._w += n > 0 ? winding + _this._computeMonoQuadWinding$6(t2[4], t2[5], t2[6], t2[7], t2[8], t2[9]) : winding;
            break;
          case 3:
            t4 = t1._conicWeights[iter._conicWeightIndex];
            t5 = t2[0];
            t6 = t2[1];
            t7 = t2[2];
            t8 = t2[3];
            t9 = t2[4];
            t10 = t2[5];
            isMono = A.PathWinding__isQuadMonotonic(t2);
            conics = A._setArrayType([], t3);
            new A.Conic(t5, t6, t7, t8, t9, t10, t4).chopAtYExtrema$1(conics);
            _this._computeMonoConicWinding$1(conics[0]);
            if (!isMono && conics.length === 2)
              _this._computeMonoConicWinding$1(conics[1]);
            break;
          case 4:
            _this._computeCubicWinding$0();
            break;
        }
    },
    _computeLineWinding$0() {
      var y1, y0, dir, t2, crossProduct, _this = this,
        t1 = _this.__engine$_buffer,
        x0 = t1[0],
        startY = t1[1],
        x1 = t1[2],
        endY = t1[3];
      if (startY > endY) {
        y1 = startY;
        y0 = endY;
        dir = -1;
      } else {
        y1 = endY;
        y0 = startY;
        dir = 1;
      }
      t1 = _this.y;
      if (t1 < y0 || t1 > y1)
        return;
      t2 = _this.x;
      if (A.PathWinding__checkOnCurve(t2, t1, x0, startY, x1, endY)) {
        ++_this._onCurveCount;
        return;
      }
      if (t1 === y1)
        return;
      crossProduct = (x1 - x0) * (t1 - startY) - (endY - startY) * (t2 - x0);
      if (crossProduct === 0) {
        if (t2 !== x1 || t1 !== endY)
          ++_this._onCurveCount;
        dir = 0;
      } else if (A.SPath_scalarSignedAsInt(crossProduct) === dir)
        dir = 0;
      _this._w += dir;
    },
    _computeMonoQuadWinding$6(x0, y0, x1, y1, x2, y2) {
      var y20, y00, dir, t1, t2, quadRoots, xt, t3, _this = this;
      if (y0 > y2) {
        y20 = y0;
        y00 = y2;
        dir = -1;
      } else {
        y20 = y2;
        y00 = y0;
        dir = 1;
      }
      t1 = _this.y;
      if (t1 < y00 || t1 > y20)
        return 0;
      t2 = _this.x;
      if (A.PathWinding__checkOnCurve(t2, t1, x0, y0, x2, y2)) {
        ++_this._onCurveCount;
        return 0;
      }
      if (t1 === y20)
        return 0;
      quadRoots = new A.QuadRoots();
      if (0 === quadRoots.findRoots$3(y0 - 2 * y1 + y2, 2 * (y1 - y0), y0 - t1))
        xt = dir === 1 ? x0 : x2;
      else {
        t3 = quadRoots.root0;
        t3.toString;
        xt = ((x2 - 2 * x1 + x0) * t3 + 2 * (x1 - x0)) * t3 + x0;
      }
      if (Math.abs(xt - t2) < 0.000244140625)
        if (t2 !== x2 || t1 !== y2) {
          ++_this._onCurveCount;
          return 0;
        }
      return xt < t2 ? dir : 0;
    },
    _computeMonoConicWinding$1(conic) {
      var y20, y00, dir, t1, t2, xt, xt0, t3, $B, quadRoots, t4, _this = this,
        y0 = conic.p0y,
        y2 = conic.p2y;
      if (y0 > y2) {
        y20 = y0;
        y00 = y2;
        dir = -1;
      } else {
        y20 = y2;
        y00 = y0;
        dir = 1;
      }
      t1 = _this.y;
      if (t1 < y00 || t1 > y20)
        return;
      t2 = _this.x;
      xt = conic.p0x;
      xt0 = conic.p2x;
      if (A.PathWinding__checkOnCurve(t2, t1, xt, y0, xt0, y2)) {
        ++_this._onCurveCount;
        return;
      }
      if (t1 === y20)
        return;
      t3 = conic.fW;
      $B = conic.p1y * t3 - t1 * t3 + t1;
      quadRoots = new A.QuadRoots();
      if (0 === quadRoots.findRoots$3(y2 + (y0 - 2 * $B), 2 * ($B - y0), y0 - t1))
        xt = dir === 1 ? xt : xt0;
      else {
        t4 = quadRoots.root0;
        t4.toString;
        xt = A.Conic_evalNumerator(xt, conic.p1x, xt0, t3, t4) / A.Conic_evalDenominator(t3, t4);
      }
      if (Math.abs(xt - t2) < 0.000244140625)
        if (t2 !== xt0 || t1 !== conic.p2y) {
          ++_this._onCurveCount;
          return;
        }
      t1 = _this._w;
      _this._w = t1 + (xt < t2 ? dir : 0);
    },
    _computeCubicWinding$0() {
      var i,
        t1 = this.__engine$_buffer,
        n = A.chopCubicAtYExtrema(t1, t1);
      for (i = 0; i <= n; ++i)
        this._windingMonoCubic$1(i * 3 * 2);
    },
    _windingMonoCubic$1(bufferIndex) {
      var px2, px3, py3, y3, y0, dir, t2, t3, min, max, t, xt, _this = this,
        t1 = _this.__engine$_buffer,
        bufferIndex0 = bufferIndex + 1,
        px0 = t1[bufferIndex],
        bufferIndex1 = bufferIndex0 + 1,
        py0 = t1[bufferIndex0],
        px1 = t1[bufferIndex1];
      bufferIndex0 = bufferIndex1 + 1 + 1;
      px2 = t1[bufferIndex0];
      bufferIndex0 = bufferIndex0 + 1 + 1;
      px3 = t1[bufferIndex0];
      py3 = t1[bufferIndex0 + 1];
      if (py0 > py3) {
        y3 = py0;
        y0 = py3;
        dir = -1;
      } else {
        y3 = py3;
        y0 = py0;
        dir = 1;
      }
      t2 = _this.y;
      if (t2 < y0 || t2 > y3)
        return;
      t3 = _this.x;
      if (A.PathWinding__checkOnCurve(t3, t2, px0, py0, px3, py3)) {
        ++_this._onCurveCount;
        return;
      }
      if (t2 === y3)
        return;
      min = Math.min(px0, Math.min(px1, Math.min(px2, px3)));
      max = Math.max(px0, Math.max(px1, Math.max(px2, px3)));
      if (t3 < min)
        return;
      if (t3 > max) {
        _this._w += dir;
        return;
      }
      t = A.chopMonoAtY(t1, bufferIndex, t2);
      if (t == null)
        return;
      xt = A.evalCubicPts(px0, px1, px2, px3, t);
      if (Math.abs(xt - t3) < 0.000244140625)
        if (t3 !== px3 || t2 !== py3) {
          ++_this._onCurveCount;
          return;
        }
      t1 = _this._w;
      _this._w = t1 + (xt < t3 ? dir : 0);
    }
  };
  A.PaintRequest.prototype = {
    paintCallback$0() {
      return this.paintCallback.call$0();
    }
  };
  A.PersistedPicture.prototype = {
    createElement$0(_) {
      return this.defaultCreateElement$1("flt-picture");
    },
    preroll$1(prerollContext) {
      this.super$PersistedSurface$preroll(prerollContext);
    },
    recomputeTransformAndClip$0() {
      var t2, t3, paintWidth, paintHeight, newDensity, _this = this,
        t1 = _this.parent.transform;
      _this.transform = t1;
      t2 = _this.dx;
      if (t2 !== 0 || _this.dy !== 0) {
        t1.toString;
        t3 = new A.Matrix40(new Float32Array(16));
        t3.setFrom$1(t1);
        _this.transform = t3;
        t3.translate$2(0, t2, _this.dy);
      }
      t1 = _this.localPaintBounds;
      paintWidth = t1.right - t1.left;
      paintHeight = t1.bottom - t1.top;
      t1 = paintWidth === 0 || paintHeight === 0;
      newDensity = t1 ? 1 : A._computePixelDensity(_this.transform, paintWidth, paintHeight);
      if (newDensity !== _this._density) {
        _this._density = newDensity;
        _this._requiresRepaint = true;
      }
      _this._computeExactCullRects$0();
    },
    _computeExactCullRects$0() {
      var clipTransform, bounds, localClipBounds, localInverse, t1, t2, _this = this,
        parentSurface = _this.parent;
      if (parentSurface.projectedClip == null) {
        clipTransform = A.Matrix4$identity();
        for (bounds = null; parentSurface != null;) {
          localClipBounds = parentSurface.localClipBounds;
          if (localClipBounds != null)
            bounds = bounds == null ? A.transformRect(clipTransform, localClipBounds) : bounds.intersect$1(A.transformRect(clipTransform, localClipBounds));
          localInverse = parentSurface.get$localTransformInverse();
          if (localInverse != null && !localInverse.isIdentity$0(0))
            clipTransform.multiply$1(0, localInverse);
          parentSurface = parentSurface.parent;
        }
        if (bounds != null)
          t1 = bounds.right - bounds.left <= 0 || bounds.bottom - bounds.top <= 0;
        else
          t1 = false;
        if (t1)
          bounds = B.Rect_0_0_0_0;
        t1 = _this.parent;
        t1.projectedClip = bounds;
      } else
        t1 = parentSurface;
      t1 = t1.projectedClip;
      t2 = _this.localPaintBounds;
      if (t1 == null) {
        _this._exactLocalCullRect = t2;
        t1 = t2;
      } else
        t1 = _this._exactLocalCullRect = t2.intersect$1(t1);
      if (t1.right - t1.left <= 0 || t1.bottom - t1.top <= 0)
        _this._exactGlobalCullRect = _this._exactLocalCullRect = B.Rect_0_0_0_0;
    },
    _computeOptimalCullRect$1(oldSurface) {
      var oldOptimalLocalCullRect, t1, t2, t3, t4, t5, t6, t7, t8, t9, newLocalCullRect, _this = this;
      if (oldSurface == null || !oldSurface.picture.recordingCanvas._didDraw) {
        _this._optimalLocalCullRect = _this._exactLocalCullRect;
        _this._requiresRepaint = true;
        return;
      }
      oldOptimalLocalCullRect = oldSurface === _this ? _this._optimalLocalCullRect : oldSurface._optimalLocalCullRect;
      if (J.$eq$(_this._exactLocalCullRect, B.Rect_0_0_0_0)) {
        _this._optimalLocalCullRect = B.Rect_0_0_0_0;
        if (!J.$eq$(oldOptimalLocalCullRect, B.Rect_0_0_0_0))
          _this._requiresRepaint = true;
        return;
      }
      oldOptimalLocalCullRect.toString;
      t1 = _this._exactLocalCullRect;
      t1.toString;
      if (A.rectContainsOther(oldOptimalLocalCullRect, t1)) {
        _this._optimalLocalCullRect = oldOptimalLocalCullRect;
        return;
      }
      t2 = t1.left;
      t3 = t1.top;
      t4 = t1.right;
      t1 = t1.bottom;
      t5 = t4 - t2;
      t6 = A.PersistedPicture__predictTrend(oldOptimalLocalCullRect.left - t2, t5);
      t7 = t1 - t3;
      t8 = A.PersistedPicture__predictTrend(oldOptimalLocalCullRect.top - t3, t7);
      t5 = A.PersistedPicture__predictTrend(t4 - oldOptimalLocalCullRect.right, t5);
      t7 = A.PersistedPicture__predictTrend(t1 - oldOptimalLocalCullRect.bottom, t7);
      t9 = _this.localPaintBounds;
      t9.toString;
      newLocalCullRect = new A.Rect(t2 - t6, t3 - t8, t4 + t5, t1 + t7).intersect$1(t9);
      _this._requiresRepaint = !J.$eq$(_this._optimalLocalCullRect, newLocalCullRect);
      _this._optimalLocalCullRect = newLocalCullRect;
    },
    _applyPaint$1(oldSurface) {
      var t2, t3, domCanvas, _this = this,
        t1 = oldSurface == null,
        oldCanvas = t1 ? null : oldSurface.__engine$_canvas;
      _this._requiresRepaint = false;
      t2 = _this.picture.recordingCanvas;
      if (t2._didDraw) {
        t3 = _this._optimalLocalCullRect;
        t3 = t3.get$isEmpty(t3);
      } else
        t3 = true;
      if (t3) {
        A._recycleCanvas(oldCanvas);
        if (!t1)
          oldSurface.__engine$_canvas = null;
        t1 = _this.rootElement;
        if (t1 != null)
          A.removeAllChildren(t1);
        t1 = _this.__engine$_canvas;
        if (t1 != null && t1 !== oldCanvas)
          A._recycleCanvas(t1);
        _this.__engine$_canvas = null;
        return;
      }
      if (t2.renderStrategy.hasArbitraryPaint)
        _this._applyBitmapPaint$1(oldCanvas);
      else {
        A._recycleCanvas(_this.__engine$_canvas);
        t1 = _this.rootElement;
        t1.toString;
        domCanvas = _this.__engine$_canvas = new A.DomCanvas(t1, A._setArrayType([], type$.JSArray__SaveElementStackEntry), A._setArrayType([], type$.JSArray_Element), A.Matrix4$identity());
        t1 = _this.rootElement;
        t1.toString;
        A.removeAllChildren(t1);
        t1 = _this._optimalLocalCullRect;
        t1.toString;
        t2.applyCommands$2(domCanvas, t1);
        domCanvas.endOfPaint$0();
      }
    },
    matchForUpdate$1(existingSurface) {
      var didRequireBitmap, requiresBitmap, oldCanvas, oldPixelCount, _this = this,
        t1 = existingSurface.picture,
        t2 = _this.picture;
      if (t1 === t2)
        return 0;
      t1 = t1.recordingCanvas;
      if (!t1._didDraw)
        return 1;
      didRequireBitmap = t1.renderStrategy.hasArbitraryPaint;
      requiresBitmap = t2.recordingCanvas.renderStrategy.hasArbitraryPaint;
      if (didRequireBitmap !== requiresBitmap)
        return 1;
      else if (!requiresBitmap)
        return 1;
      else {
        oldCanvas = type$.nullable_BitmapCanvas._as(existingSurface.__engine$_canvas);
        if (oldCanvas == null)
          return 1;
        else {
          t1 = _this._exactLocalCullRect;
          t1.toString;
          if (!oldCanvas.doesFitBounds$2(t1, _this._density))
            return 1;
          else {
            t1 = _this._exactLocalCullRect;
            t1 = A.BitmapCanvas_widthToPhysical(t1.right - t1.left);
            t2 = _this._exactLocalCullRect;
            t2 = A.BitmapCanvas_heightToPhysical(t2.bottom - t2.top);
            oldPixelCount = oldCanvas.widthInBitmapPixels * oldCanvas.heightInBitmapPixels;
            if (oldPixelCount === 0)
              return 1;
            return 1 - t1 * t2 / oldPixelCount;
          }
        }
      }
    },
    _applyBitmapPaint$1(oldCanvas) {
      var t1, t2, _this = this;
      if (oldCanvas instanceof A.BitmapCanvas) {
        t1 = _this._optimalLocalCullRect;
        t1.toString;
        t1 = oldCanvas.doesFitBounds$2(t1, _this._density) && oldCanvas._devicePixelRatio === A.EnginePlatformDispatcher_browserDevicePixelRatio();
      } else
        t1 = false;
      if (t1) {
        t1 = _this._optimalLocalCullRect;
        t1.toString;
        oldCanvas.set$bounds(0, t1);
        _this.__engine$_canvas = oldCanvas;
        oldCanvas._elementCache = _this._elementCache;
        oldCanvas.clear$0(0);
        t1 = _this.picture.recordingCanvas;
        t1.toString;
        t2 = _this._optimalLocalCullRect;
        t2.toString;
        t1.applyCommands$2(oldCanvas, t2);
        oldCanvas.endOfPaint$0();
      } else {
        A._recycleCanvas(oldCanvas);
        t1 = _this.__engine$_canvas;
        if (t1 instanceof A.BitmapCanvas)
          t1._elementCache = null;
        _this.__engine$_canvas = null;
        t1 = $.paintQueue;
        t2 = _this._optimalLocalCullRect;
        t1.push(new A.PaintRequest(new A.Size(t2.right - t2.left, t2.bottom - t2.top), new A.PersistedPicture__applyBitmapPaint_closure(_this)));
      }
    },
    _findOrCreateCanvas$1(bounds) {
      var boundsWidth, boundsHeight, requestedPixelCount, t3, bestRecycledCanvas, lastPixelCount, i, candidate, ratio, t4, t5, candidatePixelCount, t6, fits, isSmaller, canvas, _this = this,
        t1 = bounds.right - bounds.left,
        t2 = bounds.bottom - bounds.top;
      for (boundsWidth = t1 + 1, boundsHeight = t2 + 1, requestedPixelCount = t1 * t2, t3 = requestedPixelCount > 1, bestRecycledCanvas = null, lastPixelCount = 1 / 0, i = 0; i < $._recycledCanvases.length; ++i) {
        candidate = $._recycledCanvases[i];
        ratio = window.devicePixelRatio;
        t4 = ratio === 0 ? 1 : ratio;
        if (candidate._devicePixelRatio !== t4)
          continue;
        t4 = candidate._bounds;
        t5 = t4.right - t4.left;
        t4 = t4.bottom - t4.top;
        candidatePixelCount = t5 * t4;
        t6 = _this._density;
        ratio = window.devicePixelRatio;
        if (candidate.widthInBitmapPixels >= B.JSNumber_methods.ceil$0(boundsWidth * (ratio === 0 ? 1 : ratio)) + 2) {
          ratio = window.devicePixelRatio;
          fits = candidate.heightInBitmapPixels >= B.JSNumber_methods.ceil$0(boundsHeight * (ratio === 0 ? 1 : ratio)) + 2 && candidate._density === t6;
        } else
          fits = false;
        isSmaller = candidatePixelCount < lastPixelCount;
        if (fits && isSmaller)
          if (!(isSmaller && t3 && candidatePixelCount / requestedPixelCount > 4)) {
            if (t5 === t1 && t4 === t2) {
              bestRecycledCanvas = candidate;
              break;
            }
            lastPixelCount = candidatePixelCount;
            bestRecycledCanvas = candidate;
          }
      }
      if (bestRecycledCanvas != null) {
        B.JSArray_methods.remove$1($._recycledCanvases, bestRecycledCanvas);
        bestRecycledCanvas.set$bounds(0, bounds);
        bestRecycledCanvas._elementCache = _this._elementCache;
        return bestRecycledCanvas;
      }
      canvas = A.BitmapCanvas$(bounds, _this.picture.recordingCanvas.renderStrategy, _this._density);
      canvas._elementCache = _this._elementCache;
      return canvas;
    },
    _applyTranslate$0() {
      var t1 = this.rootElement.style,
        t2 = "translate(" + A.S(this.dx) + "px, " + A.S(this.dy) + "px)";
      B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "transform"), t2, "");
    },
    apply$0() {
      this._applyTranslate$0();
      this._applyPaint$1(null);
    },
    build$0(_) {
      this._computeOptimalCullRect$1(null);
      this._requiresRepaint = true;
      this.super$PersistedSurface$build(0);
    },
    update$1(_, oldSurface) {
      var t1, densityChanged, _this = this;
      _this.super$PersistedSurface$update(0, oldSurface);
      _this._elementCache = oldSurface._elementCache;
      if (oldSurface !== _this)
        oldSurface._elementCache = null;
      if (_this.dx !== oldSurface.dx || _this.dy !== oldSurface.dy)
        _this._applyTranslate$0();
      _this._computeOptimalCullRect$1(oldSurface);
      if (_this.picture === oldSurface.picture) {
        t1 = _this.__engine$_canvas;
        densityChanged = t1 instanceof A.BitmapCanvas && _this._density !== t1._density;
        if (_this._requiresRepaint || densityChanged)
          _this._applyPaint$1(oldSurface);
        else
          _this.__engine$_canvas = oldSurface.__engine$_canvas;
      } else
        _this._applyPaint$1(oldSurface);
    },
    retain$0() {
      var _this = this;
      _this.super$PersistedSurface$retain();
      _this._computeOptimalCullRect$1(_this);
      if (_this._requiresRepaint)
        _this._applyPaint$1(_this);
    },
    discard$0() {
      A._recycleCanvas(this.__engine$_canvas);
      this.__engine$_canvas = null;
      this.super$PersistedSurface$discard();
    }
  };
  A.PersistedPicture__applyBitmapPaint_closure.prototype = {
    call$0() {
      var bitmapCanvas,
        t1 = this.$this,
        t2 = t1._optimalLocalCullRect;
      t2.toString;
      bitmapCanvas = t1.__engine$_canvas = t1._findOrCreateCanvas$1(t2);
      bitmapCanvas._elementCache = t1._elementCache;
      t2 = t1.rootElement;
      t2.toString;
      A.removeAllChildren(t2);
      t1.rootElement.appendChild(bitmapCanvas.rootElement);
      bitmapCanvas.clear$0(0);
      t2 = t1.picture.recordingCanvas;
      t2.toString;
      t1 = t1._optimalLocalCullRect;
      t1.toString;
      t2.applyCommands$2(bitmapCanvas, t1);
      bitmapCanvas.endOfPaint$0();
    },
    $signature: 0
  };
  A.RecordingCanvas.prototype = {
    applyCommands$2(engineCanvas, clipRect) {
      var len, i, len0, i0, command, e, t1, t2, len1, exception;
      try {
        t1 = this._pictureBounds;
        t1.toString;
        t1 = A.rectContainsOther(clipRect, t1);
        t2 = this._commands;
        len1 = t2.length;
        if (t1) {
          len = len1;
          for (i = 0; i < len; ++i)
            t2[i].apply$1(engineCanvas);
        } else {
          len0 = len1;
          for (i0 = 0; i0 < len0; ++i0) {
            command = t2[i0];
            if (command instanceof A.DrawCommand)
              if (command.isInvisible$1(clipRect))
                continue;
            command.apply$1(engineCanvas);
          }
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        if (!J.$eq$(e.name, "NS_ERROR_FAILURE"))
          throw exception;
      }
    },
    drawRect$2(_, rect, paint) {
      var paintSpread, command, _this = this,
        t1 = paint._paintData;
      if (t1.shader != null)
        _this.renderStrategy.hasArbitraryPaint = true;
      _this._didDraw = true;
      paintSpread = A._getPaintSpread(paint);
      paint._frozen = true;
      command = new A.PaintDrawRect(rect, t1, -1 / 0, -1 / 0, 1 / 0, 1 / 0);
      t1 = _this._paintBounds;
      if (paintSpread !== 0)
        t1.grow$2(rect.inflate$1(paintSpread), command);
      else
        t1.grow$2(rect, command);
      _this._commands.push(command);
    },
    drawRRect$2(_, rrect, paint) {
      var paintSpread, t2, t3, t4, t5, t6, t7, command, _this = this,
        t1 = paint._paintData;
      if (t1.shader != null || !rrect.webOnlyUniformRadii)
        _this.renderStrategy.hasArbitraryPaint = true;
      _this._didDraw = true;
      paintSpread = A._getPaintSpread(paint);
      t2 = rrect.left;
      t3 = rrect.right;
      t4 = Math.min(t2, t3);
      t5 = rrect.top;
      t6 = rrect.bottom;
      t7 = Math.min(t5, t6);
      t3 = Math.max(t2, t3);
      t6 = Math.max(t5, t6);
      paint._frozen = true;
      command = new A.PaintDrawRRect(rrect, t1, -1 / 0, -1 / 0, 1 / 0, 1 / 0);
      _this._paintBounds.growLTRB$5(t4 - paintSpread, t7 - paintSpread, t3 + paintSpread, t6 + paintSpread, command);
      _this._commands.push(command);
    },
    drawDRRect$3(_, outer, inner, paint) {
      var scaledOuter, scaledInner, outerTl, outerTr, outerBl, outerBr, innerTl, innerTr, innerBl, innerBr, paintSpread, command, t5, left, right, _this = this,
        innerRect = new A.Rect(inner.left, inner.top, inner.right, inner.bottom),
        t1 = outer.left,
        t2 = outer.top,
        t3 = outer.right,
        t4 = outer.bottom,
        outerRect = new A.Rect(t1, t2, t3, t4);
      if (outerRect.$eq(0, innerRect) || !outerRect.intersect$1(innerRect).$eq(0, innerRect))
        return;
      scaledOuter = outer.scaleRadii$0();
      scaledInner = inner.scaleRadii$0();
      outerTl = A._measureBorderRadius(scaledOuter.tlRadiusX, scaledOuter.tlRadiusY);
      outerTr = A._measureBorderRadius(scaledOuter.trRadiusX, scaledOuter.trRadiusY);
      outerBl = A._measureBorderRadius(scaledOuter.blRadiusX, scaledOuter.blRadiusY);
      outerBr = A._measureBorderRadius(scaledOuter.brRadiusX, scaledOuter.brRadiusY);
      innerTl = A._measureBorderRadius(scaledInner.tlRadiusX, scaledInner.tlRadiusY);
      innerTr = A._measureBorderRadius(scaledInner.trRadiusX, scaledInner.trRadiusY);
      innerBl = A._measureBorderRadius(scaledInner.blRadiusX, scaledInner.blRadiusY);
      innerBr = A._measureBorderRadius(scaledInner.brRadiusX, scaledInner.brRadiusY);
      if (innerTl > outerTl || innerTr > outerTr || innerBl > outerBl || innerBr > outerBr)
        return;
      _this._didDraw = _this.renderStrategy.hasArbitraryPaint = true;
      paintSpread = A._getPaintSpread(paint);
      paint._frozen = true;
      command = new A.PaintDrawDRRect(outer, inner, paint._paintData, -1 / 0, -1 / 0, 1 / 0, 1 / 0);
      t5 = A.Path_Path();
      t5.set$fillType(B.PathFillType_1);
      t5.addRRect$1(0, outer);
      t5.addRRect$1(0, inner);
      t5.close$0(0);
      command.path = t5;
      left = Math.min(t1, t3);
      right = Math.max(t1, t3);
      _this._paintBounds.growLTRB$5(left - paintSpread, Math.min(t2, t4) - paintSpread, right + paintSpread, Math.max(t2, t4) + paintSpread, command);
      _this._commands.push(command);
    },
    drawPath$2(_, path, paint) {
      var rect, t1, rrect, pathBounds, paintSpread, t2, t3, clone, command, _this = this;
      if (paint._paintData.shader == null) {
        type$.SurfacePath._as(path);
        rect = path.pathRef.getRect$0();
        if (rect != null) {
          _this.drawRect$2(0, rect, paint);
          return;
        }
        t1 = path.pathRef;
        rrect = t1.fIsRRect ? t1._getRRect$0() : null;
        if (rrect != null) {
          _this.drawRRect$2(0, rrect, paint);
          return;
        }
      }
      type$.SurfacePath._as(path);
      if (path.pathRef._fVerbsLength !== 0) {
        _this._didDraw = _this.renderStrategy.hasArbitraryPaint = true;
        pathBounds = path.getBounds$0(0);
        paintSpread = A._getPaintSpread(paint);
        if (paintSpread !== 0)
          pathBounds = pathBounds.inflate$1(paintSpread);
        t1 = path.pathRef;
        t2 = new A.PathRef(t1.fPoints, t1._fVerbs);
        t2._fVerbsCapacity = t1._fVerbsCapacity;
        t2._fVerbsLength = t1._fVerbsLength;
        t2._fPointsCapacity = t1._fPointsCapacity;
        t2._fPointsLength = t1._fPointsLength;
        t2._conicWeightsCapacity = t1._conicWeightsCapacity;
        t2._conicWeightsLength = t1._conicWeightsLength;
        t2._conicWeights = t1._conicWeights;
        t3 = t1.fBoundsIsDirty;
        t2.fBoundsIsDirty = t3;
        if (!t3) {
          t2.fBounds = t1.fBounds;
          t2.cachedBounds = t1.cachedBounds;
          t2.fIsFinite = t1.fIsFinite;
        }
        t2.fSegmentMask = t1.fSegmentMask;
        t2.fIsOval = t1.fIsOval;
        t2.fIsRRect = t1.fIsRRect;
        t2.fIsRect = t1.fIsRect;
        t2.fRRectOrOvalIsCCW = t1.fRRectOrOvalIsCCW;
        t2.fRRectOrOvalStartIdx = t1.fRRectOrOvalStartIdx;
        clone = new A.SurfacePath(t2, B.PathFillType_0);
        clone._copyFields$1(path);
        paint._frozen = true;
        command = new A.PaintDrawPath(clone, paint._paintData, -1 / 0, -1 / 0, 1 / 0, 1 / 0);
        _this._paintBounds.grow$2(pathBounds, command);
        clone._fillType = path._fillType;
        _this._commands.push(command);
      }
    },
    drawParagraph$2(_, paragraph, offset) {
      var t1, left, $top, command, _this = this;
      type$.CanvasParagraph._as(paragraph);
      if (!paragraph.isLaidOut)
        return;
      _this._didDraw = true;
      t1 = _this.renderStrategy;
      t1.hasArbitraryPaint = true;
      t1.hasParagraphs = true;
      left = offset._dx;
      $top = offset._dy;
      command = new A.PaintDrawParagraph(paragraph, offset, -1 / 0, -1 / 0, 1 / 0, 1 / 0);
      _this._paintBounds.growLTRB$5(left, $top, left + paragraph.get$_layoutService().width, $top + paragraph.get$_layoutService().height, command);
      _this._commands.push(command);
    }
  };
  A.PaintCommand.prototype = {};
  A.DrawCommand.prototype = {
    isInvisible$1(clipRect) {
      var _this = this;
      if (_this.isClippedOut)
        return true;
      return _this.bottomBound < clipRect.top || _this.topBound > clipRect.bottom || _this.rightBound < clipRect.left || _this.leftBound > clipRect.right;
    }
  };
  A.PaintSave.prototype = {
    apply$1(canvas) {
      canvas.save$0(0);
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.PaintRestore.prototype = {
    apply$1(canvas) {
      canvas.restore$0(0);
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.PaintTranslate.prototype = {
    apply$1(canvas) {
      canvas.translate$2(0, this.dx, this.dy);
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.PaintTransform.prototype = {
    apply$1(canvas) {
      canvas.transform$1(0, this.matrix4);
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.PaintClipRect.prototype = {
    apply$1(canvas) {
      canvas.clipRect$2(0, this.rect, this.clipOp);
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.PaintClipRRect.prototype = {
    apply$1(canvas) {
      canvas.clipRRect$1(0, this.rrect);
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.PaintClipPath.prototype = {
    apply$1(canvas) {
      canvas.clipPath$1(0, this.path);
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.PaintDrawRect.prototype = {
    apply$1(canvas) {
      canvas.drawRect$2(0, this.rect, this.paint);
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.PaintDrawRRect.prototype = {
    apply$1(canvas) {
      canvas.drawRRect$2(0, this.rrect, this.paint);
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.PaintDrawDRRect.prototype = {
    apply$1(canvas) {
      var t1 = this.paint;
      if (t1.style == null)
        t1.style = B.PaintingStyle_0;
      canvas.drawPath$2(0, this.path, t1);
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.PaintDrawCircle.prototype = {
    apply$1(canvas) {
      canvas.drawCircle$3(0, this.c, this.radius, this.paint);
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.PaintDrawPath.prototype = {
    apply$1(canvas) {
      canvas.drawPath$2(0, this.path, this.paint);
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.PaintDrawParagraph.prototype = {
    apply$1(canvas) {
      canvas.drawParagraph$2(0, this.paragraph, this.offset);
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A._PaintBounds.prototype = {
    clipRect$2(_, rect, command) {
      var t1, t4, t3, t2, _this = this,
        left = rect.left,
        $top = rect.top,
        right = rect.right,
        bottom = rect.bottom;
      if (!_this._currentMatrixIsIdentity) {
        t1 = $.$get$_PaintBounds__tempRectData();
        t1[0] = left;
        t1[1] = $top;
        t1[2] = right;
        t1[3] = bottom;
        A.transformLTRB(_this._currentMatrix, t1);
        left = t1[0];
        $top = t1[1];
        right = t1[2];
        bottom = t1[3];
      }
      if (!_this._clipRectInitialized) {
        _this._currentClipLeft = left;
        _this._currentClipTop = $top;
        _this._currentClipRight = right;
        _this._currentClipBottom = bottom;
        _this._clipRectInitialized = true;
        t4 = bottom;
        t3 = right;
        t2 = $top;
        t1 = left;
      } else {
        t1 = _this._currentClipLeft;
        if (left > t1) {
          _this._currentClipLeft = left;
          t1 = left;
        }
        t2 = _this._currentClipTop;
        if ($top > t2) {
          _this._currentClipTop = $top;
          t2 = $top;
        }
        t3 = _this._currentClipRight;
        if (right < t3) {
          _this._currentClipRight = right;
          t3 = right;
        }
        t4 = _this._currentClipBottom;
        if (bottom < t4) {
          _this._currentClipBottom = bottom;
          t4 = bottom;
        }
      }
      if (t1 >= t3 || t2 >= t4)
        command.isClippedOut = true;
      else {
        command.leftBound = t1;
        command.topBound = t2;
        command.rightBound = t3;
        command.bottomBound = t4;
      }
    },
    grow$2(r, command) {
      this.growLTRB$5(r.left, r.top, r.right, r.bottom, command);
    },
    growLTRB$5(left, $top, right, bottom, command) {
      var t1, transformedPointLeft, transformedPointTop, transformedPointRight, transformedPointBottom, transformedPointRight0, transformedPointLeft0, transformedPointBottom0, transformedPointTop0, _this = this;
      if (left === right || $top === bottom) {
        command.isClippedOut = true;
        return;
      }
      if (!_this._currentMatrixIsIdentity) {
        t1 = $.$get$_PaintBounds__tempRectData();
        t1[0] = left;
        t1[1] = $top;
        t1[2] = right;
        t1[3] = bottom;
        A.transformLTRB(_this._currentMatrix, t1);
        transformedPointLeft = t1[0];
        transformedPointTop = t1[1];
        transformedPointRight = t1[2];
        transformedPointBottom = t1[3];
      } else {
        transformedPointBottom = bottom;
        transformedPointRight = right;
        transformedPointTop = $top;
        transformedPointLeft = left;
      }
      if (_this._clipRectInitialized) {
        transformedPointRight0 = _this._currentClipRight;
        if (transformedPointLeft >= transformedPointRight0) {
          command.isClippedOut = true;
          return;
        }
        transformedPointLeft0 = _this._currentClipLeft;
        if (transformedPointRight <= transformedPointLeft0) {
          command.isClippedOut = true;
          return;
        }
        transformedPointBottom0 = _this._currentClipBottom;
        if (transformedPointTop >= transformedPointBottom0) {
          command.isClippedOut = true;
          return;
        }
        transformedPointTop0 = _this._currentClipTop;
        if (transformedPointBottom <= transformedPointTop0) {
          command.isClippedOut = true;
          return;
        }
        if (transformedPointLeft < transformedPointLeft0)
          transformedPointLeft = transformedPointLeft0;
        if (transformedPointRight > transformedPointRight0)
          transformedPointRight = transformedPointRight0;
        if (transformedPointTop < transformedPointTop0)
          transformedPointTop = transformedPointTop0;
        if (transformedPointBottom > transformedPointBottom0)
          transformedPointBottom = transformedPointBottom0;
      }
      command.leftBound = transformedPointLeft;
      command.topBound = transformedPointTop;
      command.rightBound = transformedPointRight;
      command.bottomBound = transformedPointBottom;
      if (_this._didPaintInsideClipArea) {
        _this.__engine$_left = Math.min(Math.min(_this.__engine$_left, transformedPointLeft), transformedPointRight);
        _this.__engine$_right = Math.max(Math.max(_this.__engine$_right, transformedPointLeft), transformedPointRight);
        _this.__engine$_top = Math.min(Math.min(_this.__engine$_top, transformedPointTop), transformedPointBottom);
        _this.__engine$_bottom = Math.max(Math.max(_this.__engine$_bottom, transformedPointTop), transformedPointBottom);
      } else {
        _this.__engine$_left = Math.min(transformedPointLeft, transformedPointRight);
        _this.__engine$_right = Math.max(transformedPointLeft, transformedPointRight);
        _this.__engine$_top = Math.min(transformedPointTop, transformedPointBottom);
        _this.__engine$_bottom = Math.max(transformedPointTop, transformedPointBottom);
      }
      _this._didPaintInsideClipArea = true;
    },
    saveTransformsAndClip$0() {
      var _this = this,
        t1 = _this._currentMatrix,
        t2 = new A.Matrix40(new Float32Array(16));
      t2.setFrom$1(t1);
      _this.__engine$_transforms.push(t2);
      t1 = _this._clipRectInitialized ? new A.Rect(_this._currentClipLeft, _this._currentClipTop, _this._currentClipRight, _this._currentClipBottom) : null;
      _this._clipStack.push(t1);
    },
    computeBounds$0() {
      var t1, maxLeft, maxRight, maxTop, maxBottom, t2, left, right, $top, bottom, _this = this;
      if (!_this._didPaintInsideClipArea)
        return B.Rect_0_0_0_0;
      t1 = _this.maxPaintBounds;
      maxLeft = t1.left;
      if (isNaN(maxLeft))
        maxLeft = -1 / 0;
      maxRight = t1.right;
      if (isNaN(maxRight))
        maxRight = 1 / 0;
      maxTop = t1.top;
      if (isNaN(maxTop))
        maxTop = -1 / 0;
      maxBottom = t1.bottom;
      if (isNaN(maxBottom))
        maxBottom = 1 / 0;
      t1 = _this.__engine$_left;
      t2 = _this.__engine$_right;
      left = Math.min(t1, t2);
      right = Math.max(t1, t2);
      t2 = _this.__engine$_top;
      t1 = _this.__engine$_bottom;
      $top = Math.min(t2, t1);
      bottom = Math.max(t2, t1);
      if (right < maxLeft || bottom < maxTop)
        return B.Rect_0_0_0_0;
      return new A.Rect(Math.max(left, maxLeft), Math.max($top, maxTop), Math.min(right, maxRight), Math.min(bottom, maxBottom));
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.RenderStrategy.prototype = {};
  A._WebGlRenderer.prototype = {
    drawRectToGl$6(targetRect, gl, glProgram, gradient, widthInPixels, heightInPixels) {
      var t1, t2, t3, colorsBuffer, colors, indexBuffer, t4,
        _s9_ = "uniform4f",
        _s10_ = "bindBuffer",
        _s10_0 = "bufferData",
        _s19_ = "vertexAttribPointer",
        _s23_ = "enableVertexAttribArray",
        left = targetRect.left,
        $top = targetRect.top,
        right = targetRect.right,
        bottom = targetRect.bottom,
        vertices = new Float32Array(8);
      vertices[0] = left;
      vertices[1] = $top;
      vertices[2] = right;
      vertices[3] = $top;
      vertices[4] = right;
      vertices[5] = bottom;
      vertices[6] = left;
      vertices[7] = bottom;
      t1 = glProgram.program;
      t2 = gl.glContext;
      A.callMethod(t2, "uniformMatrix4fv", [gl.getUniformLocation$2(0, t1, "u_ctransform"), false, A.Matrix4$identity().__engine$_m4storage]);
      A.callMethod(t2, _s9_, [gl.getUniformLocation$2(0, t1, "u_scale"), 2 / widthInPixels, -2 / heightInPixels, 1, 1]);
      A.callMethod(t2, _s9_, [gl.getUniformLocation$2(0, t1, "u_shift"), -1, 1, 0, 0]);
      t3 = t2.createBuffer();
      t3.toString;
      A.callMethod(t2, _s10_, [gl.get$kArrayBuffer(), t3]);
      t3 = gl.get$kStaticDraw();
      A.callMethod(t2, _s10_0, [gl.get$kArrayBuffer(), vertices, t3]);
      t3 = gl._kFloat;
      A.callMethod(t2, _s19_, [0, 2, t3 == null ? gl._kFloat = t2.FLOAT : t3, false, 0, 0]);
      A.callMethod(t2, _s23_, [0]);
      colorsBuffer = t2.createBuffer();
      A.callMethod(t2, _s10_, [gl.get$kArrayBuffer(), colorsBuffer]);
      colors = new Int32Array(A._ensureNativeList(A._setArrayType([4278255360, 4278190335, 4294967040, 4278255615], type$.JSArray_int)));
      t3 = gl.get$kStaticDraw();
      A.callMethod(t2, _s10_0, [gl.get$kArrayBuffer(), colors, t3]);
      t3 = gl._kUnsignedByte;
      A.callMethod(t2, _s19_, [1, 4, t3 == null ? gl._kUnsignedByte = t2.UNSIGNED_BYTE : t3, true, 0, 0]);
      A.callMethod(t2, _s23_, [1]);
      indexBuffer = t2.createBuffer();
      A.callMethod(t2, _s10_, [gl.get$kElementArrayBuffer(), indexBuffer]);
      t3 = $.$get$VertexShaders_vertexIndicesForRect();
      t4 = gl.get$kStaticDraw();
      A.callMethod(t2, _s10_0, [gl.get$kElementArrayBuffer(), t3, t4]);
      if (A.callMethod(t2, "getUniformLocation", [t1, "u_resolution"]) != null)
        A.callMethod(t2, "uniform2f", [gl.getUniformLocation$2(0, t1, "u_resolution"), widthInPixels, heightInPixels]);
      t1 = gl._kColorBufferBit;
      A.callMethod(t2, "clear", [t1 == null ? gl._kColorBufferBit = t2.COLOR_BUFFER_BIT : t1]);
      t2.viewport(0, 0, widthInPixels, heightInPixels);
      t1 = gl._kTriangles;
      if (t1 == null)
        t1 = gl._kTriangles = t2.TRIANGLES;
      t3 = t3.length;
      t4 = gl._kUnsignedShort;
      A.callMethod(t2, "drawElements", [t1, t3, t4 == null ? gl._kUnsignedShort = t2.UNSIGNED_SHORT : t4, 0]);
    }
  };
  A.SurfaceScene.prototype = {
    dispose$0(_) {
    }
  };
  A.PersistedScene.prototype = {
    recomputeTransformAndClip$0() {
      var t2,
        t1 = window.innerWidth;
      t1.toString;
      t2 = window.innerHeight;
      t2.toString;
      this.localClipBounds = new A.Rect(0, 0, t1, t2);
      this.projectedClip = null;
    },
    get$localTransformInverse() {
      var t1 = this._localTransformInverse;
      return t1 == null ? this._localTransformInverse = A.Matrix4$identity() : t1;
    },
    createElement$0(_) {
      return this.defaultCreateElement$1("flt-scene");
    },
    apply$0() {
    }
  };
  A.SurfaceSceneBuilder.prototype = {
    _pushSurface$1$1(surface) {
      var t2,
        t1 = surface._oldLayer.value;
      if (t1 != null)
        t1.__engine$_state = B.PersistedSurfaceState_3;
      t1 = this._surfaceStack;
      t2 = B.JSArray_methods.get$last(t1);
      t2.__engine$_children.push(surface);
      surface.parent = t2;
      t1.push(surface);
      return surface;
    },
    _pushSurface$1(surface) {
      return this._pushSurface$1$1(surface, type$.PersistedContainerSurface);
    },
    pushOffset$3$oldLayer(dx, dy, oldLayer) {
      var t1, t2;
      type$.nullable_PersistedOffset._as(oldLayer);
      t1 = A._setArrayType([], type$.JSArray_PersistedSurface);
      t2 = new A.FrameReference(oldLayer != null && oldLayer.__engine$_state === B.PersistedSurfaceState_1 ? oldLayer : null);
      $.frameReferences.push(t2);
      return this._pushSurface$1(new A.PersistedOffset(dx, dy, t1, t2, B.PersistedSurfaceState_0));
    },
    pushTransform$2$oldLayer(matrix4, oldLayer) {
      var matrix, t1, t2;
      if (this._surfaceStack.length === 1)
        matrix = A.Matrix4$identity().__engine$_m4storage;
      else
        matrix = A.toMatrix32(matrix4);
      type$.nullable_PersistedTransform._as(oldLayer);
      t1 = A._setArrayType([], type$.JSArray_PersistedSurface);
      t2 = new A.FrameReference(oldLayer != null && oldLayer.__engine$_state === B.PersistedSurfaceState_1 ? oldLayer : null);
      $.frameReferences.push(t2);
      return this._pushSurface$1(new A.PersistedTransform(matrix, t1, t2, B.PersistedSurfaceState_0));
    },
    pushClipRect$3$clipBehavior$oldLayer(rect, clipBehavior, oldLayer) {
      var t1, t2;
      type$.nullable_PersistedClipRect._as(oldLayer);
      t1 = A._setArrayType([], type$.JSArray_PersistedSurface);
      t2 = new A.FrameReference(oldLayer != null && oldLayer.__engine$_state === B.PersistedSurfaceState_1 ? oldLayer : null);
      $.frameReferences.push(t2);
      return this._pushSurface$1(new A.PersistedClipRect(clipBehavior, rect, null, t1, t2, B.PersistedSurfaceState_0));
    },
    pushClipPath$3$clipBehavior$oldLayer(path, clipBehavior, oldLayer) {
      var t1, t2;
      type$.nullable_PersistedClipPath._as(oldLayer);
      t1 = A._setArrayType([], type$.JSArray_PersistedSurface);
      t2 = new A.FrameReference(oldLayer != null && oldLayer.__engine$_state === B.PersistedSurfaceState_1 ? oldLayer : null);
      $.frameReferences.push(t2);
      return this._pushSurface$1(new A.PersistedClipPath(path, clipBehavior, t1, t2, B.PersistedSurfaceState_0));
    },
    pushPhysicalShape$6$clipBehavior$color$elevation$oldLayer$path$shadowColor(clipBehavior, color, elevation, oldLayer, path, shadowColor) {
      var t1, t2, t3, t4;
      type$.nullable_PersistedPhysicalShape._as(oldLayer);
      type$.SurfacePath._as(path);
      t1 = shadowColor == null ? null : shadowColor.value;
      if (t1 == null)
        t1 = 4278190080;
      t2 = path.getBounds$0(0);
      t3 = A._setArrayType([], type$.JSArray_PersistedSurface);
      t4 = new A.FrameReference(oldLayer != null && oldLayer.__engine$_state === B.PersistedSurfaceState_1 ? oldLayer : null);
      $.frameReferences.push(t4);
      return this._pushSurface$1(new A.PersistedPhysicalShape(path, t2, elevation, new A.Color(color.value), new A.Color(t1), clipBehavior, null, t3, t4, B.PersistedSurfaceState_0));
    },
    addRetained$1(retainedLayer) {
      var t1;
      type$.PersistedContainerSurface._as(retainedLayer);
      if (retainedLayer.__engine$_state === B.PersistedSurfaceState_1)
        retainedLayer.__engine$_state = B.PersistedSurfaceState_2;
      else
        retainedLayer.revive$0();
      t1 = B.JSArray_methods.get$last(this._surfaceStack);
      t1.__engine$_children.push(retainedLayer);
      retainedLayer.parent = t1;
    },
    pop$0(_) {
      this._surfaceStack.pop();
    },
    addPicture$4$isComplexHint$willChangeHint(offset, picture, isComplexHint, willChangeHint) {
      var t1, t2;
      isComplexHint;
      type$.EnginePicture._as(picture);
      t1 = picture.recordingCanvas._pictureBounds;
      t2 = new A.FrameReference(null);
      $.frameReferences.push(t2);
      t2 = new A.PersistedPicture(offset._dx, offset._dy, picture, t1, new A.CrossFrameCache(type$.CrossFrameCache_HtmlElement), t2, B.PersistedSurfaceState_0);
      t1 = B.JSArray_methods.get$last(this._surfaceStack);
      t1.__engine$_children.push(t2);
      t2.parent = t1;
    },
    build$0(_) {
      A.frameTimingsOnBuildFinish();
      A.frameTimingsOnRasterStart();
      A.timeAction("preroll_frame", new A.SurfaceSceneBuilder_build_closure(this));
      return A.timeAction("apply_frame", new A.SurfaceSceneBuilder_build_closure0(this));
    }
  };
  A.SurfaceSceneBuilder_build_closure.prototype = {
    call$0() {
      for (var t1 = this.$this._surfaceStack; t1.length > 1;)
        t1.pop();
      type$.PersistedScene._as(B.JSArray_methods.get$first(t1)).preroll$1(new A.PrerollSurfaceContext());
    },
    $signature: 0
  };
  A.SurfaceSceneBuilder_build_closure0.prototype = {
    call$0() {
      var t3, t4,
        t1 = type$.PersistedScene,
        t2 = this.$this._surfaceStack;
      if ($.SurfaceSceneBuilder__lastFrameScene == null)
        t1._as(B.JSArray_methods.get$first(t2)).build$0(0);
      else {
        t3 = t1._as(B.JSArray_methods.get$first(t2));
        t4 = $.SurfaceSceneBuilder__lastFrameScene;
        t4.toString;
        t3.update$1(0, t4);
      }
      A.commitScene(t1._as(B.JSArray_methods.get$first(t2)));
      $.SurfaceSceneBuilder__lastFrameScene = t1._as(B.JSArray_methods.get$first(t2));
      return new A.SurfaceScene(t1._as(B.JSArray_methods.get$first(t2)).rootElement);
    },
    $signature: 84
  };
  A.NormalizedGradient.prototype = {
    setupUniforms$2(gl, glProgram) {
      var t1, t2, t3, t4, t5, i, t6, res, result, t7, t8, t9, t10, _this = this;
      for (t1 = _this.thresholdCount, t2 = _this._scale, t3 = gl.glContext, t4 = _this._bias, t5 = glProgram.program, i = 0; i < t1; ++i) {
        t6 = "bias_" + i;
        res = t3.getUniformLocation.apply(t3, [t5, t6]);
        if (res == null) {
          A.throwExpression(A.Exception_Exception(t6 + " not found"));
          result = null;
        } else
          result = res;
        t6 = i * 4;
        t7 = t6 + 1;
        t8 = t6 + 2;
        t9 = t6 + 3;
        t3.uniform4f.apply(t3, [result, t4[t6], t4[t7], t4[t8], t4[t9]]);
        t10 = "scale_" + i;
        res = t3.getUniformLocation.apply(t3, [t5, t10]);
        if (res == null) {
          A.throwExpression(A.Exception_Exception(t10 + " not found"));
          result = null;
        } else
          result = res;
        t3.uniform4f.apply(t3, [result, t2[t6], t2[t7], t2[t8], t2[t9]]);
      }
      for (t1 = _this._thresholds, t2 = t1.length, i = 0; i < t2; i += 4) {
        t4 = "threshold_" + B.JSInt_methods._tdivFast$1(i, 4);
        res = t3.getUniformLocation.apply(t3, [t5, t4]);
        if (res == null) {
          A.throwExpression(A.Exception_Exception(t4 + " not found"));
          result = null;
        } else
          result = res;
        t3.uniform4f.apply(t3, [result, t1[i], t1[i + 1], t1[i + 2], t1[i + 3]]);
      }
    }
  };
  A.NormalizedGradient_NormalizedGradient_closure.prototype = {
    call$1(c) {
      return (c.value >>> 24 & 255) < 1;
    },
    $signature: 85
  };
  A.EngineGradient.prototype = {};
  A.GradientLinear.prototype = {
    createPaintStyle$3(ctx, shaderBounds, density) {
      var matrix4, offsetX, offsetY, t2, t3, t4, t5, centerX, centerY, gradient, _this = this,
        t1 = _this.tileMode;
      if (t1 === B.TileMode_0 || t1 === B.TileMode_3) {
        matrix4 = _this.matrix4;
        offsetX = shaderBounds.left;
        offsetY = shaderBounds.top;
        t2 = _this.from;
        t3 = _this.to;
        t4 = t2._dx;
        t5 = t3._dx;
        t2 = t2._dy;
        t3 = t3._dy;
        if (matrix4 != null) {
          centerX = (t4 + t5) / 2 - offsetX;
          centerY = (t2 + t3) / 2 - offsetY;
          matrix4.transform$2(0, t4 - centerX, t2 - centerY);
          t2 = matrix4.transformedX;
          t4 = matrix4.transformedY;
          matrix4.transform$2(0, t5 - centerX, t3 - centerY);
          gradient = ctx.createLinearGradient(t2 + centerX - offsetX, t4 + centerY - offsetY, matrix4.transformedX + centerX - offsetX, matrix4.transformedY + centerY - offsetY);
        } else
          gradient = ctx.createLinearGradient(t4 - offsetX, t2 - offsetY, t5 - offsetX, t3 - offsetY);
        A._addColorStopsToCanvasGradient(gradient, _this.colors, _this.colorStops, t1 === B.TileMode_3);
        return gradient;
      } else {
        t1 = ctx.createPattern(_this.createImageBitmap$3(shaderBounds, density, false), "no-repeat");
        t1.toString;
        return t1;
      }
    },
    createImageBitmap$3(shaderBounds, density, createDataUrl) {
      var widthInPixels, t3, t4, heightInPixels, t5, t6, t7, t8, gl, normalizedGradient, builder, method, t9, t10, fragColor, probeName, shader, cacheKey, cachedProgram, vertexShader, fragmentShader, fromX, fromY, toX, toY, dx, dy, $length, sinVal, cosVal, isRepeated, originX, originY, originTranslation, rotationZ, storage, gradientTransform, image, _this = this,
        _s18_ = "premultipliedAlpha",
        _s12_ = "u_resolution",
        _s10_ = "m_gradient",
        _s12_0 = "attachShader",
        _s10_0 = "bindBuffer",
        t1 = shaderBounds.right,
        t2 = shaderBounds.left;
      t1 -= t2;
      widthInPixels = B.JSNumber_methods.ceil$0(t1);
      t3 = shaderBounds.bottom;
      t4 = shaderBounds.top;
      t3 -= t4;
      heightInPixels = B.JSNumber_methods.ceil$0(t3);
      if ($.glRenderer == null)
        $.glRenderer = new A._WebGlRenderer();
      t5 = $.OffScreenCanvas__supported;
      if (t5 == null ? $.OffScreenCanvas__supported = "OffscreenCanvas" in window : t5) {
        t5 = new OffscreenCanvas(widthInPixels, heightInPixels);
        t6 = null;
      } else {
        t5 = A.CanvasElement_CanvasElement(heightInPixels, widthInPixels);
        t5.className = "gl-canvas";
        t6 = A.EnginePlatformDispatcher_browserDevicePixelRatio();
        t7 = A.EnginePlatformDispatcher_browserDevicePixelRatio();
        t8 = t5.style;
        t8.position = "absolute";
        t6 = A.S(widthInPixels / t6) + "px";
        t8.width = t6;
        t6 = A.S(heightInPixels / t7) + "px";
        t8.height = t6;
        t6 = t5;
        t5 = null;
      }
      t7 = $.OffScreenCanvas__supported;
      if (t7 == null ? $.OffScreenCanvas__supported = "OffscreenCanvas" in window : t7) {
        t5.toString;
        t6 = type$.String;
        t7 = B.OffscreenCanvas_methods.getContext$2(t5, "webgl2", A.LinkedHashMap_LinkedHashMap$_literal([_s18_, false], t6, type$.dynamic));
        t7.toString;
        gl = new A.GlContext(t7);
        $.GlContext____programCache.__late_helper$_value = A.LinkedHashMap_LinkedHashMap$_empty(t6, type$.nullable_GlProgram);
        gl.__engine$_canvas = t5;
        t5 = $.GlContext____programCache;
      } else {
        t6.toString;
        t5 = $._cachedWebGLVersion;
        t5 = (t5 == null ? $._cachedWebGLVersion = A._detectWebGLVersion() : t5) === 1 ? "webgl" : "webgl2";
        t7 = type$.String;
        t5 = B.CanvasElement_methods.getContext$2(t6, t5, A.LinkedHashMap_LinkedHashMap$_literal([_s18_, false], t7, type$.dynamic));
        t5.toString;
        gl = new A.GlContext(t5);
        $.GlContext____programCache.__late_helper$_value = A.LinkedHashMap_LinkedHashMap$_empty(t7, type$.nullable_GlProgram);
        gl.__engine$_canvas = t6;
        t5 = $.GlContext____programCache;
      }
      gl._widthInPixels = widthInPixels;
      gl._heightInPixels = heightInPixels;
      normalizedGradient = A.NormalizedGradient_NormalizedGradient(_this.colors, _this.colorStops);
      t6 = $.VertexShaders__baseVertexShader;
      if (t6 == null) {
        t6 = $._cachedWebGLVersion;
        if (t6 == null)
          t6 = $._cachedWebGLVersion = A._detectWebGLVersion();
        t7 = A._setArrayType([], type$.JSArray_ShaderDeclaration);
        t8 = A._setArrayType([], type$.JSArray_ShaderMethod);
        builder = new A.ShaderBuilder(t7, t8, t6 === 2, false, new A.StringBuffer(""));
        builder.addIn$2$name(11, "position");
        builder.addIn$2$name(11, "color");
        builder.addUniform$2$name(14, "u_ctransform");
        builder.addUniform$2$name(11, "u_scale");
        builder.addUniform$2$name(11, "u_shift");
        t7.push(new A.ShaderDeclaration("v_color", 11, 3));
        method = new A.ShaderMethod("main", A._setArrayType([], type$.JSArray_String));
        t8.push(method);
        method.addStatement$1("gl_Position = ((u_ctransform * position) * u_scale) + u_shift;");
        method.addStatement$1("v_color = color.zyxw;");
        t6 = $.VertexShaders__baseVertexShader = builder.build$0(0);
      }
      t7 = _this.tileMode;
      t8 = $._cachedWebGLVersion;
      if (t8 == null)
        t8 = $._cachedWebGLVersion = A._detectWebGLVersion();
      t9 = A._setArrayType([], type$.JSArray_ShaderDeclaration);
      t10 = A._setArrayType([], type$.JSArray_ShaderMethod);
      t8 = t8 === 2;
      builder = new A.ShaderBuilder(t9, t10, t8, true, new A.StringBuffer(""));
      builder.floatPrecision = 1;
      builder.addIn$2$name(11, "v_color");
      builder.addUniform$2$name(9, _s12_);
      builder.addUniform$2$name(14, _s10_);
      fragColor = builder._fragmentColorDeclaration;
      if (fragColor == null)
        fragColor = builder._fragmentColorDeclaration = new A.ShaderDeclaration(t8 ? "gFragColor" : "gl_FragColor", 11, 3);
      method = new A.ShaderMethod("main", A._setArrayType([], type$.JSArray_String));
      t10.push(method);
      method.addStatement$1("vec4 localCoord = m_gradient * vec4(gl_FragCoord.x, u_resolution.y - gl_FragCoord.y, 0, 1);");
      method.addStatement$1("float st = localCoord.x;");
      probeName = A._writeSharedGradientShader(builder, method, normalizedGradient, t7);
      method.addStatement$1(fragColor.name + " = " + probeName + " * scale + bias;");
      shader = builder.build$0(0);
      cacheKey = t6 + "||" + shader;
      cachedProgram = J.$index$asx(t5._readField$0(), cacheKey);
      if (cachedProgram == null) {
        vertexShader = gl.compileShader$2(0, "VERTEX_SHADER", t6);
        fragmentShader = gl.compileShader$2(0, "FRAGMENT_SHADER", shader);
        t6 = gl.glContext;
        t8 = t6.createProgram();
        A.callMethod(t6, _s12_0, [t8, vertexShader]);
        A.callMethod(t6, _s12_0, [t8, fragmentShader]);
        A.callMethod(t6, "linkProgram", [t8]);
        t9 = gl._kLinkStatus;
        if (!A.callMethod(t6, "getProgramParameter", [t8, t9 == null ? gl._kLinkStatus = t6.LINK_STATUS : t9]))
          A.throwExpression(A.Exception_Exception(A.callMethod(t6, "getProgramInfoLog", [t8])));
        cachedProgram = new A.GlProgram(t8);
        J.$indexSet$ax(t5._readField$0(), cacheKey, cachedProgram);
      }
      t5 = gl.glContext;
      t6 = cachedProgram.program;
      A.callMethod(t5, "useProgram", [t6]);
      t8 = _this.from;
      fromX = t8._dx;
      fromY = t8._dy;
      t8 = _this.to;
      toX = t8._dx;
      toY = t8._dy;
      dx = toX - fromX;
      dy = toY - fromY;
      $length = Math.sqrt(dx * dx + dy * dy);
      t8 = $length < 11920929e-14;
      sinVal = t8 ? 0 : -dy / $length;
      cosVal = t8 ? 1 : dx / $length;
      isRepeated = t7 !== B.TileMode_0;
      originX = isRepeated ? t1 / 2 : (fromX + toX) / 2 - t2;
      originY = isRepeated ? t3 / 2 : (fromY + toY) / 2 - t4;
      originTranslation = A.Matrix4$identity();
      originTranslation.setTranslationRaw$3(-originX, -originY, 0);
      rotationZ = A.Matrix4$identity();
      storage = rotationZ.__engine$_m4storage;
      storage[0] = cosVal;
      storage[1] = sinVal;
      storage[4] = -sinVal;
      storage[5] = cosVal;
      gradientTransform = A.Matrix4$identity();
      gradientTransform.translate$2(0, 0.5, 0);
      if ($length > 11920929e-14)
        gradientTransform.scale$1(0, 1 / $length);
      t2 = _this.matrix4;
      if (t2 != null) {
        t2 = t2.matrix;
        gradientTransform.scale$2(0, 1, -1);
        gradientTransform.translate$2(0, -shaderBounds.get$center()._dx, -shaderBounds.get$center()._dy);
        gradientTransform.multiply$1(0, new A.Matrix40(t2));
        gradientTransform.translate$2(0, shaderBounds.get$center()._dx, shaderBounds.get$center()._dy);
        gradientTransform.scale$2(0, 1, -1);
      }
      gradientTransform.multiply$1(0, rotationZ);
      gradientTransform.multiply$1(0, originTranslation);
      normalizedGradient.setupUniforms$2(gl, cachedProgram);
      A.callMethod(t5, "uniformMatrix4fv", [gl.getUniformLocation$2(0, t6, _s10_), false, gradientTransform.__engine$_m4storage]);
      A.callMethod(t5, "uniform2f", [gl.getUniformLocation$2(0, t6, _s12_), widthInPixels, heightInPixels]);
      $.glRenderer.drawRectToGl$6(new A.Rect(0, 0, 0 + t1, 0 + t3), gl, cachedProgram, normalizedGradient, widthInPixels, heightInPixels);
      image = gl.readPatternData$1(normalizedGradient.isOpaque);
      A.callMethod(t5, _s10_0, [gl.get$kArrayBuffer(), null]);
      A.callMethod(t5, _s10_0, [gl.get$kElementArrayBuffer(), null]);
      image.toString;
      return image;
    }
  };
  A.ShaderBuilder.prototype = {
    addIn$2$name(dataType, $name) {
      var attrib = new A.ShaderDeclaration($name, dataType, 1);
      this.declarations.push(attrib);
      return attrib;
    },
    addUniform$2$name(dataType, $name) {
      var uniform = new A.ShaderDeclaration($name, dataType, 2);
      this.declarations.push(uniform);
      return uniform;
    },
    _writeVariableDeclaration$2(sb, variable) {
      var t2, t3, _this = this,
        _s8_ = "varying ",
        t1 = variable.storage;
      switch (t1) {
        case 0:
          _this.__engine$_buffer._contents += "const ";
          break;
        case 1:
          if (_this.isWebGl2)
            t2 = "in ";
          else
            t2 = _this._isFragmentShader ? _s8_ : "attribute ";
          _this.__engine$_buffer._contents += t2;
          break;
        case 2:
          _this.__engine$_buffer._contents += "uniform ";
          break;
        case 3:
          t2 = _this.isWebGl2 ? "out " : _s8_;
          _this.__engine$_buffer._contents += t2;
          break;
      }
      t2 = _this.__engine$_buffer;
      t3 = t2._contents += A.ShaderBuilder_typeToString(variable.dataType) + " " + variable.name;
      if (t1 === 0)
        t1 = t2._contents = t3 + " = ";
      else
        t1 = t3;
      t2._contents = t1 + ";\n";
    },
    build$0(_) {
      var t2, t3, _i, t4, method, _this = this,
        t1 = _this.isWebGl2;
      if (t1)
        _this.__engine$_buffer._contents += "#version 300 es\n";
      t2 = _this.floatPrecision;
      if (t2 != null) {
        if (t2 === 0)
          t2 = "lowp";
        else
          t2 = t2 === 1 ? "mediump" : "highp";
        _this.__engine$_buffer._contents += "precision " + t2 + " float;\n";
      }
      if (t1 && _this._fragmentColorDeclaration != null) {
        t1 = _this._fragmentColorDeclaration;
        t1.toString;
        _this._writeVariableDeclaration$2(_this.__engine$_buffer, t1);
      }
      for (t1 = _this.declarations, t2 = t1.length, t3 = _this.__engine$_buffer, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        _this._writeVariableDeclaration$2(t3, t1[_i]);
      for (t1 = _this._methods, t2 = t1.length, t4 = t3.get$writeln(), _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        method = t1[_i];
        t3._contents += "void " + method.name + "() {\n";
        B.JSArray_methods.forEach$1(method._statements, t4);
        t3._contents += "}\n";
      }
      t1 = t3._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.ShaderMethod.prototype = {
    addStatement$1(statement) {
      this._statements.push(statement);
    },
    get$name(receiver) {
      return this.name;
    }
  };
  A.ShaderDeclaration.prototype = {
    get$name(receiver) {
      return this.name;
    }
  };
  A.commitScene_closure.prototype = {
    call$2(a, b) {
      var bSize,
        t1 = a.canvasSize,
        aSize = t1._dy * t1._dx;
      t1 = b.canvasSize;
      bSize = t1._dy * t1._dx;
      return J.compareTo$1$ns(bSize, aSize);
    },
    $signature: 89
  };
  A.PersistedSurfaceState.prototype = {
    toString$0(_) {
      return "PersistedSurfaceState." + this._name;
    }
  };
  A.PersistedSurface.prototype = {
    revive$0() {
      this.__engine$_state = B.PersistedSurfaceState_0;
    },
    get$childContainer() {
      return this.rootElement;
    },
    build$0(_) {
      var t2, _this = this,
        t1 = _this.createElement$0(0);
      _this.rootElement = t1;
      t2 = $.$get$_browserEngine();
      if (t2 === B.BrowserEngine_1) {
        t1 = t1.style;
        t1.zIndex = "0";
      }
      _this.apply$0();
      _this.__engine$_state = B.PersistedSurfaceState_1;
    },
    adoptElements$1(oldSurface) {
      this.rootElement = oldSurface.rootElement;
      oldSurface.rootElement = null;
      oldSurface.__engine$_state = B.PersistedSurfaceState_4;
    },
    update$1(_, oldSurface) {
      this.adoptElements$1(oldSurface);
      this.__engine$_state = B.PersistedSurfaceState_1;
    },
    retain$0() {
      if (this.__engine$_state === B.PersistedSurfaceState_2)
        $.retainedSurfaces.push(this);
    },
    discard$0() {
      var t1 = this.rootElement;
      t1.toString;
      J.remove$0$ax(t1);
      this.rootElement = null;
      this.__engine$_state = B.PersistedSurfaceState_4;
    },
    dispose$0(_) {
    },
    defaultCreateElement$1(tagName) {
      var t1 = A._ElementFactoryProvider_createElement_tag(tagName, null),
        t2 = t1.style;
      t2.position = "absolute";
      return t1;
    },
    get$localTransformInverse() {
      return null;
    },
    recomputeTransformAndClip$0() {
      var _this = this;
      _this.transform = _this.parent.transform;
      _this.projectedClip = _this.localClipBounds = null;
    },
    preroll$1(prerollContext) {
      this.recomputeTransformAndClip$0();
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.PersistedLeafSurface.prototype = {};
  A.PersistedContainerSurface.prototype = {
    preroll$1(prerollContext) {
      var t1, $length, i;
      this.super$PersistedSurface$preroll(prerollContext);
      t1 = this.__engine$_children;
      $length = t1.length;
      for (i = 0; i < $length; ++i)
        t1[i].preroll$1(prerollContext);
    },
    recomputeTransformAndClip$0() {
      var _this = this;
      _this.transform = _this.parent.transform;
      _this.projectedClip = _this.localClipBounds = null;
    },
    build$0(_) {
      var t1, len, containerElement, i, child, t2;
      this.super$PersistedSurface$build(0);
      t1 = this.__engine$_children;
      len = t1.length;
      containerElement = this.get$childContainer();
      for (i = 0; i < len; ++i) {
        child = t1[i];
        if (child.__engine$_state === B.PersistedSurfaceState_2)
          child.retain$0();
        else if (child instanceof A.PersistedContainerSurface && child._oldLayer.value != null) {
          t2 = child._oldLayer.value;
          t2.toString;
          child.update$1(0, t2);
        } else
          child.build$0(0);
        containerElement.toString;
        t2 = child.rootElement;
        t2.toString;
        containerElement.appendChild(t2);
        child.__engine$_index = i;
      }
    },
    matchForUpdate$1(existingSurface) {
      return 1;
    },
    update$1(_, oldSurface) {
      var t1, _this = this;
      _this.super$PersistedSurface$update(0, oldSurface);
      if (oldSurface.__engine$_children.length === 0)
        _this._updateZeroToMany$1(oldSurface);
      else {
        t1 = _this.__engine$_children.length;
        if (t1 === 1)
          _this._updateManyToOne$1(oldSurface);
        else if (t1 === 0)
          A.PersistedContainerSurface__discardActiveChildren(oldSurface);
        else
          _this._updateManyToMany$1(oldSurface);
      }
    },
    _updateZeroToMany$1(oldSurface) {
      var i, newChild, t2,
        containerElement = this.get$childContainer(),
        t1 = this.__engine$_children,
        $length = t1.length;
      for (i = 0; i < $length; ++i) {
        newChild = t1[i];
        if (newChild.__engine$_state === B.PersistedSurfaceState_2)
          newChild.retain$0();
        else if (newChild instanceof A.PersistedContainerSurface && newChild._oldLayer.value != null) {
          t2 = newChild._oldLayer.value;
          t2.toString;
          newChild.update$1(0, t2);
        } else
          newChild.build$0(0);
        newChild.__engine$_index = i;
        containerElement.toString;
        t2 = newChild.rootElement;
        t2.toString;
        containerElement.appendChild(t2);
      }
    },
    _updateManyToOne$1(oldSurface) {
      var t1, t2, oldLayer, bestMatch, bestScore, i, candidate, rti, score, t3, oldChild, _this = this,
        newChild = _this.__engine$_children[0];
      newChild.__engine$_index = 0;
      if (newChild.__engine$_state === B.PersistedSurfaceState_2) {
        t1 = newChild.rootElement.parentElement;
        t2 = _this.get$childContainer();
        if (t1 == null ? t2 != null : t1 !== t2) {
          t1 = _this.get$childContainer();
          t1.toString;
          t2 = newChild.rootElement;
          t2.toString;
          t1.appendChild(t2);
        }
        newChild.retain$0();
        A.PersistedContainerSurface__discardActiveChildren(oldSurface);
        return;
      }
      if (newChild instanceof A.PersistedContainerSurface && newChild._oldLayer.value != null) {
        oldLayer = newChild._oldLayer.value;
        t1 = oldLayer.rootElement.parentElement;
        t2 = _this.get$childContainer();
        if (t1 == null ? t2 != null : t1 !== t2) {
          t1 = _this.get$childContainer();
          t1.toString;
          t2 = oldLayer.rootElement;
          t2.toString;
          t1.appendChild(t2);
        }
        newChild.update$1(0, oldLayer);
        A.PersistedContainerSurface__discardActiveChildren(oldSurface);
        return;
      }
      for (t1 = oldSurface.__engine$_children, bestMatch = null, bestScore = 2, i = 0; i < t1.length; ++i) {
        candidate = t1[i];
        if (candidate.__engine$_state === B.PersistedSurfaceState_1) {
          rti = newChild instanceof A.Closure ? A.closureFunctionType(newChild) : null;
          t2 = A.createRuntimeType(rti == null ? A.instanceType(newChild) : rti);
          rti = candidate instanceof A.Closure ? A.closureFunctionType(candidate) : null;
          t2 = t2 === A.createRuntimeType(rti == null ? A.instanceType(candidate) : rti);
        } else
          t2 = false;
        if (!t2)
          continue;
        score = newChild.matchForUpdate$1(candidate);
        if (score < bestScore) {
          bestScore = score;
          bestMatch = candidate;
        }
      }
      if (bestMatch != null) {
        newChild.update$1(0, bestMatch);
        t2 = newChild.rootElement.parentElement;
        t3 = _this.get$childContainer();
        if (t2 == null ? t3 != null : t2 !== t3) {
          t2 = _this.get$childContainer();
          t2.toString;
          t3 = newChild.rootElement;
          t3.toString;
          t2.appendChild(t3);
        }
      } else {
        newChild.build$0(0);
        t2 = _this.get$childContainer();
        t2.toString;
        t3 = newChild.rootElement;
        t3.toString;
        t2.appendChild(t3);
      }
      for (i = 0; i < t1.length; ++i) {
        oldChild = t1[i];
        if (oldChild !== bestMatch && oldChild.__engine$_state === B.PersistedSurfaceState_1)
          oldChild.discard$0();
      }
    },
    _updateManyToMany$1(oldSurface) {
      var t1, t2, indexMapNew, indexMapOld, requiresDomInserts, topInNew, newChild, t3, isReparenting, matchedOldChild, oldLayer, indexInOld, backfill, _this = this,
        containerElement = _this.get$childContainer(),
        matches = _this._matchChildren$1(oldSurface);
      for (t1 = _this.__engine$_children, t2 = type$.JSArray_int, indexMapNew = null, indexMapOld = null, requiresDomInserts = false, topInNew = 0; topInNew < t1.length; ++topInNew) {
        newChild = t1[topInNew];
        if (newChild.__engine$_state === B.PersistedSurfaceState_2) {
          t3 = newChild.rootElement.parentElement;
          isReparenting = t3 == null ? containerElement != null : t3 !== containerElement;
          newChild.retain$0();
          matchedOldChild = newChild;
        } else if (newChild instanceof A.PersistedContainerSurface && newChild._oldLayer.value != null) {
          oldLayer = newChild._oldLayer.value;
          t3 = oldLayer.rootElement.parentElement;
          isReparenting = t3 == null ? containerElement != null : t3 !== containerElement;
          newChild.update$1(0, oldLayer);
          matchedOldChild = oldLayer;
        } else {
          matchedOldChild = matches.$index(0, newChild);
          if (matchedOldChild != null) {
            t3 = matchedOldChild.rootElement.parentElement;
            isReparenting = t3 == null ? containerElement != null : t3 !== containerElement;
            newChild.update$1(0, matchedOldChild);
          } else {
            newChild.build$0(0);
            isReparenting = true;
          }
        }
        indexInOld = matchedOldChild != null && !isReparenting ? matchedOldChild.__engine$_index : -1;
        if (!requiresDomInserts && indexInOld !== topInNew) {
          indexMapNew = A._setArrayType([], t2);
          indexMapOld = A._setArrayType([], t2);
          for (backfill = 0; backfill < topInNew; ++backfill) {
            indexMapNew.push(backfill);
            indexMapOld.push(backfill);
          }
          requiresDomInserts = true;
        }
        if (requiresDomInserts && indexInOld !== -1) {
          indexMapNew.push(topInNew);
          indexMapOld.push(indexInOld);
        }
        newChild.__engine$_index = topInNew;
      }
      if (requiresDomInserts) {
        indexMapOld.toString;
        _this._insertChildDomNodes$2(indexMapNew, indexMapOld);
      }
      A.PersistedContainerSurface__discardActiveChildren(oldSurface);
    },
    _insertChildDomNodes$2(indexMapNew, indexMapOld) {
      var t1, i, containerElement, t2, refNode, isStationary, t3,
        stationaryIndices = A.longestIncreasingSubsequence(indexMapOld);
      for (t1 = stationaryIndices.length, i = 0; i < t1; ++i)
        stationaryIndices[i] = indexMapNew[stationaryIndices[i]];
      containerElement = this.get$childContainer();
      for (t1 = this.__engine$_children, i = t1.length - 1, t2 = type$.HtmlElement, refNode = null; i >= 0; --i, refNode = t3) {
        indexMapNew.toString;
        isStationary = B.JSArray_methods.indexOf$1(indexMapNew, i) !== -1 && B.JSArray_methods.contains$1(stationaryIndices, i);
        t3 = t1[i].rootElement;
        t3.toString;
        t2._as(t3);
        if (!isStationary)
          if (refNode == null)
            containerElement.appendChild(t3);
          else
            containerElement.insertBefore(t3, refNode);
      }
    },
    _matchChildren$1(oldSurface) {
      var i, child, oldChildren, newChildCount, oldChildCount, allMatches, indexInNew, newChild, indexInOld, oldChild, rti, result, match, matchedChild, newChildNeedsMatch,
        t1 = this.__engine$_children,
        newUnfilteredChildCount = t1.length,
        t2 = oldSurface.__engine$_children,
        oldUnfilteredChildCount = t2.length,
        newChildren = A._setArrayType([], type$.JSArray_PersistedSurface);
      for (i = 0; i < newUnfilteredChildCount; ++i) {
        child = t1[i];
        if (child.__engine$_state === B.PersistedSurfaceState_0 && child._oldLayer.value == null)
          newChildren.push(child);
      }
      oldChildren = A._setArrayType([], type$.JSArray_nullable_PersistedSurface);
      for (i = 0; i < oldUnfilteredChildCount; ++i) {
        child = t2[i];
        if (child.__engine$_state === B.PersistedSurfaceState_1)
          oldChildren.push(child);
      }
      newChildCount = newChildren.length;
      oldChildCount = oldChildren.length;
      if (newChildCount === 0 || oldChildCount === 0)
        return B.Map_empty1;
      allMatches = A._setArrayType([], type$.JSArray__PersistedSurfaceMatch);
      for (indexInNew = 0; indexInNew < newChildCount; ++indexInNew) {
        newChild = newChildren[indexInNew];
        for (indexInOld = 0; indexInOld < oldChildCount; ++indexInOld) {
          oldChild = oldChildren[indexInOld];
          if (oldChild != null) {
            if (oldChild.__engine$_state === B.PersistedSurfaceState_1) {
              rti = newChild instanceof A.Closure ? A.closureFunctionType(newChild) : null;
              t1 = A.createRuntimeType(rti == null ? A.instanceType(newChild) : rti);
              rti = oldChild instanceof A.Closure ? A.closureFunctionType(oldChild) : null;
              t1 = t1 === A.createRuntimeType(rti == null ? A.instanceType(oldChild) : rti);
            } else
              t1 = false;
            t1 = !t1;
          } else
            t1 = true;
          if (t1)
            continue;
          allMatches.push(new A._PersistedSurfaceMatch(newChild, indexInOld, newChild.matchForUpdate$1(oldChild)));
        }
      }
      B.JSArray_methods.sort$1(allMatches, new A.PersistedContainerSurface__matchChildren_closure());
      result = A.LinkedHashMap_LinkedHashMap$_empty(type$.nullable_PersistedSurface, type$.PersistedSurface);
      for (i = 0; i < allMatches.length; ++i) {
        match = allMatches[i];
        t1 = match.oldChildIndex;
        matchedChild = oldChildren[t1];
        t2 = match.newChild;
        newChildNeedsMatch = result.$index(0, t2) == null;
        if (matchedChild != null && newChildNeedsMatch) {
          oldChildren[t1] = null;
          result.$indexSet(0, t2, matchedChild);
        }
      }
      return result;
    },
    retain$0() {
      var t1, len, i;
      this.super$PersistedSurface$retain();
      t1 = this.__engine$_children;
      len = t1.length;
      for (i = 0; i < len; ++i)
        t1[i].retain$0();
    },
    revive$0() {
      var t1, len, i;
      this.super$PersistedSurface$revive();
      t1 = this.__engine$_children;
      len = t1.length;
      for (i = 0; i < len; ++i)
        t1[i].revive$0();
    },
    discard$0() {
      this.super$PersistedSurface$discard();
      A.PersistedContainerSurface__discardActiveChildren(this);
    }
  };
  A.PersistedContainerSurface__matchChildren_closure.prototype = {
    call$2(m1, m2) {
      return B.JSNumber_methods.compareTo$1(m1.matchQuality, m2.matchQuality);
    },
    $signature: 92
  };
  A._PersistedSurfaceMatch.prototype = {
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.PrerollSurfaceContext.prototype = {};
  A.PersistedTransform.prototype = {
    get$matrix4() {
      var t1 = this._matrix4;
      return t1 == null ? this._matrix4 = new A.Matrix40(this._matrixStorage) : t1;
    },
    recomputeTransformAndClip$0() {
      var _this = this,
        t1 = _this.parent.transform;
      t1.toString;
      _this.transform = t1.multiplied$1(_this.get$matrix4());
      _this.projectedClip = null;
    },
    get$localTransformInverse() {
      var t1 = this._localTransformInverse;
      return t1 == null ? this._localTransformInverse = A.Matrix4_tryInvert0(this.get$matrix4()) : t1;
    },
    createElement$0(_) {
      var element = document.createElement("flt-transform");
      A.setElementStyle(element, "position", "absolute");
      A.setElementStyle(element, "transform-origin", "0 0 0");
      return element;
    },
    apply$0() {
      var t1 = this.rootElement.style,
        t2 = A.float64ListToCssTransform(this._matrixStorage);
      B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "transform"), t2, "");
    },
    update$1(_, oldSurface) {
      var t1, t2, matrixChanged, i, _this = this;
      _this.super$PersistedContainerSurface$update(0, oldSurface);
      t1 = oldSurface._matrixStorage;
      t2 = _this._matrixStorage;
      if (t1 === t2) {
        _this._matrix4 = oldSurface._matrix4;
        _this._localTransformInverse = oldSurface._localTransformInverse;
        return;
      }
      i = 0;
      while (true) {
        if (!(i < 16)) {
          matrixChanged = false;
          break;
        }
        if (t2[i] !== t1[i]) {
          matrixChanged = true;
          break;
        }
        ++i;
      }
      if (matrixChanged) {
        t1 = _this.rootElement.style;
        t2 = A.float64ListToCssTransform(t2);
        B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "transform"), t2, "");
      } else {
        _this._matrix4 = oldSurface._matrix4;
        _this._localTransformInverse = oldSurface._localTransformInverse;
      }
    },
    $isTransformEngineLayer0: 1
  };
  A.initializeEngine_closure.prototype = {
    call$2(_, __) {
      var t1, _i;
      for (t1 = $._hotRestartListeners.length, _i = 0; _i < $._hotRestartListeners.length; $._hotRestartListeners.length === t1 || (0, A.throwConcurrentModificationError)($._hotRestartListeners), ++_i)
        $._hotRestartListeners[_i].call$0();
      return A.Future_Future$value(A.ServiceExtensionResponse$result("OK"), type$.ServiceExtensionResponse);
    },
    $signature: 63
  };
  A.initializeEngine_closure0.prototype = {
    call$0() {
      var t1 = this._box_0;
      if (!t1.waitingForAnimation) {
        t1.waitingForAnimation = true;
        B.Window_methods.requestAnimationFrame$1(window, new A.initializeEngine__closure(t1));
      }
    },
    $signature: 0
  };
  A.initializeEngine__closure.prototype = {
    call$1(highResTime) {
      var highResTimeMicroseconds, t1, t2, t3;
      A.frameTimingsOnVsync();
      this._box_0.waitingForAnimation = false;
      highResTimeMicroseconds = B.JSNumber_methods.toInt$0(1000 * highResTime);
      A.frameTimingsOnBuildStart();
      t1 = $.$get$EnginePlatformDispatcher__instance();
      t2 = t1._onBeginFrame;
      if (t2 != null) {
        t3 = A.Duration$(highResTimeMicroseconds, 0);
        A.invoke1(t2, t1._onBeginFrameZone, t3);
      }
      t2 = t1._onDrawFrame;
      if (t2 != null)
        A.invoke(t2, t1._onDrawFrameZone);
    },
    $signature: 65
  };
  A._addUrlStrategyListener_closure.prototype = {
    call$1(jsStrategy) {
      var t1 = jsStrategy == null ? null : new A.CustomUrlStrategy(jsStrategy);
      $._isUrlStrategySet = true;
      $._customUrlStrategy = t1;
    },
    $signature: 80
  };
  A._addUrlStrategyListener_closure0.prototype = {
    call$0() {
      self._flutter_web_set_location_strategy = null;
    },
    $signature: 0
  };
  A.Keyboard.prototype = {
    Keyboard$_$1(_onMacOs) {
      var _this = this,
        t1 = new A.Keyboard$__closure(_this);
      _this._keydownListener = t1;
      B.Window_methods.addEventListener$2(window, "keydown", t1);
      t1 = new A.Keyboard$__closure0(_this);
      _this._keyupListener = t1;
      B.Window_methods.addEventListener$2(window, "keyup", t1);
      $._hotRestartListeners.push(new A.Keyboard$__closure1(_this));
    },
    dispose$0(_) {
      var t1, t2, _this = this;
      B.Window_methods.removeEventListener$2(window, "keydown", _this._keydownListener);
      B.Window_methods.removeEventListener$2(window, "keyup", _this._keyupListener);
      for (t1 = _this._keydownTimers, t2 = A.LinkedHashMapKeyIterator$(t1, t1._modifications); t2.moveNext$0();)
        t1.$index(0, t2.__js_helper$_current).cancel$0(0);
      t1.clear$0(0);
      $.Keyboard__instance = _this._keyupListener = _this._keydownListener = null;
    },
    _handleHtmlEvent$1($event) {
      var t1, t2, t3, metaState, eventData, _this = this;
      if (!type$.KeyboardEvent._is($event))
        return;
      t1 = $event.code;
      t1.toString;
      t2 = $event.key;
      t2.toString;
      if (!(t2 === "Meta" || t2 === "Shift" || t2 === "Alt" || t2 === "Control") && _this._onMacOs) {
        t2 = _this._keydownTimers;
        t3 = t2.$index(0, t1);
        if (t3 != null)
          t3.cancel$0(0);
        if ($event.type === "keydown")
          t3 = $event.ctrlKey || $event.shiftKey || $event.altKey || $event.metaKey;
        else
          t3 = false;
        if (t3)
          t2.$indexSet(0, t1, A.Timer_Timer(B.Duration_2000000, new A.Keyboard__handleHtmlEvent_closure(_this, t1, $event)));
        else
          t2.remove$1(0, t1);
      }
      metaState = $event.getModifierState("Shift") ? 1 : 0;
      if ($event.getModifierState("Alt") || $event.getModifierState("AltGraph"))
        metaState |= 2;
      if ($event.getModifierState("Control"))
        metaState |= 4;
      if ($event.getModifierState("Meta"))
        metaState |= 8;
      _this._lastMetaState = metaState;
      if ($event.type === "keydown") {
        t1 = $event.key;
        if (t1 === "CapsLock") {
          t1 = metaState | 32;
          _this._lastMetaState = t1;
        } else if ($event.code === "NumLock") {
          t1 = metaState | 16;
          _this._lastMetaState = t1;
        } else if (t1 === "ScrollLock") {
          t1 = metaState | 64;
          _this._lastMetaState = t1;
        } else
          t1 = metaState;
      } else
        t1 = metaState;
      eventData = A.LinkedHashMap_LinkedHashMap$_literal(["type", $event.type, "keymap", "web", "code", $event.code, "key", $event.key, "location", $event.location, "metaState", t1, "keyCode", $event.keyCode], type$.String, type$.dynamic);
      $.$get$EnginePlatformDispatcher__instance().invokeOnPlatformMessage$3("flutter/keyevent", B.C_JSONMessageCodec.encodeMessage$1(eventData), new A.Keyboard__handleHtmlEvent_closure0($event));
    }
  };
  A.Keyboard$__closure.prototype = {
    call$1($event) {
      this.$this._handleHtmlEvent$1($event);
    },
    $signature: 2
  };
  A.Keyboard$__closure0.prototype = {
    call$1($event) {
      this.$this._handleHtmlEvent$1($event);
    },
    $signature: 2
  };
  A.Keyboard$__closure1.prototype = {
    call$0() {
      this.$this.dispose$0(0);
    },
    $signature: 0
  };
  A.Keyboard__handleHtmlEvent_closure.prototype = {
    call$0() {
      var t2, eventData,
        t1 = this.$this;
      t1._keydownTimers.remove$1(0, this.timerKey);
      t2 = this.event;
      eventData = A.LinkedHashMap_LinkedHashMap$_literal(["type", "keyup", "keymap", "web", "code", t2.code, "key", t2.key, "location", t2.location, "metaState", t1._lastMetaState, "keyCode", t2.keyCode], type$.String, type$.dynamic);
      $.$get$EnginePlatformDispatcher__instance().invokeOnPlatformMessage$3("flutter/keyevent", B.C_JSONMessageCodec.encodeMessage$1(eventData), A._engine___noopCallback$closure());
    },
    $signature: 0
  };
  A.Keyboard__handleHtmlEvent_closure0.prototype = {
    call$1(data) {
      if (data == null)
        return;
      if (A._asBool(J.$index$asx(type$.Map_String_dynamic._as(B.C_JSONMessageCodec.decodeMessage$1(data)), "handled")))
        this.event.preventDefault();
    },
    $signature: 5
  };
  A._kLogicalKeyToModifierGetter_closure.prototype = {
    call$1($event) {
      return $event._event.altKey;
    },
    $signature: 6
  };
  A._kLogicalKeyToModifierGetter_closure0.prototype = {
    call$1($event) {
      return $event._event.altKey;
    },
    $signature: 6
  };
  A._kLogicalKeyToModifierGetter_closure1.prototype = {
    call$1($event) {
      return $event._event.ctrlKey;
    },
    $signature: 6
  };
  A._kLogicalKeyToModifierGetter_closure2.prototype = {
    call$1($event) {
      return $event._event.ctrlKey;
    },
    $signature: 6
  };
  A._kLogicalKeyToModifierGetter_closure3.prototype = {
    call$1($event) {
      return $event._event.shiftKey;
    },
    $signature: 6
  };
  A._kLogicalKeyToModifierGetter_closure4.prototype = {
    call$1($event) {
      return $event._event.shiftKey;
    },
    $signature: 6
  };
  A._kLogicalKeyToModifierGetter_closure5.prototype = {
    call$1($event) {
      return $event._event.metaKey;
    },
    $signature: 6
  };
  A._kLogicalKeyToModifierGetter_closure6.prototype = {
    call$1($event) {
      return $event._event.metaKey;
    },
    $signature: 6
  };
  A.KeyboardBinding.prototype = {
    __engine$_addEventListener$2(_, eventName, handler) {
      var t1 = new A.KeyboardBinding__addEventListener_loggedHandler(handler);
      this.__engine$_listeners.$indexSet(0, eventName, t1);
      B.Window_methods.addEventListener$3(window, eventName, t1, true);
    },
    _onKeyData$1(data) {
      var t1 = {};
      t1.result = null;
      $.$get$EnginePlatformDispatcher__instance().invokeOnKeyData$2(data, new A.KeyboardBinding__onKeyData_closure(t1));
      t1 = t1.result;
      t1.toString;
      return t1;
    },
    _setup$0() {
      var t1, t2, _this = this;
      _this.__engine$_addEventListener$2(0, "keydown", new A.KeyboardBinding__setup_closure(_this));
      _this.__engine$_addEventListener$2(0, "keyup", new A.KeyboardBinding__setup_closure0(_this));
      t1 = $.$get$_operatingSystem();
      t2 = type$.int;
      _this.__KeyboardBinding__converter = new A.KeyboardConverter(_this.get$_onKeyData(), t1 === B.OperatingSystem_4, A.LinkedHashMap_LinkedHashMap$_empty(t2, t2), A.LinkedHashMap_LinkedHashMap$_empty(t2, type$.void_Function));
    }
  };
  A.KeyboardBinding__addEventListener_loggedHandler.prototype = {
    call$1($event) {
      var t1 = $.EngineSemanticsOwner__instance;
      if ((t1 == null ? $.EngineSemanticsOwner__instance = A.EngineSemanticsOwner$_() : t1).receiveGlobalEvent$1($event))
        return this.handler.call$1($event);
      return null;
    },
    $signature: 13
  };
  A.KeyboardBinding__onKeyData_closure.prototype = {
    call$1(handled) {
      this._box_0.result = handled;
    },
    $signature: 23
  };
  A.KeyboardBinding__setup_closure.prototype = {
    call$1($event) {
      return A._lateReadCheck(this.$this.__KeyboardBinding__converter, "_converter").handleEvent$1(new A.FlutterHtmlKeyboardEvent(type$.KeyboardEvent._as($event)));
    },
    $signature: 1
  };
  A.KeyboardBinding__setup_closure0.prototype = {
    call$1($event) {
      return A._lateReadCheck(this.$this.__KeyboardBinding__converter, "_converter").handleEvent$1(new A.FlutterHtmlKeyboardEvent(type$.KeyboardEvent._as($event)));
    },
    $signature: 1
  };
  A.FlutterHtmlKeyboardEvent.prototype = {};
  A.KeyboardConverter.prototype = {
    _scheduleAsyncEvent$3(duration, getData, callback) {
      var t2, t1 = {};
      t1.canceled = false;
      t2 = type$.void;
      A.Future_Future$delayed(duration, t2).then$1$1(0, new A.KeyboardConverter__scheduleAsyncEvent_closure(t1, this, callback, getData), t2);
      return new A.KeyboardConverter__scheduleAsyncEvent_closure0(t1);
    },
    _startGuardingKey$3(physicalKey, logicalKey, currentTimeStamp) {
      var cancelingCallback, t1, t2, _this = this;
      if (!_this.onMacOs)
        return;
      cancelingCallback = _this._scheduleAsyncEvent$3(B.Duration_2000000, new A.KeyboardConverter__startGuardingKey_closure(currentTimeStamp, physicalKey, logicalKey), new A.KeyboardConverter__startGuardingKey_closure0(_this, physicalKey));
      t1 = _this._keyGuards;
      t2 = t1.remove$1(0, physicalKey);
      if (t2 != null)
        t2.call$0();
      t1.$indexSet(0, physicalKey, cancelingCallback);
    },
    __engine$_handleEvent$1($event) {
      var ms, timeStamp, t3, physicalKey, logicalKeyIsCharacter, character, logicalKey, isPhysicalDown, type, lastLogicalRecord, nextLogicalRecord, _this = this, _null = null,
        t1 = $event._event,
        t2 = t1.timeStamp;
      t2.toString;
      ms = B.JSNumber_methods.toInt$0(t2);
      timeStamp = A.Duration$(B.JSNumber_methods.toInt$0((t2 - ms) * 1000), ms);
      t2 = t1.key;
      t2.toString;
      t3 = t1.code;
      t3.toString;
      physicalKey = B.Map_KP6BJ.$index(0, t3);
      if (physicalKey == null)
        physicalKey = B.JSString_methods.get$hashCode(t3) + 98784247808;
      t3 = B.JSString_methods._codeUnitAt$1(t2, 0);
      if (!(t3 >= 97 && t3 <= 122))
        t3 = t3 >= 65 && t3 <= 90;
      else
        t3 = true;
      logicalKeyIsCharacter = !(t3 && t2.length > 1);
      if (logicalKeyIsCharacter)
        character = t2;
      else
        character = _null;
      logicalKey = new A.KeyboardConverter__handleEvent_closure($event, character, t2, physicalKey).call$0();
      if (t1.type !== "keydown")
        if (_this.onMacOs) {
          t2 = t1.code;
          t2.toString;
          t2 = t2 === "CapsLock";
          isPhysicalDown = t2;
        } else
          isPhysicalDown = false;
      else
        isPhysicalDown = true;
      if (_this.onMacOs) {
        t2 = t1.code;
        t2.toString;
        t2 = t2 === "CapsLock";
      } else
        t2 = false;
      if (t2) {
        _this._scheduleAsyncEvent$3(B.Duration_0, new A.KeyboardConverter__handleEvent_closure0(timeStamp, physicalKey, logicalKey), new A.KeyboardConverter__handleEvent_closure1(_this, physicalKey));
        type = B.KeyEventType_0;
      } else if (isPhysicalDown) {
        t2 = _this._pressingRecords;
        if (t2.$index(0, physicalKey) != null) {
          t3 = t1.repeat;
          if (t3 === true)
            type = B.KeyEventType_2;
          else {
            _this._dispatchKeyData.call$1(new A.KeyData(timeStamp, B.KeyEventType_1, physicalKey, logicalKey, _null, true));
            t2.remove$1(0, physicalKey);
            type = B.KeyEventType_0;
          }
        } else
          type = B.KeyEventType_0;
      } else {
        if (_this._pressingRecords.$index(0, physicalKey) == null) {
          t1.preventDefault();
          return;
        }
        type = B.KeyEventType_1;
      }
      t2 = _this._pressingRecords;
      lastLogicalRecord = t2.$index(0, physicalKey);
      switch (type.index) {
        case 0:
          nextLogicalRecord = logicalKey;
          break;
        case 1:
          nextLogicalRecord = _null;
          break;
        case 2:
          nextLogicalRecord = lastLogicalRecord;
          break;
        default:
          nextLogicalRecord = _null;
      }
      t3 = nextLogicalRecord == null;
      if (t3)
        t2.remove$1(0, physicalKey);
      else
        t2.$indexSet(0, physicalKey, nextLogicalRecord);
      $.$get$_kLogicalKeyToModifierGetter().forEach$1(0, new A.KeyboardConverter__handleEvent_closure2(_this, $event, timeStamp));
      if (logicalKeyIsCharacter)
        if (!t3)
          _this._startGuardingKey$3(physicalKey, logicalKey, timeStamp);
        else {
          t2 = _this._keyGuards.remove$1(0, physicalKey);
          if (t2 != null)
            t2.call$0();
        }
      t2 = lastLogicalRecord == null ? logicalKey : lastLogicalRecord;
      t3 = type === B.KeyEventType_1 ? _null : character;
      if (_this._dispatchKeyData.call$1(new A.KeyData(timeStamp, type, physicalKey, t2, t3, false)))
        t1.preventDefault();
    },
    handleEvent$1($event) {
      var _this = this, t1 = {};
      t1.sentAnyEvents = false;
      _this._dispatchKeyData = new A.KeyboardConverter_handleEvent_closure(t1, _this);
      try {
        _this.__engine$_handleEvent$1($event);
      } finally {
        if (!t1.sentAnyEvents)
          _this._dispatchKeyData.call$1(B.KeyData_cgD);
        _this._dispatchKeyData = null;
      }
    }
  };
  A.KeyboardConverter__scheduleAsyncEvent_closure.prototype = {
    call$1(_) {
      var _this = this;
      if (!_this._box_0.canceled && !_this.$this._disposed) {
        _this.callback.call$0();
        _this.$this.performDispatchKeyData.call$1(_this.getData.call$0());
      }
    },
    $signature: 24
  };
  A.KeyboardConverter__scheduleAsyncEvent_closure0.prototype = {
    call$0() {
      this._box_0.canceled = true;
    },
    $signature: 0
  };
  A.KeyboardConverter__startGuardingKey_closure.prototype = {
    call$0() {
      return new A.KeyData(new A.Duration(this.currentTimeStamp._duration + 2000000), B.KeyEventType_1, this.physicalKey, this.logicalKey, null, true);
    },
    $signature: 56
  };
  A.KeyboardConverter__startGuardingKey_closure0.prototype = {
    call$0() {
      this.$this._pressingRecords.remove$1(0, this.physicalKey);
    },
    $signature: 0
  };
  A.KeyboardConverter__handleEvent_closure.prototype = {
    call$0() {
      var result, altDown, ctrlDown, shiftDown, metaDown, t3, t4, _this = this,
        t1 = _this.event._event,
        t2 = t1.key;
      t2.toString;
      if (B.Map_8TmdZ.containsKey$1(0, t2)) {
        t2 = t1.key;
        t2.toString;
        t2 = B.Map_8TmdZ.$index(0, t2);
        result = t2 == null ? null : t2[t1.location];
        result.toString;
        return result;
      }
      t2 = _this.character;
      if (t2 != null) {
        result = B.JSString_methods._codeUnitAt$1(t2, 0) & 65535;
        if (t2.length === 2)
          result += B.JSString_methods._codeUnitAt$1(t2, 1) << 16 >>> 0;
        return result >= 65 && result <= 90 ? result + 97 - 65 : result;
      }
      t2 = _this.eventKey;
      if (t2 === "Dead") {
        altDown = t1.altKey;
        ctrlDown = t1.ctrlKey;
        shiftDown = t1.shiftKey;
        metaDown = t1.metaKey;
        t1 = altDown ? 1073741824 : 0;
        t2 = ctrlDown ? 268435456 : 0;
        t3 = shiftDown ? 536870912 : 0;
        t4 = metaDown ? 2147483648 : 0;
        return _this.physicalKey + (t1 + t2 + t3 + t4) + 98784247808;
      }
      t1 = B.Map_0mogo.$index(0, t2);
      return t1 == null ? B.JSString_methods.get$hashCode(t2) + 98784247808 : t1;
    },
    $signature: 32
  };
  A.KeyboardConverter__handleEvent_closure0.prototype = {
    call$0() {
      return new A.KeyData(this.timeStamp, B.KeyEventType_1, this.physicalKey, this.logicalKey, null, true);
    },
    $signature: 56
  };
  A.KeyboardConverter__handleEvent_closure1.prototype = {
    call$0() {
      this.$this._pressingRecords.remove$1(0, this.physicalKey);
    },
    $signature: 0
  };
  A.KeyboardConverter__handleEvent_closure2.prototype = {
    call$2(logicalKey, getModifier) {
      var t1 = this.$this,
        t2 = t1._pressingRecords;
      if (t2.containsValue$1(0, logicalKey) && !getModifier.call$1(this.event))
        t2.removeWhere$1(t2, new A.KeyboardConverter__handleEvent__closure(t1, logicalKey, this.timeStamp));
    },
    $signature: 122
  };
  A.KeyboardConverter__handleEvent__closure.prototype = {
    call$2(physicalKey, logicalRecord) {
      var t1 = this.logicalKey;
      if (logicalRecord !== t1)
        return false;
      this.$this._dispatchKeyData.call$1(new A.KeyData(this.timeStamp, B.KeyEventType_1, physicalKey, t1, null, true));
      return true;
    },
    $signature: 128
  };
  A.KeyboardConverter_handleEvent_closure.prototype = {
    call$1(data) {
      this._box_0.sentAnyEvents = true;
      return this.$this.performDispatchKeyData.call$1(data);
    },
    $signature: 34
  };
  A.MouseCursor.prototype = {};
  A.BrowserHistory.prototype = {
    get$_unsubscribe() {
      return A._lateReadCheck(this.__BrowserHistory__unsubscribe, "_unsubscribe");
    },
    _setupStrategy$1(strategy) {
      this.__BrowserHistory__unsubscribe = strategy.addPopStateListener$1(0, type$.dynamic_Function_Event._as(this.get$onPopState(this)));
    },
    dispose$0(_) {
      var _this = this;
      if (_this._isDisposed || _this.get$urlStrategy() == null)
        return;
      _this._isDisposed = true;
      _this._unsubscribe$0();
    },
    exit$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$exit$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = $async$self.get$urlStrategy() != null ? 2 : 3;
              break;
            case 2:
              // then
              $async$goto = 4;
              return A._asyncAwait($async$self.tearDown$0(), $async$exit$0);
            case 4:
              // returning from await.
              $async$goto = 5;
              return A._asyncAwait($async$self.get$urlStrategy().go$1(0, -1), $async$exit$0);
            case 5:
              // returning from await.
            case 3:
              // join
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$exit$0, $async$completer);
    },
    get$currentPath() {
      var t1 = this.get$urlStrategy();
      t1 = t1 == null ? null : t1.getPath$0(0);
      return t1 == null ? "/" : t1;
    },
    get$currentState() {
      var t1 = this.get$urlStrategy();
      return t1 == null ? null : t1.getState$0(0);
    },
    _unsubscribe$0() {
      return this.get$_unsubscribe().call$0();
    }
  };
  A.MultiEntriesBrowserHistory.prototype = {
    MultiEntriesBrowserHistory$1$urlStrategy(urlStrategy) {
      var t1, _this = this,
        strategy = _this.urlStrategy;
      if (strategy == null)
        return;
      _this._setupStrategy$1(strategy);
      if (!_this._hasSerialCount$1(_this.get$currentState())) {
        t1 = type$.dynamic;
        strategy.replaceState$3(0, A.LinkedHashMap_LinkedHashMap$_literal(["serialCount", 0, "state", _this.get$currentState()], t1, t1), "flutter", _this.get$currentPath());
      }
      _this.__MultiEntriesBrowserHistory__lastSeenSerialCount = _this.get$_currentSerialCount();
    },
    get$_currentSerialCount() {
      if (this._hasSerialCount$1(this.get$currentState())) {
        var t1 = this.get$currentState();
        t1.toString;
        return A._asInt(J.$index$asx(type$.Map_dynamic_dynamic._as(t1), "serialCount"));
      }
      return 0;
    },
    _hasSerialCount$1(state) {
      return type$.Map_dynamic_dynamic._is(state) && J.$index$asx(state, "serialCount") != null;
    },
    setRouteName$3$replace$state(routeName, replace, state) {
      var t2, t3,
        _s20_ = "_lastSeenSerialCount",
        t1 = this.urlStrategy;
      if (t1 != null) {
        t2 = type$.dynamic;
        t3 = this.__MultiEntriesBrowserHistory__lastSeenSerialCount;
        if (replace) {
          t2 = A.LinkedHashMap_LinkedHashMap$_literal(["serialCount", A._lateReadCheck(t3, _s20_), "state", state], t2, t2);
          routeName.toString;
          t1.replaceState$3(0, t2, "flutter", routeName);
        } else {
          t3 = A._lateReadCheck(t3, _s20_) + 1;
          this.__MultiEntriesBrowserHistory__lastSeenSerialCount = t3;
          t2 = A.LinkedHashMap_LinkedHashMap$_literal(["serialCount", A._lateReadCheck(t3, _s20_), "state", state], t2, t2);
          routeName.toString;
          t1.pushState$3(0, t2, "flutter", routeName);
        }
      }
    },
    setRouteName$1(routeName) {
      return this.setRouteName$3$replace$state(routeName, false, null);
    },
    onPopState$1(_, $event) {
      var t1, t2, t3, t4, _this = this;
      if (!_this._hasSerialCount$1(new A._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy($event.state, true))) {
        t1 = _this.urlStrategy;
        t1.toString;
        t2 = new A._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy($event.state, true);
        t3 = type$.dynamic;
        t1.replaceState$3(0, A.LinkedHashMap_LinkedHashMap$_literal(["serialCount", A._lateReadCheck(_this.__MultiEntriesBrowserHistory__lastSeenSerialCount, "_lastSeenSerialCount") + 1, "state", t2], t3, t3), "flutter", _this.get$currentPath());
      }
      _this.__MultiEntriesBrowserHistory__lastSeenSerialCount = _this.get$_currentSerialCount();
      t1 = $.$get$EnginePlatformDispatcher__instance();
      t2 = _this.get$currentPath();
      t3 = new A._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy($event.state, true);
      t3 = t3 == null ? null : J.$index$asx(t3, "state");
      t4 = type$.dynamic;
      t1.invokeOnPlatformMessage$3("flutter/navigation", B.C_JSONMethodCodec.encodeMethodCall$1(new A.MethodCall("pushRouteInformation", A.LinkedHashMap_LinkedHashMap$_literal(["location", t2, "state", t3], t4, t4))), new A.MultiEntriesBrowserHistory_onPopState_closure());
    },
    tearDown$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, backCount, t1, t2;
      var $async$tearDown$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.dispose$0(0);
              if ($async$self._isTornDown || $async$self.urlStrategy == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self._isTornDown = true;
              backCount = $async$self.get$_currentSerialCount();
              $async$goto = backCount > 0 ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return A._asyncAwait($async$self.urlStrategy.go$1(0, -backCount), $async$tearDown$0);
            case 5:
              // returning from await.
            case 4:
              // join
              t1 = $async$self.get$currentState();
              t1.toString;
              type$.Map_dynamic_dynamic._as(t1);
              t2 = $async$self.urlStrategy;
              t2.toString;
              t2.replaceState$3(0, J.$index$asx(t1, "state"), "flutter", $async$self.get$currentPath());
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$tearDown$0, $async$completer);
    },
    get$urlStrategy() {
      return this.urlStrategy;
    }
  };
  A.MultiEntriesBrowserHistory_onPopState_closure.prototype = {
    call$1(_) {
    },
    $signature: 5
  };
  A.SingleEntryBrowserHistory.prototype = {
    SingleEntryBrowserHistory$1$urlStrategy(urlStrategy) {
      var path, _this = this,
        strategy = _this.urlStrategy;
      if (strategy == null)
        return;
      _this._setupStrategy$1(strategy);
      path = _this.get$currentPath();
      if (!A.SingleEntryBrowserHistory__isFlutterEntry(new A._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(window.history.state, true))) {
        strategy.replaceState$3(0, A.LinkedHashMap_LinkedHashMap$_literal(["origin", true, "state", _this.get$currentState()], type$.String, type$.dynamic), "origin", "");
        _this._setupFlutterEntry$3$path$replace(strategy, path, false);
      }
    },
    setRouteName$3$replace$state(routeName, replace, state) {
      var t1 = this.urlStrategy;
      if (t1 != null)
        this._setupFlutterEntry$3$path$replace(t1, routeName, true);
    },
    setRouteName$1(routeName) {
      return this.setRouteName$3$replace$state(routeName, false, null);
    },
    onPopState$1(_, $event) {
      var t1, _this = this,
        _s18_ = "flutter/navigation";
      if (A.SingleEntryBrowserHistory__isOriginEntry(new A._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy($event.state, true))) {
        t1 = _this.urlStrategy;
        t1.toString;
        _this._setupFlutterEntry$1(t1);
        $.$get$EnginePlatformDispatcher__instance().invokeOnPlatformMessage$3(_s18_, B.C_JSONMethodCodec.encodeMethodCall$1(B.MethodCall_popRoute_null), new A.SingleEntryBrowserHistory_onPopState_closure());
      } else if (A.SingleEntryBrowserHistory__isFlutterEntry(new A._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy($event.state, true))) {
        t1 = _this._userProvidedRouteName;
        t1.toString;
        _this._userProvidedRouteName = null;
        $.$get$EnginePlatformDispatcher__instance().invokeOnPlatformMessage$3(_s18_, B.C_JSONMethodCodec.encodeMethodCall$1(new A.MethodCall("pushRoute", t1)), new A.SingleEntryBrowserHistory_onPopState_closure0());
      } else {
        _this._userProvidedRouteName = _this.get$currentPath();
        _this.urlStrategy.go$1(0, -1);
      }
    },
    _setupFlutterEntry$3$path$replace(strategy, path, replace) {
      var t1;
      if (path == null)
        path = this.get$currentPath();
      t1 = this._flutterState;
      if (replace)
        strategy.replaceState$3(0, t1, "flutter", path);
      else
        strategy.pushState$3(0, t1, "flutter", path);
    },
    _setupFlutterEntry$1(strategy) {
      return this._setupFlutterEntry$3$path$replace(strategy, null, false);
    },
    tearDown$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, t2;
      var $async$tearDown$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.dispose$0(0);
              if ($async$self._isTornDown || $async$self.urlStrategy == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self._isTornDown = true;
              t1 = $async$self.urlStrategy;
              $async$goto = 3;
              return A._asyncAwait(t1.go$1(0, -1), $async$tearDown$0);
            case 3:
              // returning from await.
              t2 = $async$self.get$currentState();
              t2.toString;
              t1.replaceState$3(0, J.$index$asx(type$.Map_dynamic_dynamic._as(t2), "state"), "flutter", $async$self.get$currentPath());
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$tearDown$0, $async$completer);
    },
    get$urlStrategy() {
      return this.urlStrategy;
    }
  };
  A.SingleEntryBrowserHistory_onPopState_closure.prototype = {
    call$1(_) {
    },
    $signature: 5
  };
  A.SingleEntryBrowserHistory_onPopState_closure0.prototype = {
    call$1(_) {
    },
    $signature: 5
  };
  A.JsUrlStrategy.prototype = {};
  A.UrlStrategy.prototype = {};
  A.HashUrlStrategy.prototype = {
    addPopStateListener$1(_, fn) {
      B.Window_methods.addEventListener$2(window, "popstate", fn);
      return new A.HashUrlStrategy_addPopStateListener_closure(this, fn);
    },
    getPath$0(_) {
      var path = window.location.hash;
      if (path.length === 0 || path === "#")
        return "/";
      return B.JSString_methods.substring$1(path, 1);
    },
    getState$0(_) {
      return new A._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(window.history.state, true);
    },
    prepareExternalUrl$1(_, internalUrl) {
      var t1, t2;
      if (internalUrl.length === 0) {
        t1 = window.location.pathname;
        t1.toString;
        t2 = window.location.search;
        t2.toString;
        t2 = t1 + t2;
        t1 = t2;
      } else
        t1 = "#" + internalUrl;
      return t1;
    },
    pushState$3(_, state, title, url) {
      var t1 = this.prepareExternalUrl$1(0, url);
      window.history.pushState(new A._StructuredCloneDart2Js([], []).walk$1(state), title, t1);
    },
    replaceState$3(_, state, title, url) {
      var t1 = this.prepareExternalUrl$1(0, url);
      window.history.replaceState(new A._StructuredCloneDart2Js([], []).walk$1(state), title, t1);
    },
    go$1(_, count) {
      window.history.go(count);
      return this._waitForPopState$0();
    },
    _waitForPopState$0() {
      var t1 = new A._Future($.Zone__current, type$._Future_void),
        unsubscribe = A._Cell$named("unsubscribe");
      unsubscribe.__late_helper$_value = this.addPopStateListener$1(0, new A.HashUrlStrategy__waitForPopState_closure(unsubscribe, new A._AsyncCompleter(t1, type$._AsyncCompleter_void)));
      return t1;
    }
  };
  A.HashUrlStrategy_addPopStateListener_closure.prototype = {
    call$0() {
      B.Window_methods.removeEventListener$2(window, "popstate", this.fn);
      return null;
    },
    $signature: 0
  };
  A.HashUrlStrategy__waitForPopState_closure.prototype = {
    call$1(_) {
      this.unsubscribe._readLocal$0().call$0();
      this.completer.complete$0(0);
    },
    $signature: 2
  };
  A.CustomUrlStrategy.prototype = {
    addPopStateListener$1(_, fn) {
      return J.addPopStateListener$1$x(this.delegate, fn);
    },
    getPath$0(_) {
      return J.getPath$0$x(this.delegate);
    },
    getState$0(_) {
      return J.getState$0$x(this.delegate);
    },
    pushState$3(_, state, title, url) {
      return J.pushState$3$x(this.delegate, state, title, url);
    },
    replaceState$3(_, state, title, url) {
      return J.replaceState$3$x(this.delegate, state, title, url);
    },
    go$1(_, count) {
      return J.go$1$x(this.delegate, count);
    }
  };
  A.PlatformLocation.prototype = {};
  A.BrowserPlatformLocation.prototype = {};
  A.EnginePictureRecorder.prototype = {
    beginRecording$1(_, bounds) {
      var t1, t2;
      this.__EnginePictureRecorder_cullRect = bounds;
      this._isRecording = true;
      t1 = A._lateReadCheck(bounds, "cullRect");
      t2 = A._setArrayType([], type$.JSArray_PaintCommand);
      return this.__engine$_canvas = new A.RecordingCanvas(new A._PaintBounds(t1, A._setArrayType([], type$.JSArray_Matrix4), A._setArrayType([], type$.JSArray_nullable_Rect), A.Matrix4$identity()), t2, new A.RenderStrategy());
    },
    get$isRecording() {
      return this._isRecording;
    },
    endRecording$0() {
      var t1, _this = this;
      if (!_this._isRecording)
        _this.beginRecording$1(0, B.Rect_aha);
      _this._isRecording = false;
      t1 = _this.__engine$_canvas;
      t1._pictureBounds = t1._paintBounds.computeBounds$0();
      t1._recordingEnded = true;
      t1 = _this.__engine$_canvas;
      A._lateReadCheck(_this.__EnginePictureRecorder_cullRect, "cullRect");
      return new A.EnginePicture(t1);
    }
  };
  A.EnginePicture.prototype = {
    dispose$0(_) {
    }
  };
  A.EnginePlatformDispatcher.prototype = {
    invokeOnMetricsChanged$0() {
      var t1 = this._onMetricsChanged;
      if (t1 != null)
        A.invoke(t1, this._onMetricsChangedZone);
    },
    invokeOnKeyData$2(data, callback) {
      var onKeyData = this._onKeyData;
      if (onKeyData != null)
        A.invoke(new A.EnginePlatformDispatcher_invokeOnKeyData_closure(callback, onKeyData, data), this._onKeyDataZone);
      else
        callback.call$1(false);
    },
    invokeOnPlatformMessage$3($name, data, callback) {
      var t1, bytes, methodNameLength, t2, methodName, index, channelNameLength, channelName, parts,
        _s143_ = "Invalid arguments for 'resize' method sent to dev.flutter/channel-buffers (arguments must be a two-element list, channel name and new capacity)",
        _s143_0 = "Invalid arguments for 'overflow' method sent to dev.flutter/channel-buffers (arguments must be a two-element list, channel name and flag state)";
      if ($name === "dev.flutter/channel-buffers")
        try {
          t1 = $.$get$channelBuffers();
          bytes = A.NativeUint8List_NativeUint8List$view(data.buffer, data.byteOffset, data.byteLength);
          if (bytes[0] === 7) {
            methodNameLength = bytes[1];
            if (methodNameLength >= 254)
              A.throwExpression(A.Exception_Exception("Unrecognized message sent to dev.flutter/channel-buffers (method name too long)"));
            t2 = 2 + methodNameLength;
            methodName = B.C_Utf8Codec.decode$1(0, B.NativeUint8List_methods.sublist$2(bytes, 2, t2));
            switch (methodName) {
              case "resize":
                if (bytes[t2] !== 12)
                  A.throwExpression(A.Exception_Exception(_s143_));
                index = t2 + 1;
                if (bytes[index] < 2)
                  A.throwExpression(A.Exception_Exception(_s143_));
                ++index;
                if (bytes[index] !== 7)
                  A.throwExpression(A.Exception_Exception("Invalid arguments for 'resize' method sent to dev.flutter/channel-buffers (first argument must be a string)"));
                ++index;
                channelNameLength = bytes[index];
                if (channelNameLength >= 254)
                  A.throwExpression(A.Exception_Exception("Invalid arguments for 'resize' method sent to dev.flutter/channel-buffers (channel name must be less than 254 characters long)"));
                ++index;
                t2 = index + channelNameLength;
                channelName = B.C_Utf8Codec.decode$1(0, B.NativeUint8List_methods.sublist$2(bytes, index, t2));
                if (bytes[t2] !== 3)
                  A.throwExpression(A.Exception_Exception("Invalid arguments for 'resize' method sent to dev.flutter/channel-buffers (second argument must be an integer in the range 0 to 2147483647)"));
                t1.resize$2(0, channelName, data.getUint32(t2 + 1, B.C_Endian === $.$get$Endian_host()));
                break;
              case "overflow":
                if (bytes[t2] !== 12)
                  A.throwExpression(A.Exception_Exception(_s143_0));
                index = t2 + 1;
                if (bytes[index] < 2)
                  A.throwExpression(A.Exception_Exception(_s143_0));
                ++index;
                if (bytes[index] !== 7)
                  A.throwExpression(A.Exception_Exception("Invalid arguments for 'overflow' method sent to dev.flutter/channel-buffers (first argument must be a string)"));
                ++index;
                channelNameLength = bytes[index];
                if (channelNameLength >= 254)
                  A.throwExpression(A.Exception_Exception("Invalid arguments for 'overflow' method sent to dev.flutter/channel-buffers (channel name must be less than 254 characters long)"));
                ++index;
                t1 = index + channelNameLength;
                B.C_Utf8Codec.decode$1(0, B.NativeUint8List_methods.sublist$2(bytes, index, t1));
                t1 = bytes[t1];
                if (t1 !== 1 && t1 !== 2)
                  A.throwExpression(A.Exception_Exception("Invalid arguments for 'overflow' method sent to dev.flutter/channel-buffers (second argument must be a boolean)"));
                break;
              default:
                A.throwExpression(A.Exception_Exception("Unrecognized method '" + methodName + "' sent to dev.flutter/channel-buffers"));
            }
          } else {
            parts = A._setArrayType(B.C_Utf8Codec.decode$1(0, bytes).split("\r"), type$.JSArray_String);
            if (parts.length === 3 && J.$eq$(parts[0], "resize"))
              t1.resize$2(0, parts[1], A.int_parse(parts[2], null));
            else
              A.throwExpression(A.Exception_Exception("Unrecognized message " + A.S(parts) + " sent to dev.flutter/channel-buffers."));
          }
        } finally {
          callback.call$1(null);
        }
      else
        $.$get$channelBuffers().push$3($name, data, callback);
    },
    _sendPlatformMessage$3($name, data, callback) {
      var decoded, cacheSizeInBytes, t1, url, $navigator, $arguments, label, primaryColor, theme, e, t2, _this = this;
      switch ($name) {
        case "flutter/skia":
          decoded = B.C_JSONMethodCodec.decodeMethodCall$1(data);
          switch (decoded.method) {
            case "Skia.setResourceCacheMaxBytes":
              if ($.$get$useCanvasKit()) {
                cacheSizeInBytes = A._asInt(decoded.$arguments);
                _this.get$rasterizer().toString;
                t1 = A.SurfaceFactory_instance().baseSurface;
                t1._skiaCacheBytes = cacheSizeInBytes;
                t1._syncCacheBytes$0();
              }
              _this.replyToPlatformMessage$2(callback, B.C_JSONMessageCodec.encodeMessage$1([A._setArrayType([true], type$.JSArray_bool)]));
              break;
          }
          return;
        case "flutter/assets":
          url = B.C_Utf8Codec.decode$1(0, A.NativeUint8List_NativeUint8List$view(data.buffer, 0, null));
          $._assetManager.load$1(0, url).then$1$2$onError(0, new A.EnginePlatformDispatcher__sendPlatformMessage_closure(_this, callback), new A.EnginePlatformDispatcher__sendPlatformMessage_closure0(_this, callback), type$.Null);
          return;
        case "flutter/platform":
          decoded = B.C_JSONMethodCodec.decodeMethodCall$1(data);
          switch (decoded.method) {
            case "SystemNavigator.pop":
              _this._windows.$index(0, 0).get$browserHistory().exit$0().then$1$1(0, new A.EnginePlatformDispatcher__sendPlatformMessage_closure1(_this, callback), type$.Null);
              return;
            case "HapticFeedback.vibrate":
              t1 = _this._getHapticFeedbackDuration$1(A._asStringQ(decoded.$arguments));
              $navigator = window.navigator;
              if ("vibrate" in $navigator)
                $navigator.vibrate(t1);
              _this.replyToPlatformMessage$2(callback, B.C_JSONMessageCodec.encodeMessage$1([true]));
              return;
            case "SystemChrome.setApplicationSwitcherDescription":
              $arguments = type$.Map_String_dynamic._as(decoded.$arguments);
              t1 = J.getInterceptor$asx($arguments);
              label = A._asStringQ(t1.$index($arguments, "label"));
              if (label == null)
                label = "";
              primaryColor = A._asIntQ(t1.$index($arguments, "primaryColor"));
              if (primaryColor == null)
                primaryColor = 4278190080;
              t1 = document;
              t1.title = label;
              theme = type$.nullable_MetaElement._as(t1.querySelector("#flutterweb-theme"));
              if (theme == null) {
                theme = t1.createElement("meta");
                theme.id = "flutterweb-theme";
                theme.name = "theme-color";
                t1.head.appendChild(theme);
              }
              t1 = A.colorToCssString(new A.Color(primaryColor >>> 0));
              t1.toString;
              theme.content = t1;
              _this.replyToPlatformMessage$2(callback, B.C_JSONMessageCodec.encodeMessage$1([true]));
              return;
            case "SystemChrome.setPreferredOrientations":
              $arguments = type$.List_dynamic._as(decoded.$arguments);
              t1 = $._flutterViewEmbedder;
              (t1 == null ? $._flutterViewEmbedder = A.FlutterViewEmbedder$() : t1).setPreferredOrientation$1($arguments).then$1$1(0, new A.EnginePlatformDispatcher__sendPlatformMessage_closure2(_this, callback), type$.Null);
              return;
            case "SystemSound.play":
              _this.replyToPlatformMessage$2(callback, B.C_JSONMessageCodec.encodeMessage$1([true]));
              return;
            case "Clipboard.setData":
              t1 = window.navigator.clipboard != null ? new A.ClipboardAPICopyStrategy() : new A.ExecCommandCopyStrategy();
              new A.ClipboardMessageHandler(t1, A.PasteFromClipboardStrategy_PasteFromClipboardStrategy()).setDataMethodCall$2(decoded, callback);
              return;
            case "Clipboard.getData":
              t1 = window.navigator.clipboard != null ? new A.ClipboardAPICopyStrategy() : new A.ExecCommandCopyStrategy();
              new A.ClipboardMessageHandler(t1, A.PasteFromClipboardStrategy_PasteFromClipboardStrategy()).getDataMethodCall$1(callback);
              return;
          }
          break;
        case "flutter/service_worker":
          t1 = window;
          e = document.createEvent("Event");
          e.initEvent("flutter-first-frame", true, true);
          t1.dispatchEvent(e);
          return;
        case "flutter/textinput":
          t1 = $.$get$textEditing();
          t1.get$channel(t1).handleTextInput$2(data, callback);
          return;
        case "flutter/mousecursor":
          decoded = B.C_StandardMethodCodec.decodeMethodCall$1(data);
          $arguments = type$.Map_dynamic_dynamic._as(decoded.$arguments);
          switch (decoded.method) {
            case "activateSystemCursor":
              $.MouseCursor__instance.toString;
              t1 = A._asStringQ(J.$index$asx($arguments, "kind"));
              t2 = $._flutterViewEmbedder;
              t2 = (t2 == null ? $._flutterViewEmbedder = A.FlutterViewEmbedder$() : t2)._glassPaneElement;
              t2.toString;
              t1 = B.Map_gFKQ1.$index(0, t1);
              A.setElementStyle(t2, "cursor", t1 == null ? "default" : t1);
              break;
          }
          return;
        case "flutter/web_test_e2e":
          _this.replyToPlatformMessage$2(callback, B.C_JSONMessageCodec.encodeMessage$1([A._handleWebTestEnd2EndMessage(B.C_JSONMethodCodec, data)]));
          return;
        case "flutter/platform_views":
          t1 = _this._platformViewMessageHandler;
          if (t1 == null)
            t1 = _this._platformViewMessageHandler = new A.PlatformViewMessageHandler($.$get$platformViewManager(), new A.EnginePlatformDispatcher__sendPlatformMessage_closure3());
          callback.toString;
          t1.handlePlatformViewCall$2(data, callback);
          return;
        case "flutter/accessibility":
          $.$get$accessibilityAnnouncements().handleMessage$2(B.C_StandardMessageCodec, data);
          _this.replyToPlatformMessage$2(callback, B.C_StandardMessageCodec.encodeMessage$1(true));
          return;
        case "flutter/navigation":
          _this._windows.$index(0, 0).handleNavigationMessage$1(data).then$1$1(0, new A.EnginePlatformDispatcher__sendPlatformMessage_closure4(_this, callback), type$.Null);
          return;
      }
      _this.replyToPlatformMessage$2(callback, null);
    },
    _getHapticFeedbackDuration$1(type) {
      switch (type) {
        case "HapticFeedbackType.lightImpact":
          return 10;
        case "HapticFeedbackType.mediumImpact":
          return 20;
        case "HapticFeedbackType.heavyImpact":
          return 30;
        case "HapticFeedbackType.selectionClick":
          return 10;
        default:
          return 50;
      }
    },
    scheduleFrame$0() {
      var t1 = $.scheduleFrameCallback;
      if (t1 == null)
        throw A.wrapException(A.Exception_Exception("scheduleFrameCallback must be initialized first."));
      t1.call$0();
    },
    render$2(scene, view) {
      var t1;
      if ($.$get$useCanvasKit()) {
        A.frameTimingsOnBuildFinish();
        A.frameTimingsOnRasterStart();
        type$.LayerScene._as(scene);
        this.get$rasterizer().draw$1(scene.layerTree);
      } else {
        type$.SurfaceScene._as(scene);
        t1 = $._flutterViewEmbedder;
        if (t1 == null)
          t1 = $._flutterViewEmbedder = A.FlutterViewEmbedder$();
        t1.renderScene$1(scene.webOnlyRootElement);
      }
      A.frameTimingsOnRasterFinish();
    },
    _addFontSizeObserver$0() {
      var t2,
        t1 = new (window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver)(A.convertDartClosureToJS(A._wrapBinaryZone(new A.EnginePlatformDispatcher__addFontSizeObserver_closure(this), type$.List_dynamic, type$.MutationObserver), 2));
      this._fontSizeObserver = t1;
      t2 = document.documentElement;
      t2.toString;
      B.MutationObserver_methods.observe$3$attributeFilter$attributes(t1, t2, A._setArrayType(["style"], type$.JSArray_String), true);
      $._hotRestartListeners.push(new A.EnginePlatformDispatcher__addFontSizeObserver_closure0(this));
    },
    _updatePlatformBrightness$1(value) {
      var _this = this,
        t1 = _this._configuration;
      if (t1.platformBrightness !== value) {
        _this._configuration = t1.copyWith$1$platformBrightness(value);
        A.invoke(null, null);
        A.invoke(_this._onPlatformBrightnessChanged, _this._onPlatformBrightnessChangedZone);
      }
    },
    _addBrightnessMediaQueryListener$0() {
      var t2, _this = this,
        t1 = _this._brightnessMediaQuery;
      _this._updatePlatformBrightness$1(t1.matches ? B.Brightness_0 : B.Brightness_1);
      t2 = new A.EnginePlatformDispatcher__addBrightnessMediaQueryListener_closure(_this);
      _this._brightnessMediaQueryListener = t2;
      B.MediaQueryList_methods.addListener$1(t1, t2);
      $._hotRestartListeners.push(new A.EnginePlatformDispatcher__addBrightnessMediaQueryListener_closure0(_this));
    },
    get$rasterizer() {
      var value = this.__EnginePlatformDispatcher_rasterizer;
      if (value === $)
        value = this.__EnginePlatformDispatcher_rasterizer = $.$get$useCanvasKit() ? new A.Rasterizer(new A.CompositorContext(), A._setArrayType([], type$.JSArray_of_void_Function)) : null;
      return value;
    },
    replyToPlatformMessage$2(callback, data) {
      A.Future_Future$delayed(B.Duration_0, type$.void).then$1$1(0, new A.EnginePlatformDispatcher_replyToPlatformMessage_closure(callback, data), type$.Null);
    }
  };
  A.EnginePlatformDispatcher_invokeOnKeyData_closure.prototype = {
    call$0() {
      return this.callback.call$1(this.onKeyData.call$1(this.data));
    },
    $signature: 0
  };
  A.EnginePlatformDispatcher__zonedPlatformMessageResponseCallback_closure.prototype = {
    call$1(data) {
      this.registrationZone.runUnaryGuarded$2(this.callback, data);
    },
    $signature: 5
  };
  A.EnginePlatformDispatcher__sendPlatformMessage_closure.prototype = {
    call$1(assetData) {
      this.$this.replyToPlatformMessage$2(this.callback, assetData);
    },
    $signature: 131
  };
  A.EnginePlatformDispatcher__sendPlatformMessage_closure0.prototype = {
    call$1(error) {
      $.$get$printWarning().call$1("Error while trying to load an asset: " + A.S(error));
      this.$this.replyToPlatformMessage$2(this.callback, null);
    },
    $signature: 4
  };
  A.EnginePlatformDispatcher__sendPlatformMessage_closure1.prototype = {
    call$1(_) {
      this.$this.replyToPlatformMessage$2(this.callback, B.C_JSONMessageCodec.encodeMessage$1([true]));
    },
    $signature: 24
  };
  A.EnginePlatformDispatcher__sendPlatformMessage_closure2.prototype = {
    call$1(success) {
      this.$this.replyToPlatformMessage$2(this.callback, B.C_JSONMessageCodec.encodeMessage$1([success]));
    },
    $signature: 35
  };
  A.EnginePlatformDispatcher__sendPlatformMessage_closure3.prototype = {
    call$1($content) {
      var t1 = $._flutterViewEmbedder;
      (t1 == null ? $._flutterViewEmbedder = A.FlutterViewEmbedder$() : t1)._glassPaneElement.appendChild($content);
    },
    $signature: 132
  };
  A.EnginePlatformDispatcher__sendPlatformMessage_closure4.prototype = {
    call$1(handled) {
      var t1 = this.callback;
      if (handled)
        this.$this.replyToPlatformMessage$2(t1, B.C_JSONMessageCodec.encodeMessage$1([true]));
      else if (t1 != null)
        t1.call$1(null);
    },
    $signature: 35
  };
  A.EnginePlatformDispatcher__addFontSizeObserver_closure.prototype = {
    call$2(mutations, _) {
      var t1, t2, t3, record, t4, fontSize, newTextScaleFactor;
      for (t1 = J.get$iterator$ax(mutations), t2 = type$.MutationRecord, t3 = this.$this; t1.moveNext$0();) {
        record = t2._as(t1.get$current(t1));
        if (record.type === "attributes" && record.attributeName === "style") {
          t4 = document.documentElement;
          t4.toString;
          fontSize = A.parseFontSize(t4);
          newTextScaleFactor = (fontSize == null ? 16 : fontSize) / 16;
          t4 = t3._configuration;
          if (t4.textScaleFactor !== newTextScaleFactor) {
            t3._configuration = t4.copyWith$1$textScaleFactor(newTextScaleFactor);
            A.invoke(null, null);
            A.invoke(t3._onTextScaleFactorChanged, t3._onTextScaleFactorChangedZone);
          }
        }
      }
    },
    $signature: 133
  };
  A.EnginePlatformDispatcher__addFontSizeObserver_closure0.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._fontSizeObserver;
      if (t2 != null)
        t2.disconnect();
      t1._fontSizeObserver = null;
    },
    $signature: 0
  };
  A.EnginePlatformDispatcher__addBrightnessMediaQueryListener_closure.prototype = {
    call$1($event) {
      var t1 = type$.MediaQueryListEvent._as($event).matches;
      t1.toString;
      t1 = t1 ? B.Brightness_0 : B.Brightness_1;
      this.$this._updatePlatformBrightness$1(t1);
    },
    $signature: 2
  };
  A.EnginePlatformDispatcher__addBrightnessMediaQueryListener_closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      B.MediaQueryList_methods.removeListener$1(t1._brightnessMediaQuery, t1._brightnessMediaQueryListener);
      t1._brightnessMediaQueryListener = null;
    },
    $signature: 0
  };
  A.EnginePlatformDispatcher_replyToPlatformMessage_closure.prototype = {
    call$1(_) {
      var t1 = this.callback;
      if (t1 != null)
        t1.call$1(this.data);
    },
    $signature: 24
  };
  A.invoke2_closure.prototype = {
    call$0() {
      this.callback.call$2(this.arg1, this.arg2);
    },
    $signature: 0
  };
  A.invoke3_closure.prototype = {
    call$0() {
      var _this = this;
      _this.callback.call$3(_this.arg1, _this.arg2, _this.arg3);
    },
    $signature: 0
  };
  A.PlatformViewManager.prototype = {
    renderContent$3(viewType, viewId, params) {
      var slotName = "flt-pv-slot-" + viewId;
      this._viewIdToType.$indexSet(0, viewId, viewType);
      return this.__engine$_contents.putIfAbsent$2(0, viewId, new A.PlatformViewManager_renderContent_closure(this, slotName, viewType, viewId, params));
    },
    _safelyRemoveSlottedElement$1(element) {
      var t1, tombstoneName, slot;
      if (element == null)
        return;
      t1 = $.$get$_browserEngine();
      if (t1 !== B.BrowserEngine_1) {
        J.remove$0$ax(element);
        return;
      }
      tombstoneName = "tombstone-" + A.S(element.getAttribute("slot"));
      slot = document.createElement("slot");
      t1 = slot.style;
      t1.display = "none";
      slot.setAttribute("name", tombstoneName);
      t1 = $._flutterViewEmbedder;
      (t1 == null ? $._flutterViewEmbedder = A.FlutterViewEmbedder$() : t1)._glassPaneShadow.append$1(0, slot);
      element.setAttribute("slot", tombstoneName);
      J.remove$0$ax(element);
      J.remove$0$ax(slot);
    },
    isInvisible$1(viewId) {
      var viewType = this._viewIdToType.$index(0, viewId);
      return viewType != null && this._invisibleViews.contains$1(0, viewType);
    }
  };
  A.PlatformViewManager_renderContent_closure.prototype = {
    call$0() {
      var t1, t2, $content, t3, _this = this,
        wrapper = document.createElement("flt-platform-view");
      wrapper.setAttribute("slot", _this.slotName);
      t1 = _this.viewType;
      t2 = _this.$this._factories.$index(0, t1);
      t2.toString;
      $content = A._Cell$named("content");
      $content.__late_helper$_value = type$.Element_Function_int._as(t2).call$1(_this.viewId);
      t2 = $content._readLocal$0();
      if (t2.style.height.length === 0) {
        $.$get$printWarning().call$1("Height of Platform View type: [" + t1 + "] may not be set. Defaulting to `height: 100%`.\nSet `style.height` to any appropriate value to stop this message.");
        t3 = t2.style;
        t3.height = "100%";
      }
      if (t2.style.width.length === 0) {
        $.$get$printWarning().call$1("Width of Platform View type: [" + t1 + "] may not be set. Defaulting to `width: 100%`.\nSet `style.width` to any appropriate value to stop this message.");
        t1 = t2.style;
        t1.width = "100%";
      }
      wrapper.appendChild($content._readLocal$0());
      return wrapper;
    },
    $signature: 134
  };
  A.PlatformViewMessageHandler.prototype = {
    _createPlatformView$2(methodCall, callback) {
      var args = type$.Map_dynamic_dynamic._as(methodCall.$arguments),
        t1 = J.getInterceptor$asx(args),
        viewId = A._asInt(t1.$index(args, "id")),
        viewType = A._asString(t1.$index(args, "viewType"));
      t1 = this._contentManager;
      if (!t1._factories.containsKey$1(0, viewType)) {
        callback.call$1(B.C_StandardMethodCodec.encodeErrorEnvelope$3$code$details$message("unregistered_view_type", "unregistered view type: " + viewType, "trying to create a view with an unregistered type"));
        return;
      }
      if (t1.__engine$_contents.containsKey$1(0, viewId)) {
        callback.call$1(B.C_StandardMethodCodec.encodeErrorEnvelope$3$code$details$message("recreating_view", "view id: " + viewId, "trying to create an already created view"));
        return;
      }
      this._contentHandler.call$1(t1.renderContent$3(viewType, viewId, args));
      callback.call$1(B.C_StandardMethodCodec.encodeSuccessEnvelope$1(null));
    },
    handlePlatformViewCall$2(data, callback) {
      var t1,
        decoded = B.C_StandardMethodCodec.decodeMethodCall$1(data);
      switch (decoded.method) {
        case "create":
          this._createPlatformView$2(decoded, callback);
          return;
        case "dispose":
          t1 = this._contentManager;
          t1._safelyRemoveSlottedElement$1(t1.__engine$_contents.remove$1(0, A._asInt(decoded.$arguments)));
          callback.call$1(B.C_StandardMethodCodec.encodeSuccessEnvelope$1(null));
          return;
      }
      callback.call$1(null);
    }
  };
  A.PointerBinding.prototype = {
    _createAdapter$0() {
      var t1, _this = this;
      if ("PointerEvent" in window) {
        t1 = new A._PointerAdapter(A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$._ButtonSanitizer), _this.glassPaneElement, _this.get$_onPointerData(), _this._pointerDataConverter);
        t1.setup$0();
        return t1;
      }
      if ("TouchEvent" in window) {
        t1 = new A._TouchAdapter(A.LinkedHashSet_LinkedHashSet$_empty(type$.int), _this.glassPaneElement, _this.get$_onPointerData(), _this._pointerDataConverter);
        t1.setup$0();
        return t1;
      }
      if ("MouseEvent" in window) {
        t1 = new A._MouseAdapter(new A._ButtonSanitizer(), _this.glassPaneElement, _this.get$_onPointerData(), _this._pointerDataConverter);
        t1.setup$0();
        return t1;
      }
      throw A.wrapException(A.UnsupportedError$("This browser does not support pointer, touch, or mouse events."));
    },
    _onPointerData$1(data) {
      var t1 = A._setArrayType(data.slice(0), A._arrayInstanceType(data)),
        t2 = $.$get$EnginePlatformDispatcher__instance();
      A.invoke1(t2._onPointerDataPacket, t2._onPointerDataPacketZone, new A.PointerDataPacket(t1));
    }
  };
  A.PointerSupportDetector.prototype = {
    toString$0(_) {
      return "pointers:" + ("PointerEvent" in window) + ", touch:" + ("TouchEvent" in window) + ", mouse:" + ("MouseEvent" in window);
    }
  };
  A._BaseAdapter.prototype = {
    addEventListener$3$acceptOutsideGlasspane(_, eventName, handler, acceptOutsideGlasspane) {
      var t1 = new A._BaseAdapter_addEventListener_loggedHandler(this, acceptOutsideGlasspane, handler);
      $._BaseAdapter__listeners.$indexSet(0, eventName, t1);
      B.Window_methods.addEventListener$3(window, eventName, t1, true);
    },
    addEventListener$2($receiver, eventName, handler) {
      return this.addEventListener$3$acceptOutsideGlasspane($receiver, eventName, handler, false);
    }
  };
  A._BaseAdapter_addEventListener_loggedHandler.prototype = {
    call$1($event) {
      var t1;
      if (!this.acceptOutsideGlasspane && !this.$this.glassPaneElement.contains(type$.nullable_Node._as(J.get$target$x($event))))
        return null;
      t1 = $.EngineSemanticsOwner__instance;
      if ((t1 == null ? $.EngineSemanticsOwner__instance = A.EngineSemanticsOwner$_() : t1).receiveGlobalEvent$1($event))
        this.handler.call$1($event);
    },
    $signature: 13
  };
  A._WheelEventListenerMixin.prototype = {
    _addWheelEventListener$1(handler) {
      var eventOptions = A.createPlainJsObject(A.LinkedHashMap_LinkedHashMap$_literal(["passive", false], type$.String, type$.nullable_Object)),
        jsHandler = A.allowInterop(new A._WheelEventListenerMixin__addWheelEventListener_closure(handler));
      $._BaseAdapter__nativeListeners.$indexSet(0, "wheel", jsHandler);
      A.callMethod(this.glassPaneElement, "addEventListener", ["wheel", jsHandler, eventOptions]);
    },
    _handleWheelEvent$1(e) {
      var deltaX, deltaY, t1, probe, t2, fontSize, res, data, t3, t4, t5, t6;
      type$.WheelEvent._as(e);
      deltaX = B.WheelEvent_methods.get$deltaX(e);
      deltaY = B.WheelEvent_methods.get$deltaY(e);
      switch (B.WheelEvent_methods.get$deltaMode(e)) {
        case 1:
          t1 = $._WheelEventListenerMixin__defaultScrollLineHeight;
          if (t1 == null) {
            t1 = document;
            probe = t1.createElement("div");
            t2 = probe.style;
            t2.fontSize = "initial";
            t2.display = "none";
            t1.body.appendChild(probe);
            fontSize = B.DivElement_methods.getComputedStyle$0(probe).fontSize;
            if (B.JSString_methods.contains$1(fontSize, "px"))
              res = A.Primitives_parseDouble(A.stringReplaceAllUnchecked(fontSize, "px", ""));
            else
              res = null;
            B.DivElement_methods.remove$0(probe);
            t1 = $._WheelEventListenerMixin__defaultScrollLineHeight = res == null ? 16 : res / 4;
          }
          deltaX *= t1;
          deltaY *= t1;
          break;
        case 2:
          t1 = $.$get$window();
          deltaX *= t1.get$physicalSize()._dx;
          deltaY *= t1.get$physicalSize()._dy;
          break;
        case 0:
        default:
          break;
      }
      data = A._setArrayType([], type$.JSArray_PointerData);
      t1 = e.timeStamp;
      t1.toString;
      t1 = A._BaseAdapter__eventTimeStampToDuration(t1);
      t2 = e.clientX;
      e.clientY;
      t3 = $.$get$window();
      t4 = t3._debugDevicePixelRatio;
      if (t4 == null)
        t4 = A.EnginePlatformDispatcher_browserDevicePixelRatio();
      e.clientX;
      t5 = e.clientY;
      t3 = t3._debugDevicePixelRatio;
      if (t3 == null)
        t3 = A.EnginePlatformDispatcher_browserDevicePixelRatio();
      t6 = e.buttons;
      t6.toString;
      this._pointerDataConverter.convert$14$buttons$change$device$kind$physicalX$physicalY$pressure$pressureMax$pressureMin$scrollDeltaX$scrollDeltaY$signalKind$timeStamp(data, t6, B.PointerChange_3, -1, B.PointerDeviceKind_1, t2 * t4, t5 * t3, 1, 1, 0, deltaX, deltaY, B.PointerSignalKind_1, t1);
      this.__engine$_callback.call$1(data);
      if (e.getModifierState("Control")) {
        t1 = $.$get$_operatingSystem();
        if (t1 !== B.OperatingSystem_4)
          t1 = t1 !== B.OperatingSystem_0;
        else
          t1 = false;
      } else
        t1 = false;
      if (t1)
        return;
      e.preventDefault();
    }
  };
  A._WheelEventListenerMixin__addWheelEventListener_closure.prototype = {
    call$1($event) {
      return this.handler.call$1($event);
    },
    $signature: 13
  };
  A._SanitizedDetails.prototype = {
    toString$0(_) {
      return A.getRuntimeType(this).toString$0(0) + "(change: " + this.change.toString$0(0) + ", buttons: " + this.buttons + ")";
    }
  };
  A._ButtonSanitizer.prototype = {
    sanitizeDownEvent$2$button$buttons(button, buttons) {
      var t1;
      if (this._pressedButtons !== 0)
        return this.sanitizeMoveEvent$1$buttons(buttons);
      t1 = (buttons === 0 && button > -1 ? A.convertButtonToButtons(button) : buttons) & 1073741823;
      this._pressedButtons = t1;
      return new A._SanitizedDetails(B.PointerChange_4, t1);
    },
    sanitizeMoveEvent$1$buttons(buttons) {
      var newPressedButtons = buttons & 1073741823,
        t1 = this._pressedButtons;
      if (t1 === 0 && newPressedButtons !== 0)
        return new A._SanitizedDetails(B.PointerChange_3, t1);
      this._pressedButtons = newPressedButtons;
      return new A._SanitizedDetails(newPressedButtons === 0 ? B.PointerChange_3 : B.PointerChange_5, newPressedButtons);
    },
    sanitizeMissingRightClickUp$1$buttons(buttons) {
      if (this._pressedButtons !== 0 && (buttons & 1073741823) === 0) {
        this._pressedButtons = 0;
        return new A._SanitizedDetails(B.PointerChange_6, 0);
      }
      return null;
    },
    sanitizeUpEvent$1$buttons(buttons) {
      var t1;
      if (this._pressedButtons === 0)
        return null;
      t1 = this._pressedButtons = (buttons == null ? 0 : buttons) & 1073741823;
      if (t1 === 0)
        return new A._SanitizedDetails(B.PointerChange_6, t1);
      else
        return new A._SanitizedDetails(B.PointerChange_5, t1);
    }
  };
  A._PointerAdapter.prototype = {
    _ensureSanitizer$1(device) {
      return this._sanitizers.putIfAbsent$2(0, device, new A._PointerAdapter__ensureSanitizer_closure());
    },
    _removePointerIfUnhoverable$1($event) {
      if ($event.pointerType === "touch")
        this._sanitizers.remove$1(0, $event.pointerId);
    },
    _addPointerEventListener$3$acceptOutsideGlasspane(eventName, handler, acceptOutsideGlasspane) {
      this.addEventListener$3$acceptOutsideGlasspane(0, eventName, new A._PointerAdapter__addPointerEventListener_closure(handler), acceptOutsideGlasspane);
    },
    _addPointerEventListener$2(eventName, handler) {
      return this._addPointerEventListener$3$acceptOutsideGlasspane(eventName, handler, false);
    },
    setup$0() {
      var _this = this;
      _this._addPointerEventListener$2("pointerdown", new A._PointerAdapter_setup_closure(_this));
      _this._addPointerEventListener$3$acceptOutsideGlasspane("pointermove", new A._PointerAdapter_setup_closure0(_this), true);
      _this._addPointerEventListener$3$acceptOutsideGlasspane("pointerup", new A._PointerAdapter_setup_closure1(_this), true);
      _this._addPointerEventListener$2("pointercancel", new A._PointerAdapter_setup_closure2(_this));
      _this._addWheelEventListener$1(new A._PointerAdapter_setup_closure3(_this));
    },
    _convertEventsToPointerData$3$data$details$event(data, details, $event) {
      var kind, t2, timeStamp, pressure, t3, t4, t5, t6, t7,
        t1 = $event.pointerType;
      t1.toString;
      kind = this._pointerTypeToDeviceKind$1(t1);
      t1 = $event.tiltX;
      t1.toString;
      t2 = $event.tiltY;
      t2.toString;
      if (!(Math.abs(t1) > Math.abs(t2)))
        t1 = t2;
      t2 = $event.timeStamp;
      t2.toString;
      timeStamp = A._BaseAdapter__eventTimeStampToDuration(t2);
      pressure = $event.pressure;
      t2 = this._getPointerId$1($event);
      t3 = $event.clientX;
      $event.clientY;
      t4 = $.$get$window();
      t5 = t4._debugDevicePixelRatio;
      if (t5 == null)
        t5 = A.EnginePlatformDispatcher_browserDevicePixelRatio();
      $event.clientX;
      t6 = $event.clientY;
      t4 = t4._debugDevicePixelRatio;
      if (t4 == null)
        t4 = A.EnginePlatformDispatcher_browserDevicePixelRatio();
      t7 = pressure == null ? 0 : pressure;
      this._pointerDataConverter.convert$13$buttons$change$device$kind$physicalX$physicalY$pressure$pressureMax$pressureMin$signalKind$tilt$timeStamp(data, details.buttons, details.change, t2, kind, t3 * t5, t6 * t4, t7, 1, 0, B.PointerSignalKind_0, t1 / 180 * 3.141592653589793, timeStamp);
    },
    _expandEvents$1($event) {
      var coalescedEvents;
      if ("getCoalescedEvents" in $event) {
        coalescedEvents = J.cast$1$0$ax($event.getCoalescedEvents(), type$.PointerEvent);
        if (!coalescedEvents.get$isEmpty(coalescedEvents))
          return coalescedEvents;
      }
      return A._setArrayType([$event], type$.JSArray_PointerEvent);
    },
    _pointerTypeToDeviceKind$1(pointerType) {
      switch (pointerType) {
        case "mouse":
          return B.PointerDeviceKind_1;
        case "pen":
          return B.PointerDeviceKind_2;
        case "touch":
          return B.PointerDeviceKind_0;
        default:
          return B.PointerDeviceKind_4;
      }
    },
    _getPointerId$1($event) {
      var t1 = $event.pointerType;
      t1.toString;
      if (this._pointerTypeToDeviceKind$1(t1) === B.PointerDeviceKind_1)
        t1 = -1;
      else {
        t1 = $event.pointerId;
        t1.toString;
      }
      return t1;
    }
  };
  A._PointerAdapter__ensureSanitizer_closure.prototype = {
    call$0() {
      return new A._ButtonSanitizer();
    },
    $signature: 157
  };
  A._PointerAdapter__addPointerEventListener_closure.prototype = {
    call$1($event) {
      return this.handler.call$1(type$.PointerEvent._as($event));
    },
    $signature: 13
  };
  A._PointerAdapter_setup_closure.prototype = {
    call$1($event) {
      var up, t3,
        t1 = this.$this,
        device = t1._getPointerId$1($event),
        pointerData = A._setArrayType([], type$.JSArray_PointerData),
        sanitizer = t1._ensureSanitizer$1(device),
        t2 = $event.buttons;
      t2.toString;
      up = sanitizer.sanitizeMissingRightClickUp$1$buttons(t2);
      if (up != null)
        t1._convertEventsToPointerData$3$data$details$event(pointerData, up, $event);
      t2 = $event.button;
      t3 = $event.buttons;
      t3.toString;
      t1._convertEventsToPointerData$3$data$details$event(pointerData, sanitizer.sanitizeDownEvent$2$button$buttons(t2, t3), $event);
      t1.__engine$_callback.call$1(pointerData);
    },
    $signature: 25
  };
  A._PointerAdapter_setup_closure0.prototype = {
    call$1($event) {
      var t2, t3, t4, up,
        t1 = this.$this,
        sanitizer = t1._ensureSanitizer$1(t1._getPointerId$1($event)),
        pointerData = A._setArrayType([], type$.JSArray_PointerData);
      for (t2 = J.get$iterator$ax(t1._expandEvents$1($event)); t2.moveNext$0();) {
        t3 = t2.get$current(t2);
        t4 = t3.buttons;
        t4.toString;
        up = sanitizer.sanitizeMissingRightClickUp$1$buttons(t4);
        if (up != null)
          t1._convertEventsToPointerData$3$data$details$event(pointerData, up, t3);
        t4 = t3.buttons;
        t4.toString;
        t1._convertEventsToPointerData$3$data$details$event(pointerData, sanitizer.sanitizeMoveEvent$1$buttons(t4), t3);
      }
      t1.__engine$_callback.call$1(pointerData);
    },
    $signature: 25
  };
  A._PointerAdapter_setup_closure1.prototype = {
    call$1($event) {
      var details,
        t1 = this.$this,
        device = t1._getPointerId$1($event),
        pointerData = A._setArrayType([], type$.JSArray_PointerData),
        t2 = t1._sanitizers.$index(0, device);
      t2.toString;
      details = t2.sanitizeUpEvent$1$buttons($event.buttons);
      t1._removePointerIfUnhoverable$1($event);
      if (details != null) {
        t1._convertEventsToPointerData$3$data$details$event(pointerData, details, $event);
        t1.__engine$_callback.call$1(pointerData);
      }
    },
    $signature: 25
  };
  A._PointerAdapter_setup_closure2.prototype = {
    call$1($event) {
      var t1 = this.$this,
        device = t1._getPointerId$1($event),
        pointerData = A._setArrayType([], type$.JSArray_PointerData),
        t2 = t1._sanitizers.$index(0, device);
      t2.toString;
      t2._pressedButtons = 0;
      t1._removePointerIfUnhoverable$1($event);
      t1._convertEventsToPointerData$3$data$details$event(pointerData, new A._SanitizedDetails(B.PointerChange_0, 0), $event);
      t1.__engine$_callback.call$1(pointerData);
    },
    $signature: 25
  };
  A._PointerAdapter_setup_closure3.prototype = {
    call$1($event) {
      this.$this._handleWheelEvent$1($event);
    },
    $signature: 2
  };
  A._TouchAdapter.prototype = {
    _addTouchEventListener$2(eventName, handler) {
      this.addEventListener$2(0, eventName, new A._TouchAdapter__addTouchEventListener_closure(handler));
    },
    setup$0() {
      var _this = this;
      _this._addTouchEventListener$2("touchstart", new A._TouchAdapter_setup_closure(_this));
      _this._addTouchEventListener$2("touchmove", new A._TouchAdapter_setup_closure0(_this));
      _this._addTouchEventListener$2("touchend", new A._TouchAdapter_setup_closure1(_this));
      _this._addTouchEventListener$2("touchcancel", new A._TouchAdapter_setup_closure2(_this));
    },
    _convertEventToPointerData$5$change$data$pressed$timeStamp$touch(change, data, pressed, timeStamp, touch) {
      var t2, t3, t4, t5, t6,
        t1 = touch.identifier;
      t1.toString;
      t2 = B.JSNumber_methods.round$0(touch.clientX);
      B.JSNumber_methods.round$0(touch.clientY);
      t3 = $.$get$window();
      t4 = t3._debugDevicePixelRatio;
      if (t4 == null)
        t4 = A.EnginePlatformDispatcher_browserDevicePixelRatio();
      B.JSNumber_methods.round$0(touch.clientX);
      t5 = B.JSNumber_methods.round$0(touch.clientY);
      t3 = t3._debugDevicePixelRatio;
      if (t3 == null)
        t3 = A.EnginePlatformDispatcher_browserDevicePixelRatio();
      t6 = pressed ? 1 : 0;
      this._pointerDataConverter.convert$12$buttons$change$device$kind$physicalX$physicalY$pressure$pressureMax$pressureMin$signalKind$timeStamp(data, t6, change, t1, B.PointerDeviceKind_0, t2 * t4, t5 * t3, 1, 1, 0, B.PointerSignalKind_0, timeStamp);
    }
  };
  A._TouchAdapter__addTouchEventListener_closure.prototype = {
    call$1($event) {
      return this.handler.call$1(type$.TouchEvent._as($event));
    },
    $signature: 13
  };
  A._TouchAdapter_setup_closure.prototype = {
    call$1($event) {
      var timeStamp, pointerData, t2, t3, t4, _i, touch, t5,
        t1 = $event.timeStamp;
      t1.toString;
      timeStamp = A._BaseAdapter__eventTimeStampToDuration(t1);
      pointerData = A._setArrayType([], type$.JSArray_PointerData);
      for (t1 = $event.changedTouches, t2 = t1.length, t3 = this.$this, t4 = t3._pressedTouches, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        touch = t1[_i];
        t5 = touch.identifier;
        t5.toString;
        if (!t4.contains$1(0, t5)) {
          t5 = touch.identifier;
          t5.toString;
          t4.add$1(0, t5);
          t3._convertEventToPointerData$5$change$data$pressed$timeStamp$touch(B.PointerChange_4, pointerData, true, timeStamp, touch);
        }
      }
      t3.__engine$_callback.call$1(pointerData);
    },
    $signature: 26
  };
  A._TouchAdapter_setup_closure0.prototype = {
    call$1($event) {
      var t1, timeStamp, pointerData, t2, t3, t4, _i, touch, t5;
      $event.preventDefault();
      t1 = $event.timeStamp;
      t1.toString;
      timeStamp = A._BaseAdapter__eventTimeStampToDuration(t1);
      pointerData = A._setArrayType([], type$.JSArray_PointerData);
      for (t1 = $event.changedTouches, t2 = t1.length, t3 = this.$this, t4 = t3._pressedTouches, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        touch = t1[_i];
        t5 = touch.identifier;
        t5.toString;
        if (t4.contains$1(0, t5))
          t3._convertEventToPointerData$5$change$data$pressed$timeStamp$touch(B.PointerChange_5, pointerData, true, timeStamp, touch);
      }
      t3.__engine$_callback.call$1(pointerData);
    },
    $signature: 26
  };
  A._TouchAdapter_setup_closure1.prototype = {
    call$1($event) {
      var t1, timeStamp, pointerData, t2, t3, t4, _i, touch, t5;
      $event.preventDefault();
      t1 = $event.timeStamp;
      t1.toString;
      timeStamp = A._BaseAdapter__eventTimeStampToDuration(t1);
      pointerData = A._setArrayType([], type$.JSArray_PointerData);
      for (t1 = $event.changedTouches, t2 = t1.length, t3 = this.$this, t4 = t3._pressedTouches, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        touch = t1[_i];
        t5 = touch.identifier;
        t5.toString;
        if (t4.contains$1(0, t5)) {
          t5 = touch.identifier;
          t5.toString;
          t4.remove$1(0, t5);
          t3._convertEventToPointerData$5$change$data$pressed$timeStamp$touch(B.PointerChange_6, pointerData, false, timeStamp, touch);
        }
      }
      t3.__engine$_callback.call$1(pointerData);
    },
    $signature: 26
  };
  A._TouchAdapter_setup_closure2.prototype = {
    call$1($event) {
      var timeStamp, pointerData, t2, t3, t4, _i, touch, t5,
        t1 = $event.timeStamp;
      t1.toString;
      timeStamp = A._BaseAdapter__eventTimeStampToDuration(t1);
      pointerData = A._setArrayType([], type$.JSArray_PointerData);
      for (t1 = $event.changedTouches, t2 = t1.length, t3 = this.$this, t4 = t3._pressedTouches, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        touch = t1[_i];
        t5 = touch.identifier;
        t5.toString;
        if (t4.contains$1(0, t5)) {
          t5 = touch.identifier;
          t5.toString;
          t4.remove$1(0, t5);
          t3._convertEventToPointerData$5$change$data$pressed$timeStamp$touch(B.PointerChange_0, pointerData, false, timeStamp, touch);
        }
      }
      t3.__engine$_callback.call$1(pointerData);
    },
    $signature: 26
  };
  A._MouseAdapter.prototype = {
    _addMouseEventListener$3$acceptOutsideGlasspane(eventName, handler, acceptOutsideGlasspane) {
      this.addEventListener$3$acceptOutsideGlasspane(0, eventName, new A._MouseAdapter__addMouseEventListener_closure(handler), acceptOutsideGlasspane);
    },
    _addMouseEventListener$2(eventName, handler) {
      return this._addMouseEventListener$3$acceptOutsideGlasspane(eventName, handler, false);
    },
    setup$0() {
      var _this = this;
      _this._addMouseEventListener$2("mousedown", new A._MouseAdapter_setup_closure(_this));
      _this._addMouseEventListener$3$acceptOutsideGlasspane("mousemove", new A._MouseAdapter_setup_closure0(_this), true);
      _this._addMouseEventListener$3$acceptOutsideGlasspane("mouseup", new A._MouseAdapter_setup_closure1(_this), true);
      _this._addWheelEventListener$1(new A._MouseAdapter_setup_closure2(_this));
    },
    _convertEventsToPointerData$3$data$details$event(data, details, $event) {
      var t2, t3, t4, t5,
        t1 = $event.timeStamp;
      t1.toString;
      t1 = A._BaseAdapter__eventTimeStampToDuration(t1);
      t2 = $event.clientX;
      $event.clientY;
      t3 = $.$get$window();
      t4 = t3._debugDevicePixelRatio;
      if (t4 == null)
        t4 = A.EnginePlatformDispatcher_browserDevicePixelRatio();
      $event.clientX;
      t5 = $event.clientY;
      t3 = t3._debugDevicePixelRatio;
      if (t3 == null)
        t3 = A.EnginePlatformDispatcher_browserDevicePixelRatio();
      this._pointerDataConverter.convert$12$buttons$change$device$kind$physicalX$physicalY$pressure$pressureMax$pressureMin$signalKind$timeStamp(data, details.buttons, details.change, -1, B.PointerDeviceKind_1, t2 * t4, t5 * t3, 1, 1, 0, B.PointerSignalKind_0, t1);
    }
  };
  A._MouseAdapter__addMouseEventListener_closure.prototype = {
    call$1($event) {
      return this.handler.call$1(type$.MouseEvent._as($event));
    },
    $signature: 13
  };
  A._MouseAdapter_setup_closure.prototype = {
    call$1($event) {
      var up, t4,
        pointerData = A._setArrayType([], type$.JSArray_PointerData),
        t1 = this.$this,
        t2 = t1._sanitizer,
        t3 = $event.buttons;
      t3.toString;
      up = t2.sanitizeMissingRightClickUp$1$buttons(t3);
      if (up != null)
        t1._convertEventsToPointerData$3$data$details$event(pointerData, up, $event);
      t3 = $event.button;
      t4 = $event.buttons;
      t4.toString;
      t1._convertEventsToPointerData$3$data$details$event(pointerData, t2.sanitizeDownEvent$2$button$buttons(t3, t4), $event);
      t1.__engine$_callback.call$1(pointerData);
    },
    $signature: 36
  };
  A._MouseAdapter_setup_closure0.prototype = {
    call$1($event) {
      var up,
        pointerData = A._setArrayType([], type$.JSArray_PointerData),
        t1 = this.$this,
        t2 = t1._sanitizer,
        t3 = $event.buttons;
      t3.toString;
      up = t2.sanitizeMissingRightClickUp$1$buttons(t3);
      if (up != null)
        t1._convertEventsToPointerData$3$data$details$event(pointerData, up, $event);
      t3 = $event.buttons;
      t3.toString;
      t1._convertEventsToPointerData$3$data$details$event(pointerData, t2.sanitizeMoveEvent$1$buttons(t3), $event);
      t1.__engine$_callback.call$1(pointerData);
    },
    $signature: 36
  };
  A._MouseAdapter_setup_closure1.prototype = {
    call$1($event) {
      var pointerData = A._setArrayType([], type$.JSArray_PointerData),
        t1 = this.$this,
        sanitizedDetails = t1._sanitizer.sanitizeUpEvent$1$buttons($event.buttons);
      if (sanitizedDetails != null) {
        t1._convertEventsToPointerData$3$data$details$event(pointerData, sanitizedDetails, $event);
        t1.__engine$_callback.call$1(pointerData);
      }
    },
    $signature: 36
  };
  A._MouseAdapter_setup_closure2.prototype = {
    call$1($event) {
      this.$this._handleWheelEvent$1($event);
    },
    $signature: 2
  };
  A._PointerState.prototype = {};
  A.PointerDataConverter.prototype = {
    _ensureStateForPointer$3(device, x, y) {
      return this._pointers.putIfAbsent$2(0, device, new A.PointerDataConverter__ensureStateForPointer_closure(x, y));
    },
    _generateCompletePointerData$24$buttons$change$device$distance$distanceMax$kind$obscured$orientation$physicalX$physicalY$platformData$pressure$pressureMax$pressureMin$radiusMajor$radiusMax$radiusMin$radiusMinor$scrollDeltaX$scrollDeltaY$signalKind$size$tilt$timeStamp(buttons, change, device, distance, distanceMax, kind, obscured, orientation, physicalX, physicalY, platformData, pressure, pressureMax, pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, scrollDeltaX, scrollDeltaY, signalKind, size, tilt, timeStamp) {
      var t2, t3,
        t1 = this._pointers.$index(0, device);
      t1.toString;
      t2 = t1.x;
      t3 = t1.y;
      t1.x = physicalX;
      t1.y = physicalY;
      t1 = t1.__engine$_pointer;
      if (t1 == null)
        t1 = 0;
      return A.PointerData$(buttons, change, device, distance, distanceMax, kind, false, orientation, physicalX - t2, physicalY - t3, physicalX, physicalY, platformData, t1, pressure, pressureMax, pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, scrollDeltaX, scrollDeltaY, signalKind, size, false, tilt, timeStamp);
    },
    _locationHasChanged$3(device, physicalX, physicalY) {
      var t1 = this._pointers.$index(0, device);
      t1.toString;
      return t1.x !== physicalX || t1.y !== physicalY;
    },
    _synthesizePointerData$23$buttons$change$device$distance$distanceMax$kind$obscured$orientation$physicalX$physicalY$platformData$pressure$pressureMax$pressureMin$radiusMajor$radiusMax$radiusMin$radiusMinor$scrollDeltaX$scrollDeltaY$size$tilt$timeStamp(buttons, change, device, distance, distanceMax, kind, obscured, orientation, physicalX, physicalY, platformData, pressure, pressureMax, pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, scrollDeltaX, scrollDeltaY, size, tilt, timeStamp) {
      var t2, t3,
        t1 = this._pointers.$index(0, device);
      t1.toString;
      t2 = t1.x;
      t3 = t1.y;
      t1.x = physicalX;
      t1.y = physicalY;
      t1 = t1.__engine$_pointer;
      if (t1 == null)
        t1 = 0;
      return A.PointerData$(buttons, change, device, distance, distanceMax, kind, false, orientation, physicalX - t2, physicalY - t3, physicalX, physicalY, platformData, t1, pressure, pressureMax, pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, scrollDeltaX, scrollDeltaY, B.PointerSignalKind_0, size, true, tilt, timeStamp);
    },
    convert$15$buttons$change$device$kind$physicalX$physicalY$pressure$pressureMax$pressureMin$scrollDeltaX$scrollDeltaY$signalKind$tilt$timeStamp(result, buttons, change, device, kind, physicalX, physicalY, pressure, pressureMax, pressureMin, scrollDeltaX, scrollDeltaY, signalKind, tilt, timeStamp) {
      var alreadyAdded, t1, t2, _this = this;
      if (signalKind === B.PointerSignalKind_0)
        switch (change.index) {
          case 1:
            _this._ensureStateForPointer$3(device, physicalX, physicalY);
            result.push(_this._generateCompletePointerData$24$buttons$change$device$distance$distanceMax$kind$obscured$orientation$physicalX$physicalY$platformData$pressure$pressureMax$pressureMin$radiusMajor$radiusMax$radiusMin$radiusMinor$scrollDeltaX$scrollDeltaY$signalKind$size$tilt$timeStamp(buttons, change, device, 0, 0, kind, false, 0, physicalX, physicalY, 0, pressure, pressureMax, pressureMin, 0, 0, 0, 0, scrollDeltaX, scrollDeltaY, signalKind, 0, tilt, timeStamp));
            break;
          case 3:
            alreadyAdded = _this._pointers.containsKey$1(0, device);
            _this._ensureStateForPointer$3(device, physicalX, physicalY);
            if (!alreadyAdded)
              result.push(_this._synthesizePointerData$23$buttons$change$device$distance$distanceMax$kind$obscured$orientation$physicalX$physicalY$platformData$pressure$pressureMax$pressureMin$radiusMajor$radiusMax$radiusMin$radiusMinor$scrollDeltaX$scrollDeltaY$size$tilt$timeStamp(buttons, B.PointerChange_1, device, 0, 0, kind, false, 0, physicalX, physicalY, 0, pressure, pressureMax, pressureMin, 0, 0, 0, 0, scrollDeltaX, scrollDeltaY, 0, tilt, timeStamp));
            result.push(_this._generateCompletePointerData$24$buttons$change$device$distance$distanceMax$kind$obscured$orientation$physicalX$physicalY$platformData$pressure$pressureMax$pressureMin$radiusMajor$radiusMax$radiusMin$radiusMinor$scrollDeltaX$scrollDeltaY$signalKind$size$tilt$timeStamp(buttons, change, device, 0, 0, kind, false, 0, physicalX, physicalY, 0, pressure, pressureMax, pressureMin, 0, 0, 0, 0, scrollDeltaX, scrollDeltaY, signalKind, 0, tilt, timeStamp));
            _this._activeButtons = buttons;
            break;
          case 4:
            alreadyAdded = _this._pointers.containsKey$1(0, device);
            _this._ensureStateForPointer$3(device, physicalX, physicalY).__engine$_pointer = $._PointerState__pointerCount = $._PointerState__pointerCount + 1;
            if (!alreadyAdded)
              result.push(_this._synthesizePointerData$23$buttons$change$device$distance$distanceMax$kind$obscured$orientation$physicalX$physicalY$platformData$pressure$pressureMax$pressureMin$radiusMajor$radiusMax$radiusMin$radiusMinor$scrollDeltaX$scrollDeltaY$size$tilt$timeStamp(buttons, B.PointerChange_1, device, 0, 0, kind, false, 0, physicalX, physicalY, 0, pressure, pressureMax, pressureMin, 0, 0, 0, 0, scrollDeltaX, scrollDeltaY, 0, tilt, timeStamp));
            if (_this._locationHasChanged$3(device, physicalX, physicalY))
              result.push(_this._synthesizePointerData$23$buttons$change$device$distance$distanceMax$kind$obscured$orientation$physicalX$physicalY$platformData$pressure$pressureMax$pressureMin$radiusMajor$radiusMax$radiusMin$radiusMinor$scrollDeltaX$scrollDeltaY$size$tilt$timeStamp(0, B.PointerChange_3, device, 0, 0, kind, false, 0, physicalX, physicalY, 0, 0, pressureMax, pressureMin, 0, 0, 0, 0, scrollDeltaX, scrollDeltaY, 0, tilt, timeStamp));
            result.push(_this._generateCompletePointerData$24$buttons$change$device$distance$distanceMax$kind$obscured$orientation$physicalX$physicalY$platformData$pressure$pressureMax$pressureMin$radiusMajor$radiusMax$radiusMin$radiusMinor$scrollDeltaX$scrollDeltaY$signalKind$size$tilt$timeStamp(buttons, change, device, 0, 0, kind, false, 0, physicalX, physicalY, 0, pressure, pressureMax, pressureMin, 0, 0, 0, 0, scrollDeltaX, scrollDeltaY, signalKind, 0, tilt, timeStamp));
            _this._activeButtons = buttons;
            break;
          case 5:
            result.push(_this._generateCompletePointerData$24$buttons$change$device$distance$distanceMax$kind$obscured$orientation$physicalX$physicalY$platformData$pressure$pressureMax$pressureMin$radiusMajor$radiusMax$radiusMin$radiusMinor$scrollDeltaX$scrollDeltaY$signalKind$size$tilt$timeStamp(buttons, change, device, 0, 0, kind, false, 0, physicalX, physicalY, 0, pressure, pressureMax, pressureMin, 0, 0, 0, 0, scrollDeltaX, scrollDeltaY, signalKind, 0, tilt, timeStamp));
            _this._activeButtons = buttons;
            break;
          case 6:
          case 0:
            t1 = _this._pointers;
            t2 = t1.$index(0, device);
            t2.toString;
            if (change === B.PointerChange_0) {
              physicalX = t2.x;
              physicalY = t2.y;
            }
            if (_this._locationHasChanged$3(device, physicalX, physicalY))
              result.push(_this._synthesizePointerData$23$buttons$change$device$distance$distanceMax$kind$obscured$orientation$physicalX$physicalY$platformData$pressure$pressureMax$pressureMin$radiusMajor$radiusMax$radiusMin$radiusMinor$scrollDeltaX$scrollDeltaY$size$tilt$timeStamp(_this._activeButtons, B.PointerChange_5, device, 0, 0, kind, false, 0, physicalX, physicalY, 0, pressure, pressureMax, pressureMin, 0, 0, 0, 0, scrollDeltaX, scrollDeltaY, 0, tilt, timeStamp));
            result.push(_this._generateCompletePointerData$24$buttons$change$device$distance$distanceMax$kind$obscured$orientation$physicalX$physicalY$platformData$pressure$pressureMax$pressureMin$radiusMajor$radiusMax$radiusMin$radiusMinor$scrollDeltaX$scrollDeltaY$signalKind$size$tilt$timeStamp(buttons, change, device, 0, 0, kind, false, 0, physicalX, physicalY, 0, pressure, pressureMax, pressureMin, 0, 0, 0, 0, scrollDeltaX, scrollDeltaY, signalKind, 0, tilt, timeStamp));
            if (kind === B.PointerDeviceKind_0) {
              result.push(_this._synthesizePointerData$23$buttons$change$device$distance$distanceMax$kind$obscured$orientation$physicalX$physicalY$platformData$pressure$pressureMax$pressureMin$radiusMajor$radiusMax$radiusMin$radiusMinor$scrollDeltaX$scrollDeltaY$size$tilt$timeStamp(0, B.PointerChange_2, device, 0, 0, kind, false, 0, physicalX, physicalY, 0, 0, pressureMax, pressureMin, 0, 0, 0, 0, scrollDeltaX, scrollDeltaY, 0, tilt, timeStamp));
              t1.remove$1(0, device);
            }
            break;
          case 2:
            t1 = _this._pointers;
            t2 = t1.$index(0, device);
            t2.toString;
            result.push(_this._generateCompletePointerData$24$buttons$change$device$distance$distanceMax$kind$obscured$orientation$physicalX$physicalY$platformData$pressure$pressureMax$pressureMin$radiusMajor$radiusMax$radiusMin$radiusMinor$scrollDeltaX$scrollDeltaY$signalKind$size$tilt$timeStamp(buttons, change, device, 0, 0, kind, false, 0, t2.x, t2.y, 0, pressure, pressureMax, pressureMin, 0, 0, 0, 0, scrollDeltaX, scrollDeltaY, signalKind, 0, tilt, timeStamp));
            t1.remove$1(0, device);
            break;
          case 7:
          case 8:
          case 9:
            break;
        }
      else
        switch (signalKind.index) {
          case 1:
            alreadyAdded = _this._pointers.containsKey$1(0, device);
            _this._ensureStateForPointer$3(device, physicalX, physicalY);
            if (!alreadyAdded)
              result.push(_this._synthesizePointerData$23$buttons$change$device$distance$distanceMax$kind$obscured$orientation$physicalX$physicalY$platformData$pressure$pressureMax$pressureMin$radiusMajor$radiusMax$radiusMin$radiusMinor$scrollDeltaX$scrollDeltaY$size$tilt$timeStamp(buttons, B.PointerChange_1, device, 0, 0, kind, false, 0, physicalX, physicalY, 0, pressure, pressureMax, pressureMin, 0, 0, 0, 0, scrollDeltaX, scrollDeltaY, 0, tilt, timeStamp));
            if (_this._locationHasChanged$3(device, physicalX, physicalY))
              if (buttons !== 0)
                result.push(_this._synthesizePointerData$23$buttons$change$device$distance$distanceMax$kind$obscured$orientation$physicalX$physicalY$platformData$pressure$pressureMax$pressureMin$radiusMajor$radiusMax$radiusMin$radiusMinor$scrollDeltaX$scrollDeltaY$size$tilt$timeStamp(buttons, B.PointerChange_5, device, 0, 0, kind, false, 0, physicalX, physicalY, 0, pressure, pressureMax, pressureMin, 0, 0, 0, 0, scrollDeltaX, scrollDeltaY, 0, tilt, timeStamp));
              else
                result.push(_this._synthesizePointerData$23$buttons$change$device$distance$distanceMax$kind$obscured$orientation$physicalX$physicalY$platformData$pressure$pressureMax$pressureMin$radiusMajor$radiusMax$radiusMin$radiusMinor$scrollDeltaX$scrollDeltaY$size$tilt$timeStamp(buttons, B.PointerChange_3, device, 0, 0, kind, false, 0, physicalX, physicalY, 0, pressure, pressureMax, pressureMin, 0, 0, 0, 0, scrollDeltaX, scrollDeltaY, 0, tilt, timeStamp));
            result.push(_this._generateCompletePointerData$24$buttons$change$device$distance$distanceMax$kind$obscured$orientation$physicalX$physicalY$platformData$pressure$pressureMax$pressureMin$radiusMajor$radiusMax$radiusMin$radiusMinor$scrollDeltaX$scrollDeltaY$signalKind$size$tilt$timeStamp(buttons, change, device, 0, 0, kind, false, 0, physicalX, physicalY, 0, pressure, pressureMax, pressureMin, 0, 0, 0, 0, scrollDeltaX, scrollDeltaY, signalKind, 0, tilt, timeStamp));
            break;
          case 0:
            break;
          case 2:
            break;
        }
    },
    convert$14$buttons$change$device$kind$physicalX$physicalY$pressure$pressureMax$pressureMin$scrollDeltaX$scrollDeltaY$signalKind$timeStamp(result, buttons, change, device, kind, physicalX, physicalY, pressure, pressureMax, pressureMin, scrollDeltaX, scrollDeltaY, signalKind, timeStamp) {
      return this.convert$15$buttons$change$device$kind$physicalX$physicalY$pressure$pressureMax$pressureMin$scrollDeltaX$scrollDeltaY$signalKind$tilt$timeStamp(result, buttons, change, device, kind, physicalX, physicalY, pressure, pressureMax, pressureMin, scrollDeltaX, scrollDeltaY, signalKind, 0, timeStamp);
    },
    convert$12$buttons$change$device$kind$physicalX$physicalY$pressure$pressureMax$pressureMin$signalKind$timeStamp(result, buttons, change, device, kind, physicalX, physicalY, pressure, pressureMax, pressureMin, signalKind, timeStamp) {
      return this.convert$15$buttons$change$device$kind$physicalX$physicalY$pressure$pressureMax$pressureMin$scrollDeltaX$scrollDeltaY$signalKind$tilt$timeStamp(result, buttons, change, device, kind, physicalX, physicalY, pressure, pressureMax, pressureMin, 0, 0, signalKind, 0, timeStamp);
    },
    convert$13$buttons$change$device$kind$physicalX$physicalY$pressure$pressureMax$pressureMin$signalKind$tilt$timeStamp(result, buttons, change, device, kind, physicalX, physicalY, pressure, pressureMax, pressureMin, signalKind, tilt, timeStamp) {
      return this.convert$15$buttons$change$device$kind$physicalX$physicalY$pressure$pressureMax$pressureMin$scrollDeltaX$scrollDeltaY$signalKind$tilt$timeStamp(result, buttons, change, device, kind, physicalX, physicalY, pressure, pressureMax, pressureMin, 0, 0, signalKind, tilt, timeStamp);
    }
  };
  A.PointerDataConverter__ensureStateForPointer_closure.prototype = {
    call$0() {
      return new A._PointerState(this.x, this.y);
    },
    $signature: 177
  };
  A.Profiler.prototype = {};
  A.JsPromise.prototype = {};
  A.ImageDecoder.prototype = {};
  A.ImageDecoderOptions.prototype = {};
  A.DecodeResult.prototype = {};
  A.DecodeOptions.prototype = {};
  A.VideoFrame.prototype = {};
  A.ImageTrackList.prototype = {};
  A.ImageTrack.prototype = {};
  A.GlProgram.prototype = {};
  A.GlContext.prototype = {
    drawImage$3(_, context, left, $top) {
      var t1 = this.__engine$_canvas,
        t2 = this._widthInPixels,
        t3 = this._heightInPixels;
      A.callMethod(context, "drawImage", [t1, 0, 0, t2, t3, left, $top, t2, t3]);
    },
    compileShader$2(_, shaderType, source) {
      var t2,
        t1 = this.glContext,
        shader = t1.createShader(t1[shaderType]);
      if (shader == null)
        throw A.wrapException(A.Exception_Exception(A._callMethodUnchecked0(t1, "getError")));
      A.callMethod(t1, "shaderSource", [shader, source]);
      A.callMethod(t1, "compileShader", [shader]);
      t2 = this._kCompileStatus;
      if (!A.callMethod(t1, "getShaderParameter", [shader, t2 == null ? this._kCompileStatus = t1.COMPILE_STATUS : t2]))
        throw A.wrapException(A.Exception_Exception("Shader compilation failed: " + A.S(A.callMethod(t1, "getShaderInfoLog", [shader]))));
      return shader;
    },
    get$kArrayBuffer() {
      var t1 = this._kArrayBuffer;
      return t1 == null ? this._kArrayBuffer = this.glContext.ARRAY_BUFFER : t1;
    },
    get$kElementArrayBuffer() {
      var t1 = this._kElementArrayBuffer;
      return t1 == null ? this._kElementArrayBuffer = this.glContext.ELEMENT_ARRAY_BUFFER : t1;
    },
    get$kStaticDraw() {
      var t1 = this._kStaticDraw;
      return t1 == null ? this._kStaticDraw = this.glContext.STATIC_DRAW : t1;
    },
    getUniformLocation$2(_, program, uniformName) {
      var res = A.callMethod(this.glContext, "getUniformLocation", [program, uniformName]);
      if (res == null)
        throw A.wrapException(A.Exception_Exception(uniformName + " not found"));
      else
        return res;
    },
    readPatternData$1(isOpaque) {
      var canvas, _this = this,
        t1 = "transferToImageBitmap" in _this.__engine$_canvas && isOpaque;
      if (t1) {
        _this.__engine$_canvas.getContext("webgl2");
        return _this.__engine$_canvas.transferToImageBitmap();
      } else {
        t1 = _this._widthInPixels;
        canvas = A.CanvasElement_CanvasElement(_this._heightInPixels, t1);
        _this.drawImage$3(0, canvas.getContext("2d"), 0, 0);
        return canvas;
      }
    }
  };
  A.OffScreenCanvas.prototype = {};
  A.AccessibilityAnnouncements.prototype = {
    AccessibilityAnnouncements$_$0() {
      $._hotRestartListeners.push(new A.AccessibilityAnnouncements$__closure(this));
    },
    get$_domElement() {
      var liveRegion,
        t1 = this.__engine$_element;
      if (t1 == null) {
        liveRegion = document.createElement("label");
        liveRegion.setAttribute("id", "accessibility-element");
        t1 = liveRegion.style;
        t1.position = "fixed";
        t1.overflow = "hidden";
        B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "transform"), "translate(-99999px, -99999px)", "");
        t1.width = "1px";
        t1.height = "1px";
        this.__engine$_element = liveRegion;
        t1 = liveRegion;
      }
      return t1;
    },
    handleMessage$2(codec, data) {
      var _this = this,
        t1 = type$.Map_dynamic_dynamic,
        message = A._asStringQ(J.$index$asx(t1._as(J.$index$asx(t1._as(codec.decodeMessage$1(data)), "data")), "message"));
      if (message != null && message.length !== 0) {
        _this.get$_domElement().setAttribute("aria-live", "polite");
        _this.get$_domElement().textContent = message;
        t1 = document.body;
        t1.toString;
        t1.appendChild(_this.get$_domElement());
        _this._removeElementTimer = A.Timer_Timer(B.Duration_5000000, new A.AccessibilityAnnouncements_handleMessage_closure(_this));
      }
    }
  };
  A.AccessibilityAnnouncements$__closure.prototype = {
    call$0() {
      var t1 = this.$this._removeElementTimer;
      if (t1 != null)
        t1.cancel$0(0);
    },
    $signature: 0
  };
  A.AccessibilityAnnouncements_handleMessage_closure.prototype = {
    call$0() {
      var t1 = this.$this.__engine$_element;
      t1.toString;
      B.LabelElement_methods.remove$0(t1);
    },
    $signature: 0
  };
  A._CheckableKind.prototype = {
    toString$0(_) {
      return "_CheckableKind." + this._name;
    }
  };
  A.Checkable.prototype = {
    update$0(_) {
      var element, t2, _s4_ = "true",
        t1 = this.semanticsObject;
      if ((t1._dirtyFields & 1) !== 0) {
        switch (this.__engine$_kind.index) {
          case 0:
            t1.setAriaRole$2("checkbox", true);
            break;
          case 1:
            t1.setAriaRole$2("radio", true);
            break;
          case 2:
            t1.setAriaRole$2("switch", true);
            break;
        }
        if (t1.enabledState$0() === B.EnabledState_2) {
          element = t1.element;
          element.setAttribute("aria-disabled", _s4_);
          element.setAttribute("disabled", _s4_);
        } else
          this._removeDisabledAttribute$0();
        t2 = t1.__engine$_flags;
        t2 = (t2 & 2) !== 0 || (t2 & 131072) !== 0 ? _s4_ : "false";
        t1.element.setAttribute("aria-checked", t2);
      }
    },
    dispose$0(_) {
      var _this = this;
      switch (_this.__engine$_kind.index) {
        case 0:
          _this.semanticsObject.setAriaRole$2("checkbox", false);
          break;
        case 1:
          _this.semanticsObject.setAriaRole$2("radio", false);
          break;
        case 2:
          _this.semanticsObject.setAriaRole$2("switch", false);
          break;
      }
      _this._removeDisabledAttribute$0();
    },
    _removeDisabledAttribute$0() {
      var element = this.semanticsObject.element;
      element.removeAttribute("aria-disabled");
      element.removeAttribute("disabled");
    }
  };
  A.ImageRoleManager.prototype = {
    update$0(_) {
      var t2, t3, _this = this,
        t1 = _this.semanticsObject;
      if (t1.get$isVisualOnly()) {
        t2 = t1.__engine$_childrenInTraversalOrder;
        t2 = t2 != null && !B.NativeInt32List_methods.get$isEmpty(t2);
      } else
        t2 = false;
      if (t2) {
        if (_this._auxiliaryImageElement == null) {
          _this._auxiliaryImageElement = A._ElementFactoryProvider_createElement_tag("flt-semantics-img", null);
          t2 = t1.__engine$_childrenInTraversalOrder;
          if (t2 != null && !B.NativeInt32List_methods.get$isEmpty(t2)) {
            t2 = _this._auxiliaryImageElement.style;
            t2.position = "absolute";
            t2.top = "0";
            t2.left = "0";
            t3 = t1.__engine$_rect;
            t3 = A.S(t3.right - t3.left) + "px";
            t2.width = t3;
            t3 = t1.__engine$_rect;
            t3 = A.S(t3.bottom - t3.top) + "px";
            t2.height = t3;
          }
          t2 = _this._auxiliaryImageElement.style;
          t2.fontSize = "6px";
          t2 = _this._auxiliaryImageElement;
          t2.toString;
          t1.element.appendChild(t2);
        }
        _this._auxiliaryImageElement.setAttribute("role", "img");
        _this._setLabel$1(_this._auxiliaryImageElement);
      } else if (t1.get$isVisualOnly()) {
        t1.setAriaRole$2("img", true);
        _this._setLabel$1(t1.element);
        _this._cleanUpAuxiliaryElement$0();
      } else {
        _this._cleanUpAuxiliaryElement$0();
        _this._cleanupElement$0();
      }
    },
    _setLabel$1(element) {
      var t1 = this.semanticsObject._label;
      if (t1 != null && t1.length !== 0) {
        element.toString;
        t1.toString;
        element.setAttribute("aria-label", t1);
      }
    },
    _cleanUpAuxiliaryElement$0() {
      var t1 = this._auxiliaryImageElement;
      if (t1 != null) {
        J.remove$0$ax(t1);
        this._auxiliaryImageElement = null;
      }
    },
    _cleanupElement$0() {
      var t1 = this.semanticsObject;
      t1.setAriaRole$2("img", false);
      t1.element.removeAttribute("aria-label");
    },
    dispose$0(_) {
      this._cleanUpAuxiliaryElement$0();
      this._cleanupElement$0();
    }
  };
  A.Incrementable.prototype = {
    Incrementable$1(semanticsObject) {
      var _this = this,
        t1 = _this.__engine$_element;
      semanticsObject.element.appendChild(t1);
      t1.type = "range";
      t1.setAttribute("role", "slider");
      B.InputElement_methods.addEventListener$2(t1, "change", new A.Incrementable_closure(_this, semanticsObject));
      t1 = new A.Incrementable_closure0(_this);
      _this._gestureModeListener = t1;
      semanticsObject.owner._gestureModeListeners.push(t1);
    },
    update$0(_) {
      var _this = this;
      switch (_this.semanticsObject.owner._gestureMode.index) {
        case 1:
          _this._enableBrowserGestureHandling$0();
          _this._updateInputValues$0();
          break;
        case 0:
          _this._disableBrowserGestureHandling$0();
          break;
      }
    },
    _enableBrowserGestureHandling$0() {
      var t1 = this.__engine$_element,
        t2 = t1.disabled;
      t2.toString;
      if (!t2)
        return;
      t1.disabled = false;
    },
    _updateInputValues$0() {
      var t1, updateNeeded, surrogateTextValue, t2, t3, surrogateMaxTextValue, surrogateMinTextValue, _this = this;
      if (!_this._pendingResync) {
        t1 = _this.semanticsObject._dirtyFields;
        updateNeeded = (t1 & 4096) !== 0 || (t1 & 8192) !== 0 || (t1 & 16384) !== 0;
      } else
        updateNeeded = true;
      if (!updateNeeded)
        return;
      _this._pendingResync = false;
      surrogateTextValue = "" + _this._currentSurrogateValue;
      t1 = _this.__engine$_element;
      t1.value = surrogateTextValue;
      t1.setAttribute("aria-valuenow", surrogateTextValue);
      t2 = _this.semanticsObject;
      t3 = t2.__engine$_value;
      t3.toString;
      t1.setAttribute("aria-valuetext", t3);
      surrogateMaxTextValue = t2._increasedValue.length !== 0 ? "" + (_this._currentSurrogateValue + 1) : surrogateTextValue;
      t1.max = surrogateMaxTextValue;
      t1.setAttribute("aria-valuemax", surrogateMaxTextValue);
      surrogateMinTextValue = t2._decreasedValue.length !== 0 ? "" + (_this._currentSurrogateValue - 1) : surrogateTextValue;
      t1.min = surrogateMinTextValue;
      t1.setAttribute("aria-valuemin", surrogateMinTextValue);
    },
    _disableBrowserGestureHandling$0() {
      var t1 = this.__engine$_element,
        t2 = t1.disabled;
      t2.toString;
      if (t2)
        return;
      t1.disabled = true;
    },
    dispose$0(_) {
      var _this = this;
      B.JSArray_methods.remove$1(_this.semanticsObject.owner._gestureModeListeners, _this._gestureModeListener);
      _this._gestureModeListener = null;
      _this._disableBrowserGestureHandling$0();
      B.InputElement_methods.remove$0(_this.__engine$_element);
    }
  };
  A.Incrementable_closure.prototype = {
    call$1(_) {
      var newInputValue,
        t1 = this.$this,
        t2 = t1.__engine$_element,
        t3 = t2.disabled;
      t3.toString;
      if (t3)
        return;
      t1._pendingResync = true;
      t2 = t2.value;
      t2.toString;
      newInputValue = A.int_parse(t2, null);
      t2 = t1._currentSurrogateValue;
      if (newInputValue > t2) {
        t1._currentSurrogateValue = t2 + 1;
        t1 = $.$get$EnginePlatformDispatcher__instance();
        A.invoke3(t1._onSemanticsAction, t1._onSemanticsActionZone, this.semanticsObject.id, B.SemanticsAction_64, null);
      } else if (newInputValue < t2) {
        t1._currentSurrogateValue = t2 - 1;
        t1 = $.$get$EnginePlatformDispatcher__instance();
        A.invoke3(t1._onSemanticsAction, t1._onSemanticsActionZone, this.semanticsObject.id, B.SemanticsAction_128, null);
      }
    },
    $signature: 2
  };
  A.Incrementable_closure0.prototype = {
    call$1(mode) {
      this.$this.update$0(0);
    },
    $signature: 58
  };
  A.LabelAndValue.prototype = {
    update$0(_) {
      var t4, shouldDisplayValue, t5, _this = this,
        t1 = _this.semanticsObject,
        t2 = t1.__engine$_value,
        hasValue = t2 != null && t2.length !== 0,
        t3 = t1._label,
        hasLabel = t3 != null && t3.length !== 0;
      if (hasValue) {
        t4 = t1.__engine$_actions;
        t4.toString;
        shouldDisplayValue = !((t4 & 64) !== 0 || (t4 & 128) !== 0);
      } else
        shouldDisplayValue = false;
      if (!hasLabel && !shouldDisplayValue && true) {
        _this._cleanUpDom$0();
        return;
      }
      if (hasLabel) {
        t3 = "" + A.S(t3);
        if (shouldDisplayValue)
          t3 += " ";
      } else
        t3 = "";
      t2 = shouldDisplayValue ? t3 + A.S(t2) : t3;
      t3 = t1.element;
      t2 = t2.charCodeAt(0) == 0 ? t2 : t2;
      t3.setAttribute("aria-label", t2);
      if ((t1.__engine$_flags & 512) !== 0)
        t1.setAriaRole$2("heading", true);
      if (_this._auxiliaryValueElement == null) {
        _this._auxiliaryValueElement = A._ElementFactoryProvider_createElement_tag("flt-semantics-value", null);
        t4 = t1.__engine$_childrenInTraversalOrder;
        if (t4 != null && !B.NativeInt32List_methods.get$isEmpty(t4)) {
          t4 = _this._auxiliaryValueElement.style;
          t4.position = "absolute";
          t4.top = "0";
          t4.left = "0";
          t5 = t1.__engine$_rect;
          t5 = A.S(t5.right - t5.left) + "px";
          t4.width = t5;
          t1 = t1.__engine$_rect;
          t1 = A.S(t1.bottom - t1.top) + "px";
          t4.height = t1;
        }
        t1 = _this._auxiliaryValueElement.style;
        t4 = $._configuration;
        if (t4 == null)
          t4 = $._configuration = new A.FlutterConfiguration(self.window.flutterConfiguration);
        t4 = t4.get$debugShowSemanticsNodes(t4) ? "12px" : "6px";
        t1.fontSize = t4;
        t1 = _this._auxiliaryValueElement;
        t1.toString;
        t3.appendChild(t1);
      }
      _this._auxiliaryValueElement.textContent = t2;
    },
    _cleanUpDom$0() {
      var t1 = this._auxiliaryValueElement;
      if (t1 != null) {
        J.remove$0$ax(t1);
        this._auxiliaryValueElement = null;
      }
      t1 = this.semanticsObject;
      t1.element.removeAttribute("aria-label");
      t1.setAriaRole$2("heading", false);
    },
    dispose$0(_) {
      this._cleanUpDom$0();
    }
  };
  A.LiveRegion.prototype = {
    update$0(_) {
      var t1 = this.semanticsObject,
        t2 = t1._label;
      t2 = t2 != null && t2.length !== 0;
      t1 = t1.element;
      if (t2)
        t1.setAttribute("aria-live", "polite");
      else
        t1.removeAttribute("aria-live");
    },
    dispose$0(_) {
      this.semanticsObject.element.removeAttribute("aria-live");
    }
  };
  A.Scrollable.prototype = {
    _recomputeScrollPosition$0() {
      var t1, t2, t3, semanticsId, _this = this, _null = null;
      if (_this.get$_domScrollPosition() !== _this._effectiveNeutralScrollPosition) {
        t1 = _this.semanticsObject;
        if (!t1.owner.shouldAcceptBrowserGesture$1("scroll"))
          return;
        t2 = _this.get$_domScrollPosition();
        t3 = _this._effectiveNeutralScrollPosition;
        _this._neutralizeDomScrollPosition$0();
        t1.recomputePositionAndSize$0();
        semanticsId = t1.id;
        if (t2 > t3) {
          t1 = t1.__engine$_actions;
          t1.toString;
          if ((t1 & 32) !== 0 || (t1 & 16) !== 0) {
            t1 = $.$get$EnginePlatformDispatcher__instance();
            A.invoke3(t1._onSemanticsAction, t1._onSemanticsActionZone, semanticsId, B.SemanticsAction_16, _null);
          } else {
            t1 = $.$get$EnginePlatformDispatcher__instance();
            A.invoke3(t1._onSemanticsAction, t1._onSemanticsActionZone, semanticsId, B.SemanticsAction_4, _null);
          }
        } else {
          t1 = t1.__engine$_actions;
          t1.toString;
          if ((t1 & 32) !== 0 || (t1 & 16) !== 0) {
            t1 = $.$get$EnginePlatformDispatcher__instance();
            A.invoke3(t1._onSemanticsAction, t1._onSemanticsActionZone, semanticsId, B.SemanticsAction_32, _null);
          } else {
            t1 = $.$get$EnginePlatformDispatcher__instance();
            A.invoke3(t1._onSemanticsAction, t1._onSemanticsActionZone, semanticsId, B.SemanticsAction_8, _null);
          }
        }
      }
    },
    update$0(_) {
      var t1, t2, t3, _this = this;
      if (_this._scrollListener == null) {
        t1 = _this.semanticsObject;
        t2 = t1.element;
        t3 = t2.style;
        B.CssStyleDeclaration_methods._setPropertyHelper$3(t3, B.CssStyleDeclaration_methods._browserPropertyName$1(t3, "touch-action"), "none", "");
        _this._gestureModeDidChange$0();
        t1 = t1.owner;
        t1._oneTimePostUpdateCallbacks.push(new A.Scrollable_update_closure(_this));
        t3 = new A.Scrollable_update_closure0(_this);
        _this._gestureModeListener = t3;
        t1._gestureModeListeners.push(t3);
        t3 = new A.Scrollable_update_closure1(_this);
        _this._scrollListener = t3;
        J.addEventListener$2$x(t2, "scroll", t3);
      }
    },
    get$_domScrollPosition() {
      var t1 = this.semanticsObject,
        t2 = t1.__engine$_actions;
      t2.toString;
      t2 = (t2 & 32) !== 0 || (t2 & 16) !== 0;
      t1 = t1.element;
      if (t2)
        return B.JSNumber_methods.round$0(t1.scrollTop);
      else
        return B.JSNumber_methods.round$0(t1.scrollLeft);
    },
    _neutralizeDomScrollPosition$0() {
      var t1 = this.semanticsObject,
        element = t1.element,
        t2 = t1.__engine$_actions;
      t2.toString;
      if ((t2 & 32) !== 0 || (t2 & 16) !== 0) {
        element.scrollTop = 10;
        t1.verticalContainerAdjustment = this._effectiveNeutralScrollPosition = B.JSNumber_methods.round$0(element.scrollTop);
        t1.horizontalContainerAdjustment = 0;
      } else {
        element.scrollLeft = 10;
        t2 = B.JSNumber_methods.round$0(element.scrollLeft);
        this._effectiveNeutralScrollPosition = t2;
        t1.verticalContainerAdjustment = 0;
        t1.horizontalContainerAdjustment = t2;
      }
    },
    _gestureModeDidChange$0() {
      var _s10_ = "overflow-y",
        _s10_0 = "overflow-x",
        t1 = this.semanticsObject,
        element = t1.element;
      switch (t1.owner._gestureMode.index) {
        case 1:
          t1 = t1.__engine$_actions;
          t1.toString;
          if ((t1 & 32) !== 0 || (t1 & 16) !== 0) {
            t1 = element.style;
            B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, _s10_), "scroll", "");
          } else {
            t1 = element.style;
            B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, _s10_0), "scroll", "");
          }
          break;
        case 0:
          t1 = t1.__engine$_actions;
          t1.toString;
          if ((t1 & 32) !== 0 || (t1 & 16) !== 0) {
            t1 = element.style;
            B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, _s10_), "hidden", "");
          } else {
            t1 = element.style;
            B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, _s10_0), "hidden", "");
          }
          break;
      }
    },
    dispose$0(_) {
      var t3, _this = this,
        t1 = _this.semanticsObject,
        t2 = t1.element,
        style = t2.style;
      style.removeProperty("overflowY");
      style.removeProperty("overflowX");
      style.removeProperty("touch-action");
      t3 = _this._scrollListener;
      if (t3 != null)
        J.removeEventListener$2$x(t2, "scroll", t3);
      B.JSArray_methods.remove$1(t1.owner._gestureModeListeners, _this._gestureModeListener);
      _this._gestureModeListener = null;
    }
  };
  A.Scrollable_update_closure.prototype = {
    call$0() {
      this.$this._neutralizeDomScrollPosition$0();
    },
    $signature: 0
  };
  A.Scrollable_update_closure0.prototype = {
    call$1(_) {
      this.$this._gestureModeDidChange$0();
    },
    $signature: 58
  };
  A.Scrollable_update_closure1.prototype = {
    call$1(_) {
      this.$this._recomputeScrollPosition$0();
    },
    $signature: 2
  };
  A.SemanticsUpdate.prototype = {};
  A.SemanticsNodeUpdate.prototype = {};
  A.Role.prototype = {
    toString$0(_) {
      return "Role." + this._name;
    }
  };
  A._roleFactories_closure.prototype = {
    call$1(object) {
      return A.Incrementable$(object);
    },
    $signature: 182
  };
  A._roleFactories_closure0.prototype = {
    call$1(object) {
      return new A.Scrollable(object);
    },
    $signature: 187
  };
  A._roleFactories_closure1.prototype = {
    call$1(object) {
      return new A.LabelAndValue(object);
    },
    $signature: 188
  };
  A._roleFactories_closure2.prototype = {
    call$1(object) {
      return new A.Tappable(object);
    },
    $signature: 191
  };
  A._roleFactories_closure3.prototype = {
    call$1(object) {
      var t3, t4,
        _s15_ = "editableElement",
        t1 = new A.TextField(object),
        t2 = (object.__engine$_flags & 524288) !== 0 ? document.createElement("textarea") : A.InputElement_InputElement();
      A._lateWriteOnceCheck($, _s15_);
      t1.__TextField_editableElement = t2;
      t3 = A._lateReadCheck(t2, _s15_);
      t3.spellcheck = false;
      t3.setAttribute("autocorrect", "off");
      t3.setAttribute("autocomplete", "off");
      t3.setAttribute("data-semantics-role", "text-field");
      t3 = A._lateReadCheck(t2, _s15_).style;
      t3.position = "absolute";
      t3.top = "0";
      t3.left = "0";
      t4 = object.__engine$_rect;
      t4 = A.S(t4.right - t4.left) + "px";
      t3.width = t4;
      t4 = object.__engine$_rect;
      t4 = A.S(t4.bottom - t4.top) + "px";
      t3.height = t4;
      object.element.appendChild(A._lateReadCheck(t2, _s15_));
      t2 = $.$get$_browserEngine();
      switch (t2.index) {
        case 0:
        case 5:
        case 3:
        case 4:
        case 2:
        case 6:
          t1._initializeForBlink$0();
          break;
        case 1:
          t1._initializeForWebkit$0();
          break;
      }
      return t1;
    },
    $signature: 194
  };
  A._roleFactories_closure4.prototype = {
    call$1(object) {
      return new A.Checkable(A._checkableKindFromSemanticsFlag(object), object);
    },
    $signature: 198
  };
  A._roleFactories_closure5.prototype = {
    call$1(object) {
      return new A.ImageRoleManager(object);
    },
    $signature: 201
  };
  A._roleFactories_closure6.prototype = {
    call$1(object) {
      return new A.LiveRegion(object);
    },
    $signature: 205
  };
  A.RoleManager.prototype = {};
  A.SemanticsObject.prototype = {
    SemanticsObject$2(id, owner) {
      var t1 = this.element,
        t2 = t1.style;
      t2.position = "absolute";
      if (this.id === 0) {
        t2 = $._configuration;
        if (t2 == null)
          t2 = $._configuration = new A.FlutterConfiguration(self.window.flutterConfiguration);
        t2 = !t2.get$debugShowSemanticsNodes(t2);
      } else
        t2 = false;
      if (t2) {
        t2 = t1.style;
        B.CssStyleDeclaration_methods._setPropertyHelper$3(t2, B.CssStyleDeclaration_methods._browserPropertyName$1(t2, "filter"), "opacity(0%)", "");
        t2 = t1.style;
        t2.color = "rgba(0,0,0,0)";
      }
      t2 = $._configuration;
      if (t2 == null)
        t2 = $._configuration = new A.FlutterConfiguration(self.window.flutterConfiguration);
      if (t2.get$debugShowSemanticsNodes(t2)) {
        t1 = t1.style;
        t1.outline = "1px solid green";
      }
    },
    getOrCreateChildContainer$0() {
      var t1, _this = this;
      if (_this._childContainerElement == null) {
        t1 = A._ElementFactoryProvider_createElement_tag("flt-semantics-container", null);
        _this._childContainerElement = t1;
        t1 = t1.style;
        t1.position = "absolute";
        t1 = _this._childContainerElement;
        t1.toString;
        _this.element.appendChild(t1);
      }
      return _this._childContainerElement;
    },
    get$isVisualOnly() {
      var t2,
        t1 = this.__engine$_flags;
      if ((t1 & 16384) !== 0) {
        t2 = this.__engine$_actions;
        t2.toString;
        t1 = (t2 & 1) === 0 && (t1 & 8) === 0;
      } else
        t1 = false;
      return t1;
    },
    enabledState$0() {
      var t1 = this.__engine$_flags;
      if ((t1 & 64) !== 0)
        if ((t1 & 128) !== 0)
          return B.EnabledState_1;
        else
          return B.EnabledState_2;
      else
        return B.EnabledState_0;
    },
    setAriaRole$2(ariaRoleName, condition) {
      var t1;
      if (condition)
        this.element.setAttribute("role", ariaRoleName);
      else {
        t1 = this.element;
        if (t1.getAttribute("role") === ariaRoleName)
          t1.removeAttribute("role");
      }
    },
    _updateRole$2(role, enabled) {
      var t1 = this._roleManagers,
        manager = t1.$index(0, role);
      if (enabled) {
        if (manager == null) {
          manager = $.$get$_roleFactories().$index(0, role).call$1(this);
          t1.$indexSet(0, role, manager);
        }
        manager.update$0(0);
      } else if (manager != null) {
        manager.dispose$0(0);
        t1.remove$1(0, role);
      }
    },
    recomputePositionAndSize$0() {
      var containerElement, hasZeroRectOffset, transform, hasIdentityTransform, effectiveTransform, left, $top, effectiveTransformIsIdentity, t4, t5, _this = this,
        t1 = _this.element,
        t2 = t1.style,
        t3 = _this.__engine$_rect;
      t3 = A.S(t3.right - t3.left) + "px";
      t2.width = t3;
      t3 = _this.__engine$_rect;
      t3 = A.S(t3.bottom - t3.top) + "px";
      t2.height = t3;
      t2 = _this.__engine$_childrenInTraversalOrder;
      containerElement = t2 != null && !B.NativeInt32List_methods.get$isEmpty(t2) ? _this.getOrCreateChildContainer$0() : null;
      t2 = _this.__engine$_rect;
      hasZeroRectOffset = t2.top === 0 && t2.left === 0;
      transform = _this.__engine$_transform;
      t2 = transform == null;
      hasIdentityTransform = t2 || A.transformKindOf(transform) === B.TransformKind_0;
      if (hasZeroRectOffset && hasIdentityTransform && _this.verticalContainerAdjustment === 0 && _this.horizontalContainerAdjustment === 0) {
        A.SemanticsObject__clearSemanticElementTransform(t1);
        if (containerElement != null)
          A.SemanticsObject__clearSemanticElementTransform(containerElement);
        return;
      }
      effectiveTransform = A._Cell$named("effectiveTransform");
      if (!hasZeroRectOffset)
        if (t2) {
          t2 = _this.__engine$_rect;
          left = t2.left;
          $top = t2.top;
          t2 = A.Matrix4$identity();
          t2.setTranslationRaw$3(left, $top, 0);
          effectiveTransform.__late_helper$_value = t2;
          effectiveTransformIsIdentity = left === 0 && $top === 0;
        } else {
          t2 = new A.Matrix40(new Float32Array(16));
          t2.setFrom$1(new A.Matrix40(transform));
          t3 = _this.__engine$_rect;
          t2.translate$3(0, t3.left, t3.top, 0);
          effectiveTransform.__late_helper$_value = t2;
          effectiveTransformIsIdentity = J.isIdentity$0$z(effectiveTransform._readLocal$0());
        }
      else if (!hasIdentityTransform) {
        effectiveTransform.__late_helper$_value = new A.Matrix40(transform);
        effectiveTransformIsIdentity = false;
      } else
        effectiveTransformIsIdentity = true;
      if (!effectiveTransformIsIdentity) {
        t1 = t1.style;
        B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "transform-origin"), "0 0 0", "");
        t2 = A.float64ListToCssTransform(effectiveTransform._readLocal$0().__engine$_m4storage);
        B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "transform"), t2, "");
      } else
        A.SemanticsObject__clearSemanticElementTransform(t1);
      if (containerElement != null)
        if (!hasZeroRectOffset || _this.verticalContainerAdjustment !== 0 || _this.horizontalContainerAdjustment !== 0) {
          t1 = _this.__engine$_rect;
          t2 = t1.left;
          t3 = _this.horizontalContainerAdjustment;
          t1 = t1.top;
          t4 = _this.verticalContainerAdjustment;
          t5 = containerElement.style;
          t4 = A.S(-t1 + t4) + "px";
          t5.top = t4;
          t1 = A.S(-t2 + t3) + "px";
          t5.left = t1;
        } else
          A.SemanticsObject__clearSemanticElementTransform(containerElement);
    },
    _updateChildrenInTraversalOrder$0() {
      var t2, len, i, object, containerElement, t3, t4, t5, t6, _i, id, intersectionIndicesNew, intersectionIndicesOld, minLength, newIndex, oldIndex, longestSequence, stationaryIds, refNode, childId, _this = this,
        _s13_ = "flt-semantics",
        t1 = _this.__engine$_childrenInTraversalOrder;
      if (t1 == null || t1.length === 0) {
        t2 = _this._previousChildrenInTraversalOrder;
        if (t2 == null || t2.length === 0) {
          _this._previousChildrenInTraversalOrder = t1;
          return;
        }
        len = t2.length;
        for (t1 = _this.owner, t2 = t1._semanticsTree, i = 0; i < len; ++i) {
          object = t2.$index(0, _this._previousChildrenInTraversalOrder[i]);
          t1._detachments.push(object);
        }
        _this._previousChildrenInTraversalOrder = null;
        t1 = _this._childContainerElement;
        t1.toString;
        J.remove$0$ax(t1);
        _this._childContainerElement = null;
        _this._previousChildrenInTraversalOrder = _this.__engine$_childrenInTraversalOrder;
        return;
      }
      containerElement = _this.getOrCreateChildContainer$0();
      t1 = _this._previousChildrenInTraversalOrder;
      if (t1 == null || t1.length === 0) {
        t1 = _this._previousChildrenInTraversalOrder = _this.__engine$_childrenInTraversalOrder;
        for (t2 = t1.length, t3 = _this.owner, t4 = t3._semanticsTree, t5 = type$.Role, t6 = type$.nullable_RoleManager, _i = 0; _i < t2; ++_i) {
          id = t1[_i];
          object = t4.$index(0, id);
          if (object == null) {
            object = new A.SemanticsObject(id, t3, A._ElementFactoryProvider_createElement_tag(_s13_, null), A.LinkedHashMap_LinkedHashMap$_empty(t5, t6));
            object.SemanticsObject$2(id, t3);
            t4.$indexSet(0, id, object);
          }
          containerElement.appendChild(object.element);
          object.__engine$_parent = _this;
          t3._attachments.$indexSet(0, object.id, _this);
        }
        _this._previousChildrenInTraversalOrder = _this.__engine$_childrenInTraversalOrder;
        return;
      }
      t1 = type$.JSArray_int;
      intersectionIndicesNew = A._setArrayType([], t1);
      intersectionIndicesOld = A._setArrayType([], t1);
      minLength = Math.min(_this._previousChildrenInTraversalOrder.length, _this.__engine$_childrenInTraversalOrder.length);
      newIndex = 0;
      while (true) {
        if (!(newIndex < minLength && _this._previousChildrenInTraversalOrder[newIndex] === _this.__engine$_childrenInTraversalOrder[newIndex]))
          break;
        intersectionIndicesNew.push(newIndex);
        intersectionIndicesOld.push(newIndex);
        ++newIndex;
      }
      t2 = _this._previousChildrenInTraversalOrder.length;
      t3 = _this.__engine$_childrenInTraversalOrder.length;
      if (t2 === t3 && newIndex === t3)
        return;
      for (; t2 = _this.__engine$_childrenInTraversalOrder, newIndex < t2.length;) {
        for (t3 = _this._previousChildrenInTraversalOrder, t4 = t3.length, oldIndex = 0; oldIndex < t4; ++oldIndex)
          if (t3[oldIndex] === t2[newIndex]) {
            intersectionIndicesNew.push(newIndex);
            intersectionIndicesOld.push(oldIndex);
            break;
          }
        ++newIndex;
      }
      longestSequence = A.longestIncreasingSubsequence(intersectionIndicesOld);
      stationaryIds = A._setArrayType([], t1);
      for (t1 = longestSequence.length, i = 0; i < t1; ++i)
        stationaryIds.push(_this._previousChildrenInTraversalOrder[intersectionIndicesOld[longestSequence[i]]]);
      for (t1 = _this.owner, t2 = t1._semanticsTree, i = 0; i < _this._previousChildrenInTraversalOrder.length; ++i)
        if (!B.JSArray_methods.contains$1(intersectionIndicesOld, i)) {
          object = t2.$index(0, _this._previousChildrenInTraversalOrder[i]);
          t1._detachments.push(object);
        }
      for (i = _this.__engine$_childrenInTraversalOrder.length - 1, t3 = type$.Role, t4 = type$.nullable_RoleManager, refNode = null; i >= 0; --i) {
        childId = _this.__engine$_childrenInTraversalOrder[i];
        object = t2.$index(0, childId);
        if (object == null) {
          object = new A.SemanticsObject(childId, t1, A._ElementFactoryProvider_createElement_tag(_s13_, null), A.LinkedHashMap_LinkedHashMap$_empty(t3, t4));
          object.SemanticsObject$2(childId, t1);
          t2.$indexSet(0, childId, object);
        }
        if (!B.JSArray_methods.contains$1(stationaryIds, childId)) {
          t5 = object.element;
          if (refNode == null)
            containerElement.appendChild(t5);
          else
            containerElement.insertBefore(t5, refNode);
          object.__engine$_parent = _this;
          t1._attachments.$indexSet(0, object.id, _this);
        }
        refNode = object.element;
      }
      _this._previousChildrenInTraversalOrder = _this.__engine$_childrenInTraversalOrder;
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.AccessibilityMode.prototype = {
    toString$0(_) {
      return "AccessibilityMode." + this._name;
    }
  };
  A.GestureMode.prototype = {
    toString$0(_) {
      return "GestureMode." + this._name;
    }
  };
  A.EngineSemanticsOwner.prototype = {
    EngineSemanticsOwner$_$0() {
      $._hotRestartListeners.push(new A.EngineSemanticsOwner$__closure(this));
    },
    _finalizeTree$0() {
      var t1, t2, t3, _i, object, t4, t5, _this = this;
      for (t1 = _this._detachments, t2 = t1.length, t3 = _this._semanticsTree, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        object = t1[_i];
        t4 = _this._attachments;
        t5 = object.id;
        if (t4.$index(0, t5) == null) {
          t3.remove$1(0, t5);
          object.__engine$_parent = null;
          t4 = object.element;
          t5 = t4.parentNode;
          if (t5 != null)
            t5.removeChild(t4);
        }
      }
      _this._detachments = A._setArrayType([], type$.JSArray_nullable_SemanticsObject);
      _this._attachments = A.LinkedHashMap_LinkedHashMap$_empty(type$.nullable_int, type$.SemanticsObject);
      t1 = _this._oneTimePostUpdateCallbacks;
      t2 = t1.length;
      if (t2 !== 0) {
        for (_i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].call$0();
        _this._oneTimePostUpdateCallbacks = A._setArrayType([], type$.JSArray_of_void_Function);
      }
    },
    set$semanticsEnabled(value) {
      var t1, t2, t3;
      if (this._semanticsEnabled)
        return;
      this._semanticsEnabled = true;
      t1 = $.$get$EnginePlatformDispatcher__instance();
      t2 = this._semanticsEnabled;
      t3 = t1._configuration;
      if (t2 !== t3.semanticsEnabled) {
        t1._configuration = t3.copyWith$1$semanticsEnabled(t2);
        t2 = t1._onSemanticsEnabledChanged;
        if (t2 != null)
          A.invoke(t2, t1._onSemanticsEnabledChangedZone);
      }
    },
    _getGestureModeClock$0() {
      var _this = this,
        t1 = _this._gestureModeClock;
      if (t1 == null) {
        t1 = _this._gestureModeClock = new A.AlarmClock(_this._now);
        t1.callback = new A.EngineSemanticsOwner__getGestureModeClock_closure(_this);
      }
      return t1;
    },
    receiveGlobalEvent$1($event) {
      var t1, t2, _this = this;
      if (B.JSArray_methods.contains$1(B.List_Cg9, $event.type)) {
        t1 = _this._getGestureModeClock$0();
        t1.toString;
        t2 = _this._now.call$0();
        t1.set$datetime(A.DateTime$_withValue(t2._core$_value + 500, t2.isUtc));
        if (_this._gestureMode !== B.GestureMode_0) {
          _this._gestureMode = B.GestureMode_0;
          _this._notifyGestureModeListeners$0();
        }
      }
      return _this.semanticsHelper._semanticsEnabler.shouldEnableSemantics$1($event);
    },
    _notifyGestureModeListeners$0() {
      var t1, i;
      for (t1 = this._gestureModeListeners, i = 0; i < t1.length; ++i)
        t1[i].call$1(this._gestureMode);
    },
    shouldAcceptBrowserGesture$1(eventType) {
      if (B.JSArray_methods.contains$1(B.List_click_scroll, eventType))
        return this._gestureMode === B.GestureMode_1;
      return false;
    },
    updateSemantics$1(uiUpdate) {
      var t1, t2, t3, t4, t5, _i, nodeUpdate, t6, object, t7, _this = this;
      if (!_this._semanticsEnabled) {
        _this.semanticsHelper._semanticsEnabler.dispose$0(0);
        _this.set$semanticsEnabled(true);
      }
      for (t1 = uiUpdate.__engine$_nodeUpdates, t2 = t1.length, t3 = _this._semanticsTree, t4 = type$.Role, t5 = type$.nullable_RoleManager, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        nodeUpdate = t1[_i];
        t6 = nodeUpdate.id;
        object = t3.$index(0, t6);
        if (object == null) {
          object = new A.SemanticsObject(t6, _this, A._ElementFactoryProvider_createElement_tag("flt-semantics", null), A.LinkedHashMap_LinkedHashMap$_empty(t4, t5));
          object.SemanticsObject$2(t6, _this);
          t3.$indexSet(0, t6, object);
        }
        t6 = nodeUpdate.flags;
        if (object.__engine$_flags !== t6) {
          object.__engine$_flags = t6;
          object._dirtyFields = (object._dirtyFields | 1) >>> 0;
        }
        t6 = nodeUpdate.value;
        if (object.__engine$_value !== t6) {
          object.__engine$_value = t6;
          object._dirtyFields = (object._dirtyFields | 4096) >>> 0;
        }
        t6 = nodeUpdate.valueAttributes;
        if (object._valueAttributes !== t6) {
          object._valueAttributes = t6;
          object._dirtyFields = (object._dirtyFields | 4096) >>> 0;
        }
        t6 = nodeUpdate.label;
        if (object._label !== t6) {
          object._label = t6;
          object._dirtyFields = (object._dirtyFields | 1024) >>> 0;
        }
        t6 = nodeUpdate.labelAttributes;
        if (object._labelAttributes !== t6) {
          object._labelAttributes = t6;
          object._dirtyFields = (object._dirtyFields | 1024) >>> 0;
        }
        t6 = nodeUpdate.rect;
        if (!J.$eq$(object.__engine$_rect, t6)) {
          object.__engine$_rect = t6;
          object._dirtyFields = (object._dirtyFields | 512) >>> 0;
        }
        t6 = nodeUpdate.transform;
        if (object.__engine$_transform !== t6) {
          object.__engine$_transform = t6;
          object._dirtyFields = (object._dirtyFields | 65536) >>> 0;
        }
        t6 = nodeUpdate.scrollPosition;
        if (object.__engine$_scrollPosition !== t6) {
          object.__engine$_scrollPosition = t6;
          object._dirtyFields = (object._dirtyFields | 64) >>> 0;
        }
        t6 = object.__engine$_actions;
        t7 = nodeUpdate.actions;
        if (t6 !== t7) {
          object.__engine$_actions = t7;
          object._dirtyFields = (object._dirtyFields | 2) >>> 0;
          t6 = t7;
        }
        t7 = nodeUpdate.textSelectionBase;
        if (object._textSelectionBase !== t7) {
          object._textSelectionBase = t7;
          object._dirtyFields = (object._dirtyFields | 4) >>> 0;
        }
        t7 = nodeUpdate.textSelectionExtent;
        if (object._textSelectionExtent !== t7) {
          object._textSelectionExtent = t7;
          object._dirtyFields = (object._dirtyFields | 8) >>> 0;
        }
        t7 = nodeUpdate.scrollChildren;
        if (object._scrollChildren !== t7) {
          object._scrollChildren = t7;
          object._dirtyFields = (object._dirtyFields | 16) >>> 0;
        }
        t7 = nodeUpdate.scrollIndex;
        if (object.__engine$_scrollIndex !== t7) {
          object.__engine$_scrollIndex = t7;
          object._dirtyFields = (object._dirtyFields | 32) >>> 0;
        }
        t7 = nodeUpdate.scrollExtentMax;
        if (object.__engine$_scrollExtentMax !== t7) {
          object.__engine$_scrollExtentMax = t7;
          object._dirtyFields = (object._dirtyFields | 128) >>> 0;
        }
        t7 = nodeUpdate.scrollExtentMin;
        if (object.__engine$_scrollExtentMin !== t7) {
          object.__engine$_scrollExtentMin = t7;
          object._dirtyFields = (object._dirtyFields | 256) >>> 0;
        }
        t7 = nodeUpdate.hint;
        if (object._hint !== t7) {
          object._hint = t7;
          object._dirtyFields = (object._dirtyFields | 2048) >>> 0;
        }
        t7 = nodeUpdate.hintAttributes;
        if (object._hintAttributes !== t7) {
          object._hintAttributes = t7;
          object._dirtyFields = (object._dirtyFields | 2048) >>> 0;
        }
        t7 = nodeUpdate.increasedValue;
        if (object._increasedValue !== t7) {
          object._increasedValue = t7;
          object._dirtyFields = (object._dirtyFields | 8192) >>> 0;
        }
        t7 = nodeUpdate.increasedValueAttributes;
        if (object._increasedValueAttributes !== t7) {
          object._increasedValueAttributes = t7;
          object._dirtyFields = (object._dirtyFields | 8192) >>> 0;
        }
        t7 = nodeUpdate.decreasedValue;
        if (object._decreasedValue !== t7) {
          object._decreasedValue = t7;
          object._dirtyFields = (object._dirtyFields | 16384) >>> 0;
        }
        t7 = nodeUpdate.decreasedValueAttributes;
        if (object._decreasedValueAttributes !== t7) {
          object._decreasedValueAttributes = t7;
          object._dirtyFields = (object._dirtyFields | 16384) >>> 0;
        }
        t7 = nodeUpdate.textDirection;
        if (object.__engine$_textDirection != t7) {
          object.__engine$_textDirection = t7;
          object._dirtyFields = (object._dirtyFields | 32768) >>> 0;
        }
        t7 = nodeUpdate.childrenInHitTestOrder;
        if (object._childrenInHitTestOrder !== t7) {
          object._childrenInHitTestOrder = t7;
          object._dirtyFields = (object._dirtyFields | 1048576) >>> 0;
        }
        t7 = nodeUpdate.childrenInTraversalOrder;
        if (object.__engine$_childrenInTraversalOrder !== t7) {
          object.__engine$_childrenInTraversalOrder = t7;
          object._dirtyFields = (object._dirtyFields | 524288) >>> 0;
        }
        t7 = nodeUpdate.additionalActions;
        if (object._additionalActions !== t7) {
          object._additionalActions = t7;
          object._dirtyFields = (object._dirtyFields | 2097152) >>> 0;
        }
        t7 = object._label;
        if (!(t7 != null && t7.length !== 0)) {
          t7 = object.__engine$_value;
          if (!(t7 != null && t7.length !== 0))
            t7 = false;
          else
            t7 = true;
        } else
          t7 = true;
        if (t7) {
          t7 = object.__engine$_flags;
          if ((t7 & 16) === 0) {
            if ((t7 & 16384) !== 0) {
              t6.toString;
              t6 = (t6 & 1) === 0 && (t7 & 8) === 0;
            } else
              t6 = false;
            t6 = !t6;
          } else
            t6 = false;
        } else
          t6 = false;
        object._updateRole$2(B.Role_2, t6);
        object._updateRole$2(B.Role_4, (object.__engine$_flags & 16) !== 0);
        t6 = object.__engine$_actions;
        t6.toString;
        object._updateRole$2(B.Role_3, ((t6 & 1) !== 0 || (object.__engine$_flags & 8) !== 0) && (object.__engine$_flags & 16) === 0);
        t6 = object.__engine$_actions;
        t6.toString;
        object._updateRole$2(B.Role_0, (t6 & 64) !== 0 || (t6 & 128) !== 0);
        t6 = object.__engine$_actions;
        t6.toString;
        object._updateRole$2(B.Role_1, (t6 & 32) !== 0 || (t6 & 16) !== 0 || (t6 & 4) !== 0 || (t6 & 8) !== 0);
        t6 = object.__engine$_flags;
        object._updateRole$2(B.Role_5, (t6 & 1) !== 0 || (t6 & 65536) !== 0);
        t6 = object.__engine$_flags;
        if ((t6 & 16384) !== 0) {
          t7 = object.__engine$_actions;
          t7.toString;
          t6 = (t7 & 1) === 0 && (t6 & 8) === 0;
        } else
          t6 = false;
        object._updateRole$2(B.Role_6, t6);
        t6 = object.__engine$_flags;
        object._updateRole$2(B.Role_7, (t6 & 32768) !== 0 && (t6 & 8192) === 0);
        object._updateChildrenInTraversalOrder$0();
        t6 = object._dirtyFields;
        if ((t6 & 512) !== 0 || (t6 & 65536) !== 0 || (t6 & 64) !== 0)
          object.recomputePositionAndSize$0();
        object._dirtyFields = 0;
      }
      if (_this._rootSemanticsElement == null) {
        t1 = t3.$index(0, 0).element;
        _this._rootSemanticsElement = t1;
        t2 = $._flutterViewEmbedder;
        (t2 == null ? $._flutterViewEmbedder = A.FlutterViewEmbedder$() : t2)._semanticsHostElement.appendChild(t1);
      }
      _this._finalizeTree$0();
    }
  };
  A.EngineSemanticsOwner$__closure.prototype = {
    call$0() {
      var t1 = this.$this._rootSemanticsElement;
      if (t1 != null)
        J.remove$0$ax(t1);
    },
    $signature: 0
  };
  A.EngineSemanticsOwner__now_closure.prototype = {
    call$0() {
      return new A.DateTime(Date.now(), false);
    },
    $signature: 206
  };
  A.EngineSemanticsOwner__getGestureModeClock_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      if (t1._gestureMode === B.GestureMode_1)
        return;
      t1._gestureMode = B.GestureMode_1;
      t1._notifyGestureModeListeners$0();
    },
    $signature: 0
  };
  A.EnabledState.prototype = {
    toString$0(_) {
      return "EnabledState." + this._name;
    }
  };
  A.SemanticsHelper.prototype = {};
  A.SemanticsEnabler.prototype = {
    shouldEnableSemantics$1($event) {
      if (!this.get$isWaitingToEnableSemantics())
        return true;
      else
        return this.tryEnableSemantics$1($event);
    }
  };
  A.DesktopSemanticsEnabler.prototype = {
    get$isWaitingToEnableSemantics() {
      return this._semanticsPlaceholder != null;
    },
    tryEnableSemantics$1($event) {
      var t1, t2;
      if (this._semanticsPlaceholder == null)
        return true;
      t1 = $.EngineSemanticsOwner__instance;
      if ((t1 == null ? $.EngineSemanticsOwner__instance = A.EngineSemanticsOwner$_() : t1)._semanticsEnabled)
        return true;
      if (!J.containsKey$1$x(B.Set_Yabt3._collection$_map, $event.type))
        return true;
      t1 = J.get$target$x($event);
      t2 = this._semanticsPlaceholder;
      if (t1 == null ? t2 != null : t1 !== t2)
        return true;
      t1 = $.EngineSemanticsOwner__instance;
      (t1 == null ? $.EngineSemanticsOwner__instance = A.EngineSemanticsOwner$_() : t1).set$semanticsEnabled(true);
      this.dispose$0(0);
      return false;
    },
    prepareAccessibilityPlaceholder$0() {
      var t2,
        t1 = this._semanticsPlaceholder = A._ElementFactoryProvider_createElement_tag("flt-semantics-placeholder", null);
      J.addEventListener$3$x(t1, "click", new A.DesktopSemanticsEnabler_prepareAccessibilityPlaceholder_closure(this), true);
      t1.setAttribute("role", "button");
      t1.setAttribute("aria-live", "polite");
      t1.setAttribute("tabindex", "0");
      t1.setAttribute("aria-label", "Enable accessibility");
      t2 = t1.style;
      t2.position = "absolute";
      t2.left = "-1px";
      t2.top = "-1px";
      t2.width = "1px";
      t2.height = "1px";
      return t1;
    },
    dispose$0(_) {
      var t1 = this._semanticsPlaceholder;
      if (t1 != null)
        J.remove$0$ax(t1);
      this._semanticsPlaceholder = null;
    }
  };
  A.DesktopSemanticsEnabler_prepareAccessibilityPlaceholder_closure.prototype = {
    call$1($event) {
      this.$this.tryEnableSemantics$1($event);
    },
    $signature: 2
  };
  A.MobileSemanticsEnabler.prototype = {
    get$isWaitingToEnableSemantics() {
      return this._semanticsPlaceholder != null;
    },
    tryEnableSemantics$1($event) {
      var t1, removeNow, activationPoint, activatingElementRect, t2, t3, t4, deltaX, deltaY, _this = this;
      if (_this._semanticsPlaceholder == null)
        return true;
      if (_this._schedulePlaceholderRemoval) {
        t1 = $.$get$_browserEngine();
        if (t1 === B.BrowserEngine_1) {
          t1 = $event.type;
          removeNow = t1 === "touchend" || t1 === "pointerup" || t1 === "click";
        } else
          removeNow = true;
        if (removeNow)
          _this.dispose$0(0);
        return true;
      }
      t1 = $.EngineSemanticsOwner__instance;
      if ((t1 == null ? $.EngineSemanticsOwner__instance = A.EngineSemanticsOwner$_() : t1)._semanticsEnabled)
        return true;
      if (++_this.semanticsActivationAttempts >= 20)
        return _this._schedulePlaceholderRemoval = true;
      if (!J.containsKey$1$x(B.Set_2No4._collection$_map, $event.type))
        return true;
      if (_this.semanticsActivationTimer != null)
        return false;
      switch ($event.type) {
        case "click":
          activationPoint = J.get$offset$x(type$.MouseEvent._as($event));
          break;
        case "touchstart":
        case "touchend":
          t1 = type$.TouchEvent._as($event).changedTouches;
          t1.toString;
          t1 = B.TouchList_methods.get$first(t1);
          activationPoint = new A.Point(B.JSNumber_methods.round$0(t1.clientX), B.JSNumber_methods.round$0(t1.clientY), type$.Point_num);
          break;
        case "pointerdown":
        case "pointerup":
          type$.PointerEvent._as($event);
          activationPoint = new A.Point($event.clientX, $event.clientY, type$.Point_num);
          break;
        default:
          return true;
      }
      activatingElementRect = _this._semanticsPlaceholder.getBoundingClientRect();
      t1 = activatingElementRect.left;
      t1.toString;
      t2 = activatingElementRect.right;
      t2.toString;
      t3 = activatingElementRect.top;
      t3.toString;
      t4 = activatingElementRect.bottom;
      t4.toString;
      deltaX = activationPoint.x - (t1 + (t2 - t1) / 2);
      deltaY = activationPoint.y - (t3 + (t4 - t3) / 2);
      if (deltaX * deltaX + deltaY * deltaY < 1 && true) {
        _this._schedulePlaceholderRemoval = true;
        _this.semanticsActivationTimer = A.Timer_Timer(B.Duration_300000, new A.MobileSemanticsEnabler_tryEnableSemantics_closure(_this));
        return false;
      }
      return true;
    },
    prepareAccessibilityPlaceholder$0() {
      var t2,
        t1 = this._semanticsPlaceholder = A._ElementFactoryProvider_createElement_tag("flt-semantics-placeholder", null);
      J.addEventListener$3$x(t1, "click", new A.MobileSemanticsEnabler_prepareAccessibilityPlaceholder_closure(this), true);
      t1.setAttribute("role", "button");
      t1.setAttribute("aria-label", "Enable accessibility");
      t2 = t1.style;
      t2.position = "absolute";
      t2.left = "0";
      t2.top = "0";
      t2.right = "0";
      t2.bottom = "0";
      return t1;
    },
    dispose$0(_) {
      var t1 = this._semanticsPlaceholder;
      if (t1 != null)
        J.remove$0$ax(t1);
      this.semanticsActivationTimer = this._semanticsPlaceholder = null;
    }
  };
  A.MobileSemanticsEnabler_tryEnableSemantics_closure.prototype = {
    call$0() {
      this.$this.dispose$0(0);
      var t1 = $.EngineSemanticsOwner__instance;
      (t1 == null ? $.EngineSemanticsOwner__instance = A.EngineSemanticsOwner$_() : t1).set$semanticsEnabled(true);
    },
    $signature: 0
  };
  A.MobileSemanticsEnabler_prepareAccessibilityPlaceholder_closure.prototype = {
    call$1($event) {
      this.$this.tryEnableSemantics$1($event);
    },
    $signature: 2
  };
  A.Tappable.prototype = {
    update$0(_) {
      var t2, _this = this,
        t1 = _this.semanticsObject,
        element = t1.element;
      element.tabIndex = 0;
      t1.setAriaRole$2("button", (t1.__engine$_flags & 8) !== 0);
      if (t1.enabledState$0() === B.EnabledState_2 && (t1.__engine$_flags & 8) !== 0) {
        element.setAttribute("aria-disabled", "true");
        _this._stopListening$0();
      } else {
        t2 = t1.__engine$_actions;
        t2.toString;
        if ((t2 & 1) !== 0 && (t1.__engine$_flags & 16) === 0) {
          if (_this._clickListener == null) {
            t2 = new A.Tappable_update_closure(_this);
            _this._clickListener = t2;
            J.addEventListener$2$x(element, "click", t2);
          }
        } else
          _this._stopListening$0();
      }
      if ((t1._dirtyFields & 1) !== 0 && (t1.__engine$_flags & 32) !== 0)
        J.focus$0$x(element);
    },
    _stopListening$0() {
      var t1 = this._clickListener;
      if (t1 == null)
        return;
      J.removeEventListener$2$x(this.semanticsObject.element, "click", t1);
      this._clickListener = null;
    },
    dispose$0(_) {
      this._stopListening$0();
      this.semanticsObject.setAriaRole$2("button", false);
    }
  };
  A.Tappable_update_closure.prototype = {
    call$1(_) {
      var t2,
        t1 = this.$this.semanticsObject;
      if (t1.owner._gestureMode !== B.GestureMode_1)
        return;
      t2 = $.$get$EnginePlatformDispatcher__instance();
      A.invoke3(t2._onSemanticsAction, t2._onSemanticsActionZone, t1.id, B.SemanticsAction_1, null);
    },
    $signature: 2
  };
  A.SemanticsTextEditingStrategy.prototype = {
    enable$3$onAction$onChange(_, inputConfig, onAction, onChange) {
      this.inputConfig = inputConfig;
      this.onChange = onChange;
      this.onAction = onAction;
    },
    activate$1(textField) {
      var t2, t3, _this = this,
        t1 = _this.activeTextField;
      if (t1 === textField)
        return;
      else if (t1 != null)
        _this.disable$0(0);
      _this.activeTextField = textField;
      _this.domElement = A._lateReadCheck(textField.__TextField_editableElement, "editableElement");
      _this._syncStyle$0();
      t1 = _this.inputConfig;
      t1.toString;
      t2 = _this.onChange;
      t2.toString;
      t3 = _this.onAction;
      t3.toString;
      _this.super$DefaultTextEditingStrategy$enable(0, t1, t3, t2);
    },
    disable$0(_) {
      var t1, i, _this = this;
      if (!_this.isEnabled)
        return;
      _this.isEnabled = false;
      _this.geometry = _this.style = null;
      for (t1 = _this.subscriptions, i = 0; i < t1.length; ++i)
        J.cancel$0$z(t1[i]);
      B.JSArray_methods.set$length(t1, 0);
      _this.lastEditingState = null;
      t1 = _this.domElement;
      if (t1 != null)
        t1.blur();
      _this._queuedStyle = _this.activeTextField = _this.domElement = null;
    },
    addEventHandlers$0() {
      var t1, t2, t3, _this = this,
        _s18_ = "inputConfiguration";
      if (A._lateReadCheck(_this.__DefaultTextEditingStrategy_inputConfiguration, _s18_).autofillGroup != null)
        B.JSArray_methods.addAll$1(_this.subscriptions, A._lateReadCheck(_this.__DefaultTextEditingStrategy_inputConfiguration, _s18_).autofillGroup.addInputEventListeners$0());
      t1 = _this.subscriptions;
      t2 = _this.domElement;
      t2.toString;
      t3 = _this.get$handleChange();
      t1.push(A._EventStreamSubscription$(t2, "input", t3, false, type$._ElementEventStreamImpl_Event._precomputed1));
      t2 = _this.domElement;
      t2.toString;
      t1.push(A._EventStreamSubscription$(t2, "keydown", _this.get$maybeSendAction(), false, type$._ElementEventStreamImpl_KeyboardEvent._precomputed1));
      t1.push(A._EventStreamSubscription$(document, "selectionchange", t3, false, type$.Event));
      _this.preventDefaultForMouseEvents$0();
    },
    initializeTextEditing$3$onAction$onChange(inputConfig, onAction, onChange) {
      this.isEnabled = true;
      this.__DefaultTextEditingStrategy_inputConfiguration = inputConfig;
      this.applyConfiguration$1(inputConfig);
    },
    placeElement$0() {
      A._lateReadCheck(this.__DefaultTextEditingStrategy_inputConfiguration, "inputConfiguration");
      this.domElement.focus();
    },
    initializeElementPlacement$0() {
    },
    updateElementPlacement$1(textGeometry) {
    },
    updateElementStyle$1(textStyle) {
      this._queuedStyle = textStyle;
      this._syncStyle$0();
    },
    _syncStyle$0() {
      var t1 = this._queuedStyle;
      if (t1 == null || this.domElement == null)
        return;
      t1.toString;
      this.super$DefaultTextEditingStrategy$updateElementStyle(t1);
    }
  };
  A.TextField.prototype = {
    _initializeForBlink$0() {
      J.addEventListener$2$x(A._lateReadCheck(this.__TextField_editableElement, "editableElement"), "focus", new A.TextField__initializeForBlink_closure(this));
    },
    _initializeForWebkit$0() {
      var _this = this,
        _s15_ = "editableElement",
        t1 = {},
        t2 = $.$get$_operatingSystem();
      if (t2 === B.OperatingSystem_4) {
        _this._initializeForBlink$0();
        return;
      }
      t1.lastTouchStartOffsetY = t1.lastTouchStartOffsetX = null;
      J.addEventListener$3$x(A._lateReadCheck(_this.__TextField_editableElement, _s15_), "touchstart", new A.TextField__initializeForWebkit_closure(t1), true);
      J.addEventListener$3$x(A._lateReadCheck(_this.__TextField_editableElement, _s15_), "touchend", new A.TextField__initializeForWebkit_closure0(t1, _this), true);
    },
    update$0(_) {
      var t3, editingState, needsDomFocusRequest, _this = this,
        _s15_ = "editableElement",
        _s10_ = "aria-label",
        t1 = _this.semanticsObject,
        t2 = t1._label;
      t2 = t2 != null && t2.length !== 0;
      t3 = _this.__TextField_editableElement;
      if (t2) {
        t2 = A._lateReadCheck(t3, _s15_);
        t3 = t1._label;
        t3.toString;
        t2.setAttribute(_s10_, t3);
      } else
        A._lateReadCheck(t3, _s15_).removeAttribute(_s10_);
      t2 = A._lateReadCheck(_this.__TextField_editableElement, _s15_).style;
      t3 = t1.__engine$_rect;
      t3 = A.S(t3.right - t3.left) + "px";
      t2.width = t3;
      t3 = t1.__engine$_rect;
      t3 = A.S(t3.bottom - t3.top) + "px";
      t2.height = t3;
      t2 = t1.__engine$_value;
      editingState = A.EditingState$(t1._textSelectionBase, t1._textSelectionExtent, t2);
      if ((t1.__engine$_flags & 32) !== 0) {
        if (!_this._hasFocused) {
          _this._hasFocused = true;
          $.SemanticsTextEditingStrategy__instance.activate$1(_this);
          needsDomFocusRequest = true;
        } else
          needsDomFocusRequest = false;
        if (document.activeElement !== A._lateReadCheck(_this.__TextField_editableElement, _s15_))
          needsDomFocusRequest = true;
        $.SemanticsTextEditingStrategy__instance.setEditingState$1(editingState);
      } else {
        if (_this._hasFocused) {
          t2 = $.SemanticsTextEditingStrategy__instance;
          if (t2.activeTextField === _this)
            t2.disable$0(0);
          t2 = A._lateReadCheck(_this.__TextField_editableElement, _s15_);
          if (type$.InputElement._is(t2))
            t2.value = editingState.text;
          else if (type$.TextAreaElement._is(t2))
            t2.value = editingState.text;
          else
            A.throwExpression(A.UnsupportedError$("Unsupported DOM element type"));
          if (_this._hasFocused && document.activeElement === A._lateReadCheck(_this.__TextField_editableElement, _s15_))
            A._lateReadCheck(_this.__TextField_editableElement, _s15_).blur();
          _this._hasFocused = false;
        }
        needsDomFocusRequest = false;
      }
      if (needsDomFocusRequest)
        t1.owner._oneTimePostUpdateCallbacks.push(new A.TextField_update_closure(_this));
    },
    dispose$0(_) {
      var t1;
      J.remove$0$ax(A._lateReadCheck(this.__TextField_editableElement, "editableElement"));
      t1 = $.SemanticsTextEditingStrategy__instance;
      if (t1.activeTextField === this)
        t1.disable$0(0);
    }
  };
  A.TextField__initializeForBlink_closure.prototype = {
    call$1($event) {
      var t2,
        t1 = this.$this.semanticsObject;
      if (t1.owner._gestureMode !== B.GestureMode_1)
        return;
      t2 = $.$get$EnginePlatformDispatcher__instance();
      A.invoke3(t2._onSemanticsAction, t2._onSemanticsActionZone, t1.id, B.SemanticsAction_1, null);
    },
    $signature: 2
  };
  A.TextField__initializeForWebkit_closure.prototype = {
    call$1($event) {
      var t1, t2;
      type$.TouchEvent._as($event);
      t1 = $event.changedTouches;
      t1.toString;
      t1 = B.TouchList_methods.get$last(t1);
      t2 = B.JSNumber_methods.round$0(t1.clientX);
      B.JSNumber_methods.round$0(t1.clientY);
      t1 = this._box_0;
      t1.lastTouchStartOffsetX = t2;
      t2 = $event.changedTouches;
      t2.toString;
      t2 = B.TouchList_methods.get$last(t2);
      B.JSNumber_methods.round$0(t2.clientX);
      t1.lastTouchStartOffsetY = B.JSNumber_methods.round$0(t2.clientY);
    },
    $signature: 2
  };
  A.TextField__initializeForWebkit_closure0.prototype = {
    call$1($event) {
      var t1, t2, t3;
      type$.TouchEvent._as($event);
      t1 = this._box_0;
      if (t1.lastTouchStartOffsetX != null) {
        t2 = $event.changedTouches;
        t2.toString;
        t2 = B.TouchList_methods.get$last(t2);
        t3 = B.JSNumber_methods.round$0(t2.clientX);
        B.JSNumber_methods.round$0(t2.clientY);
        t2 = $event.changedTouches;
        t2.toString;
        t2 = B.TouchList_methods.get$last(t2);
        B.JSNumber_methods.round$0(t2.clientX);
        t2 = B.JSNumber_methods.round$0(t2.clientY);
        if (t3 * t3 + t2 * t2 < 324) {
          t2 = $.$get$EnginePlatformDispatcher__instance();
          A.invoke3(t2._onSemanticsAction, t2._onSemanticsActionZone, this.$this.semanticsObject.id, B.SemanticsAction_1, null);
        }
      }
      t1.lastTouchStartOffsetY = t1.lastTouchStartOffsetX = null;
    },
    $signature: 2
  };
  A.TextField_update_closure.prototype = {
    call$0() {
      var _s15_ = "editableElement",
        t1 = this.$this;
      if (document.activeElement !== A._lateReadCheck(t1.__TextField_editableElement, _s15_))
        A._lateReadCheck(t1.__TextField_editableElement, _s15_).focus();
    },
    $signature: 0
  };
  A._TypedDataBuffer.prototype = {
    get$length(_) {
      return this.__engine$_length;
    },
    $index(_, index) {
      if (index >= this.__engine$_length)
        throw A.wrapException(A.IndexError$(index, this, null, null, null));
      return this.__engine$_buffer[index];
    },
    $indexSet(_, index, value) {
      if (index >= this.__engine$_length)
        throw A.wrapException(A.IndexError$(index, this, null, null, null));
      this.__engine$_buffer[index] = value;
    },
    set$length(_, newLength) {
      var t2, i, newBuffer, _this = this,
        t1 = _this.__engine$_length;
      if (newLength < t1)
        for (t2 = _this.__engine$_buffer, i = newLength; i < t1; ++i)
          t2[i] = 0;
      else {
        t1 = _this.__engine$_buffer.length;
        if (newLength > t1) {
          if (t1 === 0)
            newBuffer = new Uint8Array(newLength);
          else
            newBuffer = _this._createBiggerBuffer$1(newLength);
          B.NativeUint8List_methods.setRange$3(newBuffer, 0, _this.__engine$_length, _this.__engine$_buffer);
          _this.__engine$_buffer = newBuffer;
        }
      }
      _this.__engine$_length = newLength;
    },
    __engine$_add$1(_, value) {
      var _this = this,
        t1 = _this.__engine$_length,
        t2 = _this.__engine$_buffer;
      if (t1 === t2.length) {
        t2 = _this._createBiggerBuffer$1(null);
        B.NativeUint8List_methods.setRange$3(t2, 0, t1, _this.__engine$_buffer);
        _this.__engine$_buffer = t2;
        t1 = t2;
      } else
        t1 = t2;
      t1[_this.__engine$_length++] = value;
    },
    add$1(_, value) {
      var _this = this,
        t1 = _this.__engine$_length,
        t2 = _this.__engine$_buffer;
      if (t1 === t2.length) {
        t2 = _this._createBiggerBuffer$1(null);
        B.NativeUint8List_methods.setRange$3(t2, 0, t1, _this.__engine$_buffer);
        _this.__engine$_buffer = t2;
        t1 = t2;
      } else
        t1 = t2;
      t1[_this.__engine$_length++] = value;
    },
    addAll$3(_, values, start, end) {
      A.RangeError_checkNotNegative(start, "start");
      if (end != null && start > end)
        throw A.wrapException(A.RangeError$range(end, start, null, "end", null));
      this._addAll$3(values, start, end);
    },
    addAll$1($receiver, values) {
      return this.addAll$3($receiver, values, 0, null);
    },
    _addAll$3(values, start, end) {
      var t1, t2, valuesLength, newLength, t3, i, value, _this = this,
        _s16_ = "Too few elements";
      if (A._instanceType(_this)._eval$1("List<_TypedDataBuffer.E>")._is(values))
        end = end == null ? values.length : end;
      if (end != null) {
        t1 = _this.__engine$_length;
        t2 = J.getInterceptor$asx(values);
        if (start > t2.get$length(values) || end > t2.get$length(values))
          A.throwExpression(A.StateError$(_s16_));
        valuesLength = end - start;
        newLength = _this.__engine$_length + valuesLength;
        _this._ensureCapacity$1(newLength);
        t2 = _this.__engine$_buffer;
        t3 = t1 + valuesLength;
        B.NativeUint8List_methods.setRange$4(t2, t3, _this.__engine$_length + valuesLength, t2, t1);
        B.NativeUint8List_methods.setRange$4(_this.__engine$_buffer, t1, t3, values, start);
        _this.__engine$_length = newLength;
        return;
      }
      for (t1 = J.get$iterator$ax(values), i = 0; t1.moveNext$0();) {
        value = t1.get$current(t1);
        if (i >= start)
          _this.__engine$_add$1(0, value);
        ++i;
      }
      if (i < start)
        throw A.wrapException(A.StateError$(_s16_));
    },
    _ensureCapacity$1(requiredCapacity) {
      var newBuffer, _this = this;
      if (requiredCapacity <= _this.__engine$_buffer.length)
        return;
      newBuffer = _this._createBiggerBuffer$1(requiredCapacity);
      B.NativeUint8List_methods.setRange$3(newBuffer, 0, _this.__engine$_length, _this.__engine$_buffer);
      _this.__engine$_buffer = newBuffer;
    },
    _createBiggerBuffer$1(requiredCapacity) {
      var newLength = this.__engine$_buffer.length * 2;
      if (requiredCapacity != null && newLength < requiredCapacity)
        newLength = requiredCapacity;
      else if (newLength < 8)
        newLength = 8;
      return new Uint8Array(newLength);
    },
    setRange$4(_, start, end, source, skipCount) {
      var t1 = this.__engine$_length;
      if (end > t1)
        throw A.wrapException(A.RangeError$range(end, 0, t1, null, null));
      t1 = this.__engine$_buffer;
      if (A._instanceType(this)._eval$1("_TypedDataBuffer<_TypedDataBuffer.E>")._is(source))
        B.NativeUint8List_methods.setRange$4(t1, start, end, source.__engine$_buffer, skipCount);
      else
        B.NativeUint8List_methods.setRange$4(t1, start, end, source, skipCount);
    },
    setRange$3($receiver, start, end, source) {
      return this.setRange$4($receiver, start, end, source, 0);
    }
  };
  A._IntBuffer.prototype = {};
  A.Uint8Buffer.prototype = {};
  A.MethodCall.prototype = {
    toString$0(_) {
      return A.getRuntimeType(this).toString$0(0) + "(" + this.method + ", " + A.S(this.$arguments) + ")";
    }
  };
  A.JSONMessageCodec.prototype = {
    encodeMessage$1(message) {
      return A.NativeByteData_NativeByteData$view(B.C_Utf8Encoder.convert$1(B.C_JsonCodec.encode$1(message)).buffer, 0, null);
    },
    decodeMessage$1(message) {
      if (message == null)
        return message;
      return B.C_JsonCodec.decode$1(0, B.Utf8Decoder_false.convert$1(A.NativeUint8List_NativeUint8List$view(message.buffer, 0, null)));
    }
  };
  A.JSONMethodCodec.prototype = {
    encodeMethodCall$1($call) {
      return B.C_JSONMessageCodec.encodeMessage$1(A.LinkedHashMap_LinkedHashMap$_literal(["method", $call.method, "args", $call.$arguments], type$.String, type$.dynamic));
    },
    decodeMethodCall$1(methodCall) {
      var t1, method, $arguments, _null = null,
        decoded = B.C_JSONMessageCodec.decodeMessage$1(methodCall);
      if (!type$.Map_dynamic_dynamic._is(decoded))
        throw A.wrapException(A.FormatException$("Expected method call Map, got " + A.S(decoded), _null, _null));
      t1 = J.getInterceptor$asx(decoded);
      method = t1.$index(decoded, "method");
      $arguments = t1.$index(decoded, "args");
      if (typeof method == "string")
        return new A.MethodCall(method, $arguments);
      throw A.wrapException(A.FormatException$("Invalid method call: " + A.S(decoded), _null, _null));
    }
  };
  A.StandardMessageCodec.prototype = {
    encodeMessage$1(message) {
      var buffer = A.WriteBuffer_WriteBuffer();
      this.writeValue$2(0, buffer, true);
      return buffer.done$0();
    },
    decodeMessage$1(message) {
      var buffer, result;
      if (message == null)
        return null;
      buffer = new A.ReadBuffer(message);
      result = this.readValue$1(0, buffer);
      if (buffer.__engine$_position < message.byteLength)
        throw A.wrapException(B.FormatException_oCg);
      return result;
    },
    writeValue$2(_, buffer, value) {
      var t1, t2, t3, bytes, _this = this;
      if (value == null)
        buffer.__engine$_buffer.__engine$_add$1(0, 0);
      else if (A._isBool(value)) {
        t1 = value ? 1 : 2;
        buffer.__engine$_buffer.__engine$_add$1(0, t1);
      } else if (typeof value == "number") {
        t1 = buffer.__engine$_buffer;
        t1.__engine$_add$1(0, 6);
        buffer._alignTo$1(8);
        buffer._eightBytes.setFloat64(0, value, B.C_Endian === $.$get$Endian_host());
        t1.addAll$1(0, buffer._eightBytesAsList);
      } else if (A._isInt(value)) {
        t1 = -2147483648 <= value && value <= 2147483647;
        t2 = buffer.__engine$_buffer;
        t3 = buffer._eightBytes;
        if (t1) {
          t2.__engine$_add$1(0, 3);
          t3.setInt32(0, value, B.C_Endian === $.$get$Endian_host());
          t2.addAll$3(0, buffer._eightBytesAsList, 0, 4);
        } else {
          t2.__engine$_add$1(0, 4);
          B.NativeByteData_methods.setInt64$3(t3, 0, value, $.$get$Endian_host());
        }
      } else if (typeof value == "string") {
        t1 = buffer.__engine$_buffer;
        t1.__engine$_add$1(0, 7);
        bytes = B.C_Utf8Encoder.convert$1(value);
        _this.writeSize$2(buffer, bytes.length);
        t1.addAll$1(0, bytes);
      } else if (type$.Uint8List._is(value)) {
        t1 = buffer.__engine$_buffer;
        t1.__engine$_add$1(0, 8);
        _this.writeSize$2(buffer, value.length);
        t1.addAll$1(0, value);
      } else if (type$.Int32List._is(value)) {
        t1 = buffer.__engine$_buffer;
        t1.__engine$_add$1(0, 9);
        t2 = value.length;
        _this.writeSize$2(buffer, t2);
        buffer._alignTo$1(4);
        t1.addAll$1(0, A.NativeUint8List_NativeUint8List$view(value.buffer, value.byteOffset, 4 * t2));
      } else if (type$.Float64List._is(value)) {
        t1 = buffer.__engine$_buffer;
        t1.__engine$_add$1(0, 11);
        t2 = value.length;
        _this.writeSize$2(buffer, t2);
        buffer._alignTo$1(8);
        t1.addAll$1(0, A.NativeUint8List_NativeUint8List$view(value.buffer, value.byteOffset, 8 * t2));
      } else if (type$.List_dynamic._is(value)) {
        buffer.__engine$_buffer.__engine$_add$1(0, 12);
        t1 = J.getInterceptor$asx(value);
        _this.writeSize$2(buffer, t1.get$length(value));
        for (t1 = t1.get$iterator(value); t1.moveNext$0();)
          _this.writeValue$2(0, buffer, t1.get$current(t1));
      } else if (type$.Map_dynamic_dynamic._is(value)) {
        buffer.__engine$_buffer.__engine$_add$1(0, 13);
        t1 = J.getInterceptor$asx(value);
        _this.writeSize$2(buffer, t1.get$length(value));
        t1.forEach$1(value, new A.StandardMessageCodec_writeValue_closure(_this, buffer));
      } else
        throw A.wrapException(A.ArgumentError$value(value, null, null));
    },
    readValue$1(_, buffer) {
      if (buffer.__engine$_position >= buffer.data.byteLength)
        throw A.wrapException(B.FormatException_oCg);
      return this.readValueOfType$2(buffer.getUint8$0(0), buffer);
    },
    readValueOfType$2(type, buffer) {
      var result, value, $length, t1, list, i, t2, t3, _this = this;
      switch (type) {
        case 0:
          result = null;
          break;
        case 1:
          result = true;
          break;
        case 2:
          result = false;
          break;
        case 3:
          value = buffer.data.getInt32(buffer.__engine$_position, B.C_Endian === $.$get$Endian_host());
          buffer.__engine$_position += 4;
          result = value;
          break;
        case 4:
          result = buffer.getInt64$0(0);
          break;
        case 5:
          $length = _this.readSize$1(buffer);
          result = A.int_parse(B.Utf8Decoder_false.convert$1(buffer.getUint8List$1($length)), 16);
          break;
        case 6:
          buffer._alignTo$1(8);
          value = buffer.data.getFloat64(buffer.__engine$_position, B.C_Endian === $.$get$Endian_host());
          buffer.__engine$_position += 8;
          result = value;
          break;
        case 7:
          $length = _this.readSize$1(buffer);
          result = B.Utf8Decoder_false.convert$1(buffer.getUint8List$1($length));
          break;
        case 8:
          result = buffer.getUint8List$1(_this.readSize$1(buffer));
          break;
        case 9:
          $length = _this.readSize$1(buffer);
          buffer._alignTo$1(4);
          t1 = buffer.data;
          list = A.NativeInt32List_NativeInt32List$view(t1.buffer, t1.byteOffset + buffer.__engine$_position, $length);
          buffer.__engine$_position = buffer.__engine$_position + 4 * $length;
          result = list;
          break;
        case 10:
          result = buffer.getInt64List$1(_this.readSize$1(buffer));
          break;
        case 11:
          $length = _this.readSize$1(buffer);
          buffer._alignTo$1(8);
          t1 = buffer.data;
          list = A.NativeFloat64List_NativeFloat64List$view(t1.buffer, t1.byteOffset + buffer.__engine$_position, $length);
          buffer.__engine$_position = buffer.__engine$_position + 8 * $length;
          result = list;
          break;
        case 12:
          $length = _this.readSize$1(buffer);
          result = [];
          for (t1 = buffer.data, i = 0; i < $length; ++i) {
            t2 = buffer.__engine$_position;
            if (t2 >= t1.byteLength)
              A.throwExpression(B.FormatException_oCg);
            buffer.__engine$_position = t2 + 1;
            result.push(_this.readValueOfType$2(t1.getUint8(t2), buffer));
          }
          break;
        case 13:
          $length = _this.readSize$1(buffer);
          t1 = type$.dynamic;
          result = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
          for (t1 = buffer.data, i = 0; i < $length; ++i) {
            t2 = buffer.__engine$_position;
            if (t2 >= t1.byteLength)
              A.throwExpression(B.FormatException_oCg);
            buffer.__engine$_position = t2 + 1;
            t2 = _this.readValueOfType$2(t1.getUint8(t2), buffer);
            t3 = buffer.__engine$_position;
            if (t3 >= t1.byteLength)
              A.throwExpression(B.FormatException_oCg);
            buffer.__engine$_position = t3 + 1;
            result.$indexSet(0, t2, _this.readValueOfType$2(t1.getUint8(t3), buffer));
          }
          break;
        default:
          throw A.wrapException(B.FormatException_oCg);
      }
      return result;
    },
    writeSize$2(buffer, value) {
      var t1, t2, t3;
      if (value < 254)
        buffer.__engine$_buffer.__engine$_add$1(0, value);
      else {
        t1 = buffer.__engine$_buffer;
        t2 = buffer._eightBytes;
        t3 = buffer._eightBytesAsList;
        if (value <= 65535) {
          t1.__engine$_add$1(0, 254);
          t2.setUint16(0, value, B.C_Endian === $.$get$Endian_host());
          t1.addAll$3(0, t3, 0, 2);
        } else {
          t1.__engine$_add$1(0, 255);
          t2.setUint32(0, value, B.C_Endian === $.$get$Endian_host());
          t1.addAll$3(0, t3, 0, 4);
        }
      }
    },
    readSize$1(buffer) {
      var value = buffer.getUint8$0(0);
      switch (value) {
        case 254:
          value = buffer.data.getUint16(buffer.__engine$_position, B.C_Endian === $.$get$Endian_host());
          buffer.__engine$_position += 2;
          return value;
        case 255:
          value = buffer.data.getUint32(buffer.__engine$_position, B.C_Endian === $.$get$Endian_host());
          buffer.__engine$_position += 4;
          return value;
        default:
          return value;
      }
    }
  };
  A.StandardMessageCodec_writeValue_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = this.buffer;
      t1.writeValue$2(0, t2, key);
      t1.writeValue$2(0, t2, value);
    },
    $signature: 40
  };
  A.StandardMethodCodec.prototype = {
    decodeMethodCall$1(methodCall) {
      var buffer, method, $arguments;
      methodCall.toString;
      buffer = new A.ReadBuffer(methodCall);
      method = B.C_StandardMessageCodec.readValue$1(0, buffer);
      $arguments = B.C_StandardMessageCodec.readValue$1(0, buffer);
      if (typeof method == "string" && buffer.__engine$_position >= methodCall.byteLength)
        return new A.MethodCall(method, $arguments);
      else
        throw A.wrapException(B.FormatException_Qi2);
    },
    encodeSuccessEnvelope$1(result) {
      var buffer = A.WriteBuffer_WriteBuffer();
      buffer.__engine$_buffer.__engine$_add$1(0, 0);
      B.C_StandardMessageCodec.writeValue$2(0, buffer, result);
      return buffer.done$0();
    },
    encodeErrorEnvelope$3$code$details$message(code, details, message) {
      var buffer = A.WriteBuffer_WriteBuffer();
      buffer.__engine$_buffer.__engine$_add$1(0, 1);
      B.C_StandardMessageCodec.writeValue$2(0, buffer, code);
      B.C_StandardMessageCodec.writeValue$2(0, buffer, message);
      B.C_StandardMessageCodec.writeValue$2(0, buffer, details);
      return buffer.done$0();
    }
  };
  A.WriteBuffer.prototype = {
    _alignTo$1(alignment) {
      var t2, i,
        t1 = this.__engine$_buffer,
        mod = B.JSInt_methods.$mod(t1.__engine$_length, alignment);
      if (mod !== 0)
        for (t2 = alignment - mod, i = 0; i < t2; ++i)
          t1.__engine$_add$1(0, 0);
    },
    done$0() {
      var t1, t2;
      this._debugFinalized = true;
      t1 = this.__engine$_buffer;
      t2 = t1.__engine$_buffer;
      return A.NativeByteData_NativeByteData$view(t2.buffer, 0, t1.__engine$_length * t2.BYTES_PER_ELEMENT);
    }
  };
  A.ReadBuffer.prototype = {
    getUint8$0(_) {
      return this.data.getUint8(this.__engine$_position++);
    },
    getInt64$0(_) {
      B.NativeByteData_methods.getInt64$2(this.data, this.__engine$_position, $.$get$Endian_host());
    },
    getUint8List$1($length) {
      var t1 = this.data,
        list = A.NativeUint8List_NativeUint8List$view(t1.buffer, t1.byteOffset + this.__engine$_position, $length);
      this.__engine$_position += $length;
      return list;
    },
    getInt64List$1($length) {
      var t1;
      this._alignTo$1(8);
      t1 = this.data;
      B.NativeByteBuffer_methods.asInt64List$2(t1.buffer, t1.byteOffset + this.__engine$_position, $length);
    },
    _alignTo$1(alignment) {
      var t1 = this.__engine$_position,
        mod = B.JSInt_methods.$mod(t1, alignment);
      if (mod !== 0)
        this.__engine$_position = t1 + (alignment - mod);
    }
  };
  A.SurfaceShadowData.prototype = {};
  A.CanvasParagraph.prototype = {
    get$width(_) {
      return this.get$_layoutService().width;
    },
    get$height(_) {
      return this.get$_layoutService().height;
    },
    get$longestLine() {
      var t1 = this.get$_layoutService().longestLine;
      t1 = t1 == null ? null : t1.width;
      return t1 == null ? 0 : t1;
    },
    get$maxIntrinsicWidth() {
      return this.get$_layoutService().maxIntrinsicWidth;
    },
    get$alphabeticBaseline(_) {
      return this.get$_layoutService().alphabeticBaseline;
    },
    get$ideographicBaseline(_) {
      return this.get$_layoutService().ideographicBaseline;
    },
    get$didExceedMaxLines(_) {
      this.get$_layoutService();
      return false;
    },
    get$_layoutService() {
      var t1, t2, _this = this,
        value = _this.__CanvasParagraph__layoutService;
      if (value === $) {
        t1 = A.CanvasElement_CanvasElement(null, null).getContext("2d");
        t2 = A._setArrayType([], type$.JSArray_EngineLineMetrics);
        A._lateInitializeOnceCheck(_this.__CanvasParagraph__layoutService, "_layoutService");
        value = _this.__CanvasParagraph__layoutService = new A.TextLayoutService(_this, t1, t2);
      }
      return value;
    },
    layout$1(_, constraints) {
      var _this = this;
      constraints = new A.ParagraphConstraints(Math.floor(constraints.width));
      if (constraints.$eq(0, _this._lastUsedConstraints))
        return;
      A._Cell$named("stopwatch");
      _this.get$_layoutService().performLayout$1(constraints);
      _this.isLaidOut = true;
      _this._lastUsedConstraints = constraints;
      _this._cachedDomElement = null;
    },
    toDomElement$0() {
      var t1,
        domElement = this._cachedDomElement;
      if (domElement == null) {
        t1 = this._createDomElement$0();
        this._cachedDomElement = t1;
        return t1;
      }
      return type$.HtmlElement._as(domElement.cloneNode(true));
    },
    _createDomElement$0() {
      var t4, cssStyle, t5, t6, lines, element, span, i, line, boxes, j, j0, box, t7, t8, color, strokeWidth, adaptedWidth, ratio, value, background, fontSize, updateDecoration, textDecoration, decorationColor, style, ellipsis, _this = this, _null = null,
        t1 = document,
        t2 = t1.createElement("p"),
        t3 = type$.HtmlElement;
      t3._as(t2);
      t4 = _this.paragraphStyle;
      cssStyle = t2.style;
      t5 = t4.textDirection;
      t6 = t5 == null ? B.TextDirection_1 : t5;
      t6 = A.textAlignToCssValue(t4.textAlign, t6);
      cssStyle.textAlign = t6 == null ? "" : t6;
      if (t4.get$lineHeight(t4) != null) {
        t6 = t4.get$lineHeight(t4);
        cssStyle.lineHeight = A.S(t6);
      }
      if (t5 != null) {
        t5 = A.textDirectionToCss(t5);
        cssStyle.direction = t5 == null ? "" : t5;
      }
      A._applySpanStylesToParagraph(t2, _this.spans);
      cssStyle = t2.style;
      cssStyle.position = "absolute";
      cssStyle.whiteSpace = "pre";
      if (_this.get$_layoutService().width > _this.get$longestLine()) {
        t5 = A.S(_this.get$_layoutService().width) + "px";
        cssStyle.width = t5;
      }
      if (t4.ellipsis != null) {
        B.CssStyleDeclaration_methods._setPropertyHelper$3(cssStyle, B.CssStyleDeclaration_methods._browserPropertyName$1(cssStyle, "overflow-y"), "hidden", "");
        t4 = A.S(_this.get$_layoutService().height) + "px";
        cssStyle.height = t4;
      }
      lines = _this.get$_layoutService().lines;
      for (element = t2, span = _null, i = 0; i < lines.length; ++i) {
        if (i > 0) {
          t4 = t1.createElement("br");
          element.appendChild(t4);
        }
        line = lines[i];
        boxes = line.boxes;
        for (j = 0, t4 = ""; j < boxes.length; j = j0) {
          j0 = j + 1;
          box = boxes[j];
          t5 = box instanceof A.SpanBox;
          if (t5 && box.span === span) {
            t4 += B.JSString_methods.substring$2(box.spanometer.paragraph.plainText, box.start.index, box.end.indexWithoutTrailingNewlines);
            continue;
          }
          if (t4.length !== 0) {
            element.appendChild(t1.createTextNode(t4.charCodeAt(0) == 0 ? t4 : t4));
            t4 = "";
            t6 = "";
          } else
            t6 = t4;
          if (t5) {
            span = box.span;
            t5 = t1.createElement("span");
            t3._as(t5);
            t6 = span.style;
            cssStyle = t5.style;
            t7 = t6.foreground;
            t8 = t7 == null;
            color = t8 ? _null : t7.get$color(t7);
            if (color == null)
              color = t6.color;
            if ((t8 ? _null : t7.get$style(t7)) === B.PaintingStyle_1) {
              cssStyle.color = "transparent";
              strokeWidth = t8 ? _null : t7.get$strokeWidth();
              if (strokeWidth != null && strokeWidth > 0)
                adaptedWidth = strokeWidth;
              else {
                t7 = $.$get$window()._debugDevicePixelRatio;
                if (t7 == null) {
                  ratio = window.devicePixelRatio;
                  t7 = ratio === 0 ? 1 : ratio;
                }
                adaptedWidth = 1 / t7;
              }
              value = A.S(adaptedWidth) + "px " + A.S(A.colorToCssString(color));
              t7 = B.CssStyleDeclaration_methods._browserPropertyName$1(cssStyle, "text-stroke");
              cssStyle.setProperty(t7, value, "");
            } else if (color != null) {
              t7 = A.colorToCssString(color);
              cssStyle.color = t7 == null ? "" : t7;
            }
            t7 = t6.background;
            background = t7 == null ? _null : t7.get$color(t7);
            if (background != null) {
              t7 = A.colorToCssString(background);
              cssStyle.backgroundColor = t7 == null ? "" : t7;
            }
            t7 = t6.height;
            if (t7 != null)
              cssStyle.lineHeight = A.S(t7);
            fontSize = t6.fontSize;
            if (fontSize != null) {
              t7 = "" + B.JSNumber_methods.floor$0(fontSize) + "px";
              cssStyle.fontSize = t7;
            }
            t7 = t6.fontWeight;
            if (t7 != null) {
              t7 = A.fontWeightToCss(t7);
              cssStyle.fontWeight = t7 == null ? "" : t7;
            }
            t7 = A.canonicalizeFontFamily(t6.fontFamily);
            cssStyle.fontFamily = t7 == null ? "" : t7;
            t7 = t6.letterSpacing;
            if (t7 != null) {
              t7 = A.S(t7) + "px";
              cssStyle.letterSpacing = t7;
            }
            t7 = t6.wordSpacing;
            if (t7 != null) {
              t7 = A.S(t7) + "px";
              cssStyle.wordSpacing = t7;
            }
            t7 = t6.decoration;
            t8 = t7 != null;
            updateDecoration = t8 && true;
            if (updateDecoration)
              if (t8) {
                t7 = t7._mask;
                t8 = (t7 | 1) === t7 ? "" + "underline " : "";
                if ((t7 | 2) === t7)
                  t8 += "overline ";
                t7 = (t7 | 4) === t7 ? t8 + "line-through " : t8;
                textDecoration = t7.length === 0 ? _null : t7.charCodeAt(0) == 0 ? t7 : t7;
                if (textDecoration != null) {
                  t7 = $.$get$_browserEngine();
                  if (t7 === B.BrowserEngine_1) {
                    t7 = t5.style;
                    t8 = B.CssStyleDeclaration_methods._browserPropertyName$1(t7, "-webkit-text-decoration");
                    t7.setProperty(t8, textDecoration, "");
                  } else
                    cssStyle.textDecoration = textDecoration;
                  decorationColor = t6.decorationColor;
                  if (decorationColor != null) {
                    t6 = A.colorToCssString(decorationColor);
                    t6.toString;
                    t7 = B.CssStyleDeclaration_methods._browserPropertyName$1(cssStyle, "text-decoration-color");
                    cssStyle.setProperty(t7, t6, "");
                  }
                }
              }
            t2.appendChild(t5);
            t4 += B.JSString_methods.substring$2(box.spanometer.paragraph.plainText, box.start.index, box.end.indexWithoutTrailingNewlines);
            element = t5;
            t5 = t4;
          } else {
            if (box instanceof A.PlaceholderBox) {
              t5 = box.placeholder;
              element = t1.createElement("span");
              style = element.style;
              style.display = "inline-block";
              t7 = A.S(t5.get$width(t5)) + "px";
              style.width = t7;
              t7 = A.S(t5.get$height(t5)) + "px";
              style.height = t7;
              t5 = A._placeholderAlignmentToCssVerticalAlign(t5);
              style.verticalAlign = t5 == null ? "" : t5;
              t2.appendChild(element);
            } else
              throw A.wrapException(A.UnimplementedError$("Unknown box type: " + A.getRuntimeType(box).toString$0(0)));
            t5 = t6;
            element = t2;
            span = _null;
          }
        }
        if (t4.length !== 0)
          element.appendChild(t1.createTextNode(t4.charCodeAt(0) == 0 ? t4 : t4));
        ellipsis = line.ellipsis;
        if (ellipsis != null)
          element.appendChild(t1.createTextNode(ellipsis));
      }
      return t2;
    },
    getBoxesForPlaceholders$0() {
      return this.get$_layoutService().getBoxesForPlaceholders$0();
    },
    getBoxesForRange$4$boxHeightStyle$boxWidthStyle(start, end, boxHeightStyle, boxWidthStyle) {
      return this.get$_layoutService().getBoxesForRange$4(start, end, boxHeightStyle, boxWidthStyle);
    },
    getPositionForOffset$1(offset) {
      return this.get$_layoutService().getPositionForOffset$1(offset);
    }
  };
  A.FlatTextSpan.prototype = {$isParagraphSpan: 1};
  A.StyleNode.prototype = {
    resolveStyle$0() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, _this = this,
        style = _this._cachedStyle;
      if (style == null) {
        t1 = _this.get$_color(_this);
        t2 = _this.get$_decoration();
        t3 = _this.get$_decorationColor();
        t4 = _this.get$_decorationStyle();
        t5 = _this.get$_decorationThickness();
        t6 = _this.get$_fontWeight(_this);
        t7 = _this.get$_fontStyle(_this);
        t8 = _this.get$_textBaseline();
        t9 = _this.get$_fontFamily(_this);
        t10 = _this.get$_fontFamilyFallback();
        t11 = _this.get$_fontFeatures();
        t12 = _this.get$_fontSize(_this);
        t13 = _this.get$_letterSpacing(_this);
        t14 = _this.get$_wordSpacing(_this);
        t15 = _this.get$__engine$_height(_this);
        t16 = _this.get$_locale();
        t14 = A.EngineTextStyle$only(_this.get$_background(_this), t1, t2, t3, t4, t5, t9, t10, t11, t12, t7, t6, _this.get$_foreground(), t15, t13, t16, _this.get$_shadows(), t8, t14);
        _this._cachedStyle = t14;
        return t14;
      }
      return style;
    }
  };
  A.ChildStyleNode.prototype = {
    get$_color(_) {
      var t1 = this.style.color;
      if (t1 == null)
        if (this.get$_foreground() == null) {
          t1 = this.parent;
          t1 = t1.get$_color(t1);
        } else
          t1 = null;
      return t1;
    },
    get$_decoration() {
      var t1 = this.style.decoration;
      return t1 == null ? this.parent.get$_decoration() : t1;
    },
    get$_decorationColor() {
      var t1 = this.style.decorationColor;
      return t1 == null ? this.parent.get$_decorationColor() : t1;
    },
    get$_decorationStyle() {
      var t1 = this.parent.get$_decorationStyle();
      return t1;
    },
    get$_decorationThickness() {
      var t1 = this.style.decorationThickness;
      return t1 == null ? this.parent.get$_decorationThickness() : t1;
    },
    get$_fontWeight(_) {
      var t1 = this.style.fontWeight;
      if (t1 == null) {
        t1 = this.parent;
        t1 = t1.get$_fontWeight(t1);
      }
      return t1;
    },
    get$_fontStyle(_) {
      var t1 = this.parent;
      t1 = t1.get$_fontStyle(t1);
      return t1;
    },
    get$_textBaseline() {
      var t1 = this.style.textBaseline;
      return t1 == null ? this.parent.get$_textBaseline() : t1;
    },
    get$_fontFamilyFallback() {
      var t1 = this.style.fontFamilyFallback;
      return t1 == null ? this.parent.get$_fontFamilyFallback() : t1;
    },
    get$_fontFeatures() {
      var t1 = this.parent.get$_fontFeatures();
      return t1;
    },
    get$_fontSize(_) {
      var t1 = this.style.fontSize;
      if (t1 == null) {
        t1 = this.parent;
        t1 = t1.get$_fontSize(t1);
      }
      return t1;
    },
    get$_letterSpacing(_) {
      var t1 = this.style.letterSpacing;
      if (t1 == null) {
        t1 = this.parent;
        t1 = t1.get$_letterSpacing(t1);
      }
      return t1;
    },
    get$_wordSpacing(_) {
      var t1 = this.style.wordSpacing;
      if (t1 == null) {
        t1 = this.parent;
        t1 = t1.get$_wordSpacing(t1);
      }
      return t1;
    },
    get$__engine$_height(_) {
      var t1 = this.style.height;
      if (t1 == null) {
        t1 = this.parent;
        t1 = t1.get$__engine$_height(t1);
      }
      return t1;
    },
    get$_locale() {
      var t1 = this.parent.get$_locale();
      return t1;
    },
    get$_background(_) {
      var t1 = this.style.background;
      if (t1 == null) {
        t1 = this.parent;
        t1 = t1.get$_background(t1);
      }
      return t1;
    },
    get$_foreground() {
      var t1 = this.style.foreground;
      return t1 == null ? this.parent.get$_foreground() : t1;
    },
    get$_shadows() {
      var t1 = this.parent.get$_shadows();
      return t1;
    },
    get$_fontFamily(_) {
      var t1 = this.style;
      if (t1.isFontFamilyProvided)
        t1 = t1.fontFamily;
      else {
        t1 = this.parent;
        t1 = t1.get$_fontFamily(t1);
      }
      return t1;
    }
  };
  A.RootStyleNode.prototype = {
    get$_decoration() {
      return null;
    },
    get$_decorationColor() {
      return null;
    },
    get$_decorationStyle() {
      return null;
    },
    get$_decorationThickness() {
      return null;
    },
    get$_fontWeight(_) {
      return this.paragraphStyle.fontWeight;
    },
    get$_fontStyle(_) {
      return this.paragraphStyle.fontStyle;
    },
    get$_textBaseline() {
      return null;
    },
    get$_fontFamily(_) {
      var t1 = this.paragraphStyle.fontFamily;
      return t1 == null ? "sans-serif" : t1;
    },
    get$_fontFamilyFallback() {
      return null;
    },
    get$_fontFeatures() {
      return null;
    },
    get$_fontSize(_) {
      var t1 = this.paragraphStyle.fontSize;
      return t1 == null ? 14 : t1;
    },
    get$_letterSpacing(_) {
      return null;
    },
    get$_wordSpacing(_) {
      return null;
    },
    get$__engine$_height(_) {
      return this.paragraphStyle.height;
    },
    get$_locale() {
      return this.paragraphStyle.locale;
    },
    get$_background(_) {
      return null;
    },
    get$_foreground() {
      return null;
    },
    get$_shadows() {
      return null;
    },
    get$_color() {
      return B.Color_4294901760;
    }
  };
  A.CanvasParagraphBuilder.prototype = {
    get$_currentStyleNode() {
      var t1 = this._styleStack,
        t2 = t1.length;
      return t2 === 0 ? this._rootStyleNode : t1[t2 - 1];
    },
    get$placeholderScales() {
      return this._placeholderScales;
    },
    pushStyle$1(_, style) {
      this._styleStack.push(new A.ChildStyleNode(this.get$_currentStyleNode(), type$.EngineTextStyle._as(style)));
    },
    pop$0(_) {
      var t1 = this._styleStack;
      if (t1.length !== 0)
        t1.pop();
    },
    addText$1(_, text) {
      var decoration, _this = this,
        style = _this.get$_currentStyleNode().resolveStyle$0(),
        t1 = _this._plainTextBuffer,
        t2 = t1._contents,
        t3 = t2 + text;
      t1._contents = t3;
      t1 = _this._drawOnCanvas;
      if (t1) {
        decoration = style.decoration;
        if (decoration != null) {
          t1 = decoration._mask;
          t1 = B.TextDecoration_0._mask !== t1;
        } else
          t1 = false;
        if (t1) {
          _this._drawOnCanvas = false;
          t1 = false;
        } else
          t1 = true;
      }
      t1;
      _this._spans.push(new A.FlatTextSpan(style, t2.length, t3.length));
    },
    build$0(_) {
      var _this = this,
        t1 = _this._plainTextBuffer._contents;
      return new A.CanvasParagraph(_this._spans, _this._paragraphStyle, t1.charCodeAt(0) == 0 ? t1 : t1, _this._drawOnCanvas);
    }
  };
  A.FontCollection.prototype = {
    registerFonts$1(assetManager) {
      return this.registerFonts$body$FontCollection(assetManager);
    },
    registerFonts$body$FontCollection(assetManager) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, e, exception, t1, fontManifest, t2, t3, t4, t5, t6, t7, family, t8, t9, asset, descriptors, t10, t11, byteData, $async$exception;
      var $async$registerFonts$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              byteData = null;
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(assetManager.load$1(0, "FontManifest.json"), $async$registerFonts$1);
            case 7:
              // returning from await.
              byteData = $async$result;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.AssetManagerException) {
                e = t1;
                if (e.httpStatus === 404) {
                  $.$get$printWarning().call$1("Font manifest does not exist at `" + e.url + "` \u2013 ignoring.");
                  // goto return
                  $async$goto = 1;
                  break;
                } else
                  throw $async$exception;
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              fontManifest = type$.nullable_List_dynamic._as(B.C_JsonCodec.decode$1(0, B.C_Utf8Codec.decode$1(0, A.NativeUint8List_NativeUint8List$view(byteData.buffer, 0, null))));
              if (fontManifest == null)
                throw A.wrapException(A.AssertionError$(string$.There_));
              if ($.$get$supportsFontLoadingApi())
                $async$self._assetFontManager = A.FontManager_FontManager();
              else
                $async$self._assetFontManager = new A._PolyfillFontManager(A._setArrayType([], type$.JSArray_Future_void));
              for (t1 = type$.Map_String_dynamic, t2 = J.cast$1$0$ax(fontManifest, t1), t2 = new A.ListIterator(t2, t2.get$length(t2)), t3 = type$.String, t4 = type$.List_dynamic, t5 = A._instanceType(t2)._precomputed1; t2.moveNext$0();) {
                t6 = t2.__internal$_current;
                if (t6 == null)
                  t6 = t5._as(t6);
                t7 = J.getInterceptor$asx(t6);
                family = A._asStringQ(t7.$index(t6, "family"));
                t6 = J.cast$1$0$ax(t4._as(t7.$index(t6, "fonts")), t1);
                for (t6 = new A.ListIterator(t6, t6.get$length(t6)), t7 = A._instanceType(t6)._precomputed1; t6.moveNext$0();) {
                  t8 = t6.__internal$_current;
                  if (t8 == null)
                    t8 = t7._as(t8);
                  t9 = J.getInterceptor$asx(t8);
                  asset = A._asString(t9.$index(t8, "asset"));
                  descriptors = A.LinkedHashMap_LinkedHashMap$_empty(t3, t3);
                  for (t10 = J.get$iterator$ax(t9.get$keys(t8)); t10.moveNext$0();) {
                    t11 = t10.get$current(t10);
                    if (t11 !== "asset")
                      descriptors.$indexSet(0, t11, A.S(t9.$index(t8, t11)));
                  }
                  t8 = $async$self._assetFontManager;
                  t8.toString;
                  family.toString;
                  t8.registerAsset$3(family, "url(" + assetManager.getAssetUrl$1(asset) + ")", descriptors);
                }
              }
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$registerFonts$1, $async$completer);
    },
    ensureFontsLoaded$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$ensureFontsLoaded$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._assetFontManager;
              $async$goto = 2;
              return A._asyncAwait(t1 == null ? null : A.Future_wait(t1._fontLoadingFutures, type$.void), $async$ensureFontsLoaded$0);
            case 2:
              // returning from await.
              t1 = $async$self._testFontManager;
              $async$goto = 3;
              return A._asyncAwait(t1 == null ? null : A.Future_wait(t1._fontLoadingFutures, type$.void), $async$ensureFontsLoaded$0);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$ensureFontsLoaded$0, $async$completer);
    }
  };
  A.FontManager.prototype = {
    registerAsset$3(family, asset, descriptors) {
      var t1 = $.$get$FontManager_startWithDigit()._nativeRegExp;
      if (t1.test(family) || $.$get$FontManager_notPunctuation().stringMatch$1(family) !== family)
        this._loadFontFace$3("'" + family + "'", asset, descriptors);
      this._loadFontFace$3(family, asset, descriptors);
    },
    _loadFontFace$3(family, asset, descriptors) {
      var fontFace, e, exception;
      try {
        fontFace = A.FontFace_FontFace(family, asset, descriptors);
        this._fontLoadingFutures.push(A.promiseToFuture(fontFace.load(), type$.FontFace).then$1$2$onError(0, new A.FontManager__loadFontFace_closure(fontFace), new A.FontManager__loadFontFace_closure0(family), type$.void));
      } catch (exception) {
        e = A.unwrapException(exception);
        $.$get$printWarning().call$1('Error while loading font family "' + family + '":\n' + A.S(e));
      }
    }
  };
  A.FontManager__loadFontFace_closure.prototype = {
    call$1(_) {
      document.fonts.add(this.fontFace);
    },
    $signature: 226
  };
  A.FontManager__loadFontFace_closure0.prototype = {
    call$1(e) {
      $.$get$printWarning().call$1('Error while trying to load font family "' + this.family + '":\n' + A.S(e));
    },
    $signature: 4
  };
  A._PolyfillFontManager.prototype = {
    registerAsset$3(family, asset, descriptors) {
      var fallbackFontName, t3, sansSerifWidth, _fontLoadStart, fontStyleMap, t4, fontFaceDeclaration, fontLoadStyle, _s5_ = "style", _s6_ = "weight",
        t1 = document,
        paragraph = t1.createElement("p"),
        t2 = paragraph.style;
      t2.position = "absolute";
      t2 = paragraph.style;
      t2.visibility = "hidden";
      t2 = paragraph.style;
      t2.fontSize = "72px";
      t2 = $.$get$_browserEngine();
      fallbackFontName = t2 === B.BrowserEngine_4 ? "Times New Roman" : "sans-serif";
      t2 = paragraph.style;
      t2.fontFamily = fallbackFontName;
      if (descriptors.$index(0, _s5_) != null) {
        t2 = paragraph.style;
        t3 = descriptors.$index(0, _s5_);
        t2.fontStyle = t3 == null ? "" : t3;
      }
      if (descriptors.$index(0, _s6_) != null) {
        t2 = paragraph.style;
        t3 = descriptors.$index(0, _s6_);
        t2.fontWeight = t3 == null ? "" : t3;
      }
      paragraph.textContent = "giItT1WQy@!-/#";
      t1.body.appendChild(paragraph);
      sansSerifWidth = B.JSNumber_methods.round$0(paragraph.offsetWidth);
      t2 = paragraph.style;
      t3 = "'" + family + "', " + fallbackFontName;
      t2.fontFamily = t3;
      t2 = new A._Future($.Zone__current, type$._Future_void);
      _fontLoadStart = A._Cell$named("_fontLoadStart");
      t3 = type$.String;
      fontStyleMap = A.LinkedHashMap_LinkedHashMap$_empty(t3, type$.nullable_String);
      fontStyleMap.$indexSet(0, "font-family", "'" + family + "'");
      fontStyleMap.$indexSet(0, "src", asset);
      if (descriptors.$index(0, _s5_) != null)
        fontStyleMap.$indexSet(0, "font-style", descriptors.$index(0, _s5_));
      if (descriptors.$index(0, _s6_) != null)
        fontStyleMap.$indexSet(0, "font-weight", descriptors.$index(0, _s6_));
      t4 = fontStyleMap.$ti._eval$1("LinkedHashMapKeyIterable<1>");
      fontFaceDeclaration = A.MappedIterable_MappedIterable(new A.LinkedHashMapKeyIterable(fontStyleMap, t4), new A._PolyfillFontManager_registerAsset_closure(fontStyleMap), t4._eval$1("Iterable.E"), t3).join$1(0, " ");
      fontLoadStyle = t1.createElement("style");
      fontLoadStyle.type = "text/css";
      B.StyleElement_methods.setInnerHtml$1(fontLoadStyle, "@font-face { " + fontFaceDeclaration + " }");
      t1.head.appendChild(fontLoadStyle);
      if (B.JSString_methods.contains$1(family.toLowerCase(), "icon")) {
        B.ParagraphElement_methods.remove$0(paragraph);
        return;
      }
      _fontLoadStart.__late_helper$_value = new A.DateTime(Date.now(), false);
      new A._PolyfillFontManager_registerAsset__watchWidth(paragraph, sansSerifWidth, new A._AsyncCompleter(t2, type$._AsyncCompleter_void), _fontLoadStart, family).call$0();
      this._fontLoadingFutures.push(t2);
    }
  };
  A._PolyfillFontManager_registerAsset__watchWidth.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.paragraph;
      if (B.JSNumber_methods.round$0(t1.offsetWidth) !== _this.sansSerifWidth) {
        B.ParagraphElement_methods.remove$0(t1);
        _this.completer.complete$0(0);
      } else if (A.Duration$(0, Date.now() - _this._fontLoadStart._readLocal$0()._core$_value)._duration > 2000000) {
        _this.completer.complete$0(0);
        throw A.wrapException(A.Exception_Exception("Timed out trying to load font: " + _this.family));
      } else
        A.Timer_Timer(B.Duration_50000, _this);
    },
    $signature: 0
  };
  A._PolyfillFontManager_registerAsset_closure.prototype = {
    call$1($name) {
      return $name + ": " + A.S(this.fontStyleMap.$index(0, $name)) + ";";
    },
    $signature: 38
  };
  A.TextLayoutService.prototype = {
    performLayout$1(constraints) {
      var t4, spanometer, currentLine, t5, t6, spanIndex, span, nextBreak, t7, additionalWidth, revertedToSpan, _i, line, longestLineWidth, breakToNextLine, widthOfLastSegment, _this = this,
        t1 = _this.paragraph,
        t2 = t1.spans,
        spanCount = t2.length,
        t3 = _this.width = constraints.width;
      _this.height = 0;
      _this.longestLine = null;
      _this.maxIntrinsicWidth = _this.minIntrinsicWidth = 0;
      _this.didExceedMaxLines = false;
      t4 = _this.lines;
      B.JSArray_methods.set$length(t4, 0);
      if (spanCount === 0)
        return;
      spanometer = new A.Spanometer(t1, _this.context);
      currentLine = A.LineBuilder$_(t1, spanometer, 0, 0, t3, B.LineBreakResult_vhn);
      for (t5 = t1.paragraphStyle.ellipsis, t6 = t5 != null, spanIndex = 0; true;) {
        if (spanIndex === spanCount) {
          if (currentLine._segments.length !== 0 || currentLine.__engine$_end.type !== B.LineBreakType_3) {
            currentLine.extendToEndOfText$0();
            t4.push(currentLine.build$0(0));
          }
          break;
        }
        span = t2[spanIndex];
        spanometer.set$currentSpan(span);
        nextBreak = currentLine.findNextBreak$0();
        t7 = nextBreak.lineBreak;
        additionalWidth = currentLine.getAdditionalWidthTo$1(t7);
        if (currentLine.width + additionalWidth <= t3) {
          currentLine.extendTo$1(nextBreak);
          if (t7.type === B.LineBreakType_2) {
            t4.push(currentLine.build$0(0));
            currentLine = currentLine.nextLine$0();
          }
        } else if ((t6 && true || false) && t6) {
          currentLine.forceBreak$3$allowEmpty$ellipsis(nextBreak, true, t5);
          t4.push(currentLine.build$1$ellipsis(0, t5));
          break;
        } else if (!currentLine.isBreakable) {
          currentLine.forceBreak$2$allowEmpty(nextBreak, false);
          t4.push(currentLine.build$0(0));
          currentLine = currentLine.nextLine$0();
        } else {
          currentLine.revertToLastBreakOpportunity$0();
          revertedToSpan = B.JSArray_methods.get$last(currentLine._segments).span;
          for (; span !== revertedToSpan;) {
            --spanIndex;
            span = t2[spanIndex];
          }
          t4.push(currentLine.build$0(0));
          currentLine = currentLine.nextLine$0();
        }
        if (currentLine.__engine$_end.index >= span.end) {
          currentLine.createBox$0();
          ++spanIndex;
        }
      }
      for (t5 = t4.length, _i = 0; _i < t5; ++_i) {
        line = t4[_i];
        _this.height = _this.height + line.height;
        if (_this.alphabeticBaseline === -1) {
          t6 = line.baseline;
          _this.alphabeticBaseline = t6;
          _this.ideographicBaseline = t6 * 1.1662499904632568;
        }
        t6 = _this.longestLine;
        longestLineWidth = t6 == null ? null : t6.width;
        if (longestLineWidth == null)
          longestLineWidth = 0;
        if (longestLineWidth < line.width)
          _this.longestLine = line;
      }
      currentLine = A.LineBuilder$_(t1, spanometer, 0, 0, t3, B.LineBreakResult_vhn);
      for (spanIndex = 0; spanIndex < spanCount;) {
        span = t2[spanIndex];
        spanometer.set$currentSpan(span);
        nextBreak = currentLine.findNextBreak$0();
        currentLine.extendTo$1(nextBreak);
        breakToNextLine = nextBreak.lineBreak.type === B.LineBreakType_2 && true;
        if (currentLine.__engine$_end.index >= span.end)
          ++spanIndex;
        widthOfLastSegment = B.JSArray_methods.get$last(currentLine._segments).width;
        if (_this.minIntrinsicWidth < widthOfLastSegment)
          _this.minIntrinsicWidth = widthOfLastSegment;
        t1 = _this.maxIntrinsicWidth;
        t3 = currentLine.widthIncludingSpace;
        if (t1 < t3)
          _this.maxIntrinsicWidth = t3;
        if (breakToNextLine)
          currentLine = currentLine.nextLine$0();
      }
    },
    getBoxesForPlaceholders$0() {
      var t1, t2, _i, line, t3, t4, $top, lineTop, t5, t6, t7, _i0, box, t8, t9, t10, t11, top0,
        _s11_ = "startOffset",
        _s9_ = "lineWidth",
        boxes = A._setArrayType([], type$.JSArray_TextBox);
      for (t1 = this.lines, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        line = t1[_i];
        for (t3 = line.boxes, t4 = t3.length, $top = line.baseline, lineTop = $top - line.ascent, t5 = line.left, t6 = line.height, t7 = lineTop + t6, _i0 = 0; _i0 < t3.length; t3.length === t4 || (0, A.throwConcurrentModificationError)(t3), ++_i0) {
          box = t3[_i0];
          if (box instanceof A.PlaceholderBox) {
            t8 = box.paragraphDirection;
            t9 = t8 === B.TextDirection_1;
            t10 = t9 ? A._lateReadCheck(box.__RangeBox_startOffset, _s11_) : A._lateReadCheck(box.__RangeBox_lineWidth, _s9_) - (A._lateReadCheck(box.__RangeBox_startOffset, _s11_) + box.width);
            t9 = t9 ? A._lateReadCheck(box.__RangeBox_startOffset, _s11_) + box.width : A._lateReadCheck(box.__RangeBox_lineWidth, _s9_) - A._lateReadCheck(box.__RangeBox_startOffset, _s11_);
            t11 = box.placeholder;
            switch (t11.get$alignment()) {
              case B.PlaceholderAlignment_3:
                top0 = lineTop;
                break;
              case B.PlaceholderAlignment_5:
                top0 = lineTop + B.JSNumber_methods.$sub(t6, t11.get$height(t11)) / 2;
                break;
              case B.PlaceholderAlignment_4:
                top0 = B.JSNumber_methods.$sub(t7, t11.get$height(t11));
                break;
              case B.PlaceholderAlignment_1:
                top0 = B.JSNumber_methods.$sub($top, t11.get$height(t11));
                break;
              case B.PlaceholderAlignment_2:
                top0 = $top;
                break;
              case B.PlaceholderAlignment_0:
                top0 = B.JSNumber_methods.$sub($top, t11.get$baselineOffset());
                break;
              default:
                top0 = null;
            }
            boxes.push(new A.TextBox(t5 + t10, top0, t5 + t9, B.JSNumber_methods.$add(top0, t11.get$height(t11)), t8));
          }
        }
      }
      return boxes;
    },
    getBoxesForRange$4(start, end, boxHeightStyle, boxWidthStyle) {
      var $length, boxes, t1, t2, _i, line, t3, t4, _i0, box;
      if (start >= end || start < 0 || end < 0)
        return A._setArrayType([], type$.JSArray_TextBox);
      $length = this.paragraph.plainText.length;
      if (start > $length || end > $length)
        return A._setArrayType([], type$.JSArray_TextBox);
      boxes = A._setArrayType([], type$.JSArray_TextBox);
      for (t1 = this.lines, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        line = t1[_i];
        if (start < line.endIndex && line.startIndex < end)
          for (t3 = line.boxes, t4 = t3.length, _i0 = 0; _i0 < t3.length; t3.length === t4 || (0, A.throwConcurrentModificationError)(t3), ++_i0) {
            box = t3[_i0];
            if (box instanceof A.SpanBox && start < box.end.index && box.start.index < end)
              boxes.push(box.intersect$3(line, start, end));
          }
      }
      return boxes;
    },
    getPositionForOffset$1(offset) {
      var dx, _i, box, t3, t4,
        _s11_ = "startOffset",
        _s9_ = "lineWidth",
        line = this._findLineForY$1(offset._dy),
        t1 = offset._dx,
        t2 = line.left;
      if (t1 <= t2)
        return new A.TextPosition(line.startIndex, B.TextAffinity_1);
      if (t1 >= t2 + line.widthWithTrailingSpaces)
        return new A.TextPosition(line.endIndexWithoutNewlines, B.TextAffinity_0);
      dx = t1 - t2;
      for (t1 = line.boxes, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        box = t1[_i];
        t3 = box.paragraphDirection === B.TextDirection_1;
        if ((t3 ? A._lateReadCheck(box.__RangeBox_startOffset, _s11_) : A._lateReadCheck(box.__RangeBox_lineWidth, _s9_) - (A._lateReadCheck(box.__RangeBox_startOffset, _s11_) + box.width)) <= dx) {
          t4 = dx <= (t3 ? A._lateReadCheck(box.__RangeBox_startOffset, _s11_) + box.width : A._lateReadCheck(box.__RangeBox_lineWidth, _s9_) - A._lateReadCheck(box.__RangeBox_startOffset, _s11_));
          t3 = t4;
        } else
          t3 = false;
        if (t3)
          return box.getPositionForX$1(dx);
      }
      return new A.TextPosition(line.startIndex, B.TextAffinity_1);
    },
    _findLineForY$1(y) {
      var t1, t2, _i, line, t3;
      for (t1 = this.lines, t2 = t1.length, _i = 0; _i < t2; ++_i) {
        line = t1[_i];
        t3 = line.height;
        if (y <= t3)
          return line;
        y -= t3;
      }
      return B.JSArray_methods.get$last(t1);
    }
  };
  A.RangeBox.prototype = {
    get$left(_) {
      var _this = this,
        _s11_ = "startOffset";
      return _this.paragraphDirection === B.TextDirection_1 ? A._lateReadCheck(_this.__RangeBox_startOffset, _s11_) : A._lateReadCheck(_this.__RangeBox_lineWidth, "lineWidth") - (A._lateReadCheck(_this.__RangeBox_startOffset, _s11_) + _this.width);
    },
    get$right(_) {
      var _this = this,
        _s11_ = "startOffset";
      return _this.paragraphDirection === B.TextDirection_1 ? A._lateReadCheck(_this.__RangeBox_startOffset, _s11_) + _this.width : A._lateReadCheck(_this.__RangeBox_lineWidth, "lineWidth") - A._lateReadCheck(_this.__RangeBox_startOffset, _s11_);
    }
  };
  A.PlaceholderBox.prototype = {};
  A.SpanBox.prototype = {
    intersect$3(line, start, end) {
      var before, t2, after, left, right, _this = this,
        $top = line.baseline - _this.baseline,
        t1 = _this.start.index;
      if (start <= t1)
        before = 0;
      else {
        t2 = _this.spanometer;
        t2.set$currentSpan(_this.span);
        before = t2._measure$2(t1, start);
      }
      t1 = _this.end.indexWithoutTrailingNewlines;
      if (end >= t1)
        after = 0;
      else {
        t2 = _this.spanometer;
        t2.set$currentSpan(_this.span);
        after = t2._measure$2(end, t1);
      }
      t1 = _this.contentDirection;
      if (t1 === B.TextDirection_1) {
        left = _this.get$left(_this) + before;
        right = _this.get$right(_this) - after;
      } else {
        left = _this.get$left(_this) + after;
        right = _this.get$right(_this) - before;
      }
      t2 = line.left;
      return new A.TextBox(t2 + left, $top, t2 + right, $top + _this.height, t1);
    },
    getPositionForX$1(x) {
      var startIndex, endIndex, cutoff, t2, _this = this,
        t1 = _this.spanometer;
      t1.set$currentSpan(_this.span);
      x = _this.contentDirection !== B.TextDirection_1 ? _this.get$right(_this) - x : x - _this.get$left(_this);
      startIndex = _this.start.index;
      endIndex = _this.end.indexWithoutTrailingNewlines;
      cutoff = t1.forceBreak$4$allowEmpty$availableWidth(startIndex, endIndex, true, x);
      if (cutoff === endIndex)
        return new A.TextPosition(cutoff, B.TextAffinity_0);
      t2 = cutoff + 1;
      if (x - t1._measure$2(startIndex, cutoff) < t1._measure$2(startIndex, t2) - x)
        return new A.TextPosition(cutoff, B.TextAffinity_1);
      else
        return new A.TextPosition(t2, B.TextAffinity_0);
    }
  };
  A.LineSegment.prototype = {};
  A.LineBuilder.prototype = {
    set$end(_, value) {
      if (value.type !== B.LineBreakType_1)
        this.isBreakable = true;
      this.__engine$_end = value;
    },
    get$alignOffset() {
      var emptySpace = this.maxWidth - this.width,
        t1 = this.paragraph.paragraphStyle;
      switch (t1.textAlign.index) {
        case 2:
          return emptySpace / 2;
        case 1:
          return emptySpace;
        case 4:
          t1 = t1.textDirection;
          return (t1 == null ? B.TextDirection_1 : t1) === B.TextDirection_0 ? emptySpace : 0;
        case 5:
          t1 = t1.textDirection;
          return (t1 == null ? B.TextDirection_1 : t1) === B.TextDirection_0 ? 0 : emptySpace;
        default:
          return 0;
      }
    },
    getAdditionalWidthTo$1(newEnd) {
      var _this = this,
        t1 = _this.__engine$_end.index,
        t2 = newEnd.indexWithoutTrailingSpaces;
      if (t1 === t2)
        return 0;
      return _this.widthIncludingSpace - _this.width + _this.spanometer._measure$2(t1, t2);
    },
    get$_isLastBoxAPlaceholder() {
      var t1 = this._boxes;
      if (t1.length === 0)
        return false;
      return B.JSArray_methods.get$last(t1) instanceof A.PlaceholderBox;
    },
    get$_currentBoxDirection() {
      var value = this.__LineBuilder__currentBoxDirection;
      if (value === $) {
        value = this.paragraph.paragraphStyle.textDirection;
        value = this.__LineBuilder__currentBoxDirection = value == null ? B.TextDirection_1 : value;
      }
      return value;
    },
    get$_currentContentDirection() {
      var value = this.__LineBuilder__currentContentDirection;
      if (value === $) {
        value = this.paragraph.paragraphStyle.textDirection;
        value = this.__LineBuilder__currentContentDirection = value == null ? B.TextDirection_1 : value;
      }
      return value;
    },
    extendTo$1(newEnd) {
      var _this = this,
        t1 = _this.ascent,
        t2 = _this.spanometer,
        t3 = t2._currentRuler;
      _this.ascent = Math.max(t1, t3.get$alphabeticBaseline(t3));
      t3 = _this.descent;
      t1 = t2._currentRuler;
      t1 = t1.get$height(t1);
      t2 = t2._currentRuler;
      _this.descent = Math.max(t3, t1 - t2.get$alphabeticBaseline(t2));
      t1 = newEnd.isSpaceOnly;
      if (!t1) {
        t2 = newEnd.textDirection;
        t2 = _this.get$_currentBoxDirection() !== t2 || _this.get$_currentContentDirection() !== t2;
      } else
        t2 = true;
      if (t2)
        _this.createBox$0();
      t2 = newEnd.textDirection;
      t3 = t2 == null;
      _this.__LineBuilder__currentBoxDirection = t3 ? _this.get$_currentBoxDirection() : t2;
      _this.__LineBuilder__currentContentDirection = t3 ? B.TextDirection_1 : t2;
      _this._addSegment$1(_this._createSegment$1(newEnd.lineBreak));
      if (t1)
        _this.createBox$1$isSpaceOnly(true);
    },
    extendToEndOfText$0() {
      var t1, endOfText, t2, t3, _this = this;
      if (_this.__engine$_end.type === B.LineBreakType_3)
        return;
      t1 = _this.paragraph.plainText.length;
      endOfText = new A.LineBreakResult(t1, t1, t1, B.LineBreakType_3);
      t1 = _this.spanometer;
      if (t1._currentSpan != null) {
        t2 = _this.ascent;
        t3 = t1._currentRuler;
        _this.ascent = Math.max(t2, t3.get$alphabeticBaseline(t3));
        t3 = _this.descent;
        t2 = t1._currentRuler;
        t2 = t2.get$height(t2);
        t1 = t1._currentRuler;
        _this.descent = Math.max(t3, t2 - t1.get$alphabeticBaseline(t1));
        _this._addSegment$1(_this._createSegment$1(endOfText));
      } else
        _this.set$end(0, endOfText);
    },
    _createSegment$1(segmentEnd) {
      var t3,
        segmentStart = this.__engine$_end,
        t1 = this.spanometer,
        t2 = t1._currentSpan;
      t2.toString;
      t3 = segmentStart.index;
      return new A.LineSegment(t2, segmentStart, segmentEnd, t1._measure$2(t3, segmentEnd.indexWithoutTrailingSpaces), t1._measure$2(t3, segmentEnd.indexWithoutTrailingNewlines));
    },
    _addSegment$1(segment) {
      var t1, t2, _this = this;
      _this._segments.push(segment);
      t1 = segment.width;
      if (t1 !== 0) {
        t2 = _this.width;
        _this.width = t2 + (_this.widthIncludingSpace - t2 + t1);
      }
      _this.widthIncludingSpace = _this.widthIncludingSpace + segment.widthIncludingSpace;
      _this.set$end(0, segment.end);
    },
    _popSegment$0() {
      var t2, i, widthOfTrailingSpace, poppedBox, _this = this,
        t1 = _this._segments,
        poppedSegment = t1.pop();
      if (t1.length === 0) {
        _this.widthIncludingSpace = _this.width = 0;
        _this.set$end(0, _this.start);
      } else {
        _this.widthIncludingSpace = _this.widthIncludingSpace - poppedSegment.widthIncludingSpace;
        _this.set$end(0, B.JSArray_methods.get$last(t1).end);
        t2 = poppedSegment.width;
        if (t2 !== 0) {
          _this.width -= t2;
          i = t1.length - 1;
          widthOfTrailingSpace = 0;
          while (true) {
            t2 = i >= 0;
            if (!(t2 && t1[i].width === 0))
              break;
            widthOfTrailingSpace += t1[i].widthIncludingSpace;
            --i;
          }
          if (t2) {
            t1 = t1[i];
            widthOfTrailingSpace += t1.widthIncludingSpace - t1.width;
          }
          _this.width -= widthOfTrailingSpace;
        }
      }
      if (_this.get$_currentBoxStart().index > poppedSegment.start.index) {
        poppedBox = _this._boxes.pop();
        _this._currentBoxStartOffset = _this._currentBoxStartOffset - poppedBox.width;
        if (poppedBox instanceof A.SpanBox && poppedBox.isSpaceOnly)
          --_this._spaceBoxCount;
      }
      return poppedSegment;
    },
    forceBreak$3$allowEmpty$ellipsis(nextBreak, allowEmpty, ellipsis) {
      var t1, t2, breakingPoint, availableWidth, segmentToBreak, _this = this;
      if (ellipsis == null) {
        t1 = _this.widthIncludingSpace;
        t2 = nextBreak.lineBreak.indexWithoutTrailingSpaces;
        breakingPoint = _this.spanometer.forceBreak$4$allowEmpty$availableWidth(_this.__engine$_end.index, t2, allowEmpty, _this.maxWidth - t1);
        if (breakingPoint === t2)
          _this.extendTo$1(nextBreak);
        else
          _this.extendTo$1(new A.DirectionalPosition(new A.LineBreakResult(breakingPoint, breakingPoint, breakingPoint, B.LineBreakType_1), nextBreak.textDirection, nextBreak.isSpaceOnly));
        return;
      }
      t1 = _this.spanometer;
      availableWidth = _this.maxWidth - A.measureSubstring(t1.context, ellipsis, 0, ellipsis.length, null);
      segmentToBreak = _this._createSegment$1(nextBreak.lineBreak);
      t2 = _this._segments;
      while (true) {
        if (!(t2.length !== 0 && _this.widthIncludingSpace > availableWidth))
          break;
        segmentToBreak = _this._popSegment$0();
      }
      t1.set$currentSpan(segmentToBreak.span);
      breakingPoint = t1.forceBreak$4$allowEmpty$availableWidth(segmentToBreak.start.index, segmentToBreak.end.index, allowEmpty, availableWidth - _this.widthIncludingSpace);
      t1 = _this._boxes;
      while (true) {
        if (!(t1.length !== 0 && B.JSArray_methods.get$last(t1).end.index > breakingPoint))
          break;
        t1.pop();
      }
      _this._currentBoxStartOffset = _this.widthIncludingSpace;
      _this.extendTo$1(new A.DirectionalPosition(new A.LineBreakResult(breakingPoint, breakingPoint, breakingPoint, B.LineBreakType_1), nextBreak.textDirection, nextBreak.isSpaceOnly));
    },
    forceBreak$2$allowEmpty(nextBreak, allowEmpty) {
      return this.forceBreak$3$allowEmpty$ellipsis(nextBreak, allowEmpty, null);
    },
    revertToLastBreakOpportunity$0() {
      for (; this.__engine$_end.type === B.LineBreakType_1;)
        this._popSegment$0();
    },
    get$_currentBoxStart() {
      var t1 = this._boxes;
      if (t1.length === 0)
        return this.start;
      return B.JSArray_methods.get$last(t1).end;
    },
    createBox$1$isSpaceOnly(isSpaceOnly) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, _this = this,
        boxStart = _this.get$_currentBoxStart(),
        boxEnd = _this.__engine$_end;
      if (boxStart.index === boxEnd.index)
        return;
      t1 = _this.spanometer;
      t2 = _this.widthIncludingSpace;
      t3 = _this._currentBoxStartOffset;
      t4 = _this.paragraph.paragraphStyle.textDirection;
      if (t4 == null)
        t4 = B.TextDirection_1;
      t5 = _this.get$_currentBoxDirection();
      t6 = _this.get$_currentContentDirection();
      t7 = t1._currentSpan;
      t7.toString;
      t8 = t1._currentRuler;
      t8 = t8.get$height(t8);
      t9 = t1._currentRuler;
      _this._boxes.push(new A.SpanBox(t1, t7, t6, isSpaceOnly, t8, t9.get$alphabeticBaseline(t9), boxStart, boxEnd, t2 - t3, t4, t5));
      if (isSpaceOnly)
        ++_this._spaceBoxCount;
      _this._currentBoxStartOffset = _this.widthIncludingSpace;
    },
    createBox$0() {
      return this.createBox$1$isSpaceOnly(false);
    },
    build$1$ellipsis(_, ellipsis) {
      var ellipsisWidth, t1, t2, endIndexWithoutNewlines, hardBreak, t3, t4, t5, t6, t7, _this = this;
      _this.createBox$0();
      _this._positionBoxes$0();
      ellipsisWidth = ellipsis == null ? 0 : A.measureSubstring(_this.spanometer.context, ellipsis, 0, ellipsis.length, null);
      t1 = _this.start.index;
      t2 = _this.__engine$_end;
      endIndexWithoutNewlines = Math.max(t1, t2.indexWithoutTrailingNewlines);
      if (t2.type !== B.LineBreakType_3 && _this.get$_isLastBoxAPlaceholder())
        hardBreak = false;
      else {
        t2 = _this.__engine$_end.type;
        hardBreak = t2 === B.LineBreakType_2 || t2 === B.LineBreakType_3;
      }
      t2 = _this.__engine$_end;
      t3 = _this.width;
      t4 = _this.widthIncludingSpace;
      t5 = _this.get$alignOffset();
      t6 = _this.ascent;
      t7 = _this.descent;
      return new A.EngineLineMetrics(ellipsis, t1, t2.index, endIndexWithoutNewlines, _this._boxes, _this._spaceBoxCount, hardBreak, t6, t7, t6 + t7, t3 + ellipsisWidth, t4 + ellipsisWidth, t5, _this.accumulatedHeight + t6, _this.lineNumber);
    },
    build$0($receiver) {
      return this.build$1$ellipsis($receiver, null);
    },
    _positionBoxes$0() {
      var t1, i, cumulativeWidth, t2, box, t3, t4, i0, lastNonSpaceBox, t5, _this = this,
        boxes = _this._boxes;
      for (t1 = _this.paragraph.paragraphStyle.textDirection, i = 0, cumulativeWidth = 0; t2 = boxes.length, i < t2;) {
        box = boxes[i];
        t3 = t1 == null;
        t4 = t3 ? B.TextDirection_1 : t1;
        if (box.boxDirection === t4) {
          A._lateWriteOnceCheck(box.__RangeBox_startOffset, "startOffset");
          box.__RangeBox_startOffset = cumulativeWidth;
          t2 = _this.width;
          A._lateWriteOnceCheck(box.__RangeBox_lineWidth, "lineWidth");
          box.__RangeBox_lineWidth = t2;
          cumulativeWidth += box.width;
          ++i;
          continue;
        }
        i0 = i + 1;
        lastNonSpaceBox = i;
        while (true) {
          if (i0 < t2) {
            t4 = boxes[i0];
            t5 = t3 ? B.TextDirection_1 : t1;
            t5 = t4.boxDirection !== t5;
            t4 = t5;
          } else
            t4 = false;
          if (!t4)
            break;
          box = boxes[i0];
          lastNonSpaceBox = box instanceof A.SpanBox && box.isSpaceOnly ? lastNonSpaceBox : i0;
          ++i0;
        }
        i0 = lastNonSpaceBox + 1;
        cumulativeWidth += _this._positionBoxesInReverse$4$startOffset(boxes, i, lastNonSpaceBox, cumulativeWidth);
        i = i0;
      }
    },
    _positionBoxesInReverse$4$startOffset(boxes, first, last, startOffset) {
      var i, cumulativeWidth, box, t1;
      for (i = last, cumulativeWidth = 0; i >= first; --i) {
        box = boxes[i];
        A._lateWriteOnceCheck(box.__RangeBox_startOffset, "startOffset");
        box.__RangeBox_startOffset = startOffset + cumulativeWidth;
        t1 = this.width;
        A._lateWriteOnceCheck(box.__RangeBox_lineWidth, "lineWidth");
        box.__RangeBox_lineWidth = t1;
        cumulativeWidth += box.width;
      }
      return cumulativeWidth;
    },
    findNextBreak$0() {
      var maxEnd, _this = this,
        nextBreak = _this._cachedNextBreak,
        text = _this.paragraph.plainText;
      if (nextBreak == null || _this.__engine$_end.index >= nextBreak.index) {
        maxEnd = _this.spanometer._currentSpan.end;
        nextBreak = _this._cachedNextBreak = A.nextLineBreak(text, _this.__engine$_end.index, maxEnd);
      }
      return A.getDirectionalBlockEnd(text, _this.__engine$_end, nextBreak);
    },
    nextLine$0() {
      var _this = this,
        t1 = _this.__engine$_end;
      return A.LineBuilder$_(_this.paragraph, _this.spanometer, _this.accumulatedHeight + (_this.ascent + _this.descent), _this.lineNumber + 1, _this.maxWidth, t1);
    }
  };
  A.Spanometer.prototype = {
    set$currentSpan(span) {
      var t1, value, t2, t3, ruler, cssFontString, _this = this;
      if (span === _this._currentSpan)
        return;
      _this._currentSpan = span;
      t1 = span.style;
      value = t1.__EngineTextStyle_heightStyle;
      if (value === $) {
        t2 = t1.get$effectiveFontFamily();
        t3 = t1.fontSize;
        if (t3 == null)
          t3 = 14;
        A._lateInitializeOnceCheck(t1.__EngineTextStyle_heightStyle, "heightStyle");
        value = t1.__EngineTextStyle_heightStyle = new A.TextHeightStyle(t2, t3, t1.height, null);
      }
      ruler = $.Spanometer__rulers.$index(0, value);
      if (ruler == null) {
        ruler = new A.TextHeightRuler(value, $.$get$Spanometer__rulerHost(), new A.TextDimensions(document.createElement("p")));
        $.Spanometer__rulers.$indexSet(0, value, ruler);
      }
      _this._currentRuler = ruler;
      cssFontString = t1.get$cssFontString();
      if (_this._cssFontString !== cssFontString) {
        _this._cssFontString = cssFontString;
        _this.context.font = cssFontString;
      }
    },
    forceBreak$4$allowEmpty$availableWidth(start, end, allowEmpty, availableWidth) {
      var high, low, mid, width;
      this._currentSpan.toString;
      if (availableWidth <= 0)
        return allowEmpty ? start : start + 1;
      high = end;
      low = start;
      do {
        mid = B.JSInt_methods._tdivFast$1(low + high, 2);
        width = this._measure$2(start, mid);
        if (width < availableWidth)
          low = mid;
        else {
          low = width > availableWidth ? low : mid;
          high = mid;
        }
      } while (high - low > 1);
      return low === start && !allowEmpty ? low + 1 : low;
    },
    _measure$2(start, end) {
      return A.measureSubstring(this.context, this.paragraph.plainText, start, end, this._currentSpan.style.letterSpacing);
    }
  };
  A.LineCharProperty.prototype = {
    toString$0(_) {
      return "LineCharProperty." + this._name;
    }
  };
  A.LineBreakType.prototype = {
    toString$0(_) {
      return "LineBreakType." + this._name;
    }
  };
  A.LineBreakResult.prototype = {
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.index, _this.indexWithoutTrailingNewlines, _this.indexWithoutTrailingSpaces, _this.type, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      return other instanceof A.LineBreakResult && other.index === _this.index && other.indexWithoutTrailingNewlines === _this.indexWithoutTrailingNewlines && other.indexWithoutTrailingSpaces === _this.indexWithoutTrailingSpaces && other.type === _this.type;
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.RulerHost.prototype = {
    dispose$0(_) {
      J.remove$0$ax(this._rulerHost);
    }
  };
  A.TextPaintService.prototype = {
    paint$2(canvas, offset) {
      var lastLine, t2, t3, _i, line, t4, lastBox, justifyPerSpaceBox, t5, t6, justifiedOffset, _i0, box, background, t7, rect, t8, t9, t10,
        t1 = this.paragraph,
        lines = t1.get$_layoutService().lines;
      if (lines.length === 0)
        return;
      lastLine = B.JSArray_methods.get$last(lines);
      for (t2 = lines.length, t3 = type$.nullable_SurfacePaint, _i = 0; _i < lines.length; lines.length === t2 || (0, A.throwConcurrentModificationError)(lines), ++_i) {
        line = lines[_i];
        t4 = line.boxes;
        if (t4.length === 0)
          continue;
        lastBox = B.JSArray_methods.get$last(t4);
        justifyPerSpaceBox = A._calculateJustifyPerSpaceBox(t1, line, lastLine, lastBox);
        for (t5 = t4.length, t6 = justifyPerSpaceBox !== 0, justifiedOffset = offset, _i0 = 0; _i0 < t4.length; t4.length === t5 || (0, A.throwConcurrentModificationError)(t4), ++_i0) {
          box = t4[_i0];
          if (!(box === lastBox && box instanceof A.SpanBox && box.isSpaceOnly))
            if (box instanceof A.SpanBox) {
              background = t3._as(box.span.style.background);
              if (background != null) {
                t7 = box.intersect$3(line, box.start.index, box.end.index);
                rect = new A.Rect(t7.left, t7.top, t7.right, t7.bottom).shift$1(justifiedOffset);
                if (box.isSpaceOnly) {
                  t7 = rect.left;
                  t8 = rect.top;
                  t9 = rect.right + justifyPerSpaceBox;
                  t10 = rect.bottom + 0;
                  rect = new A.Rect(Math.min(t7, t9), Math.min(t8, t10), Math.max(t7, t9), Math.max(t8, t10));
                }
                background._frozen = true;
                canvas.drawRect$2(0, rect, background._paintData);
              }
            }
          this._paintText$4(canvas, justifiedOffset, line, box);
          if (box instanceof A.SpanBox && box.isSpaceOnly && t6)
            justifiedOffset = new A.Offset(justifiedOffset._dx + justifyPerSpaceBox, justifiedOffset._dy + 0);
        }
      }
    },
    _paintText$4(canvas, offset, line, box) {
      var t1, foreground, t2, paint, t3, t4, t5, x, y, text, letterSpacing, len, charX, i, char, ctx, ellipsis, _null = null;
      if (box instanceof A.SpanBox) {
        t1 = box.span.style;
        foreground = t1.foreground;
        t2 = foreground == null;
        if (!t2) {
          type$.SurfacePaint._as(foreground);
          paint = foreground;
        } else {
          t3 = $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData());
          t4 = t1.color;
          t4.toString;
          t3.set$color(0, t4);
          type$.SurfacePaint._as(t3);
          paint = t3;
        }
        t3 = t1.get$cssFontString();
        if (t3 !== canvas._cachedLastCssFont) {
          t4 = canvas._canvasPool;
          t4.get$context(t4).font = t3;
          canvas._cachedLastCssFont = t3;
        }
        t3 = paint._frozen = true;
        t4 = paint._paintData;
        t5 = canvas._canvasPool;
        t5.get$contextHandle().setUpPaint$2(t4, _null);
        t4 = offset._dx + line.left;
        x = t4 + box.get$left(box);
        y = offset._dy + line.baseline;
        if (!box.isSpaceOnly) {
          text = B.JSString_methods.substring$2(this.paragraph.plainText, box.start.index, box.end.indexWithoutTrailingNewlines);
          letterSpacing = t1.letterSpacing;
          if (letterSpacing != null ? letterSpacing === 0 : t3) {
            t3 = t2 ? _null : foreground.get$style(foreground);
            canvas.drawText$5$shadows$style(text, x, y, t1.shadows, t3);
          } else {
            len = text.length;
            for (t1 = t1.shadows, charX = x, i = 0; i < len; ++i) {
              char = text[i];
              t3 = B.JSNumber_methods.roundToDouble$0(charX);
              canvas.drawText$5$shadows$style(char, t3, y, t1, t2 ? _null : foreground.get$style(foreground));
              ctx = t5.__engine$_context;
              if (ctx == null) {
                t5._createCanvas$0();
                t3 = t5.__engine$_context;
                t3.toString;
                ctx = t3;
              }
              t3 = ctx.measureText(char).width;
              t3.toString;
              charX += letterSpacing + t3;
            }
          }
        }
        ellipsis = line.ellipsis;
        if (ellipsis != null && box === B.JSArray_methods.get$last(line.boxes)) {
          t1 = box.get$right(box);
          t2 = t2 ? _null : foreground.get$style(foreground);
          canvas.drawText$4$style(ellipsis, t4 + t1, y, t2);
        }
        t5.get$contextHandle().tearDownPaint$0();
      }
    }
  };
  A.EngineLineMetrics.prototype = {
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(null, _this.startIndex, _this.endIndex, _this.hardBreak, _this.ascent, _this.descent, 1 / 0, _this.height, _this.width, _this.left, _this.baseline, _this.lineNumber, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      if (other instanceof A.EngineLineMetrics)
        if (other.startIndex === _this.startIndex)
          if (other.endIndex === _this.endIndex)
            if (other.hardBreak === _this.hardBreak)
              if (other.ascent === _this.ascent)
                if (other.descent === _this.descent)
                  t1 = other.height === _this.height && other.width === _this.width && other.left === _this.left && other.baseline === _this.baseline && other.lineNumber === _this.lineNumber;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.EngineParagraphStyle.prototype = {
    get$lineHeight(_) {
      var strutStyle = this._strutStyle,
        t1 = strutStyle == null,
        strutHeight = t1 ? null : strutStyle.__engine$_height;
      !t1;
      return this.height;
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      if (other instanceof A.EngineParagraphStyle)
        if (other.textAlign === _this.textAlign)
          if (other.textDirection == _this.textDirection)
            if (other.fontWeight == _this.fontWeight)
              t1 = other.fontFamily == _this.fontFamily && other.fontSize == _this.fontSize && other.height == _this.height && J.$eq$(other._textHeightBehavior, _this._textHeightBehavior) && other.ellipsis == _this.ellipsis && true;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.textAlign, _this.textDirection, _this.fontWeight, _this.fontStyle, _this.maxLines, _this.fontFamily, _this.fontSize, _this.height, _this._textHeightBehavior, _this.ellipsis, _this.locale, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.EngineTextStyle.prototype = {
    get$effectiveFontFamily() {
      var t1 = this.fontFamily;
      if (t1.length === 0)
        return "sans-serif";
      return t1;
    },
    get$cssFontString() {
      var t2, t3, t4, _this = this,
        t1 = _this._cssFontString;
      if (t1 == null) {
        t1 = _this.fontWeight;
        t2 = _this.fontSize;
        t3 = _this.get$effectiveFontFamily();
        t4 = "" + "normal ";
        t1 = (t1 != null ? t4 + A.S(A.fontWeightToCss(t1)) : t4 + "normal") + " ";
        t1 = (t2 != null ? t1 + B.JSNumber_methods.floor$0(t2) : t1 + "14") + "px " + A.S(A.canonicalizeFontFamily(t3));
        t1 = _this._cssFontString = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return t1;
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      if (other instanceof A.EngineTextStyle)
        if (J.$eq$(other.color, _this.color))
          if (J.$eq$(other.decoration, _this.decoration))
            if (J.$eq$(other.decorationColor, _this.decorationColor))
              if (other.fontWeight == _this.fontWeight)
                if (other.textBaseline == _this.textBaseline)
                  if (other.fontFamily === _this.fontFamily)
                    if (other.fontSize == _this.fontSize)
                      if (other.letterSpacing == _this.letterSpacing)
                        if (other.wordSpacing == _this.wordSpacing)
                          if (other.height == _this.height)
                            t1 = other.background == _this.background && other.foreground == _this.foreground && A.listEquals(other.shadows, _this.shadows) && A.listEquals(other.fontFamilyFallback, _this.fontFamilyFallback);
                          else
                            t1 = false;
                        else
                          t1 = false;
                      else
                        t1 = false;
                    else
                      t1 = false;
                  else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.color, _this.decoration, _this.decorationColor, _this.decorationStyle, _this.decorationThickness, _this.fontWeight, _this.fontStyle, _this.textBaseline, _this.fontFamily, _this.fontFamilyFallback, _this.fontSize, _this.letterSpacing, _this.wordSpacing, _this.height, _this.locale, _this.background, _this.foreground, _this.shadows, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.TextHeightStyle.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof A.TextHeightStyle && other.get$hashCode(other) === this.get$hashCode(this);
    },
    get$hashCode(_) {
      var result, _this = this,
        value = _this.__TextHeightStyle_hashCode;
      if (value === $) {
        result = A.hashValues(_this.fontFamily, _this.fontSize, _this.height, A.hashList(_this.fontFeatures), B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
        A._lateInitializeOnceCheck(_this.__TextHeightStyle_hashCode, "hashCode");
        _this.__TextHeightStyle_hashCode = result;
        value = result;
      }
      return value;
    }
  };
  A.TextDimensions.prototype = {};
  A.TextHeightRuler.prototype = {
    get$alphabeticBaseline(_) {
      var t1, probe, host, t2, t3, style, t4, height, _this = this,
        value = _this.__TextHeightRuler_alphabeticBaseline;
      if (value === $) {
        value = _this.__TextHeightRuler__probe;
        if (value === $) {
          t1 = document;
          probe = t1.createElement("div");
          value = _this.__TextHeightRuler__host;
          if (value === $) {
            host = t1.createElement("div");
            t1 = host.style;
            t1.visibility = "hidden";
            t1.position = "absolute";
            t1.top = "0";
            t1.left = "0";
            t1.display = "flex";
            B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "flex-direction"), "row", "");
            B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "align-items"), "baseline", "");
            t1.margin = "0";
            t1.border = "0";
            t1.padding = "0";
            t1 = _this._dimensions;
            t2 = _this.textHeightStyle;
            t3 = t1.__engine$_element;
            style = t3.style;
            t4 = "" + B.JSNumber_methods.floor$0(t2.fontSize) + "px";
            style.fontSize = t4;
            t4 = A.canonicalizeFontFamily(t2.fontFamily);
            style.fontFamily = t4 == null ? "" : t4;
            height = t2.height;
            if (height != null) {
              t2 = B.JSNumber_methods.toString$0(height);
              style.lineHeight = t2;
            }
            t1._cachedBoundingClientRect = null;
            t2 = t3.style;
            t2.whiteSpace = "pre";
            t1._cachedBoundingClientRect = null;
            t3.textContent = " ";
            host.appendChild(t3);
            t1._cachedBoundingClientRect = null;
            _this.rulerHost._rulerHost.appendChild(host);
            A._lateInitializeOnceCheck(_this.__TextHeightRuler__host, "_host");
            _this.__TextHeightRuler__host = host;
            value = host;
          }
          value.appendChild(probe);
          A._lateInitializeOnceCheck(_this.__TextHeightRuler__probe, "_probe");
          _this.__TextHeightRuler__probe = probe;
          value = probe;
        }
        t1 = value.getBoundingClientRect().bottom;
        t1.toString;
        A._lateInitializeOnceCheck(_this.__TextHeightRuler_alphabeticBaseline, "alphabeticBaseline");
        _this.__TextHeightRuler_alphabeticBaseline = t1;
        value = t1;
      }
      return value;
    },
    get$height(_) {
      var t1, t2, cachedHeight, _this = this,
        value = _this.__TextHeightRuler_height;
      if (value === $) {
        t1 = _this._dimensions;
        t2 = t1._cachedBoundingClientRect;
        t1 = (t2 == null ? t1._cachedBoundingClientRect = t1.__engine$_element.getBoundingClientRect() : t2).height;
        t1.toString;
        t2 = $.$get$_browserEngine();
        if (t2 === B.BrowserEngine_2 && true)
          cachedHeight = t1 + 1;
        else
          cachedHeight = t1;
        A._lateInitializeOnceCheck(_this.__TextHeightRuler_height, "height");
        value = _this.__TextHeightRuler_height = cachedHeight;
      }
      return value;
    }
  };
  A.DirectionalPosition.prototype = {};
  A._ComparisonResult.prototype = {
    toString$0(_) {
      return "_ComparisonResult." + this._name;
    }
  };
  A.UnicodeRange.prototype = {
    compare$1(value) {
      if (value < this.start)
        return B._ComparisonResult_2;
      if (value > this.end)
        return B._ComparisonResult_1;
      return B._ComparisonResult_0;
    }
  };
  A.UnicodePropertyLookup.prototype = {
    find$2(_, text, index) {
      var codePoint = A.getCodePoint(text, index);
      return codePoint == null ? this.defaultProperty : this.findForChar$1(codePoint);
    },
    findForChar$1(char) {
      var t1, cacheHit, rangeIndex, result, _this = this;
      if (char == null)
        return _this.defaultProperty;
      t1 = _this.__engine$_cache;
      cacheHit = t1.$index(0, char);
      if (cacheHit != null)
        return cacheHit;
      rangeIndex = _this._binarySearch$1(char);
      result = rangeIndex === -1 ? _this.defaultProperty : _this.ranges[rangeIndex].property;
      t1.$indexSet(0, char, result);
      return result;
    },
    _binarySearch$1(value) {
      var min, mid,
        t1 = this.ranges,
        max = t1.length;
      for (min = 0; min < max;) {
        mid = min + B.JSInt_methods._shrOtherPositive$1(max - min, 1);
        switch (t1[mid].compare$1(value).index) {
          case 1:
            min = mid + 1;
            break;
          case 2:
            max = mid;
            break;
          case 0:
            return mid;
        }
      }
      return -1;
    }
  };
  A.BrowserAutofillHints.prototype = {};
  A.EngineInputType.prototype = {
    get$submitActionOnEnter() {
      return true;
    },
    createDomElement$0() {
      return A.InputElement_InputElement();
    },
    configureInputMode$1(domElement) {
      var t1;
      if (this.get$inputmodeAttribute() == null)
        return;
      t1 = $.$get$_operatingSystem();
      if (t1 !== B.OperatingSystem_0)
        t1 = t1 === B.OperatingSystem_1 || this.get$inputmodeAttribute() === "none";
      else
        t1 = true;
      if (t1) {
        t1 = this.get$inputmodeAttribute();
        t1.toString;
        domElement.setAttribute("inputmode", t1);
      }
    }
  };
  A.NoTextInputType.prototype = {
    get$inputmodeAttribute() {
      return "none";
    }
  };
  A.TextInputType.prototype = {
    get$inputmodeAttribute() {
      return "text";
    }
  };
  A.NumberInputType.prototype = {
    get$inputmodeAttribute() {
      return "numeric";
    }
  };
  A.DecimalInputType.prototype = {
    get$inputmodeAttribute() {
      return "decimal";
    }
  };
  A.PhoneInputType.prototype = {
    get$inputmodeAttribute() {
      return "tel";
    }
  };
  A.EmailInputType.prototype = {
    get$inputmodeAttribute() {
      return "email";
    }
  };
  A.UrlInputType.prototype = {
    get$inputmodeAttribute() {
      return "url";
    }
  };
  A.MultilineInputType.prototype = {
    get$inputmodeAttribute() {
      return null;
    },
    get$submitActionOnEnter() {
      return false;
    },
    createDomElement$0() {
      return document.createElement("textarea");
    }
  };
  A.TextCapitalization.prototype = {
    toString$0(_) {
      return "TextCapitalization." + this._name;
    }
  };
  A.TextCapitalizationConfig.prototype = {
    setAutocapitalizeAttribute$1(domElement) {
      var t1, autocapitalize,
        _s9_ = "sentences",
        _s14_ = "autocapitalize";
      switch (this.textCapitalization.index) {
        case 0:
          t1 = $.$get$_browserEngine();
          autocapitalize = t1 === B.BrowserEngine_1 ? _s9_ : "words";
          break;
        case 2:
          autocapitalize = "characters";
          break;
        case 1:
          autocapitalize = _s9_;
          break;
        case 3:
        default:
          autocapitalize = "off";
          break;
      }
      if (type$.InputElement._is(domElement))
        domElement.setAttribute(_s14_, autocapitalize);
      else if (type$.TextAreaElement._is(domElement))
        domElement.setAttribute(_s14_, autocapitalize);
    }
  };
  A.EngineAutofillForm.prototype = {
    addInputEventListeners$0() {
      var t1 = this.elements,
        subscriptions = A._setArrayType([], type$.JSArray_StreamSubscription_Event);
      new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>")).forEach$1(0, new A.EngineAutofillForm_addInputEventListeners_addSubscriptionForKey(this, subscriptions));
      return subscriptions;
    }
  };
  A.EngineAutofillForm_fromFrameworkMessage_closure.prototype = {
    call$1(e) {
      e.preventDefault();
    },
    $signature: 2
  };
  A.EngineAutofillForm_addInputEventListeners_addSubscriptionForKey.prototype = {
    call$1(key) {
      var t1 = this.$this,
        t2 = t1.elements.$index(0, key);
      t2.toString;
      this.subscriptions.push(A._EventStreamSubscription$(t2, "input", new A.EngineAutofillForm_addInputEventListeners_addSubscriptionForKey_closure(t1, key, t2), false, type$._ElementEventStreamImpl_Event._precomputed1));
    },
    $signature: 228
  };
  A.EngineAutofillForm_addInputEventListeners_addSubscriptionForKey_closure.prototype = {
    call$1(e) {
      var newEditingState,
        t1 = this.$this.items,
        t2 = this.key;
      if (t1.$index(0, t2) == null)
        throw A.wrapException(A.StateError$("AutofillInfo must have a valid uniqueIdentifier."));
      else {
        t1 = t1.$index(0, t2);
        t1.toString;
        newEditingState = A.EditingState_EditingState$fromDomElement(this.element);
        $.$get$EnginePlatformDispatcher__instance().invokeOnPlatformMessage$3("flutter/textinput", B.C_JSONMethodCodec.encodeMethodCall$1(new A.MethodCall("TextInputClient.updateEditingStateWithTag", [0, A.LinkedHashMap_LinkedHashMap$_literal([t1.uniqueIdentifier, newEditingState.toFlutter$0()], type$.nullable_String, type$.dynamic)])), A._engine___emptyCallback$closure());
      }
    },
    $signature: 1
  };
  A.AutofillInfo.prototype = {
    applyToDomElement$2$focusedElement(domElement, focusedElement) {
      var t1,
        _s8_ = "password",
        autofillHint = this.autofillHint,
        placeholder = this.placeholder;
      if (type$.InputElement._is(domElement)) {
        if (placeholder != null)
          domElement.placeholder = placeholder;
        t1 = autofillHint == null;
        if (!t1) {
          domElement.name = autofillHint;
          domElement.id = autofillHint;
          if (B.JSString_methods.contains$1(autofillHint, _s8_))
            domElement.type = _s8_;
          else
            domElement.type = "text";
        }
        domElement.autocomplete = t1 ? "on" : autofillHint;
      } else if (type$.TextAreaElement._is(domElement)) {
        if (placeholder != null)
          domElement.placeholder = placeholder;
        t1 = autofillHint == null;
        if (!t1) {
          domElement.name = autofillHint;
          domElement.id = autofillHint;
        }
        domElement.setAttribute("autocomplete", t1 ? "on" : autofillHint);
      }
    },
    applyToDomElement$1(domElement) {
      return this.applyToDomElement$2$focusedElement(domElement, false);
    }
  };
  A.TextEditingDeltaState.prototype = {};
  A.EditingState.prototype = {
    toFlutter$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["text", this.text, "selectionBase", this.baseOffset, "selectionExtent", this.extentOffset], type$.String, type$.dynamic);
    },
    get$hashCode(_) {
      return A.hashValues(this.text, this.baseOffset, this.extentOffset, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (A.getRuntimeType(_this) !== J.get$runtimeType$(other))
        return false;
      return other instanceof A.EditingState && other.text == _this.text && other.baseOffset === _this.baseOffset && other.extentOffset === _this.extentOffset;
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    },
    applyToDomElement$1(domElement) {
      var _this = this;
      if (type$.InputElement._is(domElement)) {
        domElement.value = _this.text;
        domElement.setSelectionRange(_this.baseOffset, _this.extentOffset);
      } else if (type$.TextAreaElement._is(domElement)) {
        domElement.value = _this.text;
        domElement.setSelectionRange(_this.baseOffset, _this.extentOffset);
      } else
        throw A.wrapException(A.UnsupportedError$("Unsupported DOM element type: <" + A.S(domElement == null ? null : domElement.tagName) + "> (" + J.get$runtimeType$(domElement).toString$0(0) + ")"));
    }
  };
  A.InputConfiguration.prototype = {};
  A.GloballyPositionedTextEditingStrategy.prototype = {
    placeElement$0() {
      var t2, _this = this,
        t1 = _this.geometry;
      if (t1 != null) {
        t2 = _this.domElement;
        t2.toString;
        t1.applyToDomElement$1(t2);
      }
      if (A._lateReadCheck(_this.__DefaultTextEditingStrategy_inputConfiguration, "inputConfiguration").autofillGroup != null) {
        _this.placeForm$0();
        t1 = _this.lastEditingState;
        if (t1 != null)
          t1.applyToDomElement$1(_this.domElement);
        _this.get$focusedFormElement().focus();
        _this.domElement.focus();
      }
    }
  };
  A.SafariDesktopTextEditingStrategy.prototype = {
    placeElement$0() {
      var t2, _this = this,
        t1 = _this.geometry;
      if (t1 != null) {
        t2 = _this.domElement;
        t2.toString;
        t1.applyToDomElement$1(t2);
      }
      if (A._lateReadCheck(_this.__DefaultTextEditingStrategy_inputConfiguration, "inputConfiguration").autofillGroup != null) {
        _this.placeForm$0();
        _this.get$focusedFormElement().focus();
        _this.domElement.focus();
        t1 = _this.lastEditingState;
        if (t1 != null) {
          t2 = _this.domElement;
          t2.toString;
          t1.applyToDomElement$1(t2);
        }
      }
    },
    initializeElementPlacement$0() {
      if (this.geometry != null)
        this.placeElement$0();
      this.domElement.focus();
    }
  };
  A.DefaultTextEditingStrategy.prototype = {
    get$editingDeltaState() {
      var _null = null,
        t1 = this._editingDeltaState;
      if (t1 == null) {
        t1 = this.lastEditingState.text;
        t1.toString;
        t1 = this._editingDeltaState = new A.TextEditingDeltaState(t1, "", -1, -1, _null, _null, _null, _null);
      }
      return t1;
    },
    get$focusedFormElement() {
      var t1 = A._lateReadCheck(this.__DefaultTextEditingStrategy_inputConfiguration, "inputConfiguration").autofillGroup;
      return t1 == null ? null : t1.formElement;
    },
    initializeTextEditing$3$onAction$onChange(inputConfig, onAction, onChange) {
      var t1, elementStyle, t2, _this = this,
        _s11_ = "transparent",
        _s4_ = "none";
      _this.domElement = inputConfig.inputType.createDomElement$0();
      _this.applyConfiguration$1(inputConfig);
      t1 = _this.domElement;
      t1.classList.add("flt-text-editing");
      elementStyle = t1.style;
      elementStyle.whiteSpace = "pre-wrap";
      B.CssStyleDeclaration_methods._setPropertyHelper$3(elementStyle, B.CssStyleDeclaration_methods._browserPropertyName$1(elementStyle, "align-content"), "center", "");
      elementStyle.position = "absolute";
      elementStyle.top = "0";
      elementStyle.left = "0";
      elementStyle.padding = "0";
      B.CssStyleDeclaration_methods._setPropertyHelper$3(elementStyle, B.CssStyleDeclaration_methods._browserPropertyName$1(elementStyle, "opacity"), "1", "");
      elementStyle.color = _s11_;
      elementStyle.backgroundColor = _s11_;
      elementStyle.background = _s11_;
      elementStyle.outline = _s4_;
      elementStyle.border = _s4_;
      B.CssStyleDeclaration_methods._setPropertyHelper$3(elementStyle, B.CssStyleDeclaration_methods._browserPropertyName$1(elementStyle, "resize"), _s4_, "");
      B.CssStyleDeclaration_methods._setPropertyHelper$3(elementStyle, B.CssStyleDeclaration_methods._browserPropertyName$1(elementStyle, "text-shadow"), _s11_, "");
      elementStyle.overflow = "hidden";
      B.CssStyleDeclaration_methods._setPropertyHelper$3(elementStyle, B.CssStyleDeclaration_methods._browserPropertyName$1(elementStyle, "transform-origin"), "0 0 0", "");
      t2 = $.$get$_browserEngine();
      if (t2 !== B.BrowserEngine_0)
        if (t2 !== B.BrowserEngine_5)
          t2 = t2 === B.BrowserEngine_1;
        else
          t2 = true;
      else
        t2 = true;
      if (t2)
        t1.classList.add("transparentTextEditing");
      B.CssStyleDeclaration_methods._setPropertyHelper$3(elementStyle, B.CssStyleDeclaration_methods._browserPropertyName$1(elementStyle, "caret-color"), _s11_, null);
      t1 = _this.style;
      if (t1 != null) {
        t2 = _this.domElement;
        t2.toString;
        t1.applyToDomElement$1(t2);
      }
      if (A._lateReadCheck(_this.__DefaultTextEditingStrategy_inputConfiguration, "inputConfiguration").autofillGroup == null) {
        t1 = $._flutterViewEmbedder;
        t1 = (t1 == null ? $._flutterViewEmbedder = A.FlutterViewEmbedder$() : t1)._glassPaneShadow;
        t1.toString;
        t2 = _this.domElement;
        t2.toString;
        t1.append$1(0, t2);
        _this._appendedToForm = false;
      }
      _this.initializeElementPlacement$0();
      _this.isEnabled = true;
      _this.onChange = onChange;
      _this.onAction = onAction;
    },
    applyConfiguration$1(config) {
      var t1, autofill, autocorrectValue, _this = this,
        _s8_ = "readonly";
      _this.__DefaultTextEditingStrategy_inputConfiguration = config;
      t1 = _this.domElement;
      if (config.readOnly)
        t1.setAttribute(_s8_, _s8_);
      else
        t1.removeAttribute(_s8_);
      if (config.obscureText)
        _this.domElement.setAttribute("type", "password");
      if (config.inputType === B.C_NoTextInputType)
        _this.domElement.setAttribute("inputmode", "none");
      autofill = config.autofill;
      t1 = _this.domElement;
      if (autofill != null) {
        t1.toString;
        autofill.applyToDomElement$2$focusedElement(t1, true);
      } else
        t1.setAttribute("autocomplete", "off");
      autocorrectValue = config.autocorrect ? "on" : "off";
      _this.domElement.setAttribute("autocorrect", autocorrectValue);
    },
    initializeElementPlacement$0() {
      this.placeElement$0();
    },
    addEventHandlers$0() {
      var t1, t2, t3, t4, _this = this,
        _s18_ = "inputConfiguration";
      if (A._lateReadCheck(_this.__DefaultTextEditingStrategy_inputConfiguration, _s18_).autofillGroup != null)
        B.JSArray_methods.addAll$1(_this.subscriptions, A._lateReadCheck(_this.__DefaultTextEditingStrategy_inputConfiguration, _s18_).autofillGroup.addInputEventListeners$0());
      t1 = _this.subscriptions;
      t2 = _this.domElement;
      t2.toString;
      t3 = _this.get$handleChange();
      t4 = type$._ElementEventStreamImpl_Event._precomputed1;
      t1.push(A._EventStreamSubscription$(t2, "input", t3, false, t4));
      t2 = _this.domElement;
      t2.toString;
      t1.push(A._EventStreamSubscription$(t2, "keydown", _this.get$maybeSendAction(), false, type$._ElementEventStreamImpl_KeyboardEvent._precomputed1));
      t1.push(A._EventStreamSubscription$(document, "selectionchange", t3, false, type$.Event));
      t3 = _this.domElement;
      t3.toString;
      J.addEventListener$2$x(t3, "beforeinput", _this.get$handleBeforeInput());
      t3 = _this.domElement;
      t3.toString;
      J.addEventListener$2$x(t3, "compositionupdate", _this.get$handleCompositionUpdate());
      t3 = _this.domElement;
      t3.toString;
      t1.push(A._EventStreamSubscription$(t3, "blur", new A.DefaultTextEditingStrategy_addEventHandlers_closure(_this), false, t4));
      _this.preventDefaultForMouseEvents$0();
    },
    updateElementPlacement$1(textGeometry) {
      this.geometry = textGeometry;
      if (this.isEnabled)
        this.placeElement$0();
    },
    updateElementStyle$1(textStyle) {
      var t1;
      this.style = textStyle;
      if (this.isEnabled) {
        t1 = this.domElement;
        t1.toString;
        textStyle.applyToDomElement$1(t1);
      }
    },
    disable$0(_) {
      var t2, i, _this = this,
        _s18_ = "inputConfiguration",
        t1 = _this.isEnabled = false;
      _this.geometry = _this.style = _this._editingDeltaState = _this.lastEditingState = null;
      for (t2 = _this.subscriptions, i = 0; i < t2.length; ++i)
        J.cancel$0$z(t2[i]);
      B.JSArray_methods.set$length(t2, 0);
      if (_this._appendedToForm) {
        t1 = A._lateReadCheck(_this.__DefaultTextEditingStrategy_inputConfiguration, _s18_).autofillGroup;
        t1 = (t1 == null ? null : t1.formElement) != null;
      }
      t2 = _this.domElement;
      if (t1) {
        t2.blur();
        t1 = _this.domElement;
        t1.toString;
        A._hideAutofillElements(t1, true);
        t1 = A._lateReadCheck(_this.__DefaultTextEditingStrategy_inputConfiguration, _s18_).autofillGroup;
        if (t1 != null) {
          t2 = t1.formIdentifier;
          t1 = t1.formElement;
          $.formsOnTheDom.$indexSet(0, t2, t1);
          A._hideAutofillElements(t1, true);
        }
      } else {
        t2.toString;
        J.remove$0$ax(t2);
      }
      _this.domElement = null;
    },
    setEditingState$1(editingState) {
      var t1;
      this.lastEditingState = editingState;
      if (this.isEnabled)
        t1 = !(editingState.baseOffset >= 0 && editingState.extentOffset >= 0);
      else
        t1 = true;
      if (t1)
        return;
      editingState.applyToDomElement$1(this.domElement);
    },
    placeElement$0() {
      this.domElement.focus();
    },
    placeForm$0() {
      var t2,
        t1 = A._lateReadCheck(this.__DefaultTextEditingStrategy_inputConfiguration, "inputConfiguration").autofillGroup;
      t1.toString;
      t2 = this.domElement;
      t2.toString;
      t1 = t1.formElement;
      t1.appendChild(t2);
      t2 = $._flutterViewEmbedder;
      (t2 == null ? $._flutterViewEmbedder = A.FlutterViewEmbedder$() : t2)._glassPaneShadow.append$1(0, t1);
      this._appendedToForm = true;
    },
    handleChange$1($event) {
      var newEditingState, newTextEditingDeltaState, _this = this,
        t1 = _this.domElement;
      t1.toString;
      newEditingState = A.EditingState_EditingState$fromDomElement(t1);
      newTextEditingDeltaState = A._lateReadCheck(_this.__DefaultTextEditingStrategy_inputConfiguration, "inputConfiguration").enableDeltaModel ? A.TextEditingDeltaState_inferDeltaState(newEditingState, _this.lastEditingState, _this.get$editingDeltaState()) : null;
      if (!newEditingState.$eq(0, _this.lastEditingState)) {
        _this.lastEditingState = newEditingState;
        _this._editingDeltaState = newTextEditingDeltaState;
        _this.onChange.call$2(newEditingState, newTextEditingDeltaState);
        _this._editingDeltaState = null;
      }
    },
    handleBeforeInput$1($event) {
      var _this = this,
        eventData = A._asStringQ($event.data),
        inputType = A._asStringQ($event.inputType);
      if (inputType != null)
        if (B.JSString_methods.contains$1(inputType, "delete")) {
          _this.get$editingDeltaState().deltaText = "";
          _this.get$editingDeltaState().deltaEnd = _this.lastEditingState.extentOffset;
        } else if (inputType === "insertLineBreak") {
          _this.get$editingDeltaState().deltaText = "\n";
          _this.get$editingDeltaState().deltaStart = _this.lastEditingState.extentOffset;
          _this.get$editingDeltaState().deltaEnd = _this.lastEditingState.extentOffset;
        } else if (eventData != null) {
          _this.get$editingDeltaState().deltaText = eventData;
          _this.get$editingDeltaState().deltaStart = _this.lastEditingState.extentOffset;
          _this.get$editingDeltaState().deltaEnd = _this.lastEditingState.extentOffset;
        }
    },
    handleCompositionUpdate$1($event) {
      var newEditingState,
        t1 = this.domElement;
      t1.toString;
      newEditingState = A.EditingState_EditingState$fromDomElement(t1);
      this.get$editingDeltaState().composingOffset = newEditingState.baseOffset;
      this.get$editingDeltaState().composingExtent = newEditingState.extentOffset;
    },
    maybeSendAction$1($event) {
      var t1,
        _s18_ = "inputConfiguration";
      if (type$.KeyboardEvent._is($event))
        if (A._lateReadCheck(this.__DefaultTextEditingStrategy_inputConfiguration, _s18_).inputType.get$submitActionOnEnter() && $event.keyCode === 13) {
          $event.preventDefault();
          t1 = this.onAction;
          t1.toString;
          t1.call$1(A._lateReadCheck(this.__DefaultTextEditingStrategy_inputConfiguration, _s18_).inputAction);
        }
    },
    enable$3$onAction$onChange(_, inputConfig, onAction, onChange) {
      var t1, _this = this;
      _this.initializeTextEditing$3$onAction$onChange(inputConfig, onAction, onChange);
      _this.addEventHandlers$0();
      t1 = _this.lastEditingState;
      if (t1 != null)
        _this.setEditingState$1(t1);
      _this.domElement.focus();
    },
    preventDefaultForMouseEvents$0() {
      var t3, _this = this,
        t1 = _this.subscriptions,
        t2 = _this.domElement;
      t2.toString;
      t3 = type$._ElementEventStreamImpl_MouseEvent._precomputed1;
      t1.push(A._EventStreamSubscription$(t2, "mousedown", new A.DefaultTextEditingStrategy_preventDefaultForMouseEvents_closure(), false, t3));
      t2 = _this.domElement;
      t2.toString;
      t1.push(A._EventStreamSubscription$(t2, "mouseup", new A.DefaultTextEditingStrategy_preventDefaultForMouseEvents_closure0(), false, t3));
      t2 = _this.domElement;
      t2.toString;
      t1.push(A._EventStreamSubscription$(t2, "mousemove", new A.DefaultTextEditingStrategy_preventDefaultForMouseEvents_closure1(), false, t3));
    }
  };
  A.DefaultTextEditingStrategy_addEventHandlers_closure.prototype = {
    call$1(_) {
      this.$this.domElement.focus();
    },
    $signature: 1
  };
  A.DefaultTextEditingStrategy_preventDefaultForMouseEvents_closure.prototype = {
    call$1(_) {
      _.preventDefault();
    },
    $signature: 28
  };
  A.DefaultTextEditingStrategy_preventDefaultForMouseEvents_closure0.prototype = {
    call$1(_) {
      _.preventDefault();
    },
    $signature: 28
  };
  A.DefaultTextEditingStrategy_preventDefaultForMouseEvents_closure1.prototype = {
    call$1(_) {
      _.preventDefault();
    },
    $signature: 28
  };
  A.IOSTextEditingStrategy.prototype = {
    initializeTextEditing$3$onAction$onChange(inputConfig, onAction, onChange) {
      var t1, _this = this;
      _this.super$DefaultTextEditingStrategy$initializeTextEditing(inputConfig, onAction, onChange);
      t1 = _this.domElement;
      t1.toString;
      inputConfig.inputType.configureInputMode$1(t1);
      if (A._lateReadCheck(_this.__DefaultTextEditingStrategy_inputConfiguration, "inputConfiguration").autofillGroup != null)
        _this.placeForm$0();
      t1 = _this.domElement;
      t1.toString;
      inputConfig.textCapitalization.setAutocapitalizeAttribute$1(t1);
    },
    initializeElementPlacement$0() {
      var t1 = this.domElement.style;
      B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "transform"), "translate(-9999px, -9999px)", "");
      this._canPosition = false;
    },
    addEventHandlers$0() {
      var t1, t2, t3, t4, _this = this,
        _s18_ = "inputConfiguration";
      if (A._lateReadCheck(_this.__DefaultTextEditingStrategy_inputConfiguration, _s18_).autofillGroup != null)
        B.JSArray_methods.addAll$1(_this.subscriptions, A._lateReadCheck(_this.__DefaultTextEditingStrategy_inputConfiguration, _s18_).autofillGroup.addInputEventListeners$0());
      t1 = _this.subscriptions;
      t2 = _this.domElement;
      t2.toString;
      t3 = _this.get$handleChange();
      t4 = type$._ElementEventStreamImpl_Event._precomputed1;
      t1.push(A._EventStreamSubscription$(t2, "input", t3, false, t4));
      t2 = _this.domElement;
      t2.toString;
      t1.push(A._EventStreamSubscription$(t2, "keydown", _this.get$maybeSendAction(), false, type$._ElementEventStreamImpl_KeyboardEvent._precomputed1));
      t1.push(A._EventStreamSubscription$(document, "selectionchange", t3, false, type$.Event));
      t3 = _this.domElement;
      t3.toString;
      J.addEventListener$2$x(t3, "beforeinput", _this.get$handleBeforeInput());
      t3 = _this.domElement;
      t3.toString;
      J.addEventListener$2$x(t3, "compositionupdate", _this.get$handleCompositionUpdate());
      t3 = _this.domElement;
      t3.toString;
      t1.push(A._EventStreamSubscription$(t3, "focus", new A.IOSTextEditingStrategy_addEventHandlers_closure(_this), false, t4));
      _this._addTapListener$0();
      t3 = _this.domElement;
      t3.toString;
      t1.push(A._EventStreamSubscription$(t3, "blur", new A.IOSTextEditingStrategy_addEventHandlers_closure0(_this), false, t4));
    },
    updateElementPlacement$1(textGeometry) {
      var _this = this;
      _this.geometry = textGeometry;
      if (_this.isEnabled && _this._canPosition)
        _this.placeElement$0();
    },
    disable$0(_) {
      var t1;
      this.super$DefaultTextEditingStrategy$disable(0);
      t1 = this._positionInputElementTimer;
      if (t1 != null)
        t1.cancel$0(0);
      this._positionInputElementTimer = null;
    },
    _addTapListener$0() {
      var t1 = this.domElement;
      t1.toString;
      this.subscriptions.push(A._EventStreamSubscription$(t1, "click", new A.IOSTextEditingStrategy__addTapListener_closure(this), false, type$._ElementEventStreamImpl_MouseEvent._precomputed1));
    },
    _schedulePlacement$0() {
      var t1 = this._positionInputElementTimer;
      if (t1 != null)
        t1.cancel$0(0);
      this._positionInputElementTimer = A.Timer_Timer(B.Duration_100000, new A.IOSTextEditingStrategy__schedulePlacement_closure(this));
    },
    placeElement$0() {
      var t1, t2;
      this.domElement.focus();
      t1 = this.geometry;
      if (t1 != null) {
        t2 = this.domElement;
        t2.toString;
        t1.applyToDomElement$1(t2);
      }
    }
  };
  A.IOSTextEditingStrategy_addEventHandlers_closure.prototype = {
    call$1(_) {
      this.$this._schedulePlacement$0();
    },
    $signature: 1
  };
  A.IOSTextEditingStrategy_addEventHandlers_closure0.prototype = {
    call$1(_) {
      var t1 = this.$this;
      if (document.hasFocus())
        t1.domElement.focus();
      else
        t1.owner.sendTextConnectionClosedToFrameworkIfAny$0();
    },
    $signature: 1
  };
  A.IOSTextEditingStrategy__addTapListener_closure.prototype = {
    call$1(_) {
      var t2,
        t1 = this.$this;
      if (t1._canPosition) {
        t2 = t1.domElement.style;
        B.CssStyleDeclaration_methods._setPropertyHelper$3(t2, B.CssStyleDeclaration_methods._browserPropertyName$1(t2, "transform"), "translate(-9999px, -9999px)", "");
        t1._canPosition = false;
        t1._schedulePlacement$0();
      }
    },
    $signature: 28
  };
  A.IOSTextEditingStrategy__schedulePlacement_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._canPosition = true;
      t1.placeElement$0();
    },
    $signature: 0
  };
  A.AndroidTextEditingStrategy.prototype = {
    initializeTextEditing$3$onAction$onChange(inputConfig, onAction, onChange) {
      var t1, t2, _this = this;
      _this.super$DefaultTextEditingStrategy$initializeTextEditing(inputConfig, onAction, onChange);
      t1 = _this.domElement;
      t1.toString;
      inputConfig.inputType.configureInputMode$1(t1);
      if (A._lateReadCheck(_this.__DefaultTextEditingStrategy_inputConfiguration, "inputConfiguration").autofillGroup != null)
        _this.placeForm$0();
      else {
        t1 = $._flutterViewEmbedder;
        t1 = (t1 == null ? $._flutterViewEmbedder = A.FlutterViewEmbedder$() : t1)._glassPaneShadow;
        t1.toString;
        t2 = _this.domElement;
        t2.toString;
        t1.append$1(0, t2);
      }
      t1 = _this.domElement;
      t1.toString;
      inputConfig.textCapitalization.setAutocapitalizeAttribute$1(t1);
    },
    addEventHandlers$0() {
      var t1, t2, t3, t4, _this = this,
        _s18_ = "inputConfiguration";
      if (A._lateReadCheck(_this.__DefaultTextEditingStrategy_inputConfiguration, _s18_).autofillGroup != null)
        B.JSArray_methods.addAll$1(_this.subscriptions, A._lateReadCheck(_this.__DefaultTextEditingStrategy_inputConfiguration, _s18_).autofillGroup.addInputEventListeners$0());
      t1 = _this.subscriptions;
      t2 = _this.domElement;
      t2.toString;
      t3 = _this.get$handleChange();
      t4 = type$._ElementEventStreamImpl_Event._precomputed1;
      t1.push(A._EventStreamSubscription$(t2, "input", t3, false, t4));
      t2 = _this.domElement;
      t2.toString;
      t1.push(A._EventStreamSubscription$(t2, "keydown", _this.get$maybeSendAction(), false, type$._ElementEventStreamImpl_KeyboardEvent._precomputed1));
      t1.push(A._EventStreamSubscription$(document, "selectionchange", t3, false, type$.Event));
      t3 = _this.domElement;
      t3.toString;
      J.addEventListener$2$x(t3, "beforeinput", _this.get$handleBeforeInput());
      t3 = _this.domElement;
      t3.toString;
      J.addEventListener$2$x(t3, "compositionupdate", _this.get$handleCompositionUpdate());
      t3 = _this.domElement;
      t3.toString;
      t1.push(A._EventStreamSubscription$(t3, "blur", new A.AndroidTextEditingStrategy_addEventHandlers_closure(_this), false, t4));
    },
    placeElement$0() {
      var t1, t2;
      this.domElement.focus();
      t1 = this.geometry;
      if (t1 != null) {
        t2 = this.domElement;
        t2.toString;
        t1.applyToDomElement$1(t2);
      }
    }
  };
  A.AndroidTextEditingStrategy_addEventHandlers_closure.prototype = {
    call$1(_) {
      var t1 = this.$this;
      if (document.hasFocus())
        t1.domElement.focus();
      else
        t1.owner.sendTextConnectionClosedToFrameworkIfAny$0();
    },
    $signature: 1
  };
  A.FirefoxTextEditingStrategy.prototype = {
    initializeTextEditing$3$onAction$onChange(inputConfig, onAction, onChange) {
      this.super$DefaultTextEditingStrategy$initializeTextEditing(inputConfig, onAction, onChange);
      if (A._lateReadCheck(this.__DefaultTextEditingStrategy_inputConfiguration, "inputConfiguration").autofillGroup != null)
        this.placeForm$0();
    },
    addEventHandlers$0() {
      var t1, t2, t3, t4, t5, _this = this,
        _s18_ = "inputConfiguration";
      if (A._lateReadCheck(_this.__DefaultTextEditingStrategy_inputConfiguration, _s18_).autofillGroup != null)
        B.JSArray_methods.addAll$1(_this.subscriptions, A._lateReadCheck(_this.__DefaultTextEditingStrategy_inputConfiguration, _s18_).autofillGroup.addInputEventListeners$0());
      t1 = _this.subscriptions;
      t2 = _this.domElement;
      t2.toString;
      t3 = _this.get$handleChange();
      t4 = type$._ElementEventStreamImpl_Event._precomputed1;
      t1.push(A._EventStreamSubscription$(t2, "input", t3, false, t4));
      t2 = _this.domElement;
      t2.toString;
      t5 = type$._ElementEventStreamImpl_KeyboardEvent._precomputed1;
      t1.push(A._EventStreamSubscription$(t2, "keydown", _this.get$maybeSendAction(), false, t5));
      t2 = _this.domElement;
      t2.toString;
      J.addEventListener$2$x(t2, "beforeinput", _this.get$handleBeforeInput());
      t2 = _this.domElement;
      t2.toString;
      J.addEventListener$2$x(t2, "compositionupdate", _this.get$handleCompositionUpdate());
      t2 = _this.domElement;
      t2.toString;
      t1.push(A._EventStreamSubscription$(t2, "keyup", new A.FirefoxTextEditingStrategy_addEventHandlers_closure(_this), false, t5));
      t5 = _this.domElement;
      t5.toString;
      t1.push(A._EventStreamSubscription$(t5, "select", t3, false, t4));
      t3 = _this.domElement;
      t3.toString;
      t1.push(A._EventStreamSubscription$(t3, "blur", new A.FirefoxTextEditingStrategy_addEventHandlers_closure0(_this), false, t4));
      _this.preventDefaultForMouseEvents$0();
    },
    _postponeFocus$0() {
      A.Timer_Timer(B.Duration_0, new A.FirefoxTextEditingStrategy__postponeFocus_closure(this));
    },
    placeElement$0() {
      var t1, t2, _this = this;
      _this.domElement.focus();
      t1 = _this.geometry;
      if (t1 != null) {
        t2 = _this.domElement;
        t2.toString;
        t1.applyToDomElement$1(t2);
      }
      t1 = _this.lastEditingState;
      if (t1 != null) {
        t2 = _this.domElement;
        t2.toString;
        t1.applyToDomElement$1(t2);
      }
    }
  };
  A.FirefoxTextEditingStrategy_addEventHandlers_closure.prototype = {
    call$1($event) {
      this.$this.handleChange$1($event);
    },
    $signature: 235
  };
  A.FirefoxTextEditingStrategy_addEventHandlers_closure0.prototype = {
    call$1(_) {
      this.$this._postponeFocus$0();
    },
    $signature: 1
  };
  A.FirefoxTextEditingStrategy__postponeFocus_closure.prototype = {
    call$0() {
      this.$this.domElement.focus();
    },
    $signature: 0
  };
  A.TextInputCommand.prototype = {};
  A.TextInputSetClient.prototype = {
    run$1(textEditing) {
      var t1 = textEditing._clientId;
      if (t1 != null && t1 !== this.clientId && textEditing.isEditing) {
        textEditing.isEditing = false;
        textEditing.get$strategy().disable$0(0);
      }
      textEditing._clientId = this.clientId;
      textEditing.configuration = this.configuration;
    }
  };
  A.TextInputUpdateConfig.prototype = {
    run$1(textEditing) {
      var t1 = textEditing.get$strategy(),
        t2 = textEditing.configuration;
      t2.toString;
      t1.applyConfiguration$1(t2);
    }
  };
  A.TextInputSetEditingState.prototype = {
    run$1(textEditing) {
      textEditing.get$strategy().setEditingState$1(this.state);
    }
  };
  A.TextInputShow.prototype = {
    run$1(textEditing) {
      if (!textEditing.isEditing)
        textEditing._startEditing$0();
    }
  };
  A.TextInputSetEditableSizeAndTransform.prototype = {
    run$1(textEditing) {
      textEditing.get$strategy().updateElementPlacement$1(this.geometry);
    }
  };
  A.TextInputSetStyle.prototype = {
    run$1(textEditing) {
      textEditing.get$strategy().updateElementStyle$1(this.style);
    }
  };
  A.TextInputClearClient.prototype = {
    run$1(textEditing) {
      if (textEditing.isEditing) {
        textEditing.isEditing = false;
        textEditing.get$strategy().disable$0(0);
      }
    }
  };
  A.TextInputHide.prototype = {
    run$1(textEditing) {
      if (textEditing.isEditing) {
        textEditing.isEditing = false;
        textEditing.get$strategy().disable$0(0);
      }
    }
  };
  A.TextInputSetMarkedTextRect.prototype = {
    run$1(textEditing) {
    }
  };
  A.TextInputSetCaretRect.prototype = {
    run$1(textEditing) {
    }
  };
  A.TextInputRequestAutofill.prototype = {
    run$1(textEditing) {
    }
  };
  A.TextInputFinishAutofillContext.prototype = {
    run$1(textEditing) {
      textEditing.sendTextConnectionClosedToFrameworkIfAny$0();
      if (this.saveForm)
        A.saveForms();
      A.cleanForms();
    }
  };
  A.saveForms_closure.prototype = {
    call$2(identifier, form) {
      type$.InputElement._as(J.get$first$ax(form.getElementsByClassName("submitBtn"))).click();
    },
    $signature: 238
  };
  A.TextEditingChannel.prototype = {
    handleTextInput$2(data, callback) {
      var t1, t2, command, transformList, textAlignIndex, textDirectionIndex, fontWeightIndex, fontWeight,
        $call = B.C_JSONMethodCodec.decodeMethodCall$1(data);
      switch ($call.method) {
        case "TextInput.setClient":
          t1 = $call.$arguments;
          t2 = J.getInterceptor$asx(t1);
          command = new A.TextInputSetClient(A._asInt(t2.$index(t1, 0)), A.InputConfiguration$fromFrameworkMessage(type$.Map_String_dynamic._as(t2.$index(t1, 1))));
          break;
        case "TextInput.updateConfig":
          this.implementation.configuration = A.InputConfiguration$fromFrameworkMessage(type$.Map_String_dynamic._as($call.$arguments));
          command = B.C_TextInputUpdateConfig;
          break;
        case "TextInput.setEditingState":
          command = new A.TextInputSetEditingState(A.EditingState_EditingState$fromFrameworkMessage(type$.Map_String_dynamic._as($call.$arguments)));
          break;
        case "TextInput.show":
          command = B.C_TextInputShow;
          break;
        case "TextInput.setEditableSizeAndTransform":
          t1 = type$.Map_String_dynamic._as($call.$arguments);
          t2 = J.getInterceptor$asx(t1);
          transformList = A.List_List$from(type$.List_dynamic._as(t2.$index(t1, "transform")), true, type$.double);
          command = new A.TextInputSetEditableSizeAndTransform(new A.EditableTextGeometry(A._asDouble(t2.$index(t1, "width")), A._asDouble(t2.$index(t1, "height")), new Float32Array(A._ensureNativeList(transformList))));
          break;
        case "TextInput.setStyle":
          t1 = type$.Map_String_dynamic._as($call.$arguments);
          t2 = J.getInterceptor$asx(t1);
          textAlignIndex = A._asInt(t2.$index(t1, "textAlignIndex"));
          textDirectionIndex = A._asInt(t2.$index(t1, "textDirectionIndex"));
          fontWeightIndex = A._asIntQ(t2.$index(t1, "fontWeightIndex"));
          fontWeight = fontWeightIndex != null ? A.fontWeightIndexToCss(fontWeightIndex) : "normal";
          command = new A.TextInputSetStyle(new A.EditableTextStyle(A._asDoubleQ(t2.$index(t1, "fontSize")), fontWeight, A._asStringQ(t2.$index(t1, "fontFamily")), B.List_s2p[textAlignIndex], B.List_TextDirection_0_TextDirection_1[textDirectionIndex]));
          break;
        case "TextInput.clearClient":
          command = B.C_TextInputClearClient;
          break;
        case "TextInput.hide":
          command = B.C_TextInputHide;
          break;
        case "TextInput.requestAutofill":
          command = B.C_TextInputRequestAutofill;
          break;
        case "TextInput.finishAutofillContext":
          command = new A.TextInputFinishAutofillContext(A._asBool($call.$arguments));
          break;
        case "TextInput.setMarkedTextRect":
          command = B.C_TextInputSetMarkedTextRect;
          break;
        case "TextInput.setCaretRect":
          command = B.C_TextInputSetCaretRect;
          break;
        default:
          $.$get$EnginePlatformDispatcher__instance().replyToPlatformMessage$2(callback, null);
          return;
      }
      command.run$1(this.implementation);
      new A.TextEditingChannel_handleTextInput_closure(callback).call$0();
    }
  };
  A.TextEditingChannel_handleTextInput_closure.prototype = {
    call$0() {
      $.$get$EnginePlatformDispatcher__instance().replyToPlatformMessage$2(this.callback, B.C_JSONMessageCodec.encodeMessage$1([true]));
    },
    $signature: 0
  };
  A.HybridTextEditing.prototype = {
    get$channel(_) {
      var value = this.__HybridTextEditing_channel;
      if (value === $) {
        A._lateInitializeOnceCheck(value, "channel");
        value = this.__HybridTextEditing_channel = new A.TextEditingChannel(this);
      }
      return value;
    },
    get$strategy() {
      var t1, result, t2, t3, strategy, _this = this,
        value = _this.__HybridTextEditing_strategy;
      if (value === $) {
        t1 = $.EngineSemanticsOwner__instance;
        if ((t1 == null ? $.EngineSemanticsOwner__instance = A.EngineSemanticsOwner$_() : t1)._semanticsEnabled) {
          t1 = A.SemanticsTextEditingStrategy_ensureInitialized(_this);
          result = t1;
        } else {
          t1 = $.$get$_browserEngine();
          t2 = t1 === B.BrowserEngine_1;
          if (t2) {
            t3 = $.$get$_operatingSystem();
            t3 = t3 === B.OperatingSystem_0;
          } else
            t3 = false;
          if (t3)
            strategy = new A.IOSTextEditingStrategy(_this, A._setArrayType([], type$.JSArray_StreamSubscription_Event));
          else if (t2)
            strategy = new A.SafariDesktopTextEditingStrategy(_this, A._setArrayType([], type$.JSArray_StreamSubscription_Event));
          else {
            if (t1 === B.BrowserEngine_0) {
              t2 = $.$get$_operatingSystem();
              t2 = t2 === B.OperatingSystem_1;
            } else
              t2 = false;
            if (t2)
              strategy = new A.AndroidTextEditingStrategy(_this, A._setArrayType([], type$.JSArray_StreamSubscription_Event));
            else {
              t2 = type$.JSArray_StreamSubscription_Event;
              strategy = t1 === B.BrowserEngine_2 ? new A.FirefoxTextEditingStrategy(_this, A._setArrayType([], t2)) : new A.GloballyPositionedTextEditingStrategy(_this, A._setArrayType([], t2));
            }
          }
          result = strategy;
        }
        A._lateInitializeOnceCheck(_this.__HybridTextEditing_strategy, "strategy");
        value = _this.__HybridTextEditing_strategy = result;
      }
      return value;
    },
    _startEditing$0() {
      var t1, t2, _this = this;
      _this.isEditing = true;
      t1 = _this.get$strategy();
      t2 = _this.configuration;
      t2.toString;
      t1.enable$3$onAction$onChange(0, t2, new A.HybridTextEditing__startEditing_closure(_this), new A.HybridTextEditing__startEditing_closure0(_this));
    },
    sendTextConnectionClosedToFrameworkIfAny$0() {
      var t1, _this = this;
      if (_this.isEditing) {
        _this.isEditing = false;
        _this.get$strategy().disable$0(0);
        _this.get$channel(_this);
        t1 = _this._clientId;
        $.$get$EnginePlatformDispatcher__instance().invokeOnPlatformMessage$3("flutter/textinput", B.C_JSONMethodCodec.encodeMethodCall$1(new A.MethodCall("TextInputClient.onConnectionClosed", [t1])), A._engine___emptyCallback$closure());
      }
    }
  };
  A.HybridTextEditing__startEditing_closure0.prototype = {
    call$2(editingState, editingDeltaState) {
      var t2, t3,
        _s17_ = "flutter/textinput",
        t1 = this.$this;
      if (t1.configuration.enableDeltaModel) {
        t1.get$channel(t1);
        t1 = t1._clientId;
        t2 = type$.String;
        t3 = type$.dynamic;
        $.$get$EnginePlatformDispatcher__instance().invokeOnPlatformMessage$3(_s17_, B.C_JSONMethodCodec.encodeMethodCall$1(new A.MethodCall("TextInputClient.updateEditingStateWithDeltas", [t1, A.LinkedHashMap_LinkedHashMap$_literal(["deltas", A._setArrayType([A.LinkedHashMap_LinkedHashMap$_literal(["oldText", editingDeltaState.oldText, "deltaText", editingDeltaState.deltaText, "deltaStart", editingDeltaState.deltaStart, "deltaEnd", editingDeltaState.deltaEnd, "selectionBase", editingDeltaState.baseOffset, "selectionExtent", editingDeltaState.extentOffset], t2, t3)], type$.JSArray_Map_String_dynamic)], t2, t3)])), A._engine___emptyCallback$closure());
      } else {
        t1.get$channel(t1);
        t1 = t1._clientId;
        $.$get$EnginePlatformDispatcher__instance().invokeOnPlatformMessage$3(_s17_, B.C_JSONMethodCodec.encodeMethodCall$1(new A.MethodCall("TextInputClient.updateEditingState", [t1, editingState.toFlutter$0()])), A._engine___emptyCallback$closure());
      }
    },
    $signature: 239
  };
  A.HybridTextEditing__startEditing_closure.prototype = {
    call$1(inputAction) {
      var t1 = this.$this;
      t1.get$channel(t1);
      t1 = t1._clientId;
      $.$get$EnginePlatformDispatcher__instance().invokeOnPlatformMessage$3("flutter/textinput", B.C_JSONMethodCodec.encodeMethodCall$1(new A.MethodCall("TextInputClient.performAction", [t1, inputAction])), A._engine___emptyCallback$closure());
    },
    $signature: 241
  };
  A.EditableTextStyle.prototype = {
    applyToDomElement$1(domElement) {
      var _this = this,
        t1 = domElement.style,
        t2 = A.textAlignToCssValue(_this.textAlign, _this.textDirection);
      t1.textAlign = t2 == null ? "" : t2;
      t2 = _this.fontWeight + " " + A.S(_this.fontSize) + "px " + A.S(A.canonicalizeFontFamily(_this.fontFamily));
      t1.font = t2;
    }
  };
  A.EditableTextGeometry.prototype = {
    applyToDomElement$1(domElement) {
      var cssTransform = A.float64ListToCssTransform(this.globalTransform),
        t1 = domElement.style,
        t2 = A.S(this.width) + "px";
      t1.width = t2;
      t2 = A.S(this.height) + "px";
      t1.height = t2;
      B.CssStyleDeclaration_methods._setPropertyHelper$3(t1, B.CssStyleDeclaration_methods._browserPropertyName$1(t1, "transform"), cssTransform, "");
    }
  };
  A.TransformKind.prototype = {
    toString$0(_) {
      return "TransformKind." + this._name;
    }
  };
  A.Matrix40.prototype = {
    setFrom$1(arg) {
      var argStorage = arg.__engine$_m4storage,
        t1 = this.__engine$_m4storage;
      t1[15] = argStorage[15];
      t1[14] = argStorage[14];
      t1[13] = argStorage[13];
      t1[12] = argStorage[12];
      t1[11] = argStorage[11];
      t1[10] = argStorage[10];
      t1[9] = argStorage[9];
      t1[8] = argStorage[8];
      t1[7] = argStorage[7];
      t1[6] = argStorage[6];
      t1[5] = argStorage[5];
      t1[4] = argStorage[4];
      t1[3] = argStorage[3];
      t1[2] = argStorage[2];
      t1[1] = argStorage[1];
      t1[0] = argStorage[0];
    },
    $index(_, i) {
      return this.__engine$_m4storage[i];
    },
    translate$3(_, x, y, z) {
      var t1 = this.__engine$_m4storage,
        t2 = t1[0],
        t3 = t1[4],
        t4 = t1[8],
        t5 = t1[12],
        t6 = t1[1],
        t7 = t1[5],
        t8 = t1[9],
        t9 = t1[13],
        t10 = t1[2],
        t11 = t1[6],
        t12 = t1[10],
        t13 = t1[14],
        t14 = t1[3],
        t15 = t1[7],
        t16 = t1[11],
        t17 = t1[15];
      t1[12] = t2 * x + t3 * y + t4 * z + t5;
      t1[13] = t6 * x + t7 * y + t8 * z + t9;
      t1[14] = t10 * x + t11 * y + t12 * z + t13;
      t1[15] = t14 * x + t15 * y + t16 * z + t17;
    },
    translate$2($receiver, x, y) {
      return this.translate$3($receiver, x, y, 0);
    },
    scale$2(_, x, y) {
      var sy = y == null ? x : y,
        t1 = this.__engine$_m4storage;
      t1[15] = t1[15];
      t1[0] = t1[0] * x;
      t1[1] = t1[1] * x;
      t1[2] = t1[2] * x;
      t1[3] = t1[3] * x;
      t1[4] = t1[4] * sy;
      t1[5] = t1[5] * sy;
      t1[6] = t1[6] * sy;
      t1[7] = t1[7] * sy;
      t1[8] = t1[8] * x;
      t1[9] = t1[9] * x;
      t1[10] = t1[10] * x;
      t1[11] = t1[11] * x;
      t1[12] = t1[12];
      t1[13] = t1[13];
      t1[14] = t1[14];
    },
    scale$1($receiver, x) {
      return this.scale$2($receiver, x, null);
    },
    isIdentity$0(_) {
      var t1 = this.__engine$_m4storage;
      return t1[0] === 1 && t1[1] === 0 && t1[2] === 0 && t1[3] === 0 && t1[4] === 0 && t1[5] === 1 && t1[6] === 0 && t1[7] === 0 && t1[8] === 0 && t1[9] === 0 && t1[10] === 1 && t1[11] === 0 && t1[12] === 0 && t1[13] === 0 && t1[14] === 0 && t1[15] === 1;
    },
    isIdentityOrTranslation$0() {
      var t1 = this.__engine$_m4storage;
      return t1[15] === 1 && t1[0] === 1 && t1[1] === 0 && t1[2] === 0 && t1[3] === 0 && t1[4] === 0 && t1[5] === 1 && t1[6] === 0 && t1[7] === 0 && t1[8] === 0 && t1[9] === 0 && t1[10] === 1 && t1[11] === 0;
    },
    setTranslationRaw$3(x, y, z) {
      var t1 = this.__engine$_m4storage;
      t1[14] = z;
      t1[13] = y;
      t1[12] = x;
    },
    copyInverse$1(arg) {
      var invDet, t1, t2, t3,
        argStorage = arg.__engine$_m4storage,
        a00 = argStorage[0],
        a01 = argStorage[1],
        a02 = argStorage[2],
        a03 = argStorage[3],
        a10 = argStorage[4],
        a11 = argStorage[5],
        a12 = argStorage[6],
        a13 = argStorage[7],
        a20 = argStorage[8],
        a21 = argStorage[9],
        a22 = argStorage[10],
        a23 = argStorage[11],
        a30 = argStorage[12],
        a31 = argStorage[13],
        a32 = argStorage[14],
        a33 = argStorage[15],
        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
      if (det === 0) {
        this.setFrom$1(arg);
        return 0;
      }
      invDet = 1 / det;
      t1 = this.__engine$_m4storage;
      t1[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
      t1[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
      t1[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
      t1[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
      t2 = -a10;
      t1[4] = (t2 * b11 + a12 * b08 - a13 * b07) * invDet;
      t1[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
      t3 = -a30;
      t1[6] = (t3 * b05 + a32 * b02 - a33 * b01) * invDet;
      t1[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
      t1[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
      t1[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
      t1[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
      t1[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
      t1[12] = (t2 * b09 + a11 * b07 - a12 * b06) * invDet;
      t1[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
      t1[14] = (t3 * b03 + a31 * b01 - a32 * b00) * invDet;
      t1[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
      return det;
    },
    multiply$1(_, arg) {
      var t1 = this.__engine$_m4storage,
        m33 = t1[15],
        m00 = t1[0],
        m01 = t1[4],
        m02 = t1[8],
        m03 = t1[12],
        m10 = t1[1],
        m11 = t1[5],
        m12 = t1[9],
        m13 = t1[13],
        m20 = t1[2],
        m21 = t1[6],
        m22 = t1[10],
        m23 = t1[14],
        m30 = t1[3],
        m31 = t1[7],
        m32 = t1[11],
        argStorage = arg.__engine$_m4storage,
        n33 = argStorage[15],
        n00 = argStorage[0],
        n01 = argStorage[4],
        n02 = argStorage[8],
        n03 = argStorage[12],
        n10 = argStorage[1],
        n11 = argStorage[5],
        n12 = argStorage[9],
        n13 = argStorage[13],
        n20 = argStorage[2],
        n21 = argStorage[6],
        n22 = argStorage[10],
        n23 = argStorage[14],
        n30 = argStorage[3],
        n31 = argStorage[7],
        n32 = argStorage[11];
      t1[0] = m00 * n00 + m01 * n10 + m02 * n20 + m03 * n30;
      t1[4] = m00 * n01 + m01 * n11 + m02 * n21 + m03 * n31;
      t1[8] = m00 * n02 + m01 * n12 + m02 * n22 + m03 * n32;
      t1[12] = m00 * n03 + m01 * n13 + m02 * n23 + m03 * n33;
      t1[1] = m10 * n00 + m11 * n10 + m12 * n20 + m13 * n30;
      t1[5] = m10 * n01 + m11 * n11 + m12 * n21 + m13 * n31;
      t1[9] = m10 * n02 + m11 * n12 + m12 * n22 + m13 * n32;
      t1[13] = m10 * n03 + m11 * n13 + m12 * n23 + m13 * n33;
      t1[2] = m20 * n00 + m21 * n10 + m22 * n20 + m23 * n30;
      t1[6] = m20 * n01 + m21 * n11 + m22 * n21 + m23 * n31;
      t1[10] = m20 * n02 + m21 * n12 + m22 * n22 + m23 * n32;
      t1[14] = m20 * n03 + m21 * n13 + m22 * n23 + m23 * n33;
      t1[3] = m30 * n00 + m31 * n10 + m32 * n20 + m33 * n30;
      t1[7] = m30 * n01 + m31 * n11 + m32 * n21 + m33 * n31;
      t1[11] = m30 * n02 + m31 * n12 + m32 * n22 + m33 * n32;
      t1[15] = m30 * n03 + m31 * n13 + m32 * n23 + m33 * n33;
    },
    multiplied$1(arg) {
      var t1 = new A.Matrix40(new Float32Array(16));
      t1.setFrom$1(this);
      t1.multiply$1(0, arg);
      return t1;
    },
    transform2$1(vector) {
      var x = vector[0],
        y = vector[1],
        t1 = this.__engine$_m4storage;
      vector[0] = t1[0] * x + t1[4] * y + t1[12];
      vector[1] = t1[1] * x + t1[5] * y + t1[13];
    },
    toString$0(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.EngineFlutterWindow.prototype = {
    EngineFlutterWindow$2(_windowId, platformDispatcher) {
      var _this = this,
        engineDispatcher = _this.platformDispatcher,
        t1 = _this._windowId;
      engineDispatcher._windows.$indexSet(0, t1, _this);
      engineDispatcher._windowConfigurations.$indexSet(0, t1, B.C_ViewConfiguration);
      if ($._isUrlStrategySet)
        _this._browserHistory = A.createHistoryForExistingState($._customUrlStrategy);
      $._hotRestartListeners.push(new A.EngineFlutterWindow_closure(_this));
    },
    get$browserHistory() {
      var urlStrategy,
        t1 = this._browserHistory;
      if (t1 == null) {
        if ($._isUrlStrategySet)
          urlStrategy = $._customUrlStrategy;
        else
          urlStrategy = B.C_HashUrlStrategy;
        $._isUrlStrategySet = true;
        t1 = this._browserHistory = A.createHistoryForExistingState(urlStrategy);
      }
      return t1;
    },
    _useSingleEntryBrowserHistory$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, urlStrategy, strategy, t1;
      var $async$_useSingleEntryBrowserHistory$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._browserHistory;
              if (t1 == null) {
                if ($._isUrlStrategySet)
                  urlStrategy = $._customUrlStrategy;
                else
                  urlStrategy = B.C_HashUrlStrategy;
                $._isUrlStrategySet = true;
                t1 = $async$self._browserHistory = A.createHistoryForExistingState(urlStrategy);
              }
              if (t1 instanceof A.SingleEntryBrowserHistory) {
                // goto return
                $async$goto = 1;
                break;
              }
              strategy = t1.get$urlStrategy();
              t1 = $async$self._browserHistory;
              $async$goto = 3;
              return A._asyncAwait(t1 == null ? null : t1.tearDown$0(), $async$_useSingleEntryBrowserHistory$0);
            case 3:
              // returning from await.
              $async$self._browserHistory = A.SingleEntryBrowserHistory$(strategy);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_useSingleEntryBrowserHistory$0, $async$completer);
    },
    _useMultiEntryBrowserHistory$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, urlStrategy, strategy, t1;
      var $async$_useMultiEntryBrowserHistory$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._browserHistory;
              if (t1 == null) {
                if ($._isUrlStrategySet)
                  urlStrategy = $._customUrlStrategy;
                else
                  urlStrategy = B.C_HashUrlStrategy;
                $._isUrlStrategySet = true;
                t1 = $async$self._browserHistory = A.createHistoryForExistingState(urlStrategy);
              }
              if (t1 instanceof A.MultiEntriesBrowserHistory) {
                // goto return
                $async$goto = 1;
                break;
              }
              strategy = t1.get$urlStrategy();
              t1 = $async$self._browserHistory;
              $async$goto = 3;
              return A._asyncAwait(t1 == null ? null : t1.tearDown$0(), $async$_useMultiEntryBrowserHistory$0);
            case 3:
              // returning from await.
              $async$self._browserHistory = A.MultiEntriesBrowserHistory$(strategy);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_useMultiEntryBrowserHistory$0, $async$completer);
    },
    _waitInTheLine$1(callback) {
      return this._waitInTheLine$body$EngineFlutterWindow(callback);
    },
    _waitInTheLine$body$EngineFlutterWindow(callback) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, result, currentPosition, completer;
      var $async$_waitInTheLine$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              currentPosition = $async$self._endOfTheLine;
              completer = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void);
              $async$self._endOfTheLine = completer.future;
              $async$goto = 3;
              return A._asyncAwait(currentPosition, $async$_waitInTheLine$1);
            case 3:
              // returning from await.
              result = false;
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(callback.call$0(), $async$_waitInTheLine$1);
            case 7:
              // returning from await.
              result = $async$result;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              J.complete$0$z(completer);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_waitInTheLine$1, $async$completer);
    },
    handleNavigationMessage$1(data) {
      return this.handleNavigationMessage$body$EngineFlutterWindow(data);
    },
    handleNavigationMessage$body$EngineFlutterWindow(data) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this;
      var $async$handleNavigationMessage$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $async$self._waitInTheLine$1(new A.EngineFlutterWindow_handleNavigationMessage_closure($async$self, data));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$handleNavigationMessage$1, $async$completer);
    },
    get$viewConfiguration() {
      var t1 = this.platformDispatcher._windowConfigurations.$index(0, this._windowId);
      return t1 == null ? B.C_ViewConfiguration : t1;
    },
    get$physicalSize() {
      if (this._physicalSize == null)
        this.computePhysicalSize$0();
      var t1 = this._physicalSize;
      t1.toString;
      return t1;
    },
    computePhysicalSize$0() {
      var t1, t2, docWidth, docHeight, windowInnerWidth, windowInnerHeight, _this = this,
        viewport = window.visualViewport;
      if (viewport != null) {
        t1 = $.$get$_operatingSystem();
        t2 = _this._debugDevicePixelRatio;
        if (t1 === B.OperatingSystem_0) {
          t1 = document.documentElement;
          docWidth = t1.clientWidth;
          docHeight = t1.clientHeight;
          windowInnerWidth = docWidth * (t2 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t2);
          t1 = _this._debugDevicePixelRatio;
          windowInnerHeight = docHeight * (t1 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t1);
        } else {
          t1 = viewport.width;
          t1.toString;
          windowInnerWidth = t1 * (t2 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t2);
          t1 = viewport.height;
          t1.toString;
          t2 = _this._debugDevicePixelRatio;
          windowInnerHeight = t1 * (t2 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t2);
        }
      } else {
        t1 = window.innerWidth;
        t1.toString;
        t2 = _this._debugDevicePixelRatio;
        windowInnerWidth = t1 * (t2 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t2);
        t1 = window.innerHeight;
        t1.toString;
        t2 = _this._debugDevicePixelRatio;
        windowInnerHeight = t1 * (t2 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t2);
      }
      _this._physicalSize = new A.Size(windowInnerWidth, windowInnerHeight);
    },
    computeOnScreenKeyboardInsets$1(isEditingOnMobile) {
      var t1, t2, windowInnerHeight, _this = this,
        viewport = window.visualViewport;
      if (viewport != null) {
        t1 = $.$get$_operatingSystem();
        t1 = t1 === B.OperatingSystem_0 && !isEditingOnMobile;
        t2 = _this._debugDevicePixelRatio;
        if (t1) {
          t1 = document.documentElement.clientHeight;
          windowInnerHeight = t1 * (t2 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t2);
        } else {
          t1 = viewport.height;
          t1.toString;
          windowInnerHeight = t1 * (t2 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t2);
        }
      } else {
        t1 = window.innerHeight;
        t1.toString;
        t2 = _this._debugDevicePixelRatio;
        windowInnerHeight = t1 * (t2 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t2);
      }
      _this._viewInsets = new A.WindowPadding(0, 0, 0, _this._physicalSize._dy - windowInnerHeight);
    },
    isRotation$0() {
      var height, width, _this = this,
        t1 = window.visualViewport,
        t2 = _this._debugDevicePixelRatio;
      if (t1 != null) {
        t1 = window.visualViewport.height;
        t1.toString;
        height = t1 * (t2 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t2);
        t1 = window.visualViewport.width;
        t1.toString;
        t2 = _this._debugDevicePixelRatio;
        width = t1 * (t2 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t2);
      } else {
        t1 = window.innerHeight;
        t1.toString;
        height = t1 * (t2 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t2);
        t1 = window.innerWidth;
        t1.toString;
        t2 = _this._debugDevicePixelRatio;
        width = t1 * (t2 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t2);
      }
      t1 = _this._physicalSize;
      if (t1 != null) {
        t2 = t1._dy;
        if (t2 !== height && t1._dx !== width) {
          t1 = t1._dx;
          if (!(t2 > t1 && height < width))
            t1 = t1 > t2 && width < height;
          else
            t1 = true;
          if (t1)
            return true;
        }
      }
      return false;
    }
  };
  A.EngineFlutterWindow_closure.prototype = {
    call$0() {
      var t1 = this.$this._browserHistory;
      if (t1 != null)
        t1.dispose$0(0);
    },
    $signature: 0
  };
  A.EngineFlutterWindow_handleNavigationMessage_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this, t1, t2, t3, t4, decoded, $arguments;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              decoded = B.C_JSONMethodCodec.decodeMethodCall$1($async$self.data);
              $arguments = type$.nullable_Map_String_dynamic._as(decoded.$arguments);
            case 3:
              // switch
              switch (decoded.method) {
                case "selectMultiEntryHistory":
                  // goto case
                  $async$goto = 5;
                  break;
                case "selectSingleEntryHistory":
                  // goto case
                  $async$goto = 6;
                  break;
                case "routeUpdated":
                  // goto case
                  $async$goto = 7;
                  break;
                case "routeInformationUpdated":
                  // goto case
                  $async$goto = 8;
                  break;
                default:
                  // goto after switch
                  $async$goto = 4;
                  break;
              }
              break;
            case 5:
              // case
              $async$goto = 9;
              return A._asyncAwait($async$self.$this._useMultiEntryBrowserHistory$0(), $async$call$0);
            case 9:
              // returning from await.
              $async$returnValue = true;
              // goto return
              $async$goto = 1;
              break;
            case 6:
              // case
              $async$goto = 10;
              return A._asyncAwait($async$self.$this._useSingleEntryBrowserHistory$0(), $async$call$0);
            case 10:
              // returning from await.
              $async$returnValue = true;
              // goto return
              $async$goto = 1;
              break;
            case 7:
              // case
              t1 = $async$self.$this;
              $async$goto = 11;
              return A._asyncAwait(t1._useSingleEntryBrowserHistory$0(), $async$call$0);
            case 11:
              // returning from await.
              t1 = t1.get$browserHistory();
              $arguments.toString;
              t1.setRouteName$1(A._asStringQ(J.$index$asx($arguments, "routeName")));
              $async$returnValue = true;
              // goto return
              $async$goto = 1;
              break;
            case 8:
              // case
              t1 = $async$self.$this.get$browserHistory();
              $arguments.toString;
              t2 = J.getInterceptor$asx($arguments);
              t3 = A._asStringQ(t2.$index($arguments, "location"));
              t4 = t2.$index($arguments, "state");
              t2 = A._asBoolQ(t2.$index($arguments, "replace"));
              t1.setRouteName$3$replace$state(t3, t2 === true, t4);
              $async$returnValue = true;
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // after switch
              $async$returnValue = false;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 29
  };
  A.EngineSingletonFlutterWindow.prototype = {};
  A.WindowPadding.prototype = {};
  A._DomCanvas_EngineCanvas_SaveElementStackTracking.prototype = {};
  A._PersistedClipRect_PersistedContainerSurface__DomClip.prototype = {
    adoptElements$1(oldSurface) {
      this.super$PersistedSurface$adoptElements(oldSurface);
      this._DomClip__childContainer = oldSurface._DomClip__childContainer;
      oldSurface._DomClip__childContainer = null;
    },
    discard$0() {
      this.super$PersistedContainerSurface$discard();
      this._DomClip__childContainer = null;
    }
  };
  A._PersistedPhysicalShape_PersistedContainerSurface__DomClip.prototype = {
    adoptElements$1(oldSurface) {
      this.super$PersistedSurface$adoptElements(oldSurface);
      this._DomClip__childContainer = oldSurface._DomClip__childContainer;
      oldSurface._DomClip__childContainer = null;
    },
    discard$0() {
      this.super$PersistedContainerSurface$discard();
      this._DomClip__childContainer = null;
    }
  };
  A.__MouseAdapter__BaseAdapter__WheelEventListenerMixin.prototype = {};
  A.__PointerAdapter__BaseAdapter__WheelEventListenerMixin.prototype = {};
  A.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return "Instance of '" + A.Primitives_objectTypeName(receiver) + "'";
    },
    noSuchMethod$1(receiver, invocation) {
      throw A.wrapException(A.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    get$runtimeType(receiver) {
      return A.getRuntimeType(receiver);
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    $or(receiver, other) {
      return other || receiver;
    },
    $xor(receiver, other) {
      return receiver;
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType(receiver) {
      return B.Type_bool_lhE;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return "null";
    },
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return B.Type_Null_Yyn;
    },
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {};
  J.LegacyJavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return B.Type_JSObject_8k0;
    },
    toString$0(receiver) {
      return String(receiver);
    },
    $isJSObject: 1,
    $isCanvasKit: 1,
    $isSkFontWeight: 1,
    $isSkTextDirection: 1,
    $isSkTextAlign: 1,
    $isSkTextHeightBehavior: 1,
    $isSkRectHeightStyle: 1,
    $isSkRectWidthStyle: 1,
    $isSkClipOp: 1,
    $isSkFillType: 1,
    $isSkBlurStyle: 1,
    $isSkStrokeCap: 1,
    $isSkPaintStyle: 1,
    $isSkBlendMode: 1,
    $isSkStrokeJoin: 1,
    $isSkTileMode: 1,
    $isSkShader: 1,
    $isSkPaint: 1,
    $isSkMaskFilter: 1,
    $isSkPath: 1,
    $isSkPicture: 1,
    $isSkTextStyle: 1,
    $isSkTextBaseline: 1,
    $isSkTextShadow: 1,
    $isSkFontFeature: 1,
    $isSkFont: 1,
    $isSkParagraph: 1,
    $isSkDeletable: 1,
    $isJsUrlStrategy: 1,
    get$canvasKit(obj) {
      return obj.canvasKit;
    },
    get$BlendMode(obj) {
      return obj.BlendMode;
    },
    get$PaintStyle(obj) {
      return obj.PaintStyle;
    },
    get$StrokeCap(obj) {
      return obj.StrokeCap;
    },
    get$StrokeJoin(obj) {
      return obj.StrokeJoin;
    },
    get$BlurStyle(obj) {
      return obj.BlurStyle;
    },
    get$TileMode(obj) {
      return obj.TileMode;
    },
    get$FillType(obj) {
      return obj.FillType;
    },
    get$ClipOp(obj) {
      return obj.ClipOp;
    },
    get$RectHeightStyle(obj) {
      return obj.RectHeightStyle;
    },
    get$RectWidthStyle(obj) {
      return obj.RectWidthStyle;
    },
    get$TextAlign(obj) {
      return obj.TextAlign;
    },
    get$TextHeightBehavior(obj) {
      return obj.TextHeightBehavior;
    },
    get$TextDirection(obj) {
      return obj.TextDirection;
    },
    get$FontWeight(obj) {
      return obj.FontWeight;
    },
    get$Shader(obj) {
      return obj.Shader;
    },
    get$MaskFilter(obj) {
      return obj.MaskFilter;
    },
    get$Path(obj) {
      return obj.Path;
    },
    computeTonalColors$1(receiver, p0) {
      return receiver.computeTonalColors(p0);
    },
    get$ParagraphBuilder(obj) {
      return obj.ParagraphBuilder;
    },
    ParagraphStyle$1(receiver, p0) {
      return receiver.ParagraphStyle(p0);
    },
    TextStyle$1(receiver, p0) {
      return receiver.TextStyle(p0);
    },
    get$NoDecoration(obj) {
      return obj.NoDecoration;
    },
    get$UnderlineDecoration(obj) {
      return obj.UnderlineDecoration;
    },
    get$OverlineDecoration(obj) {
      return obj.OverlineDecoration;
    },
    get$LineThroughDecoration(obj) {
      return obj.LineThroughDecoration;
    },
    get$TextBaseline(obj) {
      return obj.TextBaseline;
    },
    get$TypefaceFontProvider(obj) {
      return obj.TypefaceFontProvider;
    },
    get$Typeface(obj) {
      return obj.Typeface;
    },
    GetWebGLContext$2(receiver, p0, p1) {
      return receiver.GetWebGLContext(p0, p1);
    },
    MakeGrContext$1(receiver, p0) {
      return receiver.MakeGrContext(p0);
    },
    MakeOnScreenGLSurface$4(receiver, p0, p1, p2, p3) {
      return receiver.MakeOnScreenGLSurface(p0, p1, p2, p3);
    },
    MakeSWCanvasSurface$1(receiver, p0) {
      return receiver.MakeSWCanvasSurface(p0);
    },
    getH5vccSkSurface$0(receiver) {
      return receiver.getH5vccSkSurface();
    },
    then$1$1(receiver, p0) {
      return receiver.then(p0);
    },
    then$1(receiver, p0) {
      return receiver.then(p0);
    },
    getCanvas$0(receiver) {
      return receiver.getCanvas();
    },
    flush$0(receiver) {
      return receiver.flush();
    },
    get$width(obj) {
      return obj.width;
    },
    get$height(obj) {
      return obj.height;
    },
    get$dispose(obj) {
      return obj.dispose;
    },
    dispose$0(receiver) {
      return receiver.dispose();
    },
    setResourceCacheLimitBytes$1(receiver, p0) {
      return receiver.setResourceCacheLimitBytes(p0);
    },
    releaseResourcesAndAbandonContext$0(receiver) {
      return receiver.releaseResourcesAndAbandonContext();
    },
    delete$0(receiver) {
      return receiver.delete();
    },
    get$value(obj) {
      return obj.value;
    },
    get$Thin(obj) {
      return obj.Thin;
    },
    get$ExtraLight(obj) {
      return obj.ExtraLight;
    },
    get$Light(obj) {
      return obj.Light;
    },
    get$Normal(obj) {
      return obj.Normal;
    },
    get$Medium(obj) {
      return obj.Medium;
    },
    get$SemiBold(obj) {
      return obj.SemiBold;
    },
    get$Bold(obj) {
      return obj.Bold;
    },
    get$ExtraBold(obj) {
      return obj.ExtraBold;
    },
    get$ExtraBlack(obj) {
      return obj.ExtraBlack;
    },
    get$RTL(obj) {
      return obj.RTL;
    },
    get$LTR(obj) {
      return obj.LTR;
    },
    get$Left(obj) {
      return obj.Left;
    },
    get$Right(obj) {
      return obj.Right;
    },
    get$Center(obj) {
      return obj.Center;
    },
    get$Justify(obj) {
      return obj.Justify;
    },
    get$Start(obj) {
      return obj.Start;
    },
    get$End(obj) {
      return obj.End;
    },
    get$All(obj) {
      return obj.All;
    },
    get$DisableFirstAscent(obj) {
      return obj.DisableFirstAscent;
    },
    get$DisableLastDescent(obj) {
      return obj.DisableLastDescent;
    },
    get$DisableAll(obj) {
      return obj.DisableAll;
    },
    get$Tight(obj) {
      return obj.Tight;
    },
    get$Max(obj) {
      return obj.Max;
    },
    get$IncludeLineSpacingMiddle(obj) {
      return obj.IncludeLineSpacingMiddle;
    },
    get$IncludeLineSpacingTop(obj) {
      return obj.IncludeLineSpacingTop;
    },
    get$IncludeLineSpacingBottom(obj) {
      return obj.IncludeLineSpacingBottom;
    },
    get$Strut(obj) {
      return obj.Strut;
    },
    get$Difference(obj) {
      return obj.Difference;
    },
    get$Intersect(obj) {
      return obj.Intersect;
    },
    get$Winding(obj) {
      return obj.Winding;
    },
    get$EvenOdd(obj) {
      return obj.EvenOdd;
    },
    get$Solid(obj) {
      return obj.Solid;
    },
    get$Outer(obj) {
      return obj.Outer;
    },
    get$Inner(obj) {
      return obj.Inner;
    },
    get$Butt(obj) {
      return obj.Butt;
    },
    get$Round(obj) {
      return obj.Round;
    },
    get$Square(obj) {
      return obj.Square;
    },
    get$Stroke(obj) {
      return obj.Stroke;
    },
    get$Fill(obj) {
      return obj.Fill;
    },
    get$Clear(obj) {
      return obj.Clear;
    },
    get$Src(obj) {
      return obj.Src;
    },
    get$Dst(obj) {
      return obj.Dst;
    },
    get$SrcOver(obj) {
      return obj.SrcOver;
    },
    get$DstOver(obj) {
      return obj.DstOver;
    },
    get$SrcIn(obj) {
      return obj.SrcIn;
    },
    get$DstIn(obj) {
      return obj.DstIn;
    },
    get$SrcOut(obj) {
      return obj.SrcOut;
    },
    get$DstOut(obj) {
      return obj.DstOut;
    },
    get$SrcATop(obj) {
      return obj.SrcATop;
    },
    get$DstATop(obj) {
      return obj.DstATop;
    },
    get$Xor(obj) {
      return obj.Xor;
    },
    get$Plus(obj) {
      return obj.Plus;
    },
    get$Modulate(obj) {
      return obj.Modulate;
    },
    get$Screen(obj) {
      return obj.Screen;
    },
    get$Overlay(obj) {
      return obj.Overlay;
    },
    get$Darken(obj) {
      return obj.Darken;
    },
    get$Lighten(obj) {
      return obj.Lighten;
    },
    get$ColorDodge(obj) {
      return obj.ColorDodge;
    },
    get$ColorBurn(obj) {
      return obj.ColorBurn;
    },
    get$HardLight(obj) {
      return obj.HardLight;
    },
    get$SoftLight(obj) {
      return obj.SoftLight;
    },
    get$Exclusion(obj) {
      return obj.Exclusion;
    },
    get$Multiply(obj) {
      return obj.Multiply;
    },
    get$Hue(obj) {
      return obj.Hue;
    },
    get$Saturation(obj) {
      return obj.Saturation;
    },
    get$Color(obj) {
      return obj.Color;
    },
    get$Luminosity(obj) {
      return obj.Luminosity;
    },
    get$Miter(obj) {
      return obj.Miter;
    },
    get$Bevel(obj) {
      return obj.Bevel;
    },
    get$Clamp(obj) {
      return obj.Clamp;
    },
    get$Repeat(obj) {
      return obj.Repeat;
    },
    get$Mirror(obj) {
      return obj.Mirror;
    },
    get$Decal(obj) {
      return obj.Decal;
    },
    isDeleted$0(receiver) {
      return receiver.isDeleted();
    },
    MakeLinearGradient$6(receiver, p0, p1, p2, p3, p4, p5) {
      return receiver.MakeLinearGradient(p0, p1, p2, p3, p4, p5);
    },
    MakeBlur$3(receiver, p0, p1, p2) {
      return receiver.MakeBlur(p0, p1, p2);
    },
    setBlendMode$1(receiver, p0) {
      return receiver.setBlendMode(p0);
    },
    setStyle$1(receiver, p0) {
      return receiver.setStyle(p0);
    },
    setStrokeWidth$1(receiver, p0) {
      return receiver.setStrokeWidth(p0);
    },
    setStrokeCap$1(receiver, p0) {
      return receiver.setStrokeCap(p0);
    },
    setStrokeJoin$1(receiver, p0) {
      return receiver.setStrokeJoin(p0);
    },
    setAntiAlias$1(receiver, p0) {
      return receiver.setAntiAlias(p0);
    },
    setColorInt$1(receiver, p0) {
      return receiver.setColorInt(p0);
    },
    setShader$1(receiver, p0) {
      return receiver.setShader(p0);
    },
    setMaskFilter$1(receiver, p0) {
      return receiver.setMaskFilter(p0);
    },
    setColorFilter$1(receiver, p0) {
      return receiver.setColorFilter(p0);
    },
    setStrokeMiter$1(receiver, p0) {
      return receiver.setStrokeMiter(p0);
    },
    setImageFilter$1(receiver, p0) {
      return receiver.setImageFilter(p0);
    },
    MakeFromCmds$1(receiver, p0) {
      return receiver.MakeFromCmds(p0);
    },
    toTypedArray$0(receiver) {
      return receiver.toTypedArray();
    },
    setFillType$1(receiver, p0) {
      return receiver.setFillType(p0);
    },
    addOval$3(receiver, p0, p1, p2) {
      return receiver.addOval(p0, p1, p2);
    },
    addRRect$2(receiver, p0, p1) {
      return receiver.addRRect(p0, p1);
    },
    addRect$1(receiver, p0) {
      return receiver.addRect(p0);
    },
    close$0(receiver) {
      return receiver.close();
    },
    get$contains(obj) {
      return obj.contains;
    },
    contains$2(receiver, p0, p1) {
      return receiver.contains(p0, p1);
    },
    getBounds$0(receiver) {
      return receiver.getBounds();
    },
    lineTo$2(receiver, p0, p1) {
      return receiver.lineTo(p0, p1);
    },
    moveTo$2(receiver, p0, p1) {
      return receiver.moveTo(p0, p1);
    },
    reset$0(receiver) {
      return receiver.reset();
    },
    copy$0(receiver) {
      return receiver.copy();
    },
    get$transform(obj) {
      return obj.transform;
    },
    transform$9(receiver, p0, p1, p2, p3, p4, p5, p6, p7, p8) {
      return receiver.transform(p0, p1, p2, p3, p4, p5, p6, p7, p8);
    },
    toCmds$0(receiver) {
      return receiver.toCmds();
    },
    get$length(obj) {
      return obj.length;
    },
    beginRecording$1(receiver, p0) {
      return receiver.beginRecording(p0);
    },
    finishRecordingAsPicture$0(receiver) {
      return receiver.finishRecordingAsPicture();
    },
    clear$1(receiver, p0) {
      return receiver.clear(p0);
    },
    clipPath$3(receiver, p0, p1, p2) {
      return receiver.clipPath(p0, p1, p2);
    },
    clipRRect$3(receiver, p0, p1, p2) {
      return receiver.clipRRect(p0, p1, p2);
    },
    clipRect$3(receiver, p0, p1, p2) {
      return receiver.clipRect(p0, p1, p2);
    },
    drawCircle$4(receiver, p0, p1, p2, p3) {
      return receiver.drawCircle(p0, p1, p2, p3);
    },
    drawDRRect$3(receiver, p0, p1, p2) {
      return receiver.drawDRRect(p0, p1, p2);
    },
    drawPaint$1(receiver, p0) {
      return receiver.drawPaint(p0);
    },
    drawPath$2(receiver, p0, p1) {
      return receiver.drawPath(p0, p1);
    },
    drawRRect$2(receiver, p0, p1) {
      return receiver.drawRRect(p0, p1);
    },
    drawRect$2(receiver, p0, p1) {
      return receiver.drawRect(p0, p1);
    },
    drawShadow$7(receiver, p0, p1, p2, p3, p4, p5, p6) {
      return receiver.drawShadow(p0, p1, p2, p3, p4, p5, p6);
    },
    save$0(receiver) {
      return receiver.save();
    },
    saveLayer$4(receiver, p0, p1, p2, p3) {
      return receiver.saveLayer(p0, p1, p2, p3);
    },
    restore$0(receiver) {
      return receiver.restore();
    },
    restoreToCount$1(receiver, p0) {
      return receiver.restoreToCount(p0);
    },
    concat$1(receiver, p0) {
      return receiver.concat(p0);
    },
    translate$2(receiver, p0, p1) {
      return receiver.translate(p0, p1);
    },
    drawPicture$1(receiver, p0) {
      return receiver.drawPicture(p0);
    },
    drawParagraph$3(receiver, p0, p1, p2) {
      return receiver.drawParagraph(p0, p1, p2);
    },
    MakeFromFontProvider$2(receiver, p0, p1) {
      return receiver.MakeFromFontProvider(p0, p1);
    },
    addText$1(receiver, p0) {
      return receiver.addText(p0);
    },
    pushStyle$1(receiver, p0) {
      return receiver.pushStyle(p0);
    },
    pushPaintStyle$3(receiver, p0, p1, p2) {
      return receiver.pushPaintStyle(p0, p1, p2);
    },
    pop$0(receiver) {
      return receiver.pop();
    },
    addPlaceholder$5(receiver, p0, p1, p2, p3, p4) {
      return receiver.addPlaceholder(p0, p1, p2, p3, p4);
    },
    build$0(receiver) {
      return receiver.build();
    },
    set$textAlign(obj, v) {
      return obj.textAlign = v;
    },
    set$textDirection(obj, v) {
      return obj.textDirection = v;
    },
    set$textHeightBehavior(obj, v) {
      return obj.textHeightBehavior = v;
    },
    set$maxLines(obj, v) {
      return obj.maxLines = v;
    },
    set$ellipsis(obj, v) {
      return obj.ellipsis = v;
    },
    set$strutStyle(obj, v) {
      return obj.strutStyle = v;
    },
    get$Alphabetic(obj) {
      return obj.Alphabetic;
    },
    get$Ideographic(obj) {
      return obj.Ideographic;
    },
    set$color(obj, v) {
      return obj.color = v;
    },
    set$decoration(obj, v) {
      return obj.decoration = v;
    },
    set$locale(obj, v) {
      return obj.locale = v;
    },
    set$value(obj, v) {
      return obj.value = v;
    },
    getGlyphIDs$1(receiver, p0) {
      return receiver.getGlyphIDs(p0);
    },
    getGlyphBounds$3(receiver, p0, p1, p2) {
      return receiver.getGlyphBounds(p0, p1, p2);
    },
    registerFont$2(receiver, p0, p1) {
      return receiver.registerFont(p0, p1);
    },
    getAlphabeticBaseline$0(receiver) {
      return receiver.getAlphabeticBaseline();
    },
    get$didExceedMaxLines(obj) {
      return obj.didExceedMaxLines;
    },
    didExceedMaxLines$0(receiver) {
      return receiver.didExceedMaxLines();
    },
    getHeight$0(receiver) {
      return receiver.getHeight();
    },
    getIdeographicBaseline$0(receiver) {
      return receiver.getIdeographicBaseline();
    },
    getLongestLine$0(receiver) {
      return receiver.getLongestLine();
    },
    getMaxIntrinsicWidth$0(receiver) {
      return receiver.getMaxIntrinsicWidth();
    },
    getMinIntrinsicWidth$0(receiver) {
      return receiver.getMinIntrinsicWidth();
    },
    getMaxWidth$0(receiver) {
      return receiver.getMaxWidth();
    },
    getRectsForRange$4(receiver, p0, p1, p2, p3) {
      return receiver.getRectsForRange(p0, p1, p2, p3);
    },
    getRectsForPlaceholders$0(receiver) {
      return receiver.getRectsForPlaceholders();
    },
    getGlyphPositionAtCoordinate$2(receiver, p0, p1) {
      return receiver.getGlyphPositionAtCoordinate(p0, p1);
    },
    layout$1(receiver, p0) {
      return receiver.layout(p0);
    },
    get$affinity(obj) {
      return obj.affinity;
    },
    get$pos(obj) {
      return obj.pos;
    },
    get$ambient(obj) {
      return obj.ambient;
    },
    get$spot(obj) {
      return obj.spot;
    },
    Make$0(receiver) {
      return receiver.Make();
    },
    MakeFreeTypeFaceFromData$1(receiver, p0) {
      return receiver.MakeFreeTypeFaceFromData(p0);
    },
    get$name(obj) {
      return obj.name;
    },
    register$2(receiver, p0, p1) {
      return receiver.register(p0, p1);
    },
    get$size(obj) {
      return obj.size;
    },
    get$canvasKitBaseUrl(obj) {
      return obj.canvasKitBaseUrl;
    },
    get$canvasKitForceCpuOnly(obj) {
      return obj.canvasKitForceCpuOnly;
    },
    get$debugShowSemanticsNodes(obj) {
      return obj.debugShowSemanticsNodes;
    },
    get$canvasKitMaximumSurfaces(obj) {
      return obj.canvasKitMaximumSurfaces;
    },
    addPopStateListener$1(receiver, p0) {
      return receiver.addPopStateListener(p0);
    },
    getPath$0(receiver) {
      return receiver.getPath();
    },
    getState$0(receiver) {
      return receiver.getState();
    },
    pushState$3(receiver, p0, p1, p2) {
      return receiver.pushState(p0, p1, p2);
    },
    replaceState$3(receiver, p0, p1, p2) {
      return receiver.replaceState(p0, p1, p2);
    },
    go$1(receiver, p0) {
      return receiver.go(p0);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$LegacyJavaScriptObject$toString(receiver);
      return "JavaScript function for " + A.S(J.toString$0$(dartClosure));
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    cast$1$0(receiver, $R) {
      return new A.CastList(receiver, A._arrayInstanceType(receiver)._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    add$1(receiver, value) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1(receiver, index) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("removeAt"));
      if (index < 0 || index >= receiver.length)
        throw A.wrapException(A.RangeError$value(index, null));
      return receiver.splice(index, 1)[0];
    },
    insert$2(receiver, index, value) {
      var t1;
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("insert"));
      t1 = receiver.length;
      if (index > t1)
        throw A.wrapException(A.RangeError$value(index, null));
      receiver.splice(index, 0, value);
    },
    remove$1(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    addAll$1(receiver, collection) {
      var t1;
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("addAll"));
      if (Array.isArray(collection)) {
        this._addAllFromArray$1(receiver, collection);
        return;
      }
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current(t1));
    },
    _addAllFromArray$1(receiver, array) {
      var i,
        len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw A.wrapException(A.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    forEach$1(receiver, f) {
      var i,
        end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1(receiver, f, $T) {
      return new A.MappedListIterable(receiver, f, A._arrayInstanceType(receiver)._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    join$1(receiver, separator) {
      var i,
        list = A.List_List$filled(receiver.length, "", false, type$.String);
      for (i = 0; i < receiver.length; ++i)
        list[i] = A.S(receiver[i]);
      return list.join(separator);
    },
    join$0($receiver) {
      return this.join$1($receiver, "");
    },
    take$1(receiver, n) {
      return A.SubListIterable$(receiver, 0, A.checkNotNullable(n, "count", type$.int), A._arrayInstanceType(receiver)._precomputed1);
    },
    skip$1(receiver, n) {
      return A.SubListIterable$(receiver, n, null, A._arrayInstanceType(receiver)._precomputed1);
    },
    fold$1$2(receiver, initialValue, combine) {
      var value, i,
        $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    fold$2($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, type$.dynamic);
    },
    elementAt$1(receiver, index) {
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, "start", null));
      if (end == null)
        end = receiver.length;
      else if (end < start || end > receiver.length)
        throw A.wrapException(A.RangeError$range(end, start, receiver.length, "end", null));
      if (start === end)
        return A._setArrayType([], A._arrayInstanceType(receiver));
      return A._setArrayType(receiver.slice(start, end), A._arrayInstanceType(receiver));
    },
    sublist$1($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$last(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$single(receiver) {
      var t1 = receiver.length;
      if (t1 === 1)
        return receiver[0];
      if (t1 === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      throw A.wrapException(A.IterableElementError_tooMany());
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherList, otherStart, t1, i;
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("setRange"));
      A.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (type$.List_dynamic._is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    any$1(receiver, test) {
      var i,
        end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (test.call$1(receiver[i]))
          return true;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    every$1(receiver, test) {
      var i,
        end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (!test.call$1(receiver[i]))
          return false;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return true;
    },
    sort$1(receiver, compare) {
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("sort"));
      A.Sort_sort(receiver, compare == null ? J._interceptors_JSArray__compareAny$closure() : compare);
    },
    sort$0($receiver) {
      return this.sort$1($receiver, null);
    },
    indexOf$1(receiver, element) {
      var i,
        $length = receiver.length;
      if (0 >= $length)
        return -1;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(receiver[i], element))
          return i;
      return -1;
    },
    lastIndexOf$1(receiver, element) {
      var i,
        start = receiver.length - 1;
      if (start < 0)
        return -1;
      for (i = start; i >= 0; --i)
        if (J.$eq$(receiver[i], element))
          return i;
      return -1;
    },
    contains$1(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty(receiver) {
      return receiver.length !== 0;
    },
    toString$0(receiver) {
      return A.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    get$iterator(receiver) {
      return new J.ArrayIterator(receiver, receiver.length);
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    set$length(receiver, newLength) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("set length"));
      if (newLength < 0)
        throw A.wrapException(A.RangeError$range(newLength, 0, null, "newLength", null));
      if (newLength > receiver.length)
        A._arrayInstanceType(receiver)._precomputed1._as(null);
      receiver.length = newLength;
    },
    $index(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("indexed set"));
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $add(receiver, other) {
      var t1 = A.List_List$of(receiver, true, A._arrayInstanceType(receiver)._precomputed1);
      this.addAll$1(t1, other);
      return t1;
    },
    set$last(receiver, element) {
      var t1 = receiver.length;
      if (t1 === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      this.$indexSet(receiver, t1 - 1, element);
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current(_) {
      var t1 = this.__interceptors$_current;
      return t1 == null ? A._instanceType(this)._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this.__interceptors$_length !== $length)
        throw A.wrapException(A.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this.__interceptors$_current = null;
        return false;
      }
      _this.__interceptors$_current = t1[t2];
      _this._index = t2 + 1;
      return true;
    }
  };
  J.JSNumber.prototype = {
    compareTo$1(receiver, b) {
      var bIsNegative;
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toInt$0(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".toInt()"));
    },
    ceil$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".ceil()"));
    },
    floor$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".round()"));
    },
    roundToDouble$0(receiver) {
      if (receiver < 0)
        return -Math.round(-receiver);
      else
        return Math.round(receiver);
    },
    clamp$2(receiver, lowerLimit, upperLimit) {
      if (this.compareTo$1(lowerLimit, upperLimit) > 0)
        throw A.wrapException(A.argumentErrorValue(lowerLimit));
      if (this.compareTo$1(receiver, lowerLimit) < 0)
        return lowerLimit;
      if (this.compareTo$1(receiver, upperLimit) > 0)
        return upperLimit;
      return receiver;
    },
    toStringAsFixed$1(receiver, fractionDigits) {
      var result;
      if (fractionDigits > 20)
        throw A.wrapException(A.RangeError$range(fractionDigits, 0, 20, "fractionDigits", null));
      result = receiver.toFixed(fractionDigits);
      if (receiver === 0 && this.get$isNegative(receiver))
        return "-" + result;
      return result;
    },
    toRadixString$1(receiver, radix) {
      var result, match, exponent, t1;
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      if (B.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        A.throwExpression(A.UnsupportedError$("Unexpected toString result: " + result));
      result = match[1];
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + B.JSString_methods.$mul("0", exponent);
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $add(receiver, other) {
      return receiver + other;
    },
    $sub(receiver, other) {
      return receiver - other;
    },
    $mul(receiver, other) {
      return receiver * other;
    },
    $mod(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      return result + other;
    },
    $tdiv(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw A.wrapException(A.UnsupportedError$("Result of truncating division is " + A.S(quotient) + ": " + A.S(receiver) + " ~/ " + other));
    },
    $shl(receiver, other) {
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shlPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1(receiver, other) {
      if (0 > other)
        throw A.wrapException(A.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    get$runtimeType(receiver) {
      return B.Type_num_cv7;
    },
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$runtimeType(receiver) {
      return B.Type_int_tHn;
    },
    $isint: 1
  };
  J.JSNumNotInt.prototype = {
    get$runtimeType(receiver) {
      return B.Type_double_K1J;
    }
  };
  J.JSString.prototype = {
    codeUnitAt$1(receiver, index) {
      if (index < 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        A.throwExpression(A.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1(receiver, index) {
      if (index >= receiver.length)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    allMatches$2(receiver, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, null, null));
      return new A._StringAllMatchesIterable(string, receiver, start);
    },
    allMatches$1($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    $add(receiver, other) {
      return receiver + other;
    },
    endsWith$1(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    replaceFirst$2(receiver, from, to) {
      A.RangeError_checkValueInInterval(0, 0, receiver.length, "startIndex");
      return A.stringReplaceFirstUnchecked(receiver, from, to, 0);
    },
    split$1(receiver, pattern) {
      var t1 = A._setArrayType(receiver.split(pattern), type$.JSArray_String);
      return t1;
    },
    replaceRange$3(receiver, start, end, replacement) {
      var e = A.RangeError_checkValidRange(start, end, receiver.length);
      return A.stringReplaceRangeUnchecked(receiver, start, e, replacement);
    },
    startsWith$2(receiver, pattern, index) {
      var endIndex;
      if (index < 0 || index > receiver.length)
        throw A.wrapException(A.RangeError$range(index, 0, receiver.length, null, null));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2(receiver, start, end) {
      return receiver.substring(start, A.RangeError_checkValidRange(start, end, receiver.length));
    },
    substring$1($receiver, start) {
      return this.substring$2($receiver, start, null);
    },
    toLowerCase$0(receiver) {
      return receiver.toLowerCase();
    },
    trim$0(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this._codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    trimLeft$0(receiver) {
      var result, startIndex;
      if (typeof receiver.trimLeft != "undefined") {
        result = receiver.trimLeft();
        if (result.length === 0)
          return result;
        startIndex = this._codeUnitAt$1(result, 0) === 133 ? J.JSString__skipLeadingWhitespace(result, 1) : 0;
      } else {
        startIndex = J.JSString__skipLeadingWhitespace(receiver, 0);
        result = receiver;
      }
      if (startIndex === 0)
        return result;
      if (startIndex === result.length)
        return "";
      return result.substring(startIndex);
    },
    trimRight$0(receiver) {
      var result, endIndex, t1;
      if (typeof receiver.trimRight != "undefined") {
        result = receiver.trimRight();
        endIndex = result.length;
        if (endIndex === 0)
          return result;
        t1 = endIndex - 1;
        if (this.codeUnitAt$1(result, t1) === 133)
          endIndex = J.JSString__skipTrailingWhitespace(result, t1);
      } else {
        endIndex = J.JSString__skipTrailingWhitespace(receiver, receiver.length);
        result = receiver;
      }
      if (endIndex === result.length)
        return result;
      if (endIndex === 0)
        return "";
      return result.substring(0, endIndex);
    },
    $mul(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw A.wrapException(B.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    indexOf$2(receiver, pattern, start) {
      var t1;
      if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      t1 = receiver.indexOf(pattern, start);
      return t1;
    },
    indexOf$1($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$2(receiver, pattern, start) {
      var t1, t2;
      if (start == null)
        start = receiver.length;
      else if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      t1 = pattern.length;
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    },
    lastIndexOf$1($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    contains$2(receiver, other, startIndex) {
      var t1 = receiver.length;
      if (startIndex > t1)
        throw A.wrapException(A.RangeError$range(startIndex, 0, t1, null, null));
      return A.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1($receiver, other) {
      return this.contains$2($receiver, other, 0);
    },
    compareTo$1(receiver, other) {
      var t1;
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$runtimeType(receiver) {
      return B.Type_String_k8F;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isString: 1
  };
  A._CastIterableBase.prototype = {
    get$iterator(_) {
      var t1 = A._instanceType(this);
      return new A.CastIterator(J.get$iterator$ax(this.get$_source()), t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("CastIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.get$_source());
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.get$_source());
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this.get$_source());
    },
    skip$1(_, count) {
      var t1 = A._instanceType(this);
      return A.CastIterable_CastIterable(J.skip$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    take$1(_, count) {
      var t1 = A._instanceType(this);
      return A.CastIterable_CastIterable(J.take$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    elementAt$1(_, index) {
      return A._instanceType(this)._rest[1]._as(J.elementAt$1$ax(this.get$_source(), index));
    },
    get$first(_) {
      return A._instanceType(this)._rest[1]._as(J.get$first$ax(this.get$_source()));
    },
    contains$1(_, other) {
      return J.contains$1$asx(this.get$_source(), other);
    },
    toString$0(_) {
      return J.toString$0$(this.get$_source());
    }
  };
  A.CastIterator.prototype = {
    moveNext$0() {
      return this._source.moveNext$0();
    },
    get$current(_) {
      var t1 = this._source;
      return this.$ti._rest[1]._as(t1.get$current(t1));
    }
  };
  A.CastIterable.prototype = {
    get$_source() {
      return this._source;
    }
  };
  A._EfficientLengthCastIterable.prototype = {$isEfficientLengthIterable: 1};
  A._CastListBase.prototype = {
    $index(_, index) {
      return this.$ti._rest[1]._as(J.$index$asx(this._source, index));
    },
    $indexSet(_, index, value) {
      J.$indexSet$ax(this._source, index, this.$ti._precomputed1._as(value));
    },
    set$length(_, $length) {
      J.set$length$asx(this._source, $length);
    },
    add$1(_, value) {
      J.add$1$ax(this._source, this.$ti._precomputed1._as(value));
    },
    setRange$4(_, start, end, iterable, skipCount) {
      var t1 = this.$ti;
      J.setRange$4$ax(this._source, start, end, A.CastIterable_CastIterable(iterable, t1._rest[1], t1._precomputed1), skipCount);
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isList: 1
  };
  A.CastList.prototype = {
    cast$1$0(_, $R) {
      return new A.CastList(this._source, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    get$_source() {
      return this._source;
    }
  };
  A.LateError.prototype = {
    toString$0(_) {
      var t1 = "LateInitializationError: " + this._message;
      return t1;
    }
  };
  A.CodeUnits.prototype = {
    get$length(_) {
      return this._string.length;
    },
    $index(_, i) {
      return B.JSString_methods.codeUnitAt$1(this._string, i);
    }
  };
  A.nullFuture_closure.prototype = {
    call$0() {
      return A.Future_Future$value(null, type$.Null);
    },
    $signature: 82
  };
  A.SentinelValue.prototype = {};
  A.EfficientLengthIterable.prototype = {};
  A.ListIterable.prototype = {
    get$iterator(_) {
      return new A.ListIterator(this, this.get$length(this));
    },
    forEach$1(_, action) {
      var i, _this = this,
        $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        action.call$1(_this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
    },
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$first(_) {
      if (this.get$length(this) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    contains$1(_, element) {
      var i, _this = this,
        $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(_this.elementAt$1(0, i), element))
          return true;
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return false;
    },
    join$1(_, separator) {
      var first, t1, i, _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = A.S(_this.elementAt$1(0, 0));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        for (t1 = first, i = 1; i < $length; ++i) {
          t1 = t1 + separator + A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        for (i = 0, t1 = ""; i < $length; ++i) {
          t1 += A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    where$1(_, test) {
      return this.super$Iterable$where(0, test);
    },
    map$1$1(_, toElement, $T) {
      return new A.MappedListIterable(this, toElement, A._instanceType(this)._eval$1("@<ListIterable.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    skip$1(_, count) {
      return A.SubListIterable$(this, count, null, A._instanceType(this)._eval$1("ListIterable.E"));
    },
    take$1(_, count) {
      return A.SubListIterable$(this, 0, A.checkNotNullable(count, "count", type$.int), A._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, true, A._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  A.SubListIterable.prototype = {
    SubListIterable$3(_iterable, _start, _endOrLength, $E) {
      var endOrLength,
        t1 = this.__internal$_start;
      A.RangeError_checkNotNegative(t1, "start");
      endOrLength = this._endOrLength;
      if (endOrLength != null) {
        A.RangeError_checkNotNegative(endOrLength, "end");
        if (t1 > endOrLength)
          throw A.wrapException(A.RangeError$range(t1, 0, endOrLength, "start", null));
      }
    },
    get$_endIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
      return endOrLength - t1;
    },
    elementAt$1(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index;
      if (index < 0 || realIndex >= _this.get$_endIndex())
        throw A.wrapException(A.IndexError$(index, _this, "index", null, null));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1(_, count) {
      var newStart, endOrLength, _this = this;
      A.RangeError_checkNotNegative(count, "count");
      newStart = _this.__internal$_start + count;
      endOrLength = _this._endOrLength;
      if (endOrLength != null && newStart >= endOrLength)
        return new A.EmptyIterable(_this.$ti._eval$1("EmptyIterable<1>"));
      return A.SubListIterable$(_this.__internal$_iterable, newStart, endOrLength, _this.$ti._precomputed1);
    },
    take$1(_, count) {
      var endOrLength, t1, newEnd, _this = this;
      A.RangeError_checkNotNegative(count, "count");
      endOrLength = _this._endOrLength;
      t1 = _this.__internal$_start;
      newEnd = t1 + count;
      if (endOrLength == null)
        return A.SubListIterable$(_this.__internal$_iterable, t1, newEnd, _this.$ti._precomputed1);
      else {
        if (endOrLength < newEnd)
          return _this;
        return A.SubListIterable$(_this.__internal$_iterable, t1, newEnd, _this.$ti._precomputed1);
      }
    },
    toList$1$growable(_, growable) {
      var $length, result, i, _this = this,
        start = _this.__internal$_start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end)
        end = endOrLength;
      $length = end - start;
      if ($length <= 0) {
        t1 = _this.$ti._precomputed1;
        return growable ? J.JSArray_JSArray$growable(0, t1) : J.JSArray_JSArray$fixed(0, t1);
      }
      result = A.List_List$filled($length, t2.elementAt$1(t1, start), growable, _this.$ti._precomputed1);
      for (i = 1; i < $length; ++i) {
        result[i] = t2.elementAt$1(t1, start + i);
        if (t2.get$length(t1) < end)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return result;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  A.ListIterator.prototype = {
    get$current(_) {
      var t1 = this.__internal$_current;
      return t1 == null ? A._instanceType(this)._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.__internal$_current = null;
        return false;
      }
      _this.__internal$_current = t2.elementAt$1(t1, t3);
      ++_this.__internal$_index;
      return true;
    }
  };
  A.MappedIterable.prototype = {
    get$iterator(_) {
      return new A.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f);
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    get$first(_) {
      return this._f.call$1(J.get$first$ax(this.__internal$_iterable));
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, index));
    }
  };
  A.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1};
  A.MappedIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.__internal$_current = _this._f.call$1(t1.get$current(t1));
        return true;
      }
      _this.__internal$_current = null;
      return false;
    },
    get$current(_) {
      var t1 = this.__internal$_current;
      return t1 == null ? A._instanceType(this)._rest[1]._as(t1) : t1;
    }
  };
  A.MappedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    }
  };
  A.WhereIterable.prototype = {
    get$iterator(_) {
      return new A.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f);
    },
    map$1$1(_, toElement, $T) {
      return new A.MappedIterable(this, toElement, this.$ti._eval$1("@<1>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    }
  };
  A.WhereIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (t2.call$1(t1.get$current(t1)))
          return true;
      return false;
    },
    get$current(_) {
      var t1 = this._iterator;
      return t1.get$current(t1);
    }
  };
  A.ExpandIterable.prototype = {
    get$iterator(_) {
      return new A.ExpandIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, B.C_EmptyIterator);
    }
  };
  A.ExpandIterator.prototype = {
    get$current(_) {
      var t1 = this.__internal$_current;
      return t1 == null ? A._instanceType(this)._rest[1]._as(t1) : t1;
    },
    moveNext$0() {
      var t2, t3, _this = this,
        t1 = _this._currentExpansion;
      if (t1 == null)
        return false;
      for (t2 = _this._iterator, t3 = _this._f; !t1.moveNext$0();) {
        _this.__internal$_current = null;
        if (t2.moveNext$0()) {
          _this._currentExpansion = null;
          t1 = J.get$iterator$ax(t3.call$1(t2.get$current(t2)));
          _this._currentExpansion = t1;
        } else
          return false;
      }
      t1 = _this._currentExpansion;
      _this.__internal$_current = t1.get$current(t1);
      return true;
    }
  };
  A.TakeIterable.prototype = {
    get$iterator(_) {
      return new A.TakeIterator(J.get$iterator$ax(this.__internal$_iterable), this._takeCount);
    }
  };
  A.EfficientLengthTakeIterable.prototype = {
    get$length(_) {
      var iterableLength = J.get$length$asx(this.__internal$_iterable),
        t1 = this._takeCount;
      if (iterableLength > t1)
        return t1;
      return iterableLength;
    },
    $isEfficientLengthIterable: 1
  };
  A.TakeIterator.prototype = {
    moveNext$0() {
      if (--this._remaining >= 0)
        return this._iterator.moveNext$0();
      this._remaining = -1;
      return false;
    },
    get$current(_) {
      var t1;
      if (this._remaining < 0) {
        A._instanceType(this)._precomputed1._as(null);
        return null;
      }
      t1 = this._iterator;
      return t1.get$current(t1);
    }
  };
  A.SkipIterable.prototype = {
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count");
      A.RangeError_checkNotNegative(count, "count");
      return new A.SkipIterable(this.__internal$_iterable, this._skipCount + count, A._instanceType(this)._eval$1("SkipIterable<1>"));
    },
    get$iterator(_) {
      return new A.SkipIterator(J.get$iterator$ax(this.__internal$_iterable), this._skipCount);
    }
  };
  A.EfficientLengthSkipIterable.prototype = {
    get$length(_) {
      var $length = J.get$length$asx(this.__internal$_iterable) - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count");
      A.RangeError_checkNotNegative(count, "count");
      return new A.EfficientLengthSkipIterable(this.__internal$_iterable, this._skipCount + count, this.$ti);
    },
    $isEfficientLengthIterable: 1
  };
  A.SkipIterator.prototype = {
    moveNext$0() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current(_) {
      var t1 = this._iterator;
      return t1.get$current(t1);
    }
  };
  A.SkipWhileIterable.prototype = {
    get$iterator(_) {
      return new A.SkipWhileIterator(J.get$iterator$ax(this.__internal$_iterable), this._f);
    }
  };
  A.SkipWhileIterator.prototype = {
    moveNext$0() {
      var t1, t2, _this = this;
      if (!_this._hasSkipped) {
        _this._hasSkipped = true;
        for (t1 = _this._iterator, t2 = _this._f; t1.moveNext$0();)
          if (!t2.call$1(t1.get$current(t1)))
            return true;
      }
      return _this._iterator.moveNext$0();
    },
    get$current(_) {
      var t1 = this._iterator;
      return t1.get$current(t1);
    }
  };
  A.EmptyIterable.prototype = {
    get$iterator(_) {
      return B.C_EmptyIterator;
    },
    forEach$1(_, action) {
    },
    get$isEmpty(_) {
      return true;
    },
    get$length(_) {
      return 0;
    },
    get$first(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    elementAt$1(_, index) {
      throw A.wrapException(A.RangeError$range(index, 0, 0, "index", null));
    },
    contains$1(_, element) {
      return false;
    },
    map$1$1(_, toElement, $T) {
      return new A.EmptyIterable($T._eval$1("EmptyIterable<0>"));
    },
    skip$1(_, count) {
      A.RangeError_checkNotNegative(count, "count");
      return this;
    },
    take$1(_, count) {
      A.RangeError_checkNotNegative(count, "count");
      return this;
    },
    toList$1$growable(_, growable) {
      var t1 = J.JSArray_JSArray$growable(0, this.$ti._precomputed1);
      return t1;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  A.EmptyIterator.prototype = {
    moveNext$0() {
      return false;
    },
    get$current(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    }
  };
  A.FollowedByIterable.prototype = {
    get$iterator(_) {
      return new A.FollowedByIterator(J.get$iterator$ax(this.__internal$_first), this._second);
    },
    get$length(_) {
      var t1 = this._second;
      return J.get$length$asx(this.__internal$_first) + t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1;
      if (J.get$isEmpty$asx(this.__internal$_first)) {
        t1 = this._second;
        t1 = !t1.get$iterator(t1).moveNext$0();
      } else
        t1 = false;
      return t1;
    },
    get$isNotEmpty(_) {
      var t1;
      if (!J.get$isNotEmpty$asx(this.__internal$_first)) {
        t1 = this._second;
        t1 = !t1.get$isEmpty(t1);
      } else
        t1 = true;
      return t1;
    },
    contains$1(_, value) {
      return J.contains$1$asx(this.__internal$_first, value) || this._second.contains$1(0, value);
    },
    get$first(_) {
      var t1,
        iterator = J.get$iterator$ax(this.__internal$_first);
      if (iterator.moveNext$0())
        return iterator.get$current(iterator);
      t1 = this._second;
      return t1.get$first(t1);
    }
  };
  A.FollowedByIterator.prototype = {
    moveNext$0() {
      var t1, _this = this;
      if (_this._currentIterator.moveNext$0())
        return true;
      t1 = _this._nextIterable;
      if (t1 != null) {
        t1 = new A.ExpandIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, B.C_EmptyIterator);
        _this._currentIterator = t1;
        _this._nextIterable = null;
        return t1.moveNext$0();
      }
      return false;
    },
    get$current(_) {
      var t1 = this._currentIterator;
      return t1.get$current(t1);
    }
  };
  A.WhereTypeIterable.prototype = {
    get$iterator(_) {
      return new A.WhereTypeIterator(J.get$iterator$ax(this._source), this.$ti._eval$1("WhereTypeIterator<1>"));
    }
  };
  A.WhereTypeIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._source, t2 = this.$ti._precomputed1; t1.moveNext$0();)
        if (t2._is(t1.get$current(t1)))
          return true;
      return false;
    },
    get$current(_) {
      var t1 = this._source;
      return this.$ti._precomputed1._as(t1.get$current(t1));
    }
  };
  A.FixedLengthListMixin.prototype = {
    set$length(receiver, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot add to a fixed-length list"));
    }
  };
  A.UnmodifiableListMixin.prototype = {
    $indexSet(_, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length(_, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1(_, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    setRange$4(_, start, end, iterable, skipCount) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    }
  };
  A.UnmodifiableListBase.prototype = {};
  A.ReversedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    }
  };
  A.Symbol.prototype = {
    get$hashCode(_) {
      var hash = this._hashCode;
      if (hash != null)
        return hash;
      hash = 664597 * J.get$hashCode$(this.__internal$_name) & 536870911;
      this._hashCode = hash;
      return hash;
    },
    toString$0(_) {
      return 'Symbol("' + A.S(this.__internal$_name) + '")';
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Symbol && this.__internal$_name == other.__internal$_name;
    },
    $isSymbol0: 1
  };
  A.__CastListBase__CastIterableBase_ListMixin.prototype = {};
  A.ConstantMapView.prototype = {};
  A.ConstantMap.prototype = {
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $indexSet(_, key, val) {
      A.ConstantMap__throwUnmodifiable();
    },
    remove$1(_, key) {
      A.ConstantMap__throwUnmodifiable();
    },
    $isMap: 1
  };
  A.ConstantStringMap.prototype = {
    get$length(_) {
      return this._length;
    },
    containsKey$1(_, key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsObject.hasOwnProperty(key);
    },
    $index(_, key) {
      if (!this.containsKey$1(0, key))
        return null;
      return this._jsObject[key];
    },
    forEach$1(_, f) {
      var t1, t2, i, key,
        keys = this._keys;
      for (t1 = keys.length, t2 = this._jsObject, i = 0; i < t1; ++i) {
        key = keys[i];
        f.call$2(key, t2[key]);
      }
    },
    get$keys(_) {
      return new A._ConstantMapKeyIterable(this, this.$ti._eval$1("_ConstantMapKeyIterable<1>"));
    },
    get$values(_) {
      var t1 = this.$ti;
      return A.MappedIterable_MappedIterable(this._keys, new A.ConstantStringMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    }
  };
  A.ConstantStringMap_values_closure.prototype = {
    call$1(key) {
      return this.$this._jsObject[key];
    },
    $signature() {
      return this.$this.$ti._eval$1("2(1)");
    }
  };
  A._ConstantMapKeyIterable.prototype = {
    get$iterator(_) {
      var t1 = this._map._keys;
      return new J.ArrayIterator(t1, t1.length);
    },
    get$length(_) {
      return this._map._keys.length;
    }
  };
  A.GeneralConstantMap.prototype = {
    _getMap$0() {
      var t1, t2, t3, _this = this,
        backingMap = _this.$map;
      if (backingMap == null) {
        t1 = _this.$ti;
        t2 = t1._precomputed1;
        t3 = A.GeneralConstantMap__typeTest(t2);
        backingMap = A.LinkedHashMap_LinkedHashMap(A._js_helper_GeneralConstantMap__constantMapHashCode$closure(), t3, t2, t1._rest[1]);
        A.fillLiteralMap(_this._jsData, backingMap);
        _this.$map = backingMap;
      }
      return backingMap;
    },
    containsKey$1(_, key) {
      return this._getMap$0().containsKey$1(0, key);
    },
    $index(_, key) {
      return this._getMap$0().$index(0, key);
    },
    forEach$1(_, f) {
      this._getMap$0().forEach$1(0, f);
    },
    get$keys(_) {
      var t1 = this._getMap$0();
      return new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$values(_) {
      var t1 = this._getMap$0();
      return t1.get$values(t1);
    },
    get$length(_) {
      return this._getMap$0()._length;
    }
  };
  A.GeneralConstantMap__typeTest_closure.prototype = {
    call$1(o) {
      return this.T._is(o);
    },
    $signature: 57
  };
  A.JSInvocationMirror.prototype = {
    get$memberName() {
      var t1 = this.__js_helper$_memberName;
      return t1;
    },
    get$positionalArguments() {
      var t1, argumentCount, list, index, _this = this;
      if (_this.__js_helper$_kind === 1)
        return B.List_empty4;
      t1 = _this._arguments;
      argumentCount = t1.length - _this._namedArgumentNames.length - _this._typeArgumentCount;
      if (argumentCount === 0)
        return B.List_empty4;
      list = [];
      for (index = 0; index < argumentCount; ++index)
        list.push(t1[index]);
      return J.JSArray_markUnmodifiableList(list);
    },
    get$namedArguments() {
      var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, _this = this;
      if (_this.__js_helper$_kind !== 0)
        return B.Map_empty;
      t1 = _this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = _this._arguments;
      namedArgumentsStartIndex = t2.length - namedArgumentCount - _this._typeArgumentCount;
      if (namedArgumentCount === 0)
        return B.Map_empty;
      map = new A.JsLinkedHashMap(type$.JsLinkedHashMap_Symbol_dynamic);
      for (i = 0; i < namedArgumentCount; ++i)
        map.$indexSet(0, new A.Symbol(t1[i]), t2[namedArgumentsStartIndex + i]);
      return new A.ConstantMapView(map, type$.ConstantMapView_Symbol_dynamic);
    }
  };
  A.Primitives_initTicker_closure.prototype = {
    call$0() {
      return B.JSNumber_methods.floor$0(1000 * this.performance.now());
    },
    $signature: 32
  };
  A.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2($name, argument) {
      var t1 = this._box_0;
      t1.names = t1.names + "$" + $name;
      this.namedArgumentList.push($name);
      this.$arguments.push(argument);
      ++t1.argumentCount;
    },
    $signature: 11
  };
  A.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  A.NullError.prototype = {
    toString$0(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + this.__js_helper$_message;
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  A.JsNoSuchMethodError.prototype = {
    toString$0(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
  };
  A.UnknownJsTypeError.prototype = {
    toString$0(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  A.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    },
    $isException: 1
  };
  A.ExceptionAndStackTrace.prototype = {};
  A._StackTrace.prototype = {
    toString$0(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  A.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + A.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  A.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
  A.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
  A.TearOffClosure.prototype = {};
  A.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + A.unminifyOrTag($name) + "'";
    }
  };
  A.BoundClosure.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.BoundClosure))
        return false;
      return this.$_target === other.$_target && this._receiver === other._receiver;
    },
    get$hashCode(_) {
      return (A.objectHashCode(this._receiver) ^ A.Primitives_objectHashCode(this.$_target)) >>> 0;
    },
    toString$0(_) {
      return "Closure '" + this.$_name + "' of " + ("Instance of '" + A.Primitives_objectTypeName(this._receiver) + "'");
    }
  };
  A.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + this.message;
    }
  };
  A._Required.prototype = {};
  A.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this._length;
    },
    get$isEmpty(_) {
      return this._length === 0;
    },
    get$keys(_) {
      return new A.LinkedHashMapKeyIterable(this, A._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$values(_) {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(new A.LinkedHashMapKeyIterable(this, t1._eval$1("LinkedHashMapKeyIterable<1>")), new A.JsLinkedHashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1(_, key) {
      var strings, nums;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this.internalContainsKey$1(key);
    },
    internalContainsKey$1(key) {
      var rest = this.__js_helper$_rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(rest[this.internalComputeHashCode$1(key)], key) >= 0;
    },
    containsValue$1(_, value) {
      return new A.LinkedHashMapKeyIterable(this, A._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>")).any$1(0, new A.JsLinkedHashMap_containsValue_closure(this, value));
    },
    addAll$1(_, other) {
      J.forEach$1$ax(other, new A.JsLinkedHashMap_addAll_closure(this));
    },
    $index(_, key) {
      var strings, cell, t1, nums, _null = null;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return _null;
        cell = strings[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return _null;
        cell = nums[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this;
      if (typeof key == "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2(key, value) {
      var hash, bucket, index, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._newLinkedCell$2(key, value)];
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2(_, key, ifAbsent) {
      var t1, value, _this = this;
      if (_this.containsKey$1(0, key)) {
        t1 = _this.$index(0, key);
        return t1 == null ? A._instanceType(_this)._rest[1]._as(t1) : t1;
      }
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1(_, key) {
      var _this = this;
      if (typeof key == "string")
        return _this._removeHashTableEntry$2(_this._strings, key);
      else if (typeof key == "number" && (key & 0x3fffffff) === key)
        return _this._removeHashTableEntry$2(_this._nums, key);
      else
        return _this.internalRemove$1(key);
    },
    internalRemove$1(key) {
      var hash, bucket, index, cell, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      cell = bucket.splice(index, 1)[0];
      _this._unlinkCell$1(cell);
      if (bucket.length === 0)
        delete rest[hash];
      return cell.hashMapCellValue;
    },
    clear$0(_) {
      var _this = this;
      if (_this._length > 0) {
        _this._strings = _this._nums = _this.__js_helper$_rest = _this._first = _this._last = null;
        _this._length = 0;
        _this._modified$0();
      }
    },
    forEach$1(_, action) {
      var _this = this,
        cell = _this._first,
        modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.hashMapCellValue = value;
    },
    _removeHashTableEntry$2(table, key) {
      var cell;
      if (table == null)
        return null;
      cell = table[key];
      if (cell == null)
        return null;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.hashMapCellValue;
    },
    _modified$0() {
      this._modifications = this._modifications + 1 & 1073741823;
    },
    _newLinkedCell$2(key, value) {
      var t1, _this = this,
        cell = new A.LinkedHashMapCell(key, value);
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        t1 = _this._last;
        t1.toString;
        cell._previous = t1;
        _this._last = t1._next = cell;
      }
      ++_this._length;
      _this._modified$0();
      return cell;
    },
    _unlinkCell$1(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      --_this._length;
      _this._modified$0();
    },
    internalComputeHashCode$1(key) {
      return J.get$hashCode$(key) & 0x3fffffff;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _newHashTable$0() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    }
  };
  A.JsLinkedHashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this,
        t2 = t1.$index(0, each);
      return t2 == null ? A._instanceType(t1)._rest[1]._as(t2) : t2;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  A.JsLinkedHashMap_containsValue_closure.prototype = {
    call$1(each) {
      return J.$eq$(this.$this.$index(0, each), this.value);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("bool(1)");
    }
  };
  A.JsLinkedHashMap_addAll_closure.prototype = {
    call$2(key, value) {
      this.$this.$indexSet(0, key, value);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A.LinkedHashMapCell.prototype = {};
  A.LinkedHashMapKeyIterable.prototype = {
    get$length(_) {
      return this._map._length;
    },
    get$isEmpty(_) {
      return this._map._length === 0;
    },
    get$iterator(_) {
      var t1 = this._map,
        t2 = new A.LinkedHashMapKeyIterator(t1, t1._modifications);
      t2._cell = t1._first;
      return t2;
    },
    contains$1(_, element) {
      return this._map.containsKey$1(0, element);
    },
    forEach$1(_, f) {
      var t1 = this._map,
        cell = t1._first,
        modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.hashMapCellKey);
        if (modifications !== t1._modifications)
          throw A.wrapException(A.ConcurrentModificationError$(t1));
        cell = cell._next;
      }
    }
  };
  A.LinkedHashMapKeyIterator.prototype = {
    get$current(_) {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this._map;
      if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.__js_helper$_current = null;
        return false;
      } else {
        _this.__js_helper$_current = cell.hashMapCellKey;
        _this._cell = cell._next;
        return true;
      }
    }
  };
  A.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 20
  };
  A.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 86
  };
  A.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(tag);
    },
    $signature: 87
  };
  A.JSSyntaxRegExp.prototype = {
    toString$0(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeGlobalRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    firstMatch$1(string) {
      var m = this._nativeRegExp.exec(string);
      if (m == null)
        return null;
      return new A._MatchImplementation(m);
    },
    stringMatch$1(string) {
      var match = this.firstMatch$1(string);
      if (match != null)
        return match._match[0];
      return null;
    },
    _execGlobal$2(string, start) {
      var match,
        regexp = this.get$_nativeGlobalVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      return new A._MatchImplementation(match);
    },
    $isRegExp: 1
  };
  A._MatchImplementation.prototype = {
    get$end(_) {
      var t1 = this._match;
      return t1.index + t1[0].length;
    },
    $index(_, index) {
      return this._match[index];
    },
    $isMatch: 1,
    $isRegExpMatch: 1
  };
  A._AllMatchesIterator.prototype = {
    get$current(_) {
      var t1 = this.__js_helper$_current;
      return t1 == null ? type$.RegExpMatch._as(t1) : t1;
    },
    moveNext$0() {
      var t1, t2, t3, match, nextIndex, _this = this,
        string = _this.__js_helper$_string;
      if (string == null)
        return false;
      t1 = _this._nextIndex;
      t2 = string.length;
      if (t1 <= t2) {
        t3 = _this._regExp;
        match = t3._execGlobal$2(string, t1);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end(match);
          if (match._match.index === nextIndex) {
            if (t3._nativeRegExp.unicode) {
              t1 = _this._nextIndex;
              t3 = t1 + 1;
              if (t3 < t2) {
                t1 = B.JSString_methods.codeUnitAt$1(string, t1);
                if (t1 >= 55296 && t1 <= 56319) {
                  t1 = B.JSString_methods.codeUnitAt$1(string, t3);
                  t1 = t1 >= 56320 && t1 <= 57343;
                } else
                  t1 = false;
              } else
                t1 = false;
            } else
              t1 = false;
            nextIndex = (t1 ? nextIndex + 1 : nextIndex) + 1;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this.__js_helper$_string = _this.__js_helper$_current = null;
      return false;
    }
  };
  A.StringMatch.prototype = {
    $index(_, g) {
      if (g !== 0)
        A.throwExpression(A.RangeError$value(g, null));
      return this.pattern;
    },
    $isMatch: 1
  };
  A._StringAllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._StringAllMatchesIterator(this._input, this._pattern, this.__js_helper$_index);
    },
    get$first(_) {
      var t1 = this._pattern,
        index = this._input.indexOf(t1, this.__js_helper$_index);
      if (index >= 0)
        return new A.StringMatch(index, t1);
      throw A.wrapException(A.IterableElementError_noElement());
    }
  };
  A._StringAllMatchesIterator.prototype = {
    moveNext$0() {
      var index, end, _this = this,
        t1 = _this.__js_helper$_index,
        t2 = _this._pattern,
        t3 = t2.length,
        t4 = _this._input,
        t5 = t4.length;
      if (t1 + t3 > t5) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = t4.indexOf(t2, t1);
      if (index < 0) {
        _this.__js_helper$_index = t5 + 1;
        _this.__js_helper$_current = null;
        return false;
      }
      end = index + t3;
      _this.__js_helper$_current = new A.StringMatch(index, t2);
      _this.__js_helper$_index = end === _this.__js_helper$_index ? end + 1 : end;
      return true;
    },
    get$current(_) {
      var t1 = this.__js_helper$_current;
      t1.toString;
      return t1;
    }
  };
  A._Cell.prototype = {
    _readLocal$0() {
      var t1 = this.__late_helper$_value;
      if (t1 === this)
        throw A.wrapException(new A.LateError("Local '" + this.__late_helper$_name + "' has not been initialized."));
      return t1;
    },
    _readField$0() {
      var t1 = this.__late_helper$_value;
      if (t1 === this)
        throw A.wrapException(A.LateError$fieldNI(this.__late_helper$_name));
      return t1;
    },
    set$finalLocalValue(v) {
      var _this = this;
      if (_this.__late_helper$_value !== _this)
        throw A.wrapException(new A.LateError("Local '" + _this.__late_helper$_name + "' has already been initialized."));
      _this.__late_helper$_value = v;
    }
  };
  A.NativeByteBuffer.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteBuffer_RkP;
    },
    asInt64List$2(receiver, offsetInBytes, $length) {
      throw A.wrapException(A.UnsupportedError$("Int64List not supported by dart2js."));
    },
    $isNativeByteBuffer: 1,
    $isByteBuffer: 1
  };
  A.NativeTypedData.prototype = {
    _invalidPosition$3(receiver, position, $length, $name) {
      var t1 = A.RangeError$range(position, 0, $length, $name, null);
      throw A.wrapException(t1);
    },
    _checkPosition$3(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
    $isNativeTypedData: 1,
    $isTypedData: 1
  };
  A.NativeByteData.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteData_zNC;
    },
    getInt64$2(receiver, byteOffset, endian) {
      throw A.wrapException(A.UnsupportedError$("Int64 accessor not supported by dart2js."));
    },
    setInt64$3(receiver, byteOffset, value, endian) {
      throw A.wrapException(A.UnsupportedError$("Int64 accessor not supported by dart2js."));
    },
    $isByteData: 1
  };
  A.NativeTypedArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    _setRangeFast$4(receiver, start, end, source, skipCount) {
      var count, sourceLength,
        targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (start > end)
        throw A.wrapException(A.RangeError$range(start, 0, end, null, null));
      count = end - start;
      if (skipCount < 0)
        throw A.wrapException(A.ArgumentError$(skipCount, null));
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw A.wrapException(A.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJSIndexable: 1,
    $isJavaScriptIndexingBehavior: 1
  };
  A.NativeTypedArrayOfDouble.prototype = {
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      if (type$.NativeTypedArrayOfDouble._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeTypedArrayOfInt.prototype = {
    $indexSet(receiver, index, value) {
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeFloat32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float32List_LB7;
    },
    $isFloat32List: 1
  };
  A.NativeFloat64List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float64List_LB7;
    },
    $isFloat64List: 1
  };
  A.NativeInt16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int16List_uXf;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  A.NativeInt32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int32List_O50;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isInt32List: 1
  };
  A.NativeInt8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int8List_ekJ;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  A.NativeUint16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint16List_2bx;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  A.NativeUint32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint32List_2bx;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  A.NativeUint8ClampedList.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8ClampedList_Jik;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  A.NativeUint8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8List_WLA;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isNativeUint8List: 1,
    $isUint8List: 1
  };
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A.Rti.prototype = {
    _eval$1(recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return A._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  A._FunctionParameters.prototype = {};
  A._Type.prototype = {
    toString$0(_) {
      return A._rtiToString(this._rti, null);
    },
    $isType: 1
  };
  A._Error.prototype = {
    toString$0(_) {
      return this.__rti$_message;
    }
  };
  A._TypeError.prototype = {$isTypeError: 1};
  A._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 4
  };
  A._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
      var t1, t2;
      this._box_0.storedCallback = callback;
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 88
  };
  A._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 10
  };
  A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 10
  };
  A._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setTimeout(A.convertDartClosureToJS(new A._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("`setTimeout()` not found."));
    },
    _TimerImpl$periodic$2(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setInterval(A.convertDartClosureToJS(new A._TimerImpl$periodic_closure(this, milliseconds, Date.now(), callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("Periodic timer."));
    },
    cancel$0(_) {
      var t1;
      if (self.setTimeout != null) {
        t1 = this._handle;
        if (t1 == null)
          return;
        if (this._once)
          self.clearTimeout(t1);
        else
          self.clearInterval(t1);
        this._handle = null;
      } else
        throw A.wrapException(A.UnsupportedError$("Canceling a timer."));
    },
    $isTimer: 1
  };
  A._TimerImpl_internalCallback.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._handle = null;
      t1._tick = 1;
      this.callback.call$0();
    },
    $signature: 0
  };
  A._TimerImpl$periodic_closure.prototype = {
    call$0() {
      var duration, _this = this,
        t1 = _this.$this,
        tick = t1._tick + 1,
        t2 = _this.milliseconds;
      if (t2 > 0) {
        duration = Date.now() - _this.start;
        if (duration > (tick + 1) * t2)
          tick = B.JSInt_methods.$tdiv(duration, t2);
      }
      t1._tick = tick;
      _this.callback.call$1(t1);
    },
    $signature: 10
  };
  A._AsyncAwaitCompleter.prototype = {
    complete$1(_, value) {
      var t1, _this = this;
      if (value == null)
        _this.$ti._precomputed1._as(value);
      if (!_this.isSync)
        _this._future._asyncComplete$1(value);
      else {
        t1 = _this._future;
        if (_this.$ti._eval$1("Future<1>")._is(value))
          t1._chainFuture$1(value);
        else
          t1._completeWithValue$1(value);
      }
    },
    completeError$2(e, st) {
      var t1 = this._future;
      if (this.isSync)
        t1._completeError$2(e, st);
      else
        t1._asyncCompleteError$2(e, st);
    }
  };
  A._awaitOnObject_closure.prototype = {
    call$1(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 8
  };
  A._awaitOnObject_closure0.prototype = {
    call$2(error, stackTrace) {
      this.bodyFunction.call$2(1, new A.ExceptionAndStackTrace(error, stackTrace));
    },
    $signature: 90
  };
  A._wrapJsFunctionForAsync_closure.prototype = {
    call$2(errorCode, result) {
      this.$protected(errorCode, result);
    },
    $signature: 91
  };
  A._IterationMarker.prototype = {
    toString$0(_) {
      return "IterationMarker(" + this.state + ", " + A.S(this.value) + ")";
    }
  };
  A._SyncStarIterator.prototype = {
    get$current(_) {
      var nested = this._nestedIterator;
      if (nested == null)
        return this._async$_current;
      return nested.get$current(nested);
    },
    moveNext$0() {
      var t1, value, state, suspendedBodies, inner, _this = this;
      for (; true;) {
        t1 = _this._nestedIterator;
        if (t1 != null)
          if (t1.moveNext$0())
            return true;
          else
            _this._nestedIterator = null;
        value = function(body, SUCCESS, ERROR) {
          var errorValue,
            errorCode = SUCCESS;
          while (true)
            try {
              return body(errorCode, errorValue);
            } catch (error) {
              errorValue = error;
              errorCode = ERROR;
            }
        }(_this._body, 0, 1);
        if (value instanceof A._IterationMarker) {
          state = value.state;
          if (state === 2) {
            suspendedBodies = _this._suspendedBodies;
            if (suspendedBodies == null || suspendedBodies.length === 0) {
              _this._async$_current = null;
              return false;
            }
            _this._body = suspendedBodies.pop();
            continue;
          } else {
            t1 = value.value;
            if (state === 3)
              throw t1;
            else {
              inner = J.get$iterator$ax(t1);
              if (inner instanceof A._SyncStarIterator) {
                t1 = _this._suspendedBodies;
                if (t1 == null)
                  t1 = _this._suspendedBodies = [];
                t1.push(_this._body);
                _this._body = inner._body;
                continue;
              } else {
                _this._nestedIterator = inner;
                continue;
              }
            }
          }
        } else {
          _this._async$_current = value;
          return true;
        }
      }
      return false;
    }
  };
  A._SyncStarIterable.prototype = {
    get$iterator(_) {
      return new A._SyncStarIterator(this._outerHelper());
    }
  };
  A.AsyncError.prototype = {
    toString$0(_) {
      return A.S(this.error);
    },
    $isError: 1,
    get$stackTrace() {
      return this.stackTrace;
    }
  };
  A.Future_Future_closure.prototype = {
    call$0() {
      var e, s, exception;
      try {
        this.result._complete$1(this.computation.call$0());
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._completeWithErrorCallback(this.result, e, s);
      }
    },
    $signature: 0
  };
  A.Future_Future$delayed_closure.prototype = {
    call$0() {
      this.T._as(null);
      this.result._complete$1(null);
    },
    $signature: 0
  };
  A.Future_wait_handleError.prototype = {
    call$2(theError, theStackTrace) {
      var _this = this,
        t1 = _this._box_0,
        t2 = --t1.remaining;
      if (t1.values != null) {
        t1.values = null;
        if (t1.remaining === 0 || _this.eagerError)
          _this._future._completeError$2(theError, theStackTrace);
        else {
          _this.error.__late_helper$_value = theError;
          _this.stackTrace.__late_helper$_value = theStackTrace;
        }
      } else if (t2 === 0 && !_this.eagerError)
        _this._future._completeError$2(_this.error._readLocal$0(), _this.stackTrace._readLocal$0());
    },
    $signature: 54
  };
  A.Future_wait_closure.prototype = {
    call$1(value) {
      var valueList, _this = this,
        t1 = _this._box_0;
      --t1.remaining;
      valueList = t1.values;
      if (valueList != null) {
        J.$indexSet$ax(valueList, _this.pos, value);
        if (t1.remaining === 0)
          _this._future._completeWithValue$1(A.List_List$from(valueList, true, _this.T));
      } else if (t1.remaining === 0 && !_this.eagerError)
        _this._future._completeError$2(_this.error._readLocal$0(), _this.stackTrace._readLocal$0());
    },
    $signature() {
      return this.T._eval$1("Null(0)");
    }
  };
  A._Completer.prototype = {
    completeError$2(error, stackTrace) {
      A.checkNotNullable(error, "error", type$.Object);
      if ((this.future._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      this._completeError$2(error, stackTrace);
    },
    completeError$1(error) {
      return this.completeError$2(error, null);
    }
  };
  A._AsyncCompleter.prototype = {
    complete$1(_, value) {
      var t1 = this.future;
      if ((t1._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t1._asyncComplete$1(value);
    },
    complete$0($receiver) {
      return this.complete$1($receiver, null);
    },
    _completeError$2(error, stackTrace) {
      this.future._asyncCompleteError$2(error, stackTrace);
    }
  };
  A._FutureListener.prototype = {
    matchesErrorTest$1(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2(this.callback, asyncError.error);
    },
    handleError$1(asyncError) {
      var exception,
        errorCallback = this.errorCallback,
        result = null,
        t1 = asyncError.error,
        t2 = this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        result = t2.runBinary$3(errorCallback, t1, asyncError.stackTrace);
      else
        result = t2.runUnary$2(errorCallback, t1);
      try {
        t1 = result;
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception))) {
          if ((this.state & 1) !== 0)
            throw A.wrapException(A.ArgumentError$("The error handler of Future.then must return a value of the returned future's type", "onError"));
          throw A.wrapException(A.ArgumentError$("The error handler of Future.catchError must return a value of the future's type", "onError"));
        } else
          throw exception;
      }
    }
  };
  A._Future.prototype = {
    then$1$2$onError(_, f, onError, $R) {
      var result, t1,
        currentZone = $.Zone__current;
      if (currentZone === B.C__RootZone) {
        if (onError != null && !type$.dynamic_Function_Object_StackTrace._is(onError) && !type$.dynamic_Function_Object._is(onError))
          throw A.wrapException(A.ArgumentError$value(onError, "onError", string$.Error_));
      } else if (onError != null)
        onError = A._registerErrorHandler(onError, currentZone);
      result = new A._Future(currentZone, $R._eval$1("_Future<0>"));
      t1 = onError == null ? 1 : 3;
      this._addListener$1(new A._FutureListener(result, t1, f, onError, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1($receiver, f, $R) {
      return this.then$1$2$onError($receiver, f, null, $R);
    },
    _thenAwait$1$2(f, onError, $E) {
      var result = new A._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this._addListener$1(new A._FutureListener(result, 3, f, onError, this.$ti._eval$1("@<1>")._bind$1($E)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    catchError$2$test(onError, test) {
      var t1 = this.$ti,
        t2 = $.Zone__current,
        result = new A._Future(t2, t1);
      if (t2 !== B.C__RootZone)
        onError = A._registerErrorHandler(onError, t2);
      this._addListener$1(new A._FutureListener(result, 2, test, onError, t1._eval$1("@<1>")._bind$1(t1._precomputed1)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    catchError$1(onError) {
      return this.catchError$2$test(onError, null);
    },
    whenComplete$1(action) {
      var t1 = this.$ti,
        result = new A._Future($.Zone__current, t1);
      this._addListener$1(new A._FutureListener(result, 8, action, null, t1._eval$1("@<1>")._bind$1(t1._precomputed1)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    _setErrorObject$1(error) {
      this._state = this._state & 1 | 16;
      this._resultOrListeners = error;
    },
    _cloneResult$1(source) {
      this._state = source._state & 30 | this._state & 1;
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1(listener) {
      var _this = this,
        t1 = _this._state;
      if (t1 <= 3) {
        listener._nextListener = _this._resultOrListeners;
        _this._resultOrListeners = listener;
      } else {
        if ((t1 & 4) !== 0) {
          t1 = _this._resultOrListeners;
          if ((t1._state & 24) === 0) {
            t1._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(t1);
        }
        A._rootScheduleMicrotask(null, null, _this._zone, new A._Future__addListener_closure(_this, listener));
      }
    },
    _prependListeners$1(listeners) {
      var t1, existingListeners, next, cursor, next0, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 3) {
        existingListeners = _this._resultOrListeners;
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if ((t1 & 4) !== 0) {
          t1 = _this._resultOrListeners;
          if ((t1._state & 24) === 0) {
            t1._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(t1);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        A._rootScheduleMicrotask(null, null, _this._zone, new A._Future__prependListeners_closure(_box_0, _this));
      }
    },
    _removeListeners$0() {
      var current = this._resultOrListeners;
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _chainForeignFuture$1(source) {
      var e, s, exception, _this = this;
      _this._state ^= 2;
      try {
        source.then$1$2$onError(0, new A._Future__chainForeignFuture_closure(_this), new A._Future__chainForeignFuture_closure0(_this), type$.Null);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A.scheduleMicrotask(new A._Future__chainForeignFuture_closure1(_this, e, s));
      }
    },
    _complete$1(value) {
      var listeners, _this = this,
        t1 = _this.$ti;
      if (t1._eval$1("Future<1>")._is(value))
        if (t1._is(value))
          A._Future__chainCoreFuture(value, _this);
        else
          _this._chainForeignFuture$1(value);
      else {
        listeners = _this._removeListeners$0();
        _this._state = 8;
        _this._resultOrListeners = value;
        A._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeWithValue$1(value) {
      var _this = this,
        listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = value;
      A._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setErrorObject$1(A.AsyncError$(error, stackTrace));
      A._Future__propagateToListeners(this, listeners);
    },
    _asyncComplete$1(value) {
      if (this.$ti._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(value);
    },
    _asyncCompleteWithValue$1(value) {
      this._state ^= 2;
      A._rootScheduleMicrotask(null, null, this._zone, new A._Future__asyncCompleteWithValue_closure(this, value));
    },
    _chainFuture$1(value) {
      var _this = this;
      if (_this.$ti._is(value)) {
        if ((value._state & 16) !== 0) {
          _this._state ^= 2;
          A._rootScheduleMicrotask(null, null, _this._zone, new A._Future__chainFuture_closure(_this, value));
        } else
          A._Future__chainCoreFuture(value, _this);
        return;
      }
      _this._chainForeignFuture$1(value);
    },
    _asyncCompleteError$2(error, stackTrace) {
      this._state ^= 2;
      A._rootScheduleMicrotask(null, null, this._zone, new A._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    $isFuture: 1
  };
  A._Future__addListener_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0
  };
  A._Future__prependListeners_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0
  };
  A._Future__chainForeignFuture_closure.prototype = {
    call$1(value) {
      var error, stackTrace, exception,
        t1 = this.$this;
      t1._state ^= 2;
      try {
        t1._completeWithValue$1(t1.$ti._precomputed1._as(value));
      } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        t1._completeError$2(error, stackTrace);
      }
    },
    $signature: 4
  };
  A._Future__chainForeignFuture_closure0.prototype = {
    call$2(error, stackTrace) {
      this.$this._completeError$2(error, stackTrace);
    },
    $signature: 94
  };
  A._Future__chainForeignFuture_closure1.prototype = {
    call$0() {
      this.$this._completeError$2(this.e, this.s);
    },
    $signature: 0
  };
  A._Future__asyncCompleteWithValue_closure.prototype = {
    call$0() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 0
  };
  A._Future__chainFuture_closure.prototype = {
    call$0() {
      A._Future__chainCoreFuture(this.value, this.$this);
    },
    $signature: 0
  };
  A._Future__asyncCompleteError_closure.prototype = {
    call$0() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1(t1.callback);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = _this.hasError && _this._box_1.source._resultOrListeners.error === e;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = _this._box_1.source._resultOrListeners;
        else
          t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (completeResult instanceof A._Future && (completeResult._state & 24) !== 0) {
        if ((completeResult._state & 16) !== 0) {
          t1 = _this._box_0;
          t1.listenerValueOrError = completeResult._resultOrListeners;
          t1.listenerHasError = true;
        }
        return;
      }
      if (type$.Future_dynamic._is(completeResult)) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = J.then$1$1$x(completeResult, new A._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1(_) {
      return this.originalSource;
    },
    $signature: 95
  };
  A._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0() {
      var e, s, t1, t2, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t1.listenerValueOrError = t2.result._zone.runUnary$2(t2.callback, this.sourceResult);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = A.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleError.prototype = {
    call$0() {
      var asyncError, e, s, t1, exception, t2, _this = this;
      try {
        asyncError = _this._box_1.source._resultOrListeners;
        t1 = _this._box_0;
        if (t1.listener.matchesErrorTest$1(asyncError) && t1.listener.errorCallback != null) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = _this._box_1.source._resultOrListeners;
        t2 = _this._box_0;
        if (t1.error === e)
          t2.listenerValueOrError = t1;
        else
          t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._AsyncCallbackEntry.prototype = {};
  A.Stream.prototype = {
    get$length(_) {
      var t1 = {},
        future = new A._Future($.Zone__current, type$._Future_int);
      t1.count = 0;
      this.listen$4$cancelOnError$onDone$onError(new A.Stream_length_closure(t1, this), true, new A.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    }
  };
  A.Stream_length_closure.prototype = {
    call$1(_) {
      ++this._box_0.count;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1)");
    }
  };
  A.Stream_length_closure0.prototype = {
    call$0() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 0
  };
  A.StreamSubscription.prototype = {};
  A.StreamTransformerBase.prototype = {};
  A._StreamController.prototype = {
    get$_pendingEvents() {
      if ((this._state & 8) === 0)
        return this._varData;
      return this._varData.get$varData();
    },
    _ensurePendingEvents$0() {
      var events, _this = this;
      if ((_this._state & 8) === 0) {
        events = _this._varData;
        return events == null ? _this._varData = new A._StreamImplEvents() : events;
      }
      events = _this._varData.get$varData();
      return events;
    },
    get$_subscription() {
      var varData = this._varData;
      return (this._state & 8) !== 0 ? varData.get$varData() : varData;
    },
    _badEventState$0() {
      if ((this._state & 4) !== 0)
        return new A.StateError("Cannot add event after closing");
      return new A.StateError("Cannot add event while adding a stream");
    },
    _ensureDoneFuture$0() {
      var t1 = this._doneFuture;
      if (t1 == null)
        t1 = this._doneFuture = (this._state & 2) !== 0 ? $.$get$Future__nullFuture() : new A._Future($.Zone__current, type$._Future_void);
      return t1;
    },
    add$1(_, value) {
      var _this = this,
        t1 = _this._state;
      if (t1 >= 4)
        throw A.wrapException(_this._badEventState$0());
      if ((t1 & 1) !== 0)
        _this._sendData$1(value);
      else if ((t1 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, new A._DelayedData(value));
    },
    close$0(_) {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 4) !== 0)
        return _this._ensureDoneFuture$0();
      if (t1 >= 4)
        throw A.wrapException(_this._badEventState$0());
      t1 = _this._state = t1 | 4;
      if ((t1 & 1) !== 0)
        _this._sendDone$0();
      else if ((t1 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, B.C__DelayedDone);
      return _this._ensureDoneFuture$0();
    },
    _subscribe$4(onData, onError, onDone, cancelOnError) {
      var t1, t2, t3, subscription, pendingEvents, addState, _this = this;
      if ((_this._state & 3) !== 0)
        throw A.wrapException(A.StateError$("Stream has already been listened to."));
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      t3 = A._BufferingStreamSubscription__registerDataHandler(t1, onData);
      A._BufferingStreamSubscription__registerErrorHandler(t1, onError);
      subscription = new A._ControllerSubscription(_this, t3, onDone, t1, t2, A._instanceType(_this)._eval$1("_ControllerSubscription<1>"));
      pendingEvents = _this.get$_pendingEvents();
      t1 = _this._state |= 1;
      if ((t1 & 8) !== 0) {
        addState = _this._varData;
        addState.set$varData(subscription);
        addState.resume$0(0);
      } else
        _this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      t1 = subscription._state;
      subscription._state = t1 | 32;
      new A._StreamController__subscribe_closure(_this).call$0();
      subscription._state &= 4294967263;
      subscription._checkState$1((t1 & 4) !== 0);
      return subscription;
    },
    _recordCancel$1(subscription) {
      var onCancel, cancelResult, e, s, exception, result0, t1, _this = this, result = null;
      if ((_this._state & 8) !== 0)
        result = _this._varData.cancel$0(0);
      _this._varData = null;
      _this._state = _this._state & 4294967286 | 2;
      onCancel = _this.onCancel;
      if (onCancel != null)
        if (result == null)
          try {
            cancelResult = onCancel.call$0();
            if (type$.Future_void._is(cancelResult))
              result = cancelResult;
          } catch (exception) {
            e = A.unwrapException(exception);
            s = A.getTraceFromException(exception);
            result0 = new A._Future($.Zone__current, type$._Future_void);
            result0._asyncCompleteError$2(e, s);
            result = result0;
          }
        else
          result = result.whenComplete$1(onCancel);
      t1 = new A._StreamController__recordCancel_complete(_this);
      if (result != null)
        result = result.whenComplete$1(t1);
      else
        t1.call$0();
      return result;
    }
  };
  A._StreamController__subscribe_closure.prototype = {
    call$0() {
      A._runGuarded(this.$this.onListen);
    },
    $signature: 0
  };
  A._StreamController__recordCancel_complete.prototype = {
    call$0() {
      var doneFuture = this.$this._doneFuture;
      if (doneFuture != null && (doneFuture._state & 30) === 0)
        doneFuture._asyncComplete$1(null);
    },
    $signature: 0
  };
  A._AsyncStreamControllerDispatch.prototype = {
    _sendData$1(data) {
      this.get$_subscription()._addPending$1(new A._DelayedData(data));
    },
    _sendDone$0() {
      this.get$_subscription()._addPending$1(B.C__DelayedDone);
    }
  };
  A._AsyncStreamController.prototype = {};
  A._ControllerStream.prototype = {
    get$hashCode(_) {
      return (A.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof A._ControllerStream && other._async$_controller === this._async$_controller;
    }
  };
  A._ControllerSubscription.prototype = {
    _onCancel$0() {
      return this._async$_controller._recordCancel$1(this);
    },
    _onPause$0() {
      var t1 = this._async$_controller;
      if ((t1._state & 8) !== 0)
        t1._varData.pause$0(0);
      A._runGuarded(t1.onPause);
    },
    _onResume$0() {
      var t1 = this._async$_controller;
      if ((t1._state & 8) !== 0)
        t1._varData.resume$0(0);
      A._runGuarded(t1.onResume);
    }
  };
  A._BufferingStreamSubscription.prototype = {
    _setPendingEvents$1(pendingEvents) {
      if (pendingEvents == null)
        return;
      this._pending = pendingEvents;
      if (pendingEvents.lastPendingEvent != null) {
        this._state |= 64;
        pendingEvents.schedule$1(this);
      }
    },
    cancel$0(_) {
      var t1 = this._state &= 4294967279;
      if ((t1 & 8) === 0)
        this._async$_cancel$0();
      t1 = this._cancelFuture;
      return t1 == null ? $.$get$Future__nullFuture() : t1;
    },
    _async$_cancel$0() {
      var t2, _this = this,
        t1 = _this._state |= 8;
      if ((t1 & 64) !== 0) {
        t2 = _this._pending;
        if (t2._state === 1)
          t2._state = 3;
      }
      if ((t1 & 32) === 0)
        _this._pending = null;
      _this._cancelFuture = _this._onCancel$0();
    },
    _onPause$0() {
    },
    _onResume$0() {
    },
    _onCancel$0() {
      return null;
    },
    _addPending$1($event) {
      var t1, _this = this,
        pending = _this._pending;
      if (pending == null)
        pending = new A._StreamImplEvents();
      _this._pending = pending;
      pending.add$1(0, $event);
      t1 = _this._state;
      if ((t1 & 64) === 0) {
        t1 |= 64;
        _this._state = t1;
        if (t1 < 128)
          pending.schedule$1(_this);
      }
    },
    _sendData$1(data) {
      var _this = this,
        t1 = _this._state;
      _this._state = t1 | 32;
      _this._zone.runUnaryGuarded$2(_this._async$_onData, data);
      _this._state &= 4294967263;
      _this._checkState$1((t1 & 4) !== 0);
    },
    _sendDone$0() {
      var cancelFuture, _this = this,
        t1 = new A._BufferingStreamSubscription__sendDone_sendDone(_this);
      _this._async$_cancel$0();
      _this._state |= 16;
      cancelFuture = _this._cancelFuture;
      if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _checkState$1(wasInputPaused) {
      var t2, isInputPaused, _this = this,
        t1 = _this._state;
      if ((t1 & 64) !== 0 && _this._pending.lastPendingEvent == null) {
        t1 = _this._state = t1 & 4294967231;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t2 = _this._pending;
            t2 = t2 == null ? null : t2.lastPendingEvent == null;
            t2 = t2 !== false;
          } else
            t2 = false;
        else
          t2 = false;
        if (t2) {
          t1 &= 4294967291;
          _this._state = t1;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if ((t1 & 8) !== 0) {
          _this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        _this._state = t1 ^ 32;
        if (isInputPaused)
          _this._onPause$0();
        else
          _this._onResume$0();
        t1 = _this._state &= 4294967263;
      }
      if ((t1 & 64) !== 0 && t1 < 128)
        _this._pending.schedule$1(_this);
    },
    $isStreamSubscription: 1
  };
  A._BufferingStreamSubscription__sendDone_sendDone.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = t2 | 42;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state &= 4294967263;
    },
    $signature: 0
  };
  A._StreamImpl.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      return this._async$_controller._subscribe$4(onData, onError, onDone, true);
    }
  };
  A._DelayedEvent.prototype = {
    get$next(receiver) {
      return this.next;
    },
    set$next(receiver, val) {
      return this.next = val;
    }
  };
  A._DelayedData.prototype = {
    perform$1(dispatch) {
      dispatch._sendData$1(this.value);
    }
  };
  A._DelayedDone.prototype = {
    perform$1(dispatch) {
      dispatch._sendDone$0();
    },
    get$next(_) {
      return null;
    },
    set$next(_, _0) {
      throw A.wrapException(A.StateError$("No events after a done."));
    }
  };
  A._PendingEvents.prototype = {
    schedule$1(dispatch) {
      var _this = this,
        t1 = _this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        _this._state = 1;
        return;
      }
      A.scheduleMicrotask(new A._PendingEvents_schedule_closure(_this, dispatch));
      _this._state = 1;
    }
  };
  A._PendingEvents_schedule_closure.prototype = {
    call$0() {
      var $event, nextEvent,
        t1 = this.$this,
        oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      $event = t1.firstPendingEvent;
      nextEvent = $event.get$next($event);
      t1.firstPendingEvent = nextEvent;
      if (nextEvent == null)
        t1.lastPendingEvent = null;
      $event.perform$1(this.dispatch);
    },
    $signature: 0
  };
  A._StreamImplEvents.prototype = {
    add$1(_, $event) {
      var _this = this,
        lastEvent = _this.lastPendingEvent;
      if (lastEvent == null)
        _this.firstPendingEvent = _this.lastPendingEvent = $event;
      else {
        lastEvent.set$next(0, $event);
        _this.lastPendingEvent = $event;
      }
    }
  };
  A._StreamIterator.prototype = {};
  A._Zone.prototype = {};
  A._rootHandleError_closure.prototype = {
    call$0() {
      var t1 = this.error,
        t2 = this.stackTrace;
      A.checkNotNullable(t1, "error", type$.Object);
      A.checkNotNullable(t2, "stackTrace", type$.StackTrace);
      A.Error__throw(t1, t2);
    },
    $signature: 0
  };
  A._RootZone.prototype = {
    runGuarded$1(f) {
      var e, s, exception;
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        A._rootRun(null, null, this, f);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(e, s);
      }
    },
    runUnaryGuarded$1$2(f, arg) {
      var e, s, exception;
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        A._rootRunUnary(null, null, this, f, arg);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(e, s);
      }
    },
    runUnaryGuarded$2(f, arg) {
      return this.runUnaryGuarded$1$2(f, arg, type$.dynamic);
    },
    runBinaryGuarded$2$3(f, arg1, arg2) {
      var e, s, exception;
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$2(arg1, arg2);
          return;
        }
        A._rootRunBinary(null, null, this, f, arg1, arg2);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(e, s);
      }
    },
    runBinaryGuarded$3(f, arg1, arg2) {
      return this.runBinaryGuarded$2$3(f, arg1, arg2, type$.dynamic, type$.dynamic);
    },
    bindCallbackGuarded$1(f) {
      return new A._RootZone_bindCallbackGuarded_closure(this, f);
    },
    bindUnaryCallbackGuarded$1$1(f, $T) {
      return new A._RootZone_bindUnaryCallbackGuarded_closure(this, f, $T);
    },
    bindBinaryCallbackGuarded$2$1(f, T1, T2) {
      return new A._RootZone_bindBinaryCallbackGuarded_closure(this, f, T1, T2);
    },
    $index(_, key) {
      return null;
    },
    run$1$1(f) {
      if ($.Zone__current === B.C__RootZone)
        return f.call$0();
      return A._rootRun(null, null, this, f);
    },
    run$1(f) {
      return this.run$1$1(f, type$.dynamic);
    },
    runUnary$2$2(f, arg) {
      if ($.Zone__current === B.C__RootZone)
        return f.call$1(arg);
      return A._rootRunUnary(null, null, this, f, arg);
    },
    runUnary$2(f, arg) {
      return this.runUnary$2$2(f, arg, type$.dynamic, type$.dynamic);
    },
    runBinary$3$3(f, arg1, arg2) {
      if ($.Zone__current === B.C__RootZone)
        return f.call$2(arg1, arg2);
      return A._rootRunBinary(null, null, this, f, arg1, arg2);
    },
    runBinary$3(f, arg1, arg2) {
      return this.runBinary$3$3(f, arg1, arg2, type$.dynamic, type$.dynamic, type$.dynamic);
    },
    registerBinaryCallback$3$1(f) {
      return f;
    },
    registerBinaryCallback$1(f) {
      return this.registerBinaryCallback$3$1(f, type$.dynamic, type$.dynamic, type$.dynamic);
    }
  };
  A._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 0
  };
  A._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1(arg) {
      return this.$this.runUnaryGuarded$2(this.f, arg);
    },
    $signature() {
      return this.T._eval$1("~(0)");
    }
  };
  A._RootZone_bindBinaryCallbackGuarded_closure.prototype = {
    call$2(arg1, arg2) {
      return this.$this.runBinaryGuarded$3(this.f, arg1, arg2);
    },
    $signature() {
      return this.T1._eval$1("@<0>")._bind$1(this.T2)._eval$1("~(1,2)");
    }
  };
  A._HashMap.prototype = {
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$keys(_) {
      return new A._HashMapKeyIterable(this, A._instanceType(this)._eval$1("_HashMapKeyIterable<1>"));
    },
    containsKey$1(_, key) {
      var strings, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        return nums == null ? false : nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1(key) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, key), key) >= 0;
    },
    $index(_, key) {
      var strings, t1, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        t1 = strings == null ? null : A._HashMap__getTableEntry(strings, key);
        return t1;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        t1 = nums == null ? null : A._HashMap__getTableEntry(nums, key);
        return t1;
      } else
        return this._get$1(0, key);
    },
    _get$1(_, key) {
      var bucket, index,
        rest = this._collection$_rest;
      if (rest == null)
        return null;
      bucket = this._getBucket$2(rest, key);
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this;
      if (typeof key == "string" && key !== "__proto__") {
        strings = _this._collection$_strings;
        _this._collection$_addHashTableEntry$3(strings == null ? _this._collection$_strings = A._HashMap__newHashTable() : strings, key, value);
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = _this._collection$_nums;
        _this._collection$_addHashTableEntry$3(nums == null ? _this._collection$_nums = A._HashMap__newHashTable() : nums, key, value);
      } else
        _this._set$2(key, value);
    },
    _set$2(key, value) {
      var hash, bucket, index, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._HashMap__newHashTable();
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        A._HashMap__setTableEntry(rest, hash, [key, value]);
        ++_this._collection$_length;
        _this._collection$_keys = null;
      } else {
        index = _this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++_this._collection$_length;
          _this._collection$_keys = null;
        }
      }
    },
    putIfAbsent$2(_, key, ifAbsent) {
      var t1, value, _this = this;
      if (_this.containsKey$1(0, key)) {
        t1 = _this.$index(0, key);
        return t1 == null ? A._instanceType(_this)._rest[1]._as(t1) : t1;
      }
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1(_, key) {
      var _this = this;
      if (typeof key == "string" && key !== "__proto__")
        return _this._collection$_removeHashTableEntry$2(_this._collection$_strings, key);
      else if (typeof key == "number" && (key & 1073741823) === key)
        return _this._collection$_removeHashTableEntry$2(_this._collection$_nums, key);
      else
        return _this._remove$1(0, key);
    },
    _remove$1(_, key) {
      var hash, bucket, index, result, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return null;
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      --_this._collection$_length;
      _this._collection$_keys = null;
      result = bucket.splice(index, 2)[1];
      if (0 === bucket.length)
        delete rest[hash];
      return result;
    },
    forEach$1(_, action) {
      var $length, t1, i, key, t2, _this = this,
        keys = _this._computeKeys$0();
      for ($length = keys.length, t1 = A._instanceType(_this)._rest[1], i = 0; i < $length; ++i) {
        key = keys[i];
        t2 = _this.$index(0, key);
        action.call$2(key, t2 == null ? t1._as(t2) : t2);
        if (keys !== _this._collection$_keys)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0() {
      var strings, names, entries, index, i, nums, rest, bucket, $length, i0, _this = this,
        result = _this._collection$_keys;
      if (result != null)
        return result;
      result = A.List_List$filled(_this._collection$_length, null, false, type$.dynamic);
      strings = _this._collection$_strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = _this._collection$_nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._collection$_keys = result;
    },
    _collection$_addHashTableEntry$3(table, key, value) {
      if (table[key] == null) {
        ++this._collection$_length;
        this._collection$_keys = null;
      }
      A._HashMap__setTableEntry(table, key, value);
    },
    _collection$_removeHashTableEntry$2(table, key) {
      var value;
      if (table != null && table[key] != null) {
        value = A._HashMap__getTableEntry(table, key);
        delete table[key];
        --this._collection$_length;
        this._collection$_keys = null;
        return value;
      } else
        return null;
    },
    _computeHashCode$1(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    _getBucket$2(table, key) {
      return table[this._computeHashCode$1(key)];
    },
    _findBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq$(bucket[i], key))
          return i;
      return -1;
    }
  };
  A._IdentityHashMap.prototype = {
    _computeHashCode$1(key) {
      return A.objectHashCode(key) & 1073741823;
    },
    _findBucketIndex$2(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2) {
        t1 = bucket[i];
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  A._HashMapKeyIterable.prototype = {
    get$length(_) {
      return this._collection$_map._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_map._collection$_length === 0;
    },
    get$iterator(_) {
      var t1 = this._collection$_map;
      return new A._HashMapKeyIterator(t1, t1._computeKeys$0());
    },
    contains$1(_, element) {
      return this._collection$_map.containsKey$1(0, element);
    },
    forEach$1(_, f) {
      var $length, i,
        t1 = this._collection$_map,
        keys = t1._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        f.call$1(keys[i]);
        if (keys !== t1._collection$_keys)
          throw A.wrapException(A.ConcurrentModificationError$(t1));
      }
    }
  };
  A._HashMapKeyIterator.prototype = {
    get$current(_) {
      var t1 = this._collection$_current;
      return t1 == null ? A._instanceType(this)._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        keys = _this._collection$_keys,
        offset = _this._offset,
        t1 = _this._collection$_map;
      if (keys !== t1._collection$_keys)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        _this._collection$_current = null;
        return false;
      } else {
        _this._collection$_current = keys[offset];
        _this._offset = offset + 1;
        return true;
      }
    }
  };
  A._LinkedCustomHashMap.prototype = {
    $index(_, key) {
      if (!this._validKey.call$1(key))
        return null;
      return this.super$JsLinkedHashMap$internalGet(key);
    },
    $indexSet(_, key, value) {
      this.super$JsLinkedHashMap$internalSet(key, value);
    },
    containsKey$1(_, key) {
      if (!this._validKey.call$1(key))
        return false;
      return this.super$JsLinkedHashMap$internalContainsKey(key);
    },
    remove$1(_, key) {
      if (!this._validKey.call$1(key))
        return null;
      return this.super$JsLinkedHashMap$internalRemove(key);
    },
    internalComputeHashCode$1(key) {
      return this._hashCode.call$1(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, t1, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = this._equals, i = 0; i < $length; ++i)
        if (t1.call$2(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    }
  };
  A._LinkedCustomHashMap_closure.prototype = {
    call$1(v) {
      return this.K._is(v);
    },
    $signature: 62
  };
  A._HashSet.prototype = {
    _newSet$0() {
      return new A._HashSet(A._instanceType(this)._eval$1("_HashSet<1>"));
    },
    get$iterator(_) {
      return new A._HashSetIterator(this, this._computeElements$0());
    },
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    contains$1(_, object) {
      var strings, nums;
      if (typeof object == "string" && object !== "__proto__") {
        strings = this._collection$_strings;
        return strings == null ? false : strings[object] != null;
      } else if (typeof object == "number" && (object & 1073741823) === object) {
        nums = this._collection$_nums;
        return nums == null ? false : nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    add$1(_, element) {
      var strings, nums, _this = this;
      if (typeof element == "string" && element !== "__proto__") {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._collection$_strings = A._HashSet__newHashTable() : strings, element);
      } else if (typeof element == "number" && (element & 1073741823) === element) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._collection$_nums = A._HashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(0, element);
    },
    _add$1(_, element) {
      var hash, bucket, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._HashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      ++_this._collection$_length;
      _this._collection$_elements = null;
      return true;
    },
    addAll$1(_, objects) {
      var t1;
      for (t1 = J.get$iterator$ax(objects); t1.moveNext$0();)
        this.add$1(0, t1.get$current(t1));
    },
    remove$1(_, object) {
      var _this = this;
      if (typeof object == "string" && object !== "__proto__")
        return _this._collection$_removeHashTableEntry$2(_this._collection$_strings, object);
      else if (typeof object == "number" && (object & 1073741823) === object)
        return _this._collection$_removeHashTableEntry$2(_this._collection$_nums, object);
      else
        return _this._remove$1(0, object);
    },
    _remove$1(_, object) {
      var hash, bucket, index, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      hash = _this._computeHashCode$1(object);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      --_this._collection$_length;
      _this._collection$_elements = null;
      bucket.splice(index, 1);
      if (0 === bucket.length)
        delete rest[hash];
      return true;
    },
    clear$0(_) {
      var _this = this;
      if (_this._collection$_length > 0) {
        _this._collection$_strings = _this._collection$_nums = _this._collection$_rest = _this._collection$_elements = null;
        _this._collection$_length = 0;
      }
    },
    _computeElements$0() {
      var strings, names, entries, index, i, nums, rest, bucket, $length, i0, _this = this,
        result = _this._collection$_elements;
      if (result != null)
        return result;
      result = A.List_List$filled(_this._collection$_length, null, false, type$.dynamic);
      strings = _this._collection$_strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = _this._collection$_nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; ++i0) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._collection$_elements = result;
    },
    _collection$_addHashTableEntry$2(table, element) {
      if (table[element] != null)
        return false;
      table[element] = 0;
      ++this._collection$_length;
      this._collection$_elements = null;
      return true;
    },
    _collection$_removeHashTableEntry$2(table, element) {
      if (table != null && table[element] != null) {
        delete table[element];
        --this._collection$_length;
        this._collection$_elements = null;
        return true;
      } else
        return false;
    },
    _computeHashCode$1(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i], element))
          return i;
      return -1;
    }
  };
  A._HashSetIterator.prototype = {
    get$current(_) {
      var t1 = this._collection$_current;
      return t1 == null ? A._instanceType(this)._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        elements = _this._collection$_elements,
        offset = _this._offset,
        t1 = _this._set;
      if (elements !== t1._collection$_elements)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (offset >= elements.length) {
        _this._collection$_current = null;
        return false;
      } else {
        _this._collection$_current = elements[offset];
        _this._offset = offset + 1;
        return true;
      }
    }
  };
  A._LinkedHashSet.prototype = {
    _newSet$0() {
      return new A._LinkedHashSet(A._instanceType(this)._eval$1("_LinkedHashSet<1>"));
    },
    get$iterator(_) {
      var t1 = new A._LinkedHashSetIterator(this, this._collection$_modifications);
      t1._collection$_cell = this._collection$_first;
      return t1;
    },
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    contains$1(_, object) {
      var strings, nums;
      if (typeof object == "string" && object !== "__proto__") {
        strings = this._collection$_strings;
        if (strings == null)
          return false;
        return strings[object] != null;
      } else if (typeof object == "number" && (object & 1073741823) === object) {
        nums = this._collection$_nums;
        if (nums == null)
          return false;
        return nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    forEach$1(_, action) {
      var _this = this,
        cell = _this._collection$_first,
        modifications = _this._collection$_modifications;
      for (; cell != null;) {
        action.call$1(cell._element);
        if (modifications !== _this._collection$_modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell._collection$_next;
      }
    },
    get$first(_) {
      var first = this._collection$_first;
      if (first == null)
        throw A.wrapException(A.StateError$("No elements"));
      return first._element;
    },
    add$1(_, element) {
      var strings, nums, _this = this;
      if (typeof element == "string" && element !== "__proto__") {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._collection$_strings = A._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element == "number" && (element & 1073741823) === element) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._collection$_nums = A._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(0, element);
    },
    _add$1(_, element) {
      var hash, bucket, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._collection$_newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    remove$1(_, object) {
      var _this = this;
      if (typeof object == "string" && object !== "__proto__")
        return _this._collection$_removeHashTableEntry$2(_this._collection$_strings, object);
      else if (typeof object == "number" && (object & 1073741823) === object)
        return _this._collection$_removeHashTableEntry$2(_this._collection$_nums, object);
      else
        return _this._remove$1(0, object);
    },
    _remove$1(_, object) {
      var hash, bucket, index, cell, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      hash = _this._computeHashCode$1(object);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      cell = bucket.splice(index, 1)[0];
      if (0 === bucket.length)
        delete rest[hash];
      _this._collection$_unlinkCell$1(cell);
      return true;
    },
    _filterWhere$2(test, removeMatching) {
      var element, next, modifications, t1, _this = this,
        cell = _this._collection$_first;
      for (; cell != null; cell = next) {
        element = cell._element;
        next = cell._collection$_next;
        modifications = _this._collection$_modifications;
        t1 = test.call$1(element);
        if (modifications !== _this._collection$_modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        if (true === t1)
          _this.remove$1(0, element);
      }
    },
    clear$0(_) {
      var _this = this;
      if (_this._collection$_length > 0) {
        _this._collection$_strings = _this._collection$_nums = _this._collection$_rest = _this._collection$_first = _this._collection$_last = null;
        _this._collection$_length = 0;
        _this._collection$_modified$0();
      }
    },
    _collection$_addHashTableEntry$2(table, element) {
      if (table[element] != null)
        return false;
      table[element] = this._collection$_newLinkedCell$1(element);
      return true;
    },
    _collection$_removeHashTableEntry$2(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = table[element];
      if (cell == null)
        return false;
      this._collection$_unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _collection$_modified$0() {
      this._collection$_modifications = this._collection$_modifications + 1 & 1073741823;
    },
    _collection$_newLinkedCell$1(element) {
      var t1, _this = this,
        cell = new A._LinkedHashSetCell(element);
      if (_this._collection$_first == null)
        _this._collection$_first = _this._collection$_last = cell;
      else {
        t1 = _this._collection$_last;
        t1.toString;
        cell._collection$_previous = t1;
        _this._collection$_last = t1._collection$_next = cell;
      }
      ++_this._collection$_length;
      _this._collection$_modified$0();
      return cell;
    },
    _collection$_unlinkCell$1(cell) {
      var _this = this,
        previous = cell._collection$_previous,
        next = cell._collection$_next;
      if (previous == null)
        _this._collection$_first = next;
      else
        previous._collection$_next = next;
      if (next == null)
        _this._collection$_last = previous;
      else
        next._collection$_previous = previous;
      --_this._collection$_length;
      _this._collection$_modified$0();
    },
    _computeHashCode$1(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    }
  };
  A._LinkedHashSetCell.prototype = {};
  A._LinkedHashSetIterator.prototype = {
    get$current(_) {
      var t1 = this._collection$_current;
      return t1 == null ? A._instanceType(this)._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        cell = _this._collection$_cell,
        t1 = _this._set;
      if (_this._collection$_modifications !== t1._collection$_modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (cell == null) {
        _this._collection$_current = null;
        return false;
      } else {
        _this._collection$_current = cell._element;
        _this._collection$_cell = cell._collection$_next;
        return true;
      }
    }
  };
  A.IterableBase.prototype = {};
  A.ListBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  A.ListMixin.prototype = {
    get$iterator(receiver) {
      return new A.ListIterator(receiver, this.get$length(receiver));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1(receiver, action) {
      var i,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$first(receiver) {
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    contains$1(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(this.$index(receiver, i), element))
          return true;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    firstWhere$2$orElse(receiver, test, orElse) {
      var i, element,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        element = this.$index(receiver, i);
        if (test.call$1(element))
          return element;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return orElse.call$0();
    },
    join$1(receiver, separator) {
      var t1;
      if (this.get$length(receiver) === 0)
        return "";
      t1 = A.StringBuffer__writeAll("", receiver, separator);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    join$0($receiver) {
      return this.join$1($receiver, "");
    },
    map$1$1(receiver, f, $T) {
      return new A.MappedListIterable(receiver, f, A.instanceType(receiver)._eval$1("@<ListMixin.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    skip$1(receiver, count) {
      return A.SubListIterable$(receiver, count, null, A.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    take$1(receiver, count) {
      return A.SubListIterable$(receiver, 0, A.checkNotNullable(count, "count", type$.int), A.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    toList$1$growable(receiver, growable) {
      var t1, first, result, i, _this = this;
      if (_this.get$isEmpty(receiver)) {
        t1 = J.JSArray_JSArray$growable(0, A.instanceType(receiver)._eval$1("ListMixin.E"));
        return t1;
      }
      first = _this.$index(receiver, 0);
      result = A.List_List$filled(_this.get$length(receiver), first, true, A.instanceType(receiver)._eval$1("ListMixin.E"));
      for (i = 1; i < _this.get$length(receiver); ++i)
        result[i] = _this.$index(receiver, i);
      return result;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1(receiver, element) {
      var t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    cast$1$0(receiver, $R) {
      return new A.CastList(receiver, A.instanceType(receiver)._eval$1("@<ListMixin.E>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    $add(receiver, other) {
      var t1 = A.List_List$of(receiver, true, A.instanceType(receiver)._eval$1("ListMixin.E"));
      B.JSArray_methods.addAll$1(t1, other);
      return t1;
    },
    fillRange$3(receiver, start, end, fill) {
      var i;
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, fill);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, t1, i;
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (A.instanceType(receiver)._eval$1("List<ListMixin.E>")._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    setAll$2(receiver, index, iterable) {
      this.setRange$3(receiver, index, index + iterable.length, iterable);
    },
    toString$0(receiver) {
      return A.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  A.MapBase.prototype = {};
  A.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += A.S(k);
      t1._contents = t2 + ": ";
      t1._contents += A.S(v);
    },
    $signature: 42
  };
  A.MapMixin.prototype = {
    forEach$1(receiver, action) {
      var t1, t2, key, t3;
      for (t1 = J.get$iterator$ax(this.get$keys(receiver)), t2 = A.instanceType(receiver)._eval$1("MapMixin.V"); t1.moveNext$0();) {
        key = t1.get$current(t1);
        t3 = this.$index(receiver, key);
        action.call$2(key, t3 == null ? t2._as(t3) : t3);
      }
    },
    putIfAbsent$2(receiver, key, ifAbsent) {
      var t1;
      if (this.containsKey$1(receiver, key)) {
        t1 = this.$index(receiver, key);
        return t1 == null ? A.instanceType(receiver)._eval$1("MapMixin.V")._as(t1) : t1;
      }
      t1 = ifAbsent.call$0();
      this.$indexSet(receiver, key, t1);
      return t1;
    },
    update$3$ifAbsent(receiver, key, update, ifAbsent) {
      var t1, _this = this;
      if (_this.containsKey$1(receiver, key)) {
        t1 = _this.$index(receiver, key);
        t1 = update.call$1(t1 == null ? A.instanceType(receiver)._eval$1("MapMixin.V")._as(t1) : t1);
        _this.$indexSet(receiver, key, t1);
        return t1;
      }
      if (ifAbsent != null) {
        t1 = ifAbsent.call$0();
        _this.$indexSet(receiver, key, t1);
        return t1;
      }
      throw A.wrapException(A.ArgumentError$value(key, "key", "Key not in map."));
    },
    update$2($receiver, key, update) {
      return this.update$3$ifAbsent($receiver, key, update, null);
    },
    get$entries(receiver) {
      return J.map$1$1$ax(this.get$keys(receiver), new A.MapMixin_entries_closure(receiver), A.instanceType(receiver)._eval$1("MapEntry<MapMixin.K,MapMixin.V>"));
    },
    removeWhere$1(receiver, test) {
      var t2, key, t3, _i,
        t1 = A.instanceType(receiver),
        keysToRemove = A._setArrayType([], t1._eval$1("JSArray<MapMixin.K>"));
      for (t2 = J.get$iterator$ax(this.get$keys(receiver)), t1 = t1._eval$1("MapMixin.V"); t2.moveNext$0();) {
        key = t2.get$current(t2);
        t3 = this.$index(receiver, key);
        if (test.call$2(key, t3 == null ? t1._as(t3) : t3))
          keysToRemove.push(key);
      }
      for (t1 = keysToRemove.length, _i = 0; _i < keysToRemove.length; keysToRemove.length === t1 || (0, A.throwConcurrentModificationError)(keysToRemove), ++_i)
        this.remove$1(receiver, keysToRemove[_i]);
    },
    containsKey$1(receiver, key) {
      return J.contains$1$asx(this.get$keys(receiver), key);
    },
    get$length(receiver) {
      return J.get$length$asx(this.get$keys(receiver));
    },
    get$isEmpty(receiver) {
      return J.get$isEmpty$asx(this.get$keys(receiver));
    },
    toString$0(receiver) {
      return A.MapBase_mapToString(receiver);
    },
    $isMap: 1
  };
  A.MapMixin_entries_closure.prototype = {
    call$1(key) {
      var t1 = this.$this,
        t2 = J.$index$asx(t1, key);
      if (t2 == null)
        t2 = A.instanceType(t1)._eval$1("MapMixin.V")._as(t2);
      t1 = A.instanceType(t1);
      return new A.MapEntry(key, t2, t1._eval$1("@<MapMixin.K>")._bind$1(t1._eval$1("MapMixin.V"))._eval$1("MapEntry<1,2>"));
    },
    $signature() {
      return A.instanceType(this.$this)._eval$1("MapEntry<MapMixin.K,MapMixin.V>(MapMixin.K)");
    }
  };
  A._UnmodifiableMapMixin.prototype = {
    $indexSet(_, key, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    remove$1(_, key) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    }
  };
  A.MapView.prototype = {
    $index(_, key) {
      return this._collection$_map.$index(0, key);
    },
    $indexSet(_, key, value) {
      this._collection$_map.$indexSet(0, key, value);
    },
    containsKey$1(_, key) {
      return this._collection$_map.containsKey$1(0, key);
    },
    forEach$1(_, action) {
      this._collection$_map.forEach$1(0, action);
    },
    get$isEmpty(_) {
      var t1 = this._collection$_map;
      return t1.get$isEmpty(t1);
    },
    get$length(_) {
      var t1 = this._collection$_map;
      return t1.get$length(t1);
    },
    get$keys(_) {
      var t1 = this._collection$_map;
      return t1.get$keys(t1);
    },
    remove$1(_, key) {
      return this._collection$_map.remove$1(0, key);
    },
    toString$0(_) {
      var t1 = this._collection$_map;
      return t1.toString$0(t1);
    },
    get$values(_) {
      var t1 = this._collection$_map;
      return t1.get$values(t1);
    },
    $isMap: 1
  };
  A.UnmodifiableMapView.prototype = {};
  A._DoubleLinkedQueueEntry.prototype = {
    _link$2(previous, next) {
      var _this = this;
      _this._nextLink = next;
      _this._previousLink = previous;
      if (previous != null)
        previous._nextLink = _this;
      if (next != null)
        next._previousLink = _this;
    },
    _unlink$0() {
      var t2, _this = this,
        t1 = _this._previousLink;
      if (t1 != null)
        t1._nextLink = _this._nextLink;
      t2 = _this._nextLink;
      if (t2 != null)
        t2._previousLink = t1;
      _this._previousLink = _this._nextLink = null;
    }
  };
  A._DoubleLinkedQueueElement.prototype = {
    _remove$0(_) {
      var t1, t2, _this = this;
      _this._queue = null;
      t1 = _this._previousLink;
      if (t1 != null)
        t1._nextLink = _this._nextLink;
      t2 = _this._nextLink;
      if (t2 != null)
        t2._previousLink = t1;
      _this._previousLink = _this._nextLink = null;
      return _this.element;
    },
    remove$0(_) {
      var _this = this,
        t1 = _this._queue;
      if (t1 != null)
        --t1._elementCount;
      _this._queue = null;
      _this._unlink$0();
      return _this.element;
    },
    _asNonSentinelEntry$0() {
      return this;
    },
    $isDoubleLinkedQueueEntry: 1,
    get$element() {
      return this.element;
    }
  };
  A._DoubleLinkedQueueSentinel.prototype = {
    _asNonSentinelEntry$0() {
      return null;
    },
    _remove$0(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$element() {
      throw A.wrapException(A.IterableElementError_noElement());
    }
  };
  A.DoubleLinkedQueue.prototype = {
    get$length(_) {
      return this._elementCount;
    },
    addFirst$1(value) {
      var t1 = this._sentinel;
      new A._DoubleLinkedQueueElement(this, value, t1.$ti._eval$1("_DoubleLinkedQueueElement<1>"))._link$2(t1, t1._nextLink);
      ++this._elementCount;
    },
    get$first(_) {
      return this._sentinel._nextLink.get$element();
    },
    get$isEmpty(_) {
      var t1 = this._sentinel;
      return t1._nextLink === t1;
    },
    get$iterator(_) {
      return new A._DoubleLinkedQueueIterator(this, this._sentinel._nextLink);
    },
    toString$0(_) {
      return A.IterableBase_iterableToFullString(this, "{", "}");
    },
    $isEfficientLengthIterable: 1
  };
  A._DoubleLinkedQueueIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._nextEntry,
        nextElement = t1 == null ? null : t1._asNonSentinelEntry$0();
      if (nextElement == null) {
        _this._queue = _this._nextEntry = _this._collection$_current = null;
        return false;
      }
      t1 = _this._queue;
      if (t1 != nextElement._queue)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      _this._collection$_current = nextElement.element;
      _this._nextEntry = nextElement._nextLink;
      return true;
    },
    get$current(_) {
      var t1 = this._collection$_current;
      return t1 == null ? A._instanceType(this)._precomputed1._as(t1) : t1;
    }
  };
  A.ListQueue.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A._ListQueueIterator(_this, _this._tail, _this._modificationCount, _this._head);
    },
    forEach$1(_, f) {
      var i, t1, t2, _this = this,
        modificationCount = _this._modificationCount;
      for (i = _this._head, t1 = _this.$ti._precomputed1; i !== _this._tail; i = (i + 1 & _this._table.length - 1) >>> 0) {
        t2 = _this._table[i];
        f.call$1(t2 == null ? t1._as(t2) : t2);
        if (modificationCount !== _this._modificationCount)
          A.throwExpression(A.ConcurrentModificationError$(_this));
      }
    },
    get$isEmpty(_) {
      return this._head === this._tail;
    },
    get$length(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    get$first(_) {
      var _this = this,
        t1 = _this._head;
      if (t1 === _this._tail)
        throw A.wrapException(A.IterableElementError_noElement());
      t1 = _this._table[t1];
      return t1 == null ? _this.$ti._precomputed1._as(t1) : t1;
    },
    elementAt$1(_, index) {
      var t1, _this = this,
        $length = _this.get$length(_this);
      if (0 > index || index >= $length)
        A.throwExpression(A.IndexError$(index, _this, "index", null, $length));
      t1 = _this._table;
      t1 = t1[(_this._head + index & t1.length - 1) >>> 0];
      return t1 == null ? _this.$ti._precomputed1._as(t1) : t1;
    },
    addAll$1(_, elements) {
      var addCount, $length, t2, t3, t4, newTable, endSpace, preSpace, _this = this,
        t1 = _this.$ti;
      if (t1._eval$1("List<1>")._is(elements)) {
        addCount = elements.length;
        $length = _this.get$length(_this);
        t2 = $length + addCount;
        t3 = _this._table;
        t4 = t3.length;
        if (t2 >= t4) {
          newTable = A.List_List$filled(A.ListQueue__nextPowerOf2(t2 + (t2 >>> 1)), null, false, t1._eval$1("1?"));
          _this._tail = _this._writeToList$1(newTable);
          _this._table = newTable;
          _this._head = 0;
          B.JSArray_methods.setRange$4(newTable, $length, t2, elements, 0);
          _this._tail += addCount;
        } else {
          t1 = _this._tail;
          endSpace = t4 - t1;
          if (addCount < endSpace) {
            B.JSArray_methods.setRange$4(t3, t1, t1 + addCount, elements, 0);
            _this._tail += addCount;
          } else {
            preSpace = addCount - endSpace;
            B.JSArray_methods.setRange$4(t3, t1, t1 + endSpace, elements, 0);
            B.JSArray_methods.setRange$4(_this._table, 0, preSpace, elements, endSpace);
            _this._tail = preSpace;
          }
        }
        ++_this._modificationCount;
      } else
        for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
          _this._add$1(0, t1.get$current(t1));
    },
    toString$0(_) {
      return A.IterableBase_iterableToFullString(this, "{", "}");
    },
    removeFirst$0() {
      var t2, result, _this = this,
        t1 = _this._head;
      if (t1 === _this._tail)
        throw A.wrapException(A.IterableElementError_noElement());
      ++_this._modificationCount;
      t2 = _this._table;
      result = t2[t1];
      if (result == null)
        result = _this.$ti._precomputed1._as(result);
      t2[t1] = null;
      _this._head = (t1 + 1 & t2.length - 1) >>> 0;
      return result;
    },
    _add$1(_, element) {
      var newTable, split, _this = this,
        t1 = _this._table,
        t2 = _this._tail;
      t1[t2] = element;
      t1 = t1.length;
      t2 = (t2 + 1 & t1 - 1) >>> 0;
      _this._tail = t2;
      if (_this._head === t2) {
        newTable = A.List_List$filled(t1 * 2, null, false, _this.$ti._eval$1("1?"));
        t1 = _this._table;
        t2 = _this._head;
        split = t1.length - t2;
        B.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
        B.JSArray_methods.setRange$4(newTable, split, split + _this._head, _this._table, 0);
        _this._head = 0;
        _this._tail = _this._table.length;
        _this._table = newTable;
      }
      ++_this._modificationCount;
    },
    _writeToList$1(target) {
      var $length, firstPartSize, _this = this,
        t1 = _this._head,
        t2 = _this._tail,
        t3 = _this._table;
      if (t1 <= t2) {
        $length = t2 - t1;
        B.JSArray_methods.setRange$4(target, 0, $length, t3, t1);
        return $length;
      } else {
        firstPartSize = t3.length - t1;
        B.JSArray_methods.setRange$4(target, 0, firstPartSize, t3, t1);
        B.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + _this._tail, _this._table, 0);
        return _this._tail + firstPartSize;
      }
    }
  };
  A._ListQueueIterator.prototype = {
    get$current(_) {
      var t1 = this._collection$_current;
      return t1 == null ? A._instanceType(this)._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._queue;
      if (_this._modificationCount !== t1._modificationCount)
        A.throwExpression(A.ConcurrentModificationError$(t1));
      t2 = _this._collection$_position;
      if (t2 === _this._end) {
        _this._collection$_current = null;
        return false;
      }
      t1 = t1._table;
      _this._collection$_current = t1[t2];
      _this._collection$_position = (t2 + 1 & t1.length - 1) >>> 0;
      return true;
    }
  };
  A.SetMixin.prototype = {
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty(_) {
      return this.get$length(this) !== 0;
    },
    addAll$1(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        this.add$1(0, t1.get$current(t1));
    },
    removeAll$1(elements) {
      var t1, _i;
      for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, A.throwConcurrentModificationError)(elements), ++_i)
        this.remove$1(0, elements[_i]);
    },
    map$1$1(_, f, $T) {
      return new A.EfficientLengthMappedIterable(this, f, A._instanceType(this)._eval$1("@<SetMixin.E>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
    },
    toString$0(_) {
      return A.IterableBase_iterableToFullString(this, "{", "}");
    },
    forEach$1(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current(t1));
    },
    any$1(_, test) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (test.call$1(t1.get$current(t1)))
          return true;
      return false;
    },
    take$1(_, n) {
      return A.TakeIterable_TakeIterable(this, n, A._instanceType(this)._eval$1("SetMixin.E"));
    },
    skip$1(_, n) {
      return A.SkipIterable_SkipIterable(this, n, A._instanceType(this)._eval$1("SetMixin.E"));
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current(it);
    },
    elementAt$1(_, index) {
      var t1, elementIndex, element, _s5_ = "index";
      A.checkNotNullable(index, _s5_, type$.int);
      A.RangeError_checkNotNegative(index, _s5_);
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw A.wrapException(A.IndexError$(index, this, _s5_, null, elementIndex));
    }
  };
  A._SetBase.prototype = {
    difference$1(other) {
      var t1, element,
        result = this._newSet$0();
      for (t1 = this.get$iterator(this); t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (!other.contains$1(0, element))
          result.add$1(0, element);
      }
      return result;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  A._UnmodifiableSetMixin.prototype = {
    add$1(_, value) {
      return A._UnmodifiableSetMixin__throwUnmodifiable();
    },
    remove$1(_, value) {
      return A._UnmodifiableSetMixin__throwUnmodifiable();
    }
  };
  A._UnmodifiableSet.prototype = {
    _newSet$0() {
      return A.LinkedHashSet_LinkedHashSet(this.$ti._precomputed1);
    },
    contains$1(_, element) {
      return J.containsKey$1$x(this._collection$_map, element);
    },
    get$iterator(_) {
      return J.get$iterator$ax(J.get$keys$x(this._collection$_map));
    },
    get$length(_) {
      return J.get$length$asx(this._collection$_map);
    }
  };
  A._ListBase_Object_ListMixin.prototype = {};
  A._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  A.__SetBase_Object_SetMixin.prototype = {};
  A.__UnmodifiableSet__SetBase__UnmodifiableSetMixin.prototype = {};
  A._JsonMap.prototype = {
    $index(_, key) {
      var result,
        t1 = this._processed;
      if (t1 == null)
        return this._data.$index(0, key);
      else if (typeof key != "string")
        return null;
      else {
        result = t1[key];
        return typeof result == "undefined" ? this._process$1(key) : result;
      }
    },
    get$length(_) {
      return this._processed == null ? this._data._length : this._convert$_computeKeys$0().length;
    },
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$keys(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        return new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>"));
      }
      return new A._JsonMapKeyIterable(this);
    },
    $indexSet(_, key, value) {
      var processed, original, _this = this;
      if (_this._processed == null)
        _this._data.$indexSet(0, key, value);
      else if (_this.containsKey$1(0, key)) {
        processed = _this._processed;
        processed[key] = value;
        original = _this._original;
        if (original == null ? processed != null : original !== processed)
          original[key] = null;
      } else
        _this._upgrade$0().$indexSet(0, key, value);
    },
    containsKey$1(_, key) {
      if (this._processed == null)
        return this._data.containsKey$1(0, key);
      if (typeof key != "string")
        return false;
      return Object.prototype.hasOwnProperty.call(this._original, key);
    },
    putIfAbsent$2(_, key, ifAbsent) {
      var value;
      if (this.containsKey$1(0, key))
        return this.$index(0, key);
      value = ifAbsent.call$0();
      this.$indexSet(0, key, value);
      return value;
    },
    remove$1(_, key) {
      if (this._processed != null && !this.containsKey$1(0, key))
        return null;
      return this._upgrade$0().remove$1(0, key);
    },
    forEach$1(_, f) {
      var keys, i, key, value, _this = this;
      if (_this._processed == null)
        return _this._data.forEach$1(0, f);
      keys = _this._convert$_computeKeys$0();
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        value = _this._processed[key];
        if (typeof value == "undefined") {
          value = A._convertJsonToDartLazy(_this._original[key]);
          _this._processed[key] = value;
        }
        f.call$2(key, value);
        if (keys !== _this._data)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
    },
    _convert$_computeKeys$0() {
      var keys = this._data;
      if (keys == null)
        keys = this._data = A._setArrayType(Object.keys(this._original), type$.JSArray_String);
      return keys;
    },
    _upgrade$0() {
      var result, keys, i, t1, key, _this = this;
      if (_this._processed == null)
        return _this._data;
      result = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      keys = _this._convert$_computeKeys$0();
      for (i = 0; t1 = keys.length, i < t1; ++i) {
        key = keys[i];
        result.$indexSet(0, key, _this.$index(0, key));
      }
      if (t1 === 0)
        keys.push("");
      else
        B.JSArray_methods.set$length(keys, 0);
      _this._original = _this._processed = null;
      return _this._data = result;
    },
    _process$1(key) {
      var result;
      if (!Object.prototype.hasOwnProperty.call(this._original, key))
        return null;
      result = A._convertJsonToDartLazy(this._original[key]);
      return this._processed[key] = result;
    }
  };
  A._JsonMapKeyIterable.prototype = {
    get$length(_) {
      var t1 = this._convert$_parent;
      return t1.get$length(t1);
    },
    elementAt$1(_, index) {
      var t1 = this._convert$_parent;
      return t1._processed == null ? t1.get$keys(t1).elementAt$1(0, index) : t1._convert$_computeKeys$0()[index];
    },
    get$iterator(_) {
      var t1 = this._convert$_parent;
      if (t1._processed == null) {
        t1 = t1.get$keys(t1);
        t1 = t1.get$iterator(t1);
      } else {
        t1 = t1._convert$_computeKeys$0();
        t1 = new J.ArrayIterator(t1, t1.length);
      }
      return t1;
    },
    contains$1(_, key) {
      return this._convert$_parent.containsKey$1(0, key);
    }
  };
  A.Utf8Decoder__decoder_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 30
  };
  A.Utf8Decoder__decoderNonfatal_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: false});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 30
  };
  A.Base64Codec.prototype = {
    normalize$3(_, source, start, end) {
      var inverseAlphabet, i, sliceStart, buffer, firstPadding, firstPaddingSourceIndex, paddingCount, i0, char, i1, char0, value, t1, t2, endLength, $length,
        _s31_ = "Invalid base64 encoding length ";
      end = A.RangeError_checkValidRange(start, end, source.length);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      for (i = start, sliceStart = i, buffer = null, firstPadding = -1, firstPaddingSourceIndex = -1, paddingCount = 0; i < end; i = i0) {
        i0 = i + 1;
        char = B.JSString_methods._codeUnitAt$1(source, i);
        if (char === 37) {
          i1 = i0 + 2;
          if (i1 <= end) {
            char0 = A.parseHexByte(source, i0);
            if (char0 === 37)
              char0 = -1;
            i0 = i1;
          } else
            char0 = -1;
        } else
          char0 = char;
        if (0 <= char0 && char0 <= 127) {
          value = inverseAlphabet[char0];
          if (value >= 0) {
            char0 = B.JSString_methods.codeUnitAt$1("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", value);
            if (char0 === char)
              continue;
            char = char0;
          } else {
            if (value === -1) {
              if (firstPadding < 0) {
                t1 = buffer == null ? null : buffer._contents.length;
                if (t1 == null)
                  t1 = 0;
                firstPadding = t1 + (i - sliceStart);
                firstPaddingSourceIndex = i;
              }
              ++paddingCount;
              if (char === 61)
                continue;
            }
            char = char0;
          }
          if (value !== -2) {
            if (buffer == null) {
              buffer = new A.StringBuffer("");
              t1 = buffer;
            } else
              t1 = buffer;
            t2 = t1._contents += B.JSString_methods.substring$2(source, sliceStart, i);
            t1._contents = t2 + A.Primitives_stringFromCharCode(char);
            sliceStart = i0;
            continue;
          }
        }
        throw A.wrapException(A.FormatException$("Invalid base64 data", source, i));
      }
      if (buffer != null) {
        t1 = buffer._contents += B.JSString_methods.substring$2(source, sliceStart, end);
        t2 = t1.length;
        if (firstPadding >= 0)
          A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, t2);
        else {
          endLength = B.JSInt_methods.$mod(t2 - 1, 4) + 1;
          if (endLength === 1)
            throw A.wrapException(A.FormatException$(_s31_, source, end));
          for (; endLength < 4;) {
            t1 += "=";
            buffer._contents = t1;
            ++endLength;
          }
        }
        t1 = buffer._contents;
        return B.JSString_methods.replaceRange$3(source, start, end, t1.charCodeAt(0) == 0 ? t1 : t1);
      }
      $length = end - start;
      if (firstPadding >= 0)
        A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, $length);
      else {
        endLength = B.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw A.wrapException(A.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = B.JSString_methods.replaceRange$3(source, end, end, endLength === 2 ? "==" : "=");
      }
      return source;
    }
  };
  A.Base64Encoder.prototype = {};
  A.Codec.prototype = {};
  A.Converter.prototype = {};
  A.Encoding.prototype = {};
  A.JsonUnsupportedObjectError.prototype = {
    toString$0(_) {
      var safeString = A.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  A.JsonCyclicError.prototype = {
    toString$0(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  A.JsonCodec.prototype = {
    decode$1(_, source) {
      var t1 = A._parseJson(source, this.get$decoder()._reviver);
      return t1;
    },
    encode$1(value) {
      var t1 = A._JsonStringStringifier_stringify(value, this.get$encoder()._toEncodable, null);
      return t1;
    },
    get$encoder() {
      return B.JsonEncoder_null;
    },
    get$decoder() {
      return B.JsonDecoder_null;
    }
  };
  A.JsonEncoder.prototype = {};
  A.JsonDecoder.prototype = {};
  A._JsonStringifier.prototype = {
    writeStringContent$1(s) {
      var t1, offset, i, charCode, t2, t3,
        $length = s.length;
      for (t1 = this._sink, offset = 0, i = 0; i < $length; ++i) {
        charCode = B.JSString_methods._codeUnitAt$1(s, i);
        if (charCode > 92) {
          if (charCode >= 55296) {
            t2 = charCode & 64512;
            if (t2 === 55296) {
              t3 = i + 1;
              t3 = !(t3 < $length && (B.JSString_methods._codeUnitAt$1(s, t3) & 64512) === 56320);
            } else
              t3 = false;
            if (!t3)
              if (t2 === 56320) {
                t2 = i - 1;
                t2 = !(t2 >= 0 && (B.JSString_methods.codeUnitAt$1(s, t2) & 64512) === 55296);
              } else
                t2 = false;
            else
              t2 = true;
            if (t2) {
              if (i > offset)
                t1._contents += B.JSString_methods.substring$2(s, offset, i);
              offset = i + 1;
              t2 = t1._contents += A.Primitives_stringFromCharCode(92);
              t2 += A.Primitives_stringFromCharCode(117);
              t1._contents = t2;
              t2 += A.Primitives_stringFromCharCode(100);
              t1._contents = t2;
              t3 = charCode >>> 8 & 15;
              t2 += A.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
              t1._contents = t2;
              t3 = charCode >>> 4 & 15;
              t2 += A.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
              t1._contents = t2;
              t3 = charCode & 15;
              t1._contents = t2 + A.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
            }
          }
          continue;
        }
        if (charCode < 32) {
          if (i > offset)
            t1._contents += B.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2 = t1._contents += A.Primitives_stringFromCharCode(92);
          switch (charCode) {
            case 8:
              t1._contents = t2 + A.Primitives_stringFromCharCode(98);
              break;
            case 9:
              t1._contents = t2 + A.Primitives_stringFromCharCode(116);
              break;
            case 10:
              t1._contents = t2 + A.Primitives_stringFromCharCode(110);
              break;
            case 12:
              t1._contents = t2 + A.Primitives_stringFromCharCode(102);
              break;
            case 13:
              t1._contents = t2 + A.Primitives_stringFromCharCode(114);
              break;
            default:
              t2 += A.Primitives_stringFromCharCode(117);
              t1._contents = t2;
              t2 += A.Primitives_stringFromCharCode(48);
              t1._contents = t2;
              t2 += A.Primitives_stringFromCharCode(48);
              t1._contents = t2;
              t3 = charCode >>> 4 & 15;
              t2 += A.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
              t1._contents = t2;
              t3 = charCode & 15;
              t1._contents = t2 + A.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            t1._contents += B.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2 = t1._contents += A.Primitives_stringFromCharCode(92);
          t1._contents = t2 + A.Primitives_stringFromCharCode(charCode);
        }
      }
      if (offset === 0)
        t1._contents += s;
      else if (offset < $length)
        t1._contents += B.JSString_methods.substring$2(s, offset, $length);
    },
    _checkCycle$1(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw A.wrapException(new A.JsonCyclicError(object, null));
      }
      t1.push(object);
    },
    writeObject$1(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = A.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw A.wrapException(t1);
        }
        _this._seen.pop();
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw A.wrapException(t1);
      }
    },
    writeJsonValue$1(object) {
      var t1, success, _this = this;
      if (typeof object == "number") {
        if (!isFinite(object))
          return false;
        _this._sink._contents += B.JSNumber_methods.toString$0(object);
        return true;
      } else if (object === true) {
        _this._sink._contents += "true";
        return true;
      } else if (object === false) {
        _this._sink._contents += "false";
        return true;
      } else if (object == null) {
        _this._sink._contents += "null";
        return true;
      } else if (typeof object == "string") {
        t1 = _this._sink;
        t1._contents += '"';
        _this.writeStringContent$1(object);
        t1._contents += '"';
        return true;
      } else if (type$.List_dynamic._is(object)) {
        _this._checkCycle$1(object);
        _this.writeList$1(object);
        _this._seen.pop();
        return true;
      } else if (type$.Map_dynamic_dynamic._is(object)) {
        _this._checkCycle$1(object);
        success = _this.writeMap$1(object);
        _this._seen.pop();
        return success;
      } else
        return false;
    },
    writeList$1(list) {
      var t2, i,
        t1 = this._sink;
      t1._contents += "[";
      t2 = J.getInterceptor$asx(list);
      if (t2.get$isNotEmpty(list)) {
        this.writeObject$1(t2.$index(list, 0));
        for (i = 1; i < t2.get$length(list); ++i) {
          t1._contents += ",";
          this.writeObject$1(t2.$index(list, i));
        }
      }
      t1._contents += "]";
    },
    writeMap$1(map) {
      var t2, keyValueList, i, separator, _this = this, _box_0 = {},
        t1 = J.getInterceptor$asx(map);
      if (t1.get$isEmpty(map)) {
        _this._sink._contents += "{}";
        return true;
      }
      t2 = t1.get$length(map) * 2;
      keyValueList = A.List_List$filled(t2, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      t1.forEach$1(map, new A._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      t1 = _this._sink;
      t1._contents += "{";
      for (separator = '"'; i < t2; i += 2, separator = ',"') {
        t1._contents += separator;
        _this.writeStringContent$1(A._asString(keyValueList[i]));
        t1._contents += '":';
        _this.writeObject$1(keyValueList[i + 1]);
      }
      t1._contents += "}";
      return true;
    }
  };
  A._JsonStringifier_writeMap_closure.prototype = {
    call$2(key, value) {
      var t1, t2, t3, i;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      t3 = t2.i;
      i = t2.i = t3 + 1;
      t1[t3] = key;
      t2.i = i + 1;
      t1[i] = value;
    },
    $signature: 42
  };
  A._JsonStringStringifier.prototype = {
    get$_partialResult() {
      var t1 = this._sink._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.Utf8Codec.prototype = {
    get$name(_) {
      return "utf-8";
    },
    decode$2$allowMalformed(_, codeUnits, allowMalformed) {
      return (allowMalformed === true ? B.Utf8Decoder_true : B.Utf8Decoder_false).convert$1(codeUnits);
    },
    decode$1($receiver, codeUnits) {
      return this.decode$2$allowMalformed($receiver, codeUnits, null);
    },
    get$encoder() {
      return B.C_Utf8Encoder;
    }
  };
  A.Utf8Encoder.prototype = {
    convert$1(string) {
      var t1, encoder,
        end = A.RangeError_checkValidRange(0, null, string.length),
        $length = end - 0;
      if ($length === 0)
        return new Uint8Array(0);
      t1 = new Uint8Array($length * 3);
      encoder = new A._Utf8Encoder(t1);
      if (encoder._fillBuffer$3(string, 0, end) !== end) {
        B.JSString_methods.codeUnitAt$1(string, end - 1);
        encoder._writeReplacementCharacter$0();
      }
      return B.NativeUint8List_methods.sublist$2(t1, 0, encoder._bufferIndex);
    }
  };
  A._Utf8Encoder.prototype = {
    _writeReplacementCharacter$0() {
      var _this = this,
        t1 = _this._buffer,
        t2 = _this._bufferIndex,
        t3 = _this._bufferIndex = t2 + 1;
      t1[t2] = 239;
      t2 = _this._bufferIndex = t3 + 1;
      t1[t3] = 191;
      _this._bufferIndex = t2 + 1;
      t1[t2] = 189;
    },
    _writeSurrogate$2(leadingSurrogate, nextCodeUnit) {
      var rune, t1, t2, t3, _this = this;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
        t1 = _this._buffer;
        t2 = _this._bufferIndex;
        t3 = _this._bufferIndex = t2 + 1;
        t1[t2] = rune >>> 18 | 240;
        t2 = _this._bufferIndex = t3 + 1;
        t1[t3] = rune >>> 12 & 63 | 128;
        t3 = _this._bufferIndex = t2 + 1;
        t1[t2] = rune >>> 6 & 63 | 128;
        _this._bufferIndex = t3 + 1;
        t1[t3] = rune & 63 | 128;
        return true;
      } else {
        _this._writeReplacementCharacter$0();
        return false;
      }
    },
    _fillBuffer$3(str, start, end) {
      var t1, t2, stringIndex, codeUnit, t3, stringIndex0, t4, _this = this;
      if (start !== end && (B.JSString_methods.codeUnitAt$1(str, end - 1) & 64512) === 55296)
        --end;
      for (t1 = _this._buffer, t2 = t1.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        codeUnit = B.JSString_methods._codeUnitAt$1(str, stringIndex);
        if (codeUnit <= 127) {
          t3 = _this._bufferIndex;
          if (t3 >= t2)
            break;
          _this._bufferIndex = t3 + 1;
          t1[t3] = codeUnit;
        } else {
          t3 = codeUnit & 64512;
          if (t3 === 55296) {
            if (_this._bufferIndex + 4 > t2)
              break;
            stringIndex0 = stringIndex + 1;
            if (_this._writeSurrogate$2(codeUnit, B.JSString_methods._codeUnitAt$1(str, stringIndex0)))
              stringIndex = stringIndex0;
          } else if (t3 === 56320) {
            if (_this._bufferIndex + 3 > t2)
              break;
            _this._writeReplacementCharacter$0();
          } else if (codeUnit <= 2047) {
            t3 = _this._bufferIndex;
            t4 = t3 + 1;
            if (t4 >= t2)
              break;
            _this._bufferIndex = t4;
            t1[t3] = codeUnit >>> 6 | 192;
            _this._bufferIndex = t4 + 1;
            t1[t4] = codeUnit & 63 | 128;
          } else {
            t3 = _this._bufferIndex;
            if (t3 + 2 >= t2)
              break;
            t4 = _this._bufferIndex = t3 + 1;
            t1[t3] = codeUnit >>> 12 | 224;
            t3 = _this._bufferIndex = t4 + 1;
            t1[t4] = codeUnit >>> 6 & 63 | 128;
            _this._bufferIndex = t3 + 1;
            t1[t3] = codeUnit & 63 | 128;
          }
        }
      }
      return stringIndex;
    }
  };
  A.Utf8Decoder.prototype = {
    convert$1(codeUnits) {
      var t1 = this._allowMalformed,
        result = A.Utf8Decoder__convertIntercepted(t1, codeUnits, 0, null);
      if (result != null)
        return result;
      return new A._Utf8Decoder(t1).convertGeneral$4(codeUnits, 0, null, true);
    }
  };
  A._Utf8Decoder.prototype = {
    convertGeneral$4(codeUnits, start, maybeEnd, single) {
      var bytes, errorOffset, result, t1, message, _this = this,
        end = A.RangeError_checkValidRange(start, maybeEnd, J.get$length$asx(codeUnits));
      if (start === end)
        return "";
      if (type$.Uint8List._is(codeUnits)) {
        bytes = codeUnits;
        errorOffset = 0;
      } else {
        bytes = A._Utf8Decoder__makeUint8List(codeUnits, start, end);
        end -= start;
        errorOffset = start;
        start = 0;
      }
      result = _this._convertRecursive$4(bytes, start, end, true);
      t1 = _this._convert$_state;
      if ((t1 & 1) !== 0) {
        message = A._Utf8Decoder_errorDescription(t1);
        _this._convert$_state = 0;
        throw A.wrapException(A.FormatException$(message, codeUnits, errorOffset + _this._charOrIndex));
      }
      return result;
    },
    _convertRecursive$4(bytes, start, end, single) {
      var mid, s1, _this = this;
      if (end - start > 1000) {
        mid = B.JSInt_methods._tdivFast$1(start + end, 2);
        s1 = _this._convertRecursive$4(bytes, start, mid, false);
        if ((_this._convert$_state & 1) !== 0)
          return s1;
        return s1 + _this._convertRecursive$4(bytes, mid, end, single);
      }
      return _this.decodeGeneral$4(bytes, start, end, single);
    },
    decodeGeneral$4(bytes, start, end, single) {
      var t1, type, t2, i0, markEnd, i1, m, _this = this, _65533 = 65533,
        state = _this._convert$_state,
        char = _this._charOrIndex,
        buffer = new A.StringBuffer(""),
        i = start + 1,
        byte = bytes[start];
      $label0$0:
        for (t1 = _this.allowMalformed; true;) {
          for (; true; i = i0) {
            type = B.JSString_methods._codeUnitAt$1("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHIHHHJEEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKCCCCCCCCCCCCDCLONNNMEEEEEEEEEEE", byte) & 31;
            char = state <= 32 ? byte & 61694 >>> type : (byte & 63 | char << 6) >>> 0;
            state = B.JSString_methods._codeUnitAt$1(" \x000:XECCCCCN:lDb \x000:XECCCCCNvlDb \x000:XECCCCCN:lDb AAAAA\x00\x00\x00\x00\x00AAAAA00000AAAAA:::::AAAAAGG000AAAAA00KKKAAAAAG::::AAAAA:IIIIAAAAA000\x800AAAAA\x00\x00\x00\x00 AAAAA", state + type);
            if (state === 0) {
              buffer._contents += A.Primitives_stringFromCharCode(char);
              if (i === end)
                break $label0$0;
              break;
            } else if ((state & 1) !== 0) {
              if (t1)
                switch (state) {
                  case 69:
                  case 67:
                    buffer._contents += A.Primitives_stringFromCharCode(_65533);
                    break;
                  case 65:
                    buffer._contents += A.Primitives_stringFromCharCode(_65533);
                    --i;
                    break;
                  default:
                    t2 = buffer._contents += A.Primitives_stringFromCharCode(_65533);
                    buffer._contents = t2 + A.Primitives_stringFromCharCode(_65533);
                    break;
                }
              else {
                _this._convert$_state = state;
                _this._charOrIndex = i - 1;
                return "";
              }
              state = 0;
            }
            if (i === end)
              break $label0$0;
            i0 = i + 1;
            byte = bytes[i];
          }
          i0 = i + 1;
          byte = bytes[i];
          if (byte < 128) {
            while (true) {
              if (!(i0 < end)) {
                markEnd = end;
                break;
              }
              i1 = i0 + 1;
              byte = bytes[i0];
              if (byte >= 128) {
                markEnd = i1 - 1;
                i0 = i1;
                break;
              }
              i0 = i1;
            }
            if (markEnd - i < 20)
              for (m = i; m < markEnd; ++m)
                buffer._contents += A.Primitives_stringFromCharCode(bytes[m]);
            else
              buffer._contents += A.String_String$fromCharCodes(bytes, i, markEnd);
            if (markEnd === end)
              break $label0$0;
            i = i0;
          } else
            i = i0;
        }
      if (single && state > 32)
        if (t1)
          buffer._contents += A.Primitives_stringFromCharCode(_65533);
        else {
          _this._convert$_state = 77;
          _this._charOrIndex = end;
          return "";
        }
      _this._convert$_state = state;
      _this._charOrIndex = char;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.NoSuchMethodError_toString_closure.prototype = {
    call$2(key, value) {
      var t1 = this.sb,
        t2 = this._box_0,
        t3 = t1._contents += t2.comma;
      t3 += key.__internal$_name;
      t1._contents = t3;
      t1._contents = t3 + ": ";
      t1._contents += A.Error_safeToString(value);
      t2.comma = ", ";
    },
    $signature: 97
  };
  A.Comparable.prototype = {};
  A.DateTime.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.DateTime && this._core$_value === other._core$_value && this.isUtc === other.isUtc;
    },
    compareTo$1(_, other) {
      return B.JSInt_methods.compareTo$1(this._core$_value, other._core$_value);
    },
    get$hashCode(_) {
      var t1 = this._core$_value;
      return (t1 ^ B.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toString$0(_) {
      var _this = this,
        y = A.DateTime__fourDigits(A.Primitives_getYear(_this)),
        m = A.DateTime__twoDigits(A.Primitives_getMonth(_this)),
        d = A.DateTime__twoDigits(A.Primitives_getDay(_this)),
        h = A.DateTime__twoDigits(A.Primitives_getHours(_this)),
        min = A.DateTime__twoDigits(A.Primitives_getMinutes(_this)),
        sec = A.DateTime__twoDigits(A.Primitives_getSeconds(_this)),
        ms = A.DateTime__threeDigits(A.Primitives_getMilliseconds(_this));
      if (_this.isUtc)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    }
  };
  A.Duration.prototype = {
    $add(_, other) {
      return new A.Duration(this._duration + other._duration);
    },
    $sub(_, other) {
      return new A.Duration(this._duration - other._duration);
    },
    $mul(_, factor) {
      return new A.Duration(B.JSNumber_methods.round$0(this._duration * factor));
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Duration && this._duration === other._duration;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this._duration);
    },
    compareTo$1(_, other) {
      return B.JSInt_methods.compareTo$1(this._duration, other._duration);
    },
    toString$0(_) {
      var minutes, minutesPadding, seconds, secondsPadding, paddedMicroseconds,
        microseconds = this._duration,
        hours = B.JSInt_methods._tdivFast$1(microseconds, 3600000000);
      microseconds %= 3600000000;
      if (microseconds < 0)
        microseconds = -microseconds;
      minutes = B.JSInt_methods._tdivFast$1(microseconds, 60000000);
      microseconds %= 60000000;
      minutesPadding = minutes < 10 ? "0" : "";
      seconds = B.JSInt_methods._tdivFast$1(microseconds, 1000000);
      secondsPadding = seconds < 10 ? "0" : "";
      paddedMicroseconds = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(microseconds % 1000000), 6, "0");
      return "" + hours + ":" + minutesPadding + minutes + ":" + secondsPadding + seconds + "." + paddedMicroseconds;
    }
  };
  A._Enum.prototype = {$isEnum: 1};
  A.Error.prototype = {
    get$stackTrace() {
      return A.getTraceFromException(this.$thrownJsError);
    }
  };
  A.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.Error_safeToString(t1);
      return "Assertion failed";
    },
    get$message(receiver) {
      return this.message;
    }
  };
  A.TypeError.prototype = {};
  A.NullThrownError.prototype = {
    toString$0(_) {
      return "Throw of null.";
    }
  };
  A.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var explanation, errorValue, _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + A.S(message),
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = A.Error_safeToString(_this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    },
    get$name(receiver) {
      return this.name;
    }
  };
  A.RangeError.prototype = {
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
      return explanation;
    }
  };
  A.IndexError.prototype = {
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      if (this.invalidValue < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.NoSuchMethodError.prototype = {
    toString$0(_) {
      var $arguments, t1, _i, t2, t3, argument, receiverText, actualParameters, _this = this, _box_0 = {},
        sb = new A.StringBuffer("");
      _box_0.comma = "";
      $arguments = _this._core$_arguments;
      for (t1 = $arguments.length, _i = 0, t2 = "", t3 = ""; _i < t1; ++_i, t3 = ", ") {
        argument = $arguments[_i];
        sb._contents = t2 + t3;
        t2 = sb._contents += A.Error_safeToString(argument);
        _box_0.comma = ", ";
      }
      _this._namedArguments.forEach$1(0, new A.NoSuchMethodError_toString_closure(_box_0, sb));
      receiverText = A.Error_safeToString(_this._core$_receiver);
      actualParameters = sb.toString$0(0);
      t1 = "NoSuchMethodError: method not found: '" + _this._memberName.__internal$_name + "'\nReceiver: " + receiverText + "\nArguments: [" + actualParameters + "]";
      return t1;
    }
  };
  A.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  A.UnimplementedError.prototype = {
    toString$0(_) {
      var message = this.message;
      return message != null ? "UnimplementedError: " + message : "UnimplementedError";
    }
  };
  A.StateError.prototype = {
    toString$0(_) {
      return "Bad state: " + this.message;
    }
  };
  A.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + A.Error_safeToString(t1) + ".";
    }
  };
  A.OutOfMemoryError.prototype = {
    toString$0(_) {
      return "Out of Memory";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.StackOverflowError.prototype = {
    toString$0(_) {
      return "Stack Overflow";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.CyclicInitializationError.prototype = {
    toString$0(_) {
      var t1 = "Reading static variable '" + this.variableName + "' during its initialization";
      return t1;
    }
  };
  A._Exception.prototype = {
    toString$0(_) {
      var message = this.message;
      if (message == null)
        return "Exception";
      return "Exception: " + A.S(message);
    },
    $isException: 1
  };
  A.FormatException.prototype = {
    toString$0(_) {
      var t1, lineNum, lineStart, previousCharWasCR, i, char, lineEnd, end, start, prefix, postfix, slice,
        message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        offset = this.offset,
        source = this.source;
      if (typeof source == "string") {
        if (offset != null)
          t1 = offset < 0 || offset > source.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          if (source.length > 78)
            source = B.JSString_methods.substring$2(source, 0, 75) + "...";
          return report + "\n" + source;
        }
        for (lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          char = B.JSString_methods._codeUnitAt$1(source, i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        lineEnd = source.length;
        for (i = offset; i < lineEnd; ++i) {
          char = B.JSString_methods.codeUnitAt$1(source, i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
            prefix = "";
            postfix = "...";
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = "...";
            }
            prefix = "...";
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        slice = B.JSString_methods.substring$2(source, start, end);
        return report + prefix + slice + postfix + "\n" + B.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + A.S(offset) + ")") : report;
    },
    $isException: 1
  };
  A.Iterable.prototype = {
    cast$1$0(_, $R) {
      return A.CastIterable_CastIterable(this, A._instanceType(this)._eval$1("Iterable.E"), $R);
    },
    followedBy$1(_, other) {
      var _this = this,
        t1 = A._instanceType(_this);
      if (t1._eval$1("EfficientLengthIterable<Iterable.E>")._is(_this))
        return A.FollowedByIterable_FollowedByIterable$firstEfficient(_this, other, t1._eval$1("Iterable.E"));
      return new A.FollowedByIterable(_this, other, t1._eval$1("FollowedByIterable<Iterable.E>"));
    },
    map$1$1(_, toElement, $T) {
      return A.MappedIterable_MappedIterable(this, toElement, A._instanceType(this)._eval$1("Iterable.E"), $T);
    },
    where$1(_, test) {
      return new A.WhereIterable(this, test, A._instanceType(this)._eval$1("WhereIterable<Iterable.E>"));
    },
    contains$1(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(t1), element))
          return true;
      return false;
    },
    forEach$1(_, action) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        action.call$1(t1.get$current(t1));
    },
    join$1(_, separator) {
      var t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      if (separator === "") {
        t1 = "";
        do
          t1 += A.S(J.toString$0$(iterator.get$current(iterator)));
        while (iterator.moveNext$0());
      } else {
        t1 = "" + A.S(J.toString$0$(iterator.get$current(iterator)));
        for (; iterator.moveNext$0();)
          t1 = t1 + separator + A.S(J.toString$0$(iterator.get$current(iterator)));
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    join$0($receiver) {
      return this.join$1($receiver, "");
    },
    any$1(_, test) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (test.call$1(t1.get$current(t1)))
          return true;
      return false;
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, growable, A._instanceType(this)._eval$1("Iterable.E"));
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty(_) {
      return !this.get$isEmpty(this);
    },
    take$1(_, count) {
      return A.TakeIterable_TakeIterable(this, count, A._instanceType(this)._eval$1("Iterable.E"));
    },
    skip$1(_, count) {
      return A.SkipIterable_SkipIterable(this, count, A._instanceType(this)._eval$1("Iterable.E"));
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current(it);
    },
    get$single(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      result = it.get$current(it);
      if (it.moveNext$0())
        throw A.wrapException(A.IterableElementError_tooMany());
      return result;
    },
    firstWhere$2$orElse(_, test, orElse) {
      var t1, element;
      for (t1 = this.get$iterator(this); t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (test.call$1(element))
          return element;
      }
      return orElse.call$0();
    },
    elementAt$1(_, index) {
      var t1, elementIndex, element;
      A.RangeError_checkNotNegative(index, "index");
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw A.wrapException(A.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0(_) {
      return A.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  A.Iterator.prototype = {};
  A.MapEntry.prototype = {
    toString$0(_) {
      return "MapEntry(" + A.S(this.key) + ": " + A.S(this.value) + ")";
    }
  };
  A.Null.prototype = {
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0(_) {
      return "null";
    }
  };
  A.Object.prototype = {$isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return "Instance of '" + A.Primitives_objectTypeName(this) + "'";
    },
    noSuchMethod$1(_, invocation) {
      throw A.wrapException(A.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    get$runtimeType(_) {
      return A.getRuntimeType(this);
    },
    toString() {
      return this.toString$0(this);
    }
  };
  A._StringStackTrace.prototype = {
    toString$0(_) {
      return "";
    },
    $isStackTrace: 1
  };
  A.Stopwatch.prototype = {
    get$elapsedMicroseconds() {
      var ticks = this.get$elapsedTicks();
      if ($.$get$Stopwatch__frequency() === 1000000)
        return ticks;
      return ticks * 1000;
    },
    get$elapsedMilliseconds() {
      var ticks = this.get$elapsedTicks();
      if ($.$get$Stopwatch__frequency() === 1000)
        return ticks;
      return B.JSInt_methods._tdivFast$1(ticks, 1000);
    },
    start$0(_) {
      var _this = this,
        $stop = _this._stop;
      if ($stop != null) {
        _this._start = _this._start + ($.Primitives_timerTicks.call$0() - $stop);
        _this._stop = null;
      }
    },
    reset$0(_) {
      var t1 = this._stop;
      this._start = t1 == null ? $.Primitives_timerTicks.call$0() : t1;
    },
    get$elapsedTicks() {
      var t1 = this._stop;
      if (t1 == null)
        t1 = $.Primitives_timerTicks.call$0();
      return t1 - this._start;
    }
  };
  A.RuneIterator.prototype = {
    get$current(_) {
      return this._currentCodePoint;
    },
    moveNext$0() {
      var codeUnit, nextPosition, nextCodeUnit, _this = this,
        t1 = _this._core$_position = _this._nextPosition,
        t2 = _this.string,
        t3 = t2.length;
      if (t1 === t3) {
        _this._currentCodePoint = -1;
        return false;
      }
      codeUnit = B.JSString_methods._codeUnitAt$1(t2, t1);
      nextPosition = t1 + 1;
      if ((codeUnit & 64512) === 55296 && nextPosition < t3) {
        nextCodeUnit = B.JSString_methods._codeUnitAt$1(t2, nextPosition);
        if ((nextCodeUnit & 64512) === 56320) {
          _this._nextPosition = nextPosition + 1;
          _this._currentCodePoint = A._combineSurrogatePair(codeUnit, nextCodeUnit);
          return true;
        }
      }
      _this._nextPosition = nextPosition;
      _this._currentCodePoint = codeUnit;
      return true;
    }
  };
  A.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    writeln$1(obj) {
      this._contents += A.S(obj) + "\n";
    },
    writeln$0() {
      return this.writeln$1("");
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.Uri__parseIPv4Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv4 address, " + msg, this.host, position));
    },
    $signature: 99
  };
  A.Uri_parseIPv6Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv6 address, " + msg, this.host, position));
    },
    $signature: 100
  };
  A.Uri_parseIPv6Address_parseHex.prototype = {
    call$2(start, end) {
      var value;
      if (end - start > 4)
        this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = A.int_parse(B.JSString_methods.substring$2(this.host, start, end), 16);
      if (value < 0 || value > 65535)
        this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    $signature: 101
  };
  A._Uri.prototype = {
    get$_text() {
      var t1, t2, t3, t4, _this = this,
        value = _this.___Uri__text;
      if (value === $) {
        t1 = _this.scheme;
        t2 = t1.length !== 0 ? "" + t1 + ":" : "";
        t3 = _this._host;
        t4 = t3 == null;
        if (!t4 || t1 === "file") {
          t1 = t2 + "//";
          t2 = _this._userInfo;
          if (t2.length !== 0)
            t1 = t1 + t2 + "@";
          if (!t4)
            t1 += t3;
          t2 = _this._port;
          if (t2 != null)
            t1 = t1 + ":" + A.S(t2);
        } else
          t1 = t2;
        t1 += _this.path;
        t2 = _this._query;
        if (t2 != null)
          t1 = t1 + "?" + t2;
        t2 = _this._fragment;
        if (t2 != null)
          t1 = t1 + "#" + t2;
        A._lateInitializeOnceCheck(value, "_text");
        value = _this.___Uri__text = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return value;
    },
    get$pathSegments() {
      var pathToSplit, result, _this = this,
        value = _this.___Uri_pathSegments;
      if (value === $) {
        pathToSplit = _this.path;
        if (pathToSplit.length !== 0 && B.JSString_methods._codeUnitAt$1(pathToSplit, 0) === 47)
          pathToSplit = B.JSString_methods.substring$1(pathToSplit, 1);
        result = pathToSplit.length === 0 ? B.List_empty0 : A.List_List$unmodifiable(new A.MappedListIterable(A._setArrayType(pathToSplit.split("/"), type$.JSArray_String), A.core_Uri_decodeComponent$closure(), type$.MappedListIterable_String_dynamic), type$.String);
        A._lateInitializeOnceCheck(_this.___Uri_pathSegments, "pathSegments");
        value = _this.___Uri_pathSegments = result;
      }
      return value;
    },
    get$hashCode(_) {
      var result, _this = this,
        value = _this.___Uri_hashCode;
      if (value === $) {
        result = B.JSString_methods.get$hashCode(_this.get$_text());
        A._lateInitializeOnceCheck(_this.___Uri_hashCode, "hashCode");
        _this.___Uri_hashCode = result;
        value = result;
      }
      return value;
    },
    get$userInfo() {
      return this._userInfo;
    },
    get$host(_) {
      var host = this._host;
      if (host == null)
        return "";
      if (B.JSString_methods.startsWith$1(host, "["))
        return B.JSString_methods.substring$2(host, 1, host.length - 1);
      return host;
    },
    get$port(_) {
      var t1 = this._port;
      return t1 == null ? A._Uri__defaultPort(this.scheme) : t1;
    },
    get$query(_) {
      var t1 = this._query;
      return t1 == null ? "" : t1;
    },
    get$fragment() {
      var t1 = this._fragment;
      return t1 == null ? "" : t1;
    },
    get$hasScheme() {
      return this.scheme.length !== 0;
    },
    get$hasAuthority() {
      return this._host != null;
    },
    get$hasQuery() {
      return this._query != null;
    },
    get$hasFragment() {
      return this._fragment != null;
    },
    toString$0(_) {
      return this.get$_text();
    },
    $eq(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (type$.Uri._is(other))
        if (_this.scheme === other.get$scheme())
          if (_this._host != null === other.get$hasAuthority())
            if (_this._userInfo === other.get$userInfo())
              if (_this.get$host(_this) === other.get$host(other))
                if (_this.get$port(_this) === other.get$port(other))
                  if (_this.path === other.get$path(other)) {
                    t1 = _this._query;
                    t2 = t1 == null;
                    if (!t2 === other.get$hasQuery()) {
                      if (t2)
                        t1 = "";
                      if (t1 === other.get$query(other)) {
                        t1 = _this._fragment;
                        t2 = t1 == null;
                        if (!t2 === other.get$hasFragment()) {
                          if (t2)
                            t1 = "";
                          t1 = t1 === other.get$fragment();
                        } else
                          t1 = false;
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    $isUri: 1,
    get$scheme() {
      return this.scheme;
    },
    get$path(receiver) {
      return this.path;
    }
  };
  A._Uri__makeQuery_writeParameter.prototype = {
    call$2(key, value) {
      var t1 = this.result,
        t2 = this._box_0;
      t1._contents += t2.separator;
      t2.separator = "&";
      t2 = t1._contents += A._Uri__uriEncode(B.List_nxB, key, B.C_Utf8Codec, true);
      if (value != null && value.length !== 0) {
        t1._contents = t2 + "=";
        t1._contents += A._Uri__uriEncode(B.List_nxB, value, B.C_Utf8Codec, true);
      }
    },
    $signature: 102
  };
  A._Uri__makeQuery_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      if (value == null || typeof value == "string")
        this.writeParameter.call$2(key, value);
      else
        for (t1 = J.get$iterator$ax(value), t2 = this.writeParameter; t1.moveNext$0();)
          t2.call$2(key, t1.get$current(t1));
    },
    $signature: 11
  };
  A.UriData.prototype = {
    get$uri() {
      var t2, queryIndex, end, query, _this = this, _null = null,
        t1 = _this._uriCache;
      if (t1 == null) {
        t1 = _this._text;
        t2 = _this._separatorIndices[0] + 1;
        queryIndex = B.JSString_methods.indexOf$2(t1, "?", t2);
        end = t1.length;
        if (queryIndex >= 0) {
          query = A._Uri__normalizeOrSubstring(t1, queryIndex + 1, end, B.List_CVk, false);
          end = queryIndex;
        } else
          query = _null;
        t1 = _this._uriCache = new A._DataUri("data", "", _null, _null, A._Uri__normalizeOrSubstring(t1, t2, end, B.List_qg4, false), query, _null);
      }
      return t1;
    },
    toString$0(_) {
      var t1 = this._text;
      return this._separatorIndices[0] === -1 ? "data:" + t1 : t1;
    }
  };
  A._createTables_build.prototype = {
    call$2(state, defaultTransition) {
      var t1 = this.tables[state];
      B.NativeUint8List_methods.fillRange$3(t1, 0, 96, defaultTransition);
      return t1;
    },
    $signature: 103
  };
  A._createTables_setChars.prototype = {
    call$3(target, chars, transition) {
      var t1, i;
      for (t1 = chars.length, i = 0; i < t1; ++i)
        target[B.JSString_methods._codeUnitAt$1(chars, i) ^ 96] = transition;
    },
    $signature: 53
  };
  A._createTables_setRange.prototype = {
    call$3(target, range, transition) {
      var i, n;
      for (i = B.JSString_methods._codeUnitAt$1(range, 0), n = B.JSString_methods._codeUnitAt$1(range, 1); i <= n; ++i)
        target[(i ^ 96) >>> 0] = transition;
    },
    $signature: 53
  };
  A._SimpleUri.prototype = {
    get$hasScheme() {
      return this._schemeEnd > 0;
    },
    get$hasAuthority() {
      return this._hostStart > 0;
    },
    get$hasPort() {
      return this._hostStart > 0 && this._portStart + 1 < this._pathStart;
    },
    get$hasQuery() {
      return this._queryStart < this._fragmentStart;
    },
    get$hasFragment() {
      return this._fragmentStart < this._uri.length;
    },
    get$scheme() {
      var t1 = this._schemeCache;
      return t1 == null ? this._schemeCache = this._computeScheme$0() : t1;
    },
    _computeScheme$0() {
      var t2, _this = this,
        t1 = _this._schemeEnd;
      if (t1 <= 0)
        return "";
      t2 = t1 === 4;
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return "http";
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return "https";
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "file"))
        return "file";
      if (t1 === 7 && B.JSString_methods.startsWith$1(_this._uri, "package"))
        return "package";
      return B.JSString_methods.substring$2(_this._uri, 0, t1);
    },
    get$userInfo() {
      var t1 = this._hostStart,
        t2 = this._schemeEnd + 3;
      return t1 > t2 ? B.JSString_methods.substring$2(this._uri, t2, t1 - 1) : "";
    },
    get$host(_) {
      var t1 = this._hostStart;
      return t1 > 0 ? B.JSString_methods.substring$2(this._uri, t1, this._portStart) : "";
    },
    get$port(_) {
      var t1, _this = this;
      if (_this.get$hasPort())
        return A.int_parse(B.JSString_methods.substring$2(_this._uri, _this._portStart + 1, _this._pathStart), null);
      t1 = _this._schemeEnd;
      if (t1 === 4 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return 80;
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return 443;
      return 0;
    },
    get$path(_) {
      return B.JSString_methods.substring$2(this._uri, this._pathStart, this._queryStart);
    },
    get$query(_) {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      return t1 < t2 ? B.JSString_methods.substring$2(this._uri, t1 + 1, t2) : "";
    },
    get$fragment() {
      var t1 = this._fragmentStart,
        t2 = this._uri;
      return t1 < t2.length ? B.JSString_methods.substring$1(t2, t1 + 1) : "";
    },
    get$pathSegments() {
      var parts, i,
        start = this._pathStart,
        end = this._queryStart,
        t1 = this._uri;
      if (B.JSString_methods.startsWith$2(t1, "/", start))
        ++start;
      if (start === end)
        return B.List_empty0;
      parts = A._setArrayType([], type$.JSArray_String);
      for (i = start; i < end; ++i)
        if (B.JSString_methods.codeUnitAt$1(t1, i) === 47) {
          parts.push(B.JSString_methods.substring$2(t1, start, i));
          start = i + 1;
        }
      parts.push(B.JSString_methods.substring$2(t1, start, end));
      return A.List_List$unmodifiable(parts, type$.String);
    },
    get$hashCode(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = B.JSString_methods.get$hashCode(this._uri) : t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return type$.Uri._is(other) && this._uri === other.toString$0(0);
    },
    toString$0(_) {
      return this._uri;
    },
    $isUri: 1
  };
  A._DataUri.prototype = {};
  A._FakeUserTag.prototype = {};
  A.ServiceExtensionResponse.prototype = {};
  A.TimelineTask.prototype = {
    start$2$arguments(_, $name, $arguments) {
      A.ArgumentError_checkNotNull($name, "name");
      this._stack.push(null);
      return;
    },
    start$1($receiver, $name) {
      return this.start$2$arguments($receiver, $name, null);
    },
    finish$0(_) {
      var t1 = this._stack;
      if (t1.length === 0)
        throw A.wrapException(A.StateError$("Uneven calls to start and finish"));
      if (t1.pop() == null)
        return;
      A._argumentsAsJson(null);
    }
  };
  A.HtmlElement.prototype = {$isHtmlElement: 1};
  A.AccessibleNodeList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.AnchorElement.prototype = {
    toString$0(receiver) {
      return String(receiver);
    }
  };
  A.AreaElement.prototype = {
    toString$0(receiver) {
      return String(receiver);
    }
  };
  A.BaseElement.prototype = {$isBaseElement: 1};
  A.Blob.prototype = {$isBlob: 1};
  A.Body.prototype = {$isBody: 1};
  A.BodyElement.prototype = {$isBodyElement: 1};
  A.BroadcastChannel.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.ButtonElement.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.CanvasElement.prototype = {
    getContext$2(receiver, contextId, attributes) {
      if (attributes != null)
        return receiver.getContext(contextId, A.convertDartToNative_Dictionary(attributes));
      return receiver.getContext(contextId);
    },
    getContext$1($receiver, contextId) {
      return this.getContext$2($receiver, contextId, null);
    },
    $isCanvasElement: 1
  };
  A.CanvasRenderingContext2D.prototype = {
    fillText$3(receiver, text, x, y) {
      receiver.fillText(text, x, y);
    }
  };
  A.CharacterData.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.Credential.prototype = {};
  A.CredentialUserData.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.CssKeyframesRule.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.CssPerspective.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.CssRule.prototype = {$isCssRule: 1};
  A.CssStyleDeclaration.prototype = {
    _browserPropertyName$1(receiver, propertyName) {
      var t1 = $.$get$CssStyleDeclaration__propertyCache(),
        $name = t1[propertyName];
      if (typeof $name == "string")
        return $name;
      $name = this._supportedBrowserPropertyName$1(receiver, propertyName);
      t1[propertyName] = $name;
      return $name;
    },
    _supportedBrowserPropertyName$1(receiver, propertyName) {
      var prefixed;
      if (propertyName.replace(/^-ms-/, "ms-").replace(/-([\da-z])/ig, function(_, letter) {
        return letter.toUpperCase();
      }) in receiver)
        return propertyName;
      prefixed = $.$get$Device_cssPrefix() + propertyName;
      if (prefixed in receiver)
        return prefixed;
      return propertyName;
    },
    _setPropertyHelper$3(receiver, propertyName, value, priority) {
      if (priority == null)
        priority = "";
      receiver.setProperty(propertyName, value, priority);
    },
    get$length(receiver) {
      return receiver.length;
    },
    set$height(receiver, value) {
      receiver.height = value;
    },
    set$left(receiver, value) {
      receiver.left = value;
    },
    set$overflow(receiver, value) {
      receiver.overflow = value;
    },
    set$position(receiver, value) {
      receiver.position = value;
    },
    set$top(receiver, value) {
      receiver.top = value;
    },
    set$visibility(receiver, value) {
      receiver.visibility = value;
    },
    set$width(receiver, value) {
      receiver.width = value;
    }
  };
  A.CssStyleDeclarationBase.prototype = {};
  A.CssStyleSheet.prototype = {$isCssStyleSheet: 1};
  A.CssStyleValue.prototype = {};
  A.CssTransformComponent.prototype = {};
  A.CssTransformValue.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.CssUnparsedValue.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.DataTransferItemList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      return receiver[index];
    }
  };
  A.DivElement.prototype = {};
  A.Document.prototype = {
    createElementNS$2(receiver, namespaceURI, qualifiedName) {
      var t1 = receiver.createElementNS(namespaceURI, qualifiedName);
      return t1;
    },
    $isDocument: 1
  };
  A.DomError.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.DomException.prototype = {
    get$name(receiver) {
      var errorName = receiver.name,
        t1 = $.$get$Device_isWebKit();
      if (t1 && errorName === "SECURITY_ERR")
        return "SecurityError";
      if (t1 && errorName === "SYNTAX_ERR")
        return "SyntaxError";
      return errorName;
    },
    toString$0(receiver) {
      return String(receiver);
    },
    $isDomException: 1
  };
  A.DomRectList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.StateError$("No elements"));
    },
    elementAt$1(receiver, index) {
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.DomRectReadOnly.prototype = {
    toString$0(receiver) {
      var t2,
        t1 = receiver.left;
      t1.toString;
      t1 = "Rectangle (" + A.S(t1) + ", ";
      t2 = receiver.top;
      t2.toString;
      return t1 + A.S(t2) + ") " + A.S(this.get$width(receiver)) + " x " + A.S(this.get$height(receiver));
    },
    $eq(receiver, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (type$.Rectangle_num._is(other)) {
        t1 = receiver.left;
        t1.toString;
        t2 = J.getInterceptor$x(other);
        if (t1 === t2.get$left(other)) {
          t1 = receiver.top;
          t1.toString;
          t1 = t1 === t2.get$top(other) && this.get$width(receiver) === t2.get$width(other) && this.get$height(receiver) === t2.get$height(other);
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode(receiver) {
      var t2,
        t1 = receiver.left;
      t1.toString;
      t2 = receiver.top;
      t2.toString;
      return A.Object_hash(t1, t2, this.get$width(receiver), this.get$height(receiver), B.C_SentinelValue, B.C_SentinelValue);
    },
    get$_height(receiver) {
      return receiver.height;
    },
    get$height(receiver) {
      var t1 = this.get$_height(receiver);
      t1.toString;
      return t1;
    },
    get$left(receiver) {
      var t1 = receiver.left;
      t1.toString;
      return t1;
    },
    get$top(receiver) {
      var t1 = receiver.top;
      t1.toString;
      return t1;
    },
    get$_width(receiver) {
      return receiver.width;
    },
    get$width(receiver) {
      var t1 = this.get$_width(receiver);
      t1.toString;
      return t1;
    },
    $isRectangle: 1
  };
  A.DomStringList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.StateError$("No elements"));
    },
    elementAt$1(receiver, index) {
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.DomTokenList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A._ChildrenElementList.prototype = {
    contains$1(_, element) {
      return J.contains$1$asx(this._childElements, element);
    },
    get$isEmpty(_) {
      return this._html$_element.firstElementChild == null;
    },
    get$length(_) {
      return this._childElements.length;
    },
    $index(_, index) {
      return type$.Element._as(this._childElements[index]);
    },
    $indexSet(_, index, value) {
      this._html$_element.replaceChild(value, this._childElements[index]);
    },
    set$length(_, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize element lists"));
    },
    add$1(_, value) {
      this._html$_element.appendChild(value);
      return value;
    },
    get$iterator(_) {
      var t1 = this.toList$0(this);
      return new J.ArrayIterator(t1, t1.length);
    },
    setRange$4(_, start, end, iterable, skipCount) {
      throw A.wrapException(A.UnimplementedError$(null));
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    insert$2(_, index, element) {
      var t3, _this = this,
        t1 = _this._childElements,
        t2 = t1.length;
      if (index > t2)
        throw A.wrapException(A.RangeError$range(index, 0, _this.get$length(_this), null, null));
      t3 = _this._html$_element;
      if (index === t2)
        t3.appendChild(element);
      else
        t3.insertBefore(element, type$.Element._as(t1[index]));
    },
    get$first(_) {
      return A._ChildrenElementList__first(this._html$_element);
    }
  };
  A._FrozenElementList.prototype = {
    get$length(_) {
      return this._nodeList.length;
    },
    $index(_, index) {
      return this.$ti._precomputed1._as(this._nodeList[index]);
    },
    $indexSet(_, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify list"));
    },
    set$length(_, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify list"));
    },
    get$first(_) {
      return this.$ti._precomputed1._as(B.NodeList_methods.get$first(this._nodeList));
    }
  };
  A.Element.prototype = {
    get$attributes(receiver) {
      return new A._ElementAttributeMap(receiver);
    },
    get$children(receiver) {
      return new A._ChildrenElementList(receiver, receiver.children);
    },
    getComputedStyle$0(receiver) {
      return window.getComputedStyle(receiver, "");
    },
    toString$0(receiver) {
      return receiver.localName;
    },
    createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator) {
      var t1, t2, contextElement, fragment;
      if (treeSanitizer == null) {
        t1 = $.Element__defaultValidator;
        if (t1 == null) {
          t1 = A._setArrayType([], type$.JSArray_NodeValidator);
          t2 = new A.NodeValidatorBuilder(t1);
          t1.push(A._Html5NodeValidator$(null));
          t1.push(A._TemplatingNodeValidator$());
          $.Element__defaultValidator = t2;
          validator = t2;
        } else
          validator = t1;
        t1 = $.Element__defaultSanitizer;
        if (t1 == null) {
          t1 = new A._ValidatingTreeSanitizer(validator);
          $.Element__defaultSanitizer = t1;
          treeSanitizer = t1;
        } else {
          t1.validator = validator;
          treeSanitizer = t1;
        }
      }
      if ($.Element__parseDocument == null) {
        t1 = document;
        t2 = t1.implementation.createHTMLDocument("");
        $.Element__parseDocument = t2;
        $.Element__parseRange = t2.createRange();
        t2 = $.Element__parseDocument.createElement("base");
        type$.BaseElement._as(t2);
        t1 = t1.baseURI;
        t1.toString;
        t2.href = t1;
        $.Element__parseDocument.head.appendChild(t2);
      }
      t1 = $.Element__parseDocument;
      if (t1.body == null) {
        t2 = t1.createElement("body");
        t1.body = type$.BodyElement._as(t2);
      }
      t1 = $.Element__parseDocument;
      if (type$.BodyElement._is(receiver)) {
        t1 = t1.body;
        t1.toString;
        contextElement = t1;
      } else {
        t1.toString;
        contextElement = t1.createElement(receiver.tagName);
        $.Element__parseDocument.body.appendChild(contextElement);
      }
      if ("createContextualFragment" in window.Range.prototype && !B.JSArray_methods.contains$1(B.List_ego, receiver.tagName)) {
        $.Element__parseRange.selectNodeContents(contextElement);
        t1 = $.Element__parseRange;
        fragment = t1.createContextualFragment(html);
      } else {
        contextElement.innerHTML = html;
        fragment = $.Element__parseDocument.createDocumentFragment();
        for (; t1 = contextElement.firstChild, t1 != null;)
          fragment.appendChild(t1);
      }
      if (contextElement !== $.Element__parseDocument.body)
        J.remove$0$ax(contextElement);
      treeSanitizer.sanitizeTree$1(fragment);
      document.adoptNode(fragment);
      return fragment;
    },
    createFragment$2$treeSanitizer($receiver, html, treeSanitizer) {
      return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
    },
    setInnerHtml$1(receiver, html) {
      receiver.textContent = null;
      receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, null, null));
    },
    focus$0(receiver) {
      return receiver.focus();
    },
    get$tagName(receiver) {
      return receiver.tagName;
    },
    $isElement: 1
  };
  A.Element_Element$html_closure.prototype = {
    call$1(e) {
      return type$.Element._is(e);
    },
    $signature: 52
  };
  A.EmbedElement.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.Entry.prototype = {
    get$name(receiver) {
      return receiver.name;
    },
    _html$_remove$2(receiver, successCallback, errorCallback) {
      return receiver.remove(A.convertDartClosureToJS(successCallback, 0), A.convertDartClosureToJS(errorCallback, 1));
    },
    remove$0(receiver) {
      var t1 = new A._Future($.Zone__current, type$._Future_dynamic),
        completer = new A._AsyncCompleter(t1, type$._AsyncCompleter_dynamic);
      this._html$_remove$2(receiver, new A.Entry_remove_closure(completer), new A.Entry_remove_closure0(completer));
      return t1;
    }
  };
  A.Entry_remove_closure.prototype = {
    call$0() {
      this.completer.complete$0(0);
    },
    $signature: 0
  };
  A.Entry_remove_closure0.prototype = {
    call$1(error) {
      this.completer.completeError$1(error);
    },
    $signature: 106
  };
  A.Event.prototype = {
    get$target(receiver) {
      return A._convertNativeToDart_EventTarget(receiver.target);
    },
    $isEvent: 1
  };
  A.EventTarget.prototype = {
    addEventListener$3(receiver, type, listener, useCapture) {
      if (listener != null)
        this._addEventListener$3(receiver, type, listener, useCapture);
    },
    addEventListener$2($receiver, type, listener) {
      return this.addEventListener$3($receiver, type, listener, null);
    },
    removeEventListener$3(receiver, type, listener, useCapture) {
      if (listener != null)
        this._removeEventListener$3(receiver, type, listener, useCapture);
    },
    removeEventListener$2($receiver, type, listener) {
      return this.removeEventListener$3($receiver, type, listener, null);
    },
    _addEventListener$3(receiver, type, listener, options) {
      return receiver.addEventListener(type, A.convertDartClosureToJS(listener, 1), options);
    },
    _removeEventListener$3(receiver, type, listener, options) {
      return receiver.removeEventListener(type, A.convertDartClosureToJS(listener, 1), options);
    }
  };
  A.FederatedCredential.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.FieldSetElement.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.File.prototype = {
    get$name(receiver) {
      return receiver.name;
    },
    $isFile: 1
  };
  A.FileList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.StateError$("No elements"));
    },
    elementAt$1(receiver, index) {
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1,
    $isFileList: 1
  };
  A.FileSystem.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.FileWriter.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.FontFace.prototype = {$isFontFace: 1};
  A.FormElement.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    get$name(receiver) {
      return receiver.name;
    },
    $isFormElement: 1
  };
  A.Gamepad.prototype = {$isGamepad: 1};
  A.History.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.HtmlCollection.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.StateError$("No elements"));
    },
    elementAt$1(receiver, index) {
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.HtmlDocument.prototype = {};
  A.HttpRequest.prototype = {
    open$3$async(receiver, method, url, async) {
      return receiver.open(method, url, true);
    },
    $isHttpRequest: 1
  };
  A.HttpRequest_request_closure.prototype = {
    call$1(e) {
      var accepted, unknownRedirect, t3,
        t1 = this.xhr,
        t2 = t1.status;
      t2.toString;
      accepted = t2 >= 200 && t2 < 300;
      unknownRedirect = t2 > 307 && t2 < 400;
      t2 = accepted || t2 === 0 || t2 === 304 || unknownRedirect;
      t3 = this.completer;
      if (t2)
        t3.complete$1(0, t1);
      else
        t3.completeError$1(e);
    },
    $signature: 107
  };
  A.HttpRequestEventTarget.prototype = {};
  A.IFrameElement.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.ImageData.prototype = {$isImageData: 1};
  A.InputElement.prototype = {
    get$name(receiver) {
      return receiver.name;
    },
    $isInputElement: 1
  };
  A.KeyboardEvent.prototype = {$isKeyboardEvent: 1};
  A.LabelElement.prototype = {};
  A.Location.prototype = {
    toString$0(receiver) {
      return String(receiver);
    }
  };
  A.MapElement.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.MediaKeySession.prototype = {
    remove$0(receiver) {
      return A.promiseToFuture(receiver.remove(), type$.dynamic);
    }
  };
  A.MediaList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.MediaQueryList.prototype = {
    addListener$1(receiver, listener) {
      return receiver.addListener(A.convertDartClosureToJS(listener, 1));
    },
    removeListener$1(receiver, listener) {
      return receiver.removeListener(A.convertDartClosureToJS(listener, 1));
    }
  };
  A.MediaQueryListEvent.prototype = {$isMediaQueryListEvent: 1};
  A.MessagePort.prototype = {
    addEventListener$3(receiver, type, listener, useCapture) {
      if (type === "message")
        receiver.start();
      this.super$EventTarget$addEventListener(receiver, type, listener, false);
    },
    $isMessagePort: 1
  };
  A.MetaElement.prototype = {
    get$name(receiver) {
      return receiver.name;
    },
    $isMetaElement: 1
  };
  A.MidiInputMap.prototype = {
    containsKey$1(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(key)) != null;
    },
    $index(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(key));
    },
    forEach$1(receiver, f) {
      var entry,
        entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], A.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys(receiver) {
      var keys = A._setArrayType([], type$.JSArray_String);
      this.forEach$1(receiver, new A.MidiInputMap_keys_closure(keys));
      return keys;
    },
    get$length(receiver) {
      return receiver.size;
    },
    get$isEmpty(receiver) {
      return receiver.size === 0;
    },
    $indexSet(receiver, key, value) {
      throw A.wrapException(A.UnsupportedError$("Not supported"));
    },
    putIfAbsent$2(receiver, key, ifAbsent) {
      throw A.wrapException(A.UnsupportedError$("Not supported"));
    },
    remove$1(receiver, key) {
      throw A.wrapException(A.UnsupportedError$("Not supported"));
    },
    $isMap: 1
  };
  A.MidiInputMap_keys_closure.prototype = {
    call$2(k, v) {
      return this.keys.push(k);
    },
    $signature: 11
  };
  A.MidiOutputMap.prototype = {
    containsKey$1(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(key)) != null;
    },
    $index(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(key));
    },
    forEach$1(receiver, f) {
      var entry,
        entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], A.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys(receiver) {
      var keys = A._setArrayType([], type$.JSArray_String);
      this.forEach$1(receiver, new A.MidiOutputMap_keys_closure(keys));
      return keys;
    },
    get$length(receiver) {
      return receiver.size;
    },
    get$isEmpty(receiver) {
      return receiver.size === 0;
    },
    $indexSet(receiver, key, value) {
      throw A.wrapException(A.UnsupportedError$("Not supported"));
    },
    putIfAbsent$2(receiver, key, ifAbsent) {
      throw A.wrapException(A.UnsupportedError$("Not supported"));
    },
    remove$1(receiver, key) {
      throw A.wrapException(A.UnsupportedError$("Not supported"));
    },
    $isMap: 1
  };
  A.MidiOutputMap_keys_closure.prototype = {
    call$2(k, v) {
      return this.keys.push(k);
    },
    $signature: 11
  };
  A.MidiPort.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.MimeType.prototype = {$isMimeType: 1};
  A.MimeTypeArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.StateError$("No elements"));
    },
    elementAt$1(receiver, index) {
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.MouseEvent.prototype = {
    get$offset(receiver) {
      var t1, t2, target, t3, t4, t5, point;
      if (!!receiver.offsetX)
        return new A.Point(receiver.offsetX, receiver.offsetY, type$.Point_num);
      else {
        t1 = receiver.target;
        t2 = type$.Element;
        if (!t2._is(A._convertNativeToDart_EventTarget(t1)))
          throw A.wrapException(A.UnsupportedError$("offsetX is only supported on elements"));
        target = t2._as(A._convertNativeToDart_EventTarget(t1));
        t1 = receiver.clientX;
        t2 = receiver.clientY;
        t3 = type$.Point_num;
        t4 = target.getBoundingClientRect();
        t5 = t4.left;
        t5.toString;
        t4 = t4.top;
        t4.toString;
        point = new A.Point(t1, t2, t3).$sub(0, new A.Point(t5, t4, t3));
        return new A.Point(B.JSNumber_methods.toInt$0(point.x), B.JSNumber_methods.toInt$0(point.y), t3);
      }
    },
    $isMouseEvent: 1
  };
  A.MutationObserver.prototype = {
    observe$3$attributeFilter$attributes(receiver, target, attributeFilter, attributes) {
      var _null = null, parsedOptions = {},
        t1 = new A.MutationObserver_observe_override(parsedOptions);
      t1.call$2("childList", _null);
      t1.call$2("attributes", true);
      t1.call$2("characterData", _null);
      t1.call$2("subtree", _null);
      t1.call$2("attributeOldValue", _null);
      t1.call$2("characterDataOldValue", _null);
      t1.call$2("attributeFilter", attributeFilter);
      receiver.observe(target, parsedOptions);
    },
    $isMutationObserver: 1
  };
  A.MutationObserver_observe_override.prototype = {
    call$2(key, value) {
      if (value != null)
        this.parsedOptions[key] = value;
    },
    $signature: 49
  };
  A.MutationRecord.prototype = {$isMutationRecord: 1};
  A.NavigatorUserMediaError.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A._ChildNodeListLazy.prototype = {
    get$first(_) {
      var result = this._this.firstChild;
      if (result == null)
        throw A.wrapException(A.StateError$("No elements"));
      return result;
    },
    get$single(_) {
      var t1 = this._this,
        l = t1.childNodes.length;
      if (l === 0)
        throw A.wrapException(A.StateError$("No elements"));
      if (l > 1)
        throw A.wrapException(A.StateError$("More than one element"));
      t1 = t1.firstChild;
      t1.toString;
      return t1;
    },
    add$1(_, value) {
      this._this.appendChild(value);
    },
    addAll$1(_, iterable) {
      var t1, t2, len, i, t3;
      if (iterable instanceof A._ChildNodeListLazy) {
        t1 = iterable._this;
        t2 = this._this;
        if (t1 !== t2)
          for (len = t1.childNodes.length, i = 0; i < len; ++i) {
            t3 = t1.firstChild;
            t3.toString;
            t2.appendChild(t3);
          }
        return;
      }
      for (t1 = J.get$iterator$ax(iterable), t2 = this._this; t1.moveNext$0();)
        t2.appendChild(t1.get$current(t1));
    },
    $indexSet(_, index, value) {
      var t1 = this._this;
      t1.replaceChild(value, t1.childNodes[index]);
    },
    get$iterator(_) {
      var t1 = this._this.childNodes;
      return new A.FixedSizeListIterator(t1, t1.length);
    },
    setRange$4(_, start, end, iterable, skipCount) {
      throw A.wrapException(A.UnsupportedError$("Cannot setRange on Node list"));
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    get$length(_) {
      return this._this.childNodes.length;
    },
    set$length(_, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot set length on immutable List."));
    },
    $index(_, index) {
      return this._this.childNodes[index];
    }
  };
  A.Node.prototype = {
    remove$0(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver);
    },
    replaceWith$1(receiver, otherNode) {
      var $parent, t1, exception;
      try {
        t1 = receiver.parentNode;
        t1.toString;
        $parent = t1;
        J._replaceChild$2$x($parent, otherNode, receiver);
      } catch (exception) {
      }
      return receiver;
    },
    toString$0(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString(receiver) : value;
    },
    _replaceChild$2(receiver, node, child) {
      return receiver.replaceChild(node, child);
    },
    $isNode: 1
  };
  A.NodeList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.StateError$("No elements"));
    },
    elementAt$1(receiver, index) {
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.ObjectElement.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.OffscreenCanvas.prototype = {
    getContext$2(receiver, contextType, attributes) {
      var t1 = receiver.getContext(contextType, A.convertDartToNative_Dictionary(attributes));
      return t1;
    }
  };
  A.OutputElement.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.OverconstrainedError.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.ParagraphElement.prototype = {};
  A.ParamElement.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.PasswordCredential.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.PerformanceEntry.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.PerformanceServerTiming.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.Plugin.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    get$name(receiver) {
      return receiver.name;
    },
    $isPlugin: 1
  };
  A.PluginArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.StateError$("No elements"));
    },
    elementAt$1(receiver, index) {
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.PointerEvent0.prototype = {$isPointerEvent0: 1};
  A.ProgressEvent.prototype = {$isProgressEvent: 1};
  A.RtcStatsReport.prototype = {
    containsKey$1(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(key)) != null;
    },
    $index(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(key));
    },
    forEach$1(receiver, f) {
      var entry,
        entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], A.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys(receiver) {
      var keys = A._setArrayType([], type$.JSArray_String);
      this.forEach$1(receiver, new A.RtcStatsReport_keys_closure(keys));
      return keys;
    },
    get$length(receiver) {
      return receiver.size;
    },
    get$isEmpty(receiver) {
      return receiver.size === 0;
    },
    $indexSet(receiver, key, value) {
      throw A.wrapException(A.UnsupportedError$("Not supported"));
    },
    putIfAbsent$2(receiver, key, ifAbsent) {
      throw A.wrapException(A.UnsupportedError$("Not supported"));
    },
    remove$1(receiver, key) {
      throw A.wrapException(A.UnsupportedError$("Not supported"));
    },
    $isMap: 1
  };
  A.RtcStatsReport_keys_closure.prototype = {
    call$2(k, v) {
      return this.keys.push(k);
    },
    $signature: 11
  };
  A.ScreenOrientation.prototype = {
    unlock$0(receiver) {
      return receiver.unlock();
    }
  };
  A.SelectElement.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.SharedWorkerGlobalScope.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.SlotElement.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.SourceBuffer.prototype = {$isSourceBuffer: 1};
  A.SourceBufferList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.StateError$("No elements"));
    },
    elementAt$1(receiver, index) {
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.SpeechGrammar.prototype = {$isSpeechGrammar: 1};
  A.SpeechGrammarList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.StateError$("No elements"));
    },
    elementAt$1(receiver, index) {
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.SpeechRecognitionResult.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $isSpeechRecognitionResult: 1
  };
  A.SpeechSynthesisEvent.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.SpeechSynthesisVoice.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.Storage.prototype = {
    containsKey$1(receiver, key) {
      return receiver.getItem(A._asString(key)) != null;
    },
    $index(receiver, key) {
      return receiver.getItem(A._asString(key));
    },
    $indexSet(receiver, key, value) {
      receiver.setItem(key, value);
    },
    putIfAbsent$2(receiver, key, ifAbsent) {
      var t1;
      if (receiver.getItem(key) == null)
        receiver.setItem(key, ifAbsent.call$0());
      t1 = receiver.getItem(key);
      return t1 == null ? A._asString(t1) : t1;
    },
    remove$1(receiver, key) {
      var value;
      A._asString(key);
      value = receiver.getItem(key);
      receiver.removeItem(key);
      return value;
    },
    forEach$1(receiver, f) {
      var i, key, t1;
      for (i = 0; true; ++i) {
        key = receiver.key(i);
        if (key == null)
          return;
        t1 = receiver.getItem(key);
        t1.toString;
        f.call$2(key, t1);
      }
    },
    get$keys(receiver) {
      var keys = A._setArrayType([], type$.JSArray_String);
      this.forEach$1(receiver, new A.Storage_keys_closure(keys));
      return keys;
    },
    get$length(receiver) {
      return receiver.length;
    },
    get$isEmpty(receiver) {
      return receiver.key(0) == null;
    },
    $isMap: 1
  };
  A.Storage_keys_closure.prototype = {
    call$2(k, v) {
      return this.keys.push(k);
    },
    $signature: 109
  };
  A.StyleElement.prototype = {};
  A.StyleSheet.prototype = {$isStyleSheet: 1};
  A.TableElement.prototype = {
    createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator) {
      var table, fragment;
      if ("createContextualFragment" in window.Range.prototype)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      table = A.Element_Element$html("<table>" + html + "</table>", treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      new A._ChildNodeListLazy(fragment).addAll$1(0, new A._ChildNodeListLazy(table));
      return fragment;
    }
  };
  A.TableRowElement.prototype = {
    createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator) {
      var t1, fragment;
      if ("createContextualFragment" in window.Range.prototype)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      t1 = document;
      fragment = t1.createDocumentFragment();
      t1 = new A._ChildNodeListLazy(B.TableElement_methods.createFragment$3$treeSanitizer$validator(t1.createElement("table"), html, treeSanitizer, validator));
      t1 = new A._ChildNodeListLazy(t1.get$single(t1));
      new A._ChildNodeListLazy(fragment).addAll$1(0, new A._ChildNodeListLazy(t1.get$single(t1)));
      return fragment;
    }
  };
  A.TableSectionElement.prototype = {
    createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator) {
      var t1, fragment;
      if ("createContextualFragment" in window.Range.prototype)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      t1 = document;
      fragment = t1.createDocumentFragment();
      t1 = new A._ChildNodeListLazy(B.TableElement_methods.createFragment$3$treeSanitizer$validator(t1.createElement("table"), html, treeSanitizer, validator));
      new A._ChildNodeListLazy(fragment).addAll$1(0, new A._ChildNodeListLazy(t1.get$single(t1)));
      return fragment;
    }
  };
  A.TemplateElement.prototype = {$isTemplateElement: 1};
  A.TextAreaElement.prototype = {
    get$name(receiver) {
      return receiver.name;
    },
    select$0(receiver) {
      return receiver.select();
    },
    $isTextAreaElement: 1
  };
  A.TextTrack.prototype = {$isTextTrack: 1};
  A.TextTrackCue.prototype = {$isTextTrackCue: 1};
  A.TextTrackCueList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.StateError$("No elements"));
    },
    elementAt$1(receiver, index) {
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.TextTrackList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.StateError$("No elements"));
    },
    elementAt$1(receiver, index) {
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.TimeRanges.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.Touch.prototype = {$isTouch: 1};
  A.TouchEvent.prototype = {$isTouchEvent: 1};
  A.TouchList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.StateError$("No elements"));
    },
    get$last(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw A.wrapException(A.StateError$("No elements"));
    },
    elementAt$1(receiver, index) {
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.TrackDefaultList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.UIEvent.prototype = {};
  A.Url.prototype = {
    toString$0(receiver) {
      return String(receiver);
    }
  };
  A.VideoTrackList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.WheelEvent.prototype = {
    get$deltaY(receiver) {
      var value = receiver.deltaY;
      if (value != null)
        return value;
      throw A.wrapException(A.UnsupportedError$("deltaY is not supported"));
    },
    get$deltaX(receiver) {
      var value = receiver.deltaX;
      if (value != null)
        return value;
      throw A.wrapException(A.UnsupportedError$("deltaX is not supported"));
    },
    get$deltaMode(receiver) {
      if (!!receiver.deltaMode)
        return receiver.deltaMode;
      return 0;
    },
    $isWheelEvent: 1
  };
  A.Window.prototype = {
    requestAnimationFrame$1(receiver, callback) {
      var t1;
      this._ensureRequestAnimationFrame$0(receiver);
      t1 = A._wrapZone(callback, type$.num);
      t1.toString;
      return this._requestAnimationFrame$1(receiver, t1);
    },
    _requestAnimationFrame$1(receiver, callback) {
      return receiver.requestAnimationFrame(A.convertDartClosureToJS(callback, 1));
    },
    _ensureRequestAnimationFrame$0(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
      (function($this) {
        var vendors = ["ms", "moz", "webkit", "o"];
        for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
          $this.requestAnimationFrame = $this[vendors[i] + "RequestAnimationFrame"];
          $this.cancelAnimationFrame = $this[vendors[i] + "CancelAnimationFrame"] || $this[vendors[i] + "CancelRequestAnimationFrame"];
        }
        if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
          return;
        $this.requestAnimationFrame = function(callback) {
          return window.setTimeout(function() {
            callback(Date.now());
          }, 16);
        };
        $this.cancelAnimationFrame = function(id) {
          clearTimeout(id);
        };
      })(receiver);
    },
    get$name(receiver) {
      return receiver.name;
    },
    $isWindow: 1
  };
  A.WorkerGlobalScope.prototype = {$isWorkerGlobalScope: 1};
  A._Attr.prototype = {
    get$name(receiver) {
      return receiver.name;
    },
    $is_Attr: 1
  };
  A._CssRuleList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.StateError$("No elements"));
    },
    elementAt$1(receiver, index) {
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._DomRect.prototype = {
    toString$0(receiver) {
      var t2,
        t1 = receiver.left;
      t1.toString;
      t1 = "Rectangle (" + A.S(t1) + ", ";
      t2 = receiver.top;
      t2.toString;
      t2 = t1 + A.S(t2) + ") ";
      t1 = receiver.width;
      t1.toString;
      t1 = t2 + A.S(t1) + " x ";
      t2 = receiver.height;
      t2.toString;
      return t1 + A.S(t2);
    },
    $eq(receiver, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (type$.Rectangle_num._is(other)) {
        t1 = receiver.left;
        t1.toString;
        t2 = J.getInterceptor$x(other);
        if (t1 === t2.get$left(other)) {
          t1 = receiver.top;
          t1.toString;
          if (t1 === t2.get$top(other)) {
            t1 = receiver.width;
            t1.toString;
            if (t1 === t2.get$width(other)) {
              t1 = receiver.height;
              t1.toString;
              t2 = t1 === t2.get$height(other);
              t1 = t2;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode(receiver) {
      var t2, t3, t4,
        t1 = receiver.left;
      t1.toString;
      t2 = receiver.top;
      t2.toString;
      t3 = receiver.width;
      t3.toString;
      t4 = receiver.height;
      t4.toString;
      return A.Object_hash(t1, t2, t3, t4, B.C_SentinelValue, B.C_SentinelValue);
    },
    get$_height(receiver) {
      return receiver.height;
    },
    get$height(receiver) {
      var t1 = receiver.height;
      t1.toString;
      return t1;
    },
    get$_width(receiver) {
      return receiver.width;
    },
    get$width(receiver) {
      var t1 = receiver.width;
      t1.toString;
      return t1;
    }
  };
  A._GamepadList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.StateError$("No elements"));
    },
    elementAt$1(receiver, index) {
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._NamedNodeMap.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.StateError$("No elements"));
    },
    elementAt$1(receiver, index) {
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._SpeechRecognitionResultList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.StateError$("No elements"));
    },
    elementAt$1(receiver, index) {
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._StyleSheetList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.StateError$("No elements"));
    },
    elementAt$1(receiver, index) {
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._AttributeMap.prototype = {
    putIfAbsent$2(_, key, ifAbsent) {
      var t1 = this._html$_element,
        t2 = t1.hasAttribute(key);
      if (!t2)
        t1.setAttribute(key, ifAbsent.call$0());
      t1 = t1.getAttribute(key);
      return t1 == null ? A._asString(t1) : t1;
    },
    forEach$1(_, f) {
      var t1, t2, t3, _i, t4, value;
      for (t1 = this.get$keys(this), t2 = t1.length, t3 = this._html$_element, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        t4 = A._asString(t1[_i]);
        value = t3.getAttribute(t4);
        f.call$2(t4, value == null ? A._asString(value) : value);
      }
    },
    get$keys(_) {
      var keys, len, t2, i, attr, t3,
        t1 = this._html$_element.attributes;
      t1.toString;
      keys = A._setArrayType([], type$.JSArray_String);
      for (len = t1.length, t2 = type$._Attr, i = 0; i < len; ++i) {
        attr = t2._as(t1[i]);
        if (attr.namespaceURI == null) {
          t3 = attr.name;
          t3.toString;
          keys.push(t3);
        }
      }
      return keys;
    },
    get$isEmpty(_) {
      return this.get$keys(this).length === 0;
    }
  };
  A._ElementAttributeMap.prototype = {
    containsKey$1(_, key) {
      return typeof key == "string" && this._html$_element.hasAttribute(key);
    },
    $index(_, key) {
      return this._html$_element.getAttribute(A._asString(key));
    },
    $indexSet(_, key, value) {
      this._html$_element.setAttribute(key, value);
    },
    remove$1(_, key) {
      var t1, value;
      if (typeof key == "string") {
        t1 = this._html$_element;
        value = t1.getAttribute(key);
        t1.removeAttribute(key);
        t1 = value;
      } else
        t1 = null;
      return t1;
    },
    get$length(_) {
      return this.get$keys(this).length;
    }
  };
  A.EventStreamProvider.prototype = {};
  A._EventStream.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      return A._EventStreamSubscription$(this._target, this._eventType, onData, false, A._instanceType(this)._precomputed1);
    }
  };
  A._ElementEventStreamImpl.prototype = {};
  A._EventStreamSubscription.prototype = {
    cancel$0(_) {
      var _this = this;
      if (_this._target == null)
        return $.$get$nullFuture();
      _this._unlisten$0();
      _this._onData = _this._target = null;
      return $.$get$nullFuture();
    },
    _tryResume$0() {
      var t2,
        t1 = this._onData;
      if (t1 != null && true) {
        t2 = this._target;
        t2.toString;
        J.addEventListener$3$x(t2, this._eventType, t1, false);
      }
    },
    _unlisten$0() {
      var t2,
        t1 = this._onData;
      if (t1 != null) {
        t2 = this._target;
        t2.toString;
        J.removeEventListener$3$x(t2, this._eventType, t1, false);
      }
    }
  };
  A._EventStreamSubscription_closure.prototype = {
    call$1(e) {
      return this.onData.call$1(e);
    },
    $signature: 1
  };
  A._Html5NodeValidator.prototype = {
    _Html5NodeValidator$1$uriPolicy(uriPolicy) {
      var _i;
      if ($._Html5NodeValidator__attributeValidators._length === 0) {
        for (_i = 0; _i < 262; ++_i)
          $._Html5NodeValidator__attributeValidators.$indexSet(0, B.List_2Zi[_i], A.html__Html5NodeValidator__standardAttributeValidator$closure());
        for (_i = 0; _i < 12; ++_i)
          $._Html5NodeValidator__attributeValidators.$indexSet(0, B.List_yrN[_i], A.html__Html5NodeValidator__uriAttributeValidator$closure());
      }
    },
    allowsElement$1(element) {
      return $.$get$_Html5NodeValidator__allowedElements().contains$1(0, A.Element__safeTagName(element));
    },
    allowsAttribute$3(element, attributeName, value) {
      var validator = $._Html5NodeValidator__attributeValidators.$index(0, A.Element__safeTagName(element) + "::" + attributeName);
      if (validator == null)
        validator = $._Html5NodeValidator__attributeValidators.$index(0, "*::" + attributeName);
      if (validator == null)
        return false;
      return validator.call$4(element, attributeName, value, this);
    },
    $isNodeValidator: 1
  };
  A.ImmutableListMixin.prototype = {
    get$iterator(receiver) {
      return new A.FixedSizeListIterator(receiver, this.get$length(receiver));
    },
    add$1(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot add to immutable List."));
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      throw A.wrapException(A.UnsupportedError$("Cannot setRange on immutable List."));
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    }
  };
  A.NodeValidatorBuilder.prototype = {
    allowsElement$1(element) {
      return B.JSArray_methods.any$1(this._validators, new A.NodeValidatorBuilder_allowsElement_closure(element));
    },
    allowsAttribute$3(element, attributeName, value) {
      return B.JSArray_methods.any$1(this._validators, new A.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
    },
    $isNodeValidator: 1
  };
  A.NodeValidatorBuilder_allowsElement_closure.prototype = {
    call$1(v) {
      return v.allowsElement$1(this.element);
    },
    $signature: 45
  };
  A.NodeValidatorBuilder_allowsAttribute_closure.prototype = {
    call$1(v) {
      return v.allowsAttribute$3(this.element, this.attributeName, this.value);
    },
    $signature: 45
  };
  A._SimpleNodeValidator.prototype = {
    _SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes(uriPolicy, allowedAttributes, allowedElements, allowedUriAttributes) {
      var legalAttributes, extraUriAttributes, t1;
      this.allowedElements.addAll$1(0, allowedElements);
      legalAttributes = allowedAttributes.where$1(0, new A._SimpleNodeValidator_closure());
      extraUriAttributes = allowedAttributes.where$1(0, new A._SimpleNodeValidator_closure0());
      this.allowedAttributes.addAll$1(0, legalAttributes);
      t1 = this.allowedUriAttributes;
      t1.addAll$1(0, B.List_empty0);
      t1.addAll$1(0, extraUriAttributes);
    },
    allowsElement$1(element) {
      return this.allowedElements.contains$1(0, A.Element__safeTagName(element));
    },
    allowsAttribute$3(element, attributeName, value) {
      var _this = this,
        tagName = A.Element__safeTagName(element),
        t1 = _this.allowedUriAttributes;
      if (t1.contains$1(0, tagName + "::" + attributeName))
        return _this.uriPolicy.allowsUri$1(value);
      else if (t1.contains$1(0, "*::" + attributeName))
        return _this.uriPolicy.allowsUri$1(value);
      else {
        t1 = _this.allowedAttributes;
        if (t1.contains$1(0, tagName + "::" + attributeName))
          return true;
        else if (t1.contains$1(0, "*::" + attributeName))
          return true;
        else if (t1.contains$1(0, tagName + "::*"))
          return true;
        else if (t1.contains$1(0, "*::*"))
          return true;
      }
      return false;
    },
    $isNodeValidator: 1
  };
  A._SimpleNodeValidator_closure.prototype = {
    call$1(x) {
      return !B.JSArray_methods.contains$1(B.List_yrN, x);
    },
    $signature: 15
  };
  A._SimpleNodeValidator_closure0.prototype = {
    call$1(x) {
      return B.JSArray_methods.contains$1(B.List_yrN, x);
    },
    $signature: 15
  };
  A._TemplatingNodeValidator.prototype = {
    allowsAttribute$3(element, attributeName, value) {
      if (this.super$_SimpleNodeValidator$allowsAttribute(element, attributeName, value))
        return true;
      if (attributeName === "template" && value === "")
        return true;
      if (element.getAttribute("template") === "")
        return this._templateAttrs.contains$1(0, attributeName);
      return false;
    }
  };
  A._TemplatingNodeValidator_closure.prototype = {
    call$1(attr) {
      return "TEMPLATE::" + attr;
    },
    $signature: 38
  };
  A._SvgNodeValidator.prototype = {
    allowsElement$1(element) {
      var t1;
      if (type$.ScriptElement._is(element))
        return false;
      t1 = type$.SvgElement._is(element);
      if (t1 && A.Element__safeTagName(element) === "foreignObject")
        return false;
      if (t1)
        return true;
      return false;
    },
    allowsAttribute$3(element, attributeName, value) {
      if (attributeName === "is" || B.JSString_methods.startsWith$1(attributeName, "on"))
        return false;
      return this.allowsElement$1(element);
    },
    $isNodeValidator: 1
  };
  A.FixedSizeListIterator.prototype = {
    moveNext$0() {
      var _this = this,
        nextPosition = _this._position + 1,
        t1 = _this._html$_length;
      if (nextPosition < t1) {
        _this._current = J.$index$asx(_this._array, nextPosition);
        _this._position = nextPosition;
        return true;
      }
      _this._current = null;
      _this._position = t1;
      return false;
    },
    get$current(_) {
      var t1 = this._current;
      return t1 == null ? A._instanceType(this)._precomputed1._as(t1) : t1;
    }
  };
  A.Console.prototype = {
    warn$1(arg) {
      return typeof console != "undefined" ? window.console.warn(arg) : null;
    }
  };
  A._DOMWindowCrossFrame.prototype = {};
  A._SameOriginUriPolicy.prototype = {};
  A._ValidatingTreeSanitizer.prototype = {
    sanitizeTree$1(node) {
      var previousTreeModifications,
        walk = new A._ValidatingTreeSanitizer_sanitizeTree_walk(this);
      do {
        previousTreeModifications = this.numTreeModifications;
        walk.call$2(node, null);
      } while (previousTreeModifications !== this.numTreeModifications);
    },
    _removeNode$2(node, $parent) {
      ++this.numTreeModifications;
      if ($parent == null || $parent !== node.parentNode)
        J.remove$0$ax(node);
      else
        $parent.removeChild(node);
    },
    _sanitizeUntrustedElement$2(element, $parent) {
      var corruptedTest1, elementText, elementTagName, exception, t1,
        corrupted = true,
        attrs = null, isAttr = null;
      try {
        attrs = J.get$attributes$x(element);
        isAttr = attrs._html$_element.getAttribute("is");
        corruptedTest1 = function(element) {
          if (!(element.attributes instanceof NamedNodeMap))
            return true;
          if (element.id == "lastChild" || element.name == "lastChild" || element.id == "previousSibling" || element.name == "previousSibling" || element.id == "children" || element.name == "children")
            return true;
          var childNodes = element.childNodes;
          if (element.lastChild && element.lastChild !== childNodes[childNodes.length - 1])
            return true;
          if (element.children)
            if (!(element.children instanceof HTMLCollection || element.children instanceof NodeList))
              return true;
          var length = 0;
          if (element.children)
            length = element.children.length;
          for (var i = 0; i < length; i++) {
            var child = element.children[i];
            if (child.id == "attributes" || child.name == "attributes" || child.id == "lastChild" || child.name == "lastChild" || child.id == "previousSibling" || child.name == "previousSibling" || child.id == "children" || child.name == "children")
              return true;
          }
          return false;
        }(element);
        corrupted = corruptedTest1 ? true : !(element.attributes instanceof NamedNodeMap);
      } catch (exception) {
      }
      elementText = "element unprintable";
      try {
        elementText = J.toString$0$(element);
      } catch (exception) {
      }
      try {
        elementTagName = A.Element__safeTagName(element);
        this._sanitizeElement$7(element, $parent, corrupted, elementText, elementTagName, attrs, isAttr);
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.ArgumentError)
          throw exception;
        else {
          this._removeNode$2(element, $parent);
          window;
          t1 = "Removing corrupted element " + A.S(elementText);
          if (typeof console != "undefined")
            window.console.warn(t1);
        }
      }
    },
    _sanitizeElement$7(element, $parent, corrupted, text, tag, attrs, isAttr) {
      var t1, keys, i, $name, t2, t3, _this = this;
      if (corrupted) {
        _this._removeNode$2(element, $parent);
        window;
        t1 = "Removing element due to corrupted attributes on <" + text + ">";
        if (typeof console != "undefined")
          window.console.warn(t1);
        return;
      }
      if (!_this.validator.allowsElement$1(element)) {
        _this._removeNode$2(element, $parent);
        window;
        t1 = "Removing disallowed element <" + tag + "> from " + A.S($parent);
        if (typeof console != "undefined")
          window.console.warn(t1);
        return;
      }
      if (isAttr != null)
        if (!_this.validator.allowsAttribute$3(element, "is", isAttr)) {
          _this._removeNode$2(element, $parent);
          window;
          t1 = "Removing disallowed type extension <" + tag + ' is="' + isAttr + '">';
          if (typeof console != "undefined")
            window.console.warn(t1);
          return;
        }
      t1 = attrs.get$keys(attrs);
      keys = A._setArrayType(t1.slice(0), A._arrayInstanceType(t1));
      for (i = attrs.get$keys(attrs).length - 1, t1 = attrs._html$_element; i >= 0; --i) {
        $name = keys[i];
        t2 = _this.validator;
        t3 = J.toLowerCase$0$s($name);
        A._asString($name);
        if (!t2.allowsAttribute$3(element, t3, t1.getAttribute($name))) {
          window;
          t2 = "Removing disallowed attribute <" + tag + " " + $name + '="' + A.S(t1.getAttribute($name)) + '">';
          if (typeof console != "undefined")
            window.console.warn(t2);
          t1.removeAttribute($name);
        }
      }
      if (type$.TemplateElement._is(element)) {
        t1 = element.content;
        t1.toString;
        _this.sanitizeTree$1(t1);
      }
    }
  };
  A._ValidatingTreeSanitizer_sanitizeTree_walk.prototype = {
    call$2(node, $parent) {
      var child, nextChild, t2, t3, exception,
        t1 = this.$this;
      switch (node.nodeType) {
        case 1:
          t1._sanitizeUntrustedElement$2(node, $parent);
          break;
        case 8:
        case 11:
        case 3:
        case 4:
          break;
        default:
          t1._removeNode$2(node, $parent);
      }
      child = node.lastChild;
      for (; child != null;) {
        nextChild = null;
        try {
          nextChild = child.previousSibling;
          if (nextChild != null) {
            t2 = nextChild.nextSibling;
            t3 = child;
            t3 = t2 == null ? t3 != null : t2 !== t3;
            t2 = t3;
          } else
            t2 = false;
          if (t2) {
            t2 = A.StateError$("Corrupt HTML");
            throw A.wrapException(t2);
          }
        } catch (exception) {
          t2 = child;
          ++t1.numTreeModifications;
          t3 = t2.parentNode;
          if (node !== t3) {
            if (t3 != null)
              t3.removeChild(t2);
          } else
            node.removeChild(t2);
          child = null;
          nextChild = node.lastChild;
        }
        if (child != null)
          this.call$2(child, node);
        child = nextChild;
      }
    },
    $signature: 111
  };
  A._CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase.prototype = {};
  A._DomRectList_JavaScriptObject_ListMixin.prototype = {};
  A._DomRectList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._DomStringList_JavaScriptObject_ListMixin.prototype = {};
  A._DomStringList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._FileList_JavaScriptObject_ListMixin.prototype = {};
  A._FileList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._HtmlCollection_JavaScriptObject_ListMixin.prototype = {};
  A._HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._MidiInputMap_JavaScriptObject_MapMixin.prototype = {};
  A._MidiOutputMap_JavaScriptObject_MapMixin.prototype = {};
  A._MimeTypeArray_JavaScriptObject_ListMixin.prototype = {};
  A._MimeTypeArray_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._NodeList_JavaScriptObject_ListMixin.prototype = {};
  A._NodeList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._PluginArray_JavaScriptObject_ListMixin.prototype = {};
  A._PluginArray_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._RtcStatsReport_JavaScriptObject_MapMixin.prototype = {};
  A._SourceBufferList_EventTarget_ListMixin.prototype = {};
  A._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.prototype = {};
  A._SpeechGrammarList_JavaScriptObject_ListMixin.prototype = {};
  A._SpeechGrammarList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._Storage_JavaScriptObject_MapMixin.prototype = {};
  A._TextTrackCueList_JavaScriptObject_ListMixin.prototype = {};
  A._TextTrackCueList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._TextTrackList_EventTarget_ListMixin.prototype = {};
  A._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.prototype = {};
  A._TouchList_JavaScriptObject_ListMixin.prototype = {};
  A._TouchList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A.__CssRuleList_JavaScriptObject_ListMixin.prototype = {};
  A.__CssRuleList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A.__GamepadList_JavaScriptObject_ListMixin.prototype = {};
  A.__GamepadList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A.__NamedNodeMap_JavaScriptObject_ListMixin.prototype = {};
  A.__NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin.prototype = {};
  A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A.__StyleSheetList_JavaScriptObject_ListMixin.prototype = {};
  A.__StyleSheetList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._StructuredClone.prototype = {
    findSlot$1(value) {
      var i,
        t1 = this.values,
        $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      t1.push(value);
      this.copies.push(null);
      return $length;
    },
    walk$1(e) {
      var slot, t2, copy, _this = this, t1 = {};
      if (e == null)
        return e;
      if (A._isBool(e))
        return e;
      if (typeof e == "number")
        return e;
      if (typeof e == "string")
        return e;
      if (e instanceof A.DateTime)
        return new Date(e._core$_value);
      if (type$.RegExp._is(e))
        throw A.wrapException(A.UnimplementedError$("structured clone of RegExp"));
      if (type$.File._is(e))
        return e;
      if (type$.Blob._is(e))
        return e;
      if (type$.FileList._is(e))
        return e;
      if (type$.ImageData._is(e))
        return e;
      if (type$.NativeByteBuffer._is(e) || type$.NativeTypedData._is(e) || type$.MessagePort._is(e))
        return e;
      if (type$.Map_dynamic_dynamic._is(e)) {
        slot = _this.findSlot$1(e);
        t2 = _this.copies;
        copy = t1.copy = t2[slot];
        if (copy != null)
          return copy;
        copy = {};
        t1.copy = copy;
        t2[slot] = copy;
        J.forEach$1$ax(e, new A._StructuredClone_walk_closure(t1, _this));
        return t1.copy;
      }
      if (type$.List_dynamic._is(e)) {
        slot = _this.findSlot$1(e);
        copy = _this.copies[slot];
        if (copy != null)
          return copy;
        return _this.copyList$2(e, slot);
      }
      if (type$.JSObject._is(e)) {
        slot = _this.findSlot$1(e);
        t2 = _this.copies;
        copy = t1.copy = t2[slot];
        if (copy != null)
          return copy;
        copy = {};
        t1.copy = copy;
        t2[slot] = copy;
        _this.forEachObjectKey$2(e, new A._StructuredClone_walk_closure0(t1, _this));
        return t1.copy;
      }
      throw A.wrapException(A.UnimplementedError$("structured clone of other type"));
    },
    copyList$2(e, slot) {
      var i,
        t1 = J.getInterceptor$asx(e),
        $length = t1.get$length(e),
        copy = new Array($length);
      this.copies[slot] = copy;
      for (i = 0; i < $length; ++i)
        copy[i] = this.walk$1(t1.$index(e, i));
      return copy;
    }
  };
  A._StructuredClone_walk_closure.prototype = {
    call$2(key, value) {
      this._box_0.copy[key] = this.$this.walk$1(value);
    },
    $signature: 40
  };
  A._StructuredClone_walk_closure0.prototype = {
    call$2(key, value) {
      this._box_0.copy[key] = this.$this.walk$1(value);
    },
    $signature: 49
  };
  A._AcceptStructuredClone.prototype = {
    findSlot$1(value) {
      var i,
        t1 = this.values,
        $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      t1.push(value);
      this.copies.push(null);
      return $length;
    },
    walk$1(e) {
      var slot, t1, copy, t2, l, $length, i, _this = this, _box_0 = {};
      if (e == null)
        return e;
      if (A._isBool(e))
        return e;
      if (typeof e == "number")
        return e;
      if (typeof e == "string")
        return e;
      if (e instanceof Date)
        return A.DateTime$fromMillisecondsSinceEpoch(e.getTime(), true);
      if (e instanceof RegExp)
        throw A.wrapException(A.UnimplementedError$("structured clone of RegExp"));
      if (typeof Promise != "undefined" && e instanceof Promise)
        return A.promiseToFuture(e, type$.dynamic);
      if (A.isJavaScriptSimpleObject(e)) {
        slot = _this.findSlot$1(e);
        t1 = _this.copies;
        copy = _box_0.copy = t1[slot];
        if (copy != null)
          return copy;
        t2 = type$.dynamic;
        copy = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
        _box_0.copy = copy;
        t1[slot] = copy;
        _this.forEachJsField$2(e, new A._AcceptStructuredClone_walk_closure(_box_0, _this));
        return _box_0.copy;
      }
      if (e instanceof Array) {
        l = e;
        slot = _this.findSlot$1(l);
        t1 = _this.copies;
        copy = t1[slot];
        if (copy != null)
          return copy;
        t2 = J.getInterceptor$asx(l);
        $length = t2.get$length(l);
        copy = _this.mustCopy ? new Array($length) : l;
        t1[slot] = copy;
        for (t1 = J.getInterceptor$ax(copy), i = 0; i < $length; ++i)
          t1.$indexSet(copy, i, _this.walk$1(t2.$index(l, i)));
        return copy;
      }
      return e;
    },
    convertNativeToDart_AcceptStructuredClone$2$mustCopy(object, mustCopy) {
      this.mustCopy = mustCopy;
      return this.walk$1(object);
    }
  };
  A._AcceptStructuredClone_walk_closure.prototype = {
    call$2(key, value) {
      var t1 = this._box_0.copy,
        t2 = this.$this.walk$1(value);
      J.$indexSet$ax(t1, key, t2);
      return t2;
    },
    $signature: 112
  };
  A._convertDartToNative_Value_closure.prototype = {
    call$1(element) {
      this.array.push(A._convertDartToNative_Value(element));
    },
    $signature: 8
  };
  A.convertDartToNative_Dictionary_closure.prototype = {
    call$2(key, value) {
      this.object[key] = A._convertDartToNative_Value(value);
    },
    $signature: 40
  };
  A._StructuredCloneDart2Js.prototype = {
    forEachObjectKey$2(object, action) {
      var t1, t2, _i, key;
      for (t1 = Object.keys(object), t2 = t1.length, _i = 0; _i < t2; ++_i) {
        key = t1[_i];
        action.call$2(key, object[key]);
      }
    }
  };
  A._AcceptStructuredCloneDart2Js.prototype = {
    forEachJsField$2(object, action) {
      var t1, t2, _i, key;
      for (t1 = Object.keys(object), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        key = t1[_i];
        action.call$2(key, object[key]);
      }
    }
  };
  A.FilteredElementList.prototype = {
    get$_html_common$_iterable() {
      var t1 = this._childNodes,
        t2 = A._instanceType(t1);
      return new A.MappedIterable(new A.WhereIterable(t1, new A.FilteredElementList__iterable_closure(), t2._eval$1("WhereIterable<ListMixin.E>")), new A.FilteredElementList__iterable_closure0(), t2._eval$1("MappedIterable<ListMixin.E,Element>"));
    },
    forEach$1(_, f) {
      B.JSArray_methods.forEach$1(A.List_List$from(this.get$_html_common$_iterable(), false, type$.Element), f);
    },
    $indexSet(_, index, value) {
      var t1 = this.get$_html_common$_iterable();
      J.replaceWith$1$x(t1._f.call$1(J.elementAt$1$ax(t1.__internal$_iterable, index)), value);
    },
    set$length(_, newLength) {
      var len = J.get$length$asx(this.get$_html_common$_iterable().__internal$_iterable);
      if (newLength >= len)
        return;
      else if (newLength < 0)
        throw A.wrapException(A.ArgumentError$("Invalid list length", null));
      this.removeRange$2(0, newLength, len);
    },
    add$1(_, value) {
      this._childNodes._this.appendChild(value);
    },
    contains$1(_, needle) {
      if (!type$.Element._is(needle))
        return false;
      return needle.parentNode === this._html_common$_node;
    },
    setRange$4(_, start, end, iterable, skipCount) {
      throw A.wrapException(A.UnsupportedError$("Cannot setRange on filtered list"));
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    removeRange$2(_, start, end) {
      var t1 = this.get$_html_common$_iterable();
      t1 = A.SkipIterable_SkipIterable(t1, start, t1.$ti._eval$1("Iterable.E"));
      B.JSArray_methods.forEach$1(A.List_List$from(A.TakeIterable_TakeIterable(t1, end - start, A._instanceType(t1)._eval$1("Iterable.E")), true, type$.dynamic), new A.FilteredElementList_removeRange_closure());
    },
    insert$2(_, index, value) {
      var t1, element;
      if (index === J.get$length$asx(this.get$_html_common$_iterable().__internal$_iterable))
        this._childNodes._this.appendChild(value);
      else {
        t1 = this.get$_html_common$_iterable();
        element = t1._f.call$1(J.elementAt$1$ax(t1.__internal$_iterable, index));
        element.parentNode.insertBefore(value, element);
      }
    },
    get$length(_) {
      return J.get$length$asx(this.get$_html_common$_iterable().__internal$_iterable);
    },
    $index(_, index) {
      var t1 = this.get$_html_common$_iterable();
      return t1._f.call$1(J.elementAt$1$ax(t1.__internal$_iterable, index));
    },
    get$iterator(_) {
      var t1 = A.List_List$from(this.get$_html_common$_iterable(), false, type$.Element);
      return new J.ArrayIterator(t1, t1.length);
    }
  };
  A.FilteredElementList__iterable_closure.prototype = {
    call$1(n) {
      return type$.Element._is(n);
    },
    $signature: 52
  };
  A.FilteredElementList__iterable_closure0.prototype = {
    call$1(n) {
      return type$.Element._as(n);
    },
    $signature: 113
  };
  A.FilteredElementList_removeRange_closure.prototype = {
    call$1(el) {
      return J.remove$0$ax(el);
    },
    $signature: 8
  };
  A.Database.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.Index.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.KeyRange.prototype = {$isKeyRange: 1};
  A.ObjectStore.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.VersionChangeEvent.prototype = {
    get$target(receiver) {
      return receiver.target;
    }
  };
  A.JsObject__convertDataTree__convert.prototype = {
    call$1(o) {
      var convertedMap, t2, key, convertedList,
        t1 = this._convertedObjects;
      if (t1.containsKey$1(0, o))
        return t1.$index(0, o);
      if (type$.Map_dynamic_dynamic._is(o)) {
        convertedMap = {};
        t1.$indexSet(0, o, convertedMap);
        for (t1 = J.getInterceptor$x(o), t2 = J.get$iterator$ax(t1.get$keys(o)); t2.moveNext$0();) {
          key = t2.get$current(t2);
          convertedMap[key] = this.call$1(t1.$index(o, key));
        }
        return convertedMap;
      } else if (type$.Iterable_dynamic._is(o)) {
        convertedList = [];
        t1.$indexSet(0, o, convertedList);
        B.JSArray_methods.addAll$1(convertedList, J.map$1$1$ax(o, this, type$.dynamic));
        return convertedList;
      } else
        return A._convertToJS(o);
    },
    $signature: 114
  };
  A._convertToJS_closure.prototype = {
    call$1(o) {
      var jsFunction = function(_call, f, captureThis) {
        return function() {
          return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
        };
      }(A._callDartFunction, o, false);
      A._defineProperty(jsFunction, $.$get$DART_CLOSURE_PROPERTY_NAME(), o);
      return jsFunction;
    },
    $signature: 20
  };
  A._convertToJS_closure0.prototype = {
    call$1(o) {
      return new this.ctor(o);
    },
    $signature: 20
  };
  A._wrapToDart_closure.prototype = {
    call$1(o) {
      return new A.JsFunction(o);
    },
    $signature: 115
  };
  A._wrapToDart_closure0.prototype = {
    call$1(o) {
      return new A.JsArray(o, type$.JsArray_dynamic);
    },
    $signature: 116
  };
  A._wrapToDart_closure1.prototype = {
    call$1(o) {
      return new A.JsObject(o);
    },
    $signature: 117
  };
  A.JsObject.prototype = {
    $index(_, property) {
      if (typeof property != "string" && typeof property != "number")
        throw A.wrapException(A.ArgumentError$("property is not a String or num", null));
      return A._convertToDart(this._js$_jsObject[property]);
    },
    $indexSet(_, property, value) {
      if (typeof property != "string" && typeof property != "number")
        throw A.wrapException(A.ArgumentError$("property is not a String or num", null));
      this._js$_jsObject[property] = A._convertToJS(value);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.JsObject && this._js$_jsObject === other._js$_jsObject;
    },
    toString$0(_) {
      var t1, exception;
      try {
        t1 = String(this._js$_jsObject);
        return t1;
      } catch (exception) {
        t1 = this.super$Object$toString(0);
        return t1;
      }
    },
    callMethod$2(method, args) {
      var t1 = this._js$_jsObject,
        t2 = args == null ? null : A.List_List$from(new A.MappedListIterable(args, A.js___convertToJS$closure(), A._arrayInstanceType(args)._eval$1("MappedListIterable<1,@>")), true, type$.dynamic);
      return A._convertToDart(t1[method].apply(t1, t2));
    },
    get$hashCode(_) {
      return 0;
    }
  };
  A.JsFunction.prototype = {};
  A.JsArray.prototype = {
    _checkIndex$1(index) {
      var _this = this,
        t1 = index < 0 || index >= _this.get$length(_this);
      if (t1)
        throw A.wrapException(A.RangeError$range(index, 0, _this.get$length(_this), null, null));
    },
    $index(_, index) {
      if (A._isInt(index))
        this._checkIndex$1(index);
      return this.super$JsObject$$index(0, index);
    },
    $indexSet(_, index, value) {
      if (A._isInt(index))
        this._checkIndex$1(index);
      this.super$_JsArray_JsObject_ListMixin$$indexSet(0, index, value);
    },
    get$length(_) {
      var len = this._js$_jsObject.length;
      if (typeof len === "number" && len >>> 0 === len)
        return len;
      throw A.wrapException(A.StateError$("Bad JsArray length"));
    },
    set$length(_, $length) {
      this.super$_JsArray_JsObject_ListMixin$$indexSet(0, "length", $length);
    },
    add$1(_, value) {
      this.callMethod$2("push", [value]);
    },
    setRange$4(_, start, end, iterable, skipCount) {
      var $length, args;
      A.JsArray__checkRange(start, end, this.get$length(this));
      $length = end - start;
      if ($length === 0)
        return;
      args = [start, $length];
      B.JSArray_methods.addAll$1(args, J.skip$1$ax(iterable, skipCount).take$1(0, $length));
      this.callMethod$2("splice", args);
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._JsArray_JsObject_ListMixin.prototype = {
    $indexSet(_, property, value) {
      return this.super$JsObject$$indexSet(0, property, value);
    }
  };
  A.NullRejectionException.prototype = {
    toString$0(_) {
      return "Promise was rejected with a value of `" + (this.isUndefined ? "undefined" : "null") + "`.";
    },
    $isException: 1
  };
  A.promiseToFuture_closure.prototype = {
    call$1(r) {
      return this.completer.complete$1(0, r);
    },
    $signature: 8
  };
  A.promiseToFuture_closure0.prototype = {
    call$1(e) {
      if (e == null)
        return this.completer.completeError$1(new A.NullRejectionException(e === undefined));
      return this.completer.completeError$1(e);
    },
    $signature: 8
  };
  A.Point.prototype = {
    toString$0(_) {
      return "Point(" + A.S(this.x) + ", " + A.S(this.y) + ")";
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Point && this.x === other.x && this.y === other.y;
    },
    get$hashCode(_) {
      return A.SystemHash_hash2(B.JSNumber_methods.get$hashCode(this.x), B.JSNumber_methods.get$hashCode(this.y), 0);
    },
    $add(_, other) {
      var t1 = this.$ti,
        t2 = t1._precomputed1;
      return new A.Point(t2._as(this.x + other.x), t2._as(this.y + other.y), t1);
    },
    $sub(_, other) {
      var t1 = this.$ti,
        t2 = t1._precomputed1;
      return new A.Point(t2._as(this.x - other.x), t2._as(this.y - other.y), t1);
    },
    $mul(_, factor) {
      var t1 = this.$ti,
        t2 = t1._precomputed1;
      return new A.Point(t2._as(this.x * factor), t2._as(this.y * factor), t1);
    }
  };
  A.ClipPathElement.prototype = {$isClipPathElement: 1};
  A.DefsElement.prototype = {$isDefsElement: 1};
  A.GeometryElement.prototype = {};
  A.GraphicsElement.prototype = {};
  A.Length.prototype = {$isLength: 1};
  A.LengthList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet(receiver, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.StateError$("No elements"));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.Number.prototype = {$isNumber: 1};
  A.NumberList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet(receiver, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.StateError$("No elements"));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.PathElement.prototype = {$isPathElement: 1};
  A.PointList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.ScriptElement0.prototype = {$isScriptElement0: 1};
  A.StringList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet(receiver, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.StateError$("No elements"));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.SvgElement.prototype = {
    get$children(receiver) {
      return new A.FilteredElementList(receiver, new A._ChildNodeListLazy(receiver));
    },
    createFragment$3$treeSanitizer$validator(receiver, svg, treeSanitizer, validator) {
      var html, t2, fragment, svgFragment, root,
        t1 = A._setArrayType([], type$.JSArray_NodeValidator);
      t1.push(A._Html5NodeValidator$(null));
      t1.push(A._TemplatingNodeValidator$());
      t1.push(new A._SvgNodeValidator());
      treeSanitizer = new A._ValidatingTreeSanitizer(new A.NodeValidatorBuilder(t1));
      html = '<svg version="1.1">' + svg + "</svg>";
      t1 = document;
      t2 = t1.body;
      t2.toString;
      fragment = B.BodyElement_methods.createFragment$2$treeSanitizer(t2, html, treeSanitizer);
      svgFragment = t1.createDocumentFragment();
      t1 = new A._ChildNodeListLazy(fragment);
      root = t1.get$single(t1);
      for (; t1 = root.firstChild, t1 != null;)
        svgFragment.appendChild(t1);
      return svgFragment;
    },
    focus$0(receiver) {
      return receiver.focus();
    },
    $isSvgElement: 1
  };
  A.SvgSvgElement.prototype = {$isSvgSvgElement: 1};
  A.Transform0.prototype = {$isTransform0: 1};
  A.TransformList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw A.wrapException(A.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet(receiver, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.StateError$("No elements"));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._LengthList_JavaScriptObject_ListMixin.prototype = {};
  A._LengthList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._NumberList_JavaScriptObject_ListMixin.prototype = {};
  A._NumberList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._StringList_JavaScriptObject_ListMixin.prototype = {};
  A._StringList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._TransformList_JavaScriptObject_ListMixin.prototype = {};
  A._TransformList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A.Endian.prototype = {};
  A.ClipOp.prototype = {
    toString$0(_) {
      return "ClipOp." + this._name;
    }
  };
  A.PathFillType.prototype = {
    toString$0(_) {
      return "PathFillType." + this._name;
    }
  };
  A._ChannelCallbackRecord.prototype = {
    invoke$2(dataArg, callbackArg) {
      A.invoke2(this._callback, this._ui$_zone, dataArg, callbackArg);
    }
  };
  A._StoredMessage.prototype = {
    invoke$1(dataArg) {
      A.invoke1(this._callback, this._ui$_zone, dataArg);
    }
  };
  A._Channel.prototype = {
    get$length(_) {
      var t1 = this._ui$_queue;
      return t1.get$length(t1);
    },
    push$1(message) {
      var t1, result, _this = this;
      if (!_this._draining && _this._channelCallbackRecord != null) {
        _this._channelCallbackRecord.invoke$2(message.data, message.get$invoke());
        return false;
      }
      t1 = _this._capacity;
      if (t1 <= 0)
        return true;
      result = _this._dropOverflowMessages$1(t1 - 1);
      _this._ui$_queue._add$1(0, message);
      return result;
    },
    _dropOverflowMessages$1(lengthLimit) {
      var t1, result, message;
      for (t1 = this._ui$_queue, result = false; (t1._tail - t1._head & t1._table.length - 1) >>> 0 > lengthLimit; result = true) {
        message = t1.removeFirst$0();
        A.invoke1(message._callback, message._ui$_zone, null);
      }
      return result;
    },
    _drainStep$0() {
      var _this = this,
        t1 = _this._ui$_queue;
      if (!t1.get$isEmpty(t1) && _this._channelCallbackRecord != null) {
        t1 = t1.removeFirst$0();
        _this._channelCallbackRecord.invoke$2(t1.data, t1.get$invoke());
        A.scheduleMicrotask(_this.get$_drainStep());
      } else
        _this._draining = false;
    }
  };
  A.ChannelBuffers.prototype = {
    push$3($name, data, callback) {
      this._channels.putIfAbsent$2(0, $name, new A.ChannelBuffers_push_closure()).push$1(new A._StoredMessage(data, callback, $.Zone__current));
    },
    setListener$2($name, callback) {
      var channel = this._channels.putIfAbsent$2(0, $name, new A.ChannelBuffers_setListener_closure()),
        t1 = channel._channelCallbackRecord;
      channel._channelCallbackRecord = new A._ChannelCallbackRecord(callback, $.Zone__current);
      if (t1 == null && !channel._draining) {
        channel._draining = true;
        A.scheduleMicrotask(channel.get$_drainStep());
      }
    },
    resize$2(_, $name, newSize) {
      var t1 = this._channels,
        channel = t1.$index(0, $name);
      if (channel == null)
        t1.$indexSet(0, $name, new A._Channel(A.ListQueue$(newSize, type$._StoredMessage), newSize));
      else {
        channel._capacity = newSize;
        channel._dropOverflowMessages$1(newSize);
      }
    }
  };
  A.ChannelBuffers_push_closure.prototype = {
    call$0() {
      return new A._Channel(A.ListQueue$(1, type$._StoredMessage), 1);
    },
    $signature: 46
  };
  A.ChannelBuffers_setListener_closure.prototype = {
    call$0() {
      return new A._Channel(A.ListQueue$(1, type$._StoredMessage), 1);
    },
    $signature: 46
  };
  A.OffsetBase.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.OffsetBase && other._dx === this._dx && other._dy === this._dy;
    },
    get$hashCode(_) {
      return A.hashValues(this._dx, this._dy, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      return "OffsetBase(" + B.JSNumber_methods.toStringAsFixed$1(this._dx, 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(this._dy, 1) + ")";
    }
  };
  A.Offset.prototype = {
    get$distance() {
      var t1 = this._dx,
        t2 = this._dy;
      return Math.sqrt(t1 * t1 + t2 * t2);
    },
    $sub(_, other) {
      return new A.Offset(this._dx - other._dx, this._dy - other._dy);
    },
    $add(_, other) {
      return new A.Offset(this._dx + other._dx, this._dy + other._dy);
    },
    $mul(_, operand) {
      return new A.Offset(this._dx * operand, this._dy * operand);
    },
    $div(_, operand) {
      return new A.Offset(this._dx / operand, this._dy / operand);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Offset && other._dx === this._dx && other._dy === this._dy;
    },
    get$hashCode(_) {
      return A.hashValues(this._dx, this._dy, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      return "Offset(" + B.JSNumber_methods.toStringAsFixed$1(this._dx, 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(this._dy, 1) + ")";
    }
  };
  A.Size.prototype = {
    get$isEmpty(_) {
      return this._dx <= 0 || this._dy <= 0;
    },
    $sub(_, other) {
      var _this = this;
      if (other instanceof A.Size)
        return new A.Offset(_this._dx - other._dx, _this._dy - other._dy);
      if (other instanceof A.Offset)
        return new A.Size(_this._dx - other._dx, _this._dy - other._dy);
      throw A.wrapException(A.ArgumentError$(other, null));
    },
    $add(_, other) {
      return new A.Size(this._dx + other._dx, this._dy + other._dy);
    },
    $mul(_, operand) {
      return new A.Size(this._dx * operand, this._dy * operand);
    },
    $div(_, operand) {
      return new A.Size(this._dx / operand, this._dy / operand);
    },
    center$1(origin) {
      return new A.Offset(origin._dx + this._dx / 2, origin._dy + this._dy / 2);
    },
    contains$1(_, offset) {
      var t1 = offset._dx;
      if (t1 >= 0)
        if (t1 < this._dx) {
          t1 = offset._dy;
          t1 = t1 >= 0 && t1 < this._dy;
        } else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Size && other._dx === this._dx && other._dy === this._dy;
    },
    get$hashCode(_) {
      return A.hashValues(this._dx, this._dy, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      return "Size(" + B.JSNumber_methods.toStringAsFixed$1(this._dx, 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(this._dy, 1) + ")";
    }
  };
  A.Rect.prototype = {
    get$isEmpty(_) {
      var _this = this;
      return _this.left >= _this.right || _this.top >= _this.bottom;
    },
    shift$1(offset) {
      var _this = this,
        t1 = offset._dx,
        t2 = offset._dy;
      return new A.Rect(_this.left + t1, _this.top + t2, _this.right + t1, _this.bottom + t2);
    },
    translate$2(_, translateX, translateY) {
      var _this = this;
      return new A.Rect(_this.left + translateX, _this.top + translateY, _this.right + translateX, _this.bottom + translateY);
    },
    inflate$1(delta) {
      var _this = this;
      return new A.Rect(_this.left - delta, _this.top - delta, _this.right + delta, _this.bottom + delta);
    },
    intersect$1(other) {
      var _this = this;
      return new A.Rect(Math.max(_this.left, other.left), Math.max(_this.top, other.top), Math.min(_this.right, other.right), Math.min(_this.bottom, other.bottom));
    },
    expandToInclude$1(other) {
      var _this = this;
      return new A.Rect(Math.min(_this.left, other.left), Math.min(_this.top, other.top), Math.max(_this.right, other.right), Math.max(_this.bottom, other.bottom));
    },
    overlaps$1(other) {
      var _this = this;
      if (_this.right <= other.left || other.right <= _this.left)
        return false;
      if (_this.bottom <= other.top || other.bottom <= _this.top)
        return false;
      return true;
    },
    get$shortestSide() {
      var _this = this;
      return Math.min(Math.abs(_this.right - _this.left), Math.abs(_this.bottom - _this.top));
    },
    get$center() {
      var _this = this,
        t1 = _this.left,
        t2 = _this.top;
      return new A.Offset(t1 + (_this.right - t1) / 2, t2 + (_this.bottom - t2) / 2);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (A.getRuntimeType(_this) !== J.get$runtimeType$(other))
        return false;
      return other instanceof A.Rect && other.left === _this.left && other.top === _this.top && other.right === _this.right && other.bottom === _this.bottom;
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.left, _this.top, _this.right, _this.bottom, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      var _this = this;
      return "Rect.fromLTRB(" + B.JSNumber_methods.toStringAsFixed$1(_this.left, 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(_this.top, 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(_this.right, 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(_this.bottom, 1) + ")";
    }
  };
  A.Radius.prototype = {
    $sub(_, other) {
      return new A.Radius(this.x - other.x, this.y - other.y);
    },
    $add(_, other) {
      return new A.Radius(this.x + other.x, this.y + other.y);
    },
    $mul(_, operand) {
      return new A.Radius(this.x * operand, this.y * operand);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (A.getRuntimeType(_this) !== J.get$runtimeType$(other))
        return false;
      return other instanceof A.Radius && other.x === _this.x && other.y === _this.y;
    },
    get$hashCode(_) {
      return A.hashValues(this.x, this.y, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      var t1 = this.x,
        t2 = this.y;
      return t1 === t2 ? "Radius.circular(" + B.JSNumber_methods.toStringAsFixed$1(t1, 1) + ")" : "Radius.elliptical(" + B.JSNumber_methods.toStringAsFixed$1(t1, 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(t2, 1) + ")";
    }
  };
  A.RRect.prototype = {
    shift$1(offset) {
      var _this = this,
        t1 = offset._dx,
        t2 = offset._dy;
      return new A.RRect(_this.left + t1, _this.top + t2, _this.right + t1, _this.bottom + t2, _this.tlRadiusX, _this.tlRadiusY, _this.trRadiusX, _this.trRadiusY, _this.brRadiusX, _this.brRadiusY, _this.blRadiusX, _this.blRadiusY, false);
    },
    inflate$1(delta) {
      var _this = this;
      return new A.RRect(_this.left - delta, _this.top - delta, _this.right + delta, _this.bottom + delta, _this.tlRadiusX + delta, _this.tlRadiusY + delta, _this.trRadiusX + delta, _this.trRadiusY + delta, _this.brRadiusX + delta, _this.brRadiusY + delta, _this.blRadiusX + delta, _this.blRadiusY + delta, false);
    },
    _getMin$4(min, radius1, radius2, limit) {
      var sum = radius1 + radius2;
      if (sum > limit && sum !== 0)
        return Math.min(min, limit / sum);
      return min;
    },
    scaleRadii$0() {
      var _this = this,
        t1 = _this.right,
        t2 = _this.left,
        absWidth = Math.abs(t1 - t2),
        t3 = _this.bottom,
        t4 = _this.top,
        absHeight = Math.abs(t3 - t4),
        t5 = _this.blRadiusY,
        t6 = _this.tlRadiusY,
        t7 = _this.tlRadiusX,
        t8 = _this.trRadiusX,
        t9 = _this.trRadiusY,
        t10 = _this.brRadiusY,
        t11 = _this.brRadiusX,
        t12 = _this.blRadiusX,
        scale = _this._getMin$4(_this._getMin$4(_this._getMin$4(_this._getMin$4(1, t5, t6, absHeight), t7, t8, absWidth), t9, t10, absHeight), t11, t12, absWidth);
      if (scale < 1)
        return new A.RRect(t2, t4, t1, t3, t7 * scale, t6 * scale, t8 * scale, t9 * scale, t11 * scale, t10 * scale, t12 * scale, t5 * scale, false);
      return new A.RRect(t2, t4, t1, t3, t7, t6, t8, t9, t11, t10, t12, t5, false);
    },
    contains$1(_, point) {
      var t3, scaled, radiusX, x, radiusY, y, _this = this,
        t1 = point._dx,
        t2 = _this.left;
      if (!(t1 < t2))
        if (!(t1 >= _this.right)) {
          t3 = point._dy;
          t3 = t3 < _this.top || t3 >= _this.bottom;
        } else
          t3 = true;
      else
        t3 = true;
      if (t3)
        return false;
      scaled = _this.scaleRadii$0();
      radiusX = scaled.tlRadiusX;
      if (t1 < t2 + radiusX && point._dy < _this.top + scaled.tlRadiusY) {
        x = t1 - t2 - radiusX;
        radiusY = scaled.tlRadiusY;
        y = point._dy - _this.top - radiusY;
      } else {
        t3 = _this.right;
        radiusX = scaled.trRadiusX;
        if (t1 > t3 - radiusX && point._dy < _this.top + scaled.trRadiusY) {
          x = t1 - t3 + radiusX;
          radiusY = scaled.trRadiusY;
          y = point._dy - _this.top - radiusY;
        } else {
          radiusX = scaled.brRadiusX;
          if (t1 > t3 - radiusX && point._dy > _this.bottom - scaled.brRadiusY) {
            x = t1 - t3 + radiusX;
            radiusY = scaled.brRadiusY;
            y = point._dy - _this.bottom + radiusY;
          } else {
            radiusX = scaled.blRadiusX;
            if (t1 < t2 + radiusX && point._dy > _this.bottom - scaled.blRadiusY) {
              x = t1 - t2 - radiusX;
              radiusY = scaled.blRadiusY;
              y = point._dy - _this.bottom + radiusY;
            } else
              return true;
          }
        }
      }
      x /= radiusX;
      y /= radiusY;
      if (x * x + y * y > 1)
        return false;
      return true;
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (A.getRuntimeType(_this) !== J.get$runtimeType$(other))
        return false;
      return other instanceof A.RRect && other.left === _this.left && other.top === _this.top && other.right === _this.right && other.bottom === _this.bottom && other.tlRadiusX === _this.tlRadiusX && other.tlRadiusY === _this.tlRadiusY && other.trRadiusX === _this.trRadiusX && other.trRadiusY === _this.trRadiusY && other.blRadiusX === _this.blRadiusX && other.blRadiusY === _this.blRadiusY && other.brRadiusX === _this.brRadiusX && other.brRadiusY === _this.brRadiusY;
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.left, _this.top, _this.right, _this.bottom, _this.tlRadiusX, _this.tlRadiusY, _this.trRadiusX, _this.trRadiusY, _this.blRadiusX, _this.blRadiusY, _this.brRadiusX, _this.brRadiusY, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      var t5, t6, _this = this,
        rect = B.JSNumber_methods.toStringAsFixed$1(_this.left, 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(_this.top, 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(_this.right, 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(_this.bottom, 1),
        t1 = _this.tlRadiusX,
        t2 = _this.tlRadiusY,
        t3 = _this.trRadiusX,
        t4 = _this.trRadiusY;
      if (new A.Radius(t1, t2).$eq(0, new A.Radius(t3, t4))) {
        t5 = _this.brRadiusX;
        t6 = _this.brRadiusY;
        t5 = new A.Radius(t3, t4).$eq(0, new A.Radius(t5, t6)) && new A.Radius(t5, t6).$eq(0, new A.Radius(_this.blRadiusX, _this.blRadiusY));
      } else
        t5 = false;
      if (t5) {
        if (t1 === t2)
          return "RRect.fromLTRBR(" + rect + ", " + B.JSNumber_methods.toStringAsFixed$1(t1, 1) + ")";
        return "RRect.fromLTRBXY(" + rect + ", " + B.JSNumber_methods.toStringAsFixed$1(t1, 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(t2, 1) + ")";
      }
      return "RRect.fromLTRBAndCorners(" + rect + ", topLeft: " + new A.Radius(t1, t2).toString$0(0) + ", topRight: " + new A.Radius(t3, t4).toString$0(0) + ", bottomRight: " + new A.Radius(_this.brRadiusX, _this.brRadiusY).toString$0(0) + ", bottomLeft: " + new A.Radius(_this.blRadiusX, _this.blRadiusY).toString$0(0) + ")";
    }
  };
  A._HashEnd.prototype = {};
  A.webOnlyInitializePlatform_closure.prototype = {
    call$0() {
      A.ensureLineLookupInitialized();
    },
    $signature: 0
  };
  A.KeyEventType.prototype = {
    toString$0(_) {
      return "KeyEventType." + this._name;
    }
  };
  A.KeyData.prototype = {
    _logicalToString$0() {
      var t1 = this.logical;
      return "0x" + B.JSInt_methods.toRadixString$1(t1, 16) + new A.KeyData__logicalToString_closure(B.JSNumber_methods.floor$0(t1 / 4294967296)).call$0();
    },
    _escapeCharacter$0() {
      var t1 = this.character;
      if (t1 == null)
        return "<none>";
      switch (t1) {
        case "\n":
          return '"\\n"';
        case "\t":
          return '"\\t"';
        case "\r":
          return '"\\r"';
        case "\b":
          return '"\\b"';
        case "\f":
          return '"\\f"';
        default:
          return '"' + t1 + '"';
      }
    },
    _quotedCharCode$0() {
      var t1 = this.character;
      if (t1 == null)
        return "";
      return " (0x" + new A.MappedListIterable(new A.CodeUnits(t1), new A.KeyData__quotedCharCode_closure(), type$.CodeUnits._eval$1("MappedListIterable<ListMixin.E,String>")).join$1(0, " ") + ")";
    },
    toString$0(_) {
      var _this = this,
        t1 = "KeyData(type: " + A.S(A.KeyData__typeToString(_this.type)) + ", physical: 0x" + B.JSInt_methods.toRadixString$1(_this.physical, 16) + ", logical: " + _this._logicalToString$0() + ", character: " + _this._escapeCharacter$0() + _this._quotedCharCode$0();
      return t1 + (_this.synthesized ? ", synthesized" : "") + ")";
    }
  };
  A.KeyData__logicalToString_closure.prototype = {
    call$0() {
      switch (this.planeNum) {
        case 0:
          return " (Unicode)";
        case 1:
          return " (Unprintable)";
        case 2:
          return " (Flutter)";
        case 23:
          return " (Web)";
      }
      return "";
    },
    $signature: 47
  };
  A.KeyData__quotedCharCode_closure.prototype = {
    call$1(code) {
      return B.JSString_methods.padLeft$2(B.JSInt_methods.toRadixString$1(code, 16), 2, "0");
    },
    $signature: 120
  };
  A.Color.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return other instanceof A.Color && other.value === this.value;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this.value);
    },
    toString$0(_) {
      return "Color(0x" + B.JSString_methods.padLeft$2(B.JSInt_methods.toRadixString$1(this.value, 16), 8, "0") + ")";
    }
  };
  A.StrokeCap.prototype = {
    toString$0(_) {
      return "StrokeCap." + this._name;
    }
  };
  A.StrokeJoin.prototype = {
    toString$0(_) {
      return "StrokeJoin." + this._name;
    }
  };
  A.PaintingStyle.prototype = {
    toString$0(_) {
      return "PaintingStyle." + this._name;
    }
  };
  A.BlendMode.prototype = {
    toString$0(_) {
      return "BlendMode." + this._name;
    }
  };
  A.Clip.prototype = {
    toString$0(_) {
      return "Clip." + this._name;
    }
  };
  A.MaskFilter.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.MaskFilter && other._ui$_style === this._ui$_style && other._sigma === this._sigma;
    },
    get$hashCode(_) {
      return A.hashValues(this._ui$_style, this._sigma, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      return "MaskFilter.blur(" + this._ui$_style.toString$0(0) + ", " + B.JSNumber_methods.toStringAsFixed$1(this._sigma, 1) + ")";
    }
  };
  A.FilterQuality.prototype = {
    toString$0(_) {
      return "FilterQuality." + this._name;
    }
  };
  A.Shadow.prototype = {
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      return other instanceof A.Shadow && other.color.$eq(0, _this.color) && other.offset.$eq(0, _this.offset) && other.blurRadius === _this.blurRadius;
    },
    get$hashCode(_) {
      return A.hashValues(this.color, this.offset, this.blurRadius, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      return "TextShadow(" + this.color.toString$0(0) + ", " + this.offset.toString$0(0) + ", " + A.S(this.blurRadius) + ")";
    }
  };
  A.PlatformDispatcher.prototype = {};
  A.PlatformConfiguration.prototype = {
    copyWith$4$locales$platformBrightness$semanticsEnabled$textScaleFactor(locales, platformBrightness, semanticsEnabled, textScaleFactor) {
      var _this = this,
        t1 = semanticsEnabled == null ? _this.semanticsEnabled : semanticsEnabled,
        t2 = platformBrightness == null ? _this.platformBrightness : platformBrightness,
        t3 = textScaleFactor == null ? _this.textScaleFactor : textScaleFactor,
        t4 = locales == null ? _this.locales : locales;
      return new A.PlatformConfiguration(_this.accessibilityFeatures, false, t1, t2, t3, t4, _this.defaultRouteName);
    },
    copyWith$1$textScaleFactor(textScaleFactor) {
      return this.copyWith$4$locales$platformBrightness$semanticsEnabled$textScaleFactor(null, null, null, textScaleFactor);
    },
    copyWith$1$platformBrightness(platformBrightness) {
      return this.copyWith$4$locales$platformBrightness$semanticsEnabled$textScaleFactor(null, platformBrightness, null, null);
    },
    copyWith$1$locales(locales) {
      return this.copyWith$4$locales$platformBrightness$semanticsEnabled$textScaleFactor(locales, null, null, null);
    },
    copyWith$1$semanticsEnabled(semanticsEnabled) {
      return this.copyWith$4$locales$platformBrightness$semanticsEnabled$textScaleFactor(null, null, semanticsEnabled, null);
    }
  };
  A.ViewConfiguration0.prototype = {
    toString$0(_) {
      return A.getRuntimeType(this).toString$0(0) + "[window: null, geometry: " + B.Rect_0_0_0_0.toString$0(0) + "]";
    }
  };
  A.FrameTiming.prototype = {
    toString$0(_) {
      var t5,
        t1 = A.getRuntimeType(this).toString$0(0) + "(buildDuration: ",
        t2 = this._ui$_data,
        t3 = A.Duration$(t2[2], 0),
        t4 = t2[1];
      t3 = t1 + (A.S((t3._duration - A.Duration$(t4, 0)._duration) * 0.001) + "ms") + ", rasterDuration: ";
      t1 = t2[4];
      t3 = t3 + (A.S((A.Duration$(t1, 0)._duration - A.Duration$(t2[3], 0)._duration) * 0.001) + "ms") + ", vsyncOverhead: ";
      t4 = A.Duration$(t4, 0);
      t5 = t2[0];
      return t3 + (A.S((t4._duration - A.Duration$(t5, 0)._duration) * 0.001) + "ms") + ", totalSpan: " + (A.S((A.Duration$(t1, 0)._duration - A.Duration$(t5, 0)._duration) * 0.001) + "ms") + ", layerCacheCount: " + t2[6] + ", layerCacheBytes: " + t2[7] + ", pictureCacheCount: " + t2[8] + ", pictureCacheBytes: " + t2[9] + ", frameNumber: " + B.JSArray_methods.get$last(t2) + ")";
    }
  };
  A.AppLifecycleState.prototype = {
    toString$0(_) {
      return "AppLifecycleState." + this._name;
    }
  };
  A.Locale.prototype = {
    get$languageCode(_) {
      var t1 = this._languageCode,
        t2 = B.Map_YCOho.$index(0, t1);
      return t2 == null ? t1 : t2;
    },
    get$countryCode() {
      var t1 = this._countryCode,
        t2 = B.Map_0Agg9.$index(0, t1);
      return t2 == null ? t1 : t2;
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (other instanceof A.Locale)
        if (other.get$languageCode(other) === _this.get$languageCode(_this))
          t1 = other.get$countryCode() == _this.get$countryCode();
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      return A.hashValues(this.get$languageCode(this), null, this.get$countryCode(), B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      return this._rawToString$1("_");
    },
    _rawToString$1(separator) {
      var _this = this,
        t1 = _this.get$languageCode(_this);
      if (_this._countryCode != null)
        t1 += separator + A.S(_this.get$countryCode());
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.PointerChange.prototype = {
    toString$0(_) {
      return "PointerChange." + this._name;
    }
  };
  A.PointerDeviceKind.prototype = {
    toString$0(_) {
      return "PointerDeviceKind." + this._name;
    }
  };
  A.PointerSignalKind.prototype = {
    toString$0(_) {
      return "PointerSignalKind." + this._name;
    }
  };
  A.PointerData.prototype = {
    toString$0(_) {
      return "PointerData(x: " + A.S(this.physicalX) + ", y: " + A.S(this.physicalY) + ")";
    }
  };
  A.PointerDataPacket.prototype = {};
  A.SemanticsAction.prototype = {
    toString$0(_) {
      switch (this.index) {
        case 1:
          return "SemanticsAction.tap";
        case 2:
          return "SemanticsAction.longPress";
        case 4:
          return "SemanticsAction.scrollLeft";
        case 8:
          return "SemanticsAction.scrollRight";
        case 16:
          return "SemanticsAction.scrollUp";
        case 32:
          return "SemanticsAction.scrollDown";
        case 64:
          return "SemanticsAction.increase";
        case 128:
          return "SemanticsAction.decrease";
        case 256:
          return "SemanticsAction.showOnScreen";
        case 512:
          return "SemanticsAction.moveCursorForwardByCharacter";
        case 1024:
          return "SemanticsAction.moveCursorBackwardByCharacter";
        case 2048:
          return "SemanticsAction.setSelection";
        case 4096:
          return "SemanticsAction.copy";
        case 8192:
          return "SemanticsAction.cut";
        case 16384:
          return "SemanticsAction.paste";
        case 32768:
          return "SemanticsAction.didGainAccessibilityFocus";
        case 65536:
          return "SemanticsAction.didLoseAccessibilityFocus";
        case 131072:
          return "SemanticsAction.customAction";
        case 262144:
          return "SemanticsAction.dismiss";
        case 524288:
          return "SemanticsAction.moveCursorForwardByWord";
        case 1048576:
          return "SemanticsAction.moveCursorBackwardByWord";
        case 2097152:
          return "SemanticsAction.setText";
      }
      return "";
    }
  };
  A.SemanticsFlag.prototype = {
    toString$0(_) {
      switch (this.index) {
        case 1:
          return "SemanticsFlag.hasCheckedState";
        case 2:
          return "SemanticsFlag.isChecked";
        case 4:
          return "SemanticsFlag.isSelected";
        case 8:
          return "SemanticsFlag.isButton";
        case 16:
          return "SemanticsFlag.isTextField";
        case 32:
          return "SemanticsFlag.isFocused";
        case 64:
          return "SemanticsFlag.hasEnabledState";
        case 128:
          return "SemanticsFlag.isEnabled";
        case 256:
          return "SemanticsFlag.isInMutuallyExclusiveGroup";
        case 512:
          return "SemanticsFlag.isHeader";
        case 1024:
          return "SemanticsFlag.isObscured";
        case 2048:
          return "SemanticsFlag.scopesRoute";
        case 4096:
          return "SemanticsFlag.namesRoute";
        case 8192:
          return "SemanticsFlag.isHidden";
        case 16384:
          return "SemanticsFlag.isImage";
        case 32768:
          return "SemanticsFlag.isLiveRegion";
        case 65536:
          return "SemanticsFlag.hasToggledState";
        case 131072:
          return "SemanticsFlag.isToggled";
        case 262144:
          return "SemanticsFlag.hasImplicitScrolling";
        case 524288:
          return "SemanticsFlag.isMultiline";
        case 1048576:
          return "SemanticsFlag.isReadOnly";
        case 2097152:
          return "SemanticsFlag.isFocusable";
        case 4194304:
          return "SemanticsFlag.isLink";
        case 8388608:
          return "SemanticsFlag.isSlider";
        case 16777216:
          return "SemanticsFlag.isKeyboardKey";
      }
      return "";
    }
  };
  A.SemanticsUpdateBuilder.prototype = {};
  A.PlaceholderAlignment.prototype = {
    toString$0(_) {
      return "PlaceholderAlignment." + this._name;
    }
  };
  A.FontWeight.prototype = {
    toString$0(_) {
      var t1 = B.Map_yXAeS.$index(0, this.index);
      t1.toString;
      return t1;
    }
  };
  A.TextAlign.prototype = {
    toString$0(_) {
      return "TextAlign." + this._name;
    }
  };
  A.TextBaseline.prototype = {
    toString$0(_) {
      return "TextBaseline." + this._name;
    }
  };
  A.TextDecoration.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.TextDecoration && other._mask === this._mask;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this._mask);
    },
    toString$0(_) {
      var values,
        t1 = this._mask;
      if (t1 === 0)
        return "TextDecoration.none";
      values = A._setArrayType([], type$.JSArray_String);
      if ((t1 & 1) !== 0)
        values.push("underline");
      if ((t1 & 2) !== 0)
        values.push("overline");
      if ((t1 & 4) !== 0)
        values.push("lineThrough");
      if (values.length === 1)
        return "TextDecoration." + values[0];
      return "TextDecoration.combine([" + B.JSArray_methods.join$1(values, ", ") + "])";
    }
  };
  A.TextLeadingDistribution.prototype = {
    toString$0(_) {
      return "TextLeadingDistribution." + this._name;
    }
  };
  A.TextHeightBehavior.prototype = {
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.TextHeightBehavior)
        t1 = other.leadingDistribution === this.leadingDistribution;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      return A.hashValues(true, true, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      return "TextHeightBehavior(applyHeightToFirstAscent: true, applyHeightToLastDescent: true, leadingDistribution: " + this.leadingDistribution.toString$0(0) + ")";
    }
  };
  A.TextDirection.prototype = {
    toString$0(_) {
      return "TextDirection." + this._name;
    }
  };
  A.TextBox.prototype = {
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      return other instanceof A.TextBox && other.left === _this.left && other.top === _this.top && other.right === _this.right && other.bottom === _this.bottom && other.direction === _this.direction;
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.left, _this.top, _this.right, _this.bottom, _this.direction, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      var _this = this;
      return "TextBox.fromLTRBD(" + B.JSNumber_methods.toStringAsFixed$1(_this.left, 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(_this.top, 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(_this.right, 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(_this.bottom, 1) + ", " + _this.direction.toString$0(0) + ")";
    }
  };
  A.TextAffinity.prototype = {
    toString$0(_) {
      return "TextAffinity." + this._name;
    }
  };
  A.TextPosition.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return other instanceof A.TextPosition && other.offset === this.offset && other.affinity === this.affinity;
    },
    get$hashCode(_) {
      return A.hashValues(this.offset, this.affinity, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      return A.getRuntimeType(this).toString$0(0) + "(offset: " + this.offset + ", affinity: " + this.affinity.toString$0(0) + ")";
    }
  };
  A.TextRange.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof A.TextRange && other.start === this.start && other.end === this.end;
    },
    get$hashCode(_) {
      return A.hashValues(B.JSInt_methods.get$hashCode(this.start), B.JSInt_methods.get$hashCode(this.end), B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      return "TextRange(start: " + this.start + ", end: " + this.end + ")";
    }
  };
  A.ParagraphConstraints.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return other instanceof A.ParagraphConstraints && other.width === this.width;
    },
    get$hashCode(_) {
      return B.JSNumber_methods.get$hashCode(this.width);
    },
    toString$0(_) {
      return A.getRuntimeType(this).toString$0(0) + "(width: " + A.S(this.width) + ")";
    }
  };
  A.BoxHeightStyle.prototype = {
    toString$0(_) {
      return "BoxHeightStyle." + this._name;
    }
  };
  A.BoxWidthStyle.prototype = {
    toString$0(_) {
      return "BoxWidthStyle." + this._name;
    }
  };
  A.TileMode.prototype = {
    toString$0(_) {
      return "TileMode." + this._name;
    }
  };
  A.FlutterView.prototype = {};
  A.FlutterWindow.prototype = {};
  A.SingletonFlutterWindow.prototype = {};
  A.AccessibilityFeatures.prototype = {
    toString$0(_) {
      var features = A._setArrayType([], type$.JSArray_String);
      return "AccessibilityFeatures" + A.S(features);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return other instanceof A.AccessibilityFeatures && true;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(0);
    }
  };
  A.Brightness.prototype = {
    toString$0(_) {
      return "Brightness." + this._name;
    }
  };
  A.GestureSettings.prototype = {
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.GestureSettings)
        t1 = true;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      return A.hashValues(null, null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      return "GestureSettings(physicalTouchSlop: null, physicalDoubleTapSlop: null)";
    }
  };
  A.AudioBuffer.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.AudioParamMap.prototype = {
    containsKey$1(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(key)) != null;
    },
    $index(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(key));
    },
    forEach$1(receiver, f) {
      var entry,
        entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], A.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys(receiver) {
      var keys = A._setArrayType([], type$.JSArray_String);
      this.forEach$1(receiver, new A.AudioParamMap_keys_closure(keys));
      return keys;
    },
    get$length(receiver) {
      return receiver.size;
    },
    get$isEmpty(receiver) {
      return receiver.size === 0;
    },
    $indexSet(receiver, key, value) {
      throw A.wrapException(A.UnsupportedError$("Not supported"));
    },
    putIfAbsent$2(receiver, key, ifAbsent) {
      throw A.wrapException(A.UnsupportedError$("Not supported"));
    },
    remove$1(receiver, key) {
      throw A.wrapException(A.UnsupportedError$("Not supported"));
    },
    $isMap: 1
  };
  A.AudioParamMap_keys_closure.prototype = {
    call$2(k, v) {
      return this.keys.push(k);
    },
    $signature: 11
  };
  A.AudioTrackList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.BaseAudioContext.prototype = {};
  A.OfflineAudioContext.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A._AudioParamMap_JavaScriptObject_MapMixin.prototype = {};
  A.ActiveInfo.prototype = {
    get$name(receiver) {
      return receiver.name;
    }
  };
  A.HeapPriorityQueue.prototype = {
    _elementAt$1(index) {
      var t1 = this._priority_queue$_queue[index];
      if (t1 == null) {
        this.$ti._precomputed1._as(null);
        t1 = null;
      }
      return t1;
    },
    get$length(_) {
      return this._priority_queue$_length;
    },
    toString$0(_) {
      var t1 = this._priority_queue$_queue;
      return A.IterableBase_iterableToShortString(A.SubListIterable$(t1, 0, A.checkNotNullable(this._priority_queue$_length, "count", type$.int), A._arrayInstanceType(t1)._precomputed1), "(", ")");
    },
    _bubbleDown$2(element, index) {
      var t1, t2, t3, leftChildIndex, leftChild, rightChild, minChild, minChildIndex, child, _this = this,
        rightChildIndex = index * 2 + 2;
      for (t1 = _this.comparison, t2 = _this.$ti._precomputed1; t3 = _this._priority_queue$_length, rightChildIndex < t3; index = minChildIndex) {
        leftChildIndex = rightChildIndex - 1;
        t3 = _this._priority_queue$_queue;
        leftChild = t3[leftChildIndex];
        if (leftChild == null) {
          t2._as(null);
          leftChild = null;
        }
        rightChild = t3[rightChildIndex];
        if (rightChild == null) {
          t2._as(null);
          rightChild = null;
        }
        if (t1.call$2(leftChild, rightChild) < 0) {
          minChild = leftChild;
          minChildIndex = leftChildIndex;
        } else {
          minChild = rightChild;
          minChildIndex = rightChildIndex;
        }
        if (t1.call$2(element, minChild) <= 0) {
          B.JSArray_methods.$indexSet(_this._priority_queue$_queue, index, element);
          return;
        }
        B.JSArray_methods.$indexSet(_this._priority_queue$_queue, index, minChild);
        rightChildIndex = minChildIndex * 2 + 2;
      }
      leftChildIndex = rightChildIndex - 1;
      if (leftChildIndex < t3) {
        child = _this._elementAt$1(leftChildIndex);
        if (t1.call$2(element, child) > 0) {
          B.JSArray_methods.$indexSet(_this._priority_queue$_queue, index, child);
          index = leftChildIndex;
        }
      }
      B.JSArray_methods.$indexSet(_this._priority_queue$_queue, index, element);
    }
  };
  A.AnimationStatus.prototype = {
    toString$0(_) {
      return "AnimationStatus." + this._name;
    }
  };
  A.Animation0.prototype = {
    toString$0(_) {
      return "<optimized out>#" + A.shortHash(this) + "(" + A.S(this.toStringDetails$0()) + ")";
    },
    toStringDetails$0() {
      switch (this.get$status(this).index) {
        case 1:
          return "\u25b6";
        case 2:
          return "\u25c0";
        case 3:
          return "\u23ed";
        case 0:
          return "\u23ee";
      }
    }
  };
  A._AnimationDirection.prototype = {
    toString$0(_) {
      return "_AnimationDirection." + this._name;
    }
  };
  A.AnimationBehavior.prototype = {
    toString$0(_) {
      return "AnimationBehavior." + this._name;
    }
  };
  A.AnimationController.prototype = {
    get$value(_) {
      return A._lateReadCheck(this.__AnimationController__value, "_value");
    },
    set$value(_, newValue) {
      var _this = this;
      _this.stop$0(0);
      _this._internalSetValue$1(newValue);
      _this.notifyListeners$0();
      _this._checkStatusChanged$0();
    },
    _internalSetValue$1(newValue) {
      var _this = this,
        t1 = B.JSInt_methods.clamp$2(newValue, 0, 1);
      _this.__AnimationController__value = t1;
      if (A._lateReadCheck(t1, "_value") === 0)
        _this.__AnimationController__status = B.AnimationStatus_0;
      else if (A._lateReadCheck(_this.__AnimationController__value, "_value") === 1)
        _this.__AnimationController__status = B.AnimationStatus_3;
      else
        _this.__AnimationController__status = _this._animation_controller$_direction === B._AnimationDirection_0 ? B.AnimationStatus_1 : B.AnimationStatus_2;
    },
    get$status(_) {
      return A._lateReadCheck(this.__AnimationController__status, "_status");
    },
    forward$0(_) {
      this._animation_controller$_direction = B._AnimationDirection_0;
      return this._animateToInternal$1(1);
    },
    _animateToInternal$1(target) {
      var remainingFraction, directionDuration, simulationDuration, t1, t2, t3, _this = this, _s6_ = "_value";
      A._lateReadCheck($.SemanticsBinding__instance.SemanticsBinding___SemanticsBinding__accessibilityFeatures, "_accessibilityFeatures");
      remainingFraction = isFinite(1) ? Math.abs(target - A._lateReadCheck(_this.__AnimationController__value, _s6_)) / 1 : 1;
      directionDuration = _this.duration;
      simulationDuration = new A.Duration(B.JSNumber_methods.round$0(directionDuration._duration * remainingFraction));
      _this.stop$0(0);
      t1 = simulationDuration._duration;
      if (t1 === B.Duration_0._duration) {
        if (A._lateReadCheck(_this.__AnimationController__value, _s6_) !== target) {
          _this.__AnimationController__value = B.JSInt_methods.clamp$2(target, 0, 1);
          _this.notifyListeners$0();
        }
        _this.__AnimationController__status = _this._animation_controller$_direction === B._AnimationDirection_0 ? B.AnimationStatus_3 : B.AnimationStatus_0;
        _this._checkStatusChanged$0();
        t1 = new A.TickerFuture(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void));
        t1._ticker$_complete$0();
        return t1;
      }
      t1 = new A._InterpolationSimulation(t1 / 1000000, A._lateReadCheck(_this.__AnimationController__value, _s6_), target, B.C__Linear);
      _this._simulation = t1;
      _this.__AnimationController__value = B.JSNumber_methods.clamp$2(t1.x$1(0, 0), 0, 1);
      t1 = _this._ticker;
      t1._ticker$_future = new A.TickerFuture(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void));
      if (!t1._muted)
        t2 = t1._animationId == null;
      else
        t2 = false;
      if (t2) {
        t2 = $.SchedulerBinding__instance;
        t2.toString;
        t1._animationId = t2.scheduleFrameCallback$2$rescheduling(t1.get$_ticker$_tick(), false);
      }
      t2 = $.SchedulerBinding__instance;
      t3 = t2.SchedulerBinding__schedulerPhase.index;
      if (t3 > 0 && t3 < 4) {
        t2 = t2.SchedulerBinding__currentFrameTimeStamp;
        t2.toString;
        t1._startTime = t2;
      }
      t1 = t1._ticker$_future;
      t1.toString;
      _this.__AnimationController__status = _this._animation_controller$_direction === B._AnimationDirection_0 ? B.AnimationStatus_1 : B.AnimationStatus_2;
      _this._checkStatusChanged$0();
      return t1;
    },
    stop$1$canceled(_, canceled) {
      this._simulation = null;
      this._ticker.stop$1$canceled(0, canceled);
    },
    stop$0($receiver) {
      return this.stop$1$canceled($receiver, true);
    },
    dispose$0(_) {
      var _this = this;
      _this._ticker.dispose$0(0);
      _this._ticker = null;
      _this.AnimationLocalStatusListenersMixin__statusListeners.clear$0(0);
      _this.AnimationLocalListenersMixin__listeners.clear$0(0);
      _this.super$AnimationEagerListenerMixin$dispose(0);
    },
    _checkStatusChanged$0() {
      var _this = this,
        t1 = A._lateReadCheck(_this.__AnimationController__status, "_status");
      if (_this._lastReportedStatus !== t1) {
        _this._lastReportedStatus = t1;
        _this.notifyStatusListeners$1(t1);
      }
    },
    _animation_controller$_tick$1(elapsed) {
      var _this = this,
        elapsedInSeconds = elapsed._duration / 1000000;
      _this.__AnimationController__value = B.JSNumber_methods.clamp$2(_this._simulation.x$1(0, elapsedInSeconds), 0, 1);
      if (elapsedInSeconds > _this._simulation._durationInSeconds) {
        _this.__AnimationController__status = _this._animation_controller$_direction === B._AnimationDirection_0 ? B.AnimationStatus_3 : B.AnimationStatus_0;
        _this.stop$1$canceled(0, false);
      }
      _this.notifyListeners$0();
      _this._checkStatusChanged$0();
    },
    toStringDetails$0() {
      var ticker, label, _this = this,
        t1 = _this._ticker,
        t2 = t1 == null,
        paused = !t2 && t1._ticker$_future != null ? "" : "; paused";
      if (t2)
        ticker = "; DISPOSED";
      else
        ticker = t1._muted ? "; silenced" : "";
      t1 = _this.debugLabel;
      label = t1 == null ? "" : "; for " + t1;
      return A.S(_this.super$Animation$toStringDetails()) + " " + B.JSNumber_methods.toStringAsFixed$1(A._lateReadCheck(_this.__AnimationController__value, "_value"), 3) + paused + ticker + label;
    }
  };
  A._InterpolationSimulation.prototype = {
    x$1(_, timeInSeconds) {
      var t1, t2, _this = this,
        t = B.JSNumber_methods.clamp$2(timeInSeconds / _this._durationInSeconds, 0, 1);
      if (t === 0)
        return _this._begin;
      else {
        t1 = _this._animation_controller$_end;
        if (t === 1)
          return t1;
        else {
          t2 = _this._begin;
          return t2 + (t1 - t2) * _this._curve.transform$1(0, t);
        }
      }
    }
  };
  A._AnimationController_Animation_AnimationEagerListenerMixin.prototype = {};
  A._AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin.prototype = {};
  A._AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin.prototype = {};
  A.AnimationWithParentMixin.prototype = {
    get$status(_) {
      var t1 = this.get$parent(this);
      return t1.get$status(t1);
    }
  };
  A.CurvedAnimation.prototype = {
    _updateCurveDirection$1($status) {
      var _this = this;
      switch ($status.index) {
        case 0:
        case 3:
          _this._curveDirection = null;
          break;
        case 1:
          if (_this._curveDirection == null)
            _this._curveDirection = B.AnimationStatus_1;
          break;
        case 2:
          if (_this._curveDirection == null)
            _this._curveDirection = B.AnimationStatus_2;
          break;
      }
    },
    get$_useForwardCurve() {
      return true;
    },
    dispose$0(_) {
      this.parent.removeStatusListener$1(this.get$_updateCurveDirection());
    },
    get$value(_) {
      var activeCurve = this.get$_useForwardCurve() ? this.curve : null,
        t1 = A._lateReadCheck(this.parent.__AnimationController__value, "_value");
      if (activeCurve == null)
        return t1;
      if (t1 === 0 || t1 === 1)
        return t1;
      return activeCurve.transform$1(0, t1);
    },
    toString$0(_) {
      var t1 = this.parent.toString$0(0) + "\u27a9" + this.curve.toString$0(0);
      return t1;
    },
    get$parent(receiver) {
      return this.parent;
    }
  };
  A._CurvedAnimation_Animation_AnimationWithParentMixin.prototype = {};
  A.ParametricCurve.prototype = {
    transform$1(_, t) {
      return this.transformInternal$1(t);
    },
    transformInternal$1(t) {
      throw A.wrapException(A.UnimplementedError$(null));
    },
    toString$0(_) {
      return "ParametricCurve";
    }
  };
  A.Curve.prototype = {
    transform$1(_, t) {
      if (t === 0 || t === 1)
        return t;
      return this.super$ParametricCurve$transform(0, t);
    }
  };
  A._Linear.prototype = {
    transformInternal$1(t) {
      return t;
    }
  };
  A.Cubic.prototype = {
    _evaluateCubic$3(a, b, m) {
      var t1 = 1 - m;
      return 3 * a * t1 * t1 * m + 3 * b * t1 * m * m + m * m * m;
    },
    transformInternal$1(t) {
      var t1, t2, start, end, midpoint, estimate, _this = this;
      for (t1 = _this.a, t2 = _this.c, start = 0, end = 1; true;) {
        midpoint = (start + end) / 2;
        estimate = _this._evaluateCubic$3(t1, t2, midpoint);
        if (Math.abs(t - estimate) < 0.001)
          return _this._evaluateCubic$3(_this.b, 1, midpoint);
        if (estimate < t)
          start = midpoint;
        else
          end = midpoint;
      }
    },
    toString$0(_) {
      return "Cubic(" + B.JSNumber_methods.toStringAsFixed$1(this.a, 2) + ", " + B.JSNumber_methods.toStringAsFixed$1(this.b, 2) + ", " + B.JSNumber_methods.toStringAsFixed$1(this.c, 2) + ", " + B.JSInt_methods.toStringAsFixed$1(1, 2) + ")";
    }
  };
  A.AnimationEagerListenerMixin.prototype = {
    didRegisterListener$0() {
    },
    didUnregisterListener$0() {
    },
    dispose$0(_) {
    }
  };
  A.AnimationLocalListenersMixin.prototype = {
    notifyListeners$0() {
      var listener, exception, stack, t2, _i, t3, exception0, rti, t4, t5, _this = this,
        t1 = _this.AnimationLocalListenersMixin__listeners,
        localListeners = A.List_List$of(t1, true, type$.void_Function);
      for (t2 = localListeners.length, _i = 0; _i < t2; ++_i) {
        t3 = {};
        listener = localListeners[_i];
        t3.collector = null;
        try {
          if (t1.contains$1(0, listener))
            listener.call$0();
        } catch (exception0) {
          exception = A.unwrapException(exception0);
          stack = A.getTraceFromException(exception0);
          rti = _this instanceof A.Closure ? A.closureFunctionType(_this) : null;
          t4 = A.ErrorDescription$("while notifying listeners for " + A.createRuntimeType(rti == null ? A.instanceType(_this) : rti).toString$0(0));
          t3 = t3.collector;
          t5 = $.$get$FlutterError_onError();
          if (t5 != null)
            t5.call$1(new A.FlutterErrorDetails(exception, stack, "animation library", t4, t3, false));
        }
      }
    }
  };
  A.AnimationLocalStatusListenersMixin.prototype = {
    addStatusListener$1(listener) {
      var t1;
      this.didRegisterListener$0();
      t1 = this.AnimationLocalStatusListenersMixin__statusListeners;
      t1._isDirty = true;
      t1._list.push(listener);
    },
    removeStatusListener$1(listener) {
      if (this.AnimationLocalStatusListenersMixin__statusListeners.remove$1(0, listener))
        this.didUnregisterListener$0();
    },
    notifyStatusListeners$1($status) {
      var listener, exception, stack, t2, _i, exception0, rti, t3, t4, _this = this,
        t1 = _this.AnimationLocalStatusListenersMixin__statusListeners,
        localListeners = A.List_List$of(t1, true, type$.void_Function_AnimationStatus);
      for (t2 = localListeners.length, _i = 0; _i < t2; ++_i) {
        listener = localListeners[_i];
        try {
          if (t1.contains$1(0, listener))
            listener.call$1($status);
        } catch (exception0) {
          exception = A.unwrapException(exception0);
          stack = A.getTraceFromException(exception0);
          rti = _this instanceof A.Closure ? A.closureFunctionType(_this) : null;
          t3 = A.ErrorDescription$("while notifying status listeners for " + A.createRuntimeType(rti == null ? A.instanceType(_this) : rti).toString$0(0));
          t4 = $.$get$FlutterError_onError();
          if (t4 != null)
            t4.call$1(new A.FlutterErrorDetails(exception, stack, "animation library", t3, null, false));
        }
      }
    }
  };
  A.Animatable.prototype = {};
  A._AnimatedEvaluation.prototype = {
    get$value(_) {
      var t1 = this.parent;
      return this._evaluatable.transform$1(0, t1.get$value(t1));
    },
    toString$0(_) {
      var t1 = this.parent,
        t2 = this._evaluatable;
      return t1.toString$0(0) + "\u27a9" + t2.toString$0(0) + "\u27a9" + A.S(t2.transform$1(0, t1.get$value(t1)));
    },
    toStringDetails$0() {
      return A.S(this.super$Animation$toStringDetails()) + " " + this._evaluatable.toString$0(0);
    },
    get$parent(receiver) {
      return this.parent;
    }
  };
  A.Tween.prototype = {
    lerp$1(t) {
      var t1 = this.begin;
      return A._instanceType(this)._eval$1("Tween.T")._as(J.$add$ansx(t1, J.$mul$ns(J.$sub$n(this.end, t1), t)));
    },
    transform$1(_, t) {
      var t1, _this = this;
      if (t === 0) {
        t1 = _this.begin;
        return t1 == null ? A._instanceType(_this)._eval$1("Tween.T")._as(t1) : t1;
      }
      if (t === 1) {
        t1 = _this.end;
        return t1 == null ? A._instanceType(_this)._eval$1("Tween.T")._as(t1) : t1;
      }
      return _this.lerp$1(t);
    },
    toString$0(_) {
      return "Animatable(" + A.S(this.begin) + " \u2192 " + A.S(this.end) + ")";
    }
  };
  A.ColorTween.prototype = {
    lerp$1(t) {
      return A.Color_lerp(this.begin, this.end, t);
    }
  };
  A.IntTween.prototype = {
    lerp$1(t) {
      var t2,
        t1 = this.begin;
      t1.toString;
      t2 = this.end;
      t2.toString;
      return B.JSNumber_methods.round$0(t1 + (t2 - t1) * t);
    }
  };
  A.__AnimatedEvaluation_Animation_AnimationWithParentMixin.prototype = {};
  A._testPlatform_closure.prototype = {
    call$0() {
      return null;
    },
    $signature: 123
  };
  A._browserPlatform_closure.prototype = {
    call$0() {
      var t1 = window.navigator.platform,
        navigatorPlatform = t1 == null ? null : t1.toLowerCase();
      if (navigatorPlatform == null)
        navigatorPlatform = "";
      if (B.JSString_methods.startsWith$1(navigatorPlatform, "mac"))
        return B.TargetPlatform_4;
      if (B.JSString_methods.startsWith$1(navigatorPlatform, "win"))
        return B.TargetPlatform_5;
      if (B.JSString_methods.contains$1(navigatorPlatform, "iphone") || B.JSString_methods.contains$1(navigatorPlatform, "ipad") || B.JSString_methods.contains$1(navigatorPlatform, "ipod"))
        return B.TargetPlatform_2;
      if (B.JSString_methods.contains$1(navigatorPlatform, "android"))
        return B.TargetPlatform_0;
      if (window.matchMedia("only screen and (pointer: fine)").matches)
        return B.TargetPlatform_3;
      return B.TargetPlatform_0;
    },
    $signature: 124
  };
  A._ErrorDiagnostic.prototype = {
    get$value(_) {
      var t1 = A.DiagnosticsProperty.prototype.get$value.call(this, this);
      t1.toString;
      return t1;
    },
    valueToString$1$parentConfiguration(parentConfiguration) {
      var t1 = A.DiagnosticsProperty.prototype.get$value.call(this, this);
      t1.toString;
      return J.join$0$ax(t1);
    }
  };
  A.ErrorDescription.prototype = {};
  A.ErrorSummary.prototype = {};
  A.ErrorHint.prototype = {};
  A.ErrorSpacer.prototype = {};
  A.FlutterErrorDetails.prototype = {
    exceptionAsString$0() {
      var message, fullMessage, t1, t2, position, body, splitPoint,
        longMessage = this.exception;
      if (type$.AssertionError._is(longMessage)) {
        message = longMessage.get$message(longMessage);
        fullMessage = longMessage.toString$0(0);
        if (typeof message == "string" && message !== fullMessage) {
          t1 = fullMessage.length;
          t2 = J.getInterceptor$asx(message);
          if (t1 > t2.get$length(message)) {
            position = B.JSString_methods.lastIndexOf$1(fullMessage, message);
            if (position === t1 - t2.get$length(message) && position > 2 && B.JSString_methods.substring$2(fullMessage, position - 2, position) === ": ") {
              body = B.JSString_methods.substring$2(fullMessage, 0, position - 2);
              splitPoint = B.JSString_methods.indexOf$1(body, " Failed assertion:");
              if (splitPoint >= 0)
                body = B.JSString_methods.substring$2(body, 0, splitPoint) + "\n" + B.JSString_methods.substring$1(body, splitPoint + 1);
              longMessage = t2.trimRight$0(message) + "\n" + body;
            } else
              longMessage = null;
          } else
            longMessage = null;
        } else
          longMessage = null;
        if (longMessage == null)
          longMessage = fullMessage;
      } else if (!(typeof longMessage == "string")) {
        t1 = type$.Error._is(longMessage) || type$.Exception._is(longMessage);
        t2 = J.getInterceptor$(longMessage);
        longMessage = t1 ? t2.toString$0(longMessage) : "  " + A.S(t2.toString$0(longMessage));
      }
      longMessage = J.trimRight$0$s(longMessage);
      return longMessage.length === 0 ? "  <no message available>" : longMessage;
    },
    _exceptionToDiagnosticable$0() {
      var t1,
        exception = this.exception;
      if (exception instanceof A.FlutterError)
        return exception;
      if (type$.AssertionError._is(exception) && exception.get$message(exception) instanceof A.FlutterError) {
        t1 = J.get$message$z(exception);
        t1.toString;
        return type$.FlutterError._as(t1);
      }
      return null;
    },
    get$summary() {
      var t1, summary;
      if (this._exceptionToDiagnosticable$0() != null) {
        t1 = A._setArrayType([], type$.JSArray_DiagnosticsNode);
        this.debugFillProperties$1(new A.DiagnosticPropertiesBuilder(t1, B.DiagnosticsTreeStyle_1));
        t1 = new A.CastList(t1, type$.CastList_of_DiagnosticsNode_and_nullable_DiagnosticsNode);
        summary = t1.firstWhere$2$orElse(t1, new A.FlutterErrorDetails_summary_closure(), new A.FlutterErrorDetails_summary_closure0());
      } else
        summary = null;
      return summary == null ? A.ErrorSummary$(new A.FlutterErrorDetails_summary_formatException(this).call$0()) : summary;
    },
    debugFillProperties$1(properties) {
      var t1, verb, diagnosticable, errorName, t2, t3, prefix, message, stackFrames, _this = this;
      _this.super$Diagnosticable$debugFillProperties(properties);
      t1 = _this.context;
      verb = A.ErrorDescription$("thrown" + A.S(t1 != null ? A.ErrorDescription$(" " + t1.toString$0(0)) : ""));
      diagnosticable = _this._exceptionToDiagnosticable$0();
      t1 = _this.exception;
      if (t1 instanceof A.NullThrownError)
        A.ErrorDescription$("The null value was " + verb.toString$0(0) + ".");
      else if (typeof t1 == "number")
        A.ErrorDescription$("The number " + A.S(t1) + " was " + verb.toString$0(0) + ".");
      else {
        if (type$.AssertionError._is(t1))
          errorName = A.ErrorDescription$("assertion");
        else if (typeof t1 == "string")
          errorName = A.ErrorDescription$("message");
        else {
          t2 = type$.Error._is(t1) || type$.Exception._is(t1);
          t3 = J.getInterceptor$(t1);
          errorName = t2 ? A.ErrorDescription$(t3.get$runtimeType(t1).toString$0(0)) : A.ErrorDescription$(t3.get$runtimeType(t1).toString$0(0) + " object");
        }
        A.ErrorDescription$("The following " + errorName.toString$0(0) + " was " + verb.toString$0(0) + ":");
        if (diagnosticable != null)
          B.JSArray_methods.forEach$1(diagnosticable.diagnostics, properties.get$add(properties));
        else {
          prefix = J.get$runtimeType$(t1).toString$0(0) + ": ";
          message = _this.exceptionAsString$0();
          A.ErrorSummary$(B.JSString_methods.startsWith$1(message, prefix) ? B.JSString_methods.substring$1(message, prefix.length) : message);
        }
      }
      t2 = _this.stack;
      if (t2 != null) {
        if (type$.AssertionError._is(t1) && diagnosticable == null) {
          t1 = A.StackFrame_fromStackString(A.FlutterError__defaultStackTraceDemangler(t2).toString$0(0));
          t3 = A._arrayInstanceType(t1)._eval$1("SkipWhileIterable<1>");
          stackFrames = A.List_List$of(new A.SkipWhileIterable(t1, new A.FlutterErrorDetails_debugFillProperties_closure(), t3), true, t3._eval$1("Iterable.E"));
          if (stackFrames.length >= 2 && stackFrames[0].$package === "flutter" && stackFrames[1].$package === "flutter") {
            A.ErrorSpacer$();
            A.ErrorHint$("Either the assertion indicates an error in the framework itself, or we should provide substantially more information in this error message to help you determine and fix the underlying cause.\nIn either case, please report this assertion by filing a bug on GitHub:\n  https://github.com/flutter/flutter/issues/new?template=2_bug.md");
          }
        }
        A.ErrorSpacer$();
        A.DiagnosticsStackTrace$("When the exception was thrown, this was the stack", t2, null);
      }
      t1 = _this.informationCollector;
      if (t1 != null) {
        A.ErrorSpacer$();
        J.forEach$1$ax(t1.call$0(), properties.get$add(properties));
      }
    },
    toStringShort$0() {
      var t1 = "Exception caught by " + this.library;
      return t1;
    },
    toString$0(_) {
      A._FlutterErrorDetailsNode$(null, B.DiagnosticsTreeStyle_5, this);
      return "";
    }
  };
  A.FlutterErrorDetails_summary_formatException.prototype = {
    call$0() {
      return J.trimLeft$0$s(this.$this.exceptionAsString$0().split("\n")[0]);
    },
    $signature: 47
  };
  A.FlutterErrorDetails_summary_closure.prototype = {
    call$1(node) {
      return node.get$level(node) === B.DiagnosticLevel_6;
    },
    $signature: 125
  };
  A.FlutterErrorDetails_summary_closure0.prototype = {
    call$0() {
      return null;
    },
    $signature: 10
  };
  A.FlutterErrorDetails_debugFillProperties_closure.prototype = {
    call$1(frame) {
      return frame.packageScheme === "dart";
    },
    $signature: 126
  };
  A.FlutterError.prototype = {
    get$message(_) {
      return this.toString$0(0);
    },
    toStringShort$0() {
      return "FlutterError";
    },
    toString$0(_) {
      var t1 = this.diagnostics;
      return new A.MappedListIterable(t1, new A.FlutterError_toString_closure(new A.TextTreeRenderer(4000000000, 65, B.DiagnosticLevel_2, -1)), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,String>")).join$1(0, "\n");
    },
    $isAssertionError: 1,
    $isDiagnosticableTree: 1
  };
  A.FlutterError_FlutterError_closure.prototype = {
    call$1(line) {
      return A.ErrorDescription$(line);
    },
    $signature: 127
  };
  A.FlutterError_defaultStackFilter_closure.prototype = {
    call$1(value) {
      return value + 1;
    },
    $signature: 50
  };
  A.FlutterError_defaultStackFilter_closure0.prototype = {
    call$1(value) {
      return value + 1;
    },
    $signature: 50
  };
  A.FlutterError_toString_closure.prototype = {
    call$1(node) {
      return B.JSString_methods.trimRight$0(this.renderer.render$1(node));
    },
    $signature: 129
  };
  A.debugPrintStack_closure.prototype = {
    call$1(line) {
      return B.JSString_methods.contains$1(line, "StackTrace.current") || B.JSString_methods.contains$1(line, "dart-sdk/lib/_internal") || B.JSString_methods.contains$1(line, "dart:sdk_internal");
    },
    $signature: 15
  };
  A.DiagnosticsStackTrace.prototype = {
    get$allowTruncate() {
      return false;
    }
  };
  A._FlutterErrorDetailsNode.prototype = {
    get$builder() {
      A.DiagnosticableNode.prototype.get$builder.call(this);
      return null;
    }
  };
  A._FlutterError_Error_DiagnosticableTreeMixin.prototype = {};
  A._FlutterErrorDetails_Object_Diagnosticable.prototype = {};
  A.BindingBase.prototype = {
    BindingBase$0() {
      var t1, t2, t3, t4, t5, t6, t7, _this = this, _null = null;
      A.Timeline_startSync("Framework initialization", _null, _null);
      _this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding$initInstances();
      $.WidgetsBinding__instance = _this;
      t1 = type$.Element_2;
      t2 = A.HashSet_HashSet(t1);
      t3 = A._setArrayType([], type$.JSArray_Element_2);
      t4 = A.LinkedHashMap_LinkedHashMap(_null, _null, type$.void_Function_FocusHighlightMode, type$.int);
      t5 = type$.JSArray_FocusNode;
      t6 = A._setArrayType([], t5);
      t5 = A._setArrayType([], t5);
      t7 = $.$get$ChangeNotifier__emptyListeners();
      t5 = new A.FocusScopeNode(t6, false, true, true, true, _null, _null, t5, t7);
      t7 = t5._manager = new A.FocusManager(new A.HashedObserverList(t4, type$.HashedObserverList_of_void_Function_FocusHighlightMode), t5, A.LinkedHashSet_LinkedHashSet$_empty(type$.FocusNode), A._setArrayType([], type$.JSArray__Autofocus), t7);
      A._lateReadCheck($.ServicesBinding__instance.ServicesBinding___ServicesBinding__keyEventManager, "_keyEventManager").keyMessageHandler = t7.get$_handleKeyMessage();
      $.GestureBinding__instance.GestureBinding_pointerRouter._globalRoutes.$indexSet(0, t7.get$_handlePointerEvent(), _null);
      t4 = t7;
      t1 = new A.BuildOwner(new A._InactiveElements(t2), t3, t4, A.LinkedHashMap_LinkedHashMap$_empty(type$.GlobalKey_State_StatefulWidget, t1));
      _this.WidgetsBinding__buildOwner = t1;
      t1.onBuildScheduled = _this.get$_handleBuildScheduled();
      $.$get$window().platformDispatcher._onLocaleChanged = _this.get$handleLocaleChanged();
      B.OptionalMethodChannel_urv.setMethodCallHandler$1(_this.get$_handleNavigationInvocation());
      _this.initServiceExtensions$0();
      t1 = type$.String;
      A.postEvent("Flutter.FrameworkInitialization", A.LinkedHashMap_LinkedHashMap$_empty(t1, t1));
      A.Timeline_finishSync();
    },
    initInstances$0() {
    },
    initServiceExtensions$0() {
      this.registerStringServiceExtension$3$getter$name$setter(new A.BindingBase_initServiceExtensions_closure(), "connectedVmServiceUri", new A.BindingBase_initServiceExtensions_closure0());
      this.registerStringServiceExtension$3$getter$name$setter(new A.BindingBase_initServiceExtensions_closure1(), "activeDevToolsServerAddress", new A.BindingBase_initServiceExtensions_closure2());
    },
    lockEvents$1(callback) {
      var future,
        timelineTask = A.TimelineTask$();
      timelineTask.start$1(0, "Lock events");
      ++this._lockCount;
      future = callback.call$0();
      future.whenComplete$1(new A.BindingBase_lockEvents_closure(this, timelineTask));
      return future;
    },
    unlocked$0() {
    },
    performReassemble$0() {
      $.FlutterError__errorCount = 0;
      return A.Future_Future$value(null, type$.void);
    },
    registerBoolServiceExtension$3$getter$name$setter(getter, $name, setter) {
      this.registerServiceExtension$2$callback$name(new A.BindingBase_registerBoolServiceExtension_closure(this, setter, $name, getter), $name);
    },
    registerNumericServiceExtension$3$getter$name$setter(getter, $name, setter) {
      this.registerServiceExtension$2$callback$name(new A.BindingBase_registerNumericServiceExtension_closure(this, $name, setter, getter), $name);
    },
    _postExtensionStateChangedEvent$2($name, value) {
      A.postEvent("Flutter.ServiceExtensionStateChanged", A.LinkedHashMap_LinkedHashMap$_literal(["extension", "ext.flutter." + $name, "value", value], type$.String, type$.dynamic));
    },
    registerStringServiceExtension$3$getter$name$setter(getter, $name, setter) {
      this.registerServiceExtension$2$callback$name(new A.BindingBase_registerStringServiceExtension_closure(this, setter, $name, getter), $name);
    },
    registerServiceExtension$2$callback$name(callback, $name) {
      var methodName = "ext.flutter." + $name;
      A.registerExtension(methodName, new A.BindingBase_registerServiceExtension_closure(methodName, callback));
    },
    toString$0(_) {
      return "<BindingBase>";
    }
  };
  A.BindingBase_initServiceExtensions_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.connectedVmServiceUri;
              $async$returnValue = t1 == null ? "" : t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 51
  };
  A.BindingBase_initServiceExtensions_closure0.prototype = {
    call$1(uri) {
      return this.$call$body$BindingBase_initServiceExtensions_closure0(uri);
    },
    $call$body$BindingBase_initServiceExtensions_closure0(uri) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $.connectedVmServiceUri = uri;
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 79
  };
  A.BindingBase_initServiceExtensions_closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.activeDevToolsServerAddress;
              $async$returnValue = t1 == null ? "" : t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 51
  };
  A.BindingBase_initServiceExtensions_closure2.prototype = {
    call$1(serverAddress) {
      return this.$call$body$BindingBase_initServiceExtensions_closure(serverAddress);
    },
    $call$body$BindingBase_initServiceExtensions_closure(serverAddress) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $.activeDevToolsServerAddress = serverAddress;
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 79
  };
  A.BindingBase_lockEvents_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      if (--t1._lockCount <= 0) {
        this.timelineTask.finish$0(0);
        t1.super$_WidgetsFlutterBinding_BindingBase_GestureBinding$unlocked();
        if (t1.SchedulerBinding__taskQueue._priority_queue$_length !== 0)
          t1._ensureEventLoopCallback$0();
      }
    },
    $signature: 10
  };
  A.BindingBase_registerBoolServiceExtension_closure.prototype = {
    call$1(parameters) {
      return this.$call$body$BindingBase_registerBoolServiceExtension_closure(parameters);
    },
    $call$body$BindingBase_registerBoolServiceExtension_closure(parameters) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_String_dynamic),
        $async$returnValue, $async$self = this, t1, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.getInterceptor$x(parameters);
              $async$goto = t1.containsKey$1(parameters, "enabled") ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return A._asyncAwait($async$self.setter.call$1(J.$eq$(t1.$index(parameters, "enabled"), "true")), $async$call$1);
            case 5:
              // returning from await.
              $async$goto = 6;
              return A._asyncAwait($async$self.getter.call$0(), $async$call$1);
            case 6:
              // returning from await.
              t1 = $async$result ? "true" : "false";
              $async$self.$this._postExtensionStateChangedEvent$2($async$self.name, t1);
            case 4:
              // join
              $async$temp1 = A;
              $async$goto = 7;
              return A._asyncAwait($async$self.getter.call$0(), $async$call$1);
            case 7:
              // returning from await.
              $async$returnValue = $async$temp1.LinkedHashMap_LinkedHashMap$_literal(["enabled", $async$result ? "true" : "false"], type$.String, type$.dynamic);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 14
  };
  A.BindingBase_registerNumericServiceExtension_closure.prototype = {
    call$1(parameters) {
      return this.$call$body$BindingBase_registerNumericServiceExtension_closure(parameters);
    },
    $call$body$BindingBase_registerNumericServiceExtension_closure(parameters) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_String_dynamic),
        $async$returnValue, $async$self = this, t1, t2, $async$temp1, $async$temp2, $async$temp3;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.name;
              t2 = J.getInterceptor$x(parameters);
              $async$goto = t2.containsKey$1(parameters, t1) ? 3 : 4;
              break;
            case 3:
              // then
              t2 = t2.$index(parameters, t1);
              t2.toString;
              $async$goto = 5;
              return A._asyncAwait($async$self.setter.call$1(A.double_parse(t2)), $async$call$1);
            case 5:
              // returning from await.
              $async$temp1 = $async$self.$this;
              $async$temp2 = t1;
              $async$temp3 = J;
              $async$goto = 6;
              return A._asyncAwait($async$self.getter.call$0(), $async$call$1);
            case 6:
              // returning from await.
              $async$temp1._postExtensionStateChangedEvent$2($async$temp2, $async$temp3.toString$0$($async$result));
            case 4:
              // join
              $async$temp1 = A;
              $async$temp2 = t1;
              $async$temp3 = J;
              $async$goto = 7;
              return A._asyncAwait($async$self.getter.call$0(), $async$call$1);
            case 7:
              // returning from await.
              $async$returnValue = $async$temp1.LinkedHashMap_LinkedHashMap$_literal([$async$temp2, $async$temp3.toString$0$($async$result)], type$.String, type$.dynamic);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 14
  };
  A.BindingBase_registerStringServiceExtension_closure.prototype = {
    call$1(parameters) {
      return this.$call$body$BindingBase_registerStringServiceExtension_closure(parameters);
    },
    $call$body$BindingBase_registerStringServiceExtension_closure(parameters) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_String_dynamic),
        $async$returnValue, $async$self = this, t1, $async$temp1, $async$temp2;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.getInterceptor$x(parameters);
              $async$goto = t1.containsKey$1(parameters, "value") ? 3 : 4;
              break;
            case 3:
              // then
              t1 = t1.$index(parameters, "value");
              t1.toString;
              $async$goto = 5;
              return A._asyncAwait($async$self.setter.call$1(t1), $async$call$1);
            case 5:
              // returning from await.
              $async$temp1 = $async$self.$this;
              $async$temp2 = $async$self.name;
              $async$goto = 6;
              return A._asyncAwait($async$self.getter.call$0(), $async$call$1);
            case 6:
              // returning from await.
              $async$temp1._postExtensionStateChangedEvent$2($async$temp2, $async$result);
            case 4:
              // join
              $async$temp1 = A;
              $async$goto = 7;
              return A._asyncAwait($async$self.getter.call$0(), $async$call$1);
            case 7:
              // returning from await.
              $async$returnValue = $async$temp1.LinkedHashMap_LinkedHashMap$_literal(["value", $async$result], type$.String, type$.dynamic);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 14
  };
  A.BindingBase_registerServiceExtension_closure.prototype = {
    call$2(method, parameters) {
      return this.$call$body$BindingBase_registerServiceExtension_closure(method, parameters);
    },
    $call$body$BindingBase_registerServiceExtension_closure(method, parameters) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.ServiceExtensionResponse),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, result, exception, stack, exception0, t1, $async$exception0, $async$temp1;
      var $async$call$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.debugInstrumentAction("Wait for outer event loop", new A.BindingBase_registerServiceExtension__closure(), type$.void), $async$call$2);
            case 3:
              // returning from await.
              result = A._Cell$named("result");
              $async$handler = 5;
              $async$temp1 = result;
              $async$goto = 8;
              return A._asyncAwait($async$self.callback.call$1(parameters), $async$call$2);
            case 8:
              // returning from await.
              $async$temp1.__late_helper$_value = $async$result;
              $async$handler = 2;
              // goto after finally
              $async$goto = 7;
              break;
            case 5:
              // catch
              $async$handler = 4;
              $async$exception0 = $async$currentError;
              exception = A.unwrapException($async$exception0);
              stack = A.getTraceFromException($async$exception0);
              t1 = A.ErrorDescription$('during a service extension callback for "' + method + '"');
              A.FlutterError_reportError(new A.FlutterErrorDetails(exception, stack, "Flutter framework", t1, null, false));
              t1 = type$.String;
              t1 = B.C_JsonCodec.encode$1(A.LinkedHashMap_LinkedHashMap$_literal(["exception", J.toString$0$(exception), "stack", J.toString$0$(stack), "method", method], t1, t1));
              A.ServiceExtensionResponse__validateErrorCode(-32000);
              A.ArgumentError_checkNotNull(t1, "errorDetail");
              $async$returnValue = new A.ServiceExtensionResponse();
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 7;
              break;
            case 4:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 7:
              // after finally
              J.$indexSet$ax(result._readLocal$0(), "type", "_extensionType");
              J.$indexSet$ax(result._readLocal$0(), "method", method);
              $async$returnValue = A.ServiceExtensionResponse$result(B.C_JsonCodec.encode$1(result._readLocal$0()));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$2, $async$completer);
    },
    $signature: 63
  };
  A.BindingBase_registerServiceExtension__closure.prototype = {
    call$0() {
      return A.Future_Future$delayed(B.Duration_0, type$.void);
    },
    $signature: 12
  };
  A.DebugReassembleConfig.prototype = {};
  A.Listenable.prototype = {};
  A.ChangeNotifier.prototype = {
    addListener$1(_, listener) {
      var newListeners, i, _this = this,
        t1 = _this.ChangeNotifier__count,
        t2 = _this.ChangeNotifier__listeners,
        t3 = t2.length;
      if (t1 === t3) {
        t2 = type$.nullable_void_Function;
        if (t1 === 0) {
          t1 = A.List_List$filled(1, null, false, t2);
          _this.ChangeNotifier__listeners = t1;
        } else {
          newListeners = A.List_List$filled(t3 * 2, null, false, t2);
          for (t1 = _this.ChangeNotifier__count, t2 = _this.ChangeNotifier__listeners, i = 0; i < t1; ++i)
            newListeners[i] = t2[i];
          _this.ChangeNotifier__listeners = newListeners;
          t1 = newListeners;
        }
      } else
        t1 = t2;
      t1[_this.ChangeNotifier__count++] = listener;
    },
    _removeAt$1(index) {
      var newListeners, i, i0, _this = this,
        t1 = --_this.ChangeNotifier__count,
        t2 = _this.ChangeNotifier__listeners;
      if (t1 * 2 <= t2.length) {
        newListeners = A.List_List$filled(t1, null, false, type$.nullable_void_Function);
        for (t1 = _this.ChangeNotifier__listeners, i = 0; i < index; ++i)
          newListeners[i] = t1[i];
        for (t2 = _this.ChangeNotifier__count, i = index; i < t2; i = i0) {
          i0 = i + 1;
          newListeners[i] = t1[i0];
        }
        _this.ChangeNotifier__listeners = newListeners;
      } else {
        for (i = index; i < t1; i = i0) {
          i0 = i + 1;
          t2[i] = t2[i0];
        }
        t2[t1] = null;
      }
    },
    removeListener$1(_, listener) {
      var i, _this = this;
      for (i = 0; i < _this.ChangeNotifier__count; ++i)
        if (J.$eq$(_this.ChangeNotifier__listeners[i], listener)) {
          if (_this.ChangeNotifier__notificationCallStackDepth > 0) {
            _this.ChangeNotifier__listeners[i] = null;
            ++_this.ChangeNotifier__reentrantlyRemovedListeners;
          } else
            _this._removeAt$1(i);
          break;
        }
    },
    dispose$0(_) {
      this.ChangeNotifier__listeners = $.$get$ChangeNotifier__emptyListeners();
      this.ChangeNotifier__count = 0;
    },
    notifyListeners$0() {
      var i, exception, stack, t2, exception0, rti, t3, newLength, newListeners, newIndex, listener, newIndex0, swapIndex, _this = this,
        t1 = _this.ChangeNotifier__count;
      if (t1 === 0)
        return;
      ++_this.ChangeNotifier__notificationCallStackDepth;
      for (i = 0; i < t1; ++i)
        try {
          t2 = _this.ChangeNotifier__listeners[i];
          if (t2 != null)
            t2.call$0();
        } catch (exception0) {
          exception = A.unwrapException(exception0);
          stack = A.getTraceFromException(exception0);
          rti = _this instanceof A.Closure ? A.closureFunctionType(_this) : null;
          t2 = A.ErrorDescription$("while dispatching notifications for " + A.createRuntimeType(rti == null ? A.instanceType(_this) : rti).toString$0(0));
          t3 = $.$get$FlutterError_onError();
          if (t3 != null)
            t3.call$1(new A.FlutterErrorDetails(exception, stack, "foundation library", t2, new A.ChangeNotifier_notifyListeners_closure(_this), false));
        }
      if (--_this.ChangeNotifier__notificationCallStackDepth === 0 && _this.ChangeNotifier__reentrantlyRemovedListeners > 0) {
        newLength = _this.ChangeNotifier__count - _this.ChangeNotifier__reentrantlyRemovedListeners;
        t1 = _this.ChangeNotifier__listeners;
        if (newLength * 2 <= t1.length) {
          newListeners = A.List_List$filled(newLength, null, false, type$.nullable_void_Function);
          for (t1 = _this.ChangeNotifier__count, t2 = _this.ChangeNotifier__listeners, newIndex = 0, i = 0; i < t1; ++i) {
            listener = t2[i];
            if (listener != null) {
              newIndex0 = newIndex + 1;
              newListeners[newIndex] = listener;
              newIndex = newIndex0;
            }
          }
          _this.ChangeNotifier__listeners = newListeners;
        } else
          for (i = 0; i < newLength; ++i)
            if (t1[i] == null) {
              swapIndex = i + 1;
              for (; t2 = t1[swapIndex], t2 == null;)
                ++swapIndex;
              t1[i] = t2;
              t1[swapIndex] = null;
            }
        _this.ChangeNotifier__reentrantlyRemovedListeners = 0;
        _this.ChangeNotifier__count = newLength;
      }
    }
  };
  A.ChangeNotifier_notifyListeners_closure.prototype = {
    call$0() {
      var _null = null,
        t1 = this.$this;
      return A._setArrayType([A.DiagnosticsProperty$("The " + A.getRuntimeType(t1).toString$0(0) + " sending notification was", t1, true, B.C__NoDefaultValue, _null, false, _null, _null, B.DiagnosticLevel_3, false, true, true, B.DiagnosticsTreeStyle_9, _null, type$.ChangeNotifier)], type$.JSArray_DiagnosticsNode);
    },
    $signature: 9
  };
  A.ValueNotifier.prototype = {
    toString$0(_) {
      return "<optimized out>#" + A.shortHash(this) + "(true)";
    }
  };
  A.DiagnosticLevel.prototype = {
    toString$0(_) {
      return "DiagnosticLevel." + this._name;
    }
  };
  A.DiagnosticsTreeStyle.prototype = {
    toString$0(_) {
      return "DiagnosticsTreeStyle." + this._name;
    }
  };
  A.TextTreeConfiguration.prototype = {};
  A._WordWrapParseMode.prototype = {
    toString$0(_) {
      return "_WordWrapParseMode." + this._name;
    }
  };
  A._PrefixedStringBuilder.prototype = {
    incrementPrefixOtherLines$2$updateCurrentLine(suffix, updateCurrentLine) {
      var _this = this,
        t1 = _this._currentLine._contents.length === 0 || updateCurrentLine,
        t2 = _this._nextPrefixOtherLines;
      if (t1) {
        t1 = t2 == null ? _this._prefixOtherLines : t2;
        t1.toString;
        _this._prefixOtherLines = t1 + suffix;
        _this._nextPrefixOtherLines = null;
      } else {
        t1 = t2 == null ? _this._prefixOtherLines : t2;
        t1.toString;
        _this._nextPrefixOtherLines = t1 + suffix;
      }
    },
    get$requiresMultipleLines() {
      var _this = this,
        t1 = _this._numLines;
      if (t1 <= 1)
        if (!(t1 === 1 && _this._currentLine._contents.length !== 0)) {
          t1 = _this._currentLine._contents;
          t1 = t1.length + (_this._diagnostics$_buffer._contents.length === 0 ? _this.prefixLineOne : _this._prefixOtherLines).length > _this.wrapWidth;
        } else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _finalizeLine$1(addTrailingLineBreak) {
      var lines, $length, i, _i, line, _this = this,
        firstLine = _this._diagnostics$_buffer._contents.length === 0,
        t1 = _this._currentLine,
        t2 = t1._contents,
        text = t2.charCodeAt(0) == 0 ? t2 : t2;
      t1._contents = "";
      t1 = _this._wrappableRanges;
      if (t1.length === 0) {
        _this._writeLine$3$firstLine$includeLineBreak(text, firstLine, addTrailingLineBreak);
        return;
      }
      t2 = firstLine ? _this.prefixLineOne.length : _this._prefixOtherLines.length;
      lines = A._PrefixedStringBuilder__wordWrapLine(text, t1, _this.wrapWidth, _this._prefixOtherLines.length, t2);
      $length = lines.length;
      for (t2 = !addTrailingLineBreak, i = 0, _i = 0; _i < lines.length; lines.length === $length || (0, A.throwConcurrentModificationError)(lines), ++_i) {
        line = lines[_i];
        ++i;
        _this._writeLine$3$firstLine$includeLineBreak(line, firstLine, !t2 || i < $length);
      }
      B.JSArray_methods.set$length(t1, 0);
    },
    write$2$allowWrap(_, s, allowWrap) {
      var lines, t1, t2, i, t3, line, wrapStart, wrapEnd, _this = this;
      if (s.length === 0)
        return;
      lines = s.split("\n");
      for (t1 = _this._currentLine, t2 = _this._wrappableRanges, i = 0; i < lines.length; ++i) {
        if (i > 0) {
          _this._finalizeLine$1(true);
          t3 = _this._nextPrefixOtherLines;
          if (t3 != null) {
            _this._prefixOtherLines = t3;
            _this._nextPrefixOtherLines = null;
          }
        }
        line = lines[i];
        t3 = line.length;
        if (t3 !== 0) {
          if (allowWrap && true) {
            wrapStart = t1._contents.length;
            wrapEnd = wrapStart + t3;
            if (t2.length !== 0 && B.JSArray_methods.get$last(t2) === wrapStart)
              B.JSArray_methods.set$last(t2, wrapEnd);
            else {
              t2.push(wrapStart);
              t2.push(wrapEnd);
            }
          }
          t1._contents += line;
        }
      }
    },
    write$1($receiver, s) {
      return this.write$2$allowWrap($receiver, s, false);
    },
    _updatePrefix$0() {
      var t1 = this._nextPrefixOtherLines;
      if (t1 != null) {
        this._prefixOtherLines = t1;
        this._nextPrefixOtherLines = null;
      }
    },
    _writeLine$3$firstLine$includeLineBreak(line, firstLine, includeLineBreak) {
      var _this = this,
        t1 = _this._diagnostics$_buffer,
        t2 = t1._contents += B.JSString_methods.trimRight$0(A.S(t1._contents.length === 0 ? _this.prefixLineOne : _this._prefixOtherLines) + line);
      if (includeLineBreak)
        t1._contents = t2 + "\n";
      ++_this._numLines;
    },
    writeRawLines$1(lines) {
      var t1, t2, _this = this;
      if (lines.length === 0)
        return;
      if (_this._currentLine._contents.length !== 0)
        _this._finalizeLine$1(true);
      t1 = _this._diagnostics$_buffer;
      t2 = t1._contents += lines;
      if (!B.JSString_methods.endsWith$1(lines, "\n"))
        t1._contents = t2 + "\n";
      ++_this._numLines;
      _this._updatePrefix$0();
    },
    writeStretched$2(text, targetLineLength) {
      var t1, t2, targetLength, _this = this;
      _this.write$1(0, text);
      t1 = _this._currentLine;
      t2 = t1._contents;
      targetLength = targetLineLength - (t2.length + (_this._diagnostics$_buffer._contents.length === 0 ? _this.prefixLineOne : _this._prefixOtherLines).length);
      if (targetLength > 0)
        t1._contents += B.JSString_methods.$mul(text[text.length - 1], targetLength);
      B.JSArray_methods.set$length(_this._wrappableRanges, 0);
    }
  };
  A._PrefixedStringBuilder__wordWrapLine_noWrap.prototype = {
    call$1(index) {
      var t1, t2, t3;
      for (t1 = this._box_0, t2 = this.wrapRanges; true;) {
        t3 = t1.currentChunk;
        if (t3 >= t2.length)
          return true;
        if (index < t2[t3 + 1])
          break;
        t1.currentChunk = t3 + 2;
      }
      return index < t2[t1.currentChunk];
    },
    $signature: 19
  };
  A._NoDefaultValue.prototype = {};
  A.TextTreeRenderer.prototype = {
    render$4$parentConfiguration$prefixLineOne$prefixOtherLines(node, parentConfiguration, prefixLineOne, prefixOtherLines) {
      var t1 = this._debugRender$4$parentConfiguration$prefixLineOne$prefixOtherLines(node, parentConfiguration, prefixLineOne, prefixOtherLines);
      return t1;
    },
    render$1(node) {
      return this.render$4$parentConfiguration$prefixLineOne$prefixOtherLines(node, null, "", null);
    },
    _debugRender$4$parentConfiguration$prefixLineOne$prefixOtherLines(node, parentConfiguration, prefixLineOne, prefixOtherLines) {
      var isSingleLine, t1, t2, descendants, t3, t4, t5, builder, children, description, wrapName, wrapDescription, uppercaseTitle, $name, includeName, propertiesIterable, properties, i, t6, property, propertyRender, propertyLines, t7, t8, t9, prefixChildrenRaw, child, childStyle, lastChildPrefixLineOne, childPrefixOtherLines, nextChildStyle, childPrefixLineOne, _this = this, _s1_ = "\n", _box_0 = {};
      _box_0.prefixOtherLines = prefixOtherLines;
      if (node.get$style(node) === B.DiagnosticsTreeStyle_8)
        isSingleLine = (parentConfiguration == null ? null : parentConfiguration.lineBreakProperties) !== true;
      else
        isSingleLine = false;
      if (prefixOtherLines == null) {
        _box_0.prefixOtherLines = prefixLineOne;
        t1 = prefixLineOne;
      } else
        t1 = prefixOtherLines;
      t2 = node.get$textTreeConfiguration();
      t2.toString;
      if (t1.length === 0)
        t1 = _box_0.prefixOtherLines = t1 + t2.prefixOtherLinesRootNode;
      if (node.get$style(node) === B.DiagnosticsTreeStyle_11) {
        descendants = A._setArrayType([], type$.JSArray_String);
        _box_0.lines = _box_0.depth = 0;
        new A.TextTreeRenderer__debugRender_visitor(_box_0, descendants).call$1(node);
        if (_box_0.lines > 1)
          t1 = prefixLineOne + ("This " + A.S(node.name) + " had the following descendants (showing up to depth 5):\n");
        else {
          t1 = node.name;
          t1 = descendants.length === 1 ? prefixLineOne + ("This " + A.S(t1) + " had the following child:\n") : prefixLineOne + ("This " + A.S(t1) + " has no descendants.\n");
        }
        t1 = A.StringBuffer__writeAll(t1, descendants, _s1_);
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      t3 = _this._wrapWidthProperties;
      t4 = Math.max(_this._wrapWidth, t1.length + t3);
      t5 = new A.StringBuffer("");
      builder = new A._PrefixedStringBuilder(prefixLineOne, t1, t4, new A.StringBuffer(""), t5, A._setArrayType([], type$.JSArray_int));
      children = node.getChildren$0();
      description = node.toDescription$1$parentConfiguration(parentConfiguration);
      t1 = t2.beforeName;
      if (t1.length !== 0)
        builder.write$1(0, t1);
      t1 = !isSingleLine;
      wrapName = t1 && node.get$allowNameWrap();
      wrapDescription = t1 && node.get$allowWrap();
      uppercaseTitle = node.get$style(node) === B.DiagnosticsTreeStyle_5;
      $name = node.name;
      if (uppercaseTitle)
        $name = $name == null ? null : $name.toUpperCase();
      if (description.length === 0) {
        if (node.get$showName() && $name != null)
          builder.write$2$allowWrap(0, $name, wrapName);
      } else {
        if ($name != null && $name.length !== 0 && node.get$showName()) {
          builder.write$2$allowWrap(0, $name, wrapName);
          if (node.showSeparator)
            builder.write$2$allowWrap(0, t2.afterName, wrapName);
          builder.write$2$allowWrap(0, t2.isNameOnOwnLine || B.JSString_methods.contains$1(description, _s1_) ? _s1_ : " ", wrapName);
          includeName = true;
        } else
          includeName = false;
        if (t1 && builder.get$requiresMultipleLines() && t5._contents.length !== 0)
          builder.write$1(0, _s1_);
        if (includeName)
          builder.incrementPrefixOtherLines$2$updateCurrentLine(children.length === 0 ? t2.propertyPrefixNoChildren : t2.propertyPrefixIfChildren, true);
        if (uppercaseTitle)
          description = description.toUpperCase();
        builder.write$2$allowWrap(0, B.JSString_methods.trimRight$0(description), wrapDescription);
        if (!includeName)
          builder.incrementPrefixOtherLines$2$updateCurrentLine(children.length === 0 ? t2.propertyPrefixNoChildren : t2.propertyPrefixIfChildren, false);
      }
      t1 = t2.suffixLineOne;
      if (t1.length !== 0)
        builder.writeStretched$2(t1, t4);
      t1 = node.getProperties$0(0);
      t4 = A._arrayInstanceType(t1)._eval$1("WhereIterable<1>");
      propertiesIterable = new A.WhereIterable(t1, new A.TextTreeRenderer__debugRender_closure(_this), t4);
      t1 = _this._maxDescendentsTruncatableNode;
      if (t1 >= 0 && node.get$allowTruncate()) {
        t4 = t4._eval$1("Iterable.E");
        if (propertiesIterable.get$length(propertiesIterable) < t1) {
          t4 = A.TakeIterable_TakeIterable(propertiesIterable, t1, t4);
          properties = A.List_List$of(t4, true, A._instanceType(t4)._eval$1("Iterable.E"));
          B.JSArray_methods.add$1(properties, A.DiagnosticsNode_DiagnosticsNode$message("...", true));
        } else
          properties = A.List_List$of(propertiesIterable, true, t4);
        if (t1 < children.length) {
          children = A.SubListIterable$(children, 0, A.checkNotNullable(t1, "count", type$.int), A._arrayInstanceType(children)._precomputed1).toList$0(0);
          B.JSArray_methods.add$1(children, A.DiagnosticsNode_DiagnosticsNode$message("...", true));
        }
      } else
        properties = A.List_List$of(propertiesIterable, true, t4._eval$1("Iterable.E"));
      if (properties.length !== 0 || children.length !== 0 || node.get$emptyBodyDescription() != null)
        t1 = node.showSeparator || description.length !== 0;
      else
        t1 = false;
      if (t1)
        builder.write$1(0, t2.afterDescriptionIfBody);
      t1 = t2.lineBreakProperties;
      if (t1)
        builder.write$1(0, t2.lineBreak);
      if (properties.length !== 0)
        builder.write$1(0, t2.beforeProperties);
      t4 = t2.bodyIndent;
      builder.incrementPrefixOtherLines$2$updateCurrentLine(t4, false);
      if (node.get$emptyBodyDescription() != null && properties.length === 0 && children.length === 0 && prefixLineOne.length !== 0) {
        t5 = node.get$emptyBodyDescription();
        t5.toString;
        builder.write$1(0, t5);
        if (t1)
          builder.write$1(0, t2.lineBreak);
      }
      for (t5 = t2.propertySeparator, t1 = !t1, i = 0; t6 = properties.length, i < t6; ++i) {
        property = properties[i];
        if (i > 0)
          builder.write$1(0, t5);
        t6 = property.get$textTreeConfiguration();
        t6.toString;
        if (property.get$style(property) === B.DiagnosticsTreeStyle_8) {
          propertyRender = _this.render$4$parentConfiguration$prefixLineOne$prefixOtherLines(property, t2, t6.prefixLineOne, t6.childLinkSpace + t6.prefixOtherLines);
          propertyLines = propertyRender.split(_s1_);
          if (propertyLines.length === 1 && t1)
            builder.write$1(0, B.JSArray_methods.get$first(propertyLines));
          else {
            builder.write$1(0, propertyRender);
            if (!B.JSString_methods.endsWith$1(propertyRender, _s1_))
              builder.write$1(0, _s1_);
          }
        } else {
          t7 = builder._nextPrefixOtherLines;
          t8 = t7 == null;
          t9 = A.S(t8 ? builder._prefixOtherLines : t7) + t6.prefixLineOne;
          builder.writeRawLines$1(_this.render$4$parentConfiguration$prefixLineOne$prefixOtherLines(property, t2, t9, A.S(t8 ? builder._prefixOtherLines : t7) + t6.childLinkSpace + t6.prefixOtherLines));
        }
      }
      if (t6 !== 0)
        builder.write$1(0, t2.afterProperties);
      builder.write$1(0, "");
      if (t1)
        builder.write$1(0, t2.lineBreak);
      prefixChildrenRaw = A.S(_box_0.prefixOtherLines) + t4;
      if (children.length === 0)
        if (t2.addBlankLineIfNoChildren)
          if (builder.get$requiresMultipleLines()) {
            t1 = builder._nextPrefixOtherLines;
            if (t1 == null)
              t1 = builder._prefixOtherLines;
            t1.toString;
            t1 = B.JSString_methods.trimRight$0(t1).length !== 0;
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      if (t1)
        builder.write$1(0, t2.lineBreak);
      if (children.length !== 0 && t2.showChildren) {
        if (t2.isBlankLineBetweenPropertiesAndChildren && properties.length !== 0 && B.JSArray_methods.get$first(children).get$textTreeConfiguration().isBlankLineBetweenPropertiesAndChildren)
          builder.write$1(0, t2.lineBreak);
        builder._prefixOtherLines = _box_0.prefixOtherLines;
        builder._nextPrefixOtherLines = null;
        for (t1 = t2.lineBreak, t4 = builder.wrapWidth, i = 0; i < children.length; ++i) {
          child = children[i];
          childStyle = child.get$style(child);
          if (childStyle === B.DiagnosticsTreeStyle_8 || childStyle === B.DiagnosticsTreeStyle_9)
            t5 = t2;
          else
            t5 = child.get$textTreeConfiguration();
          t5.toString;
          if (i === children.length - 1) {
            lastChildPrefixLineOne = prefixChildrenRaw + t5.prefixLastChildLineOne;
            t6 = t5.childLinkSpace;
            childPrefixOtherLines = prefixChildrenRaw + t6 + t5.prefixOtherLines;
            builder.writeRawLines$1(_this.render$4$parentConfiguration$prefixLineOne$prefixOtherLines(child, t2, lastChildPrefixLineOne, childPrefixOtherLines));
            t7 = t5.footer;
            if (t7.length !== 0) {
              builder._prefixOtherLines = prefixChildrenRaw;
              builder._nextPrefixOtherLines = null;
              builder.write$1(0, t6 + t7);
              t5 = t5.mandatoryFooter;
              if (t5.length !== 0)
                builder.writeStretched$2(t5, Math.max(t4, t3 + childPrefixOtherLines.length));
              builder.write$1(0, t1);
            }
          } else {
            t6 = children[i + 1];
            childStyle = t6.get$style(t6);
            if (childStyle === B.DiagnosticsTreeStyle_8 || childStyle === B.DiagnosticsTreeStyle_9)
              nextChildStyle = t2;
            else
              nextChildStyle = t6.get$textTreeConfiguration();
            childPrefixLineOne = prefixChildrenRaw + t5.prefixLineOne;
            childPrefixOtherLines = prefixChildrenRaw + nextChildStyle.linkCharacter + t5.prefixOtherLines;
            builder.writeRawLines$1(_this.render$4$parentConfiguration$prefixLineOne$prefixOtherLines(child, t2, childPrefixLineOne, childPrefixOtherLines));
            t6 = t5.footer;
            if (t6.length !== 0) {
              builder._prefixOtherLines = prefixChildrenRaw;
              builder._nextPrefixOtherLines = null;
              builder.write$1(0, t5.linkCharacter + t6);
              t5 = t5.mandatoryFooter;
              if (t5.length !== 0)
                builder.writeStretched$2(t5, Math.max(t4, t3 + childPrefixOtherLines.length));
              builder.write$1(0, t1);
            }
          }
        }
      }
      if (parentConfiguration == null && t2.mandatoryFooter.length !== 0) {
        builder.writeStretched$2(t2.mandatoryFooter, builder.wrapWidth);
        builder.write$1(0, t2.lineBreak);
      }
      if (builder._currentLine._contents.length !== 0)
        builder._finalizeLine$1(false);
      t1 = builder._diagnostics$_buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.TextTreeRenderer__debugRender_visitor.prototype = {
    call$1(node) {
      var t1, t2, t3, t4, _i, child, t5;
      for (t1 = node.getChildren$0(), t2 = t1.length, t3 = this._box_0, t4 = this.descendants, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        child = t1[_i];
        t5 = t3.lines;
        if (t5 < 25) {
          t5 = ++t3.depth;
          t4.push(A.S(t3.prefixOtherLines) + B.JSString_methods.$mul("  ", t5) + A.S(child));
          if (t3.depth < 5)
            this.call$1(child);
          --t3.depth;
        } else if (t5 === 25)
          t4.push(A.S(t3.prefixOtherLines) + "  ...(descendants list truncated after " + t5 + " lines)");
        ++t3.lines;
      }
    },
    $signature: 55
  };
  A.TextTreeRenderer__debugRender_closure.prototype = {
    call$1(n) {
      var t1 = n.get$level(n);
      return t1.index >= this.$this._minLevel.index;
    },
    $signature: 135
  };
  A.DiagnosticsNode.prototype = {
    get$level(_) {
      return B.DiagnosticLevel_3;
    },
    get$emptyBodyDescription() {
      return null;
    },
    get$allowWrap() {
      return false;
    },
    get$allowNameWrap() {
      return false;
    },
    get$allowTruncate() {
      return false;
    },
    toString$1$minLevel(_, minLevel) {
      return this.super$Object$toString(0);
    },
    toString$0($receiver) {
      return this.toString$1$minLevel($receiver, B.DiagnosticLevel_3);
    },
    get$textTreeConfiguration() {
      switch (this.get$style(this).index) {
        case 0:
          return null;
        case 3:
          return $.$get$denseTextConfiguration();
        case 1:
          return $.$get$sparseTextConfiguration();
        case 2:
          return $.$get$dashedTextConfiguration();
        case 6:
          return $.$get$whitespaceTextConfiguration();
        case 4:
          return $.$get$transitionTextConfiguration();
        case 8:
          return $.$get$singleLineTextConfiguration();
        case 9:
          return $.$get$errorPropertyTextConfiguration();
        case 10:
          return $.$get$shallowTextConfiguration();
        case 5:
          return $.$get$errorTextConfiguration();
        case 11:
          return $.$get$whitespaceTextConfiguration();
        case 7:
          return $.$get$flatTextConfiguration();
      }
    },
    get$name(receiver) {
      return this.name;
    },
    get$showName() {
      return this.showName;
    },
    get$style(receiver) {
      return this.style;
    }
  };
  A.DiagnosticsProperty.prototype = {
    valueToString$1$parentConfiguration(parentConfiguration) {
      var v = this.get$value(this);
      return type$.DiagnosticableTree._is(v) ? v.toStringShort$0() : J.toString$0$(v);
    },
    toDescription$1$parentConfiguration(parentConfiguration) {
      var t2, result, _this = this,
        t1 = _this._description;
      if (t1 != null) {
        t2 = _this.tooltip;
        return t2 == null ? t1 : t1 + " (" + t2 + ")";
      }
      _this._maybeCacheValue$0();
      if (_this._diagnostics$_exception != null) {
        _this._maybeCacheValue$0();
        return "EXCEPTION (" + J.get$runtimeType$(_this._diagnostics$_exception).toString$0(0) + ")";
      }
      t1 = _this.ifNull;
      if (t1 != null && _this.get$value(_this) == null) {
        t1.toString;
        t2 = _this.tooltip;
        if (!(t2 == null))
          t1 = t1 + " (" + t2 + ")";
        return t1;
      }
      result = _this.valueToString$1$parentConfiguration(parentConfiguration);
      if (result.length === 0 && _this.ifEmpty != null) {
        t1 = _this.ifEmpty;
        t1.toString;
        result = t1;
      }
      t1 = _this.tooltip;
      return t1 == null ? result : result + " (" + t1 + ")";
    },
    get$value(_) {
      this._maybeCacheValue$0();
      return this._value;
    },
    _maybeCacheValue$0() {
      return;
    },
    get$isInteresting() {
      var t1 = this.defaultValue;
      return J.$eq$(t1, B.C__NoDefaultValue) || !J.$eq$(this.get$value(this), t1);
    },
    get$level(_) {
      var _this = this,
        t1 = _this._defaultLevel;
      if (t1 === B.DiagnosticLevel_0)
        return t1;
      _this._maybeCacheValue$0();
      if (_this._diagnostics$_exception != null)
        return B.DiagnosticLevel_7;
      if (_this.get$value(_this) == null && _this.missingIfNull)
        return B.DiagnosticLevel_4;
      if (!_this.get$isInteresting())
        return B.DiagnosticLevel_1;
      return t1;
    },
    getProperties$0(_) {
      return B.List_empty;
    },
    getChildren$0() {
      return B.List_empty;
    },
    get$allowWrap() {
      return this.allowWrap;
    },
    get$allowNameWrap() {
      return true;
    }
  };
  A.DiagnosticableNode.prototype = {
    get$builder() {
      var t1 = this._cachedBuilder;
      return t1;
    },
    get$style(_) {
      var t1 = this.style;
      if (t1 == null)
        t1 = this.get$builder().defaultDiagnosticsTreeStyle;
      return t1;
    },
    get$emptyBodyDescription() {
      return "";
    },
    getProperties$0(_) {
      return B.List_empty;
    },
    getChildren$0() {
      return B.List_empty;
    },
    toDescription$1$parentConfiguration(parentConfiguration) {
      return "";
    }
  };
  A.DiagnosticableTreeNode.prototype = {
    getChildren$0() {
      return this.value.debugDescribeChildren$0();
    }
  };
  A.DiagnosticPropertiesBuilder.prototype = {
    add$1(_, property) {
    }
  };
  A.Diagnosticable.prototype = {
    toStringShort$0() {
      return "<optimized out>#" + A.shortHash(this);
    },
    toString$1$minLevel(_, minLevel) {
      var t1 = this.toStringShort$0();
      return t1;
    },
    toString$0($receiver) {
      return this.toString$1$minLevel($receiver, B.DiagnosticLevel_3);
    },
    debugFillProperties$1(properties) {
    }
  };
  A.DiagnosticableTree.prototype = {
    toStringShort$0() {
      return "<optimized out>#" + A.shortHash(this);
    },
    debugDescribeChildren$0() {
      return B.List_empty;
    }
  };
  A.DiagnosticableTreeMixin.prototype = {
    toString$0(_) {
      return this.toDiagnosticsNode$1$style(B.DiagnosticsTreeStyle_8).super$Object$toString(0);
    },
    toStringDeep$3$minLevel$prefixLineOne$prefixOtherLines(minLevel, prefixLineOne, prefixOtherLines) {
      this.toDiagnosticsNode$0();
      return "";
    },
    toStringShort$0() {
      return "<optimized out>#" + A.shortHash(this);
    },
    toDiagnosticsNode$2$name$style($name, style) {
      return A.DiagnosticableTreeNode$($name, style, this);
    },
    toDiagnosticsNode$1$style(style) {
      return this.toDiagnosticsNode$2$name$style(null, style);
    },
    toDiagnosticsNode$0() {
      return this.toDiagnosticsNode$2$name$style(null, null);
    },
    debugDescribeChildren$0() {
      return B.List_empty;
    }
  };
  A.DiagnosticsBlock.prototype = {
    getChildren$0() {
      return this._children;
    },
    getProperties$0(_) {
      return this._properties;
    },
    toDescription$1$parentConfiguration(parentConfiguration) {
      return this._description;
    },
    get$level() {
      return B.DiagnosticLevel_3;
    },
    get$allowTruncate() {
      return this.allowTruncate;
    }
  };
  A._DiagnosticableTree_Object_Diagnosticable.prototype = {};
  A.Key.prototype = {};
  A.LocalKey.prototype = {};
  A.LicenseEntry.prototype = {};
  A.LicenseEntryWithLineBreaks.prototype = {};
  A.AbstractNode.prototype = {
    redepthChild$1(child) {
      var t1 = child._depth,
        t2 = this._depth;
      if (t1 <= t2) {
        child._depth = t2 + 1;
        child.redepthChildren$0();
      }
    },
    redepthChildren$0() {
    },
    get$owner() {
      return this._node$_owner;
    },
    attach$1(owner) {
      this._node$_owner = owner;
    },
    detach$0(_) {
      this._node$_owner = null;
    },
    get$parent(_) {
      return this._node$_parent;
    },
    adoptChild$1(child) {
      var t1;
      child._node$_parent = this;
      t1 = this._node$_owner;
      if (t1 != null)
        child.attach$1(t1);
      this.redepthChild$1(child);
    },
    dropChild$1(child) {
      child._node$_parent = null;
      if (this._node$_owner != null)
        child.detach$0(0);
    }
  };
  A.ObserverList.prototype = {
    get$_observer_list$_set() {
      var result, _this = this,
        value = _this.__ObserverList__set;
      if (value === $) {
        result = A.HashSet_HashSet(_this.$ti._precomputed1);
        A._lateInitializeOnceCheck(_this.__ObserverList__set, "_set");
        _this.__ObserverList__set = result;
        value = result;
      }
      return value;
    },
    remove$1(_, item) {
      this._isDirty = true;
      this.get$_observer_list$_set().clear$0(0);
      return B.JSArray_methods.remove$1(this._list, item);
    },
    clear$0(_) {
      this._isDirty = false;
      B.JSArray_methods.set$length(this._list, 0);
      this.get$_observer_list$_set().clear$0(0);
    },
    contains$1(_, element) {
      var _this = this,
        t1 = _this._list;
      if (t1.length < 3)
        return B.JSArray_methods.contains$1(t1, element);
      if (_this._isDirty) {
        _this.get$_observer_list$_set().addAll$1(0, t1);
        _this._isDirty = false;
      }
      return _this.get$_observer_list$_set().contains$1(0, element);
    },
    get$iterator(_) {
      var t1 = this._list;
      return new J.ArrayIterator(t1, t1.length);
    },
    get$isEmpty(_) {
      return this._list.length === 0;
    },
    get$isNotEmpty(_) {
      return this._list.length !== 0;
    }
  };
  A.HashedObserverList.prototype = {
    remove$1(_, item) {
      var t1 = this._observer_list$_map,
        value = t1.$index(0, item);
      if (value == null)
        return false;
      if (value === 1)
        t1.remove$1(0, item);
      else
        t1.$indexSet(0, item, value - 1);
      return true;
    },
    contains$1(_, element) {
      return this._observer_list$_map.containsKey$1(0, element);
    },
    get$iterator(_) {
      var t1 = this._observer_list$_map;
      return A.LinkedHashMapKeyIterator$(t1, t1._modifications);
    },
    get$isEmpty(_) {
      return this._observer_list$_map._length === 0;
    },
    get$isNotEmpty(_) {
      return this._observer_list$_map._length !== 0;
    }
  };
  A.TargetPlatform.prototype = {
    toString$0(_) {
      return "TargetPlatform." + this._name;
    }
  };
  A.WriteBuffer0.prototype = {
    _serialization$_alignTo$1(alignment) {
      var t1 = this._serialization$_buffer,
        mod = B.JSInt_methods.$mod(t1._typed_buffer$_length, alignment);
      if (mod !== 0)
        t1.addAll$3(0, $.$get$WriteBuffer__zeroBuffer(), 0, alignment - mod);
    },
    done$0() {
      var t1, t2, result, _this = this;
      if (_this._isDone)
        throw A.wrapException(A.StateError$("done() must not be called more than once on the same " + A.getRuntimeType(_this).toString$0(0) + "."));
      t1 = _this._serialization$_buffer;
      t2 = t1._typed_buffer$_buffer;
      result = A.NativeByteData_NativeByteData$view(t2.buffer, 0, t1._typed_buffer$_length * t2.BYTES_PER_ELEMENT);
      _this._serialization$_buffer = A.Uint8Buffer$();
      _this._isDone = true;
      return result;
    }
  };
  A.ReadBuffer0.prototype = {
    getUint8$0(_) {
      return this.data.getUint8(this._serialization$_position++);
    },
    getInt64$0(_) {
      var t1 = this._serialization$_position,
        t2 = $.$get$Endian_host();
      B.NativeByteData_methods.getInt64$2(this.data, t1, t2);
    },
    getUint8List$1($length) {
      var t1 = this.data,
        list = A.NativeUint8List_NativeUint8List$view(t1.buffer, t1.byteOffset + this._serialization$_position, $length);
      this._serialization$_position += $length;
      return list;
    },
    getInt64List$1($length) {
      var t1;
      this._serialization$_alignTo$1(8);
      t1 = this.data;
      B.NativeByteBuffer_methods.asInt64List$2(t1.buffer, t1.byteOffset + this._serialization$_position, $length);
    },
    _serialization$_alignTo$1(alignment) {
      var t1 = this._serialization$_position,
        mod = B.JSInt_methods.$mod(t1, alignment);
      if (mod !== 0)
        this._serialization$_position = t1 + (alignment - mod);
    }
  };
  A.StackFrame.prototype = {
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.number, _this.$package, _this.line, _this.column, _this.className, _this.method, _this.source, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      return other instanceof A.StackFrame && other.number === _this.number && other.$package === _this.$package && other.line === _this.line && other.column === _this.column && other.className === _this.className && other.method === _this.method && other.source === _this.source;
    },
    toString$0(_) {
      var _this = this;
      return "StackFrame(#" + _this.number + ", " + _this.packageScheme + ":" + _this.$package + "/" + _this.packagePath + ":" + _this.line + ":" + _this.column + ", className: " + _this.className + ", method: " + _this.method + ")";
    }
  };
  A.StackFrame_fromStackString_closure.prototype = {
    call$1(line) {
      return line.length !== 0;
    },
    $signature: 15
  };
  A.GestureDisposition.prototype = {
    toString$0(_) {
      return "GestureDisposition." + this._name;
    }
  };
  A.GestureArenaMember.prototype = {};
  A.GestureArenaEntry.prototype = {};
  A._GestureArena.prototype = {
    toString$0(_) {
      var _this = this,
        t1 = _this.members;
      t1 = t1.length === 0 ? "" + "<empty>" : "" + new A.MappedListIterable(t1, new A._GestureArena_toString_closure(_this), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,String>")).join$1(0, ", ");
      if (_this.isOpen)
        t1 += " [open]";
      if (_this.isHeld)
        t1 += " [held]";
      if (_this.hasPendingSweep)
        t1 += " [hasPendingSweep]";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A._GestureArena_toString_closure.prototype = {
    call$1(member) {
      if (member === this.$this.eagerWinner)
        return member.toString$0(0) + " (eager winner)";
      return member.toString$0(0);
    },
    $signature: 137
  };
  A.GestureArenaManager.prototype = {
    add$2(_, pointer, member) {
      this._arenas.putIfAbsent$2(0, pointer, new A.GestureArenaManager_add_closure(this, pointer)).members.push(member);
      return new A.GestureArenaEntry(this, pointer, member);
    },
    close$1(_, pointer) {
      var state = this._arenas.$index(0, pointer);
      if (state == null)
        return;
      state.isOpen = false;
      this._tryToResolveArena$2(pointer, state);
    },
    sweep$1(pointer) {
      var i,
        t1 = this._arenas,
        state = t1.$index(0, pointer);
      if (state == null)
        return;
      if (state.isHeld) {
        state.hasPendingSweep = true;
        return;
      }
      t1.remove$1(0, pointer);
      t1 = state.members;
      if (t1.length !== 0) {
        B.JSArray_methods.get$first(t1).acceptGesture$1(pointer);
        for (i = 1; i < t1.length; ++i)
          t1[i].rejectGesture$1(pointer);
      }
    },
    hold$1(pointer) {
      var state = this._arenas.$index(0, pointer);
      if (state == null)
        return;
      state.isHeld = true;
    },
    release$1(_, pointer) {
      var state = this._arenas.$index(0, pointer);
      if (state == null)
        return;
      state.isHeld = false;
      if (state.hasPendingSweep)
        this.sweep$1(pointer);
    },
    _resolve$3(pointer, member, disposition) {
      var state = this._arenas.$index(0, pointer);
      if (state == null)
        return;
      if (disposition === B.GestureDisposition_1) {
        B.JSArray_methods.remove$1(state.members, member);
        member.rejectGesture$1(pointer);
        if (!state.isOpen)
          this._tryToResolveArena$2(pointer, state);
      } else if (state.isOpen) {
        if (state.eagerWinner == null)
          state.eagerWinner = member;
      } else
        this._resolveInFavorOf$3(pointer, state, member);
    },
    _tryToResolveArena$2(pointer, state) {
      var t1 = state.members.length;
      if (t1 === 1)
        A.scheduleMicrotask(new A.GestureArenaManager__tryToResolveArena_closure(this, pointer, state));
      else if (t1 === 0)
        this._arenas.remove$1(0, pointer);
      else {
        t1 = state.eagerWinner;
        if (t1 != null)
          this._resolveInFavorOf$3(pointer, state, t1);
      }
    },
    _resolveByDefault$2(pointer, state) {
      var t1 = this._arenas;
      if (!t1.containsKey$1(0, pointer))
        return;
      t1.remove$1(0, pointer);
      B.JSArray_methods.get$first(state.members).acceptGesture$1(pointer);
    },
    _resolveInFavorOf$3(pointer, state, member) {
      var t1, t2, _i, rejectedMember;
      this._arenas.remove$1(0, pointer);
      for (t1 = state.members, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        rejectedMember = t1[_i];
        if (rejectedMember !== member)
          rejectedMember.rejectGesture$1(pointer);
      }
      member.acceptGesture$1(pointer);
    }
  };
  A.GestureArenaManager_add_closure.prototype = {
    call$0() {
      return new A._GestureArena(A._setArrayType([], type$.JSArray_GestureArenaMember));
    },
    $signature: 138
  };
  A.GestureArenaManager__tryToResolveArena_closure.prototype = {
    call$0() {
      return this.$this._resolveByDefault$2(this.pointer, this.state);
    },
    $signature: 0
  };
  A._Resampler.prototype = {
    stop$0(_) {
      var t1, t2, t3, t4, t5, _this = this;
      for (t1 = _this._resamplers, t2 = t1.get$values(t1), t2 = new A.MappedIterator(J.get$iterator$ax(t2.__internal$_iterable), t2._f), t3 = _this._binding0$_handlePointerEvent, t4 = A._instanceType(t2)._rest[1]; t2.moveNext$0();) {
        t5 = t2.__internal$_current;
        (t5 == null ? t4._as(t5) : t5).stop$1(0, t3);
      }
      t1.clear$0(0);
      _this._frameTime = B.Duration_0;
      t1 = _this._binding0$_timer;
      if (t1 != null)
        t1.cancel$0(0);
    }
  };
  A.GestureBinding.prototype = {
    _handlePointerDataPacket$1(packet) {
      var t1 = packet.data,
        t2 = $.$get$window()._debugDevicePixelRatio;
      this.GestureBinding__pendingPointerEvents.addAll$1(0, A.PointerEventConverter_expand(t1, t2 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t2));
      if (this._lockCount <= 0)
        this._flushPointerEventQueue$0();
    },
    _flushPointerEventQueue$0() {
      for (var t1 = this.GestureBinding__pendingPointerEvents; !t1.get$isEmpty(t1);)
        this.handlePointerEvent$1(t1.removeFirst$0());
    },
    handlePointerEvent$1($event) {
      this.get$_resampler().stop$0(0);
      this._handlePointerEventImmediately$1($event);
    },
    _handlePointerEventImmediately$1($event) {
      var hitTestResult, t2, _this = this,
        t1 = type$.PointerDownEvent._is($event);
      if (t1 || type$.PointerSignalEvent._is($event) || type$.PointerHoverEvent._is($event)) {
        hitTestResult = A.HitTestResult$();
        t2 = $event.get$position($event);
        A._lateReadCheck(_this.RendererBinding___RendererBinding__pipelineOwner, "_pipelineOwner")._rootNode.hitTest$2$position(hitTestResult, t2);
        _this.super$GestureBinding$hitTest(hitTestResult, t2);
        if (t1)
          _this.GestureBinding__hitTests.$indexSet(0, $event.get$pointer(), hitTestResult);
        t1 = hitTestResult;
      } else if (type$.PointerUpEvent._is($event) || type$.PointerCancelEvent._is($event)) {
        hitTestResult = _this.GestureBinding__hitTests.remove$1(0, $event.get$pointer());
        t1 = hitTestResult;
      } else
        t1 = $event.get$down() ? _this.GestureBinding__hitTests.$index(0, $event.get$pointer()) : null;
      if (t1 != null || type$.PointerAddedEvent._is($event) || type$.PointerRemovedEvent._is($event))
        _this.dispatchEvent$2(0, $event, t1);
    },
    hitTest$2(result, position) {
      result.add$1(0, new A.HitTestEntry(this, type$.HitTestEntry_HitTestTarget));
    },
    dispatchEvent$2(_, $event, hitTestResult) {
      var exception, stack, entry, exception0, stack0, t1, t2, _i, t3, t4,
        _s15_ = "gesture library";
      if (hitTestResult == null) {
        try {
          this.GestureBinding_pointerRouter.route$1($event);
        } catch (exception0) {
          exception = A.unwrapException(exception0);
          stack = A.getTraceFromException(exception0);
          A.FlutterError_reportError(A.FlutterErrorDetailsForPointerEventDispatcher$(A.ErrorDescription$("while dispatching a non-hit-tested pointer event"), $event, exception, null, new A.GestureBinding_dispatchEvent_closure($event), _s15_, stack));
        }
        return;
      }
      for (t1 = hitTestResult._path, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        entry = t1[_i];
        try {
          entry.target.handleEvent$2($event.transformed$1(entry._hit_test$_transform), entry);
        } catch (exception) {
          exception0 = A.unwrapException(exception);
          stack0 = A.getTraceFromException(exception);
          t3 = A.ErrorDescription$("while dispatching a pointer event");
          t4 = $.$get$FlutterError_onError();
          if (t4 != null)
            t4.call$1(new A.FlutterErrorDetailsForPointerEventDispatcher(exception0, stack0, _s15_, t3, new A.GestureBinding_dispatchEvent_closure0($event, entry), false));
        }
      }
    },
    handleEvent$2($event, entry) {
      var _this = this;
      _this.GestureBinding_pointerRouter.route$1($event);
      if (type$.PointerDownEvent._is($event))
        _this.GestureBinding_gestureArena.close$1(0, $event.get$pointer());
      else if (type$.PointerUpEvent._is($event))
        _this.GestureBinding_gestureArena.sweep$1($event.get$pointer());
      else if (type$.PointerSignalEvent._is($event))
        _this.GestureBinding_pointerSignalResolver.resolve$1($event);
    },
    _handleSampleTimeChanged$0() {
      if (this._lockCount <= 0)
        this.get$_resampler().stop$0(0);
    },
    get$_resampler() {
      var _this = this,
        value = _this.GestureBinding___GestureBinding__resampler;
      if (value === $) {
        $.$get$Stopwatch__frequency();
        A._lateInitializeOnceCheck(value, "_resampler");
        value = _this.GestureBinding___GestureBinding__resampler = new A._Resampler(A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.PointerEventResampler), B.Duration_0, new A.Stopwatch(), B.Duration_0, B.Duration_0, _this.get$_handlePointerEventImmediately(), _this.get$_handleSampleTimeChanged(), B.Duration_16667);
      }
      return value;
    },
    $isHitTestTarget: 1
  };
  A.GestureBinding_dispatchEvent_closure.prototype = {
    call$0() {
      var _null = null;
      return A._setArrayType([A.DiagnosticsProperty$("Event", this.event, true, B.C__NoDefaultValue, _null, false, _null, _null, B.DiagnosticLevel_3, false, true, true, B.DiagnosticsTreeStyle_9, _null, type$.PointerEvent_2)], type$.JSArray_DiagnosticsNode);
    },
    $signature: 9
  };
  A.GestureBinding_dispatchEvent_closure0.prototype = {
    call$0() {
      var _null = null;
      return A._setArrayType([A.DiagnosticsProperty$("Event", this.event, true, B.C__NoDefaultValue, _null, false, _null, _null, B.DiagnosticLevel_3, false, true, true, B.DiagnosticsTreeStyle_9, _null, type$.PointerEvent_2), A.DiagnosticsProperty$("Target", this.entry.target, true, B.C__NoDefaultValue, _null, false, _null, _null, B.DiagnosticLevel_3, false, true, true, B.DiagnosticsTreeStyle_9, _null, type$.HitTestTarget)], type$.JSArray_DiagnosticsNode);
    },
    $signature: 9
  };
  A.FlutterErrorDetailsForPointerEventDispatcher.prototype = {};
  A.PointerEventConverter_expand_closure.prototype = {
    call$1(datum) {
      return datum.signalKind !== B.PointerSignalKind_2;
    },
    $signature: 141
  };
  A.PointerEventConverter_expand_closure0.prototype = {
    call$1(datum) {
      var t3, t4, t5, t6, t7, t8, t9, t10, scrollDelta,
        _s11_ = "Unreachable",
        t1 = this.devicePixelRatio,
        position = new A.Offset(datum.physicalX, datum.physicalY).$div(0, t1),
        delta = new A.Offset(datum.physicalDeltaX, datum.physicalDeltaY).$div(0, t1),
        radiusMinor = datum.radiusMinor / t1,
        radiusMajor = datum.radiusMajor / t1,
        radiusMin = datum.radiusMin / t1,
        radiusMax = datum.radiusMax / t1,
        timeStamp = datum.timeStamp,
        kind = datum.kind,
        t2 = datum.signalKind;
      switch ((t2 == null ? B.PointerSignalKind_0 : t2).index) {
        case 0:
          switch (datum.change.index) {
            case 1:
              t1 = datum.device;
              t2 = datum.pressureMin;
              t3 = datum.pressureMax;
              return A.PointerAddedEvent$(t1, datum.distance, datum.distanceMax, 0, kind, false, datum.orientation, position, t3, t2, radiusMax, radiusMin, datum.tilt, timeStamp);
            case 3:
              t1 = datum.device;
              t2 = datum.buttons;
              t3 = datum.pressureMin;
              t4 = datum.pressureMax;
              t5 = datum.distance;
              t6 = datum.distanceMax;
              t7 = datum.size;
              t8 = datum.orientation;
              t9 = datum.tilt;
              return A.PointerHoverEvent$(t2, delta, t1, t5, t6, 0, kind, false, t8, position, t4, t3, radiusMajor, radiusMax, radiusMin, radiusMinor, t7, datum.synthesized, t9, timeStamp);
            case 4:
              t1 = datum.pointerIdentifier;
              t2 = datum.device;
              t3 = A._synthesiseDownButtons(datum.buttons, kind);
              t4 = datum.pressure;
              t5 = datum.pressureMin;
              t6 = datum.pressureMax;
              t7 = datum.distanceMax;
              t8 = datum.size;
              return A.PointerDownEvent$(t3, t2, t7, 0, kind, false, datum.orientation, t1, position, t4, t6, t5, radiusMajor, radiusMax, radiusMin, radiusMinor, t8, datum.tilt, timeStamp);
            case 5:
              t1 = datum.pointerIdentifier;
              t2 = datum.device;
              t3 = A._synthesiseDownButtons(datum.buttons, kind);
              t4 = datum.pressure;
              t5 = datum.pressureMin;
              t6 = datum.pressureMax;
              t7 = datum.distanceMax;
              t8 = datum.size;
              t9 = datum.orientation;
              t10 = datum.tilt;
              return A.PointerMoveEvent$(t3, delta, t2, t7, 0, kind, false, t9, datum.platformData, t1, position, t4, t6, t5, radiusMajor, radiusMax, radiusMin, radiusMinor, t8, datum.synthesized, t10, timeStamp);
            case 6:
              t1 = datum.pointerIdentifier;
              t2 = datum.device;
              t3 = datum.buttons;
              t4 = datum.pressure;
              t5 = datum.pressureMin;
              t6 = datum.pressureMax;
              t7 = datum.distance;
              t8 = datum.distanceMax;
              t9 = datum.size;
              return A.PointerUpEvent$(t3, t2, t7, t8, 0, kind, false, datum.orientation, t1, position, t4, t6, t5, radiusMajor, radiusMax, radiusMin, radiusMinor, t9, datum.tilt, timeStamp);
            case 0:
              t1 = datum.pointerIdentifier;
              t2 = datum.device;
              t3 = datum.buttons;
              t4 = datum.pressureMin;
              t5 = datum.pressureMax;
              t6 = datum.distance;
              t7 = datum.distanceMax;
              t8 = datum.size;
              return A.PointerCancelEvent$(t3, t2, t6, t7, 0, kind, false, datum.orientation, t1, position, t5, t4, radiusMajor, radiusMax, radiusMin, radiusMinor, t8, datum.tilt, timeStamp);
            case 2:
              t1 = datum.device;
              t2 = datum.pressureMin;
              t3 = datum.pressureMax;
              return A.PointerRemovedEvent$(t1, datum.distanceMax, 0, kind, false, position, t3, t2, radiusMax, radiusMin, timeStamp);
            default:
              throw A.wrapException(A.StateError$(_s11_));
          }
        case 1:
          scrollDelta = new A.Offset(datum.scrollDeltaX, datum.scrollDeltaY).$div(0, t1);
          return A.PointerScrollEvent$(datum.device, 0, kind, position, scrollDelta, timeStamp);
        case 2:
          throw A.wrapException(A.StateError$(_s11_));
      }
    },
    $signature: 142
  };
  A.PointerEvent.prototype = {
    get$localPosition() {
      return this.position;
    },
    get$timeStamp(receiver) {
      return this.timeStamp;
    },
    get$pointer() {
      return this.pointer;
    },
    get$kind(receiver) {
      return this.kind;
    },
    get$device(receiver) {
      return this.device;
    },
    get$position(receiver) {
      return this.position;
    },
    get$delta() {
      return this.delta;
    },
    get$buttons(receiver) {
      return this.buttons;
    },
    get$down() {
      return this.down;
    },
    get$obscured() {
      return this.obscured;
    },
    get$pressureMin() {
      return this.pressureMin;
    },
    get$pressureMax() {
      return this.pressureMax;
    },
    get$distance() {
      return this.distance;
    },
    get$distanceMax() {
      return this.distanceMax;
    },
    get$size(receiver) {
      return this.size;
    },
    get$radiusMajor() {
      return this.radiusMajor;
    },
    get$radiusMinor() {
      return this.radiusMinor;
    },
    get$radiusMin() {
      return this.radiusMin;
    },
    get$radiusMax() {
      return this.radiusMax;
    },
    get$orientation(receiver) {
      return this.orientation;
    },
    get$tilt() {
      return this.tilt;
    },
    get$synthesized() {
      return this.synthesized;
    },
    get$transform(receiver) {
      return this.transform;
    }
  };
  A._PointerEventDescription.prototype = {$isPointerEvent: 1};
  A._AbstractPointerEvent.prototype = {$isPointerEvent: 1};
  A._TransformedPointerEvent.prototype = {
    get$timeStamp(_) {
      return this.get$original().timeStamp;
    },
    get$pointer() {
      return this.get$original().pointer;
    },
    get$kind(_) {
      return this.get$original().kind;
    },
    get$device(_) {
      return this.get$original().device;
    },
    get$position(_) {
      return this.get$original().position;
    },
    get$delta() {
      return this.get$original().delta;
    },
    get$buttons(_) {
      return this.get$original().buttons;
    },
    get$down() {
      return this.get$original().down;
    },
    get$obscured() {
      this.get$original();
      return false;
    },
    get$pressureMin() {
      return this.get$original().pressureMin;
    },
    get$pressureMax() {
      return this.get$original().pressureMax;
    },
    get$distance() {
      return this.get$original().distance;
    },
    get$distanceMax() {
      return this.get$original().distanceMax;
    },
    get$size(_) {
      return this.get$original().size;
    },
    get$radiusMajor() {
      return this.get$original().radiusMajor;
    },
    get$radiusMinor() {
      return this.get$original().radiusMinor;
    },
    get$radiusMin() {
      return this.get$original().radiusMin;
    },
    get$radiusMax() {
      return this.get$original().radiusMax;
    },
    get$orientation(_) {
      return this.get$original().orientation;
    },
    get$tilt() {
      return this.get$original().tilt;
    },
    get$synthesized() {
      return this.get$original().synthesized;
    },
    get$localPosition() {
      var result, _this = this,
        value = _this.___TransformedPointerEvent_localPosition;
      if (value === $) {
        result = A.PointerEvent_transformPosition(_this.get$transform(_this), _this.get$original().position);
        A._lateInitializeOnceCheck(_this.___TransformedPointerEvent_localPosition, "localPosition");
        _this.___TransformedPointerEvent_localPosition = result;
        value = result;
      }
      return value;
    }
  };
  A._CopyPointerAddedEvent.prototype = {};
  A.PointerAddedEvent.prototype = {
    transformed$1(transform) {
      if (transform == null || transform.$eq(0, this.transform))
        return this;
      return new A._TransformedPointerAddedEvent(this, transform);
    }
  };
  A._TransformedPointerAddedEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(transform);
    },
    $isPointerAddedEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform(receiver) {
      return this.transform;
    }
  };
  A._CopyPointerRemovedEvent.prototype = {};
  A.PointerRemovedEvent.prototype = {
    transformed$1(transform) {
      if (transform == null || transform.$eq(0, this.transform))
        return this;
      return new A._TransformedPointerRemovedEvent(this, transform);
    }
  };
  A._TransformedPointerRemovedEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(transform);
    },
    $isPointerRemovedEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform(receiver) {
      return this.transform;
    }
  };
  A._CopyPointerHoverEvent.prototype = {};
  A.PointerHoverEvent.prototype = {
    transformed$1(transform) {
      if (transform == null || transform.$eq(0, this.transform))
        return this;
      return new A._TransformedPointerHoverEvent(this, transform);
    }
  };
  A._TransformedPointerHoverEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(transform);
    },
    $isPointerHoverEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform(receiver) {
      return this.transform;
    }
  };
  A._CopyPointerEnterEvent.prototype = {};
  A.PointerEnterEvent.prototype = {
    transformed$1(transform) {
      if (transform == null || transform.$eq(0, this.transform))
        return this;
      return new A._TransformedPointerEnterEvent(this, transform);
    }
  };
  A._TransformedPointerEnterEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(transform);
    },
    $isPointerEnterEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform(receiver) {
      return this.transform;
    }
  };
  A._CopyPointerExitEvent.prototype = {};
  A.PointerExitEvent.prototype = {
    transformed$1(transform) {
      if (transform == null || transform.$eq(0, this.transform))
        return this;
      return new A._TransformedPointerExitEvent(this, transform);
    }
  };
  A._TransformedPointerExitEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(transform);
    },
    $isPointerExitEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform(receiver) {
      return this.transform;
    }
  };
  A._CopyPointerDownEvent.prototype = {};
  A.PointerDownEvent.prototype = {
    transformed$1(transform) {
      if (transform == null || transform.$eq(0, this.transform))
        return this;
      return new A._TransformedPointerDownEvent(this, transform);
    }
  };
  A._TransformedPointerDownEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(transform);
    },
    $isPointerDownEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform(receiver) {
      return this.transform;
    }
  };
  A._CopyPointerMoveEvent.prototype = {};
  A.PointerMoveEvent.prototype = {
    transformed$1(transform) {
      if (transform == null || transform.$eq(0, this.transform))
        return this;
      return new A._TransformedPointerMoveEvent(this, transform);
    }
  };
  A._TransformedPointerMoveEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(transform);
    },
    $isPointerMoveEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform(receiver) {
      return this.transform;
    }
  };
  A._CopyPointerUpEvent.prototype = {};
  A.PointerUpEvent.prototype = {
    transformed$1(transform) {
      if (transform == null || transform.$eq(0, this.transform))
        return this;
      return new A._TransformedPointerUpEvent(this, transform);
    }
  };
  A._TransformedPointerUpEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(transform);
    },
    $isPointerUpEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform(receiver) {
      return this.transform;
    }
  };
  A.PointerSignalEvent.prototype = {};
  A._CopyPointerScrollEvent.prototype = {};
  A.PointerScrollEvent.prototype = {
    transformed$1(transform) {
      if (transform == null || transform.$eq(0, this.transform))
        return this;
      return new A._TransformedPointerScrollEvent(this, transform);
    }
  };
  A._TransformedPointerScrollEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(transform);
    },
    $isPointerSignalEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform(receiver) {
      return this.transform;
    }
  };
  A._CopyPointerCancelEvent.prototype = {};
  A.PointerCancelEvent.prototype = {
    transformed$1(transform) {
      if (transform == null || transform.$eq(0, this.transform))
        return this;
      return new A._TransformedPointerCancelEvent(this, transform);
    }
  };
  A._TransformedPointerCancelEvent.prototype = {
    transformed$1(transform) {
      return this.original.transformed$1(transform);
    },
    $isPointerCancelEvent: 1,
    get$original() {
      return this.original;
    },
    get$transform(receiver) {
      return this.transform;
    }
  };
  A._PointerAddedEvent_PointerEvent__PointerEventDescription.prototype = {};
  A._PointerAddedEvent_PointerEvent__PointerEventDescription__CopyPointerAddedEvent.prototype = {};
  A._PointerCancelEvent_PointerEvent__PointerEventDescription.prototype = {};
  A._PointerCancelEvent_PointerEvent__PointerEventDescription__CopyPointerCancelEvent.prototype = {};
  A._PointerDownEvent_PointerEvent__PointerEventDescription.prototype = {};
  A._PointerDownEvent_PointerEvent__PointerEventDescription__CopyPointerDownEvent.prototype = {};
  A._PointerEnterEvent_PointerEvent__PointerEventDescription.prototype = {};
  A._PointerEnterEvent_PointerEvent__PointerEventDescription__CopyPointerEnterEvent.prototype = {};
  A._PointerEvent_Object_Diagnosticable.prototype = {};
  A._PointerExitEvent_PointerEvent__PointerEventDescription.prototype = {};
  A._PointerExitEvent_PointerEvent__PointerEventDescription__CopyPointerExitEvent.prototype = {};
  A._PointerHoverEvent_PointerEvent__PointerEventDescription.prototype = {};
  A._PointerHoverEvent_PointerEvent__PointerEventDescription__CopyPointerHoverEvent.prototype = {};
  A._PointerMoveEvent_PointerEvent__PointerEventDescription.prototype = {};
  A._PointerMoveEvent_PointerEvent__PointerEventDescription__CopyPointerMoveEvent.prototype = {};
  A._PointerRemovedEvent_PointerEvent__PointerEventDescription.prototype = {};
  A._PointerRemovedEvent_PointerEvent__PointerEventDescription__CopyPointerRemovedEvent.prototype = {};
  A._PointerScrollEvent_PointerSignalEvent__PointerEventDescription.prototype = {};
  A._PointerScrollEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollEvent.prototype = {};
  A._PointerUpEvent_PointerEvent__PointerEventDescription.prototype = {};
  A._PointerUpEvent_PointerEvent__PointerEventDescription__CopyPointerUpEvent.prototype = {};
  A.__TransformedPointerAddedEvent__TransformedPointerEvent__CopyPointerAddedEvent.prototype = {};
  A.__TransformedPointerCancelEvent__TransformedPointerEvent__CopyPointerCancelEvent.prototype = {};
  A.__TransformedPointerDownEvent__TransformedPointerEvent__CopyPointerDownEvent.prototype = {};
  A.__TransformedPointerEnterEvent__TransformedPointerEvent__CopyPointerEnterEvent.prototype = {};
  A.__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable.prototype = {};
  A.__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription.prototype = {};
  A.__TransformedPointerExitEvent__TransformedPointerEvent__CopyPointerExitEvent.prototype = {};
  A.__TransformedPointerHoverEvent__TransformedPointerEvent__CopyPointerHoverEvent.prototype = {};
  A.__TransformedPointerMoveEvent__TransformedPointerEvent__CopyPointerMoveEvent.prototype = {};
  A.__TransformedPointerRemovedEvent__TransformedPointerEvent__CopyPointerRemovedEvent.prototype = {};
  A.__TransformedPointerScrollEvent__TransformedPointerEvent__CopyPointerScrollEvent.prototype = {};
  A.__TransformedPointerUpEvent__TransformedPointerEvent__CopyPointerUpEvent.prototype = {};
  A.DeviceGestureSettings.prototype = {
    get$hashCode(_) {
      return A.hashValues(this.touchSlop, 23, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return other instanceof A.DeviceGestureSettings && other.touchSlop == this.touchSlop;
    },
    toString$0(_) {
      return "DeviceGestureSettings(touchSlop: " + A.S(this.touchSlop) + ")";
    }
  };
  A.HitTestEntry.prototype = {
    toString$0(_) {
      return "<optimized out>#" + A.shortHash(this) + "(" + this.target.toString$0(0) + ")";
    }
  };
  A._TransformPart.prototype = {};
  A._MatrixTransformPart.prototype = {
    multiply$1(_, rhs) {
      return this.matrix.multiplied$1(rhs);
    }
  };
  A._OffsetTransformPart.prototype = {
    multiply$1(_, rhs) {
      var t3, tx, ty, t4,
        t1 = new Float64Array(16),
        t2 = new A.Matrix4(t1);
      t2.setFrom$1(rhs);
      t3 = this.offset;
      tx = t3._dx;
      ty = t3._dy;
      t3 = t1[0];
      t4 = t1[3];
      t1[0] = t3 + tx * t4;
      t1[1] = t1[1] + ty * t4;
      t1[2] = t1[2] + 0 * t4;
      t1[3] = t4;
      t4 = t1[4];
      t3 = t1[7];
      t1[4] = t4 + tx * t3;
      t1[5] = t1[5] + ty * t3;
      t1[6] = t1[6] + 0 * t3;
      t1[7] = t3;
      t3 = t1[8];
      t4 = t1[11];
      t1[8] = t3 + tx * t4;
      t1[9] = t1[9] + ty * t4;
      t1[10] = t1[10] + 0 * t4;
      t1[11] = t4;
      t4 = t1[12];
      t3 = t1[15];
      t1[12] = t4 + tx * t3;
      t1[13] = t1[13] + ty * t3;
      t1[14] = t1[14] + 0 * t3;
      t1[15] = t3;
      return t2;
    }
  };
  A.HitTestResult.prototype = {
    _globalizeTransforms$0() {
      var t2, last, t3, _i,
        t1 = this._localTransforms;
      if (t1.length === 0)
        return;
      t2 = this._transforms;
      last = B.JSArray_methods.get$last(t2);
      for (t3 = t1.length, _i = 0; _i < t1.length; t1.length === t3 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        last = t1[_i].multiply$1(0, last);
        t2.push(last);
      }
      B.JSArray_methods.set$length(t1, 0);
    },
    add$1(_, entry) {
      this._globalizeTransforms$0();
      entry._hit_test$_transform = B.JSArray_methods.get$last(this._transforms);
      this._path.push(entry);
    },
    popTransform$0() {
      var t1 = this._localTransforms;
      if (t1.length !== 0)
        t1.pop();
      else
        this._transforms.pop();
    },
    toString$0(_) {
      var t1 = this._path;
      return "HitTestResult(" + (t1.length === 0 ? "<empty path>" : B.JSArray_methods.join$1(t1, ", ")) + ")";
    }
  };
  A.LongPressGestureRecognizer.prototype = {
    isPointerAllowed$1($event) {
      var t1;
      switch ($event.get$buttons($event)) {
        case 1:
          if (this.onLongPress == null)
            t1 = true;
          else
            t1 = false;
          if (t1)
            return false;
          break;
        case 2:
          return false;
        case 4:
          return false;
        default:
          return false;
      }
      return this.super$GestureRecognizer$isPointerAllowed($event);
    },
    didExceedDeadline$0() {
      var t1, _this = this;
      _this.resolve$1(B.GestureDisposition_0);
      _this._longPressAccepted = true;
      t1 = _this._primaryPointer;
      t1.toString;
      _this.super$PrimaryPointerGestureRecognizer$acceptGesture(t1);
      _this._checkLongPressStart$0();
    },
    handlePrimaryPointer$1($event) {
      var t1, _this = this;
      if (!$event.get$synthesized()) {
        if (type$.PointerDownEvent._is($event)) {
          t1 = new A.VelocityTracker($event.get$kind($event), A.List_List$filled(20, null, false, type$.nullable__PointAtTime));
          _this._velocityTracker = t1;
          t1.addPosition$2($event.get$timeStamp($event), $event.get$localPosition());
        }
        if (type$.PointerMoveEvent._is($event)) {
          t1 = _this._velocityTracker;
          t1.toString;
          t1.addPosition$2($event.get$timeStamp($event), $event.get$localPosition());
        }
      }
      if (type$.PointerUpEvent._is($event)) {
        if (_this._longPressAccepted)
          _this._checkLongPressEnd$1($event);
        else
          _this.resolve$1(B.GestureDisposition_1);
        _this._reset$0();
      } else if (type$.PointerCancelEvent._is($event)) {
        _this._checkLongPressCancel$0();
        _this._reset$0();
      } else if (type$.PointerDownEvent._is($event)) {
        _this._longPressOrigin = new A.OffsetPair($event.get$localPosition(), $event.get$position($event));
        _this._initialButtons = $event.get$buttons($event);
        _this._checkLongPressDown$1($event);
      } else if (type$.PointerMoveEvent._is($event))
        if ($event.get$buttons($event) !== _this._initialButtons) {
          _this.resolve$1(B.GestureDisposition_1);
          t1 = _this._primaryPointer;
          t1.toString;
          _this.stopTrackingPointer$1(t1);
        } else if (_this._longPressAccepted)
          _this._checkLongPressMoveUpdate$1($event);
    },
    _checkLongPressDown$1($event) {
      this._longPressOrigin.toString;
      this._pointerToKind.$index(0, $event.get$pointer()).toString;
      switch (this._initialButtons) {
        case 1:
          break;
        case 2:
          break;
        case 4:
          break;
      }
    },
    _checkLongPressCancel$0() {
      if (this._recognizer$_state === B.GestureRecognizerState_1)
        switch (this._initialButtons) {
          case 1:
            break;
          case 2:
            break;
          case 4:
            break;
        }
    },
    _checkLongPressStart$0() {
      switch (this._initialButtons) {
        case 1:
          var t1 = this.onLongPress;
          if (t1 != null)
            this.invokeCallback$2("onLongPress", t1);
          break;
        case 2:
          break;
        case 4:
          break;
      }
    },
    _checkLongPressMoveUpdate$1($event) {
      $event.get$position($event);
      $event.get$localPosition();
      $event.get$position($event).$sub(0, this._longPressOrigin.global);
      $event.get$localPosition().$sub(0, this._longPressOrigin.local);
      switch (this._initialButtons) {
        case 1:
          break;
        case 2:
          break;
        case 4:
          break;
      }
    },
    _checkLongPressEnd$1($event) {
      this._velocityTracker.getVelocityEstimate$0();
      $event.get$position($event);
      $event.get$localPosition();
      this._velocityTracker = null;
      switch (this._initialButtons) {
        case 1:
          break;
        case 2:
          break;
        case 4:
          break;
      }
    },
    _reset$0() {
      var _this = this;
      _this._longPressAccepted = false;
      _this._velocityTracker = _this._initialButtons = _this._longPressOrigin = null;
    },
    resolve$1(disposition) {
      var _this = this;
      if (disposition === B.GestureDisposition_1)
        if (_this._longPressAccepted)
          _this._reset$0();
        else
          _this._checkLongPressCancel$0();
      _this.super$OneSequenceGestureRecognizer$resolve(disposition);
    },
    acceptGesture$1(pointer) {
    }
  };
  A._Vector.prototype = {
    $index(_, i) {
      return this._lsq_solver$_elements[i + this._lsq_solver$_offset];
    },
    $mul(_, a) {
      var t1, t2, t3, t4, t5, result, i;
      for (t1 = this._lsq_solver$_length, t2 = this._lsq_solver$_elements, t3 = this._lsq_solver$_offset, t4 = a._lsq_solver$_elements, t5 = a._lsq_solver$_offset, result = 0, i = 0; i < t1; ++i)
        result += t2[i + t3] * t4[i + t5];
      return result;
    }
  };
  A._Matrix.prototype = {};
  A.PolynomialFit.prototype = {};
  A.LeastSquaresSolver.prototype = {
    solve$1(degree) {
      var t3, result, t4, t5, t6, t7, h, i, j, t8, t9, dot, t10, norm, inverseNorm, wy, i0, yMean, sumSquaredError, sumSquaredTotal, err, term, v,
        t1 = this.x,
        t2 = t1.length;
      if (degree > t2)
        return null;
      t3 = degree + 1;
      result = new A.PolynomialFit(new Float64Array(t3));
      t4 = t3 * t2;
      t5 = new Float64Array(t4);
      for (t6 = this.w, t7 = 0 * t2, h = 0; h < t2; ++h) {
        t5[t7 + h] = t6[h];
        for (i = 1; i < t3; ++i)
          t5[i * t2 + h] = t5[(i - 1) * t2 + h] * t1[h];
      }
      t4 = new Float64Array(t4);
      t7 = new Float64Array(t3 * t3);
      for (j = 0; j < t3; ++j) {
        for (t8 = j * t2, h = 0; h < t2; ++h) {
          t9 = t8 + h;
          t4[t9] = t5[t9];
        }
        for (i = 0; i < j; ++i) {
          t9 = i * t2;
          dot = new A._Vector(t8, t2, t4).$mul(0, new A._Vector(t9, t2, t4));
          for (h = 0; h < t2; ++h) {
            t10 = t8 + h;
            t4[t10] = t4[t10] - dot * t4[t9 + h];
          }
        }
        t9 = new A._Vector(t8, t2, t4);
        norm = Math.sqrt(t9.$mul(0, t9));
        if (norm < 1e-10)
          return null;
        inverseNorm = 1 / norm;
        for (h = 0; h < t2; ++h) {
          t9 = t8 + h;
          t4[t9] = t4[t9] * inverseNorm;
        }
        for (t9 = j * t3, i = 0; i < t3; ++i) {
          t10 = i < j ? 0 : new A._Vector(t8, t2, t4).$mul(0, new A._Vector(i * t2, t2, t5));
          t7[t9 + i] = t10;
        }
      }
      t5 = new Float64Array(t2);
      wy = new A._Vector(0, t2, t5);
      for (t8 = this.y, h = 0; h < t2; ++h)
        t5[h] = t8[h] * t6[h];
      for (i = t3 - 1, t5 = result.coefficients, i0 = i; i0 >= 0; --i0) {
        t5[i0] = new A._Vector(i0 * t2, t2, t4).$mul(0, wy);
        for (t9 = i0 * t3, j = i; j > i0; --j)
          t5[i0] = t5[i0] - t7[t9 + j] * t5[j];
        t5[i0] = t5[i0] / t7[t9 + i0];
      }
      for (yMean = 0, h = 0; h < t2; ++h)
        yMean += t8[h];
      yMean /= t2;
      for (sumSquaredError = 0, sumSquaredTotal = 0, h = 0; h < t2; ++h) {
        t4 = t8[h];
        err = t4 - t5[0];
        for (term = 1, i = 1; i < t3; ++i) {
          term *= t1[h];
          err -= term * t5[i];
        }
        t7 = t6[h];
        t7 *= t7;
        sumSquaredError += t7 * err * err;
        v = t4 - yMean;
        sumSquaredTotal += t7 * v * v;
      }
      result.__PolynomialFit_confidence = sumSquaredTotal <= 1e-10 ? 1 : 1 - sumSquaredError / sumSquaredTotal;
      return result;
    }
  };
  A._CountdownZoned.prototype = {
    _onTimeout$0() {
      this._timeout = true;
    }
  };
  A._TapTracker.prototype = {
    stopTrackingPointer$1(route) {
      if (this._isTrackingPointer) {
        this._isTrackingPointer = false;
        $.GestureBinding__instance.GestureBinding_pointerRouter.removeRoute$2(this.pointer, route);
      }
    },
    isWithinGlobalTolerance$2($event, tolerance) {
      return $event.get$position($event).$sub(0, this._initialGlobalPosition).get$distance() <= tolerance;
    }
  };
  A.DoubleTapGestureRecognizer.prototype = {
    isPointerAllowed$1($event) {
      var t1;
      if (this._firstTap == null)
        switch ($event.get$buttons($event)) {
          case 1:
            t1 = this.onDoubleTap == null && true;
            if (t1)
              return false;
            break;
          default:
            return false;
        }
      return this.super$GestureRecognizer$isPointerAllowed($event);
    },
    addAllowedPointer$1($event) {
      var _this = this,
        t1 = _this._firstTap;
      if (t1 != null)
        if (!t1.isWithinGlobalTolerance$2($event, 100))
          return;
        else {
          t1 = _this._firstTap;
          if (!t1._doubleTapMinTimeCountdown._timeout || $event.get$buttons($event) !== t1.initialButtons) {
            _this._multitap$_reset$0();
            return _this._trackTap$1($event);
          }
        }
      _this._trackTap$1($event);
    },
    _trackTap$1($event) {
      var t1, t2, t3, t4, t5, tracker, _this = this;
      _this._stopDoubleTapTimer$0();
      t1 = $.GestureBinding__instance.GestureBinding_gestureArena.add$2(0, $event.get$pointer(), _this);
      t2 = $event.get$pointer();
      t3 = $event.get$position($event);
      t4 = $event.get$buttons($event);
      t5 = new A._CountdownZoned();
      A.Timer_Timer(B.Duration_40000, t5.get$_onTimeout());
      tracker = new A._TapTracker(t2, t1, t3, t4, t5);
      _this._trackers.$indexSet(0, $event.get$pointer(), tracker);
      t5 = $event.get$transform($event);
      if (!tracker._isTrackingPointer) {
        tracker._isTrackingPointer = true;
        $.GestureBinding__instance.GestureBinding_pointerRouter.addRoute$3(t2, _this.get$_handleEvent(), t5);
      }
    },
    _handleEvent$1($event) {
      var t3, _this = this,
        t1 = _this._trackers,
        t2 = t1.$index(0, $event.get$pointer());
      t2.toString;
      if (type$.PointerUpEvent._is($event)) {
        t3 = _this._firstTap;
        if (t3 == null) {
          if (_this._doubleTapTimer == null)
            _this._doubleTapTimer = A.Timer_Timer(B.Duration_300000, _this.get$_multitap$_reset());
          t3 = t2.pointer;
          $.GestureBinding__instance.GestureBinding_gestureArena.hold$1(t3);
          t2.stopTrackingPointer$1(_this.get$_handleEvent());
          t1.remove$1(0, t3);
          _this._clearTrackers$0();
          _this._firstTap = t2;
        } else {
          t3 = t3.entry;
          t3._arena._resolve$3(t3._pointer, t3._member, B.GestureDisposition_0);
          t3 = t2.entry;
          t3._arena._resolve$3(t3._pointer, t3._member, B.GestureDisposition_0);
          t2.stopTrackingPointer$1(_this.get$_handleEvent());
          t1.remove$1(0, t2.pointer);
          t1 = _this.onDoubleTap;
          if (t1 != null)
            _this.invokeCallback$2("onDoubleTap", t1);
          _this._multitap$_reset$0();
        }
      } else if (type$.PointerMoveEvent._is($event)) {
        if (!t2.isWithinGlobalTolerance$2($event, 18))
          _this._reject$1(t2);
      } else if (type$.PointerCancelEvent._is($event))
        _this._reject$1(t2);
    },
    acceptGesture$1(pointer) {
    },
    rejectGesture$1(pointer) {
      var t1, _this = this,
        tracker = _this._trackers.$index(0, pointer);
      if (tracker == null) {
        t1 = _this._firstTap;
        t1 = t1 != null && t1.pointer === pointer;
      } else
        t1 = false;
      if (t1)
        tracker = _this._firstTap;
      if (tracker != null)
        _this._reject$1(tracker);
    },
    _reject$1(tracker) {
      var t2, _this = this,
        t1 = _this._trackers;
      t1.remove$1(0, tracker.pointer);
      t2 = tracker.entry;
      t2._arena._resolve$3(t2._pointer, t2._member, B.GestureDisposition_1);
      tracker.stopTrackingPointer$1(_this.get$_handleEvent());
      t2 = _this._firstTap;
      if (t2 != null)
        if (tracker === t2)
          _this._multitap$_reset$0();
        else {
          _this._checkCancel$0();
          if (t1._length === 0)
            _this._multitap$_reset$0();
        }
    },
    dispose$0(_) {
      this._multitap$_reset$0();
      this.super$GestureRecognizer$dispose(0);
    },
    _multitap$_reset$0() {
      var t1, _this = this;
      _this._stopDoubleTapTimer$0();
      if (_this._firstTap != null) {
        if (_this._trackers._length !== 0)
          _this._checkCancel$0();
        t1 = _this._firstTap;
        t1.toString;
        _this._firstTap = null;
        _this._reject$1(t1);
        $.GestureBinding__instance.GestureBinding_gestureArena.release$1(0, t1.pointer);
      }
      _this._clearTrackers$0();
    },
    _clearTrackers$0() {
      var t1 = this._trackers;
      t1 = t1.get$values(t1);
      B.JSArray_methods.forEach$1(A.List_List$of(t1, true, A._instanceType(t1)._eval$1("Iterable.E")), this.get$_reject());
    },
    _stopDoubleTapTimer$0() {
      var t1 = this._doubleTapTimer;
      if (t1 != null) {
        t1.cancel$0(0);
        this._doubleTapTimer = null;
      }
    },
    _checkCancel$0() {
    }
  };
  A.PointerRouter.prototype = {
    addRoute$3(pointer, route, transform) {
      J.$indexSet$ax(this._routeMap.putIfAbsent$2(0, pointer, new A.PointerRouter_addRoute_closure()), route, transform);
    },
    removeRoute$2(pointer, route) {
      var t3,
        t1 = this._routeMap,
        t2 = t1.$index(0, pointer);
      t2.toString;
      t3 = J.getInterceptor$ax(t2);
      t3.remove$1(t2, route);
      if (t3.get$isEmpty(t2))
        t1.remove$1(0, pointer);
    },
    _pointer_router$_dispatch$3($event, route, transform) {
      var exception, stack, exception0, t1;
      try {
        route.call$1($event.transformed$1(transform));
      } catch (exception0) {
        exception = A.unwrapException(exception0);
        stack = A.getTraceFromException(exception0);
        t1 = A.ErrorDescription$("while routing a pointer event");
        A.FlutterError_reportError(new A.FlutterErrorDetails(exception, stack, "gesture library", t1, null, false));
      }
    },
    route$1($event) {
      var _this = this,
        routes = _this._routeMap.$index(0, $event.get$pointer()),
        t1 = _this._globalRoutes,
        t2 = type$.void_Function_PointerEvent,
        t3 = type$.nullable_Matrix4,
        copiedGlobalRoutes = A.LinkedHashMap_LinkedHashMap$of(t1, t2, t3);
      if (routes != null)
        _this._dispatchEventToRoutes$3($event, routes, A.LinkedHashMap_LinkedHashMap$of(routes, t2, t3));
      _this._dispatchEventToRoutes$3($event, t1, copiedGlobalRoutes);
    },
    _dispatchEventToRoutes$3($event, referenceRoutes, copiedRoutes) {
      copiedRoutes.forEach$1(0, new A.PointerRouter__dispatchEventToRoutes_closure(this, referenceRoutes, $event));
    }
  };
  A.PointerRouter_addRoute_closure.prototype = {
    call$0() {
      return A.LinkedHashMap_LinkedHashMap$_empty(type$.void_Function_PointerEvent, type$.nullable_Matrix4);
    },
    $signature: 144
  };
  A.PointerRouter__dispatchEventToRoutes_closure.prototype = {
    call$2(route, transform) {
      if (J.containsKey$1$x(this.referenceRoutes, route))
        this.$this._pointer_router$_dispatch$3(this.event, route, transform);
    },
    $signature: 145
  };
  A.PointerSignalResolver.prototype = {
    resolve$1($event) {
      return;
    }
  };
  A.DragStartBehavior.prototype = {
    toString$0(_) {
      return "DragStartBehavior." + this._name;
    }
  };
  A.GestureRecognizer.prototype = {
    addAllowedPointer$1($event) {
    },
    handleNonAllowedPointer$1($event) {
    },
    isPointerAllowed$1($event) {
      var t1 = this._supportedDevices;
      return t1 == null || t1.contains$1(0, $event.get$kind($event));
    },
    dispose$0(_) {
    },
    invokeCallback$1$3$debugReport($name, callback, debugReport) {
      var exception, stack, exception0, t1, result = null;
      try {
        result = callback.call$0();
      } catch (exception0) {
        exception = A.unwrapException(exception0);
        stack = A.getTraceFromException(exception0);
        t1 = A.ErrorDescription$("while handling a gesture");
        A.FlutterError_reportError(new A.FlutterErrorDetails(exception, stack, "gesture", t1, null, false));
      }
      return result;
    },
    invokeCallback$2($name, callback) {
      return this.invokeCallback$1$3$debugReport($name, callback, null, type$.dynamic);
    },
    $isDiagnosticableTree: 1
  };
  A.OneSequenceGestureRecognizer.prototype = {
    addAllowedPointer$1($event) {
      this.startTrackingPointer$2($event.get$pointer(), $event.get$transform($event));
    },
    handleNonAllowedPointer$1($event) {
      this.resolve$1(B.GestureDisposition_1);
    },
    acceptGesture$1(pointer) {
    },
    rejectGesture$1(pointer) {
    },
    resolve$1(disposition) {
      var _i, entry,
        t1 = this._entries,
        localEntries = A.List_List$of(t1.get$values(t1), true, type$.GestureArenaEntry);
      t1.clear$0(0);
      for (t1 = localEntries.length, _i = 0; _i < t1; ++_i) {
        entry = localEntries[_i];
        entry._arena._resolve$3(entry._pointer, entry._member, disposition);
      }
    },
    dispose$0(_) {
      var t1, t2, t3, t4, t5, t6, t7, t8, _this = this;
      _this.resolve$1(B.GestureDisposition_1);
      for (t1 = _this._trackedPointers, t2 = new A._HashSetIterator(t1, t1._computeElements$0()), t3 = A._instanceType(t2)._precomputed1; t2.moveNext$0();) {
        t4 = t2._collection$_current;
        if (t4 == null)
          t4 = t3._as(t4);
        t5 = $.GestureBinding__instance.GestureBinding_pointerRouter;
        t6 = _this.get$handleEvent();
        t5 = t5._routeMap;
        t7 = t5.$index(0, t4);
        t7.toString;
        t8 = J.getInterceptor$ax(t7);
        t8.remove$1(t7, t6);
        if (t8.get$isEmpty(t7))
          t5.remove$1(0, t4);
      }
      t1.clear$0(0);
      _this.super$GestureRecognizer$dispose(0);
    },
    _addPointerToArena$1(pointer) {
      return $.GestureBinding__instance.GestureBinding_gestureArena.add$2(0, pointer, this);
    },
    startTrackingPointer$2(pointer, transform) {
      var _this = this;
      $.GestureBinding__instance.GestureBinding_pointerRouter.addRoute$3(pointer, _this.get$handleEvent(), transform);
      _this._trackedPointers.add$1(0, pointer);
      _this._entries.$indexSet(0, pointer, _this._addPointerToArena$1(pointer));
    },
    stopTrackingPointer$1(pointer) {
      var t1 = this._trackedPointers;
      if (t1.contains$1(0, pointer)) {
        $.GestureBinding__instance.GestureBinding_pointerRouter.removeRoute$2(pointer, this.get$handleEvent());
        t1.remove$1(0, pointer);
        if (t1._collection$_length === 0)
          this.didStopTrackingLastPointer$1(pointer);
      }
    },
    stopTrackingIfPointerNoLongerDown$1($event) {
      if (type$.PointerUpEvent._is($event) || type$.PointerCancelEvent._is($event))
        this.stopTrackingPointer$1($event.get$pointer());
    }
  };
  A.GestureRecognizerState.prototype = {
    toString$0(_) {
      return "GestureRecognizerState." + this._name;
    }
  };
  A.PrimaryPointerGestureRecognizer.prototype = {
    addAllowedPointer$1($event) {
      var _this = this;
      _this.super$OneSequenceGestureRecognizer$addAllowedPointer($event);
      if (_this._recognizer$_state === B.GestureRecognizerState_0) {
        _this._recognizer$_state = B.GestureRecognizerState_1;
        _this._primaryPointer = $event.get$pointer();
        _this._initialPosition = new A.OffsetPair($event.get$localPosition(), $event.get$position($event));
        _this._timer = A.Timer_Timer(_this.deadline, new A.PrimaryPointerGestureRecognizer_addAllowedPointer_closure(_this, $event));
      }
    },
    handleNonAllowedPointer$1($event) {
      if (!this._gestureAccepted)
        this.super$OneSequenceGestureRecognizer$handleNonAllowedPointer($event);
    },
    handleEvent$1($event) {
      var isPreAcceptSlopPastTolerance, t1, isPostAcceptSlopPastTolerance, _this = this;
      if (_this._recognizer$_state === B.GestureRecognizerState_1 && $event.get$pointer() === _this._primaryPointer) {
        if (!_this._gestureAccepted)
          isPreAcceptSlopPastTolerance = _this._getGlobalDistance$1($event) > 18;
        else
          isPreAcceptSlopPastTolerance = false;
        if (_this._gestureAccepted) {
          t1 = _this.postAcceptSlopTolerance;
          isPostAcceptSlopPastTolerance = t1 != null && _this._getGlobalDistance$1($event) > t1;
        } else
          isPostAcceptSlopPastTolerance = false;
        if (type$.PointerMoveEvent._is($event))
          t1 = isPreAcceptSlopPastTolerance || isPostAcceptSlopPastTolerance;
        else
          t1 = false;
        if (t1) {
          _this.resolve$1(B.GestureDisposition_1);
          t1 = _this._primaryPointer;
          t1.toString;
          _this.stopTrackingPointer$1(t1);
        } else
          _this.handlePrimaryPointer$1($event);
      }
      _this.stopTrackingIfPointerNoLongerDown$1($event);
    },
    didExceedDeadline$0() {
    },
    acceptGesture$1(pointer) {
      if (pointer === this._primaryPointer) {
        this._stopTimer$0();
        this._gestureAccepted = true;
      }
    },
    rejectGesture$1(pointer) {
      var _this = this;
      if (pointer === _this._primaryPointer && _this._recognizer$_state === B.GestureRecognizerState_1) {
        _this._stopTimer$0();
        _this._recognizer$_state = B.GestureRecognizerState_2;
      }
    },
    didStopTrackingLastPointer$1(pointer) {
      var _this = this;
      _this._stopTimer$0();
      _this._recognizer$_state = B.GestureRecognizerState_0;
      _this._initialPosition = null;
      _this._gestureAccepted = false;
    },
    dispose$0(_) {
      this._stopTimer$0();
      this.super$OneSequenceGestureRecognizer$dispose(0);
    },
    _stopTimer$0() {
      var t1 = this._timer;
      if (t1 != null) {
        t1.cancel$0(0);
        this._timer = null;
      }
    },
    _getGlobalDistance$1($event) {
      return $event.get$position($event).$sub(0, this._initialPosition.global).get$distance();
    }
  };
  A.PrimaryPointerGestureRecognizer_addAllowedPointer_closure.prototype = {
    call$0() {
      this.$this.didExceedDeadline$0();
      return null;
    },
    $signature: 0
  };
  A.OffsetPair.prototype = {
    $add(_, other) {
      return new A.OffsetPair(this.local.$add(0, other.local), this.global.$add(0, other.global));
    },
    $sub(_, other) {
      return new A.OffsetPair(this.local.$sub(0, other.local), this.global.$sub(0, other.global));
    },
    toString$0(_) {
      return "OffsetPair(local: " + this.local.toString$0(0) + ", global: " + this.global.toString$0(0) + ")";
    }
  };
  A._GestureRecognizer_GestureArenaMember_DiagnosticableTreeMixin.prototype = {};
  A.TapDownDetails.prototype = {};
  A.TapUpDetails.prototype = {};
  A.BaseTapGestureRecognizer.prototype = {
    addAllowedPointer$1($event) {
      var _this = this;
      if (_this._recognizer$_state === B.GestureRecognizerState_0) {
        if (_this._down != null && _this._up != null)
          _this._tap$_reset$0();
        _this._down = $event;
      }
      if (_this._down != null)
        _this.super$PrimaryPointerGestureRecognizer$addAllowedPointer($event);
    },
    startTrackingPointer$2(pointer, transform) {
      this.super$OneSequenceGestureRecognizer$startTrackingPointer(pointer, transform);
    },
    handlePrimaryPointer$1($event) {
      var t1, t2, _this = this;
      if (type$.PointerUpEvent._is($event)) {
        _this._up = $event;
        _this._checkUp$0();
      } else if (type$.PointerCancelEvent._is($event)) {
        _this.resolve$1(B.GestureDisposition_1);
        if (_this._sentTapDown) {
          t1 = _this._down;
          t1.toString;
          _this.handleTapCancel$3$cancel$down$reason($event, t1, "");
        }
        _this._tap$_reset$0();
      } else {
        t1 = $event.get$buttons($event);
        t2 = _this._down;
        if (t1 !== t2.get$buttons(t2)) {
          _this.resolve$1(B.GestureDisposition_1);
          t1 = _this._primaryPointer;
          t1.toString;
          _this.stopTrackingPointer$1(t1);
        }
      }
    },
    resolve$1(disposition) {
      var t1, _this = this;
      if (_this._wonArenaForPrimaryPointer && disposition === B.GestureDisposition_1) {
        t1 = _this._down;
        t1.toString;
        _this.handleTapCancel$3$cancel$down$reason(null, t1, "spontaneous");
        _this._tap$_reset$0();
      }
      _this.super$OneSequenceGestureRecognizer$resolve(disposition);
    },
    didExceedDeadline$0() {
      this._checkDown$0();
    },
    acceptGesture$1(pointer) {
      var _this = this;
      _this.super$PrimaryPointerGestureRecognizer$acceptGesture(pointer);
      if (pointer === _this._primaryPointer) {
        _this._checkDown$0();
        _this._wonArenaForPrimaryPointer = true;
        _this._checkUp$0();
      }
    },
    rejectGesture$1(pointer) {
      var t1, _this = this;
      _this.super$PrimaryPointerGestureRecognizer$rejectGesture(pointer);
      if (pointer === _this._primaryPointer) {
        if (_this._sentTapDown) {
          t1 = _this._down;
          t1.toString;
          _this.handleTapCancel$3$cancel$down$reason(null, t1, "forced");
        }
        _this._tap$_reset$0();
      }
    },
    _checkDown$0() {
      var t1, _this = this;
      if (_this._sentTapDown)
        return;
      t1 = _this._down;
      t1.toString;
      _this.handleTapDown$1$down(t1);
      _this._sentTapDown = true;
    },
    _checkUp$0() {
      var t1, t2, _this = this;
      if (!_this._wonArenaForPrimaryPointer || _this._up == null)
        return;
      t1 = _this._down;
      t1.toString;
      t2 = _this._up;
      t2.toString;
      _this.handleTapUp$2$down$up(t1, t2);
      _this._tap$_reset$0();
    },
    _tap$_reset$0() {
      var _this = this;
      _this._wonArenaForPrimaryPointer = _this._sentTapDown = false;
      _this._down = _this._up = null;
    }
  };
  A.TapGestureRecognizer.prototype = {
    isPointerAllowed$1($event) {
      var _this = this;
      switch ($event.get$buttons($event)) {
        case 1:
          if (_this.onTapDown == null && _this.onTap == null && _this.onTapUp == null && _this.onTapCancel == null)
            return false;
          break;
        case 2:
          return false;
        case 4:
          return false;
        default:
          return false;
      }
      return _this.super$GestureRecognizer$isPointerAllowed($event);
    },
    handleTapDown$1$down(down) {
      var _this = this,
        t1 = down.get$position(down);
      down.get$localPosition();
      _this._pointerToKind.$index(0, down.get$pointer()).toString;
      switch (down.get$buttons(down)) {
        case 1:
          if (_this.onTapDown != null)
            _this.invokeCallback$2("onTapDown", new A.TapGestureRecognizer_handleTapDown_closure(_this, new A.TapDownDetails(t1)));
          break;
        case 2:
          break;
        case 4:
          break;
      }
    },
    handleTapUp$2$down$up(down, up) {
      var t1, _this = this;
      up.get$kind(up);
      up.get$position(up);
      up.get$localPosition();
      switch (down.get$buttons(down)) {
        case 1:
          if (_this.onTapUp != null)
            _this.invokeCallback$2("onTapUp", new A.TapGestureRecognizer_handleTapUp_closure(_this, new A.TapUpDetails()));
          t1 = _this.onTap;
          if (t1 != null)
            _this.invokeCallback$2("onTap", t1);
          break;
        case 2:
          break;
        case 4:
          break;
      }
    },
    handleTapCancel$3$cancel$down$reason(cancel, down, reason) {
      var t1,
        note = reason === "" ? reason : reason + " ";
      switch (down.get$buttons(down)) {
        case 1:
          t1 = this.onTapCancel;
          if (t1 != null)
            this.invokeCallback$2(note + "onTapCancel", t1);
          break;
        case 2:
          break;
        case 4:
          break;
      }
    }
  };
  A.TapGestureRecognizer_handleTapDown_closure.prototype = {
    call$0() {
      return this.$this.onTapDown.call$1(this.details);
    },
    $signature: 0
  };
  A.TapGestureRecognizer_handleTapUp_closure.prototype = {
    call$0() {
      return this.$this.onTapUp.call$1(this.details);
    },
    $signature: 0
  };
  A.VelocityEstimate.prototype = {
    toString$0(_) {
      var _this = this,
        t1 = _this.pixelsPerSecond;
      return "VelocityEstimate(" + B.JSNumber_methods.toStringAsFixed$1(t1._dx, 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(t1._dy, 1) + "; offset: " + _this.offset.toString$0(0) + ", duration: " + _this.duration.toString$0(0) + ", confidence: " + B.JSNumber_methods.toStringAsFixed$1(_this.confidence, 1) + ")";
    }
  };
  A._PointAtTime.prototype = {
    toString$0(_) {
      return "_PointAtTime(" + this.point.toString$0(0) + " at " + this.time.toString$0(0) + ")";
    }
  };
  A.VelocityTracker.prototype = {
    addPosition$2(time, position) {
      var t1 = ++this._velocity_tracker$_index;
      if (t1 === 20)
        t1 = this._velocity_tracker$_index = 0;
      this._samples[t1] = new A._PointAtTime(time, position);
    },
    getVelocityEstimate$0() {
      var newestSample, t2, oldestSample, previousSample, sampleCount, sample, t3, age, position, xFit, yFit,
        _s10_ = "confidence",
        t1 = type$.JSArray_double,
        x = A._setArrayType([], t1),
        y = A._setArrayType([], t1),
        w = A._setArrayType([], t1),
        time = A._setArrayType([], t1),
        index = this._velocity_tracker$_index;
      t1 = this._samples;
      newestSample = t1[index];
      if (newestSample == null)
        return null;
      t2 = newestSample.time._duration;
      oldestSample = newestSample;
      previousSample = oldestSample;
      sampleCount = 0;
      do {
        sample = t1[index];
        if (sample == null)
          break;
        t3 = sample.time._duration;
        age = (t2 - t3) / 1000;
        if (age > 100 || Math.abs(t3 - previousSample.time._duration) / 1000 > 40)
          break;
        position = sample.point;
        x.push(position._dx);
        y.push(position._dy);
        w.push(1);
        time.push(-age);
        index = (index === 0 ? 20 : index) - 1;
        ++sampleCount;
        if (sampleCount < 20) {
          oldestSample = sample;
          previousSample = oldestSample;
          continue;
        } else {
          oldestSample = sample;
          break;
        }
      } while (true);
      if (sampleCount >= 3) {
        xFit = new A.LeastSquaresSolver(time, x, w).solve$1(2);
        if (xFit != null) {
          yFit = new A.LeastSquaresSolver(time, y, w).solve$1(2);
          if (yFit != null)
            return new A.VelocityEstimate(new A.Offset(xFit.coefficients[1] * 1000, yFit.coefficients[1] * 1000), A._lateReadCheck(xFit.__PolynomialFit_confidence, _s10_) * A._lateReadCheck(yFit.__PolynomialFit_confidence, _s10_), new A.Duration(t2 - oldestSample.time._duration), newestSample.point.$sub(0, oldestSample.point));
        }
      }
      return new A.VelocityEstimate(B.Offset_0_0, 1, new A.Duration(t2 - oldestSample.time._duration), newestSample.point.$sub(0, oldestSample.point));
    }
  };
  A.AppBarTheme.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.AppBarTheme)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._AppBarTheme_Object_Diagnosticable.prototype = {};
  A.MaterialBannerThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.MaterialBannerThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._MaterialBannerThemeData_Object_Diagnosticable.prototype = {};
  A.BottomAppBarTheme.prototype = {
    get$hashCode(_) {
      return A.hashValues(null, null, null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.BottomAppBarTheme)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._BottomAppBarTheme_Object_Diagnosticable.prototype = {};
  A.BottomNavigationBarThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.BottomNavigationBarThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._BottomNavigationBarThemeData_Object_Diagnosticable.prototype = {};
  A.BottomSheetThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.BottomSheetThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._BottomSheetThemeData_Object_Diagnosticable.prototype = {};
  A.ButtonBarThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.ButtonBarThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._ButtonBarThemeData_Object_Diagnosticable.prototype = {};
  A.ButtonTextTheme.prototype = {
    toString$0(_) {
      return "ButtonTextTheme." + this._name;
    }
  };
  A.ButtonThemeData.prototype = {
    get$padding(_) {
      switch (0) {
        case 0:
        case 1:
          return B.EdgeInsets_16_0_16_0;
      }
    },
    get$shape(_) {
      switch (0) {
        case 0:
        case 1:
          return B.RoundedRectangleBorder_LkV;
      }
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      if (other instanceof A.ButtonThemeData)
        if (J.$eq$(other.get$padding(other), _this.get$padding(_this)))
          if (J.$eq$(other.get$shape(other), _this.get$shape(_this)))
            if (J.$eq$(other._buttonColor, _this._buttonColor))
              if (J.$eq$(other._focusColor, _this._focusColor))
                if (J.$eq$(other._hoverColor, _this._hoverColor))
                  t1 = J.$eq$(other.colorScheme, _this.colorScheme) && other._materialTapTargetSize == _this._materialTapTargetSize;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(B.ButtonTextTheme_0, 88, 36, _this.get$padding(_this), _this.get$shape(_this), false, _this._buttonColor, _this._disabledColor, _this._focusColor, _this._hoverColor, _this._highlightColor, _this._splashColor, _this.colorScheme, _this._materialTapTargetSize, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    }
  };
  A._ButtonThemeData_Object_Diagnosticable.prototype = {};
  A.CardTheme.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.CardTheme)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._CardTheme_Object_Diagnosticable.prototype = {};
  A.CheckboxThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.CheckboxThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._CheckboxThemeData_Object_Diagnosticable.prototype = {};
  A.ChipThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.ChipThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._ChipThemeData_Object_Diagnosticable.prototype = {};
  A.CircleAvatar.prototype = {
    get$_minDiameter() {
      return 40;
    },
    get$_maxDiameter() {
      return 40;
    },
    build$1(_, context) {
      var effectiveBackgroundColor, minDiameter, maxDiameter, t2, _null = null,
        theme = A.Theme_of(context),
        textStyle = theme.primaryTextTheme.titleMedium.copyWith$1$color(_null),
        t1 = textStyle.color;
      t1.toString;
      switch (A.ThemeData_estimateBrightnessForColor(t1).index) {
        case 0:
          effectiveBackgroundColor = theme.primaryColorLight;
          break;
        case 1:
          effectiveBackgroundColor = theme.primaryColorDark;
          break;
        default:
          effectiveBackgroundColor = _null;
      }
      minDiameter = this.get$_minDiameter();
      maxDiameter = this.get$_maxDiameter();
      t1 = context.dependOnInheritedWidgetOfExactType$1$0(type$.MediaQuery).data.copyWith$1$textScaleFactor(1);
      t2 = theme.iconTheme.copyWith$1$color(textStyle.color);
      t2 = A.IconTheme$(A.DefaultTextStyle$(this.child, _null, B.TextOverflow_0, true, textStyle, _null, _null, B.TextWidthBasis_0), t2, _null);
      return new A.AnimatedContainer(new A.Center(B.Alignment_0_0, _null, _null, new A.MediaQuery(t1, t2, _null), _null), new A.BoxDecoration(effectiveBackgroundColor, _null, _null, _null, _null, _null, B.BoxShape_1), _null, new A.BoxConstraints(minDiameter, maxDiameter, minDiameter, maxDiameter), B.C__Linear, B.Duration_200000, _null, _null);
    }
  };
  A.ColorScheme.prototype = {
    $eq(_, other) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      if (other instanceof A.ColorScheme)
        if (other.brightness === _this.brightness) {
          t1 = other.primary;
          t2 = _this.primary;
          if (t1.$eq(0, t2)) {
            t3 = other.onPrimary;
            t4 = _this.onPrimary;
            if (t3.$eq(0, t4)) {
              t5 = other._primaryContainer;
              if (t5 == null)
                t5 = t1;
              t6 = _this._primaryContainer;
              if (t5.$eq(0, t6 == null ? t2 : t6)) {
                t5 = other._onPrimaryContainer;
                if (t5 == null)
                  t5 = t3;
                t6 = _this._onPrimaryContainer;
                if (t5.$eq(0, t6 == null ? t4 : t6)) {
                  t5 = other.secondary;
                  t6 = _this.secondary;
                  if (t5.$eq(0, t6)) {
                    t7 = other.onSecondary;
                    t8 = _this.onSecondary;
                    if (t7.$eq(0, t8)) {
                      t9 = other._secondaryContainer;
                      if (t9 == null)
                        t9 = t5;
                      t10 = _this._secondaryContainer;
                      if (t9.$eq(0, t10 == null ? t6 : t10)) {
                        t9 = other._onSecondaryContainer;
                        if (t9 == null)
                          t9 = t7;
                        t10 = _this._onSecondaryContainer;
                        if (t9.$eq(0, t10 == null ? t8 : t10)) {
                          t9 = other._tertiary;
                          t10 = t9 == null;
                          t11 = t10 ? t5 : t9;
                          t12 = _this._tertiary;
                          t13 = t12 == null;
                          if (t11.$eq(0, t13 ? t6 : t12)) {
                            t11 = other._onTertiary;
                            t14 = t11 == null;
                            t15 = t14 ? t7 : t11;
                            t16 = _this._onTertiary;
                            t17 = t16 == null;
                            if (t15.$eq(0, t17 ? t8 : t16)) {
                              t15 = other._tertiaryContainer;
                              if (t15 == null) {
                                if (t10)
                                  t9 = t5;
                              } else
                                t9 = t15;
                              t10 = _this._tertiaryContainer;
                              if (t10 == null)
                                t10 = t13 ? t6 : t12;
                              if (t9.$eq(0, t10)) {
                                t9 = other._onTertiaryContainer;
                                if (t9 == null)
                                  t7 = t14 ? t7 : t11;
                                else
                                  t7 = t9;
                                t9 = _this._onTertiaryContainer;
                                if (t9 == null)
                                  t8 = t17 ? t8 : t16;
                                else
                                  t8 = t9;
                                if (t7.$eq(0, t8)) {
                                  t7 = other.error;
                                  t8 = _this.error;
                                  if (t7.$eq(0, t8)) {
                                    t9 = other.onError;
                                    t10 = _this.onError;
                                    if (t9.$eq(0, t10)) {
                                      t11 = other._errorContainer;
                                      t7 = t11 == null ? t7 : t11;
                                      t11 = _this._errorContainer;
                                      if (t7.$eq(0, t11 == null ? t8 : t11)) {
                                        t7 = other._onErrorContainer;
                                        if (t7 == null)
                                          t7 = t9;
                                        t8 = _this._onErrorContainer;
                                        if (t7.$eq(0, t8 == null ? t10 : t8))
                                          if (other.background.$eq(0, _this.background)) {
                                            t7 = other.onBackground;
                                            t8 = _this.onBackground;
                                            if (t7.$eq(0, t8)) {
                                              t9 = other.surface;
                                              t10 = _this.surface;
                                              if (t9.$eq(0, t10)) {
                                                t11 = other.onSurface;
                                                t12 = _this.onSurface;
                                                if (t11.$eq(0, t12)) {
                                                  t13 = other._surfaceVariant;
                                                  if (t13 == null)
                                                    t13 = t9;
                                                  t14 = _this._surfaceVariant;
                                                  if (t13.$eq(0, t14 == null ? t10 : t14)) {
                                                    t13 = other._onSurfaceVariant;
                                                    if (t13 == null)
                                                      t13 = t11;
                                                    t14 = _this._onSurfaceVariant;
                                                    if (t13.$eq(0, t14 == null ? t12 : t14)) {
                                                      t13 = other._outline;
                                                      if (t13 == null)
                                                        t13 = t7;
                                                      t14 = _this._outline;
                                                      if (t13.$eq(0, t14 == null ? t8 : t14)) {
                                                        t13 = other._shadow;
                                                        t7 = t13 == null ? t7 : t13;
                                                        t13 = _this._shadow;
                                                        if (t7.$eq(0, t13 == null ? t8 : t13)) {
                                                          t7 = other._inverseSurface;
                                                          if (t7 == null)
                                                            t7 = t11;
                                                          t8 = _this._inverseSurface;
                                                          if (t7.$eq(0, t8 == null ? t12 : t8)) {
                                                            t7 = other._onInverseSurface;
                                                            if (t7 == null)
                                                              t7 = t9;
                                                            t8 = _this._onInverseSurface;
                                                            if (t7.$eq(0, t8 == null ? t10 : t8)) {
                                                              t7 = other._inversePrimary;
                                                              t3 = t7 == null ? t3 : t7;
                                                              t7 = _this._inversePrimary;
                                                              if (t3.$eq(0, t7 == null ? t4 : t7)) {
                                                                t3 = other._primaryVariant;
                                                                t1 = t3 == null ? t1 : t3;
                                                                t3 = _this._primaryVariant;
                                                                if (t1.$eq(0, t3 == null ? t2 : t3)) {
                                                                  t1 = other._secondaryVariant;
                                                                  if (t1 == null)
                                                                    t1 = t5;
                                                                  t2 = _this._secondaryVariant;
                                                                  t1 = t1.$eq(0, t2 == null ? t6 : t2);
                                                                } else
                                                                  t1 = false;
                                                              } else
                                                                t1 = false;
                                                            } else
                                                              t1 = false;
                                                          } else
                                                            t1 = false;
                                                        } else
                                                          t1 = false;
                                                      } else
                                                        t1 = false;
                                                    } else
                                                      t1 = false;
                                                  } else
                                                    t1 = false;
                                                } else
                                                  t1 = false;
                                              } else
                                                t1 = false;
                                            } else
                                              t1 = false;
                                          } else
                                            t1 = false;
                                        else
                                          t1 = false;
                                      } else
                                        t1 = false;
                                    } else
                                      t1 = false;
                                  } else
                                    t1 = false;
                                } else
                                  t1 = false;
                              } else
                                t1 = false;
                            } else
                              t1 = false;
                          } else
                            t1 = false;
                        } else
                          t1 = false;
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                } else
                  t1 = false;
              } else
                t1 = false;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, _this = this,
        t1 = _this.primary,
        t2 = _this.onPrimary,
        t3 = _this._primaryContainer;
      if (t3 == null)
        t3 = t1;
      t4 = _this._onPrimaryContainer;
      if (t4 == null)
        t4 = t2;
      t5 = _this.secondary;
      t6 = _this.onSecondary;
      t7 = _this._secondaryContainer;
      if (t7 == null)
        t7 = t5;
      t8 = _this._onSecondaryContainer;
      if (t8 == null)
        t8 = t6;
      t9 = _this._tertiary;
      t10 = t9 == null;
      t11 = t10 ? t5 : t9;
      t12 = _this._onTertiary;
      t13 = t12 == null;
      t14 = t13 ? t6 : t12;
      t15 = _this._tertiaryContainer;
      if (t15 == null) {
        if (t10)
          t9 = t5;
      } else
        t9 = t15;
      t10 = _this._onTertiaryContainer;
      if (t10 == null)
        t10 = t13 ? t6 : t12;
      t12 = _this.error;
      t13 = _this.onError;
      t15 = _this._errorContainer;
      if (t15 == null)
        t15 = t12;
      t16 = _this._onErrorContainer;
      if (t16 == null)
        t16 = t13;
      t17 = _this.onBackground;
      t18 = _this.surface;
      t19 = _this.onSurface;
      t20 = _this._surfaceVariant;
      if (t20 == null)
        t20 = t18;
      t21 = _this._onSurfaceVariant;
      if (t21 == null)
        t21 = t19;
      t22 = _this._outline;
      if (t22 == null)
        t22 = t17;
      t23 = _this._shadow;
      if (t23 == null)
        t23 = t17;
      t24 = _this._inverseSurface;
      if (t24 == null)
        t24 = t19;
      t25 = _this._onInverseSurface;
      if (t25 == null)
        t25 = t18;
      t26 = _this._inversePrimary;
      if (t26 == null)
        t26 = t2;
      t27 = _this._primaryVariant;
      if (t27 == null)
        t27 = t1;
      t28 = _this._secondaryVariant;
      if (t28 == null)
        t28 = t5;
      return A.hashList([_this.brightness, t1, t2, t3, t4, t5, t6, t7, t8, t11, t14, t9, t10, t12, t13, t15, t16, _this.background, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28]);
    }
  };
  A._ColorScheme_Object_Diagnosticable.prototype = {};
  A.MaterialColor.prototype = {};
  A.DataTableThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.DataTableThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._DataTableThemeData_Object_Diagnosticable.prototype = {};
  A.DialogTheme.prototype = {
    get$hashCode(_) {
      return B.JSNull_methods.get$hashCode(null);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.DialogTheme)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._DialogTheme_Object_Diagnosticable.prototype = {};
  A.DividerThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.DividerThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._DividerThemeData_Object_Diagnosticable.prototype = {};
  A.DrawerThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.DrawerThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._DrawerThemeData_Object_Diagnosticable.prototype = {};
  A.ElevatedButtonThemeData.prototype = {
    get$hashCode(_) {
      return B.JSNull_methods.get$hashCode(null);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return other instanceof A.ElevatedButtonThemeData && true;
    }
  };
  A._ElevatedButtonThemeData_Object_Diagnosticable.prototype = {};
  A.FloatingActionButtonThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.FloatingActionButtonThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._FloatingActionButtonThemeData_Object_Diagnosticable.prototype = {};
  A.Ink.prototype = {
    get$_paddingIncludingDecoration() {
      var t1 = this.decoration;
      if (t1 == null || t1.get$padding(t1) == null)
        return B.EdgeInsets_0_0_0_0;
      t1 = t1.get$padding(t1);
      t1.toString;
      return t1;
    },
    createState$0() {
      return new A._InkState(new A.LabeledGlobalKey(null, type$.LabeledGlobalKey_State_StatefulWidget), B._StateLifecycle_0);
    }
  };
  A._InkState.prototype = {
    _handleRemoved$0() {
      this._ink = null;
    },
    deactivate$0() {
      var t2,
        t1 = this._ink;
      if (t1 != null) {
        t2 = t1._painter;
        if (t2 != null)
          t2.dispose$0(0);
        t1.super$InkFeature$dispose(0);
      }
      this.super$State$deactivate();
    },
    _build$1(context) {
      var t3, t4, _this = this,
        t1 = _this._ink,
        t2 = _this._widget;
      if (t1 == null) {
        t1 = t2.decoration;
        t2 = A.createLocalImageConfiguration(context);
        t3 = context.findAncestorRenderObjectOfType$1$0(type$._RenderInkFeatures);
        t3.toString;
        t4 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, _this._boxKey).get$renderObject();
        t4.toString;
        t4 = new A.InkDecoration(t2, t3, type$.RenderBox._as(t4), _this.get$_handleRemoved());
        t4.set$decoration(0, t1);
        t3.addInkFeature$1(t4);
        _this._ink = t4;
      } else {
        t1.set$decoration(0, t2.decoration);
        t1 = _this._ink;
        t1.toString;
        t1.set$configuration(A.createLocalImageConfiguration(context));
      }
      t1 = _this._widget.child;
      return t1;
    },
    build$1(_, context) {
      var _this = this,
        t1 = _this._widget.get$_paddingIncludingDecoration();
      _this._widget.toString;
      return new A.Padding(t1, new A.Builder(_this.get$_build(), null), _this._boxKey);
    }
  };
  A.InkDecoration.prototype = {
    set$decoration(_, value) {
      var t1, _this = this;
      if (J.$eq$(value, _this._ink_decoration$_decoration))
        return;
      _this._ink_decoration$_decoration = value;
      t1 = _this._painter;
      if (t1 != null)
        t1.dispose$0(0);
      t1 = _this._ink_decoration$_decoration;
      _this._painter = t1 == null ? null : t1.createBoxPainter$1(_this.get$_handleChanged());
      _this._material$_controller.markNeedsPaint$0();
    },
    set$configuration(value) {
      if (value.$eq(0, this._ink_decoration$_configuration))
        return;
      this._ink_decoration$_configuration = value;
      this._material$_controller.markNeedsPaint$0();
    },
    _handleChanged$0() {
      this._material$_controller.markNeedsPaint$0();
    },
    paintFeature$2(canvas, transform) {
      var originOffset, t1, t2, sizedConfiguration, _this = this;
      if (_this._painter == null)
        return;
      originOffset = A.MatrixUtils_getAsTranslation(transform);
      t1 = _this._ink_decoration$_configuration;
      t2 = _this.referenceBox._size;
      t2.toString;
      sizedConfiguration = t1.copyWith$1$size(t2);
      if (originOffset == null) {
        canvas.save$0(0);
        canvas.transform$1(0, transform._m4storage);
        _this._painter.paint$3(canvas, B.Offset_0_0, sizedConfiguration);
        canvas.restore$0(0);
      } else
        _this._painter.paint$3(canvas, originOffset, sizedConfiguration);
    }
  };
  A.InkHighlight.prototype = {
    _handleAlphaStatusChanged$1($status) {
      if ($status === B.AnimationStatus_0 && !this._active) {
        A._lateReadCheck(this.__InkHighlight__alphaController, "_alphaController").dispose$0(0);
        this.super$InkFeature$dispose(0);
      }
    },
    dispose$0(_) {
      A._lateReadCheck(this.__InkHighlight__alphaController, "_alphaController").dispose$0(0);
      this.super$InkFeature$dispose(0);
    },
    _paintHighlight$3(canvas, rect, paint) {
      var t1;
      canvas.save$0(0);
      switch (this._ink_highlight$_shape.index) {
        case 1:
          t1 = rect.get$center();
          canvas.drawCircle$3(0, t1, 35, paint);
          break;
        case 0:
          t1 = this._ink_highlight$_borderRadius;
          if (!t1.$eq(0, B.BorderRadius_tLn))
            canvas.drawRRect$2(0, A.RRect$fromRectAndCorners(rect, t1.bottomLeft, t1.bottomRight, t1.topLeft, t1.topRight), paint);
          else
            canvas.drawRect$2(0, rect, paint);
          break;
      }
      canvas.restore$0(0);
    },
    paintFeature$2(canvas, transform) {
      var originOffset, rect, _this = this,
        paint = $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData()),
        t1 = _this._ink_well$_color,
        t2 = A._lateReadCheck(_this.__InkHighlight__alpha, "_alpha"),
        t3 = t2._evaluatable;
      t2 = t2.parent;
      t1 = t1.value;
      paint.set$color(0, A.Color$fromARGB(t3.transform$1(0, t2.get$value(t2)), t1 >>> 16 & 255, t1 >>> 8 & 255, t1 & 255));
      originOffset = A.MatrixUtils_getAsTranslation(transform);
      t1 = _this._rectCallback;
      if (t1 != null)
        rect = t1.call$0();
      else {
        t1 = _this.referenceBox._size;
        rect = new A.Rect(0, 0, 0 + t1._dx, 0 + t1._dy);
      }
      if (originOffset == null) {
        canvas.save$0(0);
        canvas.transform$1(0, transform._m4storage);
        _this._paintHighlight$3(canvas, rect, paint);
        canvas.restore$0(0);
      } else
        _this._paintHighlight$3(canvas, rect.shift$1(originOffset), paint);
    }
  };
  A._getClipCallback_closure.prototype = {
    call$0() {
      var t1 = this.referenceBox._size;
      return new A.Rect(0, 0, 0 + t1._dx, 0 + t1._dy);
    },
    $signature: 147
  };
  A._InkSplashFactory.prototype = {};
  A.InkSplash.prototype = {
    confirm$0(_) {
      var duration = B.JSNumber_methods.floor$0(this._targetRadius / 1),
        t1 = A._lateReadCheck(this.__InkSplash__radiusController, "_radiusController");
      t1.duration = A.Duration$(0, duration);
      t1.forward$0(0);
      this._alphaController.forward$0(0);
    },
    _ink_splash$_handleAlphaStatusChanged$1($status) {
      if ($status === B.AnimationStatus_3)
        this.dispose$0(0);
    },
    dispose$0(_) {
      var _this = this;
      A._lateReadCheck(_this.__InkSplash__radiusController, "_radiusController").dispose$0(0);
      _this._alphaController.dispose$0(0);
      _this._alphaController = null;
      _this.super$InkFeature$dispose(0);
    },
    paintFeature$2(canvas, transform) {
      var center, originOffset, rect, _this = this,
        paint = $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData()),
        t1 = _this._ink_well$_color,
        t2 = A._lateReadCheck(_this.__InkSplash__alpha, "_alpha"),
        t3 = t2._evaluatable;
      t2 = t2.parent;
      t1 = t1.value;
      paint.set$color(0, A.Color$fromARGB(t3.transform$1(0, t2.get$value(t2)), t1 >>> 16 & 255, t1 >>> 8 & 255, t1 & 255));
      center = _this._ink_splash$_position;
      if (_this._repositionToReferenceBox)
        center = A.Offset_lerp(center, _this.referenceBox._size.center$1(B.Offset_0_0), A._lateReadCheck(A._lateReadCheck(_this.__InkSplash__radiusController, "_radiusController").__AnimationController__value, "_value"));
      center.toString;
      t1 = A._lateReadCheck(_this.__InkSplash__radius, "_radius");
      t2 = t1._evaluatable;
      t1 = t1.parent;
      t1 = t2.transform$1(0, t1.get$value(t1));
      t2 = _this._ink_splash$_borderRadius;
      t3 = _this._clipCallback;
      originOffset = A.MatrixUtils_getAsTranslation(transform);
      canvas.save$0(0);
      if (originOffset == null)
        canvas.transform$1(0, transform._m4storage);
      else
        canvas.translate$2(0, originOffset._dx, originOffset._dy);
      if (t3 != null) {
        rect = t3.call$0();
        if (!t2.$eq(0, B.BorderRadius_tLn))
          canvas.clipRRect$1(0, A.RRect$fromRectAndCorners(rect, t2.bottomLeft, t2.bottomRight, t2.topLeft, t2.topRight));
        else
          canvas.clipRect$1(0, rect);
      }
      canvas.drawCircle$3(0, center, t1, paint);
      canvas.restore$0(0);
    }
  };
  A.InteractiveInkFeature.prototype = {
    set$color(_, value) {
      if (value.$eq(0, this._ink_well$_color))
        return;
      this._ink_well$_color = value;
      this._material$_controller.markNeedsPaint$0();
    }
  };
  A.InteractiveInkFeatureFactory.prototype = {};
  A._ParentInkResponseProvider.prototype = {
    updateShouldNotify$1(oldWidget) {
      return this.state !== oldWidget.state;
    }
  };
  A.InkResponse.prototype = {
    getRectCallback$1(referenceBox) {
      return null;
    },
    build$1(_, context) {
      var _this = this,
        t1 = context.dependOnInheritedWidgetOfExactType$1$0(type$._ParentInkResponseProvider),
        parentState = t1 == null ? null : t1.state;
      return new A._InkResponseStateWidget(_this.child, _this.onTap, _this.onTapDown, _this.onTapUp, _this.onTapCancel, _this.onDoubleTap, _this.onLongPress, _this.onHighlightChanged, _this.onHover, _this.mouseCursor, true, _this.highlightShape, _this.radius, _this.borderRadius, _this.customBorder, _this.focusColor, _this.hoverColor, _this.highlightColor, _this.overlayColor, _this.splashColor, _this.splashFactory, true, false, _this.onFocusChange, false, _this.focusNode, true, parentState, _this.get$getRectCallback(), _this.get$debugCheckContext(), null);
    },
    debugCheckContext$1(context) {
      return true;
    }
  };
  A._InkResponseStateWidget.prototype = {
    createState$0() {
      return new A._InkResponseState(A.LinkedHashMap_LinkedHashMap$_empty(type$._HighlightType, type$.nullable_InkHighlight), new A.ObserverList(A._setArrayType([], type$.JSArray__ParentInkResponseState), type$.ObserverList__ParentInkResponseState), null, B._StateLifecycle_0);
    }
  };
  A._HighlightType.prototype = {
    toString$0(_) {
      return "_HighlightType." + this._name;
    }
  };
  A._InkResponseState.prototype = {
    get$highlightsExist() {
      var t1 = this._highlights;
      t1 = t1.get$values(t1);
      t1 = new A.WhereIterable(t1, new A._InkResponseState_highlightsExist_closure(), A._instanceType(t1)._eval$1("WhereIterable<Iterable.E>"));
      return !t1.get$isEmpty(t1);
    },
    markChildInkResponsePressed$2(childState, value) {
      var nowAnyPressed,
        t1 = this._activeChildren,
        t2 = t1._list,
        t3 = t2.length;
      if (value) {
        t1._isDirty = true;
        t2.push(childState);
      } else
        t1.remove$1(0, childState);
      nowAnyPressed = t2.length !== 0;
      if (nowAnyPressed !== (t3 !== 0)) {
        t1 = this._widget.parentState;
        if (t1 != null)
          t1.markChildInkResponsePressed$2(this, nowAnyPressed);
      }
    },
    initState$0() {
      var t1, t2, t3;
      this.super$__InkResponseState_State_AutomaticKeepAliveClientMixin$initState();
      t1 = this.get$_handleFocusHighlightModeChange();
      t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner.focusManager._focus_manager$_listeners._observer_list$_map;
      t3 = t2.$index(0, t1);
      t2.$indexSet(0, t1, (t3 == null ? 0 : t3) + 1);
    },
    didUpdateWidget$1(oldWidget) {
      var t1, _this = this;
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = _this._widget;
      t1.toString;
      if (_this._isWidgetEnabled$1(t1) !== _this._isWidgetEnabled$1(oldWidget)) {
        t1 = _this._widget;
        t1.toString;
        if (_this._isWidgetEnabled$1(t1))
          _this.updateHighlight$3$callOnHover$value(B._HighlightType_1, false, _this._hovering);
        _this._updateFocusHighlights$0();
      }
    },
    dispose$0(_) {
      $.WidgetsBinding__instance.WidgetsBinding__buildOwner.focusManager._focus_manager$_listeners.remove$1(0, this.get$_handleFocusHighlightModeChange());
      this.super$State$dispose(0);
    },
    get$wantKeepAlive() {
      if (!this.get$highlightsExist()) {
        var t1 = this._splashes;
        t1 = t1 != null && t1._collection$_length !== 0;
      } else
        t1 = true;
      return t1;
    },
    getHighlightColorForType$1(type) {
      var theme, _this = this,
        t1 = _this._framework$_element;
      t1.toString;
      theme = A.Theme_of(t1);
      switch (type.index) {
        case 0:
          _this._widget.toString;
          return theme.highlightColor;
        case 2:
          _this._widget.toString;
          return theme.focusColor;
        case 1:
          _this._widget.toString;
          return theme.hoverColor;
      }
    },
    getFadeDurationForType$1(type) {
      switch (type.index) {
        case 0:
          return B.Duration_200000;
        case 1:
        case 2:
          return B.Duration_50000;
      }
    },
    updateHighlight$3$callOnHover$value(type, callOnHover, value) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, _this = this,
        _s16_ = "_alphaController",
        t1 = _this._highlights,
        highlight = t1.$index(0, type);
      if (type === B._HighlightType_0) {
        t2 = _this._widget.parentState;
        if (t2 != null)
          t2.markChildInkResponsePressed$2(_this, value);
      }
      t2 = highlight == null;
      if (value === (!t2 && highlight._active))
        return;
      if (value)
        if (t2) {
          t2 = _this._framework$_element.get$renderObject();
          t2.toString;
          type$.RenderBox._as(t2);
          t3 = _this._framework$_element.findAncestorRenderObjectOfType$1$0(type$._RenderInkFeatures);
          t3.toString;
          t4 = _this.getHighlightColorForType$1(type);
          t5 = _this._widget;
          t6 = t5.highlightShape;
          t7 = t5.radius;
          t8 = t5.customBorder;
          t5 = t5.getRectCallback.call$1(t2);
          t9 = _this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality);
          t9.toString;
          t10 = _this.getFadeDurationForType$1(type);
          t2 = new A.InkHighlight(t6, t7, B.BorderRadius_tLn, t8, t5, t9.textDirection, t4, t3, t2, new A._InkResponseState_updateHighlight_handleInkRemoval(_this, type));
          t10 = A.AnimationController$(null, t10, t3.vsync);
          t10.didRegisterListener$0();
          t5 = t10.AnimationLocalListenersMixin__listeners;
          t5._isDirty = true;
          t5._list.push(t3.get$markNeedsPaint());
          t10.addStatusListener$1(t2.get$_handleAlphaStatusChanged());
          t10.forward$0(0);
          t2.__InkHighlight__alphaController = t10;
          t10 = A._lateReadCheck(t10, _s16_);
          t4 = t4.value;
          t2.__InkHighlight__alpha = new A._AnimatedEvaluation(type$.Animation_double._as(t10), new A.IntTween(0, t4 >>> 24 & 255), type$.IntTween._eval$1("_AnimatedEvaluation<Animatable.T>"));
          t3.addInkFeature$1(t2);
          t1.$indexSet(0, type, t2);
          _this.updateKeepAlive$0();
        } else {
          highlight._active = true;
          A._lateReadCheck(highlight.__InkHighlight__alphaController, _s16_).forward$0(0);
        }
      else {
        highlight._active = false;
        t1 = A._lateReadCheck(highlight.__InkHighlight__alphaController, _s16_);
        t1._animation_controller$_direction = B._AnimationDirection_1;
        t1._animateToInternal$1(0);
      }
      switch (type.index) {
        case 0:
          _this._widget.toString;
          break;
        case 1:
          if (callOnHover)
            _this._widget.toString;
          break;
        case 2:
          break;
      }
    },
    updateHighlight$2$value(type, value) {
      return this.updateHighlight$3$callOnHover$value(type, true, value);
    },
    _createInkFeature$1(globalPosition) {
      var t3, position, t4, color, rectCallback, customBorder, t5, splash, t6, t7, t8, _this = this, t1 = {},
        t2 = _this._framework$_element.findAncestorRenderObjectOfType$1$0(type$._RenderInkFeatures);
      t2.toString;
      t3 = _this._framework$_element.get$renderObject();
      t3.toString;
      type$.RenderBox._as(t3);
      position = t3.globalToLocal$1(globalPosition);
      _this._widget.toString;
      t4 = _this._framework$_element;
      t4.toString;
      color = A.Theme_of(t4).splashColor;
      rectCallback = _this._widget.getRectCallback.call$1(t3);
      customBorder = _this._widget.customBorder;
      t1.splash = null;
      t4 = _this._framework$_element;
      t4.toString;
      A.Theme_of(t4);
      _this._widget.toString;
      t4 = _this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality);
      t4.toString;
      t5 = A._getTargetRadius(t3, true, rectCallback, position);
      splash = new A.InkSplash(position, B.BorderRadius_tLn, customBorder, t5, A._getClipCallback(t3, true, rectCallback), false, t4.textDirection, color, t2, t3, new A._InkResponseState__createInkFeature_onRemoved(t1, _this));
      t3 = t2.vsync;
      t4 = A.AnimationController$(null, B.Duration_1000000, t3);
      t6 = t2.get$markNeedsPaint();
      t4.didRegisterListener$0();
      t7 = t4.AnimationLocalListenersMixin__listeners;
      t7._isDirty = true;
      t7._list.push(t6);
      t4.forward$0(0);
      splash.__InkSplash__radiusController = t4;
      t7 = type$.Tween_double;
      t8 = type$.Animation_double;
      splash.__InkSplash__radius = new A._AnimatedEvaluation(t8._as(A._lateReadCheck(t4, "_radiusController")), new A.Tween(0, t5, t7), t7._eval$1("_AnimatedEvaluation<Animatable.T>"));
      t3 = A.AnimationController$(null, B.Duration_200000, t3);
      t3.didRegisterListener$0();
      t7 = t3.AnimationLocalListenersMixin__listeners;
      t7._isDirty = true;
      t7._list.push(t6);
      t3.addStatusListener$1(splash.get$_ink_splash$_handleAlphaStatusChanged());
      splash._alphaController = t3;
      splash.__InkSplash__alpha = new A._AnimatedEvaluation(t8._as(t3), new A.IntTween(color.value >>> 24 & 255, 0), type$.IntTween._eval$1("_AnimatedEvaluation<Animatable.T>"));
      t2.addInkFeature$1(splash);
      return t1.splash = splash;
    },
    _handleFocusHighlightModeChange$1(mode) {
      if (this._framework$_element == null)
        return;
      this.setState$1(new A._InkResponseState__handleFocusHighlightModeChange_closure(this));
    },
    get$_shouldShowFocus() {
      var mode, _this = this,
        t1 = _this._framework$_element;
      t1.toString;
      t1 = A.MediaQuery_maybeOf(t1);
      mode = t1 == null ? null : t1.navigationMode;
      switch ((mode == null ? B.NavigationMode_0 : mode).index) {
        case 0:
          t1 = _this._widget;
          t1.toString;
          return _this._isWidgetEnabled$1(t1) && _this._hasFocus;
        case 1:
          return _this._hasFocus;
      }
    },
    _updateFocusHighlights$0() {
      var showFocus,
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner.focusManager._highlightMode;
      switch ((t1 == null ? A.FocusManager__defaultModeForPlatform() : t1).index) {
        case 0:
          showFocus = false;
          break;
        case 1:
          showFocus = this.get$_shouldShowFocus();
          break;
        default:
          showFocus = null;
      }
      this.updateHighlight$2$value(B._HighlightType_2, showFocus);
    },
    _handleFocusUpdate$1(hasFocus) {
      this._hasFocus = hasFocus;
      this._updateFocusHighlights$0();
      this._widget.toString;
    },
    _handleTapDown$1(details) {
      if (this._activeChildren._list.length !== 0)
        return;
      this._startSplash$1$details(details);
      this._widget.toString;
    },
    _handleTapUp$1(details) {
      this._widget.toString;
    },
    _startSplash$2$context$details(context, details) {
      var t1, t2, globalPosition, splash, _this = this;
      if (context != null) {
        t1 = context.get$renderObject();
        t1.toString;
        type$.RenderBox._as(t1);
        t2 = t1._size;
        t2 = new A.Rect(0, 0, 0 + t2._dx, 0 + t2._dy).get$center();
        globalPosition = A.MatrixUtils_transformPoint(t1.getTransformTo$1(0, null), t2);
      } else
        globalPosition = details.globalPosition;
      splash = _this._createInkFeature$1(globalPosition);
      t1 = _this._splashes;
      (t1 == null ? _this._splashes = A.HashSet_HashSet(type$.InteractiveInkFeature) : t1).add$1(0, splash);
      _this._currentSplash = splash;
      _this.updateKeepAlive$0();
      _this.updateHighlight$2$value(B._HighlightType_0, true);
    },
    _startSplash$1$details(details) {
      return this._startSplash$2$context$details(null, details);
    },
    _handleTap$0() {
      var _this = this,
        t1 = _this._currentSplash;
      if (t1 != null)
        t1.confirm$0(0);
      _this._currentSplash = null;
      _this.updateHighlight$2$value(B._HighlightType_0, false);
      _this._widget.toString;
    },
    _handleTapCancel$0() {
      var _this = this,
        t1 = _this._currentSplash;
      if (t1 != null) {
        t1 = t1._alphaController;
        if (t1 != null)
          t1.forward$0(0);
      }
      _this._currentSplash = null;
      _this._widget.toString;
      _this.updateHighlight$2$value(B._HighlightType_0, false);
    },
    deactivate$0() {
      var t2, t3, t4, t5, t6, value, result, _this = this,
        t1 = _this._splashes;
      if (t1 != null) {
        _this._splashes = null;
        for (t1 = new A._HashSetIterator(t1, t1._computeElements$0()), t2 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
          t3 = t1._collection$_current;
          (t3 == null ? t2._as(t3) : t3).dispose$0(0);
        }
        _this._currentSplash = null;
      }
      for (t1 = _this._highlights, t2 = A.LinkedHashMapKeyIterator$(t1, t1._modifications); t2.moveNext$0();) {
        t3 = t2.__js_helper$_current;
        t4 = t1.$index(0, t3);
        if (t4 != null) {
          t5 = A._lateReadCheck(t4.__InkHighlight__alphaController, "_alphaController");
          t5._ticker.dispose$0(0);
          t5._ticker = null;
          t6 = t5.AnimationLocalStatusListenersMixin__statusListeners;
          t6._isDirty = false;
          B.JSArray_methods.set$length(t6._list, 0);
          value = t6.__ObserverList__set;
          if (value === $) {
            result = A.HashSet_HashSet(t6.$ti._precomputed1);
            A._lateInitializeOnceCheck(t6.__ObserverList__set, "_set");
            t6.__ObserverList__set = result;
            value = result;
          }
          if (value._collection$_length > 0) {
            value._collection$_strings = value._collection$_nums = value._collection$_rest = value._collection$_elements = null;
            value._collection$_length = 0;
          }
          t6 = t5.AnimationLocalListenersMixin__listeners;
          t6._isDirty = false;
          B.JSArray_methods.set$length(t6._list, 0);
          value = t6.__ObserverList__set;
          if (value === $) {
            result = A.HashSet_HashSet(t6.$ti._precomputed1);
            A._lateInitializeOnceCheck(t6.__ObserverList__set, "_set");
            t6.__ObserverList__set = result;
            value = result;
          }
          if (value._collection$_length > 0) {
            value._collection$_strings = value._collection$_nums = value._collection$_rest = value._collection$_elements = null;
            value._collection$_length = 0;
          }
          t5.super$AnimationEagerListenerMixin$dispose(0);
          t4.super$InkFeature$dispose(0);
        }
        t1.$indexSet(0, t3, null);
      }
      t1 = _this._widget.parentState;
      if (t1 != null)
        t1.markChildInkResponsePressed$2(_this, false);
      _this.super$__InkResponseState_State_AutomaticKeepAliveClientMixin$deactivate();
    },
    _isWidgetEnabled$1(widget) {
      return false;
    },
    _handleMouseEnter$1($event) {
      var t1, _this = this;
      _this._hovering = true;
      t1 = _this._widget;
      t1.toString;
      if (_this._isWidgetEnabled$1(t1))
        _this.updateHighlight$2$value(B._HighlightType_1, _this._hovering);
    },
    _handleMouseExit$1($event) {
      this._hovering = false;
      this.updateHighlight$2$value(B._HighlightType_1, false);
    },
    get$_canRequestFocus() {
      var mode, _this = this,
        t1 = _this._framework$_element;
      t1.toString;
      t1 = A.MediaQuery_maybeOf(t1);
      mode = t1 == null ? null : t1.navigationMode;
      switch ((mode == null ? B.NavigationMode_0 : mode).index) {
        case 0:
          t1 = _this._widget;
          t1.toString;
          if (_this._isWidgetEnabled$1(t1)) {
            _this._widget.toString;
            t1 = true;
          } else
            t1 = false;
          return t1;
        case 1:
          return true;
      }
    },
    build$1(_, context) {
      var t1, t2, t3, t4, effectiveMouseCursor, value, result, t5, t6, t7, _this = this, _null = null;
      _this.super$AutomaticKeepAliveClientMixin$build(0, context);
      for (t1 = _this._highlights, t2 = A.LinkedHashMapKeyIterator$(t1, t1._modifications); t2.moveNext$0();) {
        t3 = t2.__js_helper$_current;
        t4 = t1.$index(0, t3);
        if (t4 != null)
          t4.set$color(0, _this.getHighlightColorForType$1(t3));
      }
      t1 = _this._currentSplash;
      if (t1 != null) {
        _this._widget.toString;
        t2 = A.Theme_of(context);
        t1.set$color(0, t2.splashColor);
      }
      t1 = _this._widget;
      t2 = t1.mouseCursor;
      t3 = A.LinkedHashSet_LinkedHashSet$_empty(type$.MaterialState);
      if (!_this._isWidgetEnabled$1(t1))
        t3.add$1(0, B.MaterialState_6);
      if (_this._hovering) {
        t1 = _this._widget;
        t1.toString;
        t1 = _this._isWidgetEnabled$1(t1);
      } else
        t1 = false;
      if (t1)
        t3.add$1(0, B.MaterialState_0);
      if (_this._hasFocus)
        t3.add$1(0, B.MaterialState_1);
      effectiveMouseCursor = A.MaterialStateProperty_resolveAs(t2, t3, type$.MouseCursor);
      value = _this.___InkResponseState__actionMap;
      if (value === $) {
        t1 = type$.JSArray_of_void_Function_Action_Intent;
        t2 = type$.ObserverList_of_void_Function_Action_Intent;
        result = A.LinkedHashMap_LinkedHashMap$_literal([B.Type_ActivateIntent_OT9, new A.CallbackAction(new A.ObserverList(A._setArrayType([], t1), t2), type$.CallbackAction_ActivateIntent), B.Type_ButtonActivateIntent_6Ij, new A.CallbackAction(new A.ObserverList(A._setArrayType([], t1), t2), type$.CallbackAction_ButtonActivateIntent)], type$.Type, type$.Action_Intent);
        A._lateInitializeOnceCheck(_this.___InkResponseState__actionMap, "_actionMap");
        _this.___InkResponseState__actionMap = result;
        value = result;
      }
      t1 = _this._widget.focusNode;
      t2 = _this.get$_canRequestFocus();
      t3 = _this._widget;
      t3.toString;
      t3 = _this._isWidgetEnabled$1(t3) ? _this.get$_handleTapDown() : _null;
      t4 = _this._widget;
      t4.toString;
      t4 = _this._isWidgetEnabled$1(t4) ? _this.get$_handleTapUp() : _null;
      t5 = _this._widget;
      t5.toString;
      t5 = _this._isWidgetEnabled$1(t5) ? _this.get$_handleTap() : _null;
      t6 = _this._widget;
      t6.toString;
      t6 = _this._isWidgetEnabled$1(t6) ? _this.get$_handleTapCancel() : _null;
      t7 = _this._widget;
      return new A._ParentInkResponseProvider(_this, new A.Actions(value, new A.Focus(new A.MouseRegion(_this.get$_handleMouseEnter(), _this.get$_handleMouseExit(), effectiveMouseCursor, A.Semantics$(new A.GestureDetector(t7.child, t3, t4, t5, t6, _null, _null, B.HitTestBehavior_1, true, _null), _null, _null, _null, _null, _null, _null, _null, _null, _null), _null), t1, false, _this.get$_handleFocusUpdate(), t2, _null), _null), _null);
    },
    $is_ParentInkResponseState: 1
  };
  A._InkResponseState_highlightsExist_closure.prototype = {
    call$1(highlight) {
      return highlight != null;
    },
    $signature: 155
  };
  A._InkResponseState_updateHighlight_handleInkRemoval.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._highlights.$indexSet(0, this.type, null);
      t1.updateKeepAlive$0();
    },
    $signature: 0
  };
  A._InkResponseState__createInkFeature_onRemoved.prototype = {
    call$0() {
      var t3,
        t1 = this.$this,
        t2 = t1._splashes;
      if (t2 != null) {
        t3 = this._box_0;
        t2.remove$1(0, t3.splash);
        if (t1._currentSplash == t3.splash)
          t1._currentSplash = null;
        t1.updateKeepAlive$0();
      }
    },
    $signature: 0
  };
  A._InkResponseState__handleFocusHighlightModeChange_closure.prototype = {
    call$0() {
      this.$this._updateFocusHighlights$0();
    },
    $signature: 0
  };
  A.InkWell.prototype = {};
  A.__InkResponseState_State_AutomaticKeepAliveClientMixin.prototype = {
    initState$0() {
      this.super$State$initState();
      if (this.get$wantKeepAlive())
        this._ensureKeepAlive$0();
    },
    deactivate$0() {
      var t1 = this.AutomaticKeepAliveClientMixin__keepAliveHandle;
      if (t1 != null) {
        t1.notifyListeners$0();
        this.AutomaticKeepAliveClientMixin__keepAliveHandle = null;
      }
      this.super$State$deactivate();
    }
  };
  A.FloatingLabelBehavior.prototype = {
    toString$0(_) {
      return "FloatingLabelBehavior." + this._name;
    }
  };
  A.FloatingLabelAlignment.prototype = {
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(-1);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return other instanceof A.FloatingLabelAlignment && true;
    },
    toString$0(_) {
      return A.FloatingLabelAlignment__stringify(-1);
    }
  };
  A.InputDecorationTheme.prototype = {
    get$hashCode(_) {
      return A.hashList([null, null, null, null, null, null, null, B.FloatingLabelBehavior_1, B.C_FloatingLabelAlignment, false, null, false, null, null, null, null, null, null, false, null, null, null, null, null, null, null, null, null, false, null]);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.InputDecorationTheme)
        if (B.C_FloatingLabelAlignment.$eq(0, B.C_FloatingLabelAlignment))
          t1 = true;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    }
  };
  A._InputDecorationTheme_Object_Diagnosticable.prototype = {};
  A.ListTileThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.ListTileThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A.ListTile.prototype = {
    _iconColor$2(theme, tileTheme) {
      switch (theme.colorScheme.brightness.index) {
        case 1:
          return B.Color_1929379840;
        case 0:
          return null;
      }
    },
    _textColor$3(theme, tileTheme, defaultColor) {
      return defaultColor;
    },
    _isDenseLayout$2(theme, tileTheme) {
      return false;
    },
    build$1(_, context) {
      var tileTheme, t1, t2, textStyle, leadingAndTrailingTextStyle, leadingIcon, color, titleStyle, titleText, t3, effectiveMouseCursor, _this = this, _null = null,
        theme = A.Theme_of(context);
      context.dependOnInheritedWidgetOfExactType$1$0(type$.ListTileTheme);
      tileTheme = A.Theme_of(context).listTileTheme;
      t1 = _this._iconColor$2(theme, tileTheme);
      t2 = theme.textTheme;
      textStyle = t2.bodyMedium;
      leadingAndTrailingTextStyle = textStyle.copyWith$1$color(_this._textColor$3(theme, tileTheme, textStyle.color));
      leadingIcon = A.AnimatedDefaultTextStyle$(A.IconTheme_merge(_this.leading, new A.IconThemeData(t1, _null, _null, _null)), B.Duration_200000, leadingAndTrailingTextStyle);
      switch (0) {
        case 0:
          t1 = t2.titleMedium;
          t1.toString;
          textStyle = t1;
          break;
      }
      color = _this._textColor$3(theme, tileTheme, textStyle.color);
      _this._isDenseLayout$2(theme, tileTheme);
      titleStyle = textStyle.copyWith$1$color(color);
      titleText = A.AnimatedDefaultTextStyle$(_this.title, B.Duration_200000, titleStyle);
      t1 = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality);
      t1.toString;
      t2 = A.LinkedHashSet_LinkedHashSet$_empty(type$.MaterialState);
      t2.add$1(0, B.MaterialState_6);
      t3 = A.MaterialStateProperty_resolveAs(_null, t2, type$.nullable_MouseCursor);
      if (t3 == null)
        effectiveMouseCursor = _null;
      else
        effectiveMouseCursor = t3;
      if (effectiveMouseCursor == null)
        effectiveMouseCursor = B.C__EnabledAndDisabledMouseCursor.resolve$1(t2);
      _this._isDenseLayout$2(theme, tileTheme);
      t2 = titleStyle.textBaseline;
      t2.toString;
      t1 = A.Semantics$(new A.Ink(new A.SafeArea(false, false, B.EdgeInsets_16_0_16_0, new A._ListTile(leadingIcon, titleText, _null, _null, false, false, theme.visualDensity, t1.textDirection, t2, _null, 16, 4, 40, _null), _null), new A.ShapeDecoration(B.Color_0, _null, _null, _null, B.Border_27z), _null), true, _null, _null, _null, _null, _null, false, _null, _null);
      return new A.InkWell(t1, _null, _null, _null, _null, _null, _null, _null, _null, effectiveMouseCursor, true, B.BoxShape_0, _null, _null, _null, _null, _null, _null, _null, _null, _null, true, false, _null, false, _null, true, _null);
    }
  };
  A._ListTileSlot.prototype = {
    toString$0(_) {
      return "_ListTileSlot." + this._name;
    }
  };
  A._ListTile.prototype = {
    childForSlot$1(slot) {
      var _this = this;
      switch (slot.index) {
        case 0:
          return _this.leading;
        case 1:
          return _this.title;
        case 2:
          return _this.subtitle;
        case 3:
          return _this.trailing;
      }
    },
    createRenderObject$1(context) {
      var _this = this,
        t1 = new A._RenderListTile(false, _this.visualDensity, false, _this.textDirection, _this.titleBaselineType, _this.subtitleBaselineType, _this.horizontalTitleGap, _this.minVerticalPadding, _this.minLeadingWidth, A.LinkedHashMap_LinkedHashMap$_empty(type$._ListTileSlot, type$.RenderBox), A.LayerHandle$());
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1.__RenderObject__needsCompositing = false;
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      var _this = this;
      renderObject.set$isThreeLine(false);
      renderObject.set$isDense(false);
      renderObject.set$visualDensity(_this.visualDensity);
      renderObject.set$textDirection(0, _this.textDirection);
      renderObject.set$titleBaselineType(_this.titleBaselineType);
      renderObject.set$subtitleBaselineType(_this.subtitleBaselineType);
      renderObject.set$horizontalTitleGap(_this.horizontalTitleGap);
      renderObject.set$minLeadingWidth(_this.minLeadingWidth);
      renderObject.set$minVerticalPadding(_this.minVerticalPadding);
    }
  };
  A._RenderListTile.prototype = {
    get$children(_) {
      var t3,
        t1 = A._setArrayType([], type$.JSArray_RenderBox),
        t2 = this.SlottedContainerRenderObjectMixin__slotToChild;
      if (t2.$index(0, B._ListTileSlot_0) != null) {
        t3 = t2.$index(0, B._ListTileSlot_0);
        t3.toString;
        t1.push(t3);
      }
      if (t2.$index(0, B._ListTileSlot_1) != null) {
        t3 = t2.$index(0, B._ListTileSlot_1);
        t3.toString;
        t1.push(t3);
      }
      if (t2.$index(0, B._ListTileSlot_2) != null) {
        t3 = t2.$index(0, B._ListTileSlot_2);
        t3.toString;
        t1.push(t3);
      }
      if (t2.$index(0, B._ListTileSlot_3) != null) {
        t2 = t2.$index(0, B._ListTileSlot_3);
        t2.toString;
        t1.push(t2);
      }
      return t1;
    },
    set$isDense(value) {
      return;
    },
    set$visualDensity(value) {
      if (this._visualDensity.$eq(0, value))
        return;
      this._visualDensity = value;
      this.markNeedsLayout$0();
    },
    set$isThreeLine(value) {
      return;
    },
    set$textDirection(_, value) {
      if (this._list_tile$_textDirection === value)
        return;
      this._list_tile$_textDirection = value;
      this.markNeedsLayout$0();
    },
    set$titleBaselineType(value) {
      if (this._titleBaselineType === value)
        return;
      this._titleBaselineType = value;
      this.markNeedsLayout$0();
    },
    set$subtitleBaselineType(value) {
      if (this._subtitleBaselineType == value)
        return;
      this._subtitleBaselineType = value;
      this.markNeedsLayout$0();
    },
    get$_effectiveHorizontalTitleGap() {
      return this._horizontalTitleGap + this._visualDensity.horizontal * 2;
    },
    set$horizontalTitleGap(value) {
      if (this._horizontalTitleGap === value)
        return;
      this._horizontalTitleGap = value;
      this.markNeedsLayout$0();
    },
    set$minVerticalPadding(value) {
      if (this._minVerticalPadding === value)
        return;
      this._minVerticalPadding = value;
      this.markNeedsLayout$0();
    },
    set$minLeadingWidth(value) {
      if (this._minLeadingWidth === value)
        return;
      this._minLeadingWidth = value;
      this.markNeedsLayout$0();
    },
    get$sizedByParent() {
      return false;
    },
    get$_defaultTileHeight() {
      var t1 = this.SlottedContainerRenderObjectMixin__slotToChild.$index(0, B._ListTileSlot_2),
        t2 = this._visualDensity,
        baseDensity = new A.Offset(t2.horizontal, t2.vertical).$mul(0, 4);
      if (t1 == null)
        return 56 + baseDensity._dy;
      return 72 + baseDensity._dy;
    },
    computeDistanceToActualBaseline$1(baseline) {
      var t1 = this.SlottedContainerRenderObjectMixin__slotToChild,
        t2 = t1.$index(0, B._ListTileSlot_1).parentData;
      t2.toString;
      t2 = type$.BoxParentData._as(t2).offset;
      t1 = t1.$index(0, B._ListTileSlot_1).getDistanceToActualBaseline$1(baseline);
      t1.toString;
      return t2._dy + t1;
    },
    computeDryLayout$1(constraints) {
      return B.Size_0_0;
    },
    performLayout$0() {
      var looseConstraints, iconConstraints, leadingSize, trailingSize, titleStart, adjustedTrailingWidth, textConstraints, titleSize, subtitleSize, titleBaseline, subtitleBaseline, defaultTileHeight, t3, tileHeight, titleY, subtitleY, t4, t5, titleOverlap, titleY0, leadingY, trailingY, _this = this,
        constraints = A.RenderObject.prototype.get$constraints.call(_this),
        t1 = _this.SlottedContainerRenderObjectMixin__slotToChild,
        hasLeading = t1.$index(0, B._ListTileSlot_0) != null,
        isOneLine = t1.$index(0, B._ListTileSlot_2) == null,
        hasSubtitle = !isOneLine,
        hasTrailing = t1.$index(0, B._ListTileSlot_3) != null,
        t2 = _this._visualDensity,
        densityAdjustment = new A.Offset(t2.horizontal, t2.vertical).$mul(0, 4);
      t2 = constraints.maxWidth;
      looseConstraints = new A.BoxConstraints(0, t2, 0, constraints.maxHeight);
      iconConstraints = looseConstraints.enforce$1(new A.BoxConstraints(0, 1 / 0, 0, 56 + densityAdjustment._dy));
      leadingSize = A._RenderListTile__layoutBox(t1.$index(0, B._ListTileSlot_0), iconConstraints);
      trailingSize = A._RenderListTile__layoutBox(t1.$index(0, B._ListTileSlot_3), iconConstraints);
      titleStart = hasLeading ? Math.max(_this._minLeadingWidth, leadingSize._dx) + _this.get$_effectiveHorizontalTitleGap() : 0;
      adjustedTrailingWidth = hasTrailing ? Math.max(trailingSize._dx + _this.get$_effectiveHorizontalTitleGap(), 32) : 0;
      textConstraints = looseConstraints.tighten$1$width(t2 - titleStart - adjustedTrailingWidth);
      titleSize = A._RenderListTile__layoutBox(t1.$index(0, B._ListTileSlot_1), textConstraints);
      subtitleSize = A._RenderListTile__layoutBox(t1.$index(0, B._ListTileSlot_2), textConstraints);
      if (hasSubtitle) {
        titleBaseline = 32;
        subtitleBaseline = 52;
      } else {
        titleBaseline = null;
        subtitleBaseline = null;
      }
      defaultTileHeight = _this.get$_defaultTileHeight();
      t3 = titleSize._dy;
      if (isOneLine) {
        tileHeight = Math.max(defaultTileHeight, t3 + 2 * _this._minVerticalPadding);
        titleY = (tileHeight - t3) / 2;
        subtitleY = null;
      } else {
        titleBaseline.toString;
        t4 = t1.$index(0, B._ListTileSlot_1).getDistanceToBaseline$1(_this._titleBaselineType);
        t4.toString;
        titleY = titleBaseline - t4;
        subtitleBaseline.toString;
        t4 = t1.$index(0, B._ListTileSlot_2);
        t4.toString;
        t5 = _this._subtitleBaselineType;
        t5.toString;
        t5 = t4.getDistanceToBaseline$1(t5);
        t5.toString;
        subtitleY = subtitleBaseline - t5 + _this._visualDensity.vertical * 2;
        titleOverlap = titleY + t3 - subtitleY;
        if (titleOverlap > 0) {
          t4 = titleOverlap / 2;
          titleY -= t4;
          subtitleY += t4;
        }
        titleY0 = _this._minVerticalPadding;
        if (titleY < titleY0 || subtitleY + subtitleSize._dy + titleY0 > defaultTileHeight) {
          tileHeight = t3 + subtitleSize._dy + 2 * titleY0;
          subtitleY = t3 + titleY0;
          titleY = titleY0;
        } else
          tileHeight = defaultTileHeight;
      }
      if (tileHeight > 72) {
        leadingY = 16;
        trailingY = 16;
      } else {
        leadingY = Math.min((tileHeight - leadingSize._dy) / 2, 16);
        trailingY = (tileHeight - trailingSize._dy) / 2;
      }
      switch (_this._list_tile$_textDirection.index) {
        case 0:
          if (hasLeading) {
            t3 = t1.$index(0, B._ListTileSlot_0).parentData;
            t3.toString;
            type$.BoxParentData._as(t3).offset = new A.Offset(t2 - leadingSize._dx, leadingY);
          }
          t3 = t1.$index(0, B._ListTileSlot_1).parentData;
          t3.toString;
          t4 = type$.BoxParentData;
          t4._as(t3).offset = new A.Offset(adjustedTrailingWidth, titleY);
          if (hasSubtitle) {
            t3 = t1.$index(0, B._ListTileSlot_2);
            t3.toString;
            subtitleY.toString;
            t3 = t3.parentData;
            t3.toString;
            t4._as(t3).offset = new A.Offset(adjustedTrailingWidth, subtitleY);
          }
          if (hasTrailing) {
            t1 = t1.$index(0, B._ListTileSlot_3).parentData;
            t1.toString;
            t4._as(t1).offset = new A.Offset(0, trailingY);
          }
          break;
        case 1:
          if (hasLeading) {
            t3 = t1.$index(0, B._ListTileSlot_0).parentData;
            t3.toString;
            type$.BoxParentData._as(t3).offset = new A.Offset(0, leadingY);
          }
          t3 = t1.$index(0, B._ListTileSlot_1).parentData;
          t3.toString;
          t4 = type$.BoxParentData;
          t4._as(t3).offset = new A.Offset(titleStart, titleY);
          if (hasSubtitle) {
            t3 = t1.$index(0, B._ListTileSlot_2);
            t3.toString;
            subtitleY.toString;
            t3 = t3.parentData;
            t3.toString;
            t4._as(t3).offset = new A.Offset(titleStart, subtitleY);
          }
          if (hasTrailing) {
            t1 = t1.$index(0, B._ListTileSlot_3).parentData;
            t1.toString;
            t4._as(t1).offset = new A.Offset(t2 - trailingSize._dx, trailingY);
          }
          break;
      }
      _this._size = constraints.constrain$1(new A.Size(t2, tileHeight));
    },
    paint$2(context, offset) {
      var t1 = new A._RenderListTile_paint_doPaint(context, offset),
        t2 = this.SlottedContainerRenderObjectMixin__slotToChild;
      t1.call$1(t2.$index(0, B._ListTileSlot_0));
      t1.call$1(t2.$index(0, B._ListTileSlot_1));
      t1.call$1(t2.$index(0, B._ListTileSlot_2));
      t1.call$1(t2.$index(0, B._ListTileSlot_3));
    },
    hitTestSelf$1(position) {
      return true;
    },
    hitTestChildren$2$position(result, position) {
      var t1, t2, t3, _i, child, t4;
      for (t1 = this.get$children(this), t2 = t1.length, t3 = type$.BoxParentData, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        child = t1[_i];
        t4 = child.parentData;
        t4.toString;
        t3._as(t4);
        if (result.addWithPaintOffset$3$hitTest$offset$position(new A._RenderListTile_hitTestChildren_closure(position, t4, child), t4.offset, position))
          return true;
      }
      return false;
    }
  };
  A._RenderListTile_paint_doPaint.prototype = {
    call$1(child) {
      var t1;
      if (child != null) {
        t1 = child.parentData;
        t1.toString;
        this.context.paintChild$2(child, type$.BoxParentData._as(t1).offset.$add(0, this.offset));
      }
    },
    $signature: 156
  };
  A._RenderListTile_hitTestChildren_closure.prototype = {
    call$2(result, transformed) {
      return this.child.hitTest$2$position(result, transformed);
    },
    $signature: 18
  };
  A._ListTileThemeData_Object_Diagnosticable.prototype = {};
  A.__ListTile_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin.prototype = {
    updateRenderObject$2(context, renderObject) {
      return this.super$RenderObjectWidget$updateRenderObject(context, renderObject);
    }
  };
  A.__RenderListTile_RenderBox_SlottedContainerRenderObjectMixin.prototype = {
    attach$1(owner) {
      var t1, t2, _i;
      this.super$RenderObject$attach(owner);
      for (t1 = this.get$children(this), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].attach$1(owner);
    },
    detach$0(_) {
      var t1, t2, _i;
      this.super$AbstractNode$detach(0);
      for (t1 = this.get$children(this), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].detach$0(0);
    }
  };
  A.MaterialType.prototype = {
    toString$0(_) {
      return "MaterialType." + this._name;
    }
  };
  A.Material.prototype = {
    createState$0() {
      return new A._MaterialState(new A.LabeledGlobalKey("ink renderer", type$.LabeledGlobalKey_State_StatefulWidget), null, null, B._StateLifecycle_0);
    }
  };
  A._MaterialState.prototype = {
    build$1(_, context) {
      var color, t2, t3, contents, _this = this,
        theme = A.Theme_of(context),
        t1 = _this._widget;
      t1.toString;
      switch (0) {
        case 0:
          color = theme.canvasColor;
          break;
      }
      t2 = A.Theme_of(context).textTheme.bodyMedium;
      t2.toString;
      t3 = _this._widget;
      t3.toString;
      contents = A.AnimatedDefaultTextStyle$(t1.child, B.Duration_200000, t2);
      t1 = A.ElevationOverlay_applyOverlay(context, color, 0);
      _this._widget.toString;
      t2 = A.Theme_of(context);
      return new A.AnimatedPhysicalModel(new A.NotificationListener(new A._InkFeatures(color, _this, true, contents, _this._inkFeatureRenderer), new A._MaterialState_build_closure(_this), null, type$.NotificationListener_LayoutChangedNotification), B.BoxShape_0, B.Clip_0, 0, t1, false, t2.shadowColor, B.Cubic_y1j, B.Duration_200000, null, null);
    }
  };
  A._MaterialState_build_closure.prototype = {
    call$1(notification) {
      var t2,
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, this.$this._inkFeatureRenderer).get$renderObject();
      t1.toString;
      type$._RenderInkFeatures._as(t1);
      t2 = t1._inkFeatures;
      if (t2 != null && t2.length !== 0)
        t1.markNeedsPaint$0();
      return false;
    },
    $signature: 158
  };
  A._RenderInkFeatures.prototype = {
    addInkFeature$1(feature) {
      var t1 = this._inkFeatures;
      (t1 == null ? this._inkFeatures = A._setArrayType([], type$.JSArray_InkFeature) : t1).push(feature);
      this.markNeedsPaint$0();
    },
    hitTestSelf$1(position) {
      return this.absorbHitTest;
    },
    paint$2(context, offset) {
      var canvas, t2, _i, _this = this,
        t1 = _this._inkFeatures;
      if (t1 != null && t1.length !== 0) {
        canvas = context.get$canvas(context);
        canvas.save$0(0);
        canvas.translate$2(0, offset._dx, offset._dy);
        t1 = _this._size;
        canvas.clipRect$1(0, new A.Rect(0, 0, 0 + t1._dx, 0 + t1._dy));
        for (t1 = _this._inkFeatures, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
          t1[_i]._paint$1(canvas);
        canvas.restore$0(0);
      }
      _this.super$RenderProxyBoxMixin$paint(context, offset);
    }
  };
  A._InkFeatures.prototype = {
    createRenderObject$1(context) {
      var t1 = new A._RenderInkFeatures(this.vsync, this.absorbHitTest, null, A.LayerHandle$());
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1.__RenderObject__needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      renderObject.absorbHitTest = this.absorbHitTest;
    }
  };
  A.InkFeature.prototype = {
    dispose$0(_) {
      var t1 = this._material$_controller,
        t2 = t1._inkFeatures;
      t2.toString;
      B.JSArray_methods.remove$1(t2, this);
      t1.markNeedsPaint$0();
      this.onRemoved.call$0();
    },
    _paint$1(canvas) {
      var t1, t2, t3, transform, index, index0,
        node = this.referenceBox,
        descendants = A._setArrayType([node], type$.JSArray_RenderObject);
      for (t1 = this._material$_controller, t2 = type$.RenderObject; node !== t1; node = t3) {
        t3 = node._node$_parent;
        t3.toString;
        t2._as(t3);
        descendants.push(t3);
      }
      transform = new A.Matrix4(new Float64Array(16));
      transform.setIdentity$0();
      for (index = descendants.length - 1; index > 0; index = index0) {
        index0 = index - 1;
        descendants[index].applyPaintTransform$2(descendants[index0], transform);
      }
      this.paintFeature$2(canvas, transform);
    },
    toString$0(_) {
      return "<optimized out>#" + A.shortHash(this);
    }
  };
  A.__MaterialState_State_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0(_) {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTickers());
      _this.TickerProviderStateMixin__tickerModeNotifier = null;
      _this.super$State$dispose(0);
    }
  };
  A.MaterialState.prototype = {
    toString$0(_) {
      return "MaterialState." + this._name;
    }
  };
  A.MaterialStateMouseCursor.prototype = {
    createSession$1(device) {
      return new A._SystemMouseCursorSession(this.resolve$1(A.LinkedHashSet_LinkedHashSet$_empty(type$.MaterialState)), device);
    },
    $isMaterialStateProperty: 1
  };
  A._EnabledAndDisabledMouseCursor.prototype = {
    resolve$1(states) {
      if (states.contains$1(0, B.MaterialState_6))
        return B.SystemMouseCursor_basic;
      return B.SystemMouseCursor_click;
    },
    get$debugDescription() {
      return "MaterialStateMouseCursor(clickable)";
    },
    get$name() {
      return "clickable";
    }
  };
  A.NavigationBarThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.NavigationBarThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._NavigationBarThemeData_Object_Diagnosticable.prototype = {};
  A.NavigationRailThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.NavigationRailThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._NavigationRailThemeData_Object_Diagnosticable.prototype = {};
  A.OutlinedButtonThemeData.prototype = {
    get$hashCode(_) {
      return B.JSNull_methods.get$hashCode(null);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return other instanceof A.OutlinedButtonThemeData && true;
    }
  };
  A._OutlinedButtonThemeData_Object_Diagnosticable.prototype = {};
  A.PageTransitionsBuilder.prototype = {};
  A.FadeUpwardsPageTransitionsBuilder.prototype = {};
  A.CupertinoPageTransitionsBuilder.prototype = {};
  A.PageTransitionsTheme.prototype = {
    _all$1(builders) {
      var t1 = type$.MappedListIterable_of_TargetPlatform_and_nullable_PageTransitionsBuilder;
      return A.List_List$of(new A.MappedListIterable(B.List_4fl, new A.PageTransitionsTheme__all_closure(builders), t1), true, t1._eval$1("ListIterable.E"));
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      t1 = other instanceof A.PageTransitionsTheme;
      if (t1 && true)
        return true;
      return t1 && A.listEquals0(_this._all$1(B.Map_3hES6), _this._all$1(B.Map_3hES6));
    },
    get$hashCode(_) {
      return A.hashList(this._all$1(B.Map_3hES6));
    }
  };
  A.PageTransitionsTheme__all_closure.prototype = {
    call$1(platform) {
      return this.builders.$index(0, platform);
    },
    $signature: 159
  };
  A._PageTransitionsTheme_Object_Diagnosticable.prototype = {};
  A.PopupMenuThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.PopupMenuThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._PopupMenuThemeData_Object_Diagnosticable.prototype = {};
  A.ProgressIndicatorThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.ProgressIndicatorThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._ProgressIndicatorThemeData_Object_Diagnosticable.prototype = {};
  A.RadioThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.RadioThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._RadioThemeData_Object_Diagnosticable.prototype = {};
  A.ScrollbarThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.ScrollbarThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._ScrollbarThemeData_Object_Diagnosticable.prototype = {};
  A.SliderThemeData.prototype = {
    get$hashCode(_) {
      return A.hashList([null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.SliderThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._SliderThemeData_Object_Diagnosticable.prototype = {};
  A.SnackBarThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.SnackBarThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._SnackBarThemeData_Object_Diagnosticable.prototype = {};
  A.SwitchThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.SwitchThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._SwitchThemeData_Object_Diagnosticable.prototype = {};
  A.TabBarTheme.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.TabBarTheme)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._TabBarTheme_Object_Diagnosticable.prototype = {};
  A.TextButtonThemeData.prototype = {
    get$hashCode(_) {
      return B.JSNull_methods.get$hashCode(null);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return other instanceof A.TextButtonThemeData && true;
    }
  };
  A._TextButtonThemeData_Object_Diagnosticable.prototype = {};
  A.TextSelectionThemeData.prototype = {
    get$hashCode(_) {
      return A.hashValues(null, null, null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.TextSelectionThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._TextSelectionThemeData_Object_Diagnosticable.prototype = {};
  A.TextTheme.prototype = {
    merge$1(other) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, _this = this, _null = null;
      if (other == null)
        return _this;
      t1 = _this.displayLarge;
      t2 = t1 == null ? _null : t1.merge$1(other.displayLarge);
      if (t2 == null)
        t2 = other.displayLarge;
      t3 = _this.displayMedium;
      t4 = t3 == null ? _null : t3.merge$1(other.displayMedium);
      if (t4 == null)
        t4 = other.displayMedium;
      t5 = _this.displaySmall;
      t6 = t5 == null ? _null : t5.merge$1(other.displaySmall);
      if (t6 == null)
        t6 = other.displaySmall;
      t7 = _this.headlineLarge;
      t8 = t7 == null ? _null : t7.merge$1(other.headlineLarge);
      if (t8 == null)
        t8 = other.headlineLarge;
      t9 = _this.headlineMedium;
      t10 = t9 == null ? _null : t9.merge$1(other.headlineMedium);
      if (t10 == null)
        t10 = other.headlineMedium;
      t11 = _this.headlineSmall;
      t12 = t11 == null ? _null : t11.merge$1(other.headlineSmall);
      if (t12 == null)
        t12 = other.headlineSmall;
      t13 = _this.titleLarge;
      t14 = t13 == null ? _null : t13.merge$1(other.titleLarge);
      if (t14 == null)
        t14 = other.titleLarge;
      t15 = _this.titleMedium;
      t16 = t15 == null ? _null : t15.merge$1(other.titleMedium);
      if (t16 == null)
        t16 = other.titleMedium;
      t17 = _this.titleSmall;
      t18 = t17 == null ? _null : t17.merge$1(other.titleSmall);
      if (t18 == null)
        t18 = other.titleSmall;
      t19 = _this.bodyLarge;
      t20 = t19 == null ? _null : t19.merge$1(other.bodyLarge);
      if (t20 == null)
        t20 = other.bodyLarge;
      t21 = _this.bodyMedium;
      t22 = t21 == null ? _null : t21.merge$1(other.bodyMedium);
      if (t22 == null)
        t22 = other.bodyMedium;
      t23 = _this.bodySmall;
      t24 = t23 == null ? _null : t23.merge$1(other.bodySmall);
      if (t24 == null)
        t24 = other.bodySmall;
      t25 = _this.labelLarge;
      t26 = t25 == null ? _null : t25.merge$1(other.labelLarge);
      if (t26 == null)
        t26 = other.labelLarge;
      t27 = _this.labelMedium;
      t28 = t27 == null ? _null : t27.merge$1(other.labelMedium);
      if (t28 == null)
        t28 = other.labelMedium;
      t29 = _this.labelSmall;
      t30 = t29 == null ? _null : t29.merge$1(other.labelSmall);
      if (t30 == null)
        t30 = other.labelSmall;
      if (t2 == null)
        t2 = _null;
      t1 = t2 == null ? t1 : t2;
      t2 = t4 == null ? _null : t4;
      if (t2 == null)
        t2 = t3;
      t3 = t6 == null ? _null : t6;
      if (t3 == null)
        t3 = t5;
      t4 = t8 == null ? t7 : t8;
      t5 = t10 == null ? _null : t10;
      if (t5 == null)
        t5 = t9;
      t6 = t12 == null ? _null : t12;
      if (t6 == null)
        t6 = t11;
      t7 = t14 == null ? _null : t14;
      if (t7 == null)
        t7 = t13;
      t8 = t16 == null ? _null : t16;
      if (t8 == null)
        t8 = t15;
      t9 = t18 == null ? _null : t18;
      if (t9 == null)
        t9 = t17;
      t10 = t20 == null ? _null : t20;
      if (t10 == null)
        t10 = t19;
      t11 = t22 == null ? _null : t22;
      if (t11 == null)
        t11 = t21;
      t12 = t24 == null ? _null : t24;
      if (t12 == null)
        t12 = t23;
      t13 = t26 == null ? _null : t26;
      if (t13 == null)
        t13 = t25;
      t14 = t28 == null ? t27 : t28;
      t15 = t30 == null ? _null : t30;
      return A.TextTheme$(t10, t11, t12, t1, t2, t3, t4, t5, t6, t13, t14, t15 == null ? t29 : t15, t7, t8, t9);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      return other instanceof A.TextTheme && J.$eq$(_this.displayLarge, other.displayLarge) && J.$eq$(_this.displayMedium, other.displayMedium) && J.$eq$(_this.displaySmall, other.displaySmall) && J.$eq$(_this.headlineLarge, other.headlineLarge) && J.$eq$(_this.headlineMedium, other.headlineMedium) && J.$eq$(_this.headlineSmall, other.headlineSmall) && J.$eq$(_this.titleLarge, other.titleLarge) && J.$eq$(_this.titleMedium, other.titleMedium) && J.$eq$(_this.titleSmall, other.titleSmall) && J.$eq$(_this.bodyLarge, other.bodyLarge) && J.$eq$(_this.bodyMedium, other.bodyMedium) && J.$eq$(_this.bodySmall, other.bodySmall) && J.$eq$(_this.labelLarge, other.labelLarge) && J.$eq$(_this.labelMedium, other.labelMedium) && J.$eq$(_this.labelSmall, other.labelSmall);
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.displayLarge, _this.displayMedium, _this.displaySmall, _this.headlineLarge, _this.headlineMedium, _this.headlineSmall, _this.titleLarge, _this.titleMedium, _this.titleSmall, _this.bodyLarge, _this.bodyMedium, _this.bodySmall, _this.labelLarge, _this.labelMedium, _this.labelSmall, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    }
  };
  A._TextTheme_Object_Diagnosticable.prototype = {};
  A.MaterialTapTargetSize.prototype = {
    toString$0(_) {
      return "MaterialTapTargetSize." + this._name;
    }
  };
  A.ThemeData.prototype = {
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      if (other instanceof A.ThemeData)
        if (other.applyElevationOverlayColor === _this.applyElevationOverlayColor)
          if (other.inputDecorationTheme.$eq(0, _this.inputDecorationTheme))
            if (other.materialTapTargetSize === _this.materialTapTargetSize)
              if (other.pageTransitionsTheme.$eq(0, _this.pageTransitionsTheme))
                if (other.platform === _this.platform)
                  if (other.scrollbarTheme.$eq(0, _this.scrollbarTheme))
                    if (other.splashFactory === _this.splashFactory)
                      if (other.visualDensity.$eq(0, _this.visualDensity))
                        if (other.colorScheme.$eq(0, _this.colorScheme))
                          if (other.primaryColor.$eq(0, _this.primaryColor))
                            if (other.primaryColorLight.$eq(0, _this.primaryColorLight))
                              if (other.primaryColorDark.$eq(0, _this.primaryColorDark))
                                if (other.focusColor.$eq(0, _this.focusColor))
                                  if (other.hoverColor.$eq(0, _this.hoverColor))
                                    if (other.shadowColor.$eq(0, _this.shadowColor))
                                      if (other.canvasColor.$eq(0, _this.canvasColor))
                                        if (other.scaffoldBackgroundColor.$eq(0, _this.scaffoldBackgroundColor))
                                          if (other.bottomAppBarColor.$eq(0, _this.bottomAppBarColor))
                                            if (other.cardColor.$eq(0, _this.cardColor))
                                              if (other.dividerColor.$eq(0, _this.dividerColor))
                                                if (other.highlightColor.$eq(0, _this.highlightColor))
                                                  if (other.splashColor.$eq(0, _this.splashColor))
                                                    if (other.selectedRowColor.$eq(0, _this.selectedRowColor))
                                                      if (other.unselectedWidgetColor.$eq(0, _this.unselectedWidgetColor))
                                                        if (other.disabledColor.$eq(0, _this.disabledColor))
                                                          if (other.secondaryHeaderColor.$eq(0, _this.secondaryHeaderColor))
                                                            if (other.backgroundColor.$eq(0, _this.backgroundColor))
                                                              if (other.dialogBackgroundColor.$eq(0, _this.dialogBackgroundColor))
                                                                if (other.indicatorColor.$eq(0, _this.indicatorColor))
                                                                  if (other.hintColor.$eq(0, _this.hintColor))
                                                                    if (other.errorColor.$eq(0, _this.errorColor))
                                                                      if (other.toggleableActiveColor.$eq(0, _this.toggleableActiveColor))
                                                                        if (other.typography.$eq(0, _this.typography))
                                                                          if (other.textTheme.$eq(0, _this.textTheme))
                                                                            if (other.primaryTextTheme.$eq(0, _this.primaryTextTheme))
                                                                              if (other.iconTheme.$eq(0, _this.iconTheme))
                                                                                if (other.primaryIconTheme.$eq(0, _this.primaryIconTheme))
                                                                                  if (other.appBarTheme.$eq(0, _this.appBarTheme))
                                                                                    if (other.bannerTheme.$eq(0, _this.bannerTheme))
                                                                                      if (other.bottomAppBarTheme.$eq(0, _this.bottomAppBarTheme))
                                                                                        if (other.bottomNavigationBarTheme.$eq(0, _this.bottomNavigationBarTheme))
                                                                                          if (other.bottomSheetTheme.$eq(0, _this.bottomSheetTheme))
                                                                                            if (other.buttonBarTheme.$eq(0, _this.buttonBarTheme))
                                                                                              if (other.buttonTheme.$eq(0, _this.buttonTheme))
                                                                                                if (other.cardTheme.$eq(0, _this.cardTheme))
                                                                                                  if (other.checkboxTheme.$eq(0, _this.checkboxTheme))
                                                                                                    if (other.chipTheme.$eq(0, _this.chipTheme))
                                                                                                      if (other.dataTableTheme.$eq(0, _this.dataTableTheme))
                                                                                                        if (other.dialogTheme.$eq(0, _this.dialogTheme))
                                                                                                          if (other.dividerTheme.$eq(0, _this.dividerTheme))
                                                                                                            if (other.drawerTheme.$eq(0, _this.drawerTheme))
                                                                                                              if (other.elevatedButtonTheme.$eq(0, _this.elevatedButtonTheme))
                                                                                                                if (other.floatingActionButtonTheme.$eq(0, _this.floatingActionButtonTheme))
                                                                                                                  if (other.listTileTheme.$eq(0, _this.listTileTheme))
                                                                                                                    if (other.navigationBarTheme.$eq(0, _this.navigationBarTheme))
                                                                                                                      if (other.navigationRailTheme.$eq(0, _this.navigationRailTheme))
                                                                                                                        if (other.outlinedButtonTheme.$eq(0, _this.outlinedButtonTheme))
                                                                                                                          if (other.popupMenuTheme.$eq(0, _this.popupMenuTheme))
                                                                                                                            if (other.progressIndicatorTheme.$eq(0, _this.progressIndicatorTheme))
                                                                                                                              if (other.radioTheme.$eq(0, _this.radioTheme))
                                                                                                                                if (other.sliderTheme.$eq(0, _this.sliderTheme))
                                                                                                                                  if (other.snackBarTheme.$eq(0, _this.snackBarTheme))
                                                                                                                                    if (other.switchTheme.$eq(0, _this.switchTheme))
                                                                                                                                      if (other.tabBarTheme.$eq(0, _this.tabBarTheme))
                                                                                                                                        if (other.textButtonTheme.$eq(0, _this.textButtonTheme))
                                                                                                                                          if (other.textSelectionTheme.$eq(0, _this.textSelectionTheme))
                                                                                                                                            if (other.timePickerTheme.$eq(0, _this.timePickerTheme))
                                                                                                                                              if (other.toggleButtonsTheme.$eq(0, _this.toggleButtonsTheme))
                                                                                                                                                if (other.tooltipTheme.$eq(0, _this.tooltipTheme))
                                                                                                                                                  if (other.textSelectionColor.$eq(0, _this.textSelectionColor))
                                                                                                                                                    if (other.cursorColor.$eq(0, _this.cursorColor))
                                                                                                                                                      if (other.textSelectionHandleColor.$eq(0, _this.textSelectionHandleColor))
                                                                                                                                                        if (other.accentColor.$eq(0, _this.accentColor))
                                                                                                                                                          if (other.accentColorBrightness === _this.accentColorBrightness)
                                                                                                                                                            if (other.accentTextTheme.$eq(0, _this.accentTextTheme))
                                                                                                                                                              if (other.accentIconTheme.$eq(0, _this.accentIconTheme))
                                                                                                                                                                if (other.buttonColor.$eq(0, _this.buttonColor))
                                                                                                                                                                  t1 = other.primaryColorBrightness === _this.primaryColorBrightness;
                                                                                                                                                                else
                                                                                                                                                                  t1 = false;
                                                                                                                                                              else
                                                                                                                                                                t1 = false;
                                                                                                                                                            else
                                                                                                                                                              t1 = false;
                                                                                                                                                          else
                                                                                                                                                            t1 = false;
                                                                                                                                                        else
                                                                                                                                                          t1 = false;
                                                                                                                                                      else
                                                                                                                                                        t1 = false;
                                                                                                                                                    else
                                                                                                                                                      t1 = false;
                                                                                                                                                  else
                                                                                                                                                    t1 = false;
                                                                                                                                                else
                                                                                                                                                  t1 = false;
                                                                                                                                              else
                                                                                                                                                t1 = false;
                                                                                                                                            else
                                                                                                                                              t1 = false;
                                                                                                                                          else
                                                                                                                                            t1 = false;
                                                                                                                                        else
                                                                                                                                          t1 = false;
                                                                                                                                      else
                                                                                                                                        t1 = false;
                                                                                                                                    else
                                                                                                                                      t1 = false;
                                                                                                                                  else
                                                                                                                                    t1 = false;
                                                                                                                                else
                                                                                                                                  t1 = false;
                                                                                                                              else
                                                                                                                                t1 = false;
                                                                                                                            else
                                                                                                                              t1 = false;
                                                                                                                          else
                                                                                                                            t1 = false;
                                                                                                                        else
                                                                                                                          t1 = false;
                                                                                                                      else
                                                                                                                        t1 = false;
                                                                                                                    else
                                                                                                                      t1 = false;
                                                                                                                  else
                                                                                                                    t1 = false;
                                                                                                                else
                                                                                                                  t1 = false;
                                                                                                              else
                                                                                                                t1 = false;
                                                                                                            else
                                                                                                              t1 = false;
                                                                                                          else
                                                                                                            t1 = false;
                                                                                                        else
                                                                                                          t1 = false;
                                                                                                      else
                                                                                                        t1 = false;
                                                                                                    else
                                                                                                      t1 = false;
                                                                                                  else
                                                                                                    t1 = false;
                                                                                                else
                                                                                                  t1 = false;
                                                                                              else
                                                                                                t1 = false;
                                                                                            else
                                                                                              t1 = false;
                                                                                          else
                                                                                            t1 = false;
                                                                                        else
                                                                                          t1 = false;
                                                                                      else
                                                                                        t1 = false;
                                                                                    else
                                                                                      t1 = false;
                                                                                  else
                                                                                    t1 = false;
                                                                                else
                                                                                  t1 = false;
                                                                              else
                                                                                t1 = false;
                                                                            else
                                                                              t1 = false;
                                                                          else
                                                                            t1 = false;
                                                                        else
                                                                          t1 = false;
                                                                      else
                                                                        t1 = false;
                                                                    else
                                                                      t1 = false;
                                                                  else
                                                                    t1 = false;
                                                                else
                                                                  t1 = false;
                                                              else
                                                                t1 = false;
                                                            else
                                                              t1 = false;
                                                          else
                                                            t1 = false;
                                                        else
                                                          t1 = false;
                                                      else
                                                        t1 = false;
                                                    else
                                                      t1 = false;
                                                  else
                                                    t1 = false;
                                                else
                                                  t1 = false;
                                              else
                                                t1 = false;
                                            else
                                              t1 = false;
                                          else
                                            t1 = false;
                                        else
                                          t1 = false;
                                      else
                                        t1 = false;
                                    else
                                      t1 = false;
                                  else
                                    t1 = false;
                                else
                                  t1 = false;
                              else
                                t1 = false;
                            else
                              t1 = false;
                          else
                            t1 = false;
                        else
                          t1 = false;
                      else
                        t1 = false;
                    else
                      t1 = false;
                  else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashList([_this.androidOverscrollIndicator, _this.applyElevationOverlayColor, _this.cupertinoOverrideTheme, _this.inputDecorationTheme, _this.materialTapTargetSize, _this.pageTransitionsTheme, _this.platform, _this.scrollbarTheme, _this.splashFactory, _this.visualDensity, false, _this.colorScheme, _this.primaryColor, _this.primaryColorLight, _this.primaryColorDark, _this.focusColor, _this.hoverColor, _this.shadowColor, _this.canvasColor, _this.scaffoldBackgroundColor, _this.bottomAppBarColor, _this.cardColor, _this.dividerColor, _this.highlightColor, _this.splashColor, _this.selectedRowColor, _this.unselectedWidgetColor, _this.disabledColor, _this.secondaryHeaderColor, _this.backgroundColor, _this.dialogBackgroundColor, _this.indicatorColor, _this.hintColor, _this.errorColor, _this.toggleableActiveColor, _this.typography, _this.textTheme, _this.primaryTextTheme, _this.iconTheme, _this.primaryIconTheme, _this.appBarTheme, _this.bannerTheme, _this.bottomAppBarTheme, _this.bottomNavigationBarTheme, _this.bottomSheetTheme, _this.buttonBarTheme, _this.buttonTheme, _this.cardTheme, _this.checkboxTheme, _this.chipTheme, _this.dataTableTheme, _this.dialogTheme, _this.dividerTheme, _this.drawerTheme, _this.elevatedButtonTheme, _this.floatingActionButtonTheme, _this.listTileTheme, _this.navigationBarTheme, _this.navigationRailTheme, _this.outlinedButtonTheme, _this.popupMenuTheme, _this.progressIndicatorTheme, _this.radioTheme, _this.sliderTheme, _this.snackBarTheme, _this.switchTheme, _this.tabBarTheme, _this.textButtonTheme, _this.textSelectionTheme, _this.timePickerTheme, _this.toggleButtonsTheme, _this.tooltipTheme, true, _this.textSelectionColor, _this.cursorColor, _this.textSelectionHandleColor, _this.accentColor, _this.accentColorBrightness, _this.accentTextTheme, _this.accentIconTheme, _this.buttonColor, true, _this.primaryColorBrightness]);
    }
  };
  A.ThemeData_localize_closure.prototype = {
    call$0() {
      var t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33,
        t1 = this.baseTheme,
        t2 = this.localTextGeometry,
        t3 = t2.merge$1(t1.primaryTextTheme),
        t4 = t2.merge$1(t1.accentTextTheme);
      t2 = t2.merge$1(t1.textTheme);
      t5 = t1.colorScheme;
      t6 = t5.primary;
      t7 = t5.onPrimary;
      t8 = t5._primaryContainer;
      if (t8 == null)
        t8 = t6;
      t9 = t5._onPrimaryContainer;
      if (t9 == null)
        t9 = t7;
      t10 = t5.secondary;
      t11 = t5.onSecondary;
      t12 = t5._secondaryContainer;
      if (t12 == null)
        t12 = t10;
      t13 = t5._onSecondaryContainer;
      if (t13 == null)
        t13 = t11;
      t14 = t5._tertiary;
      t15 = t14 == null ? t10 : t14;
      t16 = t5._onTertiary;
      t17 = t16 == null ? t11 : t16;
      t18 = t5._tertiaryContainer;
      if (t18 == null) {
        if (t14 == null)
          t14 = t10;
      } else
        t14 = t18;
      t18 = t5._onTertiaryContainer;
      if (t18 == null) {
        if (t16 == null)
          t16 = t11;
      } else
        t16 = t18;
      t18 = t5.error;
      t19 = t5.onError;
      t20 = t5._errorContainer;
      if (t20 == null)
        t20 = t18;
      t21 = t5._onErrorContainer;
      if (t21 == null)
        t21 = t19;
      t22 = t5.onBackground;
      t23 = t5.surface;
      t24 = t5.onSurface;
      t25 = t5._surfaceVariant;
      if (t25 == null)
        t25 = t23;
      t26 = t5._onSurfaceVariant;
      if (t26 == null)
        t26 = t24;
      t27 = t5._outline;
      if (t27 == null)
        t27 = t22;
      t28 = t5._shadow;
      if (t28 == null)
        t28 = t22;
      t29 = t5._inverseSurface;
      if (t29 == null)
        t29 = t24;
      t30 = t5._onInverseSurface;
      if (t30 == null)
        t30 = t23;
      t31 = t5._inversePrimary;
      if (t31 == null)
        t31 = t7;
      t32 = t5._primaryVariant;
      if (t32 == null)
        t32 = t6;
      t33 = t5._secondaryVariant;
      if (t33 == null)
        t33 = t10;
      t14 = A.ColorScheme$(t5.background, t5.brightness, t18, t20, t31, t29, t22, t19, t21, t30, t7, t9, t11, t13, t24, t26, t17, t16, t27, t6, t8, t32, t10, t12, t33, t28, t23, t25, t15, t14);
      return A.ThemeData$raw(t1.accentColor, t1.accentColorBrightness, t1.accentIconTheme, t4, t1.androidOverscrollIndicator, t1.appBarTheme, t1.applyElevationOverlayColor, t1.backgroundColor, t1.bannerTheme, t1.bottomAppBarColor, t1.bottomAppBarTheme, t1.bottomNavigationBarTheme, t1.bottomSheetTheme, t1.buttonBarTheme, t1.buttonColor, t1.buttonTheme, t1.canvasColor, t1.cardColor, t1.cardTheme, t1.checkboxTheme, t1.chipTheme, t14, t1.cupertinoOverrideTheme, t1.cursorColor, t1.dataTableTheme, t1.dialogBackgroundColor, t1.dialogTheme, t1.disabledColor, t1.dividerColor, t1.dividerTheme, t1.drawerTheme, t1.elevatedButtonTheme, t1.errorColor, true, t1.floatingActionButtonTheme, t1.focusColor, t1.highlightColor, t1.hintColor, t1.hoverColor, t1.iconTheme, t1.indicatorColor, t1.inputDecorationTheme, t1.listTileTheme, t1.materialTapTargetSize, t1.navigationBarTheme, t1.navigationRailTheme, t1.outlinedButtonTheme, t1.pageTransitionsTheme, t1.platform, t1.popupMenuTheme, t1.primaryColor, t1.primaryColorBrightness, t1.primaryColorDark, t1.primaryColorLight, t1.primaryIconTheme, t3, t1.progressIndicatorTheme, t1.radioTheme, t1.scaffoldBackgroundColor, t1.scrollbarTheme, t1.secondaryHeaderColor, t1.selectedRowColor, t1.shadowColor, t1.sliderTheme, t1.snackBarTheme, t1.splashColor, t1.splashFactory, t1.switchTheme, t1.tabBarTheme, t1.textButtonTheme, t1.textSelectionColor, t1.textSelectionHandleColor, t1.textSelectionTheme, t2, t1.timePickerTheme, t1.toggleButtonsTheme, t1.toggleableActiveColor, t1.tooltipTheme, t1.typography, t1.unselectedWidgetColor, false, true, t1.visualDensity);
    },
    $signature: 160
  };
  A._IdentityThemeDataCacheKey.prototype = {
    get$hashCode(_) {
      return (A.objectHashCode(this.baseTheme) ^ A.objectHashCode(this.localTextGeometry)) >>> 0;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._IdentityThemeDataCacheKey && other.baseTheme === this.baseTheme && other.localTextGeometry === this.localTextGeometry;
    }
  };
  A._FifoCache.prototype = {
    putIfAbsent$2(_, key, loader) {
      var t2,
        t1 = this._cache,
        result = t1.$index(0, key);
      if (result != null)
        return result;
      if (t1._length === this._maximumSize) {
        t2 = new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>"));
        t1.remove$1(0, t2.get$first(t2));
      }
      t2 = loader.call$0();
      t1.$indexSet(0, key, t2);
      return t2;
    }
  };
  A.VisualDensity.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return other instanceof A.VisualDensity && other.horizontal === this.horizontal && other.vertical === this.vertical;
    },
    get$hashCode(_) {
      return A.hashValues(this.horizontal, this.vertical, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toStringShort$0() {
      return this.super$Diagnosticable$toStringShort() + "(h: " + A.debugFormatDouble(this.horizontal) + ", v: " + A.debugFormatDouble(this.vertical) + ")";
    }
  };
  A._ThemeData_Object_Diagnosticable.prototype = {};
  A._VisualDensity_Object_Diagnosticable.prototype = {};
  A.TimePickerThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.TimePickerThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._TimePickerThemeData_Object_Diagnosticable.prototype = {};
  A.ToggleButtonsThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.ToggleButtonsThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._ToggleButtonsThemeData_Object_Diagnosticable.prototype = {};
  A.TooltipThemeData.prototype = {
    get$hashCode(_) {
      var _null = null;
      return A.hashValues(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.TooltipThemeData)
        t1 = true;
      else
        t1 = false;
      return t1;
    }
  };
  A._TooltipThemeData_Object_Diagnosticable.prototype = {};
  A.ScriptCategory.prototype = {
    toString$0(_) {
      return "ScriptCategory." + this._name;
    }
  };
  A.Typography.prototype = {
    geometryThemeFor$1(category) {
      switch (category.index) {
        case 0:
          return this.englishLike;
        case 1:
          return this.dense;
        case 2:
          return this.tall;
      }
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      return other instanceof A.Typography && other.black.$eq(0, _this.black) && other.white.$eq(0, _this.white) && other.englishLike.$eq(0, _this.englishLike) && other.dense.$eq(0, _this.dense) && other.tall.$eq(0, _this.tall);
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.black, _this.white, _this.englishLike, _this.dense, _this.tall, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    }
  };
  A._Typography_Object_Diagnosticable.prototype = {};
  A.AlignmentGeometry.prototype = {
    toString$0(_) {
      var _this = this;
      if (_this.get$_alignment$_start(_this) === 0)
        return A.Alignment__stringify(_this.get$_x(), _this.get$_y());
      if (_this.get$_x() === 0)
        return A.AlignmentDirectional__stringify(_this.get$_alignment$_start(_this), _this.get$_y());
      return A.Alignment__stringify(_this.get$_x(), _this.get$_y()) + " + " + A.AlignmentDirectional__stringify(_this.get$_alignment$_start(_this), 0);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      return other instanceof A.AlignmentGeometry && other.get$_x() === _this.get$_x() && other.get$_alignment$_start(other) === _this.get$_alignment$_start(_this) && other.get$_y() === _this.get$_y();
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.get$_x(), _this.get$_alignment$_start(_this), _this.get$_y(), B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    }
  };
  A.Alignment.prototype = {
    get$_x() {
      return this.x;
    },
    get$_alignment$_start(_) {
      return 0;
    },
    get$_y() {
      return this.y;
    },
    $sub(_, other) {
      return new A.Alignment(this.x - other.x, this.y - other.y);
    },
    $add(_, other) {
      return new A.Alignment(this.x + other.x, this.y + other.y);
    },
    $mul(_, other) {
      return new A.Alignment(this.x * other, this.y * other);
    },
    resolve$1(direction) {
      return this;
    },
    toString$0(_) {
      return A.Alignment__stringify(this.x, this.y);
    }
  };
  A.AlignmentDirectional.prototype = {
    get$_x() {
      return 0;
    },
    get$_alignment$_start(_) {
      return this.start;
    },
    get$_y() {
      return this.y;
    },
    $sub(_, other) {
      return new A.AlignmentDirectional(this.start - other.start, this.y - other.y);
    },
    $add(_, other) {
      return new A.AlignmentDirectional(this.start + other.start, this.y + other.y);
    },
    $mul(_, other) {
      return new A.AlignmentDirectional(this.start * other, this.y * other);
    },
    resolve$1(direction) {
      var _this = this;
      switch (direction.index) {
        case 0:
          return new A.Alignment(-_this.start, _this.y);
        case 1:
          return new A.Alignment(_this.start, _this.y);
      }
    },
    toString$0(_) {
      return A.AlignmentDirectional__stringify(this.start, this.y);
    }
  };
  A._MixedAlignment.prototype = {
    $mul(_, other) {
      return new A._MixedAlignment(this._x * other, this._alignment$_start * other, this._y * other);
    },
    resolve$1(direction) {
      var _this = this;
      switch (direction.index) {
        case 0:
          return new A.Alignment(_this._x - _this._alignment$_start, _this._y);
        case 1:
          return new A.Alignment(_this._x + _this._alignment$_start, _this._y);
      }
    },
    get$_x() {
      return this._x;
    },
    get$_alignment$_start(receiver) {
      return this._alignment$_start;
    },
    get$_y() {
      return this._y;
    }
  };
  A.RenderComparison.prototype = {
    toString$0(_) {
      return "RenderComparison." + this._name;
    }
  };
  A.Axis.prototype = {
    toString$0(_) {
      return "Axis." + this._name;
    }
  };
  A.VerticalDirection.prototype = {
    toString$0(_) {
      return "VerticalDirection." + this._name;
    }
  };
  A.PaintingBinding.prototype = {$isSchedulerBinding: 1};
  A._SystemFontsNotifier.prototype = {
    notifyListeners$0() {
      var t1, t2, callback;
      for (t1 = this._systemFontsCallbacks, t1 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications), t2 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
        callback = t1._collection$_current;
        (callback == null ? t2._as(callback) : callback).call$0();
      }
    }
  };
  A.BorderRadiusGeometry.prototype = {
    subtract$1(other) {
      var _this = this;
      return new A._MixedBorderRadius(_this.get$_topLeft().$sub(0, other.get$_topLeft()), _this.get$_topRight().$sub(0, other.get$_topRight()), _this.get$_bottomLeft().$sub(0, other.get$_bottomLeft()), _this.get$_bottomRight().$sub(0, other.get$_bottomRight()), _this.get$_topStart().$sub(0, other.get$_topStart()), _this.get$_topEnd().$sub(0, other.get$_topEnd()), _this.get$_bottomStart().$sub(0, other.get$_bottomStart()), _this.get$_bottomEnd().$sub(0, other.get$_bottomEnd()));
    },
    add$1(_, other) {
      var _this = this;
      return new A._MixedBorderRadius(_this.get$_topLeft().$add(0, other.get$_topLeft()), _this.get$_topRight().$add(0, other.get$_topRight()), _this.get$_bottomLeft().$add(0, other.get$_bottomLeft()), _this.get$_bottomRight().$add(0, other.get$_bottomRight()), _this.get$_topStart().$add(0, other.get$_topStart()), _this.get$_topEnd().$add(0, other.get$_topEnd()), _this.get$_bottomStart().$add(0, other.get$_bottomStart()), _this.get$_bottomEnd().$add(0, other.get$_bottomEnd()));
    },
    toString$0(_) {
      var visual, t1, comma, logical, _this = this;
      if (_this.get$_topLeft().$eq(0, _this.get$_topRight()) && _this.get$_topRight().$eq(0, _this.get$_bottomLeft()) && _this.get$_bottomLeft().$eq(0, _this.get$_bottomRight()))
        if (!_this.get$_topLeft().$eq(0, B.Radius_0_0))
          visual = _this.get$_topLeft().x === _this.get$_topLeft().y ? "BorderRadius.circular(" + B.JSNumber_methods.toStringAsFixed$1(_this.get$_topLeft().x, 1) + ")" : "BorderRadius.all(" + _this.get$_topLeft().toString$0(0) + ")";
        else
          visual = null;
      else {
        t1 = "" + "BorderRadius.only(";
        if (!_this.get$_topLeft().$eq(0, B.Radius_0_0)) {
          t1 += "topLeft: " + _this.get$_topLeft().toString$0(0);
          comma = true;
        } else
          comma = false;
        if (!_this.get$_topRight().$eq(0, B.Radius_0_0)) {
          if (comma)
            t1 += ", ";
          t1 += "topRight: " + _this.get$_topRight().toString$0(0);
          comma = true;
        }
        if (!_this.get$_bottomLeft().$eq(0, B.Radius_0_0)) {
          if (comma)
            t1 += ", ";
          t1 += "bottomLeft: " + _this.get$_bottomLeft().toString$0(0);
          comma = true;
        }
        if (!_this.get$_bottomRight().$eq(0, B.Radius_0_0)) {
          if (comma)
            t1 += ", ";
          t1 += "bottomRight: " + _this.get$_bottomRight().toString$0(0);
        }
        t1 += ")";
        visual = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      if (_this.get$_topStart().$eq(0, _this.get$_topEnd()) && _this.get$_topEnd().$eq(0, _this.get$_bottomEnd()) && _this.get$_bottomEnd().$eq(0, _this.get$_bottomStart()))
        if (!_this.get$_topStart().$eq(0, B.Radius_0_0))
          logical = _this.get$_topStart().x === _this.get$_topStart().y ? "BorderRadiusDirectional.circular(" + B.JSNumber_methods.toStringAsFixed$1(_this.get$_topStart().x, 1) + ")" : "BorderRadiusDirectional.all(" + _this.get$_topStart().toString$0(0) + ")";
        else
          logical = null;
      else {
        t1 = "" + "BorderRadiusDirectional.only(";
        if (!_this.get$_topStart().$eq(0, B.Radius_0_0)) {
          t1 += "topStart: " + _this.get$_topStart().toString$0(0);
          comma = true;
        } else
          comma = false;
        if (!_this.get$_topEnd().$eq(0, B.Radius_0_0)) {
          if (comma)
            t1 += ", ";
          t1 += "topEnd: " + _this.get$_topEnd().toString$0(0);
          comma = true;
        }
        if (!_this.get$_bottomStart().$eq(0, B.Radius_0_0)) {
          if (comma)
            t1 += ", ";
          t1 += "bottomStart: " + _this.get$_bottomStart().toString$0(0);
          comma = true;
        }
        if (!_this.get$_bottomEnd().$eq(0, B.Radius_0_0)) {
          if (comma)
            t1 += ", ";
          t1 += "bottomEnd: " + _this.get$_bottomEnd().toString$0(0);
        }
        t1 += ")";
        logical = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      t1 = visual != null;
      if (t1 && logical != null)
        return A.S(visual) + " + " + logical;
      if (t1)
        return visual;
      if (logical != null)
        return logical;
      return "BorderRadius.zero";
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      return other instanceof A.BorderRadiusGeometry && other.get$_topLeft().$eq(0, _this.get$_topLeft()) && other.get$_topRight().$eq(0, _this.get$_topRight()) && other.get$_bottomLeft().$eq(0, _this.get$_bottomLeft()) && other.get$_bottomRight().$eq(0, _this.get$_bottomRight()) && other.get$_topStart().$eq(0, _this.get$_topStart()) && other.get$_topEnd().$eq(0, _this.get$_topEnd()) && other.get$_bottomStart().$eq(0, _this.get$_bottomStart()) && other.get$_bottomEnd().$eq(0, _this.get$_bottomEnd());
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.get$_topLeft(), _this.get$_topRight(), _this.get$_bottomLeft(), _this.get$_bottomRight(), _this.get$_topStart(), _this.get$_topEnd(), _this.get$_bottomStart(), _this.get$_bottomEnd(), B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    }
  };
  A.BorderRadius.prototype = {
    get$_topLeft() {
      return this.topLeft;
    },
    get$_topRight() {
      return this.topRight;
    },
    get$_bottomLeft() {
      return this.bottomLeft;
    },
    get$_bottomRight() {
      return this.bottomRight;
    },
    get$_topStart() {
      return B.Radius_0_0;
    },
    get$_topEnd() {
      return B.Radius_0_0;
    },
    get$_bottomStart() {
      return B.Radius_0_0;
    },
    get$_bottomEnd() {
      return B.Radius_0_0;
    },
    toRRect$1(rect) {
      var _this = this;
      return A.RRect$fromRectAndCorners(rect, _this.bottomLeft, _this.bottomRight, _this.topLeft, _this.topRight);
    },
    subtract$1(other) {
      if (other instanceof A.BorderRadius)
        return this.$sub(0, other);
      return this.super$BorderRadiusGeometry$subtract(other);
    },
    add$1(_, other) {
      if (other instanceof A.BorderRadius)
        return this.$add(0, other);
      return this.super$BorderRadiusGeometry$add(0, other);
    },
    $sub(_, other) {
      var _this = this;
      return new A.BorderRadius(_this.topLeft.$sub(0, other.topLeft), _this.topRight.$sub(0, other.topRight), _this.bottomLeft.$sub(0, other.bottomLeft), _this.bottomRight.$sub(0, other.bottomRight));
    },
    $add(_, other) {
      var _this = this;
      return new A.BorderRadius(_this.topLeft.$add(0, other.topLeft), _this.topRight.$add(0, other.topRight), _this.bottomLeft.$add(0, other.bottomLeft), _this.bottomRight.$add(0, other.bottomRight));
    },
    $mul(_, other) {
      var _this = this;
      return new A.BorderRadius(_this.topLeft.$mul(0, other), _this.topRight.$mul(0, other), _this.bottomLeft.$mul(0, other), _this.bottomRight.$mul(0, other));
    },
    resolve$1(direction) {
      return this;
    }
  };
  A._MixedBorderRadius.prototype = {
    $mul(_, other) {
      var _this = this;
      return new A._MixedBorderRadius(_this._topLeft.$mul(0, other), _this._topRight.$mul(0, other), _this._bottomLeft.$mul(0, other), _this._bottomRight.$mul(0, other), _this._topStart.$mul(0, other), _this._topEnd.$mul(0, other), _this._bottomStart.$mul(0, other), _this._bottomEnd.$mul(0, other));
    },
    resolve$1(direction) {
      var _this = this;
      switch (direction.index) {
        case 0:
          return new A.BorderRadius(_this._topLeft.$add(0, _this._topEnd), _this._topRight.$add(0, _this._topStart), _this._bottomLeft.$add(0, _this._bottomEnd), _this._bottomRight.$add(0, _this._bottomStart));
        case 1:
          return new A.BorderRadius(_this._topLeft.$add(0, _this._topStart), _this._topRight.$add(0, _this._topEnd), _this._bottomLeft.$add(0, _this._bottomStart), _this._bottomRight.$add(0, _this._bottomEnd));
      }
    },
    get$_topLeft() {
      return this._topLeft;
    },
    get$_topRight() {
      return this._topRight;
    },
    get$_bottomLeft() {
      return this._bottomLeft;
    },
    get$_bottomRight() {
      return this._bottomRight;
    },
    get$_topStart() {
      return this._topStart;
    },
    get$_topEnd() {
      return this._topEnd;
    },
    get$_bottomStart() {
      return this._bottomStart;
    },
    get$_bottomEnd() {
      return this._bottomEnd;
    }
  };
  A.BorderStyle.prototype = {
    toString$0(_) {
      return "BorderStyle." + this._name;
    }
  };
  A.BorderSide.prototype = {
    scale$1(_, t) {
      var t1 = Math.max(0, this.width * t),
        t2 = t <= 0 ? B.BorderStyle_0 : this.style;
      return new A.BorderSide(this.color, t1, t2);
    },
    toPaint$0() {
      switch (this.style.index) {
        case 1:
          var t1 = $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData());
          t1.set$color(0, this.color);
          t1.set$strokeWidth(this.width);
          t1.set$style(0, B.PaintingStyle_1);
          return t1;
        case 0:
          t1 = $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData());
          t1.set$color(0, B.Color_0);
          t1.set$strokeWidth(0);
          t1.set$style(0, B.PaintingStyle_1);
          return t1;
      }
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      return other instanceof A.BorderSide && other.color.$eq(0, _this.color) && other.width === _this.width && other.style === _this.style;
    },
    get$hashCode(_) {
      return A.hashValues(this.color, this.width, this.style, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      return "BorderSide(" + this.color.toString$0(0) + ", " + B.JSNumber_methods.toStringAsFixed$1(this.width, 1) + ", " + this.style.toString$0(0) + ")";
    }
  };
  A.ShapeBorder.prototype = {
    add$2$reversed(_, other, reversed) {
      return null;
    },
    add$1($receiver, other) {
      return this.add$2$reversed($receiver, other, false);
    },
    $add(_, other) {
      var t1 = this.add$1(0, other);
      if (t1 == null)
        t1 = other.add$2$reversed(0, this, true);
      return t1 == null ? new A._CompoundBorder(A._setArrayType([other, this], type$.JSArray_ShapeBorder)) : t1;
    },
    lerpFrom$2(a, t) {
      if (a == null)
        return this.scale$1(0, t);
      return null;
    },
    lerpTo$2(b, t) {
      if (b == null)
        return this.scale$1(0, 1 - t);
      return null;
    },
    toString$0(_) {
      return "ShapeBorder()";
    }
  };
  A.OutlinedBorder.prototype = {};
  A._CompoundBorder.prototype = {
    get$dimensions() {
      return B.JSArray_methods.fold$2(this.borders, B.EdgeInsets_0_0_0_0, new A._CompoundBorder_dimensions_closure());
    },
    add$2$reversed(_, other, reversed) {
      var t2, ours, merged,
        t1 = other instanceof A._CompoundBorder;
      if (!t1) {
        t2 = this.borders;
        ours = reversed ? B.JSArray_methods.get$last(t2) : B.JSArray_methods.get$first(t2);
        merged = ours.add$2$reversed(0, other, reversed);
        if (merged == null)
          merged = other.add$2$reversed(0, ours, !reversed);
        if (merged != null) {
          t1 = A.List_List$of(t2, true, type$.ShapeBorder);
          t1[reversed ? t1.length - 1 : 0] = merged;
          return new A._CompoundBorder(t1);
        }
      }
      t2 = A._setArrayType([], type$.JSArray_ShapeBorder);
      if (reversed)
        B.JSArray_methods.addAll$1(t2, this.borders);
      if (t1)
        B.JSArray_methods.addAll$1(t2, other.borders);
      else
        t2.push(other);
      if (!reversed)
        B.JSArray_methods.addAll$1(t2, this.borders);
      return new A._CompoundBorder(t2);
    },
    add$1($receiver, other) {
      return this.add$2$reversed($receiver, other, false);
    },
    scale$1(_, t) {
      var t1 = this.borders,
        t2 = A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,ShapeBorder>");
      return new A._CompoundBorder(A.List_List$of(new A.MappedListIterable(t1, new A._CompoundBorder_scale_closure(t), t2), true, t2._eval$1("ListIterable.E")));
    },
    lerpFrom$2(a, t) {
      return A._CompoundBorder_lerp(a, this, t);
    },
    lerpTo$2(b, t) {
      return A._CompoundBorder_lerp(this, b, t);
    },
    getInnerPath$2$textDirection(rect, textDirection) {
      var t1, index;
      for (t1 = this.borders, index = 0; index < t1.length - 1; ++index)
        rect = t1[index].get$dimensions().resolve$1(textDirection).deflateRect$1(rect);
      return B.JSArray_methods.get$last(t1).getInnerPath$2$textDirection(rect, textDirection);
    },
    getOuterPath$2$textDirection(rect, textDirection) {
      return B.JSArray_methods.get$first(this.borders).getOuterPath$2$textDirection(rect, textDirection);
    },
    paint$3$textDirection(canvas, rect, textDirection) {
      var t1, t2, _i, border;
      for (t1 = this.borders, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        border = t1[_i];
        border.paint$3$textDirection(canvas, rect, textDirection);
        rect = border.get$dimensions().resolve$1(textDirection).deflateRect$1(rect);
      }
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return other instanceof A._CompoundBorder && A.listEquals0(other.borders, this.borders);
    },
    get$hashCode(_) {
      return A.hashList(this.borders);
    },
    toString$0(_) {
      var t1 = this.borders,
        t2 = A._arrayInstanceType(t1)._eval$1("ReversedListIterable<1>");
      return new A.MappedListIterable(new A.ReversedListIterable(t1, t2), new A._CompoundBorder_toString_closure(), t2._eval$1("MappedListIterable<ListIterable.E,String>")).join$1(0, " + ");
    }
  };
  A._CompoundBorder_dimensions_closure.prototype = {
    call$2(previousValue, border) {
      return previousValue.add$1(0, border.get$dimensions());
    },
    $signature: 161
  };
  A._CompoundBorder_scale_closure.prototype = {
    call$1(border) {
      return border.scale$1(0, this.t);
    },
    $signature: 162
  };
  A._CompoundBorder_toString_closure.prototype = {
    call$1(border) {
      return border.toString$0(0);
    },
    $signature: 163
  };
  A.BoxShape.prototype = {
    toString$0(_) {
      return "BoxShape." + this._name;
    }
  };
  A.BoxBorder.prototype = {
    add$2$reversed(_, other, reversed) {
      return null;
    },
    add$1($receiver, other) {
      return this.add$2$reversed($receiver, other, false);
    },
    getInnerPath$2$textDirection(rect, textDirection) {
      var t1 = A.Path_Path();
      t1.addRect$1(0, this.get$dimensions().resolve$1(textDirection).deflateRect$1(rect));
      return t1;
    },
    getOuterPath$2$textDirection(rect, textDirection) {
      var t1 = A.Path_Path();
      t1.addRect$1(0, rect);
      return t1;
    }
  };
  A.Border.prototype = {
    get$dimensions() {
      var _this = this;
      return new A.EdgeInsets(_this.left.width, _this.top.width, _this.right.width, _this.bottom.width);
    },
    get$_colorIsUniform() {
      var _this = this,
        topColor = _this.top.color;
      return _this.right.color.$eq(0, topColor) && _this.bottom.color.$eq(0, topColor) && _this.left.color.$eq(0, topColor);
    },
    get$_widthIsUniform() {
      var _this = this,
        topWidth = _this.top.width;
      return _this.right.width === topWidth && _this.bottom.width === topWidth && _this.left.width === topWidth;
    },
    get$_styleIsUniform() {
      var _this = this,
        topStyle = _this.top.style;
      return _this.right.style === topStyle && _this.bottom.style === topStyle && _this.left.style === topStyle;
    },
    add$2$reversed(_, other, reversed) {
      var _this = this;
      if (other instanceof A.Border && A.BorderSide_canMerge(_this.top, other.top) && A.BorderSide_canMerge(_this.right, other.right) && A.BorderSide_canMerge(_this.bottom, other.bottom) && A.BorderSide_canMerge(_this.left, other.left))
        return new A.Border(A.BorderSide_merge(_this.top, other.top), A.BorderSide_merge(_this.right, other.right), A.BorderSide_merge(_this.bottom, other.bottom), A.BorderSide_merge(_this.left, other.left));
      return null;
    },
    add$1($receiver, other) {
      return this.add$2$reversed($receiver, other, false);
    },
    scale$1(_, t) {
      var _this = this;
      return new A.Border(_this.top.scale$1(0, t), _this.right.scale$1(0, t), _this.bottom.scale$1(0, t), _this.left.scale$1(0, t));
    },
    lerpFrom$2(a, t) {
      if (a instanceof A.Border)
        return A.Border_lerp(a, this, t);
      return this.super$ShapeBorder$lerpFrom(a, t);
    },
    lerpTo$2(b, t) {
      if (b instanceof A.Border)
        return A.Border_lerp(this, b, t);
      return this.super$ShapeBorder$lerpTo(b, t);
    },
    paint$5$borderRadius$shape$textDirection(canvas, rect, borderRadius, shape, textDirection) {
      var t1, _this = this;
      if (_this.get$_colorIsUniform() && _this.get$_widthIsUniform() && _this.get$_styleIsUniform()) {
        t1 = _this.top;
        switch (t1.style.index) {
          case 0:
            return;
          case 1:
            switch (shape.index) {
              case 1:
                A.BoxBorder__paintUniformBorderWithCircle(canvas, rect, t1);
                break;
              case 0:
                if (borderRadius != null) {
                  A.BoxBorder__paintUniformBorderWithRadius(canvas, rect, t1, borderRadius);
                  return;
                }
                A.BoxBorder__paintUniformBorderWithRectangle(canvas, rect, t1);
                break;
            }
            return;
        }
      }
      A.paintBorder(canvas, rect, _this.bottom, _this.left, _this.right, _this.top);
    },
    paint$3$textDirection(canvas, rect, textDirection) {
      return this.paint$5$borderRadius$shape$textDirection(canvas, rect, null, B.BoxShape_0, textDirection);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      return other instanceof A.Border && other.top.$eq(0, _this.top) && other.right.$eq(0, _this.right) && other.bottom.$eq(0, _this.bottom) && other.left.$eq(0, _this.left);
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.top, _this.right, _this.bottom, _this.left, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      var t1, t2, _this = this;
      if (_this.get$_colorIsUniform() && _this.get$_widthIsUniform() && _this.get$_styleIsUniform())
        return "Border.all(" + _this.top.toString$0(0) + ")";
      t1 = A._setArrayType([], type$.JSArray_String);
      t2 = _this.top;
      if (!t2.$eq(0, B.BorderSide_0CF))
        t1.push("top: " + t2.toString$0(0));
      t2 = _this.right;
      if (!t2.$eq(0, B.BorderSide_0CF))
        t1.push("right: " + t2.toString$0(0));
      t2 = _this.bottom;
      if (!t2.$eq(0, B.BorderSide_0CF))
        t1.push("bottom: " + t2.toString$0(0));
      t2 = _this.left;
      if (!t2.$eq(0, B.BorderSide_0CF))
        t1.push("left: " + t2.toString$0(0));
      return "Border(" + B.JSArray_methods.join$1(t1, ", ") + ")";
    },
    get$top(receiver) {
      return this.top;
    }
  };
  A.BorderDirectional.prototype = {
    get$dimensions() {
      var _this = this;
      return new A.EdgeInsetsDirectional(_this.start.width, _this.top.width, _this.end.width, _this.bottom.width);
    },
    get$isUniform() {
      var topWidth, topStyle, _this = this,
        t1 = _this.top,
        topColor = t1.color,
        t2 = _this.start;
      if (!t2.color.$eq(0, topColor) || !_this.end.color.$eq(0, topColor) || !_this.bottom.color.$eq(0, topColor))
        return false;
      topWidth = t1.width;
      if (t2.width !== topWidth || _this.end.width !== topWidth || _this.bottom.width !== topWidth)
        return false;
      topStyle = t1.style;
      if (t2.style !== topStyle || _this.end.style !== topStyle || _this.bottom.style !== topStyle)
        return false;
      return true;
    },
    add$2$reversed(_, other, reversed) {
      var t1, t2, t3, _this = this, _null = null;
      if (other instanceof A.BorderDirectional) {
        t1 = _this.top;
        t2 = other.top;
        if (A.BorderSide_canMerge(t1, t2) && A.BorderSide_canMerge(_this.start, other.start) && A.BorderSide_canMerge(_this.end, other.end) && A.BorderSide_canMerge(_this.bottom, other.bottom))
          return new A.BorderDirectional(A.BorderSide_merge(t1, t2), A.BorderSide_merge(_this.start, other.start), A.BorderSide_merge(_this.end, other.end), A.BorderSide_merge(_this.bottom, other.bottom));
        return _null;
      }
      if (other instanceof A.Border) {
        t1 = other.top;
        t2 = _this.top;
        if (!A.BorderSide_canMerge(t1, t2) || !A.BorderSide_canMerge(other.bottom, _this.bottom))
          return _null;
        t3 = _this.start;
        if (!t3.$eq(0, B.BorderSide_0CF) || !_this.end.$eq(0, B.BorderSide_0CF)) {
          if (!other.left.$eq(0, B.BorderSide_0CF) || !other.right.$eq(0, B.BorderSide_0CF))
            return _null;
          return new A.BorderDirectional(A.BorderSide_merge(t1, t2), t3, _this.end, A.BorderSide_merge(other.bottom, _this.bottom));
        }
        return new A.Border(A.BorderSide_merge(t1, t2), other.right, A.BorderSide_merge(other.bottom, _this.bottom), other.left);
      }
      return _null;
    },
    add$1($receiver, other) {
      return this.add$2$reversed($receiver, other, false);
    },
    scale$1(_, t) {
      var _this = this;
      return new A.BorderDirectional(_this.top.scale$1(0, t), _this.start.scale$1(0, t), _this.end.scale$1(0, t), _this.bottom.scale$1(0, t));
    },
    lerpFrom$2(a, t) {
      if (a instanceof A.BorderDirectional)
        return A.BorderDirectional_lerp(a, this, t);
      return this.super$ShapeBorder$lerpFrom(a, t);
    },
    lerpTo$2(b, t) {
      if (b instanceof A.BorderDirectional)
        return A.BorderDirectional_lerp(this, b, t);
      return this.super$ShapeBorder$lerpTo(b, t);
    },
    paint$5$borderRadius$shape$textDirection(canvas, rect, borderRadius, shape, textDirection) {
      var t1, left, right, _this = this;
      if (_this.get$isUniform()) {
        t1 = _this.top;
        switch (t1.style.index) {
          case 0:
            return;
          case 1:
            switch (shape.index) {
              case 1:
                A.BoxBorder__paintUniformBorderWithCircle(canvas, rect, t1);
                break;
              case 0:
                if (borderRadius != null) {
                  A.BoxBorder__paintUniformBorderWithRadius(canvas, rect, t1, borderRadius);
                  return;
                }
                A.BoxBorder__paintUniformBorderWithRectangle(canvas, rect, t1);
                break;
            }
            return;
        }
      }
      switch (textDirection.index) {
        case 0:
          left = _this.end;
          right = _this.start;
          break;
        case 1:
          left = _this.start;
          right = _this.end;
          break;
        default:
          left = null;
          right = null;
      }
      A.paintBorder(canvas, rect, _this.bottom, left, right, _this.top);
    },
    paint$3$textDirection(canvas, rect, textDirection) {
      return this.paint$5$borderRadius$shape$textDirection(canvas, rect, null, B.BoxShape_0, textDirection);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      return other instanceof A.BorderDirectional && other.top.$eq(0, _this.top) && other.start.$eq(0, _this.start) && other.end.$eq(0, _this.end) && other.bottom.$eq(0, _this.bottom);
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.top, _this.start, _this.end, _this.bottom, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      var _this = this,
        t1 = A._setArrayType([], type$.JSArray_String),
        t2 = _this.top;
      if (!t2.$eq(0, B.BorderSide_0CF))
        t1.push("top: " + t2.toString$0(0));
      t2 = _this.start;
      if (!t2.$eq(0, B.BorderSide_0CF))
        t1.push("start: " + t2.toString$0(0));
      t2 = _this.end;
      if (!t2.$eq(0, B.BorderSide_0CF))
        t1.push("end: " + t2.toString$0(0));
      t2 = _this.bottom;
      if (!t2.$eq(0, B.BorderSide_0CF))
        t1.push("bottom: " + t2.toString$0(0));
      return "BorderDirectional(" + B.JSArray_methods.join$1(t1, ", ") + ")";
    },
    get$top(receiver) {
      return this.top;
    }
  };
  A.BoxDecoration.prototype = {
    get$padding(_) {
      var t1 = this.border;
      return t1 == null ? null : t1.get$dimensions();
    },
    getClipPath$2(rect, textDirection) {
      var square, t1, t2;
      switch (this.shape.index) {
        case 1:
          square = A.Rect$fromCircle(rect.get$center(), rect.get$shortestSide() / 2);
          t1 = A.Path_Path();
          t1.addOval$1(0, square);
          return t1;
        case 0:
          t1 = this.borderRadius;
          if (t1 != null) {
            t2 = A.Path_Path();
            t2.addRRect$1(0, t1.resolve$1(textDirection).toRRect$1(rect));
            return t2;
          }
          t1 = A.Path_Path();
          t1.addRect$1(0, rect);
          return t1;
      }
    },
    scale$1(_, factor) {
      var _this = this, _null = null,
        t1 = A.Color_lerp(_null, _this.color, factor),
        t2 = A.BoxBorder_lerp(_null, _this.border, factor),
        t3 = A.BorderRadiusGeometry_lerp(_null, _this.borderRadius, factor),
        t4 = A.BoxShadow_lerpList(_null, _this.boxShadow, factor);
      return new A.BoxDecoration(t1, _this.image, t2, t3, t4, _null, _this.shape);
    },
    get$isComplex() {
      return this.boxShadow != null;
    },
    lerpFrom$2(a, t) {
      if (a == null)
        return this.scale$1(0, t);
      if (a instanceof A.BoxDecoration)
        return A.BoxDecoration_lerp(a, this, t);
      return this.super$Decoration$lerpFrom(a, t);
    },
    lerpTo$2(b, t) {
      if (b == null)
        return this.scale$1(0, 1 - t);
      if (b instanceof A.BoxDecoration)
        return A.BoxDecoration_lerp(this, b, t);
      return this.super$Decoration$lerpTo(b, t);
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      if (other instanceof A.BoxDecoration)
        if (J.$eq$(other.color, _this.color))
          if (J.$eq$(other.image, _this.image))
            if (J.$eq$(other.border, _this.border))
              if (J.$eq$(other.borderRadius, _this.borderRadius))
                if (A.listEquals0(other.boxShadow, _this.boxShadow))
                  t1 = other.shape === _this.shape;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.color, _this.image, _this.border, _this.borderRadius, A.hashList(_this.boxShadow), _this.gradient, _this.shape, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    hitTest$3$textDirection(size, position, textDirection) {
      var t1;
      switch (this.shape.index) {
        case 0:
          t1 = this.borderRadius;
          if (t1 != null)
            return t1.resolve$1(textDirection).toRRect$1(new A.Rect(0, 0, 0 + size._dx, 0 + size._dy)).contains$1(0, position);
          return true;
        case 1:
          return position.$sub(0, size.center$1(B.Offset_0_0)).get$distance() <= Math.min(size._dx, size._dy) / 2;
      }
    },
    createBoxPainter$1(onChanged) {
      return new A._BoxDecorationPainter(this, onChanged);
    }
  };
  A._BoxDecorationPainter.prototype = {
    _paintBox$4(canvas, rect, paint, textDirection) {
      var t1 = this._box_decoration$_decoration;
      switch (t1.shape.index) {
        case 1:
          canvas.drawCircle$3(0, rect.get$center(), rect.get$shortestSide() / 2, paint);
          break;
        case 0:
          t1 = t1.borderRadius;
          if (t1 == null)
            canvas.drawRect$2(0, rect, paint);
          else
            canvas.drawRRect$2(0, t1.resolve$1(textDirection).toRRect$1(rect), paint);
          break;
      }
    },
    _paintShadows$3(canvas, rect, textDirection) {
      var t2, _i, boxShadow, result, t3, t4,
        t1 = this._box_decoration$_decoration.boxShadow;
      if (t1 == null)
        return;
      for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        boxShadow = t1[_i];
        result = $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData());
        result.set$color(0, boxShadow.color);
        t3 = boxShadow.blurStyle;
        t4 = boxShadow.blurRadius;
        result.set$maskFilter(new A.MaskFilter(t3, t4 > 0 ? t4 * 0.57735 + 0.5 : 0));
        t3 = rect.shift$1(boxShadow.offset);
        t4 = boxShadow.spreadRadius;
        this._paintBox$4(canvas, new A.Rect(t3.left - t4, t3.top - t4, t3.right + t4, t3.bottom + t4), result, textDirection);
      }
    },
    _paintBackgroundImage$3(canvas, rect, configuration) {
      var square, clipPath, _this = this,
        t1 = _this._box_decoration$_decoration,
        t2 = t1.image;
      if (t2 == null)
        return;
      if (_this._box_decoration$_imagePainter == null)
        _this._box_decoration$_imagePainter = new A.DecorationImagePainter(t2, _this.onChanged);
      switch (t1.shape.index) {
        case 1:
          square = A.Rect$fromCircle(rect.get$center(), rect.get$shortestSide() / 2);
          clipPath = A.Path_Path();
          clipPath.addOval$1(0, square);
          break;
        case 0:
          t1 = t1.borderRadius;
          if (t1 != null) {
            clipPath = A.Path_Path();
            clipPath.addRRect$1(0, t1.resolve$1(configuration.textDirection).toRRect$1(rect));
          } else
            clipPath = null;
          break;
        default:
          clipPath = null;
      }
      _this._box_decoration$_imagePainter.paint$4(canvas, rect, clipPath, configuration);
    },
    dispose$0(_) {
      var t1 = this._box_decoration$_imagePainter;
      if (t1 != null)
        t1.dispose$0(0);
      this.super$BoxPainter$dispose(0);
    },
    paint$3(canvas, offset, configuration) {
      var t4, t5, paint, _this = this,
        t1 = configuration.size,
        t2 = offset._dx,
        t3 = offset._dy,
        rect = new A.Rect(t2, t3, t2 + t1._dx, t3 + t1._dy),
        textDirection = configuration.textDirection;
      _this._paintShadows$3(canvas, rect, textDirection);
      t1 = _this._box_decoration$_decoration;
      t2 = t1.color;
      t3 = t2 == null;
      if (!t3 || false) {
        t4 = _this._cachedBackgroundPaint;
        if (t4 != null)
          t5 = false;
        else
          t5 = true;
        if (t5) {
          paint = $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData());
          if (!t3)
            paint.set$color(0, t2);
          _this._cachedBackgroundPaint = paint;
          t2 = paint;
        } else
          t2 = t4;
        t2.toString;
        _this._paintBox$4(canvas, rect, t2, textDirection);
      }
      _this._paintBackgroundImage$3(canvas, rect, configuration);
      t2 = t1.border;
      if (t2 != null) {
        t3 = t1.borderRadius;
        t3 = t3 == null ? null : t3.resolve$1(textDirection);
        t2.paint$5$borderRadius$shape$textDirection(canvas, rect, t3, t1.shape, textDirection);
      }
    },
    toString$0(_) {
      return "BoxPainter for " + this._box_decoration$_decoration.toString$0(0);
    }
  };
  A.BoxFit.prototype = {
    toString$0(_) {
      return "BoxFit." + this._name;
    }
  };
  A.BoxShadow.prototype = {
    toPaint$0() {
      var result = $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData());
      result.set$color(0, this.color);
      result.set$maskFilter(new A.MaskFilter(this.blurStyle, A.Shadow_convertRadiusToSigma(this.blurRadius)));
      return result;
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      if (other instanceof A.BoxShadow)
        if (other.color.$eq(0, _this.color))
          if (other.offset.$eq(0, _this.offset))
            other.blurRadius === _this.blurRadius;
      return false;
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.color, _this.offset, _this.blurRadius, _this.spreadRadius, _this.blurStyle, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      var _this = this;
      return "BoxShadow(" + _this.color.toString$0(0) + ", " + _this.offset.toString$0(0) + ", " + A.debugFormatDouble(_this.blurRadius) + ", " + A.debugFormatDouble(_this.spreadRadius) + "), " + A.S(_this.blurStyle);
    }
  };
  A.CircleBorder.prototype = {
    get$dimensions() {
      var t1 = this.side.width;
      return new A.EdgeInsets(t1, t1, t1, t1);
    },
    scale$1(_, t) {
      return new A.CircleBorder(this.side.scale$1(0, t));
    },
    lerpFrom$2(a, t) {
      if (a instanceof A.CircleBorder)
        return new A.CircleBorder(A.BorderSide_lerp(a.side, this.side, t));
      return this.super$ShapeBorder$lerpFrom(a, t);
    },
    lerpTo$2(b, t) {
      if (b instanceof A.CircleBorder)
        return new A.CircleBorder(A.BorderSide_lerp(this.side, b.side, t));
      return this.super$ShapeBorder$lerpTo(b, t);
    },
    getInnerPath$2$textDirection(rect, textDirection) {
      var t1 = A.Path_Path();
      t1.addOval$1(0, A.Rect$fromCircle(rect.get$center(), Math.max(0, rect.get$shortestSide() / 2 - this.side.width)));
      return t1;
    },
    getOuterPath$2$textDirection(rect, textDirection) {
      var t1 = A.Path_Path();
      t1.addOval$1(0, A.Rect$fromCircle(rect.get$center(), rect.get$shortestSide() / 2));
      return t1;
    },
    paint$3$textDirection(canvas, rect, textDirection) {
      var t1 = this.side;
      switch (t1.style.index) {
        case 0:
          break;
        case 1:
          canvas.drawCircle$3(0, rect.get$center(), (rect.get$shortestSide() - t1.width) / 2, t1.toPaint$0());
          break;
      }
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return other instanceof A.CircleBorder && other.side.$eq(0, this.side);
    },
    get$hashCode(_) {
      var t1 = this.side;
      return A.hashValues(t1.color, t1.width, t1.style, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      return "CircleBorder(" + this.side.toString$0(0) + ")";
    }
  };
  A.ClipContext.prototype = {
    _clipAndPaint$4(canvasClipCall, clipBehavior, bounds, painter) {
      var t1, _this = this;
      _this.get$canvas(_this).save$0(0);
      switch (clipBehavior.index) {
        case 0:
          break;
        case 1:
          canvasClipCall.call$1(false);
          break;
        case 2:
          canvasClipCall.call$1(true);
          break;
        case 3:
          canvasClipCall.call$1(true);
          t1 = _this.get$canvas(_this);
          t1.saveLayer$2(0, bounds, $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData()));
          break;
      }
      painter.call$0();
      if (clipBehavior === B.Clip_3)
        _this.get$canvas(_this).restore$0(0);
      _this.get$canvas(_this).restore$0(0);
    },
    clipPathAndPaint$4(path, clipBehavior, bounds, painter) {
      this._clipAndPaint$4(new A.ClipContext_clipPathAndPaint_closure(this, path), clipBehavior, bounds, painter);
    },
    clipRectAndPaint$4(rect, clipBehavior, bounds, painter) {
      this._clipAndPaint$4(new A.ClipContext_clipRectAndPaint_closure(this, rect), clipBehavior, bounds, painter);
    }
  };
  A.ClipContext_clipPathAndPaint_closure.prototype = {
    call$1(doAntiAlias) {
      var t1 = this.$this;
      return t1.get$canvas(t1).clipPath$2$doAntiAlias(0, this.path, doAntiAlias);
    },
    $signature: 23
  };
  A.ClipContext_clipRectAndPaint_closure.prototype = {
    call$1(doAntiAlias) {
      var t1 = this.$this;
      return t1.get$canvas(t1).clipRect$2$doAntiAlias(0, this.rect, doAntiAlias);
    },
    $signature: 23
  };
  A.ColorSwatch.prototype = {
    $index(_, index) {
      return this._swatch.$index(0, index);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      return _this.super$Color$$eq(0, other) && A._instanceType(_this)._eval$1("ColorSwatch<ColorSwatch.T>")._is(other) && A.mapEquals(other._swatch, _this._swatch);
    },
    get$hashCode(_) {
      return A.hashValues(A.getRuntimeType(this), this.value, this._swatch, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      return "ColorSwatch(primary value: " + this.super$Color$toString(0) + ")";
    }
  };
  A.Decoration.prototype = {
    toStringShort$0() {
      return "Decoration";
    },
    get$padding(_) {
      return B.EdgeInsets_0_0_0_0;
    },
    get$isComplex() {
      return false;
    },
    lerpFrom$2(a, t) {
      return null;
    },
    lerpTo$2(b, t) {
      return null;
    },
    hitTest$3$textDirection(size, position, textDirection) {
      return true;
    },
    getClipPath$2(rect, textDirection) {
      throw A.wrapException(A.UnsupportedError$("This Decoration subclass does not expect to be used for clipping."));
    }
  };
  A.BoxPainter.prototype = {
    dispose$0(_) {
    }
  };
  A._Decoration_Object_Diagnosticable.prototype = {};
  A.DecorationImagePainter.prototype = {
    paint$4(canvas, rect, clipPath, configuration) {
      var t1 = this._details,
        newImageStream = t1.image.resolve$1(configuration);
      newImageStream.get$key(newImageStream);
      this._imageStream = newImageStream;
      newImageStream.addListener$1(0, new A.ImageStreamListener(this.get$_handleImage(), t1.onError));
      return;
    },
    _handleImage$2(value, synchronousCall) {
      this._image = value;
      if (!synchronousCall)
        this._onChanged.call$0();
    },
    dispose$0(_) {
      this._image = null;
    },
    toString$0(_) {
      return "DecorationImagePainter(stream: " + A.S(this._imageStream) + ", image: " + A.S(this._image) + ") for " + this._details.toString$0(0);
    }
  };
  A.EdgeInsetsGeometry.prototype = {
    add$1(_, other) {
      var _this = this;
      return new A._MixedEdgeInsets(_this.get$_left(_this) + other.get$_left(other), _this.get$_right(_this) + other.get$_right(other), _this.get$_edge_insets$_start(_this) + other.get$_edge_insets$_start(other), _this.get$_edge_insets$_end() + other.get$_edge_insets$_end(), _this.get$_top(_this) + other.get$_top(other), _this.get$_bottom(_this) + other.get$_bottom(other));
    },
    toString$0(_) {
      var _this = this;
      if (_this.get$_edge_insets$_start(_this) === 0 && _this.get$_edge_insets$_end() === 0) {
        if (_this.get$_left(_this) === 0 && _this.get$_right(_this) === 0 && _this.get$_top(_this) === 0 && _this.get$_bottom(_this) === 0)
          return "EdgeInsets.zero";
        if (_this.get$_left(_this) === _this.get$_right(_this) && _this.get$_right(_this) === _this.get$_top(_this) && _this.get$_top(_this) === _this.get$_bottom(_this))
          return "EdgeInsets.all(" + B.JSNumber_methods.toStringAsFixed$1(_this.get$_left(_this), 1) + ")";
        return "EdgeInsets(" + B.JSNumber_methods.toStringAsFixed$1(_this.get$_left(_this), 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(_this.get$_top(_this), 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(_this.get$_right(_this), 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(_this.get$_bottom(_this), 1) + ")";
      }
      if (_this.get$_left(_this) === 0 && _this.get$_right(_this) === 0)
        return "EdgeInsetsDirectional(" + B.JSNumber_methods.toStringAsFixed$1(_this.get$_edge_insets$_start(_this), 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(_this.get$_top(_this), 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(_this.get$_edge_insets$_end(), 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(_this.get$_bottom(_this), 1) + ")";
      return "EdgeInsets(" + B.JSNumber_methods.toStringAsFixed$1(_this.get$_left(_this), 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(_this.get$_top(_this), 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(_this.get$_right(_this), 1) + ", " + B.JSNumber_methods.toStringAsFixed$1(_this.get$_bottom(_this), 1) + ") + EdgeInsetsDirectional(" + B.JSNumber_methods.toStringAsFixed$1(_this.get$_edge_insets$_start(_this), 1) + ", 0.0, " + B.JSNumber_methods.toStringAsFixed$1(_this.get$_edge_insets$_end(), 1) + ", 0.0)";
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      return other instanceof A.EdgeInsetsGeometry && other.get$_left(other) === _this.get$_left(_this) && other.get$_right(other) === _this.get$_right(_this) && other.get$_edge_insets$_start(other) === _this.get$_edge_insets$_start(_this) && other.get$_edge_insets$_end() === _this.get$_edge_insets$_end() && other.get$_top(other) === _this.get$_top(_this) && other.get$_bottom(other) === _this.get$_bottom(_this);
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.get$_left(_this), _this.get$_right(_this), _this.get$_edge_insets$_start(_this), _this.get$_edge_insets$_end(), _this.get$_top(_this), _this.get$_bottom(_this), B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    }
  };
  A.EdgeInsets.prototype = {
    get$_left(_) {
      return this.left;
    },
    get$_top(_) {
      return this.top;
    },
    get$_right(_) {
      return this.right;
    },
    get$_bottom(_) {
      return this.bottom;
    },
    get$_edge_insets$_start(_) {
      return 0;
    },
    get$_edge_insets$_end() {
      return 0;
    },
    deflateRect$1(rect) {
      var _this = this;
      return new A.Rect(rect.left + _this.left, rect.top + _this.top, rect.right - _this.right, rect.bottom - _this.bottom);
    },
    add$1(_, other) {
      if (other instanceof A.EdgeInsets)
        return this.$add(0, other);
      return this.super$EdgeInsetsGeometry$add(0, other);
    },
    $sub(_, other) {
      var _this = this;
      return new A.EdgeInsets(_this.left - other.left, _this.top - other.top, _this.right - other.right, _this.bottom - other.bottom);
    },
    $add(_, other) {
      var _this = this;
      return new A.EdgeInsets(_this.left + other.left, _this.top + other.top, _this.right + other.right, _this.bottom + other.bottom);
    },
    $mul(_, other) {
      var _this = this;
      return new A.EdgeInsets(_this.left * other, _this.top * other, _this.right * other, _this.bottom * other);
    },
    resolve$1(direction) {
      return this;
    },
    copyWith$4$bottom$left$right$top(bottom, left, right, $top) {
      var _this = this,
        t1 = left == null ? _this.left : left,
        t2 = $top == null ? _this.top : $top,
        t3 = right == null ? _this.right : right;
      return new A.EdgeInsets(t1, t2, t3, bottom == null ? _this.bottom : bottom);
    }
  };
  A.EdgeInsetsDirectional.prototype = {
    get$_edge_insets$_start(_) {
      return this.start;
    },
    get$_top(_) {
      return this.top;
    },
    get$_edge_insets$_end() {
      return this.end;
    },
    get$_bottom(_) {
      return this.bottom;
    },
    get$_left(_) {
      return 0;
    },
    get$_right(_) {
      return 0;
    },
    add$1(_, other) {
      if (other instanceof A.EdgeInsetsDirectional)
        return this.$add(0, other);
      return this.super$EdgeInsetsGeometry$add(0, other);
    },
    $sub(_, other) {
      var _this = this;
      return new A.EdgeInsetsDirectional(_this.start - other.start, _this.top - other.top, _this.end - other.end, _this.bottom - other.bottom);
    },
    $add(_, other) {
      var _this = this;
      return new A.EdgeInsetsDirectional(_this.start + other.start, _this.top + other.top, _this.end + other.end, _this.bottom + other.bottom);
    },
    $mul(_, other) {
      var _this = this;
      return new A.EdgeInsetsDirectional(_this.start * other, _this.top * other, _this.end * other, _this.bottom * other);
    },
    resolve$1(direction) {
      var _this = this;
      switch (direction.index) {
        case 0:
          return new A.EdgeInsets(_this.end, _this.top, _this.start, _this.bottom);
        case 1:
          return new A.EdgeInsets(_this.start, _this.top, _this.end, _this.bottom);
      }
    }
  };
  A._MixedEdgeInsets.prototype = {
    $mul(_, other) {
      var _this = this;
      return new A._MixedEdgeInsets(_this._left * other, _this._right * other, _this._edge_insets$_start * other, _this._edge_insets$_end * other, _this._top * other, _this._bottom * other);
    },
    resolve$1(direction) {
      var _this = this;
      switch (direction.index) {
        case 0:
          return new A.EdgeInsets(_this._edge_insets$_end + _this._left, _this._top, _this._edge_insets$_start + _this._right, _this._bottom);
        case 1:
          return new A.EdgeInsets(_this._edge_insets$_start + _this._left, _this._top, _this._edge_insets$_end + _this._right, _this._bottom);
      }
    },
    get$_left(receiver) {
      return this._left;
    },
    get$_right(receiver) {
      return this._right;
    },
    get$_edge_insets$_start(receiver) {
      return this._edge_insets$_start;
    },
    get$_edge_insets$_end() {
      return this._edge_insets$_end;
    },
    get$_top(receiver) {
      return this._top;
    },
    get$_bottom(receiver) {
      return this._bottom;
    }
  };
  A.ImageCache.prototype = {
    clear$0(_) {
      var t3, t4, t5, _this = this,
        t1 = _this._pendingImages,
        t2 = _this._image_cache$_cache;
      A.Timeline_instantSync("ImageCache.clear", A.LinkedHashMap_LinkedHashMap$_literal(["pendingImages", t1._length, "keepAliveImages", t2._length, "liveImages", _this._liveImages._length, "currentSizeInBytes", _this._currentSizeBytes], type$.String, type$.dynamic));
      for (t3 = t2.get$values(t2), t3 = new A.MappedIterator(J.get$iterator$ax(t3.__internal$_iterable), t3._f), t4 = A._instanceType(t3)._rest[1]; t3.moveNext$0();) {
        t5 = t3.__internal$_current;
        (t5 == null ? t4._as(t5) : t5).dispose$0(0);
      }
      t2.clear$0(0);
      t1.clear$0(0);
      _this._currentSizeBytes = 0;
    }
  };
  A.ImageConfiguration.prototype = {
    copyWith$1$size(size) {
      var _this = this;
      return new A.ImageConfiguration(_this.bundle, _this.devicePixelRatio, _this.locale, _this.textDirection, size, _this.platform);
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      if (other instanceof A.ImageConfiguration)
        if (other.bundle == _this.bundle)
          if (other.devicePixelRatio == _this.devicePixelRatio)
            t1 = other.textDirection == _this.textDirection && J.$eq$(other.size, _this.size) && other.platform == _this.platform;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.bundle, _this.devicePixelRatio, _this.locale, _this.size, _this.platform, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      var hasArguments, _this = this,
        t1 = "" + "ImageConfiguration(",
        t2 = _this.bundle;
      if (t2 != null) {
        t1 += "bundle: " + t2.toString$0(0);
        hasArguments = true;
      } else
        hasArguments = false;
      t2 = _this.devicePixelRatio;
      if (t2 != null) {
        if (hasArguments)
          t1 += ", ";
        t2 = t1 + ("devicePixelRatio: " + B.JSNumber_methods.toStringAsFixed$1(t2, 1));
        t1 = t2;
        hasArguments = true;
      }
      t2 = _this.textDirection;
      if (t2 != null) {
        if (hasArguments)
          t1 += ", ";
        t2 = t1 + ("textDirection: " + t2.toString$0(0));
        t1 = t2;
        hasArguments = true;
      }
      t2 = _this.size;
      if (t2 != null) {
        if (hasArguments)
          t1 += ", ";
        t2 = t1 + ("size: " + t2.toString$0(0));
        t1 = t2;
        hasArguments = true;
      }
      t2 = _this.platform;
      if (t2 != null) {
        if (hasArguments)
          t1 += ", ";
        t2 = t1 + ("platform: " + t2._name);
        t1 = t2;
      }
      t1 += ")";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.ImageStreamListener.prototype = {
    get$hashCode(_) {
      return A.hashValues(this.onImage, null, this.onError, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      if (other instanceof A.ImageStreamListener)
        if (J.$eq$(other.onImage, this.onImage))
          t1 = true;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    }
  };
  A.Accumulator.prototype = {};
  A.InlineSpanSemanticsInformation.prototype = {
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (other instanceof A.InlineSpanSemanticsInformation)
        if (other.text === this.text)
          if (other.semanticsLabel == this.semanticsLabel)
            t1 = A.listEquals0(other.stringAttributes, this.stringAttributes);
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      return A.hashValues(this.text, this.semanticsLabel, this.recognizer, false, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      return "InlineSpanSemanticsInformation{text: " + this.text + ", semanticsLabel: " + A.S(this.semanticsLabel) + ", recognizer: " + A.S(this.recognizer) + "}";
    }
  };
  A.InlineSpan.prototype = {
    getSpanForPosition$1(position) {
      var t1 = {};
      t1.result = null;
      this.visitChildren$1(new A.InlineSpan_getSpanForPosition_closure(t1, position, new A.Accumulator()));
      return t1.result;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return other instanceof A.InlineSpan && J.$eq$(other.style, this.style);
    },
    get$hashCode(_) {
      return J.get$hashCode$(this.style);
    }
  };
  A.InlineSpan_getSpanForPosition_closure.prototype = {
    call$1(span) {
      var result = span.getSpanForPositionVisitor$2(this.position, this.offset);
      this._box_0.result = result;
      return result == null;
    },
    $signature: 37
  };
  A.RoundedRectangleBorder.prototype = {
    get$dimensions() {
      var t1 = this.side.width;
      return new A.EdgeInsets(t1, t1, t1, t1);
    },
    scale$1(_, t) {
      var t1 = this.side.scale$1(0, t);
      return new A.RoundedRectangleBorder(this.borderRadius.$mul(0, t), t1);
    },
    lerpFrom$2(a, t) {
      var t1, t2, _this = this;
      if (a instanceof A.RoundedRectangleBorder) {
        t1 = A.BorderSide_lerp(a.side, _this.side, t);
        t2 = A.BorderRadiusGeometry_lerp(a.borderRadius, _this.borderRadius, t);
        t2.toString;
        return new A.RoundedRectangleBorder(t2, t1);
      }
      if (a instanceof A.CircleBorder)
        return new A._RoundedRectangleToCircleBorder(_this.borderRadius, 1 - t, A.BorderSide_lerp(a.side, _this.side, t));
      return _this.super$ShapeBorder$lerpFrom(a, t);
    },
    lerpTo$2(b, t) {
      var t1, t2, _this = this;
      if (b instanceof A.RoundedRectangleBorder) {
        t1 = A.BorderSide_lerp(_this.side, b.side, t);
        t2 = A.BorderRadiusGeometry_lerp(_this.borderRadius, b.borderRadius, t);
        t2.toString;
        return new A.RoundedRectangleBorder(t2, t1);
      }
      if (b instanceof A.CircleBorder)
        return new A._RoundedRectangleToCircleBorder(_this.borderRadius, t, A.BorderSide_lerp(_this.side, b.side, t));
      return _this.super$ShapeBorder$lerpTo(b, t);
    },
    getInnerPath$2$textDirection(rect, textDirection) {
      var t1 = A.Path_Path();
      t1.addRRect$1(0, this.borderRadius.resolve$1(textDirection).toRRect$1(rect).inflate$1(-this.side.width));
      return t1;
    },
    getOuterPath$2$textDirection(rect, textDirection) {
      var t1 = A.Path_Path();
      t1.addRRect$1(0, this.borderRadius.resolve$1(textDirection).toRRect$1(rect));
      return t1;
    },
    paint$3$textDirection(canvas, rect, textDirection) {
      var width, t2, outer, inner, paint,
        t1 = this.side;
      switch (t1.style.index) {
        case 0:
          break;
        case 1:
          width = t1.width;
          t2 = this.borderRadius;
          if (width === 0)
            canvas.drawRRect$2(0, t2.resolve$1(textDirection).toRRect$1(rect), t1.toPaint$0());
          else {
            outer = t2.resolve$1(textDirection).toRRect$1(rect);
            inner = outer.inflate$1(-width);
            paint = $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData());
            paint.set$color(0, t1.color);
            canvas.drawDRRect$3(0, outer, inner, paint);
          }
          break;
      }
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return other instanceof A.RoundedRectangleBorder && other.side.$eq(0, this.side) && other.borderRadius.$eq(0, this.borderRadius);
    },
    get$hashCode(_) {
      return A.hashValues(this.side, this.borderRadius, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      return "RoundedRectangleBorder(" + this.side.toString$0(0) + ", " + this.borderRadius.toString$0(0) + ")";
    }
  };
  A._RoundedRectangleToCircleBorder.prototype = {
    get$dimensions() {
      var t1 = this.side.width;
      return new A.EdgeInsets(t1, t1, t1, t1);
    },
    scale$1(_, t) {
      var t1 = this.side.scale$1(0, t);
      return new A._RoundedRectangleToCircleBorder(this.borderRadius.$mul(0, t), t, t1);
    },
    lerpFrom$2(a, t) {
      var t1, t2, t3, _this = this;
      if (a instanceof A.RoundedRectangleBorder) {
        t1 = A.BorderSide_lerp(a.side, _this.side, t);
        t2 = A.BorderRadiusGeometry_lerp(a.borderRadius, _this.borderRadius, t);
        t2.toString;
        return new A._RoundedRectangleToCircleBorder(t2, _this.circleness * t, t1);
      }
      if (a instanceof A.CircleBorder) {
        t1 = _this.circleness;
        return new A._RoundedRectangleToCircleBorder(_this.borderRadius, t1 + (1 - t1) * (1 - t), A.BorderSide_lerp(a.side, _this.side, t));
      }
      if (a instanceof A._RoundedRectangleToCircleBorder) {
        t1 = A.BorderSide_lerp(a.side, _this.side, t);
        t2 = A.BorderRadiusGeometry_lerp(a.borderRadius, _this.borderRadius, t);
        t2.toString;
        t3 = A.lerpDouble(a.circleness, _this.circleness, t);
        t3.toString;
        return new A._RoundedRectangleToCircleBorder(t2, t3, t1);
      }
      return _this.super$ShapeBorder$lerpFrom(a, t);
    },
    lerpTo$2(b, t) {
      var t1, t2, t3, _this = this;
      if (b instanceof A.RoundedRectangleBorder) {
        t1 = A.BorderSide_lerp(_this.side, b.side, t);
        t2 = A.BorderRadiusGeometry_lerp(_this.borderRadius, b.borderRadius, t);
        t2.toString;
        return new A._RoundedRectangleToCircleBorder(t2, _this.circleness * (1 - t), t1);
      }
      if (b instanceof A.CircleBorder) {
        t1 = _this.circleness;
        return new A._RoundedRectangleToCircleBorder(_this.borderRadius, t1 + (1 - t1) * t, A.BorderSide_lerp(_this.side, b.side, t));
      }
      if (b instanceof A._RoundedRectangleToCircleBorder) {
        t1 = A.BorderSide_lerp(_this.side, b.side, t);
        t2 = A.BorderRadiusGeometry_lerp(_this.borderRadius, b.borderRadius, t);
        t2.toString;
        t3 = A.lerpDouble(_this.circleness, b.circleness, t);
        t3.toString;
        return new A._RoundedRectangleToCircleBorder(t2, t3, t1);
      }
      return _this.super$ShapeBorder$lerpTo(b, t);
    },
    _adjustRect$1(rect) {
      var t2, t3, t4, t5, t6, t7, delta,
        t1 = this.circleness;
      if (t1 === 0 || rect.right - rect.left === rect.bottom - rect.top)
        return rect;
      t2 = rect.right;
      t3 = rect.left;
      t4 = t2 - t3;
      t5 = rect.bottom;
      t6 = rect.top;
      t7 = t5 - t6;
      if (t4 < t7) {
        delta = t1 * (t7 - t4) / 2;
        return new A.Rect(t3, t6 + delta, t2, t5 - delta);
      } else {
        delta = t1 * (t4 - t7) / 2;
        return new A.Rect(t3 + delta, t6, t2 - delta, t5);
      }
    },
    _adjustBorderRadius$2(rect, textDirection) {
      var t2,
        resolvedRadius = this.borderRadius.resolve$1(textDirection),
        t1 = this.circleness;
      if (t1 === 0)
        return resolvedRadius;
      t2 = rect.get$shortestSide() / 2;
      t2 = new A.Radius(t2, t2);
      return A.BorderRadius_lerp(resolvedRadius, new A.BorderRadius(t2, t2, t2, t2), t1);
    },
    getInnerPath$2$textDirection(rect, textDirection) {
      var t1 = A.Path_Path(),
        t2 = this._adjustBorderRadius$2(rect, textDirection);
      t2.toString;
      t1.addRRect$1(0, t2.toRRect$1(this._adjustRect$1(rect)).inflate$1(-this.side.width));
      return t1;
    },
    getOuterPath$2$textDirection(rect, textDirection) {
      var t1 = A.Path_Path(),
        t2 = this._adjustBorderRadius$2(rect, textDirection);
      t2.toString;
      t1.addRRect$1(0, t2.toRRect$1(this._adjustRect$1(rect)));
      return t1;
    },
    paint$3$textDirection(canvas, rect, textDirection) {
      var width, t2, outer, inner, paint, _this = this,
        t1 = _this.side;
      switch (t1.style.index) {
        case 0:
          break;
        case 1:
          width = t1.width;
          if (width === 0) {
            t2 = _this._adjustBorderRadius$2(rect, textDirection);
            t2.toString;
            canvas.drawRRect$2(0, t2.toRRect$1(_this._adjustRect$1(rect)), t1.toPaint$0());
          } else {
            t2 = _this._adjustBorderRadius$2(rect, textDirection);
            t2.toString;
            outer = t2.toRRect$1(_this._adjustRect$1(rect));
            inner = outer.inflate$1(-width);
            paint = $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData());
            paint.set$color(0, t1.color);
            canvas.drawDRRect$3(0, outer, inner, paint);
          }
          break;
      }
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      return other instanceof A._RoundedRectangleToCircleBorder && other.side.$eq(0, _this.side) && other.borderRadius.$eq(0, _this.borderRadius) && other.circleness === _this.circleness;
    },
    get$hashCode(_) {
      return A.hashValues(this.side, this.borderRadius, this.circleness, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      return "RoundedRectangleBorder(" + this.side.toString$0(0) + ", " + this.borderRadius.toString$0(0) + ", " + B.JSNumber_methods.toStringAsFixed$1(this.circleness * 100, 1) + "% of the way to being a CircleBorder)";
    }
  };
  A.ShapeDecoration.prototype = {
    getClipPath$2(rect, textDirection) {
      return this.shape.getOuterPath$2$textDirection(rect, textDirection);
    },
    get$padding(_) {
      return this.shape.get$dimensions();
    },
    get$isComplex() {
      return this.shadows != null;
    },
    lerpFrom$2(a, t) {
      if (a instanceof A.BoxDecoration)
        return A.ShapeDecoration_lerp(A.ShapeDecoration_ShapeDecoration$fromBoxDecoration(a), this, t);
      else if (a == null || a instanceof A.ShapeDecoration)
        return A.ShapeDecoration_lerp(type$.nullable_ShapeDecoration._as(a), this, t);
      return this.super$Decoration$lerpFrom(a, t);
    },
    lerpTo$2(b, t) {
      if (b instanceof A.BoxDecoration)
        return A.ShapeDecoration_lerp(this, A.ShapeDecoration_ShapeDecoration$fromBoxDecoration(b), t);
      else if (b == null || b instanceof A.ShapeDecoration)
        return A.ShapeDecoration_lerp(this, type$.nullable_ShapeDecoration._as(b), t);
      return this.super$Decoration$lerpTo(b, t);
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      if (other instanceof A.ShapeDecoration)
        if (J.$eq$(other.color, _this.color))
          t1 = J.$eq$(other.image, _this.image) && A.listEquals0(other.shadows, _this.shadows) && other.shape.$eq(0, _this.shape);
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.color, _this.gradient, _this.image, _this.shape, A.hashList(_this.shadows), B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    hitTest$3$textDirection(size, position, textDirection) {
      return this.shape.getOuterPath$2$textDirection(new A.Rect(0, 0, 0 + size._dx, 0 + size._dy), textDirection).contains$1(0, position);
    },
    createBoxPainter$1(onChanged) {
      return new A._ShapeDecorationPainter(this, onChanged);
    }
  };
  A._ShapeDecorationPainter.prototype = {
    _precache$2(rect, textDirection) {
      var t1, t2, _this = this;
      if (rect.$eq(0, _this._lastRect) && textDirection == _this._lastTextDirection)
        return;
      if (_this._interiorPaint == null)
        t1 = _this._shape_decoration$_decoration.color != null || false;
      else
        t1 = false;
      if (t1) {
        t1 = $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData());
        _this._interiorPaint = t1;
        t2 = _this._shape_decoration$_decoration.color;
        if (t2 != null)
          t1.set$color(0, t2);
      }
      t1 = _this._shape_decoration$_decoration;
      t2 = t1.shadows;
      if (t2 != null) {
        if (_this._shadowCount == null) {
          _this._shadowCount = t2.length;
          _this.___ShapeDecorationPainter__shadowPaints = A.List_List$of(new A.MappedListIterable(t2, new A._ShapeDecorationPainter__precache_closure(), A._arrayInstanceType(t2)._eval$1("MappedListIterable<1,Paint>")), true, type$.Paint);
        }
        _this.___ShapeDecorationPainter__shadowPaths = A.List_List$of(new A.MappedListIterable(t2, new A._ShapeDecorationPainter__precache_closure0(_this, rect, textDirection), A._arrayInstanceType(t2)._eval$1("MappedListIterable<1,Path>")), true, type$.Path);
      }
      if (_this._interiorPaint != null || _this._shadowCount != null)
        _this.___ShapeDecorationPainter__outerPath = t1.shape.getOuterPath$2$textDirection(rect, textDirection);
      if (t1.image != null)
        _this._innerPath = t1.shape.getInnerPath$2$textDirection(rect, textDirection);
      _this._lastRect = rect;
      _this._lastTextDirection = textDirection;
    },
    _shape_decoration$_paintShadows$1(canvas) {
      var index, t1, _this = this;
      if (_this._shadowCount != null) {
        index = 0;
        while (true) {
          t1 = _this._shadowCount;
          t1.toString;
          if (!(index < t1))
            break;
          canvas.drawPath$2(0, J.$index$asx(A._lateReadCheck(_this.___ShapeDecorationPainter__shadowPaths, "_shadowPaths"), index), J.$index$asx(A._lateReadCheck(_this.___ShapeDecorationPainter__shadowPaints, "_shadowPaints"), index));
          ++index;
        }
      }
    },
    _paintImage$2(canvas, configuration) {
      var t2, _this = this,
        t1 = _this._shape_decoration$_decoration.image;
      if (t1 == null)
        return;
      t2 = _this._imagePainter;
      if (t2 == null) {
        t2 = _this.onChanged;
        t2.toString;
        t2 = _this._imagePainter = new A.DecorationImagePainter(t1, t2);
        t1 = t2;
      } else
        t1 = t2;
      t2 = _this._lastRect;
      t2.toString;
      t1.paint$4(canvas, t2, _this._innerPath, configuration);
    },
    dispose$0(_) {
      var t1 = this._imagePainter;
      if (t1 != null)
        t1.dispose$0(0);
      this.super$BoxPainter$dispose(0);
    },
    paint$3(canvas, offset, configuration) {
      var _this = this,
        t1 = configuration.size,
        t2 = offset._dx,
        t3 = offset._dy,
        rect = new A.Rect(t2, t3, t2 + t1._dx, t3 + t1._dy),
        textDirection = configuration.textDirection;
      _this._precache$2(rect, textDirection);
      _this._shape_decoration$_paintShadows$1(canvas);
      if (_this._interiorPaint != null) {
        t1 = A._lateReadCheck(_this.___ShapeDecorationPainter__outerPath, "_outerPath");
        t2 = _this._interiorPaint;
        t2.toString;
        canvas.drawPath$2(0, t1, t2);
      }
      _this._paintImage$2(canvas, configuration);
      _this._shape_decoration$_decoration.shape.paint$3$textDirection(canvas, rect, textDirection);
    }
  };
  A._ShapeDecorationPainter__precache_closure.prototype = {
    call$1(shadow) {
      return shadow.toPaint$0();
    },
    $signature: 166
  };
  A._ShapeDecorationPainter__precache_closure0.prototype = {
    call$1(shadow) {
      return this.$this._shape_decoration$_decoration.shape.getOuterPath$2$textDirection(this.rect.shift$1(shadow.offset).inflate$1(shadow.spreadRadius), this.textDirection);
    },
    $signature: 167
  };
  A.TextOverflow.prototype = {
    toString$0(_) {
      return "TextOverflow." + this._name;
    }
  };
  A.PlaceholderDimensions.prototype = {
    toString$0(_) {
      return "PlaceholderDimensions(" + this.size.toString$0(0) + ", " + A.S(this.baseline) + ")";
    }
  };
  A.TextWidthBasis.prototype = {
    toString$0(_) {
      return "TextWidthBasis." + this._name;
    }
  };
  A.TextPainter.prototype = {
    markNeedsLayout$0() {
      this._paragraph = null;
    },
    set$text(_, value) {
      var t1, comparison, _this = this;
      if (J.$eq$(_this._text_painter$_text, value))
        return;
      t1 = _this._text_painter$_text;
      t1 = t1 == null ? null : t1.style;
      J.$eq$(t1, value.style);
      t1 = _this._text_painter$_text;
      t1 = t1 == null ? null : t1.compareTo$1(0, value);
      comparison = t1 == null ? B.RenderComparison_3 : t1;
      _this._text_painter$_text = value;
      t1 = comparison.index;
      if (t1 >= 3)
        _this.markNeedsLayout$0();
      else if (t1 >= 2)
        _this._rebuildParagraphForPaint = true;
    },
    set$textAlign(_, value) {
      if (this._textAlign === value)
        return;
      this._textAlign = value;
      this.markNeedsLayout$0();
    },
    set$textDirection(_, value) {
      if (this._text_painter$_textDirection === value)
        return;
      this._text_painter$_textDirection = value;
      this.markNeedsLayout$0();
    },
    set$textScaleFactor(value) {
      if (this._textScaleFactor === value)
        return;
      this._textScaleFactor = value;
      this.markNeedsLayout$0();
    },
    set$ellipsis(_, value) {
      if (this._ellipsis == value)
        return;
      this._ellipsis = value;
      this.markNeedsLayout$0();
    },
    set$textWidthBasis(value) {
      if (this._textWidthBasis === value)
        return;
      this._textWidthBasis = value;
      this.markNeedsLayout$0();
    },
    setPlaceholderDimensions$1(value) {
      if (value == null || value.length === 0 || A.listEquals0(value, this._text_painter$_placeholderDimensions))
        return;
      this._text_painter$_placeholderDimensions = value;
      this.markNeedsLayout$0();
    },
    get$width(_) {
      var t1 = this._textWidthBasis,
        t2 = this._paragraph;
      t1 = t1 === B.TextWidthBasis_1 ? t2.get$longestLine() : t2.get$width(t2);
      return Math.ceil(t1);
    },
    computeDistanceToActualBaseline$1(baseline) {
      var t1;
      switch (baseline.index) {
        case 0:
          t1 = this._paragraph;
          return t1.get$alphabeticBaseline(t1);
        case 1:
          t1 = this._paragraph;
          return t1.get$ideographicBaseline(t1);
      }
    },
    _createParagraph$0() {
      var t1, t2, t3, t4, t5, t6, t7, leadingDistribution, effectiveTextHeightBehavior, t8, t9, t10, t11, builder, _this = this, _null = null,
        text = _this._text_painter$_text;
      if (text == null)
        throw A.wrapException(A.StateError$("TextPainter.text must be set to a non-null value before using the TextPainter."));
      t1 = text.style;
      if (t1 == null)
        t1 = _null;
      else {
        t2 = _this._textAlign;
        t3 = _this._text_painter$_textDirection;
        t4 = _this._textScaleFactor;
        t5 = _this._maxLines;
        t6 = _this._ellipsis;
        t7 = _this._text_painter$_locale;
        leadingDistribution = t1.leadingDistribution;
        effectiveTextHeightBehavior = leadingDistribution == null ? _null : new A.TextHeightBehavior(leadingDistribution);
        t8 = t1.fontWeight;
        t9 = t1.fontStyle;
        t10 = t1.fontFamily;
        t11 = t1.fontSize;
        if (t11 == null)
          t11 = 14;
        t1 = t1.height;
        t1 = A.ParagraphStyle_ParagraphStyle(t6, t10, t11 * t4, t9, t8, t1, t7, t5, _null, t2, t3, effectiveTextHeightBehavior);
      }
      if (t1 == null) {
        t1 = _this._textAlign;
        t2 = _this._text_painter$_textDirection;
        t3 = _this._textScaleFactor;
        t4 = _this._maxLines;
        t5 = _this._text_painter$_textHeightBehavior;
        t5 = A.ParagraphStyle_ParagraphStyle(_this._ellipsis, _null, 14 * t3, _null, _null, _null, _this._text_painter$_locale, t4, _null, t1, t2, t5);
        t1 = t5;
      }
      builder = A.ParagraphBuilder_ParagraphBuilder(t1);
      t1 = _this._textScaleFactor;
      text.build$3$dimensions$textScaleFactor(0, builder, _this._text_painter$_placeholderDimensions, t1);
      _this._inlinePlaceholderScales = builder.get$placeholderScales();
      _this._paragraph = builder.build$0(0);
      _this._rebuildParagraphForPaint = false;
    },
    _layoutParagraph$2(minWidth, maxWidth) {
      var newWidth, t1, _this = this;
      _this._paragraph.layout$1(0, new A.ParagraphConstraints(maxWidth));
      if (minWidth !== maxWidth) {
        switch (_this._textWidthBasis.index) {
          case 1:
            newWidth = Math.ceil(_this._paragraph.get$longestLine());
            break;
          case 0:
            newWidth = Math.ceil(_this._paragraph.get$maxIntrinsicWidth());
            break;
          default:
            newWidth = null;
        }
        newWidth = J.clamp$2$n(newWidth, minWidth, maxWidth);
        t1 = _this._paragraph;
        if (newWidth !== Math.ceil(t1.get$width(t1)))
          _this._paragraph.layout$1(0, new A.ParagraphConstraints(newWidth));
      }
    },
    layout$2$maxWidth$minWidth(_, maxWidth, minWidth) {
      var _this = this,
        t1 = _this._paragraph == null;
      if (!t1 && minWidth === _this._lastMinWidth && maxWidth === _this._lastMaxWidth)
        return;
      if (_this._rebuildParagraphForPaint || t1)
        _this._createParagraph$0();
      _this._lastMinWidth = minWidth;
      _this._lastMaxWidth = maxWidth;
      _this._layoutParagraph$2(minWidth, maxWidth);
      _this._inlinePlaceholderBoxes = _this._paragraph.getBoxesForPlaceholders$0();
    },
    layout$0($receiver) {
      return this.layout$2$maxWidth$minWidth($receiver, 1 / 0, 0);
    },
    paint$2(canvas, offset) {
      var t1, _this = this,
        minWidth = _this._lastMinWidth,
        maxWidth = _this._lastMaxWidth;
      if (_this._paragraph == null || minWidth == null || maxWidth == null)
        throw A.wrapException(A.StateError$("TextPainter.paint called when text geometry was not yet calculated.\nPlease call layout() before paint() to position the text before painting it."));
      if (_this._rebuildParagraphForPaint) {
        _this._createParagraph$0();
        _this._layoutParagraph$2(minWidth, maxWidth);
      }
      t1 = _this._paragraph;
      t1.toString;
      canvas.drawParagraph$2(0, t1, offset);
    }
  };
  A.TextSpan.prototype = {
    get$cursor(_) {
      return this.mouseCursor;
    },
    get$validForMouseTracker() {
      return true;
    },
    handleEvent$2($event, entry) {
      type$.PointerDownEvent._is($event);
    },
    build$3$dimensions$textScaleFactor(_, builder, dimensions, textScaleFactor) {
      var exception, stack, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, exception0, _i,
        t1 = this.style,
        hasStyle = t1 != null;
      if (hasStyle) {
        t2 = t1.color;
        t3 = t1.decoration;
        t4 = t1.decorationColor;
        t5 = t1.decorationStyle;
        t6 = t1.decorationThickness;
        t7 = t1.fontWeight;
        t8 = t1.fontStyle;
        t9 = t1.textBaseline;
        t10 = t1.leadingDistribution;
        t11 = t1.fontFamily;
        t12 = t1.get$fontFamilyFallback();
        t13 = t1.fontSize;
        t13 = t13 == null ? null : t13 * textScaleFactor;
        t14 = t1.letterSpacing;
        t15 = t1.wordSpacing;
        t16 = t1.height;
        t17 = t1.locale;
        t18 = t1.foreground;
        t19 = t1.background;
        if (t19 == null) {
          t19 = t1.backgroundColor;
          if (t19 != null) {
            t20 = $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData());
            t20.set$color(0, t19);
            t19 = t20;
          } else
            t19 = null;
        }
        t20 = t1.shadows;
        builder.pushStyle$1(0, A.TextStyle_TextStyle(t19, t2, t3, t4, t5, t6, t11, t12, t1.fontFeatures, t13, t8, t7, t18, t16, t10, t14, t17, t20, t9, t15));
      }
      try {
        builder.addText$1(0, this.text);
      } catch (exception0) {
        t1 = A.unwrapException(exception0);
        if (t1 instanceof A.ArgumentError) {
          exception = t1;
          stack = A.getTraceFromException(exception0);
          A.FlutterError_reportError(new A.FlutterErrorDetails(exception, stack, "painting library", A.ErrorDescription$("while building a TextSpan"), null, false));
          builder.addText$1(0, "\ufffd");
        } else
          throw exception0;
      }
      t1 = this.children;
      if (t1 != null)
        for (_i = 0; _i < 1; ++_i)
          t1[_i].build$3$dimensions$textScaleFactor(0, builder, dimensions, textScaleFactor);
      if (hasStyle)
        builder.pop$0(0);
    },
    visitChildren$1(visitor) {
      var t1, _i;
      if (!visitor.call$1(this))
        return false;
      t1 = this.children;
      if (t1 != null)
        for (_i = 0; _i < 1; ++_i)
          if (!t1[_i].visitChildren$1(visitor))
            return false;
      return true;
    },
    getSpanForPositionVisitor$2(position, offset) {
      var affinity = position.affinity,
        targetOffset = position.offset,
        t1 = offset._inline_span$_value,
        endOffset = t1 + this.text.length;
      if (!(t1 === targetOffset && affinity === B.TextAffinity_1))
        if (!(t1 < targetOffset && targetOffset < endOffset))
          t1 = endOffset === targetOffset && affinity === B.TextAffinity_0;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return this;
      offset._inline_span$_value = endOffset;
      return null;
    },
    computeSemanticsInformation$3$inheritedLocale$inheritedSpellOut(collector, inheritedLocale, inheritedSpellOut) {
      var _i,
        t1 = A._setArrayType([], type$.JSArray_StringAttribute);
      collector.push(A.InlineSpanSemanticsInformation$(this.text, null, null, t1));
      t1 = this.children;
      if (t1 != null)
        for (_i = 0; _i < 1; ++_i)
          t1[_i].computeSemanticsInformation$3$inheritedLocale$inheritedSpellOut(collector, inheritedLocale, false);
    },
    computeSemanticsInformation$1(collector) {
      return this.computeSemanticsInformation$3$inheritedLocale$inheritedSpellOut(collector, null, false);
    },
    compareTo$1(_, other) {
      var t1, t2, candidate, result, index, _this = this;
      if (_this === other)
        return B.RenderComparison_0;
      if (A.getRuntimeType(other) !== A.getRuntimeType(_this))
        return B.RenderComparison_3;
      if (other.text === _this.text) {
        t1 = _this.children == null ? null : 1;
        t1 = t1 != (other.children == null ? null : 1) || _this.style == null !== (other.style == null);
      } else
        t1 = true;
      if (t1)
        return B.RenderComparison_3;
      t1 = _this.style;
      if (t1 != null) {
        t2 = other.style;
        t2.toString;
        candidate = t1.compareTo$1(0, t2);
        result = candidate.index > 0 ? candidate : B.RenderComparison_0;
        if (result === B.RenderComparison_3)
          return result;
      } else
        result = B.RenderComparison_0;
      t1 = _this.children;
      if (t1 != null)
        for (t2 = other.children, index = 0; index < 1; ++index) {
          candidate = t1[index].compareTo$1(0, t2[index]);
          if (candidate.get$index(candidate).$gt(0, result.index))
            result = candidate;
          if (result === B.RenderComparison_3)
            return result;
        }
      return result;
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      if (!_this.super$InlineSpan$$eq(0, other))
        return false;
      if (other instanceof A.TextSpan)
        if (other.text === _this.text)
          t1 = _this.mouseCursor.$eq(0, other.mouseCursor) && A.listEquals0(other.children, _this.children);
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var _this = this, _null = null;
      return A.hashValues(A.InlineSpan.prototype.get$hashCode.call(_this, _this), _this.text, _null, _null, _null, _null, _this.mouseCursor, A.hashList(_this.children), B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toStringShort$0() {
      return "TextSpan";
    },
    debugDescribeChildren$0() {
      var t2,
        t1 = this.children;
      if (t1 == null)
        return B.List_empty;
      t2 = A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,DiagnosticsNode>");
      return A.List_List$of(new A.MappedListIterable(t1, new A.TextSpan_debugDescribeChildren_closure(), t2), true, t2._eval$1("ListIterable.E"));
    },
    $isHitTestTarget: 1,
    $isMouseTrackerAnnotation: 1,
    get$onEnter() {
      return null;
    },
    get$onExit() {
      return null;
    }
  };
  A.TextSpan_debugDescribeChildren_closure.prototype = {
    call$1(child) {
      var t1 = A.DiagnosticableTreeNode$(null, null, child);
      return t1;
    },
    $signature: 253
  };
  A.TextStyle.prototype = {
    get$fontFamilyFallback() {
      return this._text_style$_fontFamilyFallback;
    },
    get$_text_style$_fontFamily(_) {
      return this.fontFamily;
    },
    copyWith$24$background$backgroundColor$color$debugLabel$decoration$decorationColor$decorationStyle$decorationThickness$fontFamily$fontFamilyFallback$fontFeatures$fontSize$fontStyle$fontWeight$foreground$height$leadingDistribution$letterSpacing$locale$overflow$package$shadows$textBaseline$wordSpacing(background, backgroundColor, color, debugLabel, decoration, decorationColor, decorationStyle, decorationThickness, fontFamily, fontFamilyFallback, fontFeatures, fontSize, fontStyle, fontWeight, foreground, height, leadingDistribution, letterSpacing, locale, overflow, $package, shadows, textBaseline, wordSpacing) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, _this = this,
        t1 = _this.foreground;
      if (t1 == null && foreground == null)
        t2 = color == null ? _this.color : color;
      else
        t2 = null;
      t3 = _this.background;
      if (t3 == null && background == null)
        t4 = backgroundColor == null ? _this.backgroundColor : backgroundColor;
      else
        t4 = null;
      t5 = fontSize == null ? _this.fontSize : fontSize;
      t6 = fontWeight == null ? _this.fontWeight : fontWeight;
      t7 = letterSpacing == null ? _this.letterSpacing : letterSpacing;
      t8 = wordSpacing == null ? _this.wordSpacing : wordSpacing;
      t9 = textBaseline == null ? _this.textBaseline : textBaseline;
      t10 = height == null ? _this.height : height;
      t11 = leadingDistribution == null ? _this.leadingDistribution : leadingDistribution;
      t1 = foreground == null ? t1 : foreground;
      t3 = background == null ? t3 : background;
      t12 = decoration == null ? _this.decoration : decoration;
      t13 = decorationColor == null ? _this.decorationColor : decorationColor;
      t14 = decorationThickness == null ? _this.decorationThickness : decorationThickness;
      t15 = fontFamily == null ? _this.get$_text_style$_fontFamily(_this) : fontFamily;
      t16 = fontFamilyFallback == null ? _this.get$fontFamilyFallback() : fontFamilyFallback;
      return A.TextStyle$(t3, t4, t2, null, t12, t13, _this.decorationStyle, t14, t15, t16, _this.fontFeatures, t5, _this.fontStyle, t6, t1, t10, _this.inherit, t11, t7, _this.locale, _this.overflow, _this._package, _this.shadows, t9, t8);
    },
    copyWith$1$color(color) {
      return this.copyWith$24$background$backgroundColor$color$debugLabel$decoration$decorationColor$decorationStyle$decorationThickness$fontFamily$fontFamilyFallback$fontFeatures$fontSize$fontStyle$fontWeight$foreground$height$leadingDistribution$letterSpacing$locale$overflow$package$shadows$textBaseline$wordSpacing(null, null, color, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    },
    merge$1(other) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22;
      if (other == null)
        return this;
      if (!other.inherit)
        return other;
      t1 = other.color;
      t2 = other.backgroundColor;
      t3 = other.fontSize;
      t4 = other.fontWeight;
      t5 = other.fontStyle;
      t6 = other.letterSpacing;
      t7 = other.wordSpacing;
      t8 = other.textBaseline;
      t9 = other.height;
      t10 = other.leadingDistribution;
      t11 = other.locale;
      t12 = other.foreground;
      t13 = other.background;
      t14 = other.shadows;
      t15 = other.fontFeatures;
      t16 = other.decoration;
      t17 = other.decorationColor;
      t18 = other.decorationStyle;
      t19 = other.decorationThickness;
      t20 = other.get$_text_style$_fontFamily(other);
      t21 = other.get$fontFamilyFallback();
      t22 = other._package;
      return this.copyWith$24$background$backgroundColor$color$debugLabel$decoration$decorationColor$decorationStyle$decorationThickness$fontFamily$fontFamilyFallback$fontFeatures$fontSize$fontStyle$fontWeight$foreground$height$leadingDistribution$letterSpacing$locale$overflow$package$shadows$textBaseline$wordSpacing(t13, t2, t1, null, t16, t17, t18, t19, t20, t21, t15, t3, t5, t4, t12, t9, t10, t6, t11, other.overflow, t22, t14, t8, t7);
    },
    compareTo$1(_, other) {
      var t1, _this = this;
      if (_this === other)
        return B.RenderComparison_0;
      if (_this.inherit === other.inherit)
        if (_this.fontFamily == other.fontFamily)
          if (_this.fontSize == other.fontSize)
            if (_this.fontWeight == other.fontWeight)
              if (_this.letterSpacing == other.letterSpacing)
                if (_this.wordSpacing == other.wordSpacing)
                  if (_this.textBaseline == other.textBaseline)
                    if (_this.height == other.height)
                      if (_this.leadingDistribution == other.leadingDistribution)
                        t1 = _this.foreground != other.foreground || _this.background != other.background || !A.listEquals0(_this.shadows, other.shadows) || !A.listEquals0(_this.fontFeatures, other.fontFeatures) || !A.listEquals0(_this.get$fontFamilyFallback(), other.get$fontFamilyFallback()) || false;
                      else
                        t1 = true;
                    else
                      t1 = true;
                  else
                    t1 = true;
                else
                  t1 = true;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return B.RenderComparison_3;
      if (J.$eq$(_this.color, other.color))
        if (J.$eq$(_this.backgroundColor, other.backgroundColor))
          if (J.$eq$(_this.decoration, other.decoration))
            if (J.$eq$(_this.decorationColor, other.decorationColor))
              t1 = _this.decorationThickness != other.decorationThickness;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return B.RenderComparison_2;
      return B.RenderComparison_0;
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      if (other instanceof A.TextStyle)
        if (other.inherit === _this.inherit)
          if (J.$eq$(other.color, _this.color))
            if (J.$eq$(other.backgroundColor, _this.backgroundColor))
              if (other.fontSize == _this.fontSize)
                if (other.fontWeight == _this.fontWeight)
                  if (other.letterSpacing == _this.letterSpacing)
                    if (other.wordSpacing == _this.wordSpacing)
                      if (other.textBaseline == _this.textBaseline)
                        if (other.height == _this.height)
                          if (other.leadingDistribution == _this.leadingDistribution)
                            if (other.foreground == _this.foreground)
                              if (other.background == _this.background)
                                if (A.listEquals0(other.shadows, _this.shadows))
                                  if (A.listEquals0(other.fontFeatures, _this.fontFeatures))
                                    if (J.$eq$(other.decoration, _this.decoration))
                                      if (J.$eq$(other.decorationColor, _this.decorationColor))
                                        if (other.decorationThickness == _this.decorationThickness)
                                          if (other.fontFamily == _this.fontFamily)
                                            if (A.listEquals0(other.get$fontFamilyFallback(), _this.get$fontFamilyFallback()))
                                              t1 = true;
                                            else
                                              t1 = false;
                                          else
                                            t1 = false;
                                        else
                                          t1 = false;
                                      else
                                        t1 = false;
                                    else
                                      t1 = false;
                                  else
                                    t1 = false;
                                else
                                  t1 = false;
                              else
                                t1 = false;
                            else
                              t1 = false;
                          else
                            t1 = false;
                        else
                          t1 = false;
                      else
                        t1 = false;
                    else
                      t1 = false;
                  else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashList([_this.inherit, _this.color, _this.backgroundColor, _this.fontSize, _this.fontWeight, _this.fontStyle, _this.letterSpacing, _this.wordSpacing, _this.textBaseline, _this.height, _this.leadingDistribution, _this.locale, _this.foreground, _this.background, A.hashList(_this.shadows), A.hashList(_this.fontFeatures), _this.decoration, _this.decorationColor, _this.decorationStyle, _this.decorationThickness, _this.fontFamily, A.hashList(_this.get$fontFamilyFallback()), _this._package, _this.overflow]);
    },
    toStringShort$0() {
      return "TextStyle";
    }
  };
  A._TextStyle_Object_Diagnosticable.prototype = {};
  A.Simulation.prototype = {
    toString$0(_) {
      return "Simulation";
    }
  };
  A.RendererBinding.prototype = {
    handleMetricsChanged$0() {
      var t1 = A._lateReadCheck(this.RendererBinding___RendererBinding__pipelineOwner, "_pipelineOwner")._rootNode;
      t1.toString;
      t1.set$configuration(this.createViewConfiguration$0());
      this.scheduleForcedFrame$0();
    },
    handleTextScaleFactorChanged$0() {
    },
    handlePlatformBrightnessChanged$0() {
    },
    createViewConfiguration$0() {
      var t1 = $.$get$window(),
        devicePixelRatio = t1._debugDevicePixelRatio;
      if (devicePixelRatio == null)
        devicePixelRatio = A.EnginePlatformDispatcher_browserDevicePixelRatio();
      return new A.ViewConfiguration(t1.get$physicalSize().$div(0, devicePixelRatio), devicePixelRatio);
    },
    _handleSemanticsEnabledChanged$0() {
      var t1, t2, _this = this;
      if ($.$get$window().platformDispatcher._configuration.semanticsEnabled) {
        if (_this.RendererBinding__semanticsHandle == null) {
          t1 = A._lateReadCheck(_this.RendererBinding___RendererBinding__pipelineOwner, "_pipelineOwner");
          if (++t1._outstandingSemanticsHandles === 1) {
            t2 = type$.SemanticsNode;
            t1._semanticsOwner = new A.SemanticsOwner(A.LinkedHashSet_LinkedHashSet$_empty(t2), A.LinkedHashMap_LinkedHashMap$_empty(type$.int, t2), A.LinkedHashSet_LinkedHashSet$_empty(t2), $.$get$ChangeNotifier__emptyListeners());
            t1.onSemanticsOwnerCreated.call$0();
          }
          _this.RendererBinding__semanticsHandle = new A.SemanticsHandle(t1, null);
        }
      } else {
        t1 = _this.RendererBinding__semanticsHandle;
        if (t1 != null) {
          t1 = t1._object$_owner;
          if (--t1._outstandingSemanticsHandles === 0) {
            t2 = t1._semanticsOwner;
            t2._semantics$_dirtyNodes.clear$0(0);
            t2._nodes.clear$0(0);
            t2._detachedNodes.clear$0(0);
            t2.super$ChangeNotifier$dispose(0);
            t1._semanticsOwner = null;
            t1.onSemanticsOwnerDisposed.call$0();
          }
        }
        _this.RendererBinding__semanticsHandle = null;
      }
    },
    setSemanticsEnabled$1(enabled) {
      var t1, t2, _this = this;
      if (enabled) {
        if (_this.RendererBinding__semanticsHandle == null) {
          t1 = A._lateReadCheck(_this.RendererBinding___RendererBinding__pipelineOwner, "_pipelineOwner");
          if (++t1._outstandingSemanticsHandles === 1) {
            t2 = type$.SemanticsNode;
            t1._semanticsOwner = new A.SemanticsOwner(A.LinkedHashSet_LinkedHashSet$_empty(t2), A.LinkedHashMap_LinkedHashMap$_empty(type$.int, t2), A.LinkedHashSet_LinkedHashSet$_empty(t2), $.$get$ChangeNotifier__emptyListeners());
            t1.onSemanticsOwnerCreated.call$0();
          }
          _this.RendererBinding__semanticsHandle = new A.SemanticsHandle(t1, null);
        }
      } else {
        t1 = _this.RendererBinding__semanticsHandle;
        if (t1 != null) {
          t1 = t1._object$_owner;
          if (--t1._outstandingSemanticsHandles === 0) {
            t2 = t1._semanticsOwner;
            t2._semantics$_dirtyNodes.clear$0(0);
            t2._nodes.clear$0(0);
            t2._detachedNodes.clear$0(0);
            t2.super$ChangeNotifier$dispose(0);
            t1._semanticsOwner = null;
            t1.onSemanticsOwnerDisposed.call$0();
          }
        }
        _this.RendererBinding__semanticsHandle = null;
      }
    },
    _handleWebFirstFrame$1(_) {
      B.MethodChannel_Gpa._invokeMethod$1$3$arguments$missingOk("first-frame", null, false, type$.void);
    },
    _handleSemanticsAction$3(id, action, args) {
      var t1 = A._lateReadCheck(this.RendererBinding___RendererBinding__pipelineOwner, "_pipelineOwner")._semanticsOwner;
      if (t1 != null)
        t1.performAction$3(id, action, null);
    },
    _handleSemanticsOwnerCreated$0() {
      var t2,
        t1 = A._lateReadCheck(this.RendererBinding___RendererBinding__pipelineOwner, "_pipelineOwner")._rootNode;
      t1.toString;
      t2 = type$.nullable_PipelineOwner;
      t2._as(A.AbstractNode.prototype.get$owner.call(t1))._nodesNeedingSemantics.add$1(0, t1);
      t2._as(A.AbstractNode.prototype.get$owner.call(t1)).requestVisualUpdate$0();
    },
    _handleSemanticsOwnerDisposed$0() {
      A._lateReadCheck(this.RendererBinding___RendererBinding__pipelineOwner, "_pipelineOwner")._rootNode.clearSemantics$0();
    },
    _handlePersistentFrameCallback$1(timeStamp) {
      this.drawFrame$0();
      this._scheduleMouseTrackerUpdate$0();
    },
    _scheduleMouseTrackerUpdate$0() {
      $.SchedulerBinding__instance.SchedulerBinding__postFrameCallbacks.push(new A.RendererBinding__scheduleMouseTrackerUpdate_closure(this));
    },
    drawFrame$0() {
      var _this = this,
        _s14_ = "_pipelineOwner";
      A._lateReadCheck(_this.RendererBinding___RendererBinding__pipelineOwner, _s14_).flushLayout$0();
      A._lateReadCheck(_this.RendererBinding___RendererBinding__pipelineOwner, _s14_).flushCompositingBits$0();
      A._lateReadCheck(_this.RendererBinding___RendererBinding__pipelineOwner, _s14_).flushPaint$0();
      if (_this.RendererBinding__firstFrameSent || _this.RendererBinding__firstFrameDeferredCount === 0) {
        A._lateReadCheck(_this.RendererBinding___RendererBinding__pipelineOwner, _s14_)._rootNode.compositeFrame$0();
        A._lateReadCheck(_this.RendererBinding___RendererBinding__pipelineOwner, _s14_).flushSemantics$0();
        _this.RendererBinding__firstFrameSent = true;
      }
    },
    $isHitTestTarget: 1,
    $isSchedulerBinding: 1
  };
  A.RendererBinding__scheduleMouseTrackerUpdate_closure.prototype = {
    call$1(duration) {
      var t1 = this.$this,
        t2 = t1.RendererBinding__mouseTracker;
      t2.toString;
      t2.updateAllDevices$1(A._lateReadCheck(t1.RendererBinding___RendererBinding__pipelineOwner, "_pipelineOwner")._rootNode.get$hitTestMouseTrackers());
    },
    $signature: 7
  };
  A.BoxConstraints.prototype = {
    deflate$1(edges) {
      var _this = this,
        horizontal = edges.get$_left(edges) + edges.get$_right(edges) + edges.get$_edge_insets$_start(edges) + edges.get$_edge_insets$_end(),
        vertical = edges.get$_top(edges) + edges.get$_bottom(edges),
        deflatedMinWidth = Math.max(0, _this.minWidth - horizontal),
        deflatedMinHeight = Math.max(0, _this.minHeight - vertical);
      return new A.BoxConstraints(deflatedMinWidth, Math.max(deflatedMinWidth, _this.maxWidth - horizontal), deflatedMinHeight, Math.max(deflatedMinHeight, _this.maxHeight - vertical));
    },
    enforce$1(constraints) {
      var _this = this,
        t1 = constraints.minWidth,
        t2 = constraints.maxWidth,
        t3 = constraints.minHeight,
        t4 = constraints.maxHeight;
      return new A.BoxConstraints(B.JSNumber_methods.clamp$2(_this.minWidth, t1, t2), B.JSNumber_methods.clamp$2(_this.maxWidth, t1, t2), B.JSNumber_methods.clamp$2(_this.minHeight, t3, t4), B.JSNumber_methods.clamp$2(_this.maxHeight, t3, t4));
    },
    tighten$2$height$width(height, width) {
      var _this = this,
        t1 = width == null,
        t2 = _this.minWidth,
        t3 = t1 ? t2 : B.JSNumber_methods.clamp$2(width, t2, _this.maxWidth),
        t4 = _this.maxWidth;
      t1 = t1 ? t4 : B.JSNumber_methods.clamp$2(width, t2, t4);
      return new A.BoxConstraints(t3, t1, _this.minHeight, _this.maxHeight);
    },
    tighten$1$width(width) {
      return this.tighten$2$height$width(null, width);
    },
    constrain$1(size) {
      var _this = this;
      return new A.Size(B.JSNumber_methods.clamp$2(size._dx, _this.minWidth, _this.maxWidth), B.JSNumber_methods.clamp$2(size._dy, _this.minHeight, _this.maxHeight));
    },
    $mul(_, factor) {
      var _this = this;
      return new A.BoxConstraints(_this.minWidth * factor, _this.maxWidth * factor, _this.minHeight * factor, _this.maxHeight * factor);
    },
    get$isNormalized() {
      var _this = this,
        t1 = _this.minWidth;
      if (t1 >= 0)
        if (t1 <= _this.maxWidth) {
          t1 = _this.minHeight;
          t1 = t1 >= 0 && t1 <= _this.maxHeight;
        } else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      return other instanceof A.BoxConstraints && other.minWidth === _this.minWidth && other.maxWidth === _this.maxWidth && other.minHeight === _this.minHeight && other.maxHeight === _this.maxHeight;
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.minWidth, _this.maxWidth, _this.minHeight, _this.maxHeight, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      var t2, width, height, _this = this,
        annotation = _this.get$isNormalized() ? "" : "; NOT NORMALIZED",
        t1 = _this.minWidth;
      if (t1 === 1 / 0 && _this.minHeight === 1 / 0)
        return "BoxConstraints(biggest" + annotation + ")";
      if (t1 === 0 && _this.maxWidth === 1 / 0 && _this.minHeight === 0 && _this.maxHeight === 1 / 0)
        return "BoxConstraints(unconstrained" + annotation + ")";
      t2 = new A.BoxConstraints_toString_describe();
      width = t2.call$3(t1, _this.maxWidth, "w");
      height = t2.call$3(_this.minHeight, _this.maxHeight, "h");
      return "BoxConstraints(" + width + ", " + height + annotation + ")";
    }
  };
  A.BoxConstraints_toString_describe.prototype = {
    call$3(min, max, dim) {
      if (min === max)
        return dim + "=" + B.JSNumber_methods.toStringAsFixed$1(min, 1);
      return B.JSNumber_methods.toStringAsFixed$1(min, 1) + "<=" + dim + "<=" + B.JSNumber_methods.toStringAsFixed$1(max, 1);
    },
    $signature: 170
  };
  A.BoxHitTestResult.prototype = {
    addWithPaintTransform$3$hitTest$position$transform(hitTest, position, transform) {
      var t1, transformedPosition, isHit;
      if (transform != null) {
        transform = A.Matrix4_tryInvert(A.PointerEvent_removePerspectiveTransform(transform));
        if (transform == null)
          return false;
      }
      t1 = transform == null;
      transformedPosition = t1 ? position : A.MatrixUtils_transformPoint(transform, position);
      t1 = !t1;
      if (t1)
        this._localTransforms.push(new A._MatrixTransformPart(transform));
      isHit = hitTest.call$2(this, transformedPosition);
      if (t1)
        this.popTransform$0();
      return isHit;
    },
    addWithPaintOffset$3$hitTest$offset$position(hitTest, offset, position) {
      var isHit,
        transformedPosition = position.$sub(0, offset);
      this._localTransforms.push(new A._OffsetTransformPart(new A.Offset(-offset._dx, -offset._dy)));
      isHit = hitTest.call$2(this, transformedPosition);
      this.popTransform$0();
      return isHit;
    }
  };
  A.BoxHitTestEntry.prototype = {
    toString$0(_) {
      return "<optimized out>#" + A.shortHash(this.target) + "@" + this.localPosition.toString$0(0);
    }
  };
  A.BoxParentData.prototype = {
    toString$0(_) {
      return "offset=" + this.offset.toString$0(0);
    }
  };
  A.ContainerBoxParentData.prototype = {};
  A.RenderBox.prototype = {
    setupParentData$1(child) {
      if (!(child.parentData instanceof A.BoxParentData))
        child.parentData = new A.BoxParentData(B.Offset_0_0);
    },
    getDryLayout$1(constraints) {
      var t1, result, _this = this;
      if ($.debugProfileLayoutsEnabled || $.RenderBox__debugIntrinsicsDepth === 0)
        A.Timeline_startSync(A.getRuntimeType(_this).toString$0(0) + ".getDryLayout", B.Map_9aZ6I, null);
      $.RenderBox__debugIntrinsicsDepth = $.RenderBox__debugIntrinsicsDepth + 1;
      t1 = _this._cachedDryLayoutSizes;
      if (t1 == null)
        t1 = _this._cachedDryLayoutSizes = A.LinkedHashMap_LinkedHashMap$_empty(type$.BoxConstraints, type$.Size);
      result = t1.putIfAbsent$2(0, constraints, new A.RenderBox_getDryLayout_closure(_this, constraints));
      t1 = $.RenderBox__debugIntrinsicsDepth - 1;
      $.RenderBox__debugIntrinsicsDepth = t1;
      if ($.debugProfileLayoutsEnabled || t1 === 0)
        A.Timeline_finishSync();
      return result;
    },
    computeDryLayout$1(constraints) {
      return B.Size_0_0;
    },
    get$semanticBounds() {
      var t1 = this._size;
      return new A.Rect(0, 0, 0 + t1._dx, 0 + t1._dy);
    },
    getDistanceToBaseline$2$onlyReal(baseline, onlyReal) {
      var result = this.getDistanceToActualBaseline$1(baseline);
      if (result == null && !onlyReal)
        return this._size._dy;
      return result;
    },
    getDistanceToBaseline$1(baseline) {
      return this.getDistanceToBaseline$2$onlyReal(baseline, false);
    },
    getDistanceToActualBaseline$1(baseline) {
      var _this = this,
        t1 = _this._cachedBaselines;
      if (t1 == null)
        t1 = _this._cachedBaselines = A.LinkedHashMap_LinkedHashMap$_empty(type$.TextBaseline, type$.nullable_double);
      t1.putIfAbsent$2(0, baseline, new A.RenderBox_getDistanceToActualBaseline_closure(_this, baseline));
      return _this._cachedBaselines.$index(0, baseline);
    },
    computeDistanceToActualBaseline$1(baseline) {
      return null;
    },
    markNeedsLayout$0() {
      var t3, _this = this,
        t1 = _this._cachedBaselines,
        t2 = t1 == null;
      if (!(!t2 && t1._length !== 0)) {
        t3 = _this._cachedIntrinsicDimensions;
        if (!(t3 != null && t3._length !== 0)) {
          t3 = _this._cachedDryLayoutSizes;
          t3 = t3 != null && t3._length !== 0;
        } else
          t3 = true;
      } else
        t3 = true;
      if (t3) {
        if (!t2)
          t1.clear$0(0);
        t1 = _this._cachedIntrinsicDimensions;
        if (t1 != null)
          t1.clear$0(0);
        t1 = _this._cachedDryLayoutSizes;
        if (t1 != null)
          t1.clear$0(0);
        if (_this._node$_parent instanceof A.RenderObject) {
          _this.markParentNeedsLayout$0();
          return;
        }
      }
      _this.super$RenderObject$markNeedsLayout();
    },
    performResize$0() {
      this._size = this.computeDryLayout$1(A.RenderObject.prototype.get$constraints.call(this));
    },
    performLayout$0() {
    },
    hitTest$2$position(result, position) {
      var _this = this;
      if (_this._size.contains$1(0, position))
        if (_this.hitTestChildren$2$position(result, position) || _this.hitTestSelf$1(position)) {
          result.add$1(0, new A.BoxHitTestEntry(position, _this));
          return true;
        }
      return false;
    },
    hitTestSelf$1(position) {
      return false;
    },
    hitTestChildren$2$position(result, position) {
      return false;
    },
    applyPaintTransform$2(child, transform) {
      var offset,
        t1 = child.parentData;
      t1.toString;
      offset = type$.BoxParentData._as(t1).offset;
      transform.translate$2(0, offset._dx, offset._dy);
    },
    globalToLocal$1(point) {
      var n, t1, i, d, s,
        transform = this.getTransformTo$1(0, null);
      if (transform.copyInverse$1(transform) === 0)
        return B.Offset_0_0;
      n = new A.Vector3(new Float64Array(3));
      n.setValues$3(0, 0, 1);
      t1 = new A.Vector3(new Float64Array(3));
      t1.setValues$3(0, 0, 0);
      i = transform.perspectiveTransform$1(t1);
      t1 = new A.Vector3(new Float64Array(3));
      t1.setValues$3(0, 0, 1);
      d = transform.perspectiveTransform$1(t1).$sub(0, i);
      t1 = new A.Vector3(new Float64Array(3));
      t1.setValues$3(point._dx, point._dy, 0);
      s = transform.perspectiveTransform$1(t1);
      t1 = s.$sub(0, d.scaled$1(n.dot$1(s) / n.dot$1(d)))._v3storage;
      return new A.Offset(t1[0], t1[1]);
    },
    get$paintBounds() {
      var t1 = this._size;
      return new A.Rect(0, 0, 0 + t1._dx, 0 + t1._dy);
    },
    handleEvent$2($event, entry) {
      this.super$RenderObject$handleEvent($event, entry);
    }
  };
  A.RenderBox_getDryLayout_closure.prototype = {
    call$0() {
      return this.$this.computeDryLayout$1(this.constraints);
    },
    $signature: 171
  };
  A.RenderBox_getDistanceToActualBaseline_closure.prototype = {
    call$0() {
      return this.$this.computeDistanceToActualBaseline$1(this.baseline);
    },
    $signature: 172
  };
  A.RenderBoxContainerDefaultsMixin.prototype = {
    defaultComputeDistanceToFirstActualBaseline$1(baseline) {
      var t1, childParentData, result,
        child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = A._instanceType(this)._eval$1("RenderBoxContainerDefaultsMixin.1?"); child != null;) {
        childParentData = t1._as(child.parentData);
        result = child.getDistanceToActualBaseline$1(baseline);
        if (result != null)
          return result + childParentData.offset._dy;
        child = childParentData.ContainerParentDataMixin_nextSibling;
      }
      return null;
    },
    defaultComputeDistanceToHighestActualBaseline$1(baseline) {
      var t1, result, t2, candidate,
        child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = A._instanceType(this)._eval$1("RenderBoxContainerDefaultsMixin.1"), result = null; child != null;) {
        t2 = child.parentData;
        t2.toString;
        t1._as(t2);
        candidate = child.getDistanceToActualBaseline$1(baseline);
        if (candidate != null) {
          candidate += t2.offset._dy;
          result = result != null ? Math.min(result, candidate) : candidate;
        }
        child = t2.ContainerParentDataMixin_nextSibling;
      }
      return result;
    },
    defaultHitTestChildren$2$position(result, position) {
      var t2, child, _box_0 = {},
        t1 = _box_0.child = this.ContainerRenderObjectMixin__lastChild;
      for (t2 = A._instanceType(this)._eval$1("RenderBoxContainerDefaultsMixin.1"); t1 != null; t1 = child) {
        t1 = t1.parentData;
        t1.toString;
        t2._as(t1);
        if (result.addWithPaintOffset$3$hitTest$offset$position(new A.RenderBoxContainerDefaultsMixin_defaultHitTestChildren_closure(_box_0, position, t1), t1.offset, position))
          return true;
        child = t1.ContainerParentDataMixin_previousSibling;
        _box_0.child = child;
      }
      return false;
    },
    defaultPaint$2(context, offset) {
      var t1, t2, t3, t4, t5,
        child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = A._instanceType(this)._eval$1("RenderBoxContainerDefaultsMixin.1"), t2 = offset._dx, t3 = offset._dy; child != null;) {
        t4 = child.parentData;
        t4.toString;
        t1._as(t4);
        t5 = t4.offset;
        context.paintChild$2(child, new A.Offset(t5._dx + t2, t5._dy + t3));
        child = t4.ContainerParentDataMixin_nextSibling;
      }
    }
  };
  A.RenderBoxContainerDefaultsMixin_defaultHitTestChildren_closure.prototype = {
    call$2(result, transformed) {
      return this._box_0.child.hitTest$2$position(result, transformed);
    },
    $signature: 18
  };
  A._ContainerBoxParentData_BoxParentData_ContainerParentDataMixin.prototype = {
    detach$0(_) {
      this.super$ParentData$detach(0);
    }
  };
  A.DebugOverflowIndicatorMixin.prototype = {};
  A.RenderErrorBox.prototype = {
    RenderErrorBox$1(message) {
      var builder, t1, exception, _this = this,
        _s10_ = "_paragraph";
      try {
        t1 = _this.message;
        if (t1 !== "") {
          builder = A.ParagraphBuilder_ParagraphBuilder($.$get$RenderErrorBox_paragraphStyle());
          J.pushStyle$1$x(builder, $.$get$RenderErrorBox_textStyle());
          J.addText$1$x(builder, t1);
          t1 = J.build$0$x(builder);
          A._lateWriteOnceCheck(_this.__RenderErrorBox__paragraph, _s10_);
          _this.__RenderErrorBox__paragraph = t1;
        } else {
          A._lateWriteOnceCheck(_this.__RenderErrorBox__paragraph, _s10_);
          _this.__RenderErrorBox__paragraph = null;
        }
      } catch (exception) {
      }
    },
    get$sizedByParent() {
      return true;
    },
    hitTestSelf$1(position) {
      return true;
    },
    computeDryLayout$1(constraints) {
      return constraints.constrain$1(B.Size_100000_100000);
    },
    paint$2(context, offset) {
      var width, left, $top, t1, t2, t3, t4, t5, t6, exception, _this = this,
        _s10_ = "_paragraph";
      try {
        t1 = context.get$canvas(context);
        t2 = _this._size;
        t3 = offset._dx;
        t4 = offset._dy;
        t5 = t2._dx;
        t2 = t2._dy;
        t6 = $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData());
        t6.set$color(0, $.$get$RenderErrorBox_backgroundColor());
        t1.drawRect$2(0, new A.Rect(t3, t4, t3 + t5, t4 + t2), t6);
        if (A._lateReadCheck(_this.__RenderErrorBox__paragraph, _s10_) != null) {
          width = _this._size._dx;
          left = 0;
          $top = 0;
          if (width > 328) {
            width -= 128;
            left += 64;
          }
          A._lateReadCheck(_this.__RenderErrorBox__paragraph, _s10_).layout$1(0, new A.ParagraphConstraints(width));
          t1 = _this._size._dy;
          t2 = A._lateReadCheck(_this.__RenderErrorBox__paragraph, _s10_);
          if (t1 > 96 + t2.get$height(t2) + 12)
            $top += 96;
          t1 = context.get$canvas(context);
          t2 = A._lateReadCheck(_this.__RenderErrorBox__paragraph, _s10_);
          t2.toString;
          t1.drawParagraph$2(0, t2, offset.$add(0, new A.Offset(left, $top)));
        }
      } catch (exception) {
      }
    }
  };
  A.FlexParentData.prototype = {
    toString$0(_) {
      return this.super$BoxParentData$toString(0) + "; flex=null; fit=null";
    }
  };
  A.MainAxisSize.prototype = {
    toString$0(_) {
      return "MainAxisSize." + this._name;
    }
  };
  A.MainAxisAlignment.prototype = {
    toString$0(_) {
      return "MainAxisAlignment." + this._name;
    }
  };
  A.CrossAxisAlignment.prototype = {
    toString$0(_) {
      return "CrossAxisAlignment." + this._name;
    }
  };
  A.RenderFlex.prototype = {
    setupParentData$1(child) {
      if (!(child.parentData instanceof A.FlexParentData))
        child.parentData = new A.FlexParentData(null, null, B.Offset_0_0);
    },
    computeDistanceToActualBaseline$1(baseline) {
      if (this._direction === B.Axis_0)
        return this.defaultComputeDistanceToHighestActualBaseline$1(baseline);
      return this.defaultComputeDistanceToFirstActualBaseline$1(baseline);
    },
    _getCrossSize$1(size) {
      switch (this._direction.index) {
        case 0:
          return size._dy;
        case 1:
          return size._dx;
      }
    },
    _getMainSize$1(size) {
      switch (this._direction.index) {
        case 0:
          return size._dx;
        case 1:
          return size._dy;
      }
    },
    computeDryLayout$1(constraints) {
      var sizes;
      if (this._crossAxisAlignment === B.CrossAxisAlignment_4)
        return B.Size_0_0;
      sizes = this._computeSizes$2$constraints$layoutChild(constraints, A.layout_helper_ChildLayoutHelper_dryLayoutChild$closure());
      switch (this._direction.index) {
        case 0:
          return constraints.constrain$1(new A.Size(sizes.mainSize, sizes.crossSize));
        case 1:
          return constraints.constrain$1(new A.Size(sizes.crossSize, sizes.mainSize));
      }
    },
    _computeSizes$2$constraints$layoutChild(constraints, layoutChild) {
      var t1, t2, t3, lastFlexChild, totalFlex, crossSize, allocatedSize, t4, innerConstraints, childSize, _this = this, _null = null,
        maxMainSize = _this._direction === B.Axis_0 ? constraints.maxWidth : constraints.maxHeight,
        canFlex = maxMainSize < 1 / 0,
        child = _this.ContainerRenderObjectMixin__firstChild;
      for (t1 = type$.FlexParentData, t2 = constraints.maxWidth, t3 = constraints.maxHeight, lastFlexChild = _null, totalFlex = 0, crossSize = 0, allocatedSize = 0; child != null;) {
        t4 = child.parentData;
        t4.toString;
        t1._as(t4);
        if (_this._crossAxisAlignment === B.CrossAxisAlignment_3)
          switch (_this._direction.index) {
            case 0:
              innerConstraints = A.BoxConstraints$tightFor(t3, _null);
              break;
            case 1:
              innerConstraints = A.BoxConstraints$tightFor(_null, t2);
              break;
            default:
              innerConstraints = _null;
          }
        else
          switch (_this._direction.index) {
            case 0:
              innerConstraints = new A.BoxConstraints(0, 1 / 0, 0, t3);
              break;
            case 1:
              innerConstraints = new A.BoxConstraints(0, t2, 0, 1 / 0);
              break;
            default:
              innerConstraints = _null;
          }
        childSize = layoutChild.call$2(child, innerConstraints);
        allocatedSize += _this._getMainSize$1(childSize);
        crossSize = Math.max(crossSize, A.checkNum(_this._getCrossSize$1(childSize)));
        child = t4.ContainerParentDataMixin_nextSibling;
      }
      Math.max(0, (canFlex ? maxMainSize : 0) - allocatedSize);
      return new A._LayoutSizes(canFlex && _this._mainAxisSize === B.MainAxisSize_1 ? maxMainSize : allocatedSize, crossSize, allocatedSize);
    },
    performLayout$0() {
      var child, t1, maxBaselineDistance, maxSizeAboveBaseline, maxSizeBelowBaseline, t2, distance, actualSizeDelta, remainingSpace, leadingSpace, betweenSpace, flipMainAxis, childMainPosition, t3, t4, t5, childCrossPosition, t6, _this = this,
        constraints = A.RenderObject.prototype.get$constraints.call(_this),
        sizes = _this._computeSizes$2$constraints$layoutChild(constraints, A.layout_helper_ChildLayoutHelper_layoutChild$closure()),
        actualSize = sizes.mainSize,
        crossSize = sizes.crossSize;
      if (_this._crossAxisAlignment === B.CrossAxisAlignment_4) {
        child = _this.ContainerRenderObjectMixin__firstChild;
        for (t1 = type$.FlexParentData, maxBaselineDistance = 0, maxSizeAboveBaseline = 0, maxSizeBelowBaseline = 0; child != null;) {
          t2 = _this._flex$_textBaseline;
          t2.toString;
          distance = child.getDistanceToBaseline$2$onlyReal(t2, true);
          if (distance != null) {
            maxBaselineDistance = Math.max(maxBaselineDistance, distance);
            maxSizeAboveBaseline = Math.max(distance, maxSizeAboveBaseline);
            maxSizeBelowBaseline = Math.max(child._size._dy - distance, maxSizeBelowBaseline);
            crossSize = Math.max(maxSizeAboveBaseline + maxSizeBelowBaseline, crossSize);
          }
          t2 = child.parentData;
          t2.toString;
          child = t1._as(t2).ContainerParentDataMixin_nextSibling;
        }
      } else
        maxBaselineDistance = 0;
      switch (_this._direction.index) {
        case 0:
          t1 = _this._size = constraints.constrain$1(new A.Size(actualSize, crossSize));
          actualSize = t1._dx;
          crossSize = t1._dy;
          break;
        case 1:
          t1 = _this._size = constraints.constrain$1(new A.Size(crossSize, actualSize));
          actualSize = t1._dy;
          crossSize = t1._dx;
          break;
      }
      actualSizeDelta = actualSize - sizes.allocatedSize;
      _this._overflow = Math.max(0, -actualSizeDelta);
      remainingSpace = Math.max(0, actualSizeDelta);
      leadingSpace = A._Cell$named("leadingSpace");
      betweenSpace = A._Cell$named("betweenSpace");
      t1 = A._startIsTopLeft(_this._direction, _this._textDirection, _this._verticalDirection);
      flipMainAxis = t1 === false;
      switch (_this._mainAxisAlignment.index) {
        case 0:
          leadingSpace.set$finalLocalValue(0);
          betweenSpace.set$finalLocalValue(0);
          break;
        case 1:
          leadingSpace.set$finalLocalValue(remainingSpace);
          betweenSpace.set$finalLocalValue(0);
          break;
        case 2:
          leadingSpace.set$finalLocalValue(remainingSpace / 2);
          betweenSpace.set$finalLocalValue(0);
          break;
        case 3:
          leadingSpace.set$finalLocalValue(0);
          t1 = _this.ContainerRenderObjectMixin__childCount;
          betweenSpace.set$finalLocalValue(t1 > 1 ? remainingSpace / (t1 - 1) : 0);
          break;
        case 4:
          t1 = _this.ContainerRenderObjectMixin__childCount;
          betweenSpace.set$finalLocalValue(t1 > 0 ? remainingSpace / t1 : 0);
          leadingSpace.set$finalLocalValue(betweenSpace._readLocal$0() / 2);
          break;
        case 5:
          t1 = _this.ContainerRenderObjectMixin__childCount;
          betweenSpace.set$finalLocalValue(t1 > 0 ? remainingSpace / (t1 + 1) : 0);
          leadingSpace.set$finalLocalValue(betweenSpace._readLocal$0());
          break;
      }
      childMainPosition = flipMainAxis ? actualSize - leadingSpace._readLocal$0() : leadingSpace._readLocal$0();
      child = _this.ContainerRenderObjectMixin__firstChild;
      for (t1 = type$.FlexParentData, t2 = crossSize / 2, t3 = betweenSpace.__late_helper$_name; child != null;) {
        t4 = child.parentData;
        t4.toString;
        t1._as(t4);
        t5 = _this._crossAxisAlignment;
        switch (t5.index) {
          case 0:
          case 1:
            if (A._startIsTopLeft(A.flipAxis(_this._direction), _this._textDirection, _this._verticalDirection) === (t5 === B.CrossAxisAlignment_0))
              childCrossPosition = 0;
            else {
              t5 = child._size;
              t5.toString;
              childCrossPosition = crossSize - _this._getCrossSize$1(t5);
            }
            break;
          case 2:
            t5 = child._size;
            t5.toString;
            childCrossPosition = t2 - _this._getCrossSize$1(t5) / 2;
            break;
          case 3:
            childCrossPosition = 0;
            break;
          case 4:
            if (_this._direction === B.Axis_0) {
              t5 = _this._flex$_textBaseline;
              t5.toString;
              distance = child.getDistanceToBaseline$2$onlyReal(t5, true);
              childCrossPosition = distance != null ? maxBaselineDistance - distance : 0;
            } else
              childCrossPosition = 0;
            break;
          default:
            childCrossPosition = null;
        }
        if (flipMainAxis) {
          t5 = child._size;
          t5.toString;
          childMainPosition -= _this._getMainSize$1(t5);
        }
        switch (_this._direction.index) {
          case 0:
            t4.offset = new A.Offset(childMainPosition, childCrossPosition);
            break;
          case 1:
            t4.offset = new A.Offset(childCrossPosition, childMainPosition);
            break;
        }
        if (flipMainAxis) {
          t5 = betweenSpace.__late_helper$_value;
          if (t5 === betweenSpace)
            A.throwExpression(A.LateError$localNI(t3));
          childMainPosition -= t5;
        } else {
          t5 = child._size;
          t5.toString;
          t5 = _this._getMainSize$1(t5);
          t6 = betweenSpace.__late_helper$_value;
          if (t6 === betweenSpace)
            A.throwExpression(A.LateError$localNI(t3));
          childMainPosition += t5 + t6;
        }
        child = t4.ContainerParentDataMixin_nextSibling;
      }
    },
    hitTestChildren$2$position(result, position) {
      return this.defaultHitTestChildren$2$position(result, position);
    },
    paint$2(context, offset) {
      var t1, t2, t3, _this = this;
      if (!(_this._overflow > 1e-10)) {
        _this.defaultPaint$2(context, offset);
        return;
      }
      t1 = _this._size;
      if (t1.get$isEmpty(t1))
        return;
      t1 = _this._clipRectLayer;
      if (_this._clipBehavior === B.Clip_0) {
        t1.set$layer(0, null);
        _this.defaultPaint$2(context, offset);
      } else {
        t2 = A._lateReadCheck(_this.__RenderObject__needsCompositing, "_needsCompositing");
        t3 = _this._size;
        t1.set$layer(0, context.pushClipRect$6$clipBehavior$oldLayer(t2, offset, new A.Rect(0, 0, 0 + t3._dx, 0 + t3._dy), _this.get$defaultPaint(), _this._clipBehavior, t1._layer));
      }
    },
    dispose$0(_) {
      this._clipRectLayer.set$layer(0, null);
      this.super$RenderObject$dispose(0);
    },
    describeApproximatePaintClip$1(child) {
      var t1;
      if (this._overflow > 1e-10) {
        t1 = this._size;
        t1 = new A.Rect(0, 0, 0 + t1._dx, 0 + t1._dy);
      } else
        t1 = null;
      return t1;
    },
    toStringShort$0() {
      var header = this.super$RenderObject$toStringShort();
      if (this._overflow > 1e-10)
        header += " OVERFLOWING";
      return header;
    }
  };
  A._LayoutSizes.prototype = {};
  A._RenderFlex_RenderBox_ContainerRenderObjectMixin.prototype = {
    attach$1(owner) {
      var child, t1, t2;
      this.super$RenderObject$attach(owner);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = type$.FlexParentData; child != null;) {
        child.attach$1(owner);
        t2 = child.parentData;
        t2.toString;
        child = t1._as(t2).ContainerParentDataMixin_nextSibling;
      }
    },
    detach$0(_) {
      var child, t1, t2;
      this.super$AbstractNode$detach(0);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = type$.FlexParentData; child != null;) {
        child.detach$0(0);
        t2 = child.parentData;
        t2.toString;
        child = t1._as(t2).ContainerParentDataMixin_nextSibling;
      }
    }
  };
  A._RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin.prototype = {};
  A._RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin_DebugOverflowIndicatorMixin.prototype = {
    reassemble$0() {
      this.super$RenderObject$reassemble();
    }
  };
  A.AnnotationResult.prototype = {};
  A.Layer0.prototype = {
    dispose$0(_) {
      var t1 = this._engineLayer;
      if (t1 != null)
        t1.dispose$0(0);
      this._engineLayer = null;
    },
    markNeedsAddToScene$0() {
      if (this._needsAddToScene)
        return;
      this._needsAddToScene = true;
    },
    set$engineLayer(value) {
      var t2, _this = this,
        t1 = _this._engineLayer;
      if (t1 != null)
        t1.dispose$0(0);
      _this._engineLayer = value;
      t1 = type$.nullable_ContainerLayer;
      if (t1._as(A.AbstractNode.prototype.get$parent.call(_this, _this)) != null) {
        t1._as(A.AbstractNode.prototype.get$parent.call(_this, _this)).toString;
        t2 = true;
      } else
        t2 = false;
      if (t2)
        t1._as(A.AbstractNode.prototype.get$parent.call(_this, _this)).markNeedsAddToScene$0();
    },
    updateSubtreeNeedsAddToScene$0() {
      this._needsAddToScene = this._needsAddToScene || false;
    },
    dropChild$1(child) {
      this.markNeedsAddToScene$0();
      this.super$AbstractNode$dropChild(child);
    },
    remove$0(_) {
      var t2, t3, _this = this,
        t1 = type$.nullable_ContainerLayer._as(A.AbstractNode.prototype.get$parent.call(_this, _this));
      if (t1 != null) {
        t2 = _this._previousSibling;
        t3 = _this._nextSibling;
        if (t2 == null)
          t1._firstChild = t3;
        else
          t2._nextSibling = t3;
        t3 = _this._nextSibling;
        if (t3 == null)
          t1._lastChild = t2;
        else
          t3._previousSibling = t2;
        _this._nextSibling = _this._previousSibling = null;
        t1.dropChild$1(_this);
        _this._parentHandle.set$layer(0, null);
      }
    },
    findAnnotations$1$3$onlyFirst(result, localPosition, onlyFirst) {
      return false;
    },
    findAnnotations$3$onlyFirst(result, localPosition, onlyFirst) {
      return this.findAnnotations$1$3$onlyFirst(result, localPosition, onlyFirst, type$.Object);
    },
    find$1$1(_, localPosition, $S) {
      var t1 = A._setArrayType([], $S._eval$1("JSArray<AnnotationEntry<0>>"));
      this.findAnnotations$3$onlyFirst(new A.AnnotationResult(t1, $S._eval$1("AnnotationResult<0>")), localPosition, true);
      return t1.length === 0 ? null : B.JSArray_methods.get$first(t1).get$annotation();
    },
    _addToSceneWithRetainedRendering$1(builder) {
      var t1, _this = this;
      if (!_this._needsAddToScene && _this._engineLayer != null) {
        t1 = _this._engineLayer;
        t1.toString;
        builder.addRetained$1(t1);
        return;
      }
      _this.addToScene$1(builder);
      _this._needsAddToScene = false;
    },
    toStringShort$0() {
      var t1 = this.super$DiagnosticableTreeMixin$toStringShort();
      return t1 + (this._node$_owner == null ? " DETACHED" : "");
    },
    $isDiagnosticableTree: 1
  };
  A.LayerHandle.prototype = {
    set$layer(_, layer) {
      var t1 = this._layer;
      if (layer == t1)
        return;
      if (t1 != null)
        if (--t1._refCount === 0)
          t1.dispose$0(0);
      this._layer = layer;
      if (layer != null)
        ++layer._refCount;
    },
    toString$0(_) {
      var t1 = this._layer;
      return "LayerHandle(" + (t1 != null ? t1.toString$0(0) : "DISPOSED") + ")";
    }
  };
  A.PictureLayer.prototype = {
    set$picture(picture) {
      var t1;
      this.markNeedsAddToScene$0();
      t1 = this._picture;
      if (t1 != null)
        t1.dispose$0(0);
      this._picture = picture;
    },
    dispose$0(_) {
      this.set$picture(null);
      this.super$Layer$dispose(0);
    },
    addToScene$1(builder) {
      var t1 = this._picture;
      t1.toString;
      builder.addPicture$4$isComplexHint$willChangeHint(B.Offset_0_0, t1, this._isComplexHint, this._willChangeHint);
    },
    findAnnotations$1$3$onlyFirst(result, localPosition, onlyFirst) {
      return false;
    },
    findAnnotations$3$onlyFirst(result, localPosition, onlyFirst) {
      return this.findAnnotations$1$3$onlyFirst(result, localPosition, onlyFirst, type$.Object);
    }
  };
  A.ContainerLayer0.prototype = {
    buildScene$1(builder) {
      this.updateSubtreeNeedsAddToScene$0();
      this.addToScene$1(builder);
      this._needsAddToScene = false;
      return builder.build$0(0);
    },
    dispose$0(_) {
      this.removeAllChildren$0();
      this.super$Layer$dispose(0);
    },
    updateSubtreeNeedsAddToScene$0() {
      var child, _this = this;
      _this.super$Layer$updateSubtreeNeedsAddToScene();
      child = _this._firstChild;
      for (; child != null;) {
        child.updateSubtreeNeedsAddToScene$0();
        _this._needsAddToScene = _this._needsAddToScene || child._needsAddToScene;
        child = child._nextSibling;
      }
    },
    findAnnotations$1$3$onlyFirst(result, localPosition, onlyFirst) {
      var child, t1, t2;
      for (child = this._lastChild, t1 = result._layer$_entries; child != null; child = child._previousSibling) {
        if (child.findAnnotations$3$onlyFirst(result, localPosition, true))
          return true;
        t2 = t1.length;
        if (t2 !== 0)
          return false;
      }
      return false;
    },
    findAnnotations$3$onlyFirst(result, localPosition, onlyFirst) {
      return this.findAnnotations$1$3$onlyFirst(result, localPosition, onlyFirst, type$.Object);
    },
    attach$1(owner) {
      var child;
      this.super$AbstractNode$attach(owner);
      child = this._firstChild;
      for (; child != null;) {
        child.attach$1(owner);
        child = child._nextSibling;
      }
    },
    detach$0(_) {
      var child;
      this.super$AbstractNode$detach(0);
      child = this._firstChild;
      for (; child != null;) {
        child.detach$0(0);
        child = child._nextSibling;
      }
    },
    append$1(_, child) {
      var t1, _this = this;
      _this.markNeedsAddToScene$0();
      _this.super$AbstractNode$adoptChild(child);
      t1 = child._previousSibling = _this._lastChild;
      if (t1 != null)
        t1._nextSibling = child;
      _this._lastChild = child;
      if (_this._firstChild == null)
        _this._firstChild = child;
      child._parentHandle.set$layer(0, child);
    },
    removeAllChildren$0() {
      var next, _this = this,
        child = _this._firstChild;
      for (; child != null; child = next) {
        next = child._nextSibling;
        child._nextSibling = child._previousSibling = null;
        _this.markNeedsAddToScene$0();
        _this.super$AbstractNode$dropChild(child);
        child._parentHandle.set$layer(0, null);
      }
      _this._lastChild = _this._firstChild = null;
    },
    addToScene$1(builder) {
      this.addChildrenToScene$1(builder);
    },
    addChildrenToScene$1(builder) {
      var child = this._firstChild;
      for (; child != null;) {
        child._addToSceneWithRetainedRendering$1(builder);
        child = child._nextSibling;
      }
    },
    debugDescribeChildren$0() {
      var count,
        children = A._setArrayType([], type$.JSArray_DiagnosticsNode),
        child = this._firstChild;
      if (child == null)
        return children;
      for (count = 1; true;) {
        child.toString;
        children.push(new A.DiagnosticableTreeNode(child, "child " + count, true, true, null, null));
        if (child === this._lastChild)
          break;
        ++count;
        child = child._nextSibling;
      }
      return children;
    }
  };
  A.OffsetLayer.prototype = {
    findAnnotations$1$3$onlyFirst(result, localPosition, onlyFirst) {
      return this.super$ContainerLayer$findAnnotations(result, localPosition.$sub(0, this._layer$_offset), true);
    },
    findAnnotations$3$onlyFirst(result, localPosition, onlyFirst) {
      return this.findAnnotations$1$3$onlyFirst(result, localPosition, onlyFirst, type$.Object);
    },
    addToScene$1(builder) {
      var _this = this,
        t1 = _this._layer$_offset;
      _this.set$engineLayer(builder.pushOffset$3$oldLayer(t1._dx, t1._dy, type$.nullable_OffsetEngineLayer._as(_this._engineLayer)));
      _this.addChildrenToScene$1(builder);
      builder.pop$0(0);
    }
  };
  A.ClipRectLayer.prototype = {
    findAnnotations$1$3$onlyFirst(result, localPosition, onlyFirst) {
      var t1 = this._layer$_clipRect,
        t2 = localPosition._dx;
      if (t2 >= t1.left)
        if (t2 < t1.right) {
          t2 = localPosition._dy;
          t1 = t2 >= t1.top && t2 < t1.bottom;
        } else
          t1 = false;
      else
        t1 = false;
      if (!t1)
        return false;
      return this.super$ContainerLayer$findAnnotations(result, localPosition, true);
    },
    findAnnotations$3$onlyFirst(result, localPosition, onlyFirst) {
      return this.findAnnotations$1$3$onlyFirst(result, localPosition, onlyFirst, type$.Object);
    },
    addToScene$1(builder) {
      var _this = this,
        t1 = _this._layer$_clipRect;
      t1.toString;
      _this.set$engineLayer(builder.pushClipRect$3$clipBehavior$oldLayer(t1, _this._layer$_clipBehavior, type$.nullable_ClipRectEngineLayer._as(_this._engineLayer)));
      _this.addChildrenToScene$1(builder);
      builder.pop$0(0);
    }
  };
  A.ClipPathLayer.prototype = {
    findAnnotations$1$3$onlyFirst(result, localPosition, onlyFirst) {
      if (!this._clipPath.contains$1(0, localPosition))
        return false;
      return this.super$ContainerLayer$findAnnotations(result, localPosition, true);
    },
    findAnnotations$3$onlyFirst(result, localPosition, onlyFirst) {
      return this.findAnnotations$1$3$onlyFirst(result, localPosition, onlyFirst, type$.Object);
    },
    addToScene$1(builder) {
      var _this = this,
        t1 = _this._clipPath;
      t1.toString;
      _this.set$engineLayer(builder.pushClipPath$3$clipBehavior$oldLayer(t1, _this._layer$_clipBehavior, type$.nullable_ClipPathEngineLayer._as(_this._engineLayer)));
      _this.addChildrenToScene$1(builder);
      builder.pop$0(0);
    }
  };
  A.TransformLayer.prototype = {
    set$transform(_, value) {
      var _this = this;
      if (value.$eq(0, _this._layer$_transform))
        return;
      _this._layer$_transform = value;
      _this._inverseDirty = true;
      _this.markNeedsAddToScene$0();
    },
    addToScene$1(builder) {
      var t1, t2, _this = this;
      _this._lastEffectiveTransform = _this._layer$_transform;
      if (!_this._layer$_offset.$eq(0, B.Offset_0_0)) {
        t1 = _this._layer$_offset;
        t1 = A.Matrix4_Matrix4$translationValues(t1._dx, t1._dy, 0);
        t2 = _this._lastEffectiveTransform;
        t2.toString;
        t1.multiply$1(0, t2);
        _this._lastEffectiveTransform = t1;
      }
      _this.set$engineLayer(builder.pushTransform$2$oldLayer(_this._lastEffectiveTransform._m4storage, type$.nullable_TransformEngineLayer._as(_this._engineLayer)));
      _this.addChildrenToScene$1(builder);
      builder.pop$0(0);
    },
    _transformOffset$1(localPosition) {
      var t1, _this = this;
      if (_this._inverseDirty) {
        t1 = _this._layer$_transform;
        t1.toString;
        _this._invertedTransform = A.Matrix4_tryInvert(A.PointerEvent_removePerspectiveTransform(t1));
        _this._inverseDirty = false;
      }
      t1 = _this._invertedTransform;
      if (t1 == null)
        return null;
      return A.MatrixUtils_transformPoint(t1, localPosition);
    },
    findAnnotations$1$3$onlyFirst(result, localPosition, onlyFirst) {
      var transformedOffset = this._transformOffset$1(localPosition);
      if (transformedOffset == null)
        return false;
      return this.super$OffsetLayer$findAnnotations(result, transformedOffset, true);
    },
    findAnnotations$3$onlyFirst(result, localPosition, onlyFirst) {
      return this.findAnnotations$1$3$onlyFirst(result, localPosition, onlyFirst, type$.Object);
    }
  };
  A.PhysicalModelLayer.prototype = {
    set$clipPath(_, value) {
      if (value !== this._clipPath) {
        this._clipPath = value;
        this.markNeedsAddToScene$0();
      }
    },
    set$clipBehavior(value) {
      if (value !== this._layer$_clipBehavior) {
        this._layer$_clipBehavior = value;
        this.markNeedsAddToScene$0();
      }
    },
    set$elevation(_, value) {
      if (value !== this._layer$_elevation) {
        this._layer$_elevation = value;
        this.markNeedsAddToScene$0();
      }
    },
    set$color(_, value) {
      if (!value.$eq(0, this._layer$_color)) {
        this._layer$_color = value;
        this.markNeedsAddToScene$0();
      }
    },
    set$shadowColor(_, value) {
      if (!value.$eq(0, this._layer$_shadowColor)) {
        this._layer$_shadowColor = value;
        this.markNeedsAddToScene$0();
      }
    },
    findAnnotations$1$3$onlyFirst(result, localPosition, onlyFirst) {
      if (!this._clipPath.contains$1(0, localPosition))
        return false;
      return this.super$ContainerLayer$findAnnotations(result, localPosition, true);
    },
    findAnnotations$3$onlyFirst(result, localPosition, onlyFirst) {
      return this.findAnnotations$1$3$onlyFirst(result, localPosition, onlyFirst, type$.Object);
    },
    addToScene$1(builder) {
      var t2, t3, t4, _this = this,
        t1 = _this._clipPath;
      t1.toString;
      t2 = _this._layer$_elevation;
      t2.toString;
      t3 = _this._layer$_color;
      t3.toString;
      t4 = _this._layer$_shadowColor;
      _this.set$engineLayer(builder.pushPhysicalShape$6$clipBehavior$color$elevation$oldLayer$path$shadowColor(_this._layer$_clipBehavior, t3, t2, type$.nullable_PhysicalShapeEngineLayer._as(_this._engineLayer), t1, t4));
      _this.addChildrenToScene$1(builder);
      builder.pop$0(0);
    }
  };
  A._Layer_AbstractNode_DiagnosticableTreeMixin.prototype = {};
  A._MouseState.prototype = {
    replaceAnnotations$1(value) {
      var previous = this._annotations;
      this._annotations = value;
      return previous;
    },
    toString$0(_) {
      var _s16_ = "<optimized out>#",
        describeLatestEvent = "latestEvent: " + (_s16_ + A.shortHash(this._latestEvent)),
        describeAnnotations = "annotations: [list of " + this._annotations._length + "]";
      return _s16_ + A.shortHash(this) + "(" + describeLatestEvent + ", " + describeAnnotations + ")";
    }
  };
  A._MouseTrackerUpdateDetails.prototype = {
    get$device(_) {
      var t1 = this.previousEvent;
      return t1.get$device(t1);
    }
  };
  A.MouseTracker.prototype = {
    _hitTestResultToAnnotations$1(result) {
      var t2, t3, _i, entry, target, t4,
        t1 = type$.MouseTrackerAnnotation,
        annotations = A.LinkedHashMap_LinkedHashMap(null, null, t1, type$.Matrix4);
      for (t2 = result._path, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
        entry = t2[_i];
        target = entry.target;
        if (t1._is(target)) {
          t4 = entry._hit_test$_transform;
          t4.toString;
          annotations.$indexSet(0, target, t4);
        }
      }
      return annotations;
    },
    _findAnnotations$2(state, hitTest) {
      var t1 = state._latestEvent,
        globalPosition = t1.get$position(t1);
      t1 = state._latestEvent;
      if (!this._mouseStates.containsKey$1(0, t1.get$device(t1)))
        return A.LinkedHashMap_LinkedHashMap(null, null, type$.MouseTrackerAnnotation, type$.Matrix4);
      return this._hitTestResultToAnnotations$1(hitTest.call$1(globalPosition));
    },
    _handleDeviceUpdate$1(details) {
      var t1, t2;
      A.MouseTracker__handleDeviceUpdateMouseEvents(details);
      t1 = details.nextAnnotations;
      t2 = A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>");
      this._mouseCursorMixin.handleDeviceCursorUpdate$3(details.get$device(details), details.triggeringEvent, A.MappedIterable_MappedIterable(new A.LinkedHashMapKeyIterable(t1, t2), new A.MouseTracker__handleDeviceUpdate_closure(), t2._eval$1("Iterable.E"), type$.MouseCursor));
    },
    updateWithEvent$2($event, getResult) {
      var result, device, t1, existingState, t2;
      if ($event.get$kind($event) !== B.PointerDeviceKind_1)
        return;
      if (type$.PointerSignalEvent._is($event))
        return;
      result = type$.PointerRemovedEvent._is($event) ? A.HitTestResult$() : getResult.call$0();
      device = $event.get$device($event);
      t1 = this._mouseStates;
      existingState = t1.$index(0, device);
      if (!A.MouseTracker__shouldMarkStateDirty(existingState, $event))
        return;
      t2 = t1._length;
      new A.MouseTracker_updateWithEvent_closure(this, existingState, $event, device, result).call$0();
      if (t2 !== 0 !== (t1._length !== 0))
        this.notifyListeners$0();
    },
    updateAllDevices$1(hitTest) {
      new A.MouseTracker_updateAllDevices_closure(this, hitTest).call$0();
    }
  };
  A.MouseTracker__handleDeviceUpdate_closure.prototype = {
    call$1(annotation) {
      return annotation.get$cursor(annotation);
    },
    $signature: 174
  };
  A.MouseTracker_updateWithEvent_closure.prototype = {
    call$0() {
      var _this = this;
      new A.MouseTracker_updateWithEvent__closure(_this.$this, _this.existingState, _this.event, _this.device, _this.result).call$0();
    },
    $signature: 0
  };
  A.MouseTracker_updateWithEvent__closure.prototype = {
    call$0() {
      var t2, t3, targetState, previous, nextAnnotations, _this = this, _null = null,
        t1 = _this.existingState;
      if (t1 == null) {
        t2 = _this.event;
        _this.$this._mouseStates.$indexSet(0, _this.device, new A._MouseState(A.LinkedHashMap_LinkedHashMap(_null, _null, type$.MouseTrackerAnnotation, type$.Matrix4), t2));
      } else {
        t2 = _this.event;
        if (type$.PointerRemovedEvent._is(t2))
          _this.$this._mouseStates.remove$1(0, t2.get$device(t2));
      }
      t3 = _this.$this;
      targetState = t3._mouseStates.$index(0, _this.device);
      if (targetState == null) {
        t1.toString;
        targetState = t1;
      }
      previous = targetState._latestEvent;
      targetState._latestEvent = t2;
      nextAnnotations = type$.PointerRemovedEvent._is(t2) ? A.LinkedHashMap_LinkedHashMap(_null, _null, type$.MouseTrackerAnnotation, type$.Matrix4) : t3._hitTestResultToAnnotations$1(_this.result);
      t3._handleDeviceUpdate$1(new A._MouseTrackerUpdateDetails(targetState.replaceAnnotations$1(nextAnnotations), nextAnnotations, previous, t2));
    },
    $signature: 0
  };
  A.MouseTracker_updateAllDevices_closure.prototype = {
    call$0() {
      var t1, t2, t3, t4, t5, lastEvent, nextAnnotations, previous;
      for (t1 = this.$this, t2 = t1._mouseStates, t2 = t2.get$values(t2), t2 = new A.MappedIterator(J.get$iterator$ax(t2.__internal$_iterable), t2._f), t3 = this.hitTest, t4 = A._instanceType(t2)._rest[1]; t2.moveNext$0();) {
        t5 = t2.__internal$_current;
        if (t5 == null)
          t5 = t4._as(t5);
        lastEvent = t5._latestEvent;
        nextAnnotations = t1._findAnnotations$2(t5, t3);
        previous = t5._annotations;
        t5._annotations = nextAnnotations;
        t1._handleDeviceUpdate$1(new A._MouseTrackerUpdateDetails(previous, nextAnnotations, lastEvent, null));
      }
    },
    $signature: 0
  };
  A.MouseTracker__handleDeviceUpdateMouseEvents_closure.prototype = {
    call$2(annotation, transform) {
      var t1;
      if (!this.nextAnnotations.containsKey$1(0, annotation))
        if (annotation.get$validForMouseTracker() && annotation.get$onExit(annotation) != null) {
          t1 = annotation.get$onExit(annotation);
          t1.toString;
          t1.call$1(this.baseExitEvent.transformed$1(this.lastAnnotations.$index(0, annotation)));
        }
    },
    $signature: 175
  };
  A.MouseTracker__handleDeviceUpdateMouseEvents_closure0.prototype = {
    call$1(annotation) {
      return !this.lastAnnotations.containsKey$1(0, annotation);
    },
    $signature: 176
  };
  A.__MouseTrackerUpdateDetails_Object_Diagnosticable.prototype = {};
  A.ParentData.prototype = {
    detach$0(_) {
    },
    toString$0(_) {
      return "<none>";
    }
  };
  A.PaintingContext.prototype = {
    paintChild$2(child, offset) {
      child._paintWithContext$2(this, offset);
    },
    appendLayer$1(layer) {
      layer.remove$0(0);
      this._containerLayer.append$1(0, layer);
    },
    get$canvas(_) {
      var t1, _this = this;
      if (_this._canvas == null) {
        _this._currentLayer = new A.PictureLayer(_this.estimatedBounds, A.LayerHandle$());
        t1 = A.PictureRecorder_PictureRecorder();
        _this._recorder = t1;
        _this._canvas = A.Canvas_Canvas(t1);
        t1 = _this._currentLayer;
        t1.toString;
        _this._containerLayer.append$1(0, t1);
      }
      t1 = _this._canvas;
      t1.toString;
      return t1;
    },
    stopRecordingIfNeeded$0() {
      var t1, _this = this;
      if (_this._canvas == null)
        return;
      t1 = _this._currentLayer;
      t1.toString;
      t1.set$picture(_this._recorder.endRecording$0());
      _this._canvas = _this._recorder = _this._currentLayer = null;
    },
    setIsComplexHint$0() {
      var t1 = this._currentLayer;
      if (t1 != null)
        if (!t1._isComplexHint) {
          t1._isComplexHint = true;
          t1.markNeedsAddToScene$0();
        }
    },
    pushLayer$4$childPaintBounds(childLayer, painter, offset, childPaintBounds) {
      var childContext, _this = this;
      if (childLayer._firstChild != null)
        childLayer.removeAllChildren$0();
      _this.stopRecordingIfNeeded$0();
      _this.appendLayer$1(childLayer);
      childContext = _this.createChildContext$2(childLayer, childPaintBounds == null ? _this.estimatedBounds : childPaintBounds);
      painter.call$2(childContext, offset);
      childContext.stopRecordingIfNeeded$0();
    },
    createChildContext$2(childLayer, bounds) {
      return new A.PaintingContext(childLayer, bounds);
    },
    pushClipRect$6$clipBehavior$oldLayer(needsCompositing, offset, clipRect, painter, clipBehavior, oldLayer) {
      var layer,
        offsetClipRect = clipRect.shift$1(offset);
      if (needsCompositing) {
        layer = oldLayer == null ? new A.ClipRectLayer(B.Clip_1, A.LayerHandle$()) : oldLayer;
        if (!offsetClipRect.$eq(0, layer._layer$_clipRect)) {
          layer._layer$_clipRect = offsetClipRect;
          layer.markNeedsAddToScene$0();
        }
        if (clipBehavior !== layer._layer$_clipBehavior) {
          layer._layer$_clipBehavior = clipBehavior;
          layer.markNeedsAddToScene$0();
        }
        this.pushLayer$4$childPaintBounds(layer, painter, offset, offsetClipRect);
        return layer;
      } else {
        this.clipRectAndPaint$4(offsetClipRect, clipBehavior, offsetClipRect, new A.PaintingContext_pushClipRect_closure(this, painter, offset));
        return null;
      }
    },
    pushClipPath$7$clipBehavior$oldLayer(needsCompositing, offset, bounds, clipPath, painter, clipBehavior, oldLayer) {
      var layer,
        offsetBounds = bounds.shift$1(offset),
        offsetClipPath = clipPath.shift$1(offset);
      if (needsCompositing) {
        layer = oldLayer == null ? new A.ClipPathLayer(B.Clip_2, A.LayerHandle$()) : oldLayer;
        if (offsetClipPath !== layer._clipPath) {
          layer._clipPath = offsetClipPath;
          layer.markNeedsAddToScene$0();
        }
        if (clipBehavior !== layer._layer$_clipBehavior) {
          layer._layer$_clipBehavior = clipBehavior;
          layer.markNeedsAddToScene$0();
        }
        this.pushLayer$4$childPaintBounds(layer, painter, offset, offsetBounds);
        return layer;
      } else {
        this.clipPathAndPaint$4(offsetClipPath, clipBehavior, offsetBounds, new A.PaintingContext_pushClipPath_closure(this, painter, offset));
        return null;
      }
    },
    pushTransform$5$oldLayer(needsCompositing, offset, transform, painter, oldLayer) {
      var layer, _this = this,
        t1 = offset._dx,
        t2 = offset._dy,
        effectiveTransform = A.Matrix4_Matrix4$translationValues(t1, t2, 0);
      effectiveTransform.multiply$1(0, transform);
      effectiveTransform.translate$2(0, -t1, -t2);
      if (needsCompositing) {
        layer = oldLayer == null ? A.TransformLayer$(null) : oldLayer;
        layer.set$transform(0, effectiveTransform);
        _this.pushLayer$4$childPaintBounds(layer, painter, offset, A.MatrixUtils_inverseTransformRect(effectiveTransform, _this.estimatedBounds));
        return layer;
      } else {
        t1 = _this.get$canvas(_this);
        t1.save$0(0);
        t1.transform$1(0, effectiveTransform._m4storage);
        painter.call$2(_this, offset);
        _this.get$canvas(_this).restore$0(0);
        return null;
      }
    },
    pushTransform$4(needsCompositing, offset, transform, painter) {
      return this.pushTransform$5$oldLayer(needsCompositing, offset, transform, painter, null);
    },
    toString$0(_) {
      return "PaintingContext#" + A.Primitives_objectHashCode(this) + "(layer: " + this._containerLayer.toString$0(0) + ", canvas bounds: " + this.estimatedBounds.toString$0(0) + ")";
    }
  };
  A.PaintingContext_pushClipRect_closure.prototype = {
    call$0() {
      return this.painter.call$2(this.$this, this.offset);
    },
    $signature: 0
  };
  A.PaintingContext_pushClipPath_closure.prototype = {
    call$0() {
      return this.painter.call$2(this.$this, this.offset);
    },
    $signature: 0
  };
  A.Constraints.prototype = {};
  A.SemanticsHandle.prototype = {};
  A.PipelineOwner.prototype = {
    requestVisualUpdate$0() {
      this.onNeedVisualUpdate.call$0();
    },
    set$rootNode(value) {
      var t1 = this._rootNode;
      if (t1 === value)
        return;
      if (t1 != null)
        t1.detach$0(0);
      this._rootNode = value;
      value.attach$1(this);
    },
    flushLayout$0() {
      var dirtyNodes, node, t1, t2, t3, t4, t5, _i;
      A.Timeline_startSync("LAYOUT", B.Map_9aZ6I, null);
      try {
        for (t1 = type$.nullable_PipelineOwner, t2 = type$.JSArray_RenderObject; t3 = this._nodesNeedingLayout, t3.length !== 0;) {
          dirtyNodes = t3;
          this._nodesNeedingLayout = A._setArrayType([], t2);
          t3 = dirtyNodes;
          t4 = new A.PipelineOwner_flushLayout_closure();
          if (!!t3.immutable$list)
            A.throwExpression(A.UnsupportedError$("sort"));
          t5 = t3.length - 1;
          if (t5 - 0 <= 32)
            A.Sort__insertionSort(t3, 0, t5, t4);
          else
            A.Sort__dualPivotQuicksort(t3, 0, t5, t4);
          t4 = t3.length;
          _i = 0;
          for (; _i < t3.length; t3.length === t4 || (0, A.throwConcurrentModificationError)(t3), ++_i) {
            node = t3[_i];
            if (node._needsLayout) {
              t5 = node;
              t5 = t1._as(A.AbstractNode.prototype.get$owner.call(t5)) === this;
            } else
              t5 = false;
            if (t5)
              node._layoutWithoutResize$0();
          }
        }
      } finally {
        A.Timeline_finishSync();
      }
    },
    flushCompositingBits$0() {
      var t1, t2, t3, _i, node;
      A.Timeline_startSync("UPDATING COMPOSITING BITS", B.Map_9aZ6I, null);
      t1 = this._nodesNeedingCompositingBitsUpdate;
      B.JSArray_methods.sort$1(t1, new A.PipelineOwner_flushCompositingBits_closure());
      for (t2 = t1.length, t3 = type$.nullable_PipelineOwner, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        node = t1[_i];
        if (node._needsCompositingBitsUpdate && t3._as(A.AbstractNode.prototype.get$owner.call(node)) === this)
          node._updateCompositingBits$0();
      }
      B.JSArray_methods.set$length(t1, 0);
      A.Timeline_finishSync();
    },
    flushPaint$0() {
      var dirtyNodes, node, t1, t2, t3, _i, t4;
      A.Timeline_startSync("PAINT", B.Map_9aZ6I, null);
      try {
        dirtyNodes = this._nodesNeedingPaint;
        this._nodesNeedingPaint = A._setArrayType([], type$.JSArray_RenderObject);
        for (t1 = dirtyNodes, J.sort$1$ax(t1, new A.PipelineOwner_flushPaint_closure()), t2 = t1.length, t3 = type$.nullable_PipelineOwner, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
          node = t1[_i];
          if (node._needsPaint) {
            t4 = node;
            t4 = t3._as(A.AbstractNode.prototype.get$owner.call(t4)) === this;
          } else
            t4 = false;
          if (t4)
            if (node._layerHandle._layer._node$_owner != null)
              A.PaintingContext__repaintCompositedChild(node, null, false);
            else
              node._skippedPaintingOnLayer$0();
        }
      } finally {
        A.Timeline_finishSync();
      }
    },
    flushSemantics$0() {
      var nodesToProcess, node, t1, nodesToProcess0, t2, t3, _i, t4, _this = this;
      if (_this._semanticsOwner == null)
        return;
      A.Timeline_startSync("SEMANTICS", B.Map_9aZ6I, null);
      try {
        t1 = _this._nodesNeedingSemantics;
        nodesToProcess0 = A.List_List$of(t1, true, A._instanceType(t1)._eval$1("SetMixin.E"));
        B.JSArray_methods.sort$1(nodesToProcess0, new A.PipelineOwner_flushSemantics_closure());
        nodesToProcess = nodesToProcess0;
        t1.clear$0(0);
        for (t1 = nodesToProcess, t2 = t1.length, t3 = type$.nullable_PipelineOwner, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
          node = t1[_i];
          if (node._needsSemanticsUpdate) {
            t4 = node;
            t4 = t3._as(A.AbstractNode.prototype.get$owner.call(t4)) === _this;
          } else
            t4 = false;
          if (t4)
            node._updateSemantics$0();
        }
        _this._semanticsOwner.sendSemanticsUpdate$0();
      } finally {
        A.Timeline_finishSync();
      }
    }
  };
  A.PipelineOwner_flushLayout_closure.prototype = {
    call$2(a, b) {
      return a._depth - b._depth;
    },
    $signature: 21
  };
  A.PipelineOwner_flushCompositingBits_closure.prototype = {
    call$2(a, b) {
      return a._depth - b._depth;
    },
    $signature: 21
  };
  A.PipelineOwner_flushPaint_closure.prototype = {
    call$2(a, b) {
      return a._depth - b._depth;
    },
    $signature: 21
  };
  A.PipelineOwner_flushSemantics_closure.prototype = {
    call$2(a, b) {
      return a._depth - b._depth;
    },
    $signature: 21
  };
  A.RenderObject.prototype = {
    reassemble$0() {
      var _this = this;
      _this.markNeedsLayout$0();
      _this.markNeedsCompositingBitsUpdate$0();
      _this.markNeedsPaint$0();
      _this.markNeedsSemanticsUpdate$0();
      _this.visitChildren$1(new A.RenderObject_reassemble_closure());
    },
    dispose$0(_) {
      this._layerHandle.set$layer(0, null);
    },
    setupParentData$1(child) {
      if (!(child.parentData instanceof A.ParentData))
        child.parentData = new A.ParentData();
    },
    adoptChild$1(child) {
      var _this = this;
      _this.setupParentData$1(child);
      _this.markNeedsLayout$0();
      _this.markNeedsCompositingBitsUpdate$0();
      _this.markNeedsSemanticsUpdate$0();
      _this.super$AbstractNode$adoptChild(child);
    },
    dropChild$1(child) {
      var _this = this;
      child._cleanRelayoutBoundary$0();
      child.parentData.detach$0(0);
      child.parentData = null;
      _this.super$AbstractNode$dropChild(child);
      _this.markNeedsLayout$0();
      _this.markNeedsCompositingBitsUpdate$0();
      _this.markNeedsSemanticsUpdate$0();
    },
    visitChildren$1(visitor) {
    },
    _debugReportException$3(method, exception, stack) {
      A.FlutterError_reportError(new A.FlutterErrorDetails(exception, stack, "rendering library", A.ErrorDescription$("during " + method + "()"), new A.RenderObject__debugReportException_closure(this), false));
    },
    attach$1(owner) {
      var _this = this;
      _this.super$AbstractNode$attach(owner);
      if (_this._needsLayout && _this._relayoutBoundary != null) {
        _this._needsLayout = false;
        _this.markNeedsLayout$0();
      }
      if (_this._needsCompositingBitsUpdate) {
        _this._needsCompositingBitsUpdate = false;
        _this.markNeedsCompositingBitsUpdate$0();
      }
      if (_this._needsPaint && _this._layerHandle._layer != null) {
        _this._needsPaint = false;
        _this.markNeedsPaint$0();
      }
      if (_this._needsSemanticsUpdate && _this.get$_semanticsConfiguration()._isSemanticBoundary) {
        _this._needsSemanticsUpdate = false;
        _this.markNeedsSemanticsUpdate$0();
      }
    },
    get$constraints() {
      var t1 = this._object$_constraints;
      if (t1 == null)
        throw A.wrapException(A.StateError$("A RenderObject does not have any constraints before it has been laid out."));
      return t1;
    },
    markNeedsLayout$0() {
      var t1, _this = this;
      if (_this._needsLayout)
        return;
      if (_this._relayoutBoundary !== _this)
        _this.markParentNeedsLayout$0();
      else {
        _this._needsLayout = true;
        t1 = type$.nullable_PipelineOwner;
        if (t1._as(A.AbstractNode.prototype.get$owner.call(_this)) != null) {
          t1._as(A.AbstractNode.prototype.get$owner.call(_this))._nodesNeedingLayout.push(_this);
          t1._as(A.AbstractNode.prototype.get$owner.call(_this)).requestVisualUpdate$0();
        }
      }
    },
    markParentNeedsLayout$0() {
      this._needsLayout = true;
      var t1 = this._node$_parent;
      t1.toString;
      type$.RenderObject._as(t1).markNeedsLayout$0();
    },
    _cleanRelayoutBoundary$0() {
      var _this = this;
      if (_this._relayoutBoundary !== _this) {
        _this._relayoutBoundary = null;
        _this._needsLayout = true;
        _this.visitChildren$1(A.object_RenderObject__cleanChildRelayoutBoundary$closure());
      }
    },
    _layoutWithoutResize$0() {
      var e, stack, exception, _this = this;
      try {
        _this.performLayout$0();
        _this.markNeedsSemanticsUpdate$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        stack = A.getTraceFromException(exception);
        _this._debugReportException$3("performLayout", e, stack);
      }
      _this._needsLayout = false;
      _this.markNeedsPaint$0();
    },
    layout$2$parentUsesSize(_, constraints, parentUsesSize) {
      var e, stack, e0, stack0, relayoutBoundary, exception, _this = this,
        t1 = $.debugProfileLayoutsEnabled;
      if (t1)
        A.Timeline_startSync(A.getRuntimeType(_this).toString$0(0), B.Map_9aZ6I, null);
      if (parentUsesSize)
        if (!_this.get$sizedByParent())
          t1 = constraints.minWidth >= constraints.maxWidth && constraints.minHeight >= constraints.maxHeight || !(_this._node$_parent instanceof A.RenderObject);
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        relayoutBoundary = _this;
      else {
        t1 = _this._node$_parent;
        t1.toString;
        relayoutBoundary = type$.RenderObject._as(t1)._relayoutBoundary;
      }
      if (!_this._needsLayout && constraints.$eq(0, _this._object$_constraints) && relayoutBoundary == _this._relayoutBoundary) {
        t1 = $.debugProfileLayoutsEnabled;
        if (t1)
          A.Timeline_finishSync();
        return;
      }
      _this._object$_constraints = constraints;
      t1 = _this._relayoutBoundary;
      if (t1 != null && relayoutBoundary !== t1)
        _this.visitChildren$1(A.object_RenderObject__cleanChildRelayoutBoundary$closure());
      _this._relayoutBoundary = relayoutBoundary;
      if (_this.get$sizedByParent())
        try {
          _this.performResize$0();
        } catch (exception) {
          e = A.unwrapException(exception);
          stack = A.getTraceFromException(exception);
          _this._debugReportException$3("performResize", e, stack);
        }
      try {
        _this.performLayout$0();
        _this.markNeedsSemanticsUpdate$0();
      } catch (exception) {
        e0 = A.unwrapException(exception);
        stack0 = A.getTraceFromException(exception);
        _this._debugReportException$3("performLayout", e0, stack0);
      }
      _this._needsLayout = false;
      _this.markNeedsPaint$0();
      t1 = $.debugProfileLayoutsEnabled;
      if (t1)
        A.Timeline_finishSync();
    },
    layout$1($receiver, constraints) {
      return this.layout$2$parentUsesSize($receiver, constraints, false);
    },
    get$sizedByParent() {
      return false;
    },
    get$isRepaintBoundary() {
      return false;
    },
    get$alwaysNeedsCompositing() {
      return false;
    },
    get$layer(_) {
      return this._layerHandle._layer;
    },
    markNeedsCompositingBitsUpdate$0() {
      var t1, _this = this;
      if (_this._needsCompositingBitsUpdate)
        return;
      _this._needsCompositingBitsUpdate = true;
      t1 = _this._node$_parent;
      if (t1 instanceof A.RenderObject) {
        if (t1._needsCompositingBitsUpdate)
          return;
        if (!_this.get$isRepaintBoundary() && !t1.get$isRepaintBoundary()) {
          t1.markNeedsCompositingBitsUpdate$0();
          return;
        }
      }
      t1 = type$.nullable_PipelineOwner;
      if (t1._as(A.AbstractNode.prototype.get$owner.call(_this)) != null)
        t1._as(A.AbstractNode.prototype.get$owner.call(_this))._nodesNeedingCompositingBitsUpdate.push(_this);
    },
    _updateCompositingBits$0() {
      var t1, _this = this,
        _s17_ = "_needsCompositing";
      if (!_this._needsCompositingBitsUpdate)
        return;
      t1 = A._lateReadCheck(_this.__RenderObject__needsCompositing, _s17_);
      _this.__RenderObject__needsCompositing = false;
      _this.visitChildren$1(new A.RenderObject__updateCompositingBits_closure(_this));
      if (_this.get$isRepaintBoundary() || _this.get$alwaysNeedsCompositing())
        _this.__RenderObject__needsCompositing = true;
      if (t1 !== A._lateReadCheck(_this.__RenderObject__needsCompositing, _s17_))
        _this.markNeedsPaint$0();
      _this._needsCompositingBitsUpdate = false;
    },
    markNeedsPaint$0() {
      var t1, _this = this;
      if (_this._needsPaint)
        return;
      _this._needsPaint = true;
      if (_this.get$isRepaintBoundary()) {
        t1 = type$.nullable_PipelineOwner;
        if (t1._as(A.AbstractNode.prototype.get$owner.call(_this)) != null) {
          t1._as(A.AbstractNode.prototype.get$owner.call(_this))._nodesNeedingPaint.push(_this);
          t1._as(A.AbstractNode.prototype.get$owner.call(_this)).requestVisualUpdate$0();
        }
      } else {
        t1 = _this._node$_parent;
        if (t1 instanceof A.RenderObject)
          t1.markNeedsPaint$0();
        else {
          t1 = type$.nullable_PipelineOwner;
          if (t1._as(A.AbstractNode.prototype.get$owner.call(_this)) != null)
            t1._as(A.AbstractNode.prototype.get$owner.call(_this)).requestVisualUpdate$0();
        }
      }
    },
    _skippedPaintingOnLayer$0() {
      var t1,
        node = this._node$_parent;
      for (; node instanceof A.RenderObject;) {
        if (node.get$isRepaintBoundary()) {
          t1 = node._layerHandle._layer;
          if (t1 == null)
            break;
          if (t1._node$_owner != null)
            break;
          node._needsPaint = true;
        }
        node = node._node$_parent;
      }
    },
    _paintWithContext$2(context, offset) {
      var e, stack, t1, exception, _this = this;
      if (_this._needsLayout)
        return;
      t1 = $.debugProfilePaintsEnabled;
      if (t1)
        A.Timeline_startSync(A.getRuntimeType(_this).toString$0(0), B.Map_9aZ6I, null);
      _this._needsPaint = false;
      try {
        _this.paint$2(context, offset);
      } catch (exception) {
        e = A.unwrapException(exception);
        stack = A.getTraceFromException(exception);
        _this._debugReportException$3("paint", e, stack);
      }
      t1 = $.debugProfilePaintsEnabled;
      if (t1)
        A.Timeline_finishSync();
    },
    paint$2(context, offset) {
    },
    applyPaintTransform$2(child, transform) {
    },
    getTransformTo$1(_, ancestor) {
      var renderers, t1, renderer, t2, transform, index, index0,
        rootNode = type$.nullable_PipelineOwner._as(A.AbstractNode.prototype.get$owner.call(this))._rootNode;
      if (rootNode instanceof A.RenderObject)
        ancestor = rootNode;
      renderers = A._setArrayType([], type$.JSArray_RenderObject);
      t1 = type$.RenderObject;
      renderer = this;
      while (renderer !== ancestor) {
        renderers.push(renderer);
        t2 = renderer._node$_parent;
        t2.toString;
        t1._as(t2);
        renderer = t2;
      }
      transform = new A.Matrix4(new Float64Array(16));
      transform.setIdentity$0();
      for (index = renderers.length - 1; index > 0; index = index0) {
        index0 = index - 1;
        renderers[index].applyPaintTransform$2(renderers[index0], transform);
      }
      return transform;
    },
    describeApproximatePaintClip$1(child) {
      return null;
    },
    describeSemanticsConfiguration$1(config) {
    },
    get$_semanticsConfiguration() {
      var t1, _this = this;
      if (_this._cachedSemanticsConfiguration == null) {
        t1 = A.SemanticsConfiguration$();
        _this._cachedSemanticsConfiguration = t1;
        _this.describeSemanticsConfiguration$1(t1);
      }
      t1 = _this._cachedSemanticsConfiguration;
      t1.toString;
      return t1;
    },
    get$debugSemantics() {
      var t1 = this._semantics;
      return t1;
    },
    clearSemantics$0() {
      this._needsSemanticsUpdate = true;
      this._semantics = null;
      this.visitChildren$1(new A.RenderObject_clearSemantics_closure());
    },
    markNeedsSemanticsUpdate$0() {
      var t1, wasSemanticsBoundary, isEffectiveSemanticsBoundary, node, t2, t3, _this = this;
      if (_this._node$_owner == null || type$.nullable_PipelineOwner._as(A.AbstractNode.prototype.get$owner.call(_this))._semanticsOwner == null) {
        _this._cachedSemanticsConfiguration = null;
        return;
      }
      if (_this._semantics != null) {
        t1 = _this._cachedSemanticsConfiguration;
        wasSemanticsBoundary = (t1 == null ? null : t1._isSemanticBoundary) === true;
      } else
        wasSemanticsBoundary = false;
      _this._cachedSemanticsConfiguration = null;
      isEffectiveSemanticsBoundary = _this.get$_semanticsConfiguration()._isSemanticBoundary && wasSemanticsBoundary;
      t1 = type$.RenderObject;
      node = _this;
      while (true) {
        if (!(!isEffectiveSemanticsBoundary && node._node$_parent instanceof A.RenderObject))
          break;
        if (node !== _this && node._needsSemanticsUpdate)
          break;
        node._needsSemanticsUpdate = true;
        t2 = node._node$_parent;
        t2.toString;
        t1._as(t2);
        if (t2._cachedSemanticsConfiguration == null) {
          t3 = A.SemanticsConfiguration$();
          t2._cachedSemanticsConfiguration = t3;
          t2.describeSemanticsConfiguration$1(t3);
        }
        isEffectiveSemanticsBoundary = t2._cachedSemanticsConfiguration._isSemanticBoundary;
        if (isEffectiveSemanticsBoundary && t2._semantics == null)
          return;
        node = t2;
      }
      if (node !== _this && _this._semantics != null && _this._needsSemanticsUpdate)
        type$.nullable_PipelineOwner._as(A.AbstractNode.prototype.get$owner.call(_this))._nodesNeedingSemantics.remove$1(0, _this);
      if (!node._needsSemanticsUpdate) {
        node._needsSemanticsUpdate = true;
        t1 = type$.nullable_PipelineOwner;
        if (t1._as(A.AbstractNode.prototype.get$owner.call(_this)) != null) {
          t1._as(A.AbstractNode.prototype.get$owner.call(_this))._nodesNeedingSemantics.add$1(0, node);
          t1._as(A.AbstractNode.prototype.get$owner.call(_this)).requestVisualUpdate$0();
        }
      }
    },
    _updateSemantics$0() {
      var t1, interestingFragment, result, t2, t3, t4, _this = this, _null = null;
      if (_this._needsLayout)
        return;
      t1 = _this._semantics;
      if (t1 == null)
        t1 = _null;
      else {
        t1 = type$.nullable_SemanticsNode._as(A.AbstractNode.prototype.get$parent.call(t1, t1));
        if (t1 == null)
          t1 = _null;
        else
          t1 = t1._isMergedIntoParent;
      }
      interestingFragment = type$._InterestingSemanticsFragment._as(_this._getSemanticsForParent$1$mergeIntoParent(t1 === true));
      result = A._setArrayType([], type$.JSArray_SemanticsNode);
      t1 = _this._semantics;
      t2 = t1 == null;
      t3 = t2 ? _null : t1.parentSemanticsClipRect;
      t4 = t2 ? _null : t1.parentPaintClipRect;
      t1 = t2 ? _null : t1.elevationAdjustment;
      interestingFragment.compileChildren$4$elevationAdjustment$parentPaintClipRect$parentSemanticsClipRect$result(t1 == null ? 0 : t1, t4, t3, result);
      B.JSArray_methods.get$single(result);
    },
    _getSemanticsForParent$1$mergeIntoParent(mergeIntoParent) {
      var producesForkingFragment, t1, fragments, toBeMarkedExplicit, t2, t3, t4, result, _this = this, _box_0 = {},
        config = _this.get$_semanticsConfiguration();
      _box_0.dropSemanticsOfPreviousSiblings = false;
      producesForkingFragment = !config._hasBeenAnnotated && !config._isSemanticBoundary;
      t1 = type$.JSArray__InterestingSemanticsFragment;
      fragments = A._setArrayType([], t1);
      toBeMarkedExplicit = A.LinkedHashSet_LinkedHashSet$_empty(type$._InterestingSemanticsFragment);
      _this.visitChildrenForSemantics$1(new A.RenderObject__getSemanticsForParent_closure(_box_0, _this, mergeIntoParent || false, fragments, toBeMarkedExplicit, config, producesForkingFragment));
      for (t2 = A._LinkedHashSetIterator$(toBeMarkedExplicit, toBeMarkedExplicit._collection$_modifications), t3 = A._instanceType(t2)._precomputed1; t2.moveNext$0();) {
        t4 = t2._collection$_current;
        (t4 == null ? t3._as(t4) : t4).markAsExplicit$0();
      }
      _this._needsSemanticsUpdate = false;
      if (!(_this._node$_parent instanceof A.RenderObject)) {
        t2 = _box_0.dropSemanticsOfPreviousSiblings;
        result = new A._RootSemanticsFragment(A._setArrayType([], t1), A._setArrayType([_this], type$.JSArray_RenderObject), t2);
      } else {
        t2 = _box_0.dropSemanticsOfPreviousSiblings;
        if (producesForkingFragment)
          result = new A._ContainerSemanticsFragment(A._setArrayType([], t1), t2);
        else {
          result = new A._SwitchableSemanticsFragment(mergeIntoParent, config, A._setArrayType([], t1), A._setArrayType([_this], type$.JSArray_RenderObject), t2);
          if (config._isSemanticBoundary)
            result._isExplicit = true;
        }
      }
      result.addAll$1(0, fragments);
      return result;
    },
    visitChildrenForSemantics$1(visitor) {
      this.visitChildren$1(visitor);
    },
    assembleSemanticsNode$3(node, config, children) {
      node.updateWith$2$childrenInInversePaintOrder$config(0, type$.List_SemanticsNode._as(children), config);
    },
    handleEvent$2($event, entry) {
    },
    toStringShort$0() {
      var t2, target, count, _this = this,
        header = "<optimized out>#" + A.shortHash(_this),
        t1 = _this._relayoutBoundary;
      if (t1 != null && t1 !== _this) {
        t2 = type$.nullable_RenderObject;
        target = t2._as(_this._node$_parent);
        count = 1;
        while (true) {
          if (!(target != null && target !== t1))
            break;
          target = t2._as(target._node$_parent);
          ++count;
        }
        header += " relayoutBoundary=up" + count;
      }
      if (_this._needsLayout)
        header += " NEEDS-LAYOUT";
      if (_this._needsPaint)
        header += " NEEDS-PAINT";
      if (_this._needsCompositingBitsUpdate)
        header += " NEEDS-COMPOSITING-BITS-UPDATE";
      if (_this._node$_owner == null)
        header += " DETACHED";
      return header;
    },
    toString$0(_) {
      return this.toStringShort$0();
    },
    debugDescribeChildren$0() {
      return A._setArrayType([], type$.JSArray_DiagnosticsNode);
    },
    showOnScreen$4$curve$descendant$duration$rect(curve, descendant, duration, rect) {
      var t1 = this._node$_parent;
      if (t1 instanceof A.RenderObject)
        t1.showOnScreen$4$curve$descendant$duration$rect(curve, descendant == null ? this : descendant, duration, rect);
    },
    showOnScreen$0() {
      return this.showOnScreen$4$curve$descendant$duration$rect(B.Cubic_gkc, null, B.Duration_0, null);
    },
    $isDiagnosticableTree: 1,
    $isHitTestTarget: 1
  };
  A.RenderObject_reassemble_closure.prototype = {
    call$1(child) {
      child.reassemble$0();
    },
    $signature: 16
  };
  A.RenderObject__debugReportException_closure.prototype = {
    call$0() {
      var t1 = A._setArrayType([], type$.JSArray_DiagnosticsNode),
        t2 = this.$this;
      t1.push(A.DiagnosticableTreeNode$("The following RenderObject was being processed when the exception was fired", B.DiagnosticsTreeStyle_10, t2));
      t1.push(A.DiagnosticableTreeNode$("RenderObject", B.DiagnosticsTreeStyle_11, t2));
      return t1;
    },
    $signature: 9
  };
  A.RenderObject__updateCompositingBits_closure.prototype = {
    call$1(child) {
      child._updateCompositingBits$0();
      if (A._lateReadCheck(child.__RenderObject__needsCompositing, "_needsCompositing"))
        this.$this.__RenderObject__needsCompositing = true;
    },
    $signature: 16
  };
  A.RenderObject_clearSemantics_closure.prototype = {
    call$1(child) {
      child.clearSemantics$0();
    },
    $signature: 16
  };
  A.RenderObject__getSemanticsForParent_closure.prototype = {
    call$1(renderChild) {
      var t1, t2, t3, t4, t5, t6, t7, _i, fragment, siblingLength, i, siblingFragment, t8, _this = this,
        parentFragment = renderChild._getSemanticsForParent$1$mergeIntoParent(_this.childrenMergeIntoParent);
      if (parentFragment.dropsSemanticsOfPreviousSiblings) {
        B.JSArray_methods.set$length(_this.fragments, 0);
        _this.toBeMarkedExplicit.clear$0(0);
        if (!_this.config._isSemanticBoundary)
          _this._box_0.dropSemanticsOfPreviousSiblings = true;
      }
      for (t1 = parentFragment.get$interestingFragments(), t2 = t1.length, t3 = _this.fragments, t4 = _this.toBeMarkedExplicit, t5 = _this.config, t6 = _this.$this, t7 = _this.producesForkingFragment, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        fragment = t1[_i];
        t3.push(fragment);
        fragment._ancestorChain.push(t6);
        fragment.addTags$1(t5._tagsForChildren);
        if (t5.explicitChildNodes || !(t6._node$_parent instanceof A.RenderObject)) {
          fragment.markAsExplicit$0();
          continue;
        }
        if (fragment.get$config() == null || t7)
          continue;
        if (!t5.isCompatibleWith$1(fragment.get$config()))
          t4.add$1(0, fragment);
        siblingLength = t3.length - 1;
        for (i = 0; i < siblingLength; ++i) {
          siblingFragment = t3[i];
          t8 = fragment.get$config();
          t8.toString;
          if (!t8.isCompatibleWith$1(siblingFragment.get$config())) {
            t4.add$1(0, fragment);
            t4.add$1(0, siblingFragment);
          }
        }
      }
    },
    $signature: 16
  };
  A.RenderObjectWithChildMixin.prototype = {
    set$child(value) {
      var _this = this,
        t1 = _this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        _this.dropChild$1(t1);
      _this.RenderObjectWithChildMixin__child = value;
      if (value != null)
        _this.adoptChild$1(value);
    },
    redepthChildren$0() {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        this.redepthChild$1(t1);
    },
    visitChildren$1(visitor) {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        visitor.call$1(t1);
    },
    debugDescribeChildren$0() {
      var t1 = this.RenderObjectWithChildMixin__child,
        t2 = type$.JSArray_DiagnosticsNode;
      return t1 != null ? A._setArrayType([A.DiagnosticableTreeNode$("child", null, t1)], t2) : A._setArrayType([], t2);
    }
  };
  A.ContainerParentDataMixin.prototype = {};
  A.ContainerRenderObjectMixin.prototype = {
    _insertIntoChildList$2$after(child, after) {
      var t2, t3, t4, _this = this,
        t1 = child.parentData;
      t1.toString;
      t2 = A._instanceType(_this)._eval$1("ContainerRenderObjectMixin.1");
      t2._as(t1);
      ++_this.ContainerRenderObjectMixin__childCount;
      if (after == null) {
        t1 = t1.ContainerParentDataMixin_nextSibling = _this.ContainerRenderObjectMixin__firstChild;
        if (t1 != null) {
          t1 = t1.parentData;
          t1.toString;
          t2._as(t1).ContainerParentDataMixin_previousSibling = child;
        }
        _this.ContainerRenderObjectMixin__firstChild = child;
        if (_this.ContainerRenderObjectMixin__lastChild == null)
          _this.ContainerRenderObjectMixin__lastChild = child;
      } else {
        t3 = after.parentData;
        t3.toString;
        t2._as(t3);
        t4 = t3.ContainerParentDataMixin_nextSibling;
        if (t4 == null) {
          t1.ContainerParentDataMixin_previousSibling = after;
          _this.ContainerRenderObjectMixin__lastChild = t3.ContainerParentDataMixin_nextSibling = child;
        } else {
          t1.ContainerParentDataMixin_nextSibling = t4;
          t1.ContainerParentDataMixin_previousSibling = after;
          t1 = t4.parentData;
          t1.toString;
          t2._as(t1).ContainerParentDataMixin_previousSibling = t3.ContainerParentDataMixin_nextSibling = child;
        }
      }
    },
    addAll$1(_, children) {
    },
    _removeFromChildList$1(child) {
      var t2, t3, t4, t5, _this = this,
        t1 = child.parentData;
      t1.toString;
      t2 = A._instanceType(_this)._eval$1("ContainerRenderObjectMixin.1");
      t2._as(t1);
      t3 = t1.ContainerParentDataMixin_previousSibling;
      t4 = t1.ContainerParentDataMixin_nextSibling;
      if (t3 == null)
        _this.ContainerRenderObjectMixin__firstChild = t4;
      else {
        t5 = t3.parentData;
        t5.toString;
        t2._as(t5).ContainerParentDataMixin_nextSibling = t4;
      }
      t4 = t1.ContainerParentDataMixin_nextSibling;
      if (t4 == null)
        _this.ContainerRenderObjectMixin__lastChild = t3;
      else {
        t4 = t4.parentData;
        t4.toString;
        t2._as(t4).ContainerParentDataMixin_previousSibling = t3;
      }
      t1.ContainerParentDataMixin_nextSibling = t1.ContainerParentDataMixin_previousSibling = null;
      --_this.ContainerRenderObjectMixin__childCount;
    },
    move$2$after(child, after) {
      var _this = this,
        t1 = child.parentData;
      t1.toString;
      if (A._instanceType(_this)._eval$1("ContainerRenderObjectMixin.1")._as(t1).ContainerParentDataMixin_previousSibling == after)
        return;
      _this._removeFromChildList$1(child);
      _this._insertIntoChildList$2$after(child, after);
      _this.markNeedsLayout$0();
    },
    redepthChildren$0() {
      var t1, t2, t3,
        child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = A._instanceType(this)._eval$1("ContainerRenderObjectMixin.1"); child != null;) {
        t2 = child._depth;
        t3 = this._depth;
        if (t2 <= t3) {
          child._depth = t3 + 1;
          child.redepthChildren$0();
        }
        t2 = child.parentData;
        t2.toString;
        child = t1._as(t2).ContainerParentDataMixin_nextSibling;
      }
    },
    visitChildren$1(visitor) {
      var t1, t2,
        child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = A._instanceType(this)._eval$1("ContainerRenderObjectMixin.1"); child != null;) {
        visitor.call$1(child);
        t2 = child.parentData;
        t2.toString;
        child = t1._as(t2).ContainerParentDataMixin_nextSibling;
      }
    },
    debugDescribeChildren$0() {
      var t1, count, t2,
        children = A._setArrayType([], type$.JSArray_DiagnosticsNode),
        child = this.ContainerRenderObjectMixin__firstChild;
      if (child != null)
        for (t1 = A._instanceType(this)._eval$1("ContainerRenderObjectMixin.1"), count = 1; true; child = t2) {
          children.push(new A.DiagnosticableTreeNode(child, "child " + count, true, true, null, null));
          if (child === this.ContainerRenderObjectMixin__lastChild)
            break;
          ++count;
          t2 = child.parentData;
          t2.toString;
          t2 = t1._as(t2).ContainerParentDataMixin_nextSibling;
          t2.toString;
        }
      return children;
    }
  };
  A.RelayoutWhenSystemFontsChangeMixin.prototype = {
    systemFontsDidChange$0() {
      this.markNeedsLayout$0();
    }
  };
  A._SemanticsFragment.prototype = {};
  A._ContainerSemanticsFragment.prototype = {
    addAll$1(_, fragments) {
      B.JSArray_methods.addAll$1(this.interestingFragments, fragments);
    },
    get$interestingFragments() {
      return this.interestingFragments;
    }
  };
  A._InterestingSemanticsFragment.prototype = {
    get$interestingFragments() {
      return A._setArrayType([this], type$.JSArray__InterestingSemanticsFragment);
    },
    addTags$1(tags) {
      var t1;
      if (tags == null || tags._collection$_length === 0)
        return;
      t1 = this._object$_tagsForChildren;
      (t1 == null ? this._object$_tagsForChildren = A.LinkedHashSet_LinkedHashSet$_empty(type$.SemanticsTag) : t1).addAll$1(0, tags);
    }
  };
  A._RootSemanticsFragment.prototype = {
    compileChildren$4$elevationAdjustment$parentPaintClipRect$parentSemanticsClipRect$result(elevationAdjustment, parentPaintClipRect, parentSemanticsClipRect, result) {
      var t3, t4, t5, children, _i,
        t1 = this._ancestorChain,
        t2 = B.JSArray_methods.get$first(t1);
      if (t2._semantics == null) {
        t3 = B.JSArray_methods.get$first(t1).get$showOnScreen();
        t4 = B.JSArray_methods.get$first(t1);
        t4 = type$.nullable_PipelineOwner._as(A.AbstractNode.prototype.get$owner.call(t4))._semanticsOwner;
        t4.toString;
        t5 = $.$get$SemanticsNode__kEmptyConfig();
        t5 = new A.SemanticsNode(null, 0, t3, B.Rect_0_0_0_0, false, t5._actions, t5._customSemanticsActions, t5._actionsAsBits, t5._flags, t5._semantics$_attributedLabel, t5._semantics$_attributedValue, t5._semantics$_attributedIncreasedValue, t5._semantics$_attributedDecreasedValue, t5._semantics$_attributedHint, t5._semantics$_elevation, t5._thickness, t5._semantics$_textDirection);
        t5.attach$1(t4);
        t2._semantics = t5;
      }
      t2 = B.JSArray_methods.get$first(t1)._semantics;
      t2.toString;
      t2.set$rect(0, B.JSArray_methods.get$first(t1).get$semanticBounds());
      children = A._setArrayType([], type$.JSArray_SemanticsNode);
      for (t1 = this._object$_children, t3 = t1.length, _i = 0; _i < t1.length; t1.length === t3 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].compileChildren$4$elevationAdjustment$parentPaintClipRect$parentSemanticsClipRect$result(0, parentPaintClipRect, parentSemanticsClipRect, children);
      t2.updateWith$2$childrenInInversePaintOrder$config(0, children, null);
      result.push(t2);
    },
    get$config() {
      return null;
    },
    markAsExplicit$0() {
    },
    addAll$1(_, fragments) {
      B.JSArray_methods.addAll$1(this._object$_children, fragments);
    }
  };
  A._SwitchableSemanticsFragment.prototype = {
    compileChildren$4$elevationAdjustment$parentPaintClipRect$parentSemanticsClipRect$result(elevationAdjustment, parentPaintClipRect, parentSemanticsClipRect, result) {
      var t1, t2, t3, t4, t5, _i, fragment, t6, geometry, node, children, _this = this, _null = null;
      if (!_this._isExplicit) {
        t1 = _this._ancestorChain;
        B.JSArray_methods.get$first(t1)._semantics = null;
        for (t2 = _this._object$_children, t3 = t2.length, t4 = A._arrayInstanceType(t1), t5 = t4._precomputed1, t4 = t4._eval$1("SubListIterable<1>"), _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
          fragment = t2[_i];
          t6 = new A.SubListIterable(t1, 1, _null, t4);
          t6.SubListIterable$3(t1, 1, _null, t5);
          B.JSArray_methods.addAll$1(fragment._ancestorChain, t6);
          fragment.compileChildren$4$elevationAdjustment$parentPaintClipRect$parentSemanticsClipRect$result(elevationAdjustment + _this._config._semantics$_elevation, parentPaintClipRect, parentSemanticsClipRect, result);
        }
        return;
      }
      t1 = _this._ancestorChain;
      if (t1.length > 1) {
        geometry = new A._SemanticsGeometry();
        geometry._computeValues$3(parentSemanticsClipRect, parentPaintClipRect, t1);
      } else
        geometry = _null;
      t2 = _this._mergeIntoParent;
      t3 = !t2;
      if (t3) {
        if (geometry == null)
          t4 = _null;
        else {
          t4 = A._lateReadCheck(geometry.___SemanticsGeometry__rect, "_rect");
          t4 = t4.get$isEmpty(t4);
        }
        t4 = t4 === true;
      } else
        t4 = false;
      if (t4)
        return;
      t4 = B.JSArray_methods.get$first(t1);
      if (t4._semantics == null)
        t4._semantics = A.SemanticsNode$(_null, B.JSArray_methods.get$first(t1).get$showOnScreen());
      node = B.JSArray_methods.get$first(t1)._semantics;
      node.set$isMergedIntoParent(t2);
      node.tags = _this._object$_tagsForChildren;
      node.elevationAdjustment = elevationAdjustment;
      if (elevationAdjustment !== 0) {
        _this._ensureConfigIsWritable$0();
        t2 = _this._config;
        t2.set$elevation(0, t2._semantics$_elevation + elevationAdjustment);
      }
      if (geometry != null) {
        node.set$rect(0, A._lateReadCheck(geometry.___SemanticsGeometry__rect, "_rect"));
        node.set$transform(0, A._lateReadCheck(geometry.___SemanticsGeometry__transform, "_transform"));
        node.parentSemanticsClipRect = geometry._semanticsClipRect;
        node.parentPaintClipRect = geometry._paintClipRect;
        if (t3 && geometry._markAsHidden) {
          _this._ensureConfigIsWritable$0();
          _this._config._setFlag$2(B.SemanticsFlag_8192, true);
        }
      }
      children = A._setArrayType([], type$.JSArray_SemanticsNode);
      for (t2 = _this._object$_children, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
        fragment = t2[_i];
        t4 = node.parentSemanticsClipRect;
        fragment.compileChildren$4$elevationAdjustment$parentPaintClipRect$parentSemanticsClipRect$result(0, node.parentPaintClipRect, t4, children);
      }
      t2 = _this._config;
      if (t2._isSemanticBoundary)
        B.JSArray_methods.get$first(t1).assembleSemanticsNode$3(node, _this._config, children);
      else
        node.updateWith$2$childrenInInversePaintOrder$config(0, children, t2);
      result.push(node);
    },
    get$config() {
      return this._isExplicit ? null : this._config;
    },
    addAll$1(_, fragments) {
      var t1, t2, _i, fragment, t3, t4, _this = this;
      for (t1 = fragments.length, t2 = _this._object$_children, _i = 0; _i < fragments.length; fragments.length === t1 || (0, A.throwConcurrentModificationError)(fragments), ++_i) {
        fragment = fragments[_i];
        t2.push(fragment);
        if (fragment.get$config() == null)
          continue;
        if (!_this._isConfigWritable) {
          _this._config = _this._config.copy$0(0);
          _this._isConfigWritable = true;
        }
        t3 = _this._config;
        t4 = fragment.get$config();
        t4.toString;
        t3.absorb$1(t4);
      }
    },
    _ensureConfigIsWritable$0() {
      var t1, t2, _this = this;
      if (!_this._isConfigWritable) {
        t1 = _this._config;
        t2 = A.SemanticsConfiguration$();
        t2._isSemanticBoundary = t1._isSemanticBoundary;
        t2.explicitChildNodes = t1.explicitChildNodes;
        t2.isBlockingSemanticsOfPreviouslyPaintedNodes = false;
        t2._hasBeenAnnotated = t1._hasBeenAnnotated;
        t2._isMergingSemanticsOfDescendants = false;
        t2._semantics$_textDirection = t1._semantics$_textDirection;
        t2._sortKey = t1._sortKey;
        t2._semantics$_attributedLabel = t1._semantics$_attributedLabel;
        t2._semantics$_attributedIncreasedValue = t1._semantics$_attributedIncreasedValue;
        t2._semantics$_attributedValue = t1._semantics$_attributedValue;
        t2._semantics$_attributedDecreasedValue = t1._semantics$_attributedDecreasedValue;
        t2._semantics$_attributedHint = t1._semantics$_attributedHint;
        t2._semantics$_hintOverrides = t1._semantics$_hintOverrides;
        t2._semantics$_elevation = t1._semantics$_elevation;
        t2._thickness = t1._thickness;
        t2._flags = t1._flags;
        t2._tagsForChildren = t1._tagsForChildren;
        t2._textSelection = t1._textSelection;
        t2._scrollPosition = t1._scrollPosition;
        t2._scrollExtentMax = t1._scrollExtentMax;
        t2._scrollExtentMin = t1._scrollExtentMin;
        t2._actionsAsBits = t1._actionsAsBits;
        t2._indexInParent = t1._indexInParent;
        t2._scrollIndex = t1._scrollIndex;
        t2._scrollChildCount = t1._scrollChildCount;
        t2._platformViewId = t1._platformViewId;
        t2._maxValueLength = t1._maxValueLength;
        t2._currentValueLength = t1._currentValueLength;
        t2._actions.addAll$1(0, t1._actions);
        t2._customSemanticsActions.addAll$1(0, t1._customSemanticsActions);
        _this._config = t2;
        _this._isConfigWritable = true;
      }
    },
    markAsExplicit$0() {
      this._isExplicit = true;
    }
  };
  A._SemanticsGeometry.prototype = {
    _computeValues$3(parentSemanticsClipRect, parentPaintClipRect, ancestors) {
      var index, $parent, child, owner, t2, paintRect, _this = this,
        t1 = new A.Matrix4(new Float64Array(16));
      t1.setIdentity$0();
      _this.___SemanticsGeometry__transform = t1;
      _this._semanticsClipRect = parentSemanticsClipRect;
      _this._paintClipRect = parentPaintClipRect;
      for (index = ancestors.length - 1; index > 0;) {
        $parent = ancestors[index];
        --index;
        child = ancestors[index];
        _this._semanticsClipRect = A._SemanticsGeometry__intersectRects(_this._semanticsClipRect, $parent.describeApproximatePaintClip$1(child));
        t1 = $.$get$_SemanticsGeometry__temporaryTransformHolder();
        t1.setIdentity$0();
        A._SemanticsGeometry__applyIntermediatePaintTransforms($parent, child, A._lateReadCheck(_this.___SemanticsGeometry__transform, "_transform"), t1);
        _this._semanticsClipRect = A._SemanticsGeometry__transformRect(_this._semanticsClipRect, t1);
        _this._paintClipRect = A._SemanticsGeometry__transformRect(_this._paintClipRect, t1);
      }
      owner = B.JSArray_methods.get$first(ancestors);
      t1 = _this._semanticsClipRect;
      t1 = t1 == null ? owner.get$semanticBounds() : t1.intersect$1(owner.get$semanticBounds());
      _this.___SemanticsGeometry__rect = t1;
      t2 = _this._paintClipRect;
      if (t2 != null) {
        paintRect = t2.intersect$1(A._lateReadCheck(t1, "_rect"));
        if (paintRect.get$isEmpty(paintRect)) {
          t1 = A._lateReadCheck(_this.___SemanticsGeometry__rect, "_rect");
          t1 = !t1.get$isEmpty(t1);
        } else
          t1 = false;
        _this._markAsHidden = t1;
        if (!t1)
          _this.___SemanticsGeometry__rect = paintRect;
      }
    }
  };
  A._RenderObject_AbstractNode_DiagnosticableTreeMixin.prototype = {};
  A.TextParentData.prototype = {
    toString$0(_) {
      var t1 = A._setArrayType(["offset=" + this.offset.toString$0(0)], type$.JSArray_String);
      t1.push(this.super$BoxParentData$toString(0));
      return B.JSArray_methods.join$1(t1, "; ");
    }
  };
  A.RenderParagraph.prototype = {
    setupParentData$1(child) {
      if (!(child.parentData instanceof A.TextParentData))
        child.parentData = new A.TextParentData(null, null, B.Offset_0_0);
    },
    set$text(_, value) {
      var _this = this,
        t1 = _this._textPainter;
      switch (t1._text_painter$_text.compareTo$1(0, value).index) {
        case 0:
        case 1:
          return;
        case 2:
          t1.set$text(0, value);
          _this._cachedCombinedSemanticsInfos = _this._cachedAttributedLabel = null;
          _this._extractPlaceholderSpans$1(value);
          _this.markNeedsPaint$0();
          _this.markNeedsSemanticsUpdate$0();
          break;
        case 3:
          t1.set$text(0, value);
          _this._cachedCombinedSemanticsInfos = _this._cachedAttributedLabel = _this._overflowShader = null;
          _this._extractPlaceholderSpans$1(value);
          _this.markNeedsLayout$0();
          break;
      }
    },
    _extractPlaceholderSpans$1(span) {
      this.__RenderParagraph__placeholderSpans = A._setArrayType([], type$.JSArray_PlaceholderSpan);
      span.visitChildren$1(new A.RenderParagraph__extractPlaceholderSpans_closure(this));
    },
    set$textAlign(_, value) {
      var t1 = this._textPainter;
      if (t1._textAlign === value)
        return;
      t1.set$textAlign(0, value);
      this.markNeedsPaint$0();
    },
    set$textDirection(_, value) {
      var t1 = this._textPainter;
      if (t1._text_painter$_textDirection === value)
        return;
      t1.set$textDirection(0, value);
      this.markNeedsLayout$0();
    },
    set$softWrap(value) {
      return;
    },
    set$overflow(_, value) {
      var t1, _this = this;
      if (_this._paragraph$_overflow === value)
        return;
      _this._paragraph$_overflow = value;
      t1 = value === B.TextOverflow_2 ? "\u2026" : null;
      _this._textPainter.set$ellipsis(0, t1);
      _this.markNeedsLayout$0();
    },
    set$textScaleFactor(value) {
      var t1 = this._textPainter;
      if (t1._textScaleFactor === value)
        return;
      t1.set$textScaleFactor(value);
      this._overflowShader = null;
      this.markNeedsLayout$0();
    },
    set$maxLines(_, value) {
      return;
    },
    set$locale(_, value) {
      return;
    },
    set$strutStyle(_, value) {
      return;
    },
    set$textWidthBasis(value) {
      var t1 = this._textPainter;
      if (t1._textWidthBasis === value)
        return;
      t1.set$textWidthBasis(value);
      this._overflowShader = null;
      this.markNeedsLayout$0();
    },
    set$textHeightBehavior(_, value) {
      return;
    },
    computeDistanceToActualBaseline$1(baseline) {
      this._layoutTextWithConstraints$1(A.RenderObject.prototype.get$constraints.call(this));
      return this._textPainter.computeDistanceToActualBaseline$1(B.TextBaseline_0);
    },
    hitTestSelf$1(position) {
      return true;
    },
    hitTestChildren$2$position(result, position) {
      var hitText, t2, t3, t4, childIndex, t5, t6, transform, child, _box_0 = {},
        t1 = this._textPainter,
        textPosition = t1._paragraph.getPositionForOffset$1(position),
        span = t1._text_painter$_text.getSpanForPosition$1(textPosition);
      if (span != null && true) {
        result.add$1(0, new A.HitTestEntry(type$.HitTestTarget._as(span), type$.HitTestEntry_HitTestTarget));
        hitText = true;
      } else
        hitText = false;
      t2 = _box_0.child = this.ContainerRenderObjectMixin__firstChild;
      t3 = A._instanceType(this)._eval$1("ContainerRenderObjectMixin.1");
      t4 = type$.TextParentData;
      childIndex = 0;
      while (true) {
        if (!(t2 != null && childIndex < t1._inlinePlaceholderBoxes.length))
          break;
        t2 = t2.parentData;
        t2.toString;
        t4._as(t2);
        t5 = t2.offset;
        t6 = new Float64Array(16);
        transform = new A.Matrix4(t6);
        transform.setIdentity$0();
        t6[14] = 0;
        t6[13] = t5._dy;
        t6[12] = t5._dx;
        t5 = t2.scale;
        transform.scale$3(0, t5, t5, t5);
        if (result.addWithPaintTransform$3$hitTest$position$transform(new A.RenderParagraph_hitTestChildren_closure(_box_0, position, t2), position, transform))
          return true;
        t2 = _box_0.child.parentData;
        t2.toString;
        child = t3._as(t2).ContainerParentDataMixin_nextSibling;
        _box_0.child = child;
        ++childIndex;
        t2 = child;
      }
      return hitText;
    },
    _layoutText$2$maxWidth$minWidth(maxWidth, minWidth) {
      this._textPainter.layout$2$maxWidth$minWidth(0, maxWidth, minWidth);
    },
    systemFontsDidChange$0() {
      this.super$RelayoutWhenSystemFontsChangeMixin$systemFontsDidChange();
      this._textPainter.markNeedsLayout$0();
    },
    _layoutTextWithConstraints$1(constraints) {
      this._textPainter.setPlaceholderDimensions$1(this._placeholderDimensions);
      this._layoutText$2$maxWidth$minWidth(constraints.maxWidth, constraints.minWidth);
    },
    _layoutChildren$2$dry(constraints, dry) {
      var child, placeholderDimensions, t2, boxConstraints, childIndex, t3, childSize, _this = this,
        _s17_ = "_placeholderSpans",
        t1 = _this.ContainerRenderObjectMixin__childCount;
      if (t1 === 0)
        return A._setArrayType([], type$.JSArray_PlaceholderDimensions);
      child = _this.ContainerRenderObjectMixin__firstChild;
      placeholderDimensions = A.List_List$filled(t1, B.PlaceholderDimensions_Size_0_0_null, false, type$.PlaceholderDimensions);
      t1 = _this._textPainter._textScaleFactor;
      t2 = 0 / t1;
      boxConstraints = new A.BoxConstraints(t2, constraints.maxWidth / t1, t2, 1 / 0 / t1);
      for (t1 = A._instanceType(_this)._eval$1("ContainerRenderObjectMixin.1"), t2 = !dry, childIndex = 0; child != null;) {
        if (t2) {
          child.layout$2$parentUsesSize(0, boxConstraints, true);
          t3 = child._size;
          t3.toString;
          switch (J.$index$asx(A._lateReadCheck(_this.__RenderParagraph__placeholderSpans, _s17_), childIndex).get$alignment()) {
            case B.PlaceholderAlignment_0:
              child.getDistanceToBaseline$1(J.get$baseline$z(J.$index$asx(A._lateReadCheck(_this.__RenderParagraph__placeholderSpans, _s17_), childIndex)));
              break;
            case B.PlaceholderAlignment_1:
            case B.PlaceholderAlignment_2:
            case B.PlaceholderAlignment_4:
            case B.PlaceholderAlignment_5:
            case B.PlaceholderAlignment_3:
              break;
          }
          childSize = t3;
        } else
          childSize = child.getDryLayout$1(boxConstraints);
        J.$index$asx(A._lateReadCheck(_this.__RenderParagraph__placeholderSpans, _s17_), childIndex).get$alignment();
        placeholderDimensions[childIndex] = new A.PlaceholderDimensions(childSize, J.get$baseline$z(J.$index$asx(A._lateReadCheck(_this.__RenderParagraph__placeholderSpans, _s17_), childIndex)));
        t3 = child.parentData;
        t3.toString;
        child = t1._as(t3).ContainerParentDataMixin_nextSibling;
        ++childIndex;
      }
      return placeholderDimensions;
    },
    _layoutChildren$1(constraints) {
      return this._layoutChildren$2$dry(constraints, false);
    },
    _setParentData$0() {
      var t4, t5,
        child = this.ContainerRenderObjectMixin__firstChild,
        t1 = type$.TextParentData,
        t2 = this._textPainter,
        t3 = A._instanceType(this)._eval$1("ContainerRenderObjectMixin.1"),
        childIndex = 0;
      while (true) {
        if (!(child != null && childIndex < t2._inlinePlaceholderBoxes.length))
          break;
        t4 = child.parentData;
        t4.toString;
        t1._as(t4);
        t5 = t2._inlinePlaceholderBoxes[childIndex];
        t4.offset = new A.Offset(t5.left, t5.top);
        t4.scale = t2._inlinePlaceholderScales[childIndex];
        child = t3._as(t4).ContainerParentDataMixin_nextSibling;
        ++childIndex;
      }
    },
    _canComputeDryLayout$0() {
      var t1, t2, _i;
      for (t1 = A._lateReadCheck(this.__RenderParagraph__placeholderSpans, "_placeholderSpans"), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        switch (t1[_i].get$alignment()) {
          case B.PlaceholderAlignment_0:
          case B.PlaceholderAlignment_1:
          case B.PlaceholderAlignment_2:
            return false;
          case B.PlaceholderAlignment_3:
          case B.PlaceholderAlignment_5:
          case B.PlaceholderAlignment_4:
            continue;
        }
      return true;
    },
    computeDryLayout$1(constraints) {
      var t1, t2, _this = this;
      if (!_this._canComputeDryLayout$0())
        return B.Size_0_0;
      t1 = _this._textPainter;
      t1.setPlaceholderDimensions$1(_this._layoutChildren$2$dry(constraints, true));
      _this._layoutText$2$maxWidth$minWidth(constraints.maxWidth, constraints.minWidth);
      t2 = t1.get$width(t1);
      t1 = t1._paragraph;
      return constraints.constrain$1(new A.Size(t2, Math.ceil(t1.get$height(t1))));
    },
    performLayout$0() {
      var t1, t2, t3, t4, didOverflowHeight, didOverflowWidth, fadeSizePainter, fadeStart, fadeEnd, _this = this, _null = null,
        constraints = A.RenderObject.prototype.get$constraints.call(_this);
      _this._placeholderDimensions = _this._layoutChildren$1(constraints);
      _this._layoutTextWithConstraints$1(constraints);
      _this._setParentData$0();
      t1 = _this._textPainter;
      t2 = t1.get$width(t1);
      t3 = t1._paragraph;
      t3 = Math.ceil(t3.get$height(t3));
      t4 = t1._paragraph;
      didOverflowHeight = t4.get$didExceedMaxLines(t4);
      t4 = _this._size = constraints.constrain$1(new A.Size(t2, t3));
      didOverflowHeight = t4._dy < t3 || didOverflowHeight;
      didOverflowWidth = t4._dx < t2;
      if (didOverflowWidth || didOverflowHeight)
        switch (_this._paragraph$_overflow.index) {
          case 3:
            _this._needsClipping = false;
            _this._overflowShader = null;
            break;
          case 0:
          case 2:
            _this._needsClipping = true;
            _this._overflowShader = null;
            break;
          case 1:
            _this._needsClipping = true;
            t2 = A.TextSpan$(_null, t1._text_painter$_text.style, "\u2026");
            t3 = t1._text_painter$_textDirection;
            t4 = t1._textScaleFactor;
            fadeSizePainter = A.TextPainter$(_null, t1._text_painter$_locale, _null, _null, t2, B.TextAlign_4, t3, _null, t4, B.TextWidthBasis_0);
            fadeSizePainter.layout$0(0);
            if (didOverflowWidth) {
              switch (t1._text_painter$_textDirection.index) {
                case 0:
                  fadeStart = fadeSizePainter.get$width(fadeSizePainter);
                  fadeEnd = 0;
                  break;
                case 1:
                  fadeEnd = _this._size._dx;
                  fadeStart = fadeEnd - fadeSizePainter.get$width(fadeSizePainter);
                  break;
                default:
                  fadeStart = _null;
                  fadeEnd = fadeStart;
              }
              _this._overflowShader = A.Gradient_Gradient$linear(new A.Offset(fadeStart, 0), new A.Offset(fadeEnd, 0), A._setArrayType([B.Color_4294967295, B.Color_16777215], type$.JSArray_Color), _null, B.TileMode_0);
            } else {
              fadeEnd = _this._size._dy;
              t1 = fadeSizePainter._paragraph;
              _this._overflowShader = A.Gradient_Gradient$linear(new A.Offset(0, fadeEnd - Math.ceil(t1.get$height(t1)) / 2), new A.Offset(0, fadeEnd), A._setArrayType([B.Color_4294967295, B.Color_16777215], type$.JSArray_Color), _null, B.TileMode_0);
            }
            break;
        }
      else {
        _this._needsClipping = false;
        _this._overflowShader = null;
      }
    },
    paint$2(context, offset) {
      var t1, t2, t3, bounds, t4, t5, t6, childIndex, t7, t8, child, paint, _this = this, _box_0 = {};
      _this._layoutTextWithConstraints$1(A.RenderObject.prototype.get$constraints.call(_this));
      if (_this._needsClipping) {
        t1 = _this._size;
        t2 = offset._dx;
        t3 = offset._dy;
        bounds = new A.Rect(t2, t3, t2 + t1._dx, t3 + t1._dy);
        if (_this._overflowShader != null) {
          t1 = context.get$canvas(context);
          t1.saveLayer$2(0, bounds, $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData()));
        } else
          context.get$canvas(context).save$0(0);
        context.get$canvas(context).clipRect$1(0, bounds);
      }
      t1 = _this._textPainter;
      t1.paint$2(context.get$canvas(context), offset);
      t2 = _box_0.child = _this.ContainerRenderObjectMixin__firstChild;
      t3 = type$.TextParentData;
      t4 = offset._dx;
      t5 = offset._dy;
      t6 = A._instanceType(_this)._eval$1("ContainerRenderObjectMixin.1");
      childIndex = 0;
      while (true) {
        if (!(t2 != null && childIndex < t1._inlinePlaceholderBoxes.length))
          break;
        t2 = t2.parentData;
        t2.toString;
        t3._as(t2);
        t7 = t2.scale;
        t7.toString;
        t8 = A._lateReadCheck(_this.__RenderObject__needsCompositing, "_needsCompositing");
        t2 = t2.offset;
        context.pushTransform$4(t8, new A.Offset(t4 + t2._dx, t5 + t2._dy), A.Matrix4_Matrix4$diagonal3Values(t7, t7, t7), new A.RenderParagraph_paint_closure(_box_0));
        t7 = _box_0.child.parentData;
        t7.toString;
        child = t6._as(t7).ContainerParentDataMixin_nextSibling;
        _box_0.child = child;
        ++childIndex;
        t2 = child;
      }
      if (_this._needsClipping) {
        if (_this._overflowShader != null) {
          context.get$canvas(context).translate$2(0, t4, t5);
          paint = $.$get$useCanvasKit() ? A.CkPaint$() : new A.SurfacePaint(new A.SurfacePaintData());
          paint.set$blendMode(B.BlendMode_13);
          paint.set$shader(_this._overflowShader);
          t1 = context.get$canvas(context);
          t2 = _this._size;
          t1.drawRect$2(0, new A.Rect(0, 0, 0 + t2._dx, 0 + t2._dy), paint);
        }
        context.get$canvas(context).restore$0(0);
      }
    },
    describeSemanticsConfiguration$1(config) {
      var t1, t2, collector, buffer, attributes, t3, offset, _i, t4, info, label, t5, _i0, infoAttribute, originalRange, _this = this;
      _this.super$RenderObject$describeSemanticsConfiguration(config);
      t1 = _this._textPainter;
      t2 = t1._text_painter$_text;
      t2.toString;
      collector = A._setArrayType([], type$.JSArray_InlineSpanSemanticsInformation);
      t2.computeSemanticsInformation$1(collector);
      _this._semanticsInfo = collector;
      if (B.JSArray_methods.any$1(collector, new A.RenderParagraph_describeSemanticsConfiguration_closure()))
        config._isSemanticBoundary = config.explicitChildNodes = true;
      else {
        t2 = _this._cachedAttributedLabel;
        if (t2 == null) {
          buffer = new A.StringBuffer("");
          attributes = A._setArrayType([], type$.JSArray_StringAttribute);
          for (t2 = _this._semanticsInfo, t3 = t2.length, offset = 0, _i = 0, t4 = ""; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
            info = t2[_i];
            label = info.semanticsLabel;
            if (label == null)
              label = info.text;
            for (t4 = info.stringAttributes, t5 = t4.length, _i0 = 0; _i0 < t4.length; t4.length === t5 || (0, A.throwConcurrentModificationError)(t4), ++_i0) {
              infoAttribute = t4[_i0];
              originalRange = infoAttribute.range;
              attributes.push(infoAttribute.copy$1$range(0, new A.TextRange(offset + originalRange.start, offset + originalRange.end)));
            }
            t4 = buffer._contents += label;
            offset += label.length;
          }
          t2 = _this._cachedAttributedLabel = new A.AttributedString(t4.charCodeAt(0) == 0 ? t4 : t4, attributes);
        }
        config._semantics$_attributedLabel = t2;
        config._hasBeenAnnotated = true;
        config._semantics$_textDirection = t1._text_painter$_textDirection;
      }
    },
    assembleSemanticsNode$3(node, config, children) {
      var t3, currentRect, ordinal, start, _i, info, t4, start0, t5, t6, t7, rects, rect, currentDirection0, t8, configuration, ordinal0, newChild, _this = this, _null = null,
        newChildren = A._setArrayType([], type$.JSArray_SemanticsNode),
        t1 = _this._textPainter,
        currentDirection = t1._text_painter$_textDirection,
        newChildCache = A.ListQueue$(_null, type$.SemanticsNode),
        t2 = _this._cachedCombinedSemanticsInfos;
      if (t2 == null) {
        t2 = _this._semanticsInfo;
        t2.toString;
        t2 = _this._cachedCombinedSemanticsInfos = A.combineSemanticsInfo(t2);
      }
      for (t3 = t2.length, currentRect = _null, ordinal = 0, start = 0, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i, start = start0) {
        info = t2[_i];
        t4 = info.text;
        start0 = start + t4.length;
        t5 = start < start0;
        t6 = t5 ? start : start0;
        t5 = t5 ? start0 : start;
        t7 = A.RenderObject.prototype.get$constraints.call(_this);
        t1.setPlaceholderDimensions$1(_this._placeholderDimensions);
        t1.layout$2$maxWidth$minWidth(0, t7.maxWidth, t7.minWidth);
        rects = t1._paragraph.getBoxesForRange$4$boxHeightStyle$boxWidthStyle(t6, t5, B.BoxHeightStyle_0, B.BoxWidthStyle_0);
        if (rects.length === 0)
          continue;
        t5 = B.JSArray_methods.get$first(rects);
        rect = new A.Rect(t5.left, t5.top, t5.right, t5.bottom);
        currentDirection0 = B.JSArray_methods.get$first(rects).direction;
        for (t5 = A._arrayInstanceType(rects), t6 = new A.SubListIterable(rects, 1, _null, t5._eval$1("SubListIterable<1>")), t6.SubListIterable$3(rects, 1, _null, t5._precomputed1), t6 = new A.ListIterator(t6, t6.get$length(t6)), t5 = A._instanceType(t6)._precomputed1; t6.moveNext$0();) {
          t7 = t6.__internal$_current;
          if (t7 == null)
            t7 = t5._as(t7);
          rect = rect.expandToInclude$1(new A.Rect(t7.left, t7.top, t7.right, t7.bottom));
          currentDirection0 = t7.direction;
        }
        t5 = rect.left;
        t6 = Math.max(0, t5);
        t7 = rect.top;
        t8 = Math.max(0, t7);
        t5 = Math.min(rect.right - t5, A.RenderObject.prototype.get$constraints.call(_this).maxWidth);
        t7 = Math.min(rect.bottom - t7, A.RenderObject.prototype.get$constraints.call(_this).maxHeight);
        currentRect = new A.Rect(Math.floor(t6) - 4, Math.floor(t8) - 4, Math.ceil(t6 + t5) + 4, Math.ceil(t8 + t7) + 4);
        configuration = A.SemanticsConfiguration$();
        ordinal0 = ordinal + 1;
        configuration._sortKey = new A.OrdinalSortKey(ordinal, _null);
        configuration._hasBeenAnnotated = true;
        configuration._semantics$_textDirection = currentDirection;
        t7 = info.semanticsLabel;
        t4 = t7 == null ? t4 : t7;
        configuration._semantics$_attributedLabel = new A.AttributedString(t4, info.stringAttributes);
        t4 = _this._cachedChildNodes;
        newChild = (t4 == null ? _null : !t4.get$isEmpty(t4)) === true ? _this._cachedChildNodes.removeFirst$0() : A.SemanticsNode$(_null, _null);
        newChild.updateWith$1$config(0, configuration);
        if (!newChild._rect.$eq(0, currentRect)) {
          newChild._rect = currentRect;
          newChild._markDirty$0();
        }
        newChildCache._add$1(0, newChild);
        newChildren.push(newChild);
        ordinal = ordinal0;
        currentDirection = currentDirection0;
      }
      _this._cachedChildNodes = newChildCache;
      node.updateWith$2$childrenInInversePaintOrder$config(0, newChildren, config);
    },
    clearSemantics$0() {
      this.super$RenderObject$clearSemantics();
      this._cachedChildNodes = null;
    },
    debugDescribeChildren$0() {
      var t1 = this._textPainter._text_painter$_text;
      t1.toString;
      return A._setArrayType([A.DiagnosticableTreeNode$("text", B.DiagnosticsTreeStyle_4, t1)], type$.JSArray_DiagnosticsNode);
    }
  };
  A.RenderParagraph__extractPlaceholderSpans_closure.prototype = {
    call$1(span) {
      return true;
    },
    $signature: 37
  };
  A.RenderParagraph_hitTestChildren_closure.prototype = {
    call$2(result, transformed) {
      return this._box_0.child.hitTest$2$position(result, transformed);
    },
    $signature: 18
  };
  A.RenderParagraph_paint_closure.prototype = {
    call$2(context, offset) {
      var t1 = this._box_0.child;
      t1.toString;
      context.paintChild$2(t1, offset);
    },
    $signature: 44
  };
  A.RenderParagraph_describeSemanticsConfiguration_closure.prototype = {
    call$1(info) {
      return false;
    },
    $signature: 180
  };
  A._RenderParagraph_RenderBox_ContainerRenderObjectMixin.prototype = {
    attach$1(owner) {
      var child, t1, t2;
      this.super$RenderObject$attach(owner);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = type$.TextParentData; child != null;) {
        child.attach$1(owner);
        t2 = child.parentData;
        t2.toString;
        child = t1._as(t2).ContainerParentDataMixin_nextSibling;
      }
    },
    detach$0(_) {
      var child, t1, t2;
      this.super$AbstractNode$detach(0);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = type$.TextParentData; child != null;) {
        child.detach$0(0);
        t2 = child.parentData;
        t2.toString;
        child = t1._as(t2).ContainerParentDataMixin_nextSibling;
      }
    }
  };
  A._RenderParagraph_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin.prototype = {};
  A._RenderParagraph_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin_RelayoutWhenSystemFontsChangeMixin.prototype = {
    attach$1(owner) {
      this.super$_RenderParagraph_RenderBox_ContainerRenderObjectMixin$attach(owner);
      $.PaintingBinding__instance.PaintingBinding__systemFonts._systemFontsCallbacks.add$1(0, this.get$systemFontsDidChange());
    },
    detach$0(_) {
      $.PaintingBinding__instance.PaintingBinding__systemFonts._systemFontsCallbacks.remove$1(0, this.get$systemFontsDidChange());
      this.super$_RenderParagraph_RenderBox_ContainerRenderObjectMixin$detach(0);
    }
  };
  A.RenderProxyBox.prototype = {};
  A.RenderProxyBoxMixin.prototype = {
    setupParentData$1(child) {
      if (!(child.parentData instanceof A.ParentData))
        child.parentData = new A.ParentData();
    },
    computeDryLayout$1(constraints) {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        return t1.getDryLayout$1(constraints);
      return this.computeSizeForNoChild$1(constraints);
    },
    performLayout$0() {
      var _this = this,
        t1 = _this.RenderObjectWithChildMixin__child;
      if (t1 != null) {
        t1.layout$2$parentUsesSize(0, A.RenderObject.prototype.get$constraints.call(_this), true);
        t1 = _this.RenderObjectWithChildMixin__child._size;
        t1.toString;
        _this._size = t1;
      } else
        _this._size = _this.computeSizeForNoChild$1(A.RenderObject.prototype.get$constraints.call(_this));
    },
    computeSizeForNoChild$1(constraints) {
      return new A.Size(B.JSInt_methods.clamp$2(0, constraints.minWidth, constraints.maxWidth), B.JSInt_methods.clamp$2(0, constraints.minHeight, constraints.maxHeight));
    },
    hitTestChildren$2$position(result, position) {
      var t1 = this.RenderObjectWithChildMixin__child;
      t1 = t1 == null ? null : t1.hitTest$2$position(result, position);
      return t1 === true;
    },
    applyPaintTransform$2(child, transform) {
    },
    paint$2(context, offset) {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        context.paintChild$2(t1, offset);
    }
  };
  A.HitTestBehavior.prototype = {
    toString$0(_) {
      return "HitTestBehavior." + this._name;
    }
  };
  A.RenderProxyBoxWithHitTestBehavior.prototype = {
    hitTest$2$position(result, position) {
      var hitTarget, _this = this;
      if (_this._size.contains$1(0, position)) {
        hitTarget = _this.hitTestChildren$2$position(result, position) || _this.behavior === B.HitTestBehavior_1;
        if (hitTarget || _this.behavior === B.HitTestBehavior_2)
          result.add$1(0, new A.BoxHitTestEntry(position, _this));
      } else
        hitTarget = false;
      return hitTarget;
    },
    hitTestSelf$1(position) {
      return this.behavior === B.HitTestBehavior_1;
    }
  };
  A.RenderConstrainedBox.prototype = {
    set$additionalConstraints(value) {
      if (this._additionalConstraints.$eq(0, value))
        return;
      this._additionalConstraints = value;
      this.markNeedsLayout$0();
    },
    performLayout$0() {
      var _this = this,
        constraints = A.RenderObject.prototype.get$constraints.call(_this),
        t1 = _this.RenderObjectWithChildMixin__child,
        t2 = _this._additionalConstraints;
      if (t1 != null) {
        t1.layout$2$parentUsesSize(0, t2.enforce$1(constraints), true);
        t1 = _this.RenderObjectWithChildMixin__child._size;
        t1.toString;
        _this._size = t1;
      } else
        _this._size = t2.enforce$1(constraints).constrain$1(B.Size_0_0);
    },
    computeDryLayout$1(constraints) {
      var t1 = this.RenderObjectWithChildMixin__child,
        t2 = this._additionalConstraints;
      if (t1 != null)
        return t1.getDryLayout$1(t2.enforce$1(constraints));
      else
        return t2.enforce$1(constraints).constrain$1(B.Size_0_0);
    }
  };
  A.RenderLimitedBox.prototype = {
    set$maxWidth(_, value) {
      if (this._maxWidth === value)
        return;
      this._maxWidth = value;
      this.markNeedsLayout$0();
    },
    set$maxHeight(_, value) {
      if (this._maxHeight === value)
        return;
      this._maxHeight = value;
      this.markNeedsLayout$0();
    },
    _limitConstraints$1(constraints) {
      var t3, t4,
        t1 = constraints.minWidth,
        t2 = constraints.maxWidth;
      t2 = t2 < 1 / 0 ? t2 : B.JSInt_methods.clamp$2(this._maxWidth, t1, t2);
      t3 = constraints.minHeight;
      t4 = constraints.maxHeight;
      return new A.BoxConstraints(t1, t2, t3, t4 < 1 / 0 ? t4 : B.JSInt_methods.clamp$2(this._maxHeight, t3, t4));
    },
    _computeSize$2$constraints$layoutChild(constraints, layoutChild) {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        return constraints.constrain$1(layoutChild.call$2(t1, this._limitConstraints$1(constraints)));
      return this._limitConstraints$1(constraints).constrain$1(B.Size_0_0);
    },
    computeDryLayout$1(constraints) {
      return this._computeSize$2$constraints$layoutChild(constraints, A.layout_helper_ChildLayoutHelper_dryLayoutChild$closure());
    },
    performLayout$0() {
      this._size = this._computeSize$2$constraints$layoutChild(A.RenderObject.prototype.get$constraints.call(this), A.layout_helper_ChildLayoutHelper_layoutChild$closure());
    }
  };
  A.CustomClipper.prototype = {
    addListener$1(_, listener) {
      return null;
    },
    removeListener$1(_, listener) {
      return null;
    },
    toString$0(_) {
      return "CustomClipper";
    }
  };
  A._RenderCustomClip.prototype = {
    set$clipper(newClipper) {
      var t2, _this = this,
        t1 = _this._clipper;
      if (t1 == newClipper)
        return;
      _this._clipper = newClipper;
      t2 = newClipper == null;
      if (t2 || t1 == null || A.getRuntimeType(newClipper) !== A.getRuntimeType(t1) || newClipper.shouldReclip$1(t1))
        _this._markNeedsClip$0();
      if (_this._node$_owner != null) {
        if (t1 != null)
          t1.removeListener$1(0, _this.get$_markNeedsClip());
        if (!t2)
          newClipper.addListener$1(0, _this.get$_markNeedsClip());
      }
    },
    attach$1(owner) {
      var t1;
      this.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin$attach(owner);
      t1 = this._clipper;
      if (t1 != null)
        t1.addListener$1(0, this.get$_markNeedsClip());
    },
    detach$0(_) {
      var t1 = this._clipper;
      if (t1 != null)
        t1.removeListener$1(0, this.get$_markNeedsClip());
      this.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin$detach(0);
    },
    _markNeedsClip$0() {
      this._clip = null;
      this.markNeedsPaint$0();
      this.markNeedsSemanticsUpdate$0();
    },
    set$clipBehavior(value) {
      if (value !== this._proxy_box$_clipBehavior) {
        this._proxy_box$_clipBehavior = value;
        this.markNeedsPaint$0();
      }
    },
    performLayout$0() {
      var t1, _this = this,
        oldSize = _this._size;
      oldSize = oldSize != null ? oldSize : null;
      _this.super$RenderProxyBoxMixin$performLayout();
      t1 = _this._size;
      t1.toString;
      if (!J.$eq$(oldSize, t1))
        _this._clip = null;
    },
    _updateClip$0() {
      var t1, t2, _this = this;
      if (_this._clip == null) {
        t1 = _this._clipper;
        if (t1 == null)
          t1 = null;
        else {
          t2 = _this._size;
          t2.toString;
          t2 = t1.getClip$1(t2);
          t1 = t2;
        }
        _this._clip = t1 == null ? _this.get$_defaultClip() : t1;
      }
    },
    describeApproximatePaintClip$1(child) {
      var t1;
      if (this._clipper == null)
        t1 = null;
      else {
        t1 = this._size;
        t1 = new A.Rect(0, 0, 0 + t1._dx, 0 + t1._dy);
      }
      if (t1 == null) {
        t1 = this._size;
        t1 = new A.Rect(0, 0, 0 + t1._dx, 0 + t1._dy);
      }
      return t1;
    }
  };
  A.RenderClipPath.prototype = {
    get$_defaultClip() {
      var t1 = A.Path_Path(),
        t2 = this._size;
      t1.addRect$1(0, new A.Rect(0, 0, 0 + t2._dx, 0 + t2._dy));
      return t1;
    },
    hitTest$2$position(result, position) {
      var _this = this;
      if (_this._clipper != null) {
        _this._updateClip$0();
        if (!_this._clip.contains$1(0, position))
          return false;
      }
      return _this.super$RenderBox$hitTest(result, position);
    },
    paint$2(context, offset) {
      var t2, t3, t4, t5, _this = this,
        t1 = _this.RenderObjectWithChildMixin__child;
      if (t1 != null) {
        t2 = _this._layerHandle;
        if (_this._proxy_box$_clipBehavior !== B.Clip_0) {
          _this._updateClip$0();
          t1 = A._lateReadCheck(_this.__RenderObject__needsCompositing, "_needsCompositing");
          t3 = _this._size;
          t4 = t3._dx;
          t3 = t3._dy;
          t5 = _this._clip;
          t5.toString;
          t2.set$layer(0, context.pushClipPath$7$clipBehavior$oldLayer(t1, offset, new A.Rect(0, 0, 0 + t4, 0 + t3), t5, A.RenderProxyBoxMixin.prototype.get$paint.call(_this), _this._proxy_box$_clipBehavior, type$.nullable_ClipPathLayer._as(t2._layer)));
        } else {
          context.paintChild$2(t1, offset);
          t2.set$layer(0, null);
        }
      } else
        _this._layerHandle.set$layer(0, null);
    }
  };
  A._RenderPhysicalModelBase.prototype = {
    set$elevation(_, value) {
      if (this._proxy_box$_elevation === value)
        return;
      this._proxy_box$_elevation = value;
      this.markNeedsPaint$0();
    },
    set$shadowColor(_, value) {
      if (this._proxy_box$_shadowColor.$eq(0, value))
        return;
      this._proxy_box$_shadowColor = value;
      this.markNeedsPaint$0();
    },
    set$color(_, value) {
      if (this._proxy_box$_color.$eq(0, value))
        return;
      this._proxy_box$_color = value;
      this.markNeedsPaint$0();
    },
    get$alwaysNeedsCompositing() {
      return true;
    },
    describeSemanticsConfiguration$1(config) {
      this.super$RenderObject$describeSemanticsConfiguration(config);
      config.set$elevation(0, this._proxy_box$_elevation);
    }
  };
  A.RenderPhysicalModel.prototype = {
    set$shape(_, value) {
      if (this._shape === value)
        return;
      this._shape = value;
      this._markNeedsClip$0();
    },
    set$borderRadius(_, value) {
      if (J.$eq$(this._proxy_box$_borderRadius, value))
        return;
      this._proxy_box$_borderRadius = value;
      this._markNeedsClip$0();
    },
    get$_defaultClip() {
      var t1, t2, t3, t4, _this = this;
      switch (_this._shape.index) {
        case 0:
          t1 = _this._proxy_box$_borderRadius;
          if (t1 == null)
            t1 = B.BorderRadius_tLn;
          t2 = _this._size;
          return t1.toRRect$1(new A.Rect(0, 0, 0 + t2._dx, 0 + t2._dy));
        case 1:
          t1 = _this._size;
          t2 = 0 + t1._dx;
          t1 = 0 + t1._dy;
          t3 = (t2 - 0) / 2;
          t4 = (t1 - 0) / 2;
          return new A.RRect(0, 0, t2, t1, t3, t4, t3, t4, t3, t4, t3, t4, t3 === t4);
      }
    },
    hitTest$2$position(result, position) {
      var _this = this;
      if (_this._clipper != null) {
        _this._updateClip$0();
        if (!_this._clip.contains$1(0, position))
          return false;
      }
      return _this.super$RenderBox$hitTest(result, position);
    },
    paint$2(context, offset) {
      var offsetRRect, offsetRRectAsPath, t1, t2, t3, _this = this;
      if (_this.RenderObjectWithChildMixin__child != null) {
        _this._updateClip$0();
        offsetRRect = _this._clip.shift$1(offset);
        offsetRRectAsPath = A.Path_Path();
        offsetRRectAsPath.addRRect$1(0, offsetRRect);
        t1 = type$.nullable_PhysicalModelLayer;
        if (t1._as(A.RenderObject.prototype.get$layer.call(_this, _this)) == null)
          _this._layerHandle.set$layer(0, A.PhysicalModelLayer$());
        t2 = t1._as(A.RenderObject.prototype.get$layer.call(_this, _this));
        t2.set$clipPath(0, offsetRRectAsPath);
        t2.set$clipBehavior(_this._proxy_box$_clipBehavior);
        t3 = _this._proxy_box$_elevation;
        t2.set$elevation(0, t3);
        t2.set$color(0, _this._proxy_box$_color);
        t2.set$shadowColor(0, _this._proxy_box$_shadowColor);
        t1 = t1._as(A.RenderObject.prototype.get$layer.call(_this, _this));
        t1.toString;
        context.pushLayer$4$childPaintBounds(t1, A.RenderProxyBoxMixin.prototype.get$paint.call(_this), offset, new A.Rect(offsetRRect.left, offsetRRect.top, offsetRRect.right, offsetRRect.bottom));
      } else
        _this._layerHandle.set$layer(0, null);
    }
  };
  A.DecorationPosition.prototype = {
    toString$0(_) {
      return "DecorationPosition." + this._name;
    }
  };
  A.RenderDecoratedBox.prototype = {
    set$decoration(_, value) {
      var t1, _this = this;
      if (value.$eq(0, _this._proxy_box$_decoration))
        return;
      t1 = _this._proxy_box$_painter;
      if (t1 != null)
        t1.dispose$0(0);
      _this._proxy_box$_painter = null;
      _this._proxy_box$_decoration = value;
      _this.markNeedsPaint$0();
    },
    set$position(_, value) {
      if (value === this._proxy_box$_position)
        return;
      this._proxy_box$_position = value;
      this.markNeedsPaint$0();
    },
    set$configuration(value) {
      if (value.$eq(0, this._proxy_box$_configuration))
        return;
      this._proxy_box$_configuration = value;
      this.markNeedsPaint$0();
    },
    detach$0(_) {
      var _this = this,
        t1 = _this._proxy_box$_painter;
      if (t1 != null)
        t1.dispose$0(0);
      _this._proxy_box$_painter = null;
      _this.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin$detach(0);
      _this.markNeedsPaint$0();
    },
    hitTestSelf$1(position) {
      var t1 = this._proxy_box$_decoration,
        t2 = this._size;
      t2.toString;
      return t1.hitTest$3$textDirection(t2, position, this._proxy_box$_configuration.textDirection);
    },
    paint$2(context, offset) {
      var t1, t2, filledConfiguration, _this = this;
      if (_this._proxy_box$_painter == null)
        _this._proxy_box$_painter = _this._proxy_box$_decoration.createBoxPainter$1(_this.get$markNeedsPaint());
      t1 = _this._proxy_box$_configuration;
      t2 = _this._size;
      t2.toString;
      filledConfiguration = t1.copyWith$1$size(t2);
      if (_this._proxy_box$_position === B.DecorationPosition_0) {
        t1 = _this._proxy_box$_painter;
        t1.toString;
        t1.paint$3(context.get$canvas(context), offset, filledConfiguration);
        if (_this._proxy_box$_decoration.get$isComplex())
          context.setIsComplexHint$0();
      }
      _this.super$RenderProxyBoxMixin$paint(context, offset);
      if (_this._proxy_box$_position === B.DecorationPosition_1) {
        t1 = _this._proxy_box$_painter;
        t1.toString;
        t1.paint$3(context.get$canvas(context), offset, filledConfiguration);
        if (_this._proxy_box$_decoration.get$isComplex())
          context.setIsComplexHint$0();
      }
    }
  };
  A.RenderTransform.prototype = {
    set$origin(_, value) {
      return;
    },
    set$alignment(value) {
      var _this = this;
      if (J.$eq$(_this._proxy_box$_alignment, value))
        return;
      _this._proxy_box$_alignment = value;
      _this.markNeedsPaint$0();
      _this.markNeedsSemanticsUpdate$0();
    },
    set$textDirection(_, value) {
      var _this = this;
      if (_this._proxy_box$_textDirection == value)
        return;
      _this._proxy_box$_textDirection = value;
      _this.markNeedsPaint$0();
      _this.markNeedsSemanticsUpdate$0();
    },
    get$alwaysNeedsCompositing() {
      return false;
    },
    set$transform(_, value) {
      var t1, _this = this;
      if (J.$eq$(_this._proxy_box$_transform, value))
        return;
      t1 = new A.Matrix4(new Float64Array(16));
      t1.setFrom$1(value);
      _this._proxy_box$_transform = t1;
      _this.markNeedsPaint$0();
      _this.markNeedsSemanticsUpdate$0();
    },
    set$filterQuality(value) {
      return;
    },
    get$_effectiveTransform() {
      var result, centerX, centerY, t2, translation, _this = this,
        t1 = _this._proxy_box$_alignment,
        resolvedAlignment = t1 == null ? null : t1.resolve$1(_this._proxy_box$_textDirection);
      if (resolvedAlignment == null)
        return _this._proxy_box$_transform;
      result = new A.Matrix4(new Float64Array(16));
      result.setIdentity$0();
      t1 = _this._size;
      centerX = t1._dx / 2;
      centerY = t1._dy / 2;
      t1 = centerX + resolvedAlignment.x * centerX;
      t2 = centerY + resolvedAlignment.y * centerY;
      translation = new A.Offset(t1, t2);
      result.translate$2(0, t1, t2);
      t1 = _this._proxy_box$_transform;
      t1.toString;
      result.multiply$1(0, t1);
      result.translate$2(0, -translation._dx, -translation._dy);
      return result;
    },
    hitTest$2$position(result, position) {
      return this.hitTestChildren$2$position(result, position);
    },
    hitTestChildren$2$position(result, position) {
      var t1 = this.get$_effectiveTransform();
      return result.addWithPaintTransform$3$hitTest$position$transform(new A.RenderTransform_hitTestChildren_closure(this), position, t1);
    },
    paint$2(context, offset) {
      var t1, childOffset, t2, t3, t4, t5, _this = this;
      if (_this.RenderObjectWithChildMixin__child != null) {
        t1 = _this.get$_effectiveTransform();
        t1.toString;
        childOffset = A.MatrixUtils_getAsTranslation(t1);
        if (childOffset == null) {
          t2 = A._lateReadCheck(_this.__RenderObject__needsCompositing, "_needsCompositing");
          t3 = A.RenderProxyBoxMixin.prototype.get$paint.call(_this);
          t4 = _this._layerHandle;
          t5 = t4._layer;
          t4.set$layer(0, context.pushTransform$5$oldLayer(t2, offset, t1, t3, t5 instanceof A.TransformLayer ? t5 : null));
        } else {
          _this.super$RenderProxyBoxMixin$paint(context, offset.$add(0, childOffset));
          _this._layerHandle.set$layer(0, null);
        }
      }
    },
    applyPaintTransform$2(child, transform) {
      var t1 = this.get$_effectiveTransform();
      t1.toString;
      transform.multiply$1(0, t1);
    }
  };
  A.RenderTransform_hitTestChildren_closure.prototype = {
    call$2(result, position) {
      return this.$this.super$RenderProxyBoxMixin$hitTestChildren(result, position);
    },
    $signature: 18
  };
  A.RenderPointerListener.prototype = {
    computeSizeForNoChild$1(constraints) {
      return new A.Size(B.JSInt_methods.clamp$2(1 / 0, constraints.minWidth, constraints.maxWidth), B.JSInt_methods.clamp$2(1 / 0, constraints.minHeight, constraints.maxHeight));
    },
    handleEvent$2($event, entry) {
      var t1, _null = null;
      if (type$.PointerDownEvent._is($event)) {
        t1 = this.onPointerDown.call$1($event);
        return t1;
      }
      if (type$.PointerMoveEvent._is($event))
        return _null;
      if (type$.PointerUpEvent._is($event))
        return _null;
      if (type$.PointerHoverEvent._is($event))
        return _null;
      if (type$.PointerCancelEvent._is($event))
        return _null;
      if (type$.PointerSignalEvent._is($event))
        return _null;
    }
  };
  A.RenderMouseRegion.prototype = {
    hitTestSelf$1(position) {
      return true;
    },
    hitTest$2$position(result, position) {
      return this.super$RenderBox$hitTest(result, position) && true;
    },
    handleEvent$2($event, entry) {
    },
    get$cursor(_) {
      return this._cursor;
    },
    get$validForMouseTracker() {
      return this._validForMouseTracker;
    },
    attach$1(owner) {
      this.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin$attach(owner);
      this._validForMouseTracker = true;
    },
    detach$0(_) {
      this._validForMouseTracker = false;
      this.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin$detach(0);
    },
    computeSizeForNoChild$1(constraints) {
      return new A.Size(B.JSInt_methods.clamp$2(1 / 0, constraints.minWidth, constraints.maxWidth), B.JSInt_methods.clamp$2(1 / 0, constraints.minHeight, constraints.maxHeight));
    },
    $isMouseTrackerAnnotation: 1,
    get$onEnter(receiver) {
      return this.onEnter;
    },
    get$onExit(receiver) {
      return this.onExit;
    }
  };
  A.RenderSemanticsAnnotations.prototype = {
    set$container(value) {
      return;
    },
    set$explicitChildNodes(value) {
      return;
    },
    set$excludeSemantics(value) {
      return;
    },
    set$checked(_, value) {
      return;
    },
    set$enabled(_, value) {
      if (this._enabled == value)
        return;
      this._enabled = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$selected(_, value) {
      if (this._selected == value)
        return;
      this._selected = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$button(_, value) {
      return;
    },
    set$slider(value) {
      return;
    },
    set$keyboardKey(value) {
      return;
    },
    set$link(value) {
      return;
    },
    set$header(value) {
      return;
    },
    set$textField(value) {
      return;
    },
    set$readOnly(_, value) {
      return;
    },
    set$focusable(value) {
      if (this._focusable == value)
        return;
      this._focusable = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$focused(_, value) {
      if (this._focused == value)
        return;
      this._focused = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$inMutuallyExclusiveGroup(value) {
      return;
    },
    set$obscured(value) {
      return;
    },
    set$multiline(_, value) {
      return;
    },
    set$scopesRoute(value) {
      return;
    },
    set$namesRoute(value) {
      return;
    },
    set$hidden(_, value) {
      return;
    },
    set$image(_, value) {
      return;
    },
    set$liveRegion(value) {
      return;
    },
    set$maxValueLength(value) {
      return;
    },
    set$currentValueLength(value) {
      return;
    },
    set$toggled(value) {
      return;
    },
    set$attributedLabel(value) {
      if (J.$eq$(this._attributedLabel, value))
        return;
      this._attributedLabel = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$attributedValue(value) {
      if (J.$eq$(this._attributedValue, value))
        return;
      this._attributedValue = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$attributedIncreasedValue(value) {
      if (J.$eq$(this._attributedIncreasedValue, value))
        return;
      this._attributedIncreasedValue = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$attributedDecreasedValue(value) {
      if (J.$eq$(this._attributedDecreasedValue, value))
        return;
      this._attributedDecreasedValue = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$attributedHint(value) {
      if (J.$eq$(this._attributedHint, value))
        return;
      this._attributedHint = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$hintOverrides(value) {
      if (J.$eq$(this._hintOverrides, value))
        return;
      this._hintOverrides = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$textDirection(_, value) {
      if (this._proxy_box$_textDirection == value)
        return;
      this._proxy_box$_textDirection = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$sortKey(value) {
      return;
    },
    set$tagForChildren(value) {
      if (J.$eq$(this._tagForChildren, value))
        return;
      this.markNeedsSemanticsUpdate$0();
      this._tagForChildren = value;
    },
    set$onTap(handler) {
      var t1, _this = this;
      if (J.$eq$(_this._onTap, handler))
        return;
      t1 = _this._onTap;
      _this._onTap = handler;
      if (handler != null !== (t1 != null))
        _this.markNeedsSemanticsUpdate$0();
    },
    set$onDismiss(handler) {
      return;
    },
    set$onLongPress(handler) {
      var t1, _this = this;
      if (J.$eq$(_this._onLongPress, handler))
        return;
      t1 = _this._onLongPress;
      _this._onLongPress = handler;
      if (handler != null !== (t1 != null))
        _this.markNeedsSemanticsUpdate$0();
    },
    set$onScrollLeft(handler) {
      return;
    },
    set$onScrollRight(handler) {
      return;
    },
    set$onScrollUp(handler) {
      return;
    },
    set$onScrollDown(handler) {
      return;
    },
    set$onIncrease(handler) {
      return;
    },
    set$onDecrease(handler) {
      return;
    },
    set$onCopy(_, handler) {
      return;
    },
    set$onCut(_, handler) {
      return;
    },
    set$onPaste(_, handler) {
      return;
    },
    set$onMoveCursorForwardByCharacter(handler) {
      return;
    },
    set$onMoveCursorBackwardByCharacter(handler) {
      return;
    },
    set$onMoveCursorForwardByWord(handler) {
      return;
    },
    set$onMoveCursorBackwardByWord(handler) {
      return;
    },
    set$onSetSelection(handler) {
      return;
    },
    set$onSetText(handler) {
      return;
    },
    set$onDidGainAccessibilityFocus(handler) {
      return;
    },
    set$onDidLoseAccessibilityFocus(handler) {
      return;
    },
    set$customSemanticsActions(value) {
      return;
    },
    visitChildrenForSemantics$1(visitor) {
      this.super$RenderObject$visitChildrenForSemantics(visitor);
    },
    describeSemanticsConfiguration$1(config) {
      var t1, t2, _this = this;
      _this.super$RenderObject$describeSemanticsConfiguration(config);
      config.explicitChildNodes = config._isSemanticBoundary = false;
      t1 = _this._enabled;
      if (t1 != null) {
        config._setFlag$2(B.SemanticsFlag_64, true);
        config._setFlag$2(B.SemanticsFlag_128, t1);
      }
      t1 = _this._selected;
      if (t1 != null)
        config._setFlag$2(B.SemanticsFlag_4, t1);
      t1 = _this._focusable;
      if (t1 != null)
        config._setFlag$2(B.SemanticsFlag_2097152, t1);
      t1 = _this._focused;
      if (t1 != null)
        config._setFlag$2(B.SemanticsFlag_32, t1);
      t1 = _this._attributedLabel;
      if (t1 != null) {
        config._semantics$_attributedLabel = t1;
        config._hasBeenAnnotated = true;
      }
      t1 = _this._attributedValue;
      if (t1 != null) {
        config._semantics$_attributedValue = t1;
        config._hasBeenAnnotated = true;
      }
      t1 = _this._attributedIncreasedValue;
      if (t1 != null) {
        config._semantics$_attributedIncreasedValue = t1;
        config._hasBeenAnnotated = true;
      }
      t1 = _this._attributedDecreasedValue;
      if (t1 != null) {
        config._semantics$_attributedDecreasedValue = t1;
        config._hasBeenAnnotated = true;
      }
      t1 = _this._attributedHint;
      if (t1 != null) {
        config._semantics$_attributedHint = t1;
        config._hasBeenAnnotated = true;
      }
      _this._hintOverrides != null;
      t1 = _this._proxy_box$_textDirection;
      if (t1 != null) {
        config._semantics$_textDirection = t1;
        config._hasBeenAnnotated = true;
      }
      t1 = _this._tagForChildren;
      if (t1 != null) {
        t2 = config._tagsForChildren;
        (t2 == null ? config._tagsForChildren = A.LinkedHashSet_LinkedHashSet$_empty(type$.SemanticsTag) : t2).add$1(0, t1);
      }
      if (_this._onTap != null)
        config.set$onTap(_this.get$_performTap());
      if (_this._onLongPress != null)
        config.set$onLongPress(_this.get$_performLongPress());
    },
    _performTap$0() {
      var t1 = this._onTap;
      if (t1 != null)
        t1.call$0();
    },
    _performLongPress$0() {
      var t1 = this._onLongPress;
      if (t1 != null)
        t1.call$0();
    }
  };
  A._RenderProxyBox_RenderBox_RenderObjectWithChildMixin.prototype = {
    attach$1(owner) {
      var t1;
      this.super$RenderObject$attach(owner);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.attach$1(owner);
    },
    detach$0(_) {
      var t1;
      this.super$AbstractNode$detach(0);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.detach$0(0);
    }
  };
  A._RenderProxyBox_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin.prototype = {
    computeDistanceToActualBaseline$1(baseline) {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        return t1.getDistanceToActualBaseline$1(baseline);
      return this.super$RenderBox$computeDistanceToActualBaseline(baseline);
    }
  };
  A.RenderShiftedBox.prototype = {
    computeDistanceToActualBaseline$1(baseline) {
      var result,
        t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null) {
        result = t1.getDistanceToActualBaseline$1(baseline);
        t1 = this.RenderObjectWithChildMixin__child.parentData;
        t1.toString;
        type$.BoxParentData._as(t1);
        if (result != null)
          result += t1.offset._dy;
      } else
        result = this.super$RenderBox$computeDistanceToActualBaseline(baseline);
      return result;
    },
    paint$2(context, offset) {
      var t2,
        t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null) {
        t2 = t1.parentData;
        t2.toString;
        context.paintChild$2(t1, type$.BoxParentData._as(t2).offset.$add(0, offset));
      }
    },
    hitTestChildren$2$position(result, position) {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null) {
        t1 = t1.parentData;
        t1.toString;
        type$.BoxParentData._as(t1);
        return result.addWithPaintOffset$3$hitTest$offset$position(new A.RenderShiftedBox_hitTestChildren_closure(this, position, t1), t1.offset, position);
      }
      return false;
    }
  };
  A.RenderShiftedBox_hitTestChildren_closure.prototype = {
    call$2(result, transformed) {
      return this.$this.RenderObjectWithChildMixin__child.hitTest$2$position(result, transformed);
    },
    $signature: 18
  };
  A.RenderPadding.prototype = {
    _shifted_box$_resolve$0() {
      var _this = this;
      if (_this._resolvedPadding != null)
        return;
      _this._resolvedPadding = _this._padding.resolve$1(_this._shifted_box$_textDirection);
    },
    set$padding(_, value) {
      var _this = this;
      if (_this._padding.$eq(0, value))
        return;
      _this._padding = value;
      _this._resolvedPadding = null;
      _this.markNeedsLayout$0();
    },
    set$textDirection(_, value) {
      var _this = this;
      if (_this._shifted_box$_textDirection == value)
        return;
      _this._shifted_box$_textDirection = value;
      _this._resolvedPadding = null;
      _this.markNeedsLayout$0();
    },
    computeDryLayout$1(constraints) {
      var t1, innerConstraints, childSize, _this = this;
      _this._shifted_box$_resolve$0();
      if (_this.RenderObjectWithChildMixin__child == null) {
        t1 = _this._resolvedPadding;
        return constraints.constrain$1(new A.Size(t1.left + t1.right, t1.top + t1.bottom));
      }
      t1 = _this._resolvedPadding;
      t1.toString;
      innerConstraints = constraints.deflate$1(t1);
      childSize = _this.RenderObjectWithChildMixin__child.getDryLayout$1(innerConstraints);
      t1 = _this._resolvedPadding;
      return constraints.constrain$1(new A.Size(t1.left + childSize._dx + t1.right, t1.top + childSize._dy + t1.bottom));
    },
    performLayout$0() {
      var t1, innerConstraints, t2, t3, t4, t5, _this = this,
        constraints = A.RenderObject.prototype.get$constraints.call(_this);
      _this._shifted_box$_resolve$0();
      if (_this.RenderObjectWithChildMixin__child == null) {
        t1 = _this._resolvedPadding;
        _this._size = constraints.constrain$1(new A.Size(t1.left + t1.right, t1.top + t1.bottom));
        return;
      }
      t1 = _this._resolvedPadding;
      t1.toString;
      innerConstraints = constraints.deflate$1(t1);
      _this.RenderObjectWithChildMixin__child.layout$2$parentUsesSize(0, innerConstraints, true);
      t1 = _this.RenderObjectWithChildMixin__child;
      t2 = t1.parentData;
      t2.toString;
      type$.BoxParentData._as(t2);
      t3 = _this._resolvedPadding;
      t4 = t3.left;
      t5 = t3.top;
      t2.offset = new A.Offset(t4, t5);
      t1 = t1._size;
      _this._size = constraints.constrain$1(new A.Size(t4 + t1._dx + t3.right, t5 + t1._dy + t3.bottom));
    }
  };
  A.RenderAligningShiftedBox.prototype = {
    _shifted_box$_resolve$0() {
      var _this = this;
      if (_this._resolvedAlignment != null)
        return;
      _this._resolvedAlignment = _this._shifted_box$_alignment.resolve$1(_this._shifted_box$_textDirection);
    },
    set$alignment(value) {
      var _this = this;
      if (_this._shifted_box$_alignment.$eq(0, value))
        return;
      _this._shifted_box$_alignment = value;
      _this._resolvedAlignment = null;
      _this.markNeedsLayout$0();
    },
    set$textDirection(_, value) {
      var _this = this;
      if (_this._shifted_box$_textDirection == value)
        return;
      _this._shifted_box$_textDirection = value;
      _this._resolvedAlignment = null;
      _this.markNeedsLayout$0();
    }
  };
  A.RenderPositionedBox.prototype = {
    set$widthFactor(value) {
      return;
    },
    set$heightFactor(value) {
      return;
    },
    computeDryLayout$1(constraints) {
      var childSize,
        t1 = constraints.maxWidth,
        shrinkWrapWidth = t1 === 1 / 0,
        t2 = constraints.maxHeight,
        shrinkWrapHeight = t2 === 1 / 0,
        t3 = this.RenderObjectWithChildMixin__child;
      if (t3 != null) {
        childSize = t3.getDryLayout$1(new A.BoxConstraints(0, t1, 0, t2));
        if (shrinkWrapWidth)
          t1 = childSize._dx;
        else
          t1 = 1 / 0;
        if (shrinkWrapHeight)
          t2 = childSize._dy;
        else
          t2 = 1 / 0;
        return constraints.constrain$1(new A.Size(t1, t2));
      }
      t1 = shrinkWrapWidth ? 0 : 1 / 0;
      return constraints.constrain$1(new A.Size(t1, shrinkWrapHeight ? 0 : 1 / 0));
    },
    performLayout$0() {
      var t4, centerX, centerY, _this = this,
        constraints = A.RenderObject.prototype.get$constraints.call(_this),
        t1 = constraints.maxWidth,
        shrinkWrapWidth = t1 === 1 / 0,
        t2 = constraints.maxHeight,
        shrinkWrapHeight = t2 === 1 / 0,
        t3 = _this.RenderObjectWithChildMixin__child;
      if (t3 != null) {
        t3.layout$2$parentUsesSize(0, new A.BoxConstraints(0, t1, 0, t2), true);
        if (shrinkWrapWidth)
          t1 = _this.RenderObjectWithChildMixin__child._size._dx;
        else
          t1 = 1 / 0;
        if (shrinkWrapHeight)
          t2 = _this.RenderObjectWithChildMixin__child._size._dy;
        else
          t2 = 1 / 0;
        _this._size = constraints.constrain$1(new A.Size(t1, t2));
        _this._shifted_box$_resolve$0();
        t2 = _this.RenderObjectWithChildMixin__child;
        t1 = t2.parentData;
        t1.toString;
        type$.BoxParentData._as(t1);
        t3 = _this._resolvedAlignment;
        t3.toString;
        t4 = _this._size;
        t4.toString;
        t2 = t2._size;
        t2.toString;
        t2 = type$.Offset._as(t4.$sub(0, t2));
        centerX = t2._dx / 2;
        centerY = t2._dy / 2;
        t1.offset = new A.Offset(centerX + t3.x * centerX, centerY + t3.y * centerY);
      } else {
        t1 = shrinkWrapWidth ? 0 : 1 / 0;
        _this._size = constraints.constrain$1(new A.Size(t1, shrinkWrapHeight ? 0 : 1 / 0));
      }
    }
  };
  A._RenderShiftedBox_RenderBox_RenderObjectWithChildMixin.prototype = {
    attach$1(owner) {
      var t1;
      this.super$RenderObject$attach(owner);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.attach$1(owner);
    },
    detach$0(_) {
      var t1;
      this.super$AbstractNode$detach(0);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.detach$0(0);
    }
  };
  A.AlignmentGeometryTween.prototype = {
    lerp$1(t) {
      return A.AlignmentGeometry_lerp(this.begin, this.end, t);
    }
  };
  A.ViewConfiguration.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return other instanceof A.ViewConfiguration && other.size.$eq(0, this.size) && other.devicePixelRatio === this.devicePixelRatio;
    },
    get$hashCode(_) {
      return A.hashValues(this.size, this.devicePixelRatio, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      return this.size.toString$0(0) + " at " + A.debugFormatDouble(this.devicePixelRatio) + "x";
    }
  };
  A.RenderView.prototype = {
    set$configuration(value) {
      var t1, t2, _this = this;
      if (_this._view$_configuration.$eq(0, value))
        return;
      _this._view$_configuration = value;
      t1 = _this._updateMatricesAndCreateNewRootLayer$0();
      t2 = _this._layerHandle;
      t2._layer.detach$0(0);
      t2.set$layer(0, t1);
      _this.markNeedsPaint$0();
      _this.markNeedsLayout$0();
    },
    _updateMatricesAndCreateNewRootLayer$0() {
      var rootLayer,
        t1 = this._view$_configuration.devicePixelRatio;
      t1 = A.Matrix4_Matrix4$diagonal3Values(t1, t1, 1);
      this._rootTransform = t1;
      rootLayer = A.TransformLayer$(t1);
      rootLayer.attach$1(this);
      return rootLayer;
    },
    performResize$0() {
    },
    performLayout$0() {
      var t3,
        t1 = this._view$_size = this._view$_configuration.size,
        t2 = this.RenderObjectWithChildMixin__child;
      if (t2 != null) {
        t3 = t1._dx;
        t1 = t1._dy;
        t2.layout$1(0, new A.BoxConstraints(t3, t3, t1, t1));
      }
    },
    hitTest$2$position(result, position) {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.hitTest$2$position(new A.BoxHitTestResult(result._path, result._transforms, result._localTransforms), position);
      result.add$1(0, new A.HitTestEntry(this, type$.HitTestEntry_HitTestTarget));
      return true;
    },
    hitTestMouseTrackers$1(position) {
      var result,
        t1 = A._setArrayType([], type$.JSArray_HitTestEntry_HitTestTarget),
        t2 = new A.Matrix4(new Float64Array(16));
      t2.setIdentity$0();
      result = new A.BoxHitTestResult(t1, A._setArrayType([t2], type$.JSArray_Matrix4_2), A._setArrayType([], type$.JSArray__TransformPart));
      this.hitTest$2$position(result, position);
      return result;
    },
    get$isRepaintBoundary() {
      return true;
    },
    paint$2(context, offset) {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        context.paintChild$2(t1, offset);
    },
    applyPaintTransform$2(child, transform) {
      var t1 = this._rootTransform;
      t1.toString;
      transform.multiply$1(0, t1);
      this.super$RenderObject$applyPaintTransform(child, transform);
    },
    compositeFrame$0() {
      var builder, scene, t1, bounds, t2, _this = this;
      A.Timeline_startSync("COMPOSITING", B.Map_9aZ6I, null);
      try {
        builder = A.SceneBuilder_SceneBuilder();
        t1 = _this._layerHandle;
        scene = t1._layer.buildScene$1(builder);
        bounds = _this.get$paintBounds();
        switch (A.defaultTargetPlatform().index) {
          case 0:
          case 2:
          case 1:
            t2 = bounds.get$center();
            _this._window.get$viewConfiguration();
            t1._layer.find$1$1(0, new A.Offset(t2._dx, 0), type$.SystemUiOverlayStyle);
            break;
          case 3:
          case 4:
          case 5:
            break;
        }
        switch (A.defaultTargetPlatform().index) {
          case 0:
            _this._window.get$viewConfiguration();
            break;
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            break;
        }
        t1 = _this._window;
        t1.platformDispatcher.render$2(scene, t1);
        J.dispose$0$x(scene);
      } finally {
        A.Timeline_finishSync();
      }
    },
    get$paintBounds() {
      var t1 = this._view$_size.$mul(0, this._view$_configuration.devicePixelRatio);
      return new A.Rect(0, 0, 0 + t1._dx, 0 + t1._dy);
    },
    get$semanticBounds() {
      var t2,
        t1 = this._rootTransform;
      t1.toString;
      t2 = this._view$_size;
      return A.MatrixUtils_transformRect(t1, new A.Rect(0, 0, 0 + t2._dx, 0 + t2._dy));
    }
  };
  A._RenderView_RenderObject_RenderObjectWithChildMixin.prototype = {
    attach$1(owner) {
      var t1;
      this.super$RenderObject$attach(owner);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.attach$1(owner);
    },
    detach$0(_) {
      var t1;
      this.super$AbstractNode$detach(0);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.detach$0(0);
    }
  };
  A._FrameCallbackEntry.prototype = {};
  A.SchedulerPhase.prototype = {
    toString$0(_) {
      return "SchedulerPhase." + this._name;
    }
  };
  A.SchedulerBinding.prototype = {
    addTimingsCallback$1(callback) {
      var t1 = this.SchedulerBinding__timingsCallbacks;
      t1.push(callback);
      if (t1.length === 1) {
        t1 = $.$get$window().platformDispatcher;
        t1._onReportTimings = this.get$_executeTimingsCallbacks();
        t1._onReportTimingsZone = $.Zone__current;
      }
    },
    removeTimingsCallback$1(callback) {
      var t1 = this.SchedulerBinding__timingsCallbacks;
      B.JSArray_methods.remove$1(t1, callback);
      if (t1.length === 0) {
        t1 = $.$get$window().platformDispatcher;
        t1._onReportTimings = null;
        t1._onReportTimingsZone = $.Zone__current;
      }
    },
    _executeTimingsCallbacks$1(timings) {
      var callback, exception, stack, t2, _i, exception0, t3, t4,
        t1 = this.SchedulerBinding__timingsCallbacks,
        clonedCallbacks = A.List_List$of(t1, true, type$.void_Function_List_FrameTiming);
      for (t2 = clonedCallbacks.length, _i = 0; _i < t2; ++_i) {
        callback = clonedCallbacks[_i];
        try {
          if (B.JSArray_methods.contains$1(t1, callback))
            callback.call$1(timings);
        } catch (exception0) {
          exception = A.unwrapException(exception0);
          stack = A.getTraceFromException(exception0);
          t3 = A.ErrorDescription$("while executing callbacks for FrameTiming");
          t4 = $.$get$FlutterError_onError();
          if (t4 != null)
            t4.call$1(new A.FlutterErrorDetails(exception, stack, "Flutter framework", t3, null, false));
        }
      }
    },
    handleAppLifecycleStateChanged$1(state) {
      this.SchedulerBinding__lifecycleState = state;
      switch (state.index) {
        case 0:
        case 1:
          this._setFramesEnabledState$1(true);
          break;
        case 2:
        case 3:
          this._setFramesEnabledState$1(false);
          break;
      }
    },
    _ensureEventLoopCallback$0() {
      if (this.SchedulerBinding__hasRequestedAnEventLoopCallback)
        return;
      this.SchedulerBinding__hasRequestedAnEventLoopCallback = true;
      A.Timer_Timer(B.Duration_0, this.get$_runTasks());
    },
    _runTasks$0() {
      this.SchedulerBinding__hasRequestedAnEventLoopCallback = false;
      if (this.handleEventLoopCallback$0())
        this._ensureEventLoopCallback$0();
    },
    handleEventLoopCallback$0() {
      var entry, exception, exceptionStack, newLength, last, exception0, _this = this,
        _s10_ = "No element",
        t1 = _this.SchedulerBinding__taskQueue,
        t2 = t1._priority_queue$_length === 0;
      if (t2 || _this._lockCount > 0)
        return false;
      if (t2)
        A.throwExpression(A.StateError$(_s10_));
      entry = t1._elementAt$1(0);
      t2 = entry.priority;
      if (_this.SchedulerBinding_schedulingStrategy.call$2$priority$scheduler(t2, _this)) {
        try {
          if (t1._priority_queue$_length === 0)
            A.throwExpression(A.StateError$(_s10_));
          ++t1._priority_queue$_modificationCount;
          t1._elementAt$1(0);
          newLength = t1._priority_queue$_length - 1;
          last = t1._elementAt$1(newLength);
          B.JSArray_methods.$indexSet(t1._priority_queue$_queue, newLength, null);
          t1._priority_queue$_length = newLength;
          if (newLength > 0)
            t1._bubbleDown$2(last, 0);
          entry.run$0();
        } catch (exception0) {
          exception = A.unwrapException(exception0);
          exceptionStack = A.getTraceFromException(exception0);
          t2 = A.ErrorDescription$("during a task callback");
          A.FlutterError_reportError(new A.FlutterErrorDetails(exception, exceptionStack, "scheduler library", t2, null, false));
        }
        return t1._priority_queue$_length !== 0;
      }
      return false;
    },
    scheduleFrameCallback$2$rescheduling(callback, rescheduling) {
      var t1, _this = this;
      _this.scheduleFrame$0();
      t1 = ++_this.SchedulerBinding__nextFrameCallbackId;
      _this.SchedulerBinding__transientCallbacks.$indexSet(0, t1, new A._FrameCallbackEntry(callback));
      return _this.SchedulerBinding__nextFrameCallbackId;
    },
    get$endOfFrame() {
      var _this = this;
      if (_this.SchedulerBinding__nextFrameCompleter == null) {
        if (_this.SchedulerBinding__schedulerPhase === B.SchedulerPhase_0)
          _this.scheduleFrame$0();
        _this.SchedulerBinding__nextFrameCompleter = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void);
        _this.SchedulerBinding__postFrameCallbacks.push(new A.SchedulerBinding_endOfFrame_closure(_this));
      }
      return _this.SchedulerBinding__nextFrameCompleter.future;
    },
    get$framesEnabled() {
      return this.SchedulerBinding__framesEnabled;
    },
    _setFramesEnabledState$1(enabled) {
      if (this.SchedulerBinding__framesEnabled === enabled)
        return;
      this.SchedulerBinding__framesEnabled = enabled;
      if (enabled)
        this.scheduleFrame$0();
    },
    ensureVisualUpdate$0() {
      switch (this.SchedulerBinding__schedulerPhase.index) {
        case 0:
        case 4:
          this.scheduleFrame$0();
          return;
        case 1:
        case 2:
        case 3:
          return;
      }
    },
    scheduleFrame$0() {
      if (!this.SchedulerBinding__hasScheduledFrame)
        A.SchedulerBinding.prototype.get$framesEnabled.call(this);
      return;
    },
    scheduleForcedFrame$0() {
      if (this.SchedulerBinding__hasScheduledFrame)
        return;
      $.$get$window().platformDispatcher.scheduleFrame$0();
      this.SchedulerBinding__hasScheduledFrame = true;
    },
    scheduleWarmUpFrame$0() {
      var timelineTask, hadScheduledFrame, _this = this;
      if (_this.SchedulerBinding__warmUpFrame || _this.SchedulerBinding__schedulerPhase !== B.SchedulerPhase_0)
        return;
      _this.SchedulerBinding__warmUpFrame = true;
      timelineTask = A.TimelineTask$();
      timelineTask.start$1(0, "Warm-up frame");
      hadScheduledFrame = _this.SchedulerBinding__hasScheduledFrame;
      A.Timer_Timer(B.Duration_0, new A.SchedulerBinding_scheduleWarmUpFrame_closure(_this));
      A.Timer_Timer(B.Duration_0, new A.SchedulerBinding_scheduleWarmUpFrame_closure0(_this, hadScheduledFrame));
      _this.lockEvents$1(new A.SchedulerBinding_scheduleWarmUpFrame_closure1(_this, timelineTask));
    },
    resetEpoch$0() {
      var _this = this;
      _this.SchedulerBinding__epochStart = _this._adjustForEpoch$1(_this.SchedulerBinding__lastRawTimeStamp);
      _this.SchedulerBinding__firstRawTimeStampInEpoch = null;
    },
    _adjustForEpoch$1(rawTimeStamp) {
      var t1 = this.SchedulerBinding__firstRawTimeStampInEpoch,
        rawDurationSinceEpoch = t1 == null ? B.Duration_0 : new A.Duration(rawTimeStamp._duration - t1._duration);
      return A.Duration$(B.JSNumber_methods.round$0(rawDurationSinceEpoch._duration / $._timeDilation) + this.SchedulerBinding__epochStart._duration, 0);
    },
    handleBeginFrame$1(rawTimeStamp) {
      var callbacks, t3, _this = this,
        t1 = _this.SchedulerBinding__frameTimelineTask,
        t2 = t1 == null;
      if (!t2)
        t1.start$2$arguments(0, "Frame", B.Map_9aZ6I);
      if (_this.SchedulerBinding__firstRawTimeStampInEpoch == null)
        _this.SchedulerBinding__firstRawTimeStampInEpoch = rawTimeStamp;
      t3 = rawTimeStamp == null;
      _this.SchedulerBinding__currentFrameTimeStamp = _this._adjustForEpoch$1(t3 ? _this.SchedulerBinding__lastRawTimeStamp : rawTimeStamp);
      if (!t3)
        _this.SchedulerBinding__lastRawTimeStamp = rawTimeStamp;
      _this.SchedulerBinding__hasScheduledFrame = false;
      try {
        if (!t2)
          t1.start$2$arguments(0, "Animate", B.Map_9aZ6I);
        _this.SchedulerBinding__schedulerPhase = B.SchedulerPhase_1;
        callbacks = _this.SchedulerBinding__transientCallbacks;
        _this.SchedulerBinding__transientCallbacks = A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$._FrameCallbackEntry);
        J.forEach$1$ax(callbacks, new A.SchedulerBinding_handleBeginFrame_closure(_this));
        _this.SchedulerBinding__removedIds.clear$0(0);
      } finally {
        _this.SchedulerBinding__schedulerPhase = B.SchedulerPhase_2;
      }
    },
    handleDrawFrame$0() {
      var callback, localPostFrameCallbacks, callback0, t3, t4, _i, t5, _this = this,
        t1 = _this.SchedulerBinding__frameTimelineTask,
        t2 = t1 == null;
      if (!t2)
        t1.finish$0(0);
      try {
        _this.SchedulerBinding__schedulerPhase = B.SchedulerPhase_3;
        for (t3 = _this.SchedulerBinding__persistentCallbacks, t4 = t3.length, _i = 0; _i < t3.length; t3.length === t4 || (0, A.throwConcurrentModificationError)(t3), ++_i) {
          callback = t3[_i];
          t5 = _this.SchedulerBinding__currentFrameTimeStamp;
          t5.toString;
          _this._invokeFrameCallback$2(callback, t5);
        }
        _this.SchedulerBinding__schedulerPhase = B.SchedulerPhase_4;
        t3 = _this.SchedulerBinding__postFrameCallbacks;
        localPostFrameCallbacks = A.List_List$of(t3, true, type$.void_Function_Duration);
        B.JSArray_methods.set$length(t3, 0);
        for (t3 = localPostFrameCallbacks, t4 = t3.length, _i = 0; _i < t3.length; t3.length === t4 || (0, A.throwConcurrentModificationError)(t3), ++_i) {
          callback0 = t3[_i];
          t5 = _this.SchedulerBinding__currentFrameTimeStamp;
          t5.toString;
          _this._invokeFrameCallback$2(callback0, t5);
        }
      } finally {
        _this.SchedulerBinding__schedulerPhase = B.SchedulerPhase_0;
        if (!t2)
          t1.finish$0(0);
        _this.SchedulerBinding__currentFrameTimeStamp = null;
      }
    },
    _profileFramePostEvent$1(frameTiming) {
      var t1 = frameTiming._ui$_data,
        t2 = B.JSArray_methods.get$last(t1),
        t3 = t1[1],
        t4 = t1[4],
        t5 = A.Duration$(t4, 0),
        t6 = t1[0];
      A.postEvent("Flutter.Frame", A.LinkedHashMap_LinkedHashMap$_literal(["number", t2, "startTime", t3, "elapsed", t5._duration - A.Duration$(t6, 0)._duration, "build", A.Duration$(t1[2], 0)._duration - A.Duration$(t3, 0)._duration, "raster", A.Duration$(t4, 0)._duration - A.Duration$(t1[3], 0)._duration, "vsyncOverhead", A.Duration$(t3, 0)._duration - A.Duration$(t6, 0)._duration], type$.String, type$.dynamic));
    },
    _invokeFrameCallback$3(callback, timeStamp, callbackStack) {
      var exception, exceptionStack, exception0, t1;
      try {
        callback.call$1(timeStamp);
      } catch (exception0) {
        exception = A.unwrapException(exception0);
        exceptionStack = A.getTraceFromException(exception0);
        t1 = A.ErrorDescription$("during a scheduler callback");
        A.FlutterError_reportError(new A.FlutterErrorDetails(exception, exceptionStack, "scheduler library", t1, null, false));
      }
    },
    _invokeFrameCallback$2(callback, timeStamp) {
      return this._invokeFrameCallback$3(callback, timeStamp, null);
    }
  };
  A.SchedulerBinding_endOfFrame_closure.prototype = {
    call$1(timeStamp) {
      var t1 = this.$this;
      t1.SchedulerBinding__nextFrameCompleter.complete$0(0);
      t1.SchedulerBinding__nextFrameCompleter = null;
    },
    $signature: 7
  };
  A.SchedulerBinding_scheduleWarmUpFrame_closure.prototype = {
    call$0() {
      this.$this.handleBeginFrame$1(null);
    },
    $signature: 0
  };
  A.SchedulerBinding_scheduleWarmUpFrame_closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      t1.handleDrawFrame$0();
      t1.resetEpoch$0();
      t1.SchedulerBinding__warmUpFrame = false;
      if (this.hadScheduledFrame)
        t1.scheduleFrame$0();
    },
    $signature: 0
  };
  A.SchedulerBinding_scheduleWarmUpFrame_closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self.$this.get$endOfFrame(), $async$call$0);
            case 2:
              // returning from await.
              $async$self.timelineTask.finish$0(0);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 12
  };
  A.SchedulerBinding_handleBeginFrame_closure.prototype = {
    call$2(id, callbackEntry) {
      var t2, t3,
        t1 = this.$this;
      if (!t1.SchedulerBinding__removedIds.contains$1(0, id)) {
        t2 = callbackEntry.callback;
        t3 = t1.SchedulerBinding__currentFrameTimeStamp;
        t3.toString;
        t1._invokeFrameCallback$3(t2, t3, callbackEntry.debugStack);
      }
    },
    $signature: 184
  };
  A.Ticker.prototype = {
    set$muted(_, value) {
      var t1, _this = this;
      if (value === _this._muted)
        return;
      _this._muted = value;
      if (value)
        _this.unscheduleTick$0();
      else {
        t1 = _this._ticker$_future != null && _this._animationId == null;
        if (t1)
          _this._animationId = $.SchedulerBinding__instance.scheduleFrameCallback$2$rescheduling(_this.get$_ticker$_tick(), false);
      }
    },
    stop$1$canceled(_, canceled) {
      var _this = this,
        t1 = _this._ticker$_future;
      if (t1 == null)
        return;
      _this._startTime = _this._ticker$_future = null;
      _this.unscheduleTick$0();
      if (canceled)
        t1._cancel$1(_this);
      else
        t1._ticker$_complete$0();
    },
    _ticker$_tick$1(timeStamp) {
      var t1, _this = this;
      _this._animationId = null;
      t1 = _this._startTime;
      if (t1 == null)
        t1 = _this._startTime = timeStamp;
      _this._onTick.call$1(new A.Duration(timeStamp._duration - t1._duration));
      if (!_this._muted && _this._ticker$_future != null && _this._animationId == null)
        _this._animationId = $.SchedulerBinding__instance.scheduleFrameCallback$2$rescheduling(_this.get$_ticker$_tick(), true);
    },
    unscheduleTick$0() {
      var t2,
        t1 = this._animationId;
      if (t1 != null) {
        t2 = $.SchedulerBinding__instance;
        t2.SchedulerBinding__transientCallbacks.remove$1(0, t1);
        t2.SchedulerBinding__removedIds.add$1(0, t1);
        this._animationId = null;
      }
    },
    dispose$0(_) {
      var _this = this,
        t1 = _this._ticker$_future;
      if (t1 != null) {
        _this._ticker$_future = null;
        _this.unscheduleTick$0();
        t1._cancel$1(_this);
      }
    },
    toString$1$debugIncludeStack(_, debugIncludeStack) {
      var t1;
      "" + "Ticker(";
      t1 = "" + "Ticker()";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    toString$0($receiver) {
      return this.toString$1$debugIncludeStack($receiver, false);
    }
  };
  A.TickerFuture.prototype = {
    _ticker$_complete$0() {
      this._completed = true;
      this._primaryCompleter.complete$0(0);
    },
    _cancel$1(ticker) {
      this._completed = false;
    },
    then$1$2$onError(_, onValue, onError, $R) {
      return this._primaryCompleter.future.then$1$2$onError(0, onValue, onError, $R);
    },
    then$1$1($receiver, onValue, $R) {
      return this.then$1$2$onError($receiver, onValue, null, $R);
    },
    whenComplete$1(action) {
      return this._primaryCompleter.future.whenComplete$1(action);
    },
    toString$0(_) {
      var t1 = "<optimized out>#" + A.shortHash(this) + "(",
        t2 = this._completed;
      if (t2 == null)
        t2 = "active";
      else
        t2 = t2 ? "complete" : "canceled";
      return t1 + t2 + ")";
    },
    $isFuture: 1
  };
  A.SemanticsBinding.prototype = {};
  A.AttributedString.prototype = {
    $add(_, other) {
      var t3, newString, newAttributes, _i, attribute, t4,
        t1 = this.string,
        t2 = t1.length;
      if (t2 === 0)
        return other;
      t3 = other.string;
      if (t3.length === 0)
        return this;
      newString = t1 + t3;
      newAttributes = A.List_List$of(this.attributes, true, type$.StringAttribute);
      t1 = other.attributes;
      t3 = t1.length;
      if (t3 !== 0)
        for (_i = 0; _i < t1.length; t1.length === t3 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
          attribute = t1[_i];
          t4 = attribute.range;
          newAttributes.push(J.copy$1$range$x(attribute, new A.TextRange(t4.start + t2, t4.end + t2)));
        }
      return new A.AttributedString(newString, newAttributes);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return J.get$runtimeType$(other) === A.getRuntimeType(this) && other instanceof A.AttributedString && other.string === this.string && A.listEquals0(other.attributes, this.attributes);
    },
    get$hashCode(_) {
      return A.hashValues(this.string, this.attributes, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      return "AttributedString('" + this.string + "', attributes: " + A.S(this.attributes) + ")";
    }
  };
  A.SemanticsData.prototype = {
    toStringShort$0() {
      return "SemanticsData";
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (other instanceof A.SemanticsData)
        if (other.flags === _this.flags)
          if (other.actions === _this.actions)
            if (other.attributedLabel.$eq(0, _this.attributedLabel))
              if (other.attributedValue.$eq(0, _this.attributedValue))
                if (other.attributedIncreasedValue.$eq(0, _this.attributedIncreasedValue))
                  if (other.attributedDecreasedValue.$eq(0, _this.attributedDecreasedValue))
                    if (other.attributedHint.$eq(0, _this.attributedHint))
                      if (other.textDirection == _this.textDirection)
                        if (other.rect.$eq(0, _this.rect))
                          if (A.setEquals(other.tags, _this.tags))
                            t1 = J.$eq$(other.transform, _this.transform) && other.elevation === _this.elevation && other.thickness === _this.thickness && A.SemanticsData__sortedListsEqual(other.customSemanticsActionIds, _this.customSemanticsActionIds);
                          else
                            t1 = false;
                        else
                          t1 = false;
                      else
                        t1 = false;
                    else
                      t1 = false;
                  else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(A.hashValues(_this.flags, _this.actions, _this.attributedLabel, _this.attributedValue, _this.attributedIncreasedValue, _this.attributedDecreasedValue, _this.attributedHint, _this.textDirection, _this.rect, _this.tags, _this.textSelection, _this.scrollChildCount, _this.scrollIndex, _this.scrollPosition, _this.scrollExtentMax, _this.scrollExtentMin, _this.platformViewId, _this.maxValueLength, _this.currentValueLength, _this.transform), _this.elevation, _this.thickness, A.hashList(_this.customSemanticsActionIds), B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    }
  };
  A._SemanticsDiagnosticableNode.prototype = {
    getChildren$0() {
      return this.value.debugDescribeChildren$1$childOrder(this.childOrder);
    }
  };
  A.SemanticsProperties.prototype = {
    toStringShort$0() {
      return "SemanticsProperties";
    }
  };
  A.SemanticsNode.prototype = {
    set$transform(_, value) {
      var t1;
      if (!A.MatrixUtils_matrixEquals(this._semantics$_transform, value)) {
        t1 = A.MatrixUtils_isIdentity(value);
        this._semantics$_transform = t1 ? null : value;
        this._markDirty$0();
      }
    },
    set$rect(_, value) {
      if (!this._rect.$eq(0, value)) {
        this._rect = value;
        this._markDirty$0();
      }
    },
    set$isMergedIntoParent(value) {
      if (this._isMergedIntoParent === value)
        return;
      this._isMergedIntoParent = value;
      this._markDirty$0();
    },
    _replaceChildren$1(newChildren) {
      var t2, _i, t3, sawChange, child, t4, i, _this = this,
        t1 = _this._semantics$_children;
      if (t1 != null)
        for (t2 = t1.length, _i = 0; _i < t2; ++_i)
          t1[_i]._dead = true;
      for (t1 = newChildren.length, _i = 0; _i < t1; ++_i)
        newChildren[_i]._dead = false;
      t1 = _this._semantics$_children;
      if (t1 != null)
        for (t2 = t1.length, t3 = type$.nullable_SemanticsNode, sawChange = false, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
          child = t1[_i];
          if (child._dead) {
            t4 = J.getInterceptor$x(child);
            if (t3._as(A.AbstractNode.prototype.get$parent.call(t4, child)) === _this) {
              child._node$_parent = null;
              if (_this._node$_owner != null)
                child.detach$0(0);
            }
            sawChange = true;
          }
        }
      else
        sawChange = false;
      for (t1 = newChildren.length, t2 = type$.nullable_SemanticsNode, _i = 0; _i < newChildren.length; newChildren.length === t1 || (0, A.throwConcurrentModificationError)(newChildren), ++_i) {
        child = newChildren[_i];
        t3 = J.getInterceptor$x(child);
        if (t2._as(A.AbstractNode.prototype.get$parent.call(t3, child)) !== _this) {
          if (t2._as(A.AbstractNode.prototype.get$parent.call(t3, child)) != null) {
            t3 = t2._as(A.AbstractNode.prototype.get$parent.call(t3, child));
            if (t3 != null) {
              child._node$_parent = null;
              if (t3._node$_owner != null)
                child.detach$0(0);
            }
          }
          child._node$_parent = _this;
          t3 = _this._node$_owner;
          if (t3 != null)
            child.attach$1(t3);
          t3 = child._depth;
          t4 = _this._depth;
          if (t3 <= t4) {
            child._depth = t4 + 1;
            child.redepthChildren$0();
          }
          sawChange = true;
        }
      }
      if (!sawChange && _this._semantics$_children != null)
        for (t1 = _this._semantics$_children, t2 = t1.length, i = 0; i < t2; ++i)
          if (t1[i]._id !== newChildren[i]._id) {
            sawChange = true;
            break;
          }
      _this._semantics$_children = newChildren;
      if (sawChange)
        _this._markDirty$0();
    },
    _visitDescendants$1(visitor) {
      var t2, _i, child,
        t1 = this._semantics$_children;
      if (t1 != null)
        for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
          child = t1[_i];
          if (!visitor.call$1(child) || !child._visitDescendants$1(visitor))
            return false;
        }
      return true;
    },
    redepthChildren$0() {
      var t1 = this._semantics$_children;
      if (t1 != null)
        B.JSArray_methods.forEach$1(t1, this.get$redepthChild());
    },
    attach$1(owner) {
      var t1, t2, _i, _this = this;
      _this.super$AbstractNode$attach(owner);
      for (t1 = owner._nodes; t1.containsKey$1(0, _this._id);)
        _this._id = $.SemanticsNode__lastIdentifier = ($.SemanticsNode__lastIdentifier + 1) % 65535;
      t1.$indexSet(0, _this._id, _this);
      owner._detachedNodes.remove$1(0, _this);
      if (_this._semantics$_dirty) {
        _this._semantics$_dirty = false;
        _this._markDirty$0();
      }
      t1 = _this._semantics$_children;
      if (t1 != null)
        for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].attach$1(owner);
    },
    detach$0(_) {
      var t2, t3, _i, child, t4, _this = this,
        t1 = type$.nullable_SemanticsOwner;
      t1._as(A.AbstractNode.prototype.get$owner.call(_this))._nodes.remove$1(0, _this._id);
      t1._as(A.AbstractNode.prototype.get$owner.call(_this))._detachedNodes.add$1(0, _this);
      _this.super$AbstractNode$detach(0);
      t1 = _this._semantics$_children;
      if (t1 != null)
        for (t2 = t1.length, t3 = type$.nullable_SemanticsNode, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
          child = t1[_i];
          t4 = J.getInterceptor$x(child);
          if (t3._as(A.AbstractNode.prototype.get$parent.call(t4, child)) === _this)
            t4.detach$0(child);
        }
      _this._markDirty$0();
    },
    _markDirty$0() {
      var _this = this;
      if (_this._semantics$_dirty)
        return;
      _this._semantics$_dirty = true;
      if (_this._node$_owner != null)
        type$.nullable_SemanticsOwner._as(A.AbstractNode.prototype.get$owner.call(_this))._semantics$_dirtyNodes.add$1(0, _this);
    },
    updateWith$2$childrenInInversePaintOrder$config(_, childrenInInversePaintOrder, config) {
      var t1, _this = this;
      if (config == null)
        config = $.$get$SemanticsNode__kEmptyConfig();
      if (_this._semantics$_attributedLabel.$eq(0, config._semantics$_attributedLabel))
        if (_this._semantics$_attributedHint.$eq(0, config._semantics$_attributedHint))
          if (_this._semantics$_elevation === config._semantics$_elevation)
            if (_this._thickness === config._thickness)
              if (_this._semantics$_attributedValue.$eq(0, config._semantics$_attributedValue))
                if (_this._semantics$_attributedIncreasedValue.$eq(0, config._semantics$_attributedIncreasedValue))
                  if (_this._semantics$_attributedDecreasedValue.$eq(0, config._semantics$_attributedDecreasedValue))
                    if (_this._flags === config._flags)
                      if (_this._semantics$_textDirection == config._semantics$_textDirection)
                        if (_this._sortKey == config._sortKey)
                          if (_this._actionsAsBits === config._actionsAsBits)
                            t1 = false;
                          else
                            t1 = true;
                        else
                          t1 = true;
                      else
                        t1 = true;
                    else
                      t1 = true;
                  else
                    t1 = true;
                else
                  t1 = true;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        _this._markDirty$0();
      _this._semantics$_attributedLabel = config._semantics$_attributedLabel;
      _this._semantics$_attributedValue = config._semantics$_attributedValue;
      _this._semantics$_attributedIncreasedValue = config._semantics$_attributedIncreasedValue;
      _this._semantics$_attributedDecreasedValue = config._semantics$_attributedDecreasedValue;
      _this._semantics$_attributedHint = config._semantics$_attributedHint;
      _this._semantics$_hintOverrides = config._semantics$_hintOverrides;
      _this._semantics$_elevation = config._semantics$_elevation;
      _this._thickness = config._thickness;
      _this._flags = config._flags;
      _this._semantics$_textDirection = config._semantics$_textDirection;
      _this._sortKey = config._sortKey;
      _this._actions = A.LinkedHashMap_LinkedHashMap$of(config._actions, type$.SemanticsAction, type$.void_Function_nullable_Object);
      _this._customSemanticsActions = A.LinkedHashMap_LinkedHashMap$of(config._customSemanticsActions, type$.CustomSemanticsAction, type$.void_Function);
      _this._actionsAsBits = config._actionsAsBits;
      _this._textSelection = config._textSelection;
      _this._scrollPosition = config._scrollPosition;
      _this._scrollExtentMax = config._scrollExtentMax;
      _this._scrollExtentMin = config._scrollExtentMin;
      _this._mergeAllDescendantsIntoThisNode = false;
      _this._scrollChildCount = config._scrollChildCount;
      _this._scrollIndex = config._scrollIndex;
      _this.indexInParent = config._indexInParent;
      _this._platformViewId = config._platformViewId;
      _this._maxValueLength = config._maxValueLength;
      _this._currentValueLength = config._currentValueLength;
      _this._replaceChildren$1(childrenInInversePaintOrder == null ? B.List_empty5 : childrenInInversePaintOrder);
    },
    updateWith$1$config($receiver, config) {
      return this.updateWith$2$childrenInInversePaintOrder$config($receiver, null, config);
    },
    getSemanticsData$0() {
      var t1, elevation, customSemanticsActionIds, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, _this = this, _box_0 = {};
      _box_0.flags = _this._flags;
      _box_0.actions = _this._actionsAsBits;
      _box_0.attributedLabel = _this._semantics$_attributedLabel;
      _box_0.attributedValue = _this._semantics$_attributedValue;
      _box_0.attributedIncreasedValue = _this._semantics$_attributedIncreasedValue;
      _box_0.attributedDecreasedValue = _this._semantics$_attributedDecreasedValue;
      _box_0.attributedHint = _this._semantics$_attributedHint;
      _box_0.textDirection = _this._semantics$_textDirection;
      t1 = _this.tags;
      _box_0.mergedTags = t1 == null ? null : A.LinkedHashSet_LinkedHashSet$of(t1, type$.SemanticsTag);
      _box_0.textSelection = _this._textSelection;
      _box_0.scrollChildCount = _this._scrollChildCount;
      _box_0.scrollIndex = _this._scrollIndex;
      _box_0.scrollPosition = _this._scrollPosition;
      _box_0.scrollExtentMax = _this._scrollExtentMax;
      _box_0.scrollExtentMin = _this._scrollExtentMin;
      _box_0.platformViewId = _this._platformViewId;
      _box_0.maxValueLength = _this._maxValueLength;
      _box_0.currentValueLength = _this._currentValueLength;
      elevation = _this._semantics$_elevation;
      _box_0.thickness = _this._thickness;
      customSemanticsActionIds = A.LinkedHashSet_LinkedHashSet$_empty(type$.int);
      for (t1 = _this._customSemanticsActions, t1 = A.LinkedHashMapKeyIterator$(t1, t1._modifications); t1.moveNext$0();)
        customSemanticsActionIds.add$1(0, A.CustomSemanticsAction_getIdentifier(t1.__js_helper$_current));
      _this._semantics$_hintOverrides != null;
      t1 = _box_0.flags;
      t2 = _box_0.actions;
      t3 = _box_0.attributedLabel;
      t4 = _box_0.attributedValue;
      t5 = _box_0.attributedIncreasedValue;
      t6 = _box_0.attributedDecreasedValue;
      t7 = _box_0.attributedHint;
      t8 = _box_0.textDirection;
      t9 = _this._rect;
      t10 = _this._semantics$_transform;
      t11 = _box_0.thickness;
      t12 = _box_0.mergedTags;
      t13 = _box_0.textSelection;
      t14 = _box_0.scrollChildCount;
      t15 = _box_0.scrollIndex;
      t16 = _box_0.scrollPosition;
      t17 = _box_0.scrollExtentMax;
      t18 = _box_0.scrollExtentMin;
      t19 = _box_0.platformViewId;
      t20 = _box_0.maxValueLength;
      t21 = _box_0.currentValueLength;
      t22 = A.List_List$of(customSemanticsActionIds, true, customSemanticsActionIds.$ti._eval$1("SetMixin.E"));
      B.JSArray_methods.sort$0(t22);
      return new A.SemanticsData(t1, t2, t3, t4, t5, t6, t7, t8, t13, t14, t15, t16, t17, t18, t19, t20, t21, t9, t12, t10, elevation, t11, t22);
    },
    _addToUpdate$2(builder, customSemanticsActionIdsUpdate) {
      var childrenInTraversalOrder, childrenInHitTestOrder, childCount, sortedChildren, i, customSemanticsActionIds, t3, t4, t5, t6, t7, t8, _this = this, _null = null,
        data = _this.getSemanticsData$0(),
        t1 = _this._semantics$_children,
        t2 = t1 == null ? _null : t1.length !== 0;
      if (t2 !== true || false) {
        childrenInTraversalOrder = $.$get$SemanticsNode__kEmptyChildList();
        childrenInHitTestOrder = childrenInTraversalOrder;
      } else {
        childCount = t1.length;
        sortedChildren = _this._childrenInTraversalOrder$0();
        childrenInTraversalOrder = new Int32Array(childCount);
        for (i = 0; i < childCount; ++i)
          childrenInTraversalOrder[i] = sortedChildren[i]._id;
        childrenInHitTestOrder = new Int32Array(childCount);
        for (i = childCount - 1, t1 = _this._semantics$_children; i >= 0; --i)
          childrenInHitTestOrder[i] = t1[childCount - i - 1]._id;
      }
      t1 = data.customSemanticsActionIds;
      t2 = t1.length;
      if (t2 !== 0) {
        customSemanticsActionIds = new Int32Array(t2);
        for (i = 0; i < t1.length; ++i) {
          t2 = t1[i];
          customSemanticsActionIds[i] = t2;
          customSemanticsActionIdsUpdate.add$1(0, t2);
        }
      } else
        customSemanticsActionIds = _null;
      t1 = _this._id;
      t2 = data.attributedLabel;
      t3 = data.attributedValue;
      t4 = data.attributedIncreasedValue;
      t5 = data.attributedDecreasedValue;
      t6 = data.attributedHint;
      t7 = data.transform;
      t7 = t7 == null ? _null : t7._m4storage;
      if (t7 == null)
        t7 = $.$get$SemanticsNode__kIdentityTransform();
      t8 = customSemanticsActionIds == null ? $.$get$SemanticsNode__kEmptyCustomSemanticsActionsList() : customSemanticsActionIds;
      builder._nodeUpdates.push(new A.SemanticsNodeUpdate(t1, data.flags, data.actions, -1, -1, 0, 0, 0 / 0, 0 / 0, 0 / 0, data.rect, t2.string, t2.attributes, t6.string, t6.attributes, t3.string, t3.attributes, t4.string, t4.attributes, t5.string, t5.attributes, _null, data.textDirection, A.toMatrix32(t7), childrenInTraversalOrder, childrenInHitTestOrder, t8));
      _this._semantics$_dirty = false;
    },
    _childrenInTraversalOrder$0() {
      var t2, childrenInDefaultOrder, everythingSorted, sortNodes, lastSortKey, position, child, sortKey, isCompatibleWithPreviousSortKey, _this = this,
        inheritedTextDirection = _this._semantics$_textDirection,
        t1 = type$.nullable_SemanticsNode,
        ancestor = t1._as(A.AbstractNode.prototype.get$parent.call(_this, _this));
      while (true) {
        t2 = inheritedTextDirection == null;
        if (!(t2 && ancestor != null))
          break;
        inheritedTextDirection = ancestor._semantics$_textDirection;
        ancestor = t1._as(A.AbstractNode.prototype.get$parent.call(ancestor, ancestor));
      }
      childrenInDefaultOrder = _this._semantics$_children;
      if (!t2) {
        childrenInDefaultOrder.toString;
        childrenInDefaultOrder = A._childrenInDefaultOrder(childrenInDefaultOrder, inheritedTextDirection);
      }
      t1 = type$.JSArray__TraversalSortNode;
      everythingSorted = A._setArrayType([], t1);
      sortNodes = A._setArrayType([], t1);
      for (lastSortKey = null, position = 0; position < childrenInDefaultOrder.length; ++position) {
        child = childrenInDefaultOrder[position];
        sortKey = child._sortKey;
        lastSortKey = position > 0 ? childrenInDefaultOrder[position - 1]._sortKey : null;
        if (position !== 0)
          if (J.get$runtimeType$(sortKey) === J.get$runtimeType$(lastSortKey)) {
            if (sortKey != null)
              lastSortKey.toString;
            isCompatibleWithPreviousSortKey = true;
          } else
            isCompatibleWithPreviousSortKey = false;
        else
          isCompatibleWithPreviousSortKey = true;
        if (!isCompatibleWithPreviousSortKey && sortNodes.length !== 0) {
          if (lastSortKey != null) {
            if (!!sortNodes.immutable$list)
              A.throwExpression(A.UnsupportedError$("sort"));
            t1 = sortNodes.length - 1;
            if (t1 - 0 <= 32)
              A.Sort__insertionSort(sortNodes, 0, t1, J._interceptors_JSArray__compareAny$closure());
            else
              A.Sort__dualPivotQuicksort(sortNodes, 0, t1, J._interceptors_JSArray__compareAny$closure());
          }
          B.JSArray_methods.addAll$1(everythingSorted, sortNodes);
          B.JSArray_methods.set$length(sortNodes, 0);
        }
        sortNodes.push(new A._TraversalSortNode(child, sortKey, position));
      }
      if (lastSortKey != null)
        B.JSArray_methods.sort$0(sortNodes);
      B.JSArray_methods.addAll$1(everythingSorted, sortNodes);
      t1 = type$.MappedListIterable__TraversalSortNode_SemanticsNode;
      return A.List_List$of(new A.MappedListIterable(everythingSorted, new A.SemanticsNode__childrenInTraversalOrder_closure(), t1), true, t1._eval$1("ListIterable.E"));
    },
    toStringShort$0() {
      return "SemanticsNode#" + this._id;
    },
    toStringDeep$1$childOrder(childOrder) {
      A._SemanticsDiagnosticableNode$(childOrder, null, B.DiagnosticsTreeStyle_1, this);
      return "";
    },
    toStringDeep$0() {
      return this.toStringDeep$1$childOrder(B.DebugSemanticsDumpOrder_1);
    },
    toDiagnosticsNode$3$childOrder$name$style(childOrder, $name, style) {
      return new A._SemanticsDiagnosticableNode(childOrder, this, $name, true, true, null, style);
    },
    toDiagnosticsNode$1$style(style) {
      return this.toDiagnosticsNode$3$childOrder$name$style(B.DebugSemanticsDumpOrder_1, null, style);
    },
    toDiagnosticsNode$0() {
      return this.toDiagnosticsNode$3$childOrder$name$style(B.DebugSemanticsDumpOrder_1, null, B.DiagnosticsTreeStyle_1);
    },
    debugDescribeChildren$1$childOrder(childOrder) {
      var t1 = this.debugListChildrenInOrder$1(childOrder),
        t2 = A.instanceType(t1)._eval$1("MappedListIterable<1,DiagnosticsNode>");
      return A.List_List$of(new A.MappedListIterable(t1, new A.SemanticsNode_debugDescribeChildren_closure(childOrder), t2), true, t2._eval$1("ListIterable.E"));
    },
    debugDescribeChildren$0() {
      return this.debugDescribeChildren$1$childOrder(B.DebugSemanticsDumpOrder_0);
    },
    debugListChildrenInOrder$1(childOrder) {
      var t1 = this._semantics$_children;
      if (t1 == null)
        return B.List_empty5;
      switch (childOrder.index) {
        case 0:
          return t1;
        case 1:
          return this._childrenInTraversalOrder$0();
      }
    },
    $isDiagnosticableTree: 1
  };
  A.SemanticsNode__childrenInTraversalOrder_closure.prototype = {
    call$1(sortNode) {
      return sortNode.node;
    },
    $signature: 185
  };
  A.SemanticsNode_debugDescribeChildren_closure.prototype = {
    call$1(node) {
      return A._SemanticsDiagnosticableNode$(this.childOrder, null, B.DiagnosticsTreeStyle_1, node);
    },
    $signature: 186
  };
  A._BoxEdge.prototype = {
    compareTo$1(_, other) {
      return B.JSNumber_methods.compareTo$1(this.offset, other.offset);
    }
  };
  A._SemanticsSortGroup.prototype = {
    compareTo$1(_, other) {
      return B.JSNumber_methods.compareTo$1(this.startOffset, other.startOffset);
    },
    sortedWithinVerticalGroup$0() {
      var t1, t2, _i, child, t3, horizontalGroups, group, depth, edge,
        edges = A._setArrayType([], type$.JSArray__BoxEdge);
      for (t1 = this.nodes, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        child = t1[_i];
        t3 = child._rect;
        edges.push(new A._BoxEdge(true, A._pointInParentCoordinates(child, new A.Offset(t3.left - -0.1, t3.top - -0.1))._dx, child));
        edges.push(new A._BoxEdge(false, A._pointInParentCoordinates(child, new A.Offset(t3.right + -0.1, t3.bottom + -0.1))._dx, child));
      }
      B.JSArray_methods.sort$0(edges);
      horizontalGroups = A._setArrayType([], type$.JSArray__SemanticsSortGroup);
      for (t1 = edges.length, t2 = this.textDirection, t3 = type$.JSArray_SemanticsNode, group = null, depth = 0, _i = 0; _i < edges.length; edges.length === t1 || (0, A.throwConcurrentModificationError)(edges), ++_i) {
        edge = edges[_i];
        if (edge.isLeadingEdge) {
          ++depth;
          if (group == null)
            group = new A._SemanticsSortGroup(edge.offset, t2, A._setArrayType([], t3));
          group.nodes.push(edge.node);
        } else
          --depth;
        if (depth === 0) {
          group.toString;
          horizontalGroups.push(group);
          group = null;
        }
      }
      B.JSArray_methods.sort$0(horizontalGroups);
      if (t2 === B.TextDirection_0) {
        t1 = type$.ReversedListIterable__SemanticsSortGroup;
        horizontalGroups = A.List_List$of(new A.ReversedListIterable(horizontalGroups, t1), true, t1._eval$1("ListIterable.E"));
      }
      t1 = A._arrayInstanceType(horizontalGroups)._eval$1("ExpandIterable<1,SemanticsNode>");
      return A.List_List$of(new A.ExpandIterable(horizontalGroups, new A._SemanticsSortGroup_sortedWithinVerticalGroup_closure(), t1), true, t1._eval$1("Iterable.E"));
    },
    sortedWithinKnot$0() {
      var t3, nodeMap, edges, t4, t5, t6, _i, node, t7, t8, center, _i0, t9, nextNode, t10, t11, nextCenter, direction, isLtrAndForward, isRtlAndForward, sortedIds, startNodes,
        t1 = this.nodes,
        t2 = t1.length;
      if (t2 <= 1)
        return t1;
      t3 = type$.int;
      nodeMap = A.LinkedHashMap_LinkedHashMap$_empty(t3, type$.SemanticsNode);
      edges = A.LinkedHashMap_LinkedHashMap$_empty(t3, t3);
      for (t4 = this.textDirection, t5 = t4 === B.TextDirection_0, t4 = t4 === B.TextDirection_1, t6 = t2, _i = 0; _i < t6; t9 === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i, t6 = t9) {
        node = t1[_i];
        nodeMap.$indexSet(0, node._id, node);
        t6 = node._rect;
        t7 = t6.left;
        t8 = t6.top;
        center = A._pointInParentCoordinates(node, new A.Offset(t7 + (t6.right - t7) / 2, t8 + (t6.bottom - t8) / 2));
        for (t6 = t1.length, t7 = center._dx, t8 = center._dy, _i0 = 0; t9 = t1.length, _i0 < t9; t1.length === t6 || (0, A.throwConcurrentModificationError)(t1), ++_i0) {
          nextNode = t1[_i0];
          if ((node == null ? nextNode == null : node === nextNode) || edges.$index(0, nextNode._id) === node._id)
            continue;
          t9 = nextNode._rect;
          t10 = t9.left;
          t11 = t9.top;
          nextCenter = A._pointInParentCoordinates(nextNode, new A.Offset(t10 + (t9.right - t10) / 2, t11 + (t9.bottom - t11) / 2));
          direction = Math.atan2(nextCenter._dy - t8, nextCenter._dx - t7);
          isLtrAndForward = t4 && -0.7853981633974483 < direction && direction < 2.356194490192345;
          if (t5)
            isRtlAndForward = direction < -2.356194490192345 || direction > 2.356194490192345;
          else
            isRtlAndForward = false;
          if (isLtrAndForward || isRtlAndForward)
            edges.$indexSet(0, node._id, nextNode._id);
        }
      }
      sortedIds = A._setArrayType([], type$.JSArray_int);
      startNodes = A._setArrayType(t1.slice(0), A._arrayInstanceType(t1));
      B.JSArray_methods.sort$1(startNodes, new A._SemanticsSortGroup_sortedWithinKnot_closure());
      new A.MappedListIterable(startNodes, new A._SemanticsSortGroup_sortedWithinKnot_closure0(), A._arrayInstanceType(startNodes)._eval$1("MappedListIterable<1,int>")).forEach$1(0, new A._SemanticsSortGroup_sortedWithinKnot_search(A.LinkedHashSet_LinkedHashSet$_empty(t3), edges, sortedIds));
      t1 = type$.MappedListIterable_int_SemanticsNode;
      t1 = A.List_List$of(new A.MappedListIterable(sortedIds, new A._SemanticsSortGroup_sortedWithinKnot_closure1(nodeMap), t1), true, t1._eval$1("ListIterable.E"));
      t2 = A._arrayInstanceType(t1)._eval$1("ReversedListIterable<1>");
      return A.List_List$of(new A.ReversedListIterable(t1, t2), true, t2._eval$1("ListIterable.E"));
    }
  };
  A._SemanticsSortGroup_sortedWithinVerticalGroup_closure.prototype = {
    call$1(group) {
      return group.sortedWithinKnot$0();
    },
    $signature: 64
  };
  A._SemanticsSortGroup_sortedWithinKnot_closure.prototype = {
    call$2(a, b) {
      var bTopLeft, verticalDiff,
        t1 = a._rect,
        aTopLeft = A._pointInParentCoordinates(a, new A.Offset(t1.left, t1.top));
      t1 = b._rect;
      bTopLeft = A._pointInParentCoordinates(b, new A.Offset(t1.left, t1.top));
      verticalDiff = B.JSNumber_methods.compareTo$1(aTopLeft._dy, bTopLeft._dy);
      if (verticalDiff !== 0)
        return -verticalDiff;
      return -B.JSNumber_methods.compareTo$1(aTopLeft._dx, bTopLeft._dx);
    },
    $signature: 39
  };
  A._SemanticsSortGroup_sortedWithinKnot_search.prototype = {
    call$1(id) {
      var _this = this,
        t1 = _this.visitedIds;
      if (t1.contains$1(0, id))
        return;
      t1.add$1(0, id);
      t1 = _this.edges;
      if (t1.containsKey$1(0, id)) {
        t1 = t1.$index(0, id);
        t1.toString;
        _this.call$1(t1);
      }
      _this.sortedIds.push(id);
    },
    $signature: 61
  };
  A._SemanticsSortGroup_sortedWithinKnot_closure0.prototype = {
    call$1(node) {
      return node._id;
    },
    $signature: 189
  };
  A._SemanticsSortGroup_sortedWithinKnot_closure1.prototype = {
    call$1(id) {
      var t1 = this.nodeMap.$index(0, id);
      t1.toString;
      return t1;
    },
    $signature: 190
  };
  A._childrenInDefaultOrder_closure.prototype = {
    call$1(group) {
      return group.sortedWithinVerticalGroup$0();
    },
    $signature: 64
  };
  A._TraversalSortNode.prototype = {
    compareTo$1(_, other) {
      var t2,
        t1 = this.sortKey;
      if (t1 == null || other.sortKey == null)
        return this.position - other.position;
      t1.toString;
      t2 = other.sortKey;
      t2.toString;
      return t1.compareTo$1(0, t2);
    }
  };
  A.SemanticsOwner.prototype = {
    sendSemanticsUpdate$0() {
      var customSemanticsActionIds, visitedNodes, t2, t3, t4, t5, localDirtyNodes, t6, t7, _i, node, t8, builder, _this = this,
        t1 = _this._semantics$_dirtyNodes;
      if (t1._collection$_length === 0)
        return;
      customSemanticsActionIds = A.LinkedHashSet_LinkedHashSet$_empty(type$.int);
      visitedNodes = A._setArrayType([], type$.JSArray_SemanticsNode);
      for (t2 = type$.nullable_SemanticsNode, t3 = A._instanceType(t1)._eval$1("WhereIterable<SetMixin.E>"), t4 = t3._eval$1("Iterable.E"), t5 = _this._detachedNodes; t1._collection$_length !== 0;) {
        localDirtyNodes = A.List_List$of(new A.WhereIterable(t1, new A.SemanticsOwner_sendSemanticsUpdate_closure(_this), t3), true, t4);
        t1.clear$0(0);
        t5.clear$0(0);
        t6 = new A.SemanticsOwner_sendSemanticsUpdate_closure0();
        if (!!localDirtyNodes.immutable$list)
          A.throwExpression(A.UnsupportedError$("sort"));
        t7 = localDirtyNodes.length - 1;
        if (t7 - 0 <= 32)
          A.Sort__insertionSort(localDirtyNodes, 0, t7, t6);
        else
          A.Sort__dualPivotQuicksort(localDirtyNodes, 0, t7, t6);
        B.JSArray_methods.addAll$1(visitedNodes, localDirtyNodes);
        for (t6 = localDirtyNodes.length, _i = 0; _i < localDirtyNodes.length; localDirtyNodes.length === t6 || (0, A.throwConcurrentModificationError)(localDirtyNodes), ++_i) {
          node = localDirtyNodes[_i];
          t7 = node._isMergedIntoParent;
          if (t7) {
            t7 = J.getInterceptor$x(node);
            if (t2._as(A.AbstractNode.prototype.get$parent.call(t7, node)) != null)
              t8 = t2._as(A.AbstractNode.prototype.get$parent.call(t7, node))._isMergedIntoParent;
            else
              t8 = false;
            if (t8) {
              t2._as(A.AbstractNode.prototype.get$parent.call(t7, node))._markDirty$0();
              node._semantics$_dirty = false;
            }
          }
        }
      }
      B.JSArray_methods.sort$1(visitedNodes, new A.SemanticsOwner_sendSemanticsUpdate_closure1());
      $.SemanticsBinding__instance.toString;
      builder = new A.SemanticsUpdateBuilder(A._setArrayType([], type$.JSArray_SemanticsNodeUpdate));
      for (t2 = visitedNodes.length, _i = 0; _i < visitedNodes.length; visitedNodes.length === t2 || (0, A.throwConcurrentModificationError)(visitedNodes), ++_i) {
        node = visitedNodes[_i];
        if (node._semantics$_dirty && node._node$_owner != null)
          node._addToUpdate$2(builder, customSemanticsActionIds);
      }
      t1.clear$0(0);
      for (t1 = A._LinkedHashSetIterator$(customSemanticsActionIds, customSemanticsActionIds._collection$_modifications), t2 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
        t3 = t1._collection$_current;
        $.CustomSemanticsAction__actions.$index(0, t3 == null ? t2._as(t3) : t3).toString;
      }
      $.SemanticsBinding__instance.toString;
      $.$get$window();
      t1 = $.EngineSemanticsOwner__instance;
      if (t1 == null)
        t1 = $.EngineSemanticsOwner__instance = A.EngineSemanticsOwner$_();
      t1.updateSemantics$1(new A.SemanticsUpdate(builder._nodeUpdates));
      _this.notifyListeners$0();
    },
    _getSemanticsActionHandlerForId$2(id, action) {
      var t2, t1 = {},
        result = t1.result = this._nodes.$index(0, id);
      if (result != null) {
        t2 = result._isMergedIntoParent;
        t2 = t2 && !result._actions.containsKey$1(0, action);
      } else
        t2 = false;
      if (t2)
        result._visitDescendants$1(new A.SemanticsOwner__getSemanticsActionHandlerForId_closure(t1, action));
      t2 = t1.result;
      if (t2 == null || !t2._actions.containsKey$1(0, action))
        return null;
      return t1.result._actions.$index(0, action);
    },
    performAction$3(id, action, args) {
      var handler = this._getSemanticsActionHandlerForId$2(id, action);
      if (handler != null) {
        handler.call$1(args);
        return;
      }
      if (action === B.SemanticsAction_256 && this._nodes.$index(0, id)._showOnScreen != null)
        this._nodes.$index(0, id)._showOnScreen.call$0();
    },
    toString$0(_) {
      return "<optimized out>#" + A.shortHash(this);
    }
  };
  A.SemanticsOwner_sendSemanticsUpdate_closure.prototype = {
    call$1(node) {
      return !this.$this._detachedNodes.contains$1(0, node);
    },
    $signature: 66
  };
  A.SemanticsOwner_sendSemanticsUpdate_closure0.prototype = {
    call$2(a, b) {
      return a._depth - b._depth;
    },
    $signature: 39
  };
  A.SemanticsOwner_sendSemanticsUpdate_closure1.prototype = {
    call$2(a, b) {
      return a._depth - b._depth;
    },
    $signature: 39
  };
  A.SemanticsOwner__getSemanticsActionHandlerForId_closure.prototype = {
    call$1(node) {
      if (node._actions.containsKey$1(0, this.action)) {
        this._box_0.result = node;
        return false;
      }
      return true;
    },
    $signature: 66
  };
  A.SemanticsConfiguration.prototype = {
    _addAction$2(action, handler) {
      var _this = this;
      _this._actions.$indexSet(0, action, handler);
      _this._actionsAsBits = _this._actionsAsBits | action.index;
      _this._hasBeenAnnotated = true;
    },
    _addArgumentlessAction$2(action, handler) {
      this._addAction$2(action, new A.SemanticsConfiguration__addArgumentlessAction_closure(handler));
    },
    set$onTap(value) {
      value.toString;
      this._addArgumentlessAction$2(B.SemanticsAction_1, value);
    },
    set$onLongPress(value) {
      value.toString;
      this._addArgumentlessAction$2(B.SemanticsAction_2, value);
    },
    set$elevation(_, value) {
      if (value === this._semantics$_elevation)
        return;
      this._semantics$_elevation = value;
      this._hasBeenAnnotated = true;
    },
    _setFlag$2(flag, value) {
      var _this = this,
        t1 = _this._flags,
        t2 = flag.index;
      if (value)
        _this._flags = t1 | t2;
      else
        _this._flags = t1 & ~t2;
      _this._hasBeenAnnotated = true;
    },
    isCompatibleWith$1(other) {
      var t1, _this = this;
      if (other == null || !other._hasBeenAnnotated || !_this._hasBeenAnnotated)
        return true;
      if ((_this._actionsAsBits & other._actionsAsBits) !== 0)
        return false;
      if ((_this._flags & other._flags) !== 0)
        return false;
      if (_this._semantics$_attributedValue.string.length !== 0)
        t1 = other._semantics$_attributedValue.string.length !== 0;
      else
        t1 = false;
      if (t1)
        return false;
      return true;
    },
    absorb$1(child) {
      var t1, t2, _this = this;
      if (!child._hasBeenAnnotated)
        return;
      _this._actions.addAll$1(0, child._actions);
      _this._customSemanticsActions.addAll$1(0, child._customSemanticsActions);
      _this._actionsAsBits = _this._actionsAsBits | child._actionsAsBits;
      _this._flags = _this._flags | child._flags;
      _this._textSelection = child._textSelection;
      _this._scrollPosition = child._scrollPosition;
      _this._scrollExtentMax = child._scrollExtentMax;
      _this._scrollExtentMin = child._scrollExtentMin;
      if (_this._semantics$_hintOverrides == null)
        _this._semantics$_hintOverrides = child._semantics$_hintOverrides;
      _this._indexInParent = child._indexInParent;
      _this._scrollIndex = child._scrollIndex;
      _this._scrollChildCount = child._scrollChildCount;
      _this._platformViewId = child._platformViewId;
      _this._maxValueLength = child._maxValueLength;
      _this._currentValueLength = child._currentValueLength;
      t1 = _this._semantics$_textDirection;
      if (t1 == null) {
        t1 = _this._semantics$_textDirection = child._semantics$_textDirection;
        _this._hasBeenAnnotated = true;
      }
      if (_this._sortKey == null)
        _this._sortKey = child._sortKey;
      t2 = _this._semantics$_attributedLabel;
      _this._semantics$_attributedLabel = A._concatAttributedString(child._semantics$_attributedLabel, child._semantics$_textDirection, t2, t1);
      t1 = _this._semantics$_attributedValue;
      if (t1.string === "")
        _this._semantics$_attributedValue = child._semantics$_attributedValue;
      t1 = _this._semantics$_attributedIncreasedValue;
      if (t1.string === "")
        _this._semantics$_attributedIncreasedValue = child._semantics$_attributedIncreasedValue;
      t1 = _this._semantics$_attributedDecreasedValue;
      if (t1.string === "")
        _this._semantics$_attributedDecreasedValue = child._semantics$_attributedDecreasedValue;
      t1 = _this._semantics$_attributedHint;
      t2 = _this._semantics$_textDirection;
      _this._semantics$_attributedHint = A._concatAttributedString(child._semantics$_attributedHint, child._semantics$_textDirection, t1, t2);
      _this._thickness = Math.max(_this._thickness, child._thickness + child._semantics$_elevation);
      _this._hasBeenAnnotated = _this._hasBeenAnnotated || child._hasBeenAnnotated;
    },
    copy$0(_) {
      var _this = this,
        t1 = A.SemanticsConfiguration$();
      t1._isSemanticBoundary = _this._isSemanticBoundary;
      t1.explicitChildNodes = _this.explicitChildNodes;
      t1.isBlockingSemanticsOfPreviouslyPaintedNodes = false;
      t1._hasBeenAnnotated = _this._hasBeenAnnotated;
      t1._isMergingSemanticsOfDescendants = false;
      t1._semantics$_textDirection = _this._semantics$_textDirection;
      t1._sortKey = _this._sortKey;
      t1._semantics$_attributedLabel = _this._semantics$_attributedLabel;
      t1._semantics$_attributedIncreasedValue = _this._semantics$_attributedIncreasedValue;
      t1._semantics$_attributedValue = _this._semantics$_attributedValue;
      t1._semantics$_attributedDecreasedValue = _this._semantics$_attributedDecreasedValue;
      t1._semantics$_attributedHint = _this._semantics$_attributedHint;
      t1._semantics$_hintOverrides = _this._semantics$_hintOverrides;
      t1._semantics$_elevation = _this._semantics$_elevation;
      t1._thickness = _this._thickness;
      t1._flags = _this._flags;
      t1._tagsForChildren = _this._tagsForChildren;
      t1._textSelection = _this._textSelection;
      t1._scrollPosition = _this._scrollPosition;
      t1._scrollExtentMax = _this._scrollExtentMax;
      t1._scrollExtentMin = _this._scrollExtentMin;
      t1._actionsAsBits = _this._actionsAsBits;
      t1._indexInParent = _this._indexInParent;
      t1._scrollIndex = _this._scrollIndex;
      t1._scrollChildCount = _this._scrollChildCount;
      t1._platformViewId = _this._platformViewId;
      t1._maxValueLength = _this._maxValueLength;
      t1._currentValueLength = _this._currentValueLength;
      t1._actions.addAll$1(0, _this._actions);
      t1._customSemanticsActions.addAll$1(0, _this._customSemanticsActions);
      return t1;
    }
  };
  A.SemanticsConfiguration__addArgumentlessAction_closure.prototype = {
    call$1(args) {
      this.handler.call$0();
    },
    $signature: 17
  };
  A.DebugSemanticsDumpOrder.prototype = {
    toString$0(_) {
      return "DebugSemanticsDumpOrder." + this._name;
    }
  };
  A.SemanticsSortKey.prototype = {
    compareTo$1(_, other) {
      var t1 = this.doCompare$1(other);
      return t1;
    },
    get$name(receiver) {
      return this.name;
    }
  };
  A.OrdinalSortKey.prototype = {
    doCompare$1(other) {
      var t1 = other.order === this.order;
      if (t1)
        return 0;
      return B.JSInt_methods.compareTo$1(this.order, other.order);
    }
  };
  A._SemanticsData_Object_Diagnosticable.prototype = {};
  A._SemanticsNode_AbstractNode_DiagnosticableTreeMixin.prototype = {};
  A._SemanticsSortKey_Object_Diagnosticable.prototype = {};
  A.AssetBundle.prototype = {
    loadString$2$cache(key, cache) {
      return this.loadString$body$AssetBundle(key, true);
    },
    loadString$body$AssetBundle(key, cache) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$self = this, data;
      var $async$loadString$2$cache = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.load$1(0, key), $async$loadString$2$cache);
            case 3:
              // returning from await.
              data = $async$result;
              if (data.byteLength < 51200) {
                $async$returnValue = B.C_Utf8Codec.decode$1(0, A.NativeUint8List_NativeUint8List$view(data.buffer, 0, null));
                // goto return
                $async$goto = 1;
                break;
              }
              $async$returnValue = A.compute(A.asset_bundle_AssetBundle__utf8decode$closure(), data, 'UTF8 decode for "' + key + '"', type$.ByteData, type$.String);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$loadString$2$cache, $async$completer);
    },
    toString$0(_) {
      return "<optimized out>#" + A.shortHash(this) + "()";
    }
  };
  A.CachingAssetBundle.prototype = {
    loadString$2$cache(key, cache) {
      return this.super$AssetBundle$loadString(key, true);
    }
  };
  A.PlatformAssetBundle.prototype = {
    load$1(_, key) {
      return this.load$body$PlatformAssetBundle(0, key);
    },
    load$body$PlatformAssetBundle(_, key) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.ByteData),
        $async$returnValue, t2, hasAuthority, path, encoded, asset, t1, userInfo, host, query, fragment, port;
      var $async$load$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A._Uri__uriEncode(B.List_gnE, key, B.C_Utf8Codec, false);
              userInfo = A._Uri__makeUserInfo(null, 0, 0);
              host = A._Uri__makeHost(null, 0, 0, false);
              query = A._Uri__makeQuery(null, 0, 0, null);
              fragment = A._Uri__makeFragment(null, 0, 0);
              port = A._Uri__makePort(null, "");
              if (host == null)
                t2 = userInfo.length !== 0 || port != null || false;
              else
                t2 = false;
              if (t2)
                host = "";
              t2 = host == null;
              hasAuthority = !t2;
              path = A._Uri__makePath(t1, 0, t1.length, null, "", hasAuthority);
              t1 = t2 && !B.JSString_methods.startsWith$1(path, "/");
              if (t1)
                path = A._Uri__normalizeRelativePath(path, hasAuthority);
              else
                path = A._Uri__removeDotSegments(path);
              encoded = B.C_Utf8Encoder.convert$1(A._Uri$_internal("", userInfo, t2 && B.JSString_methods.startsWith$1(path, "//") ? "" : host, port, path, query, fragment).path);
              $async$goto = 3;
              return A._asyncAwait(A._lateReadCheck($.ServicesBinding__instance.ServicesBinding___ServicesBinding__defaultBinaryMessenger, "_defaultBinaryMessenger").send$2(0, "flutter/assets", A.NativeByteData_NativeByteData$view(encoded.buffer, 0, null)), $async$load$1);
            case 3:
              // returning from await.
              asset = $async$result;
              if (asset == null)
                throw A.wrapException(A.FlutterError_FlutterError("Unable to load asset: " + key));
              $async$returnValue = asset;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$load$1, $async$completer);
    }
  };
  A.BinaryMessenger.prototype = {};
  A.ServicesBinding.prototype = {
    handleMemoryPressure$0() {
      var t1 = $.$get$rootBundle();
      t1._stringCache.clear$0(0);
      t1._structuredDataCache.clear$0(0);
    },
    handleSystemMessage$1(systemMessage) {
      return this.handleSystemMessage$body$ServicesBinding(systemMessage);
    },
    handleSystemMessage$body$ServicesBinding(systemMessage) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this;
      var $async$handleSystemMessage$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              switch (A._asString(J.$index$asx(type$.Map_String_dynamic._as(systemMessage), "type"))) {
                case "memoryPressure":
                  $async$self.handleMemoryPressure$0();
                  break;
              }
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$handleSystemMessage$1, $async$completer);
    },
    _addLicenses$0() {
      var t1,
        controller = A._Cell$named("controller");
      controller.set$finalLocalValue(new A._AsyncStreamController(new A.ServicesBinding__addLicenses_closure(controller), null, null, null, type$._AsyncStreamController_LicenseEntry));
      t1 = controller._readLocal$0();
      return new A._ControllerStream(t1, A.instanceType(t1)._eval$1("_ControllerStream<1>"));
    },
    readInitialLifecycleStateFromNativeWindow$0() {
      if (this.SchedulerBinding__lifecycleState != null)
        return;
      $.$get$window();
      var state = A.ServicesBinding__parseAppLifecycleMessage("AppLifecycleState.resumed");
      if (state != null)
        this.handleAppLifecycleStateChanged$1(state);
    },
    _handleLifecycleMessage$1(message) {
      return this._handleLifecycleMessage$body$ServicesBinding(message);
    },
    _handleLifecycleMessage$body$ServicesBinding(message) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_String),
        $async$returnValue, $async$self = this, t1;
      var $async$_handleLifecycleMessage$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              message.toString;
              t1 = A.ServicesBinding__parseAppLifecycleMessage(message);
              t1.toString;
              $async$self.handleAppLifecycleStateChanged$1(t1);
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_handleLifecycleMessage$1, $async$completer);
    },
    _handlePlatformMessage$1(methodCall) {
      return this._handlePlatformMessage$body$ServicesBinding(methodCall);
    },
    _handlePlatformMessage$body$ServicesBinding(methodCall) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$_handlePlatformMessage$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              type$.List_dynamic._as(methodCall.$arguments);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_handlePlatformMessage$1, $async$completer);
    },
    $isSchedulerBinding: 1
  };
  A.ServicesBinding__addLicenses_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, rawLicenses, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              rawLicenses = A._Cell$named("rawLicenses");
              $async$temp1 = rawLicenses;
              $async$goto = 2;
              return A._asyncAwait($.$get$rootBundle().loadString$2$cache("NOTICES", false), $async$call$0);
            case 2:
              // returning from await.
              $async$temp1.set$finalLocalValue($async$result);
              t1 = $async$self.controller;
              $async$temp1 = J;
              $async$goto = 3;
              return A._asyncAwait(A.compute(A.binding1_ServicesBinding__parseLicenses$closure(), rawLicenses._readLocal$0(), "parseLicenses", type$.String, type$.List_LicenseEntry), $async$call$0);
            case 3:
              // returning from await.
              $async$temp1.forEach$1$ax($async$result, J.get$add$ax(t1._readLocal$0()));
              $async$goto = 4;
              return A._asyncAwait(J.close$0$x(t1._readLocal$0()), $async$call$0);
            case 4:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 12
  };
  A._DefaultBinaryMessenger.prototype = {
    send$2(_, channel, message) {
      var t1 = new A._Future($.Zone__current, type$._Future_nullable_ByteData);
      $.$get$EnginePlatformDispatcher__instance()._sendPlatformMessage$3(channel, message, A.EnginePlatformDispatcher__zonedPlatformMessageResponseCallback(new A._DefaultBinaryMessenger_send_closure(new A._AsyncCompleter(t1, type$._AsyncCompleter_nullable_ByteData))));
      return t1;
    },
    setMessageHandler$2(channel, handler) {
      if (handler == null) {
        channel = $.$get$channelBuffers()._channels.$index(0, channel);
        if (channel != null)
          channel._channelCallbackRecord = null;
      } else
        $.$get$channelBuffers().setListener$2(channel, new A._DefaultBinaryMessenger_setMessageHandler_closure(handler));
    }
  };
  A._DefaultBinaryMessenger_send_closure.prototype = {
    call$1(reply) {
      var exception, stack, exception0, t1;
      try {
        this.completer.complete$1(0, reply);
      } catch (exception0) {
        exception = A.unwrapException(exception0);
        stack = A.getTraceFromException(exception0);
        t1 = A.ErrorDescription$("during a platform message response callback");
        A.FlutterError_reportError(new A.FlutterErrorDetails(exception, stack, "services library", t1, null, false));
      }
    },
    $signature: 5
  };
  A._DefaultBinaryMessenger_setMessageHandler_closure.prototype = {
    call$2(data, callback) {
      return this.$call$body$_DefaultBinaryMessenger_setMessageHandler_closure(data, callback);
    },
    $call$body$_DefaultBinaryMessenger_setMessageHandler_closure(data, callback) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, exception, stack, exception0, t1, response, $async$exception0;
      var $async$call$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              response = null;
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait($async$self.handler.call$1(data), $async$call$2);
            case 6:
              // returning from await.
              response = $async$result;
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception0 = $async$currentError;
              exception = A.unwrapException($async$exception0);
              stack = A.getTraceFromException($async$exception0);
              t1 = A.ErrorDescription$("during a platform message callback");
              A.FlutterError_reportError(new A.FlutterErrorDetails(exception, stack, "services library", t1, null, false));
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 4:
              // finally
              $async$handler = 1;
              callback.call$1(response);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$2, $async$completer);
    },
    $signature: 195
  };
  A.KeyboardLockMode.prototype = {};
  A.KeyEvent.prototype = {};
  A.KeyDownEvent.prototype = {};
  A.KeyUpEvent.prototype = {};
  A.KeyRepeatEvent.prototype = {};
  A.HardwareKeyboard.prototype = {
    _dispatchKeyEvent$1($event) {
      var handled, handler, thisResult, exception, stack, t1, _i, exception0, t2, t3;
      this._duringDispatch = true;
      handled = false;
      for (t1 = this._handlers, _i = 0; false; ++_i) {
        handler = t1[_i];
        try {
          thisResult = handler.call$1($event);
          handled = handled || thisResult;
        } catch (exception0) {
          exception = A.unwrapException(exception0);
          stack = A.getTraceFromException(exception0);
          t2 = A.ErrorDescription$("while processing a key handler");
          t3 = $.$get$FlutterError_onError();
          if (t3 != null)
            t3.call$1(new A.FlutterErrorDetails(exception, stack, "services library", t2, null, false));
        }
      }
      this._duringDispatch = false;
      return handled;
    },
    handleKeyEvent$1($event) {
      var lockMode, t1, _this = this,
        physicalKey = $event.physicalKey,
        logicalKey = $event.logicalKey;
      if ($event instanceof A.KeyDownEvent) {
        _this._pressedKeys.$indexSet(0, physicalKey, logicalKey);
        lockMode = $.$get$KeyboardLockMode__knownLockModes().$index(0, logicalKey.keyId);
        if (lockMode != null) {
          t1 = _this._lockModes;
          if (t1.contains$1(0, lockMode))
            t1.remove$1(0, lockMode);
          else
            t1.add$1(0, lockMode);
        }
      } else if ($event instanceof A.KeyUpEvent)
        _this._pressedKeys.remove$1(0, physicalKey);
      return _this._dispatchKeyEvent$1($event);
    }
  };
  A.KeyDataTransitMode.prototype = {
    toString$0(_) {
      return "KeyDataTransitMode." + this._name;
    }
  };
  A.KeyMessage.prototype = {
    toString$0(_) {
      return "KeyMessage(" + A.S(this.events) + ")";
    }
  };
  A.KeyEventManager.prototype = {
    handleKeyData$1(data) {
      var $event, _this = this,
        t1 = _this._transitMode;
      switch ((t1 == null ? _this._transitMode = B.KeyDataTransitMode_1 : t1).index) {
        case 0:
          return false;
        case 1:
          if (data.physical === 0 && data.logical === 0)
            return false;
          $event = A.KeyEventManager__eventFromData(data);
          if (data.synthesized && _this._keyEventsSinceLastMessage.length === 0) {
            _this._hardwareKeyboard.handleKeyEvent$1($event);
            _this._dispatchKeyMessage$2(A._setArrayType([$event], type$.JSArray_KeyEvent), null);
          } else
            _this._keyEventsSinceLastMessage.push($event);
          return false;
      }
    },
    _dispatchKeyMessage$2(keyEvents, rawEvent) {
      var message, exception, stack, exception0,
        t1 = this.keyMessageHandler;
      if (t1 != null) {
        message = new A.KeyMessage(keyEvents, rawEvent);
        try {
          t1 = t1.call$1(message);
          return t1;
        } catch (exception0) {
          exception = A.unwrapException(exception0);
          stack = A.getTraceFromException(exception0);
          t1 = A.ErrorDescription$("while processing the key message handler");
          A.FlutterError_reportError(new A.FlutterErrorDetails(exception, stack, "services library", t1, null, false));
        }
      }
      return false;
    },
    handleRawKeyMessage$1(message) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_String_dynamic),
        $async$returnValue, $async$self = this, rawEvent, handled, t1, t2, t3, _i;
      var $async$handleRawKeyMessage$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._transitMode == null) {
                $async$self._transitMode = B.KeyDataTransitMode_0;
                $async$self._rawKeyboard._raw_keyboard$_listeners.push($async$self.get$_convertRawEventAndStore());
              }
              rawEvent = A.RawKeyEvent_RawKeyEvent$fromMessage(type$.Map_String_dynamic._as(message));
              handled = $async$self._rawKeyboard.handleRawKeyEvent$1(rawEvent);
              for (t1 = $async$self._keyEventsSinceLastMessage, t2 = t1.length, t3 = $async$self._hardwareKeyboard, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
                handled = t3.handleKeyEvent$1(t1[_i]) || handled;
              handled = $async$self._dispatchKeyMessage$2(t1, rawEvent) || handled;
              B.JSArray_methods.set$length(t1, 0);
              $async$returnValue = A.LinkedHashMap_LinkedHashMap$_literal(["handled", handled], type$.String, type$.dynamic);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$handleRawKeyMessage$1, $async$completer);
    },
    _convertRawEventAndStore$1(rawEvent) {
      var t2, physicalKeysPressed, recordedLogicalMain, timeStamp, character, mainEvent, t3, t4, t5, t6, t7, t8, _null = null,
        t1 = rawEvent.data,
        physicalKey = t1.get$physicalKey(),
        logicalKey = t1.get$logicalKey();
      t1 = this._hardwareKeyboard._pressedKeys;
      t2 = A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>");
      physicalKeysPressed = A.LinkedHashSet_LinkedHashSet$of(new A.LinkedHashMapKeyIterable(t1, t2), t2._eval$1("Iterable.E"));
      recordedLogicalMain = t1.$index(0, physicalKey);
      timeStamp = $.ServicesBinding__instance.SchedulerBinding__lastRawTimeStamp;
      character = rawEvent.character;
      if (character === "")
        character = _null;
      if (rawEvent instanceof A.RawKeyDownEvent)
        if (recordedLogicalMain == null) {
          mainEvent = new A.KeyDownEvent(physicalKey, logicalKey, character, timeStamp, false);
          physicalKeysPressed.add$1(0, physicalKey);
        } else
          mainEvent = new A.KeyRepeatEvent(physicalKey, recordedLogicalMain, character, timeStamp, false);
      else if (recordedLogicalMain == null)
        mainEvent = _null;
      else {
        mainEvent = new A.KeyUpEvent(physicalKey, recordedLogicalMain, _null, timeStamp, false);
        physicalKeysPressed.remove$1(0, physicalKey);
      }
      for (t2 = this._rawKeyboard._keysPressed, t3 = A._instanceType(t2)._eval$1("LinkedHashMapKeyIterable<1>"), t4 = t3._eval$1("Iterable.E"), t5 = physicalKeysPressed.difference$1(A.LinkedHashSet_LinkedHashSet$of(new A.LinkedHashMapKeyIterable(t2, t3), t4)), t5 = t5.get$iterator(t5), t6 = this._keyEventsSinceLastMessage; t5.moveNext$0();) {
        t7 = t5.get$current(t5);
        t8 = t1.$index(0, t7);
        t8.toString;
        t6.push(new A.KeyUpEvent(t7, t8, _null, timeStamp, true));
      }
      for (t1 = A.LinkedHashSet_LinkedHashSet$of(new A.LinkedHashMapKeyIterable(t2, t3), t4).difference$1(physicalKeysPressed), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t3 = t1.get$current(t1);
        t4 = t2.$index(0, t3);
        t4.toString;
        t6.push(new A.KeyDownEvent(t3, t4, _null, timeStamp, true));
      }
      if (mainEvent != null)
        t6.push(mainEvent);
    }
  };
  A._KeyEvent_Object_Diagnosticable.prototype = {};
  A.KeyboardKey.prototype = {};
  A.LogicalKeyboardKey.prototype = {
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this.keyId);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return other instanceof A.LogicalKeyboardKey && other.keyId === this.keyId;
    }
  };
  A.PhysicalKeyboardKey.prototype = {
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this.usbHidUsage);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return other instanceof A.PhysicalKeyboardKey && other.usbHidUsage === this.usbHidUsage;
    }
  };
  A._KeyboardKey_Object_Diagnosticable.prototype = {};
  A.MethodCall0.prototype = {
    toString$0(_) {
      return "MethodCall(" + this.method + ", " + A.S(this.$arguments) + ")";
    }
  };
  A.PlatformException.prototype = {
    toString$0(_) {
      var _this = this;
      return "PlatformException(" + _this.code + ", " + A.S(_this.message) + ", " + A.S(_this.details) + ", " + A.S(_this.stacktrace) + ")";
    },
    $isException: 1
  };
  A.MissingPluginException.prototype = {
    toString$0(_) {
      return "MissingPluginException(" + this.message + ")";
    },
    $isException: 1
  };
  A.StringCodec.prototype = {
    decodeMessage$1(message) {
      if (message == null)
        return null;
      return B.Utf8Decoder_false.convert$1(A.NativeUint8List_NativeUint8List$view(message.buffer, message.byteOffset, message.byteLength));
    },
    encodeMessage$1(message) {
      if (message == null)
        return null;
      return A.NativeByteData_NativeByteData$view(B.C_Utf8Encoder.convert$1(message).buffer, 0, null);
    }
  };
  A.JSONMessageCodec0.prototype = {
    encodeMessage$1(message) {
      if (message == null)
        return null;
      return B.C_StringCodec.encodeMessage$1(B.C_JsonCodec.encode$1(message));
    },
    decodeMessage$1(message) {
      var t1;
      if (message == null)
        return message;
      t1 = B.C_StringCodec.decodeMessage$1(message);
      t1.toString;
      return B.C_JsonCodec.decode$1(0, t1);
    }
  };
  A.JSONMethodCodec0.prototype = {
    encodeMethodCall$1(methodCall) {
      var t1 = B.C_JSONMessageCodec0.encodeMessage$1(A.LinkedHashMap_LinkedHashMap$_literal(["method", methodCall.method, "args", methodCall.$arguments], type$.String, type$.nullable_Object));
      t1.toString;
      return t1;
    },
    decodeMethodCall$1(methodCall) {
      var t1, method, $arguments, _null = null,
        decoded = B.C_JSONMessageCodec0.decodeMessage$1(methodCall);
      if (!type$.Map_dynamic_dynamic._is(decoded))
        throw A.wrapException(A.FormatException$("Expected method call Map, got " + A.S(decoded), _null, _null));
      t1 = J.getInterceptor$asx(decoded);
      method = t1.$index(decoded, "method");
      $arguments = t1.$index(decoded, "args");
      if (typeof method == "string")
        return new A.MethodCall0(method, $arguments);
      throw A.wrapException(A.FormatException$("Invalid method call: " + A.S(decoded), _null, _null));
    },
    decodeEnvelope$1(envelope) {
      var t1, t2, t3, _null = null,
        decoded = B.C_JSONMessageCodec0.decodeMessage$1(envelope);
      if (!type$.List_dynamic._is(decoded))
        throw A.wrapException(A.FormatException$("Expected envelope List, got " + A.S(decoded), _null, _null));
      t1 = J.getInterceptor$asx(decoded);
      if (t1.get$length(decoded) === 1)
        return t1.$index(decoded, 0);
      if (t1.get$length(decoded) === 3)
        if (typeof t1.$index(decoded, 0) == "string")
          t2 = t1.$index(decoded, 1) == null || typeof t1.$index(decoded, 1) == "string";
        else
          t2 = false;
      else
        t2 = false;
      if (t2) {
        t2 = A._asString(t1.$index(decoded, 0));
        t3 = A._asStringQ(t1.$index(decoded, 1));
        throw A.wrapException(A.PlatformException$(t2, t1.$index(decoded, 2), t3, _null));
      }
      if (t1.get$length(decoded) === 4)
        if (typeof t1.$index(decoded, 0) == "string")
          if (t1.$index(decoded, 1) == null || typeof t1.$index(decoded, 1) == "string")
            t2 = t1.$index(decoded, 3) == null || typeof t1.$index(decoded, 3) == "string";
          else
            t2 = false;
        else
          t2 = false;
      else
        t2 = false;
      if (t2) {
        t2 = A._asString(t1.$index(decoded, 0));
        t3 = A._asStringQ(t1.$index(decoded, 1));
        throw A.wrapException(A.PlatformException$(t2, t1.$index(decoded, 2), t3, A._asStringQ(t1.$index(decoded, 3))));
      }
      throw A.wrapException(A.FormatException$("Invalid envelope: " + A.S(decoded), _null, _null));
    },
    encodeSuccessEnvelope$1(result) {
      var t1 = B.C_JSONMessageCodec0.encodeMessage$1([result]);
      t1.toString;
      return t1;
    },
    encodeErrorEnvelope$3$code$details$message(code, details, message) {
      var t1 = B.C_JSONMessageCodec0.encodeMessage$1([code, message, details]);
      t1.toString;
      return t1;
    },
    encodeErrorEnvelope$2$code$message(code, message) {
      return this.encodeErrorEnvelope$3$code$details$message(code, null, message);
    }
  };
  A.StandardMessageCodec0.prototype = {
    encodeMessage$1(message) {
      var buffer;
      if (message == null)
        return null;
      buffer = A.WriteBuffer$();
      this.writeValue$2(0, buffer, message);
      return buffer.done$0();
    },
    decodeMessage$1(message) {
      var buffer, result;
      if (message == null)
        return null;
      buffer = new A.ReadBuffer0(message);
      result = this.readValue$1(0, buffer);
      if (buffer._serialization$_position < message.byteLength)
        throw A.wrapException(B.FormatException_oCg);
      return result;
    },
    writeValue$2(_, buffer, value) {
      var t1, t2, t3, bytes, _this = this,
        _s17_ = "_eightBytesAsList";
      if (value == null)
        buffer._serialization$_buffer._typed_buffer$_add$1(0, 0);
      else if (A._isBool(value)) {
        t1 = value ? 1 : 2;
        buffer._serialization$_buffer._typed_buffer$_add$1(0, t1);
      } else if (typeof value == "number") {
        buffer._serialization$_buffer._typed_buffer$_add$1(0, 6);
        buffer._serialization$_alignTo$1(8);
        t1 = $.$get$Endian_host();
        buffer._serialization$_eightBytes.setFloat64(0, value, B.C_Endian === t1);
        buffer._serialization$_buffer.addAll$1(0, A._lateReadCheck(buffer.__WriteBuffer__eightBytesAsList, _s17_));
      } else if (A._isInt(value)) {
        t1 = -2147483648 <= value && value <= 2147483647;
        t2 = buffer._serialization$_buffer;
        t3 = buffer._serialization$_eightBytes;
        if (t1) {
          t2._typed_buffer$_add$1(0, 3);
          t1 = $.$get$Endian_host();
          t3.setInt32(0, value, B.C_Endian === t1);
          buffer._serialization$_buffer.addAll$3(0, A._lateReadCheck(buffer.__WriteBuffer__eightBytesAsList, _s17_), 0, 4);
        } else {
          t2._typed_buffer$_add$1(0, 4);
          t1 = $.$get$Endian_host();
          B.NativeByteData_methods.setInt64$3(t3, 0, value, t1);
        }
      } else if (typeof value == "string") {
        buffer._serialization$_buffer._typed_buffer$_add$1(0, 7);
        bytes = B.C_Utf8Encoder.convert$1(value);
        _this.writeSize$2(buffer, bytes.length);
        buffer._serialization$_buffer.addAll$1(0, bytes);
      } else if (type$.Uint8List._is(value)) {
        buffer._serialization$_buffer._typed_buffer$_add$1(0, 8);
        _this.writeSize$2(buffer, value.length);
        buffer._serialization$_buffer.addAll$1(0, value);
      } else if (type$.Int32List._is(value)) {
        buffer._serialization$_buffer._typed_buffer$_add$1(0, 9);
        t1 = value.length;
        _this.writeSize$2(buffer, t1);
        buffer._serialization$_alignTo$1(4);
        buffer._serialization$_buffer.addAll$1(0, A.NativeUint8List_NativeUint8List$view(value.buffer, value.byteOffset, 4 * t1));
      } else if (type$.Float32List._is(value)) {
        buffer._serialization$_buffer._typed_buffer$_add$1(0, 14);
        t1 = value.length;
        _this.writeSize$2(buffer, t1);
        buffer._serialization$_alignTo$1(4);
        buffer._serialization$_buffer.addAll$1(0, A.NativeUint8List_NativeUint8List$view(value.buffer, value.byteOffset, 4 * t1));
      } else if (type$.Float64List._is(value)) {
        buffer._serialization$_buffer._typed_buffer$_add$1(0, 11);
        t1 = value.length;
        _this.writeSize$2(buffer, t1);
        buffer._serialization$_alignTo$1(8);
        buffer._serialization$_buffer.addAll$1(0, A.NativeUint8List_NativeUint8List$view(value.buffer, value.byteOffset, 8 * t1));
      } else if (type$.List_dynamic._is(value)) {
        buffer._serialization$_buffer._typed_buffer$_add$1(0, 12);
        t1 = J.getInterceptor$asx(value);
        _this.writeSize$2(buffer, t1.get$length(value));
        for (t1 = t1.get$iterator(value); t1.moveNext$0();)
          _this.writeValue$2(0, buffer, t1.get$current(t1));
      } else if (type$.Map_dynamic_dynamic._is(value)) {
        buffer._serialization$_buffer._typed_buffer$_add$1(0, 13);
        t1 = J.getInterceptor$asx(value);
        _this.writeSize$2(buffer, t1.get$length(value));
        t1.forEach$1(value, new A.StandardMessageCodec_writeValue_closure0(_this, buffer));
      } else
        throw A.wrapException(A.ArgumentError$value(value, null, null));
    },
    readValue$1(_, buffer) {
      if (buffer._serialization$_position >= buffer.data.byteLength)
        throw A.wrapException(B.FormatException_oCg);
      return this.readValueOfType$2(buffer.getUint8$0(0), buffer);
    },
    readValueOfType$2(type, buffer) {
      var t1, t2, value, $length, list, result, i, t3, _this = this;
      switch (type) {
        case 0:
          return null;
        case 1:
          return true;
        case 2:
          return false;
        case 3:
          t1 = buffer._serialization$_position;
          t2 = $.$get$Endian_host();
          value = buffer.data.getInt32(t1, B.C_Endian === t2);
          buffer._serialization$_position += 4;
          return value;
        case 4:
          return buffer.getInt64$0(0);
        case 6:
          buffer._serialization$_alignTo$1(8);
          t1 = buffer._serialization$_position;
          t2 = $.$get$Endian_host();
          value = buffer.data.getFloat64(t1, B.C_Endian === t2);
          buffer._serialization$_position += 8;
          return value;
        case 5:
        case 7:
          $length = _this.readSize$1(buffer);
          return B.Utf8Decoder_false.convert$1(buffer.getUint8List$1($length));
        case 8:
          return buffer.getUint8List$1(_this.readSize$1(buffer));
        case 9:
          $length = _this.readSize$1(buffer);
          buffer._serialization$_alignTo$1(4);
          t1 = buffer.data;
          list = A.NativeInt32List_NativeInt32List$view(t1.buffer, t1.byteOffset + buffer._serialization$_position, $length);
          buffer._serialization$_position = buffer._serialization$_position + 4 * $length;
          return list;
        case 10:
          return buffer.getInt64List$1(_this.readSize$1(buffer));
        case 14:
          $length = _this.readSize$1(buffer);
          buffer._serialization$_alignTo$1(4);
          t1 = buffer.data;
          t2 = t1.buffer;
          t1 = t1.byteOffset + buffer._serialization$_position;
          A._checkViewArguments(t2, t1, $length);
          list = new Float32Array(t2, t1, $length);
          buffer._serialization$_position = buffer._serialization$_position + 4 * $length;
          return list;
        case 11:
          $length = _this.readSize$1(buffer);
          buffer._serialization$_alignTo$1(8);
          t1 = buffer.data;
          list = A.NativeFloat64List_NativeFloat64List$view(t1.buffer, t1.byteOffset + buffer._serialization$_position, $length);
          buffer._serialization$_position = buffer._serialization$_position + 8 * $length;
          return list;
        case 12:
          $length = _this.readSize$1(buffer);
          result = A.List_List$filled($length, null, false, type$.nullable_Object);
          for (t1 = buffer.data, i = 0; i < $length; ++i) {
            t2 = buffer._serialization$_position;
            if (t2 >= t1.byteLength)
              A.throwExpression(B.FormatException_oCg);
            buffer._serialization$_position = t2 + 1;
            result[i] = _this.readValueOfType$2(t1.getUint8(t2), buffer);
          }
          return result;
        case 13:
          $length = _this.readSize$1(buffer);
          t1 = type$.nullable_Object;
          result = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
          for (t1 = buffer.data, i = 0; i < $length; ++i) {
            t2 = buffer._serialization$_position;
            if (t2 >= t1.byteLength)
              A.throwExpression(B.FormatException_oCg);
            buffer._serialization$_position = t2 + 1;
            t2 = _this.readValueOfType$2(t1.getUint8(t2), buffer);
            t3 = buffer._serialization$_position;
            if (t3 >= t1.byteLength)
              A.throwExpression(B.FormatException_oCg);
            buffer._serialization$_position = t3 + 1;
            result.$indexSet(0, t2, _this.readValueOfType$2(t1.getUint8(t3), buffer));
          }
          return result;
        default:
          throw A.wrapException(B.FormatException_oCg);
      }
    },
    writeSize$2(buffer, value) {
      var t1, t2,
        _s17_ = "_eightBytesAsList";
      if (value < 254)
        buffer._serialization$_buffer._typed_buffer$_add$1(0, value);
      else {
        t1 = buffer._serialization$_buffer;
        t2 = buffer._serialization$_eightBytes;
        if (value <= 65535) {
          t1._typed_buffer$_add$1(0, 254);
          t1 = $.$get$Endian_host();
          t2.setUint16(0, value, B.C_Endian === t1);
          buffer._serialization$_buffer.addAll$3(0, A._lateReadCheck(buffer.__WriteBuffer__eightBytesAsList, _s17_), 0, 2);
        } else {
          t1._typed_buffer$_add$1(0, 255);
          t1 = $.$get$Endian_host();
          t2.setUint32(0, value, B.C_Endian === t1);
          buffer._serialization$_buffer.addAll$3(0, A._lateReadCheck(buffer.__WriteBuffer__eightBytesAsList, _s17_), 0, 4);
        }
      }
    },
    readSize$1(buffer) {
      var t1, t2,
        value = buffer.getUint8$0(0);
      switch (value) {
        case 254:
          t1 = buffer._serialization$_position;
          t2 = $.$get$Endian_host();
          value = buffer.data.getUint16(t1, B.C_Endian === t2);
          buffer._serialization$_position += 2;
          return value;
        case 255:
          t1 = buffer._serialization$_position;
          t2 = $.$get$Endian_host();
          value = buffer.data.getUint32(t1, B.C_Endian === t2);
          buffer._serialization$_position += 4;
          return value;
        default:
          return value;
      }
    }
  };
  A.StandardMessageCodec_writeValue_closure0.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = this.buffer;
      t1.writeValue$2(0, t2, key);
      t1.writeValue$2(0, t2, value);
    },
    $signature: 42
  };
  A.StandardMethodCodec0.prototype = {
    encodeMethodCall$1(methodCall) {
      var buffer = A.WriteBuffer$();
      B.C_StandardMessageCodec0.writeValue$2(0, buffer, methodCall.method);
      B.C_StandardMessageCodec0.writeValue$2(0, buffer, methodCall.$arguments);
      return buffer.done$0();
    },
    decodeMethodCall$1(methodCall) {
      var buffer, method, $arguments;
      methodCall.toString;
      buffer = new A.ReadBuffer0(methodCall);
      method = B.C_StandardMessageCodec0.readValue$1(0, buffer);
      $arguments = B.C_StandardMessageCodec0.readValue$1(0, buffer);
      if (typeof method == "string" && buffer._serialization$_position >= methodCall.byteLength)
        return new A.MethodCall0(method, $arguments);
      else
        throw A.wrapException(B.FormatException_Qi2);
    },
    encodeSuccessEnvelope$1(result) {
      var buffer = A.WriteBuffer$();
      buffer._serialization$_buffer._typed_buffer$_add$1(0, 0);
      B.C_StandardMessageCodec0.writeValue$2(0, buffer, result);
      return buffer.done$0();
    },
    encodeErrorEnvelope$3$code$details$message(code, details, message) {
      var buffer = A.WriteBuffer$();
      buffer._serialization$_buffer._typed_buffer$_add$1(0, 1);
      B.C_StandardMessageCodec0.writeValue$2(0, buffer, code);
      B.C_StandardMessageCodec0.writeValue$2(0, buffer, message);
      B.C_StandardMessageCodec0.writeValue$2(0, buffer, details);
      return buffer.done$0();
    },
    encodeErrorEnvelope$2$code$message(code, message) {
      return this.encodeErrorEnvelope$3$code$details$message(code, null, message);
    },
    decodeEnvelope$1(envelope) {
      var buffer, errorCode, errorMessage, errorDetails, errorStacktrace, t1;
      if (envelope.byteLength === 0)
        throw A.wrapException(B.FormatException_iDw);
      buffer = new A.ReadBuffer0(envelope);
      if (buffer.getUint8$0(0) === 0)
        return B.C_StandardMessageCodec0.readValue$1(0, buffer);
      errorCode = B.C_StandardMessageCodec0.readValue$1(0, buffer);
      errorMessage = B.C_StandardMessageCodec0.readValue$1(0, buffer);
      errorDetails = B.C_StandardMessageCodec0.readValue$1(0, buffer);
      errorStacktrace = buffer._serialization$_position < envelope.byteLength ? A._asStringQ(B.C_StandardMessageCodec0.readValue$1(0, buffer)) : null;
      if (typeof errorCode == "string")
        t1 = (errorMessage == null || typeof errorMessage == "string") && buffer._serialization$_position >= envelope.byteLength;
      else
        t1 = false;
      if (t1)
        throw A.wrapException(A.PlatformException$(errorCode, errorDetails, A._asStringQ(errorMessage), errorStacktrace));
      else
        throw A.wrapException(B.FormatException_pSr);
    }
  };
  A.MouseCursorManager.prototype = {
    handleDeviceCursorUpdate$3(device, triggeringEvent, cursorCandidates) {
      var t1, lastSession, nextCursor, nextSession;
      if (type$.PointerRemovedEvent._is(triggeringEvent)) {
        this._lastSession.remove$1(0, device);
        return;
      }
      t1 = this._lastSession;
      lastSession = t1.$index(0, device);
      nextCursor = A._DeferringMouseCursor_firstNonDeferred(cursorCandidates);
      if (nextCursor == null)
        nextCursor = this.fallbackMouseCursor;
      if (J.$eq$(lastSession == null ? null : type$.SystemMouseCursor._as(lastSession.cursor), nextCursor))
        return;
      nextSession = nextCursor.createSession$1(device);
      t1.$indexSet(0, device, nextSession);
      B.OptionalMethodChannel_meQ.invokeMethod$1$2("activateSystemCursor", A.LinkedHashMap_LinkedHashMap$_literal(["device", nextSession.device, "kind", type$.SystemMouseCursor._as(nextSession.cursor).kind], type$.String, type$.dynamic), type$.void);
    }
  };
  A.MouseCursorSession.prototype = {};
  A.MouseCursor0.prototype = {
    toString$0(_) {
      var debugDescription = this.get$debugDescription();
      return debugDescription;
    }
  };
  A._DeferringMouseCursor.prototype = {
    createSession$1(device) {
      throw A.wrapException(A.UnimplementedError$(null));
    },
    get$debugDescription() {
      return "defer";
    }
  };
  A._SystemMouseCursorSession.prototype = {};
  A.SystemMouseCursor.prototype = {
    get$debugDescription() {
      return "SystemMouseCursor(" + this.kind + ")";
    },
    createSession$1(device) {
      return new A._SystemMouseCursorSession(this, device);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return other instanceof A.SystemMouseCursor && other.kind === this.kind;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.kind);
    }
  };
  A._MouseCursor_Object_Diagnosticable.prototype = {};
  A.BasicMessageChannel.prototype = {
    setMessageHandler$1(handler) {
      var t1 = A._lateReadCheck($.ServicesBinding__instance.ServicesBinding___ServicesBinding__defaultBinaryMessenger, "_defaultBinaryMessenger");
      t1 = t1;
      t1.setMessageHandler$2(this.name, new A.BasicMessageChannel_setMessageHandler_closure(this, handler));
    },
    get$name(receiver) {
      return this.name;
    }
  };
  A.BasicMessageChannel_setMessageHandler_closure.prototype = {
    call$1(message) {
      return this.$call$body$BasicMessageChannel_setMessageHandler_closure(message);
    },
    $call$body$BasicMessageChannel_setMessageHandler_closure(message) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_ByteData),
        $async$returnValue, $async$self = this, t1, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this.codec;
              $async$temp1 = t1;
              $async$goto = 3;
              return A._asyncAwait($async$self.handler.call$1(t1.decodeMessage$1(message)), $async$call$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.encodeMessage$1($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 68
  };
  A.MethodChannel.prototype = {
    _invokeMethod$1$3$arguments$missingOk(method, $arguments, missingOk, $T) {
      return this._invokeMethod$body$MethodChannel(method, $arguments, missingOk, $T, $T._eval$1("0?"));
    },
    _invokeMethod$body$MethodChannel(method, $arguments, missingOk, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this, t2, t3, result, t1;
      var $async$_invokeMethod$1$3$arguments$missingOk = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A._lateReadCheck($.ServicesBinding__instance.ServicesBinding___ServicesBinding__defaultBinaryMessenger, "_defaultBinaryMessenger");
              t1 = t1;
              t2 = $async$self.name;
              t3 = $async$self.codec;
              $async$goto = 3;
              return A._asyncAwait(t1.send$2(0, t2, t3.encodeMethodCall$1(new A.MethodCall0(method, $arguments))), $async$_invokeMethod$1$3$arguments$missingOk);
            case 3:
              // returning from await.
              result = $async$result;
              if (result == null) {
                if (missingOk) {
                  $async$returnValue = null;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                throw A.wrapException(new A.MissingPluginException("No implementation found for method " + method + " on channel " + t2));
              }
              $async$returnValue = $T._eval$1("0?")._as(t3.decodeEnvelope$1(result));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_invokeMethod$1$3$arguments$missingOk, $async$completer);
    },
    setMethodCallHandler$1(handler) {
      var t1 = A._lateReadCheck($.ServicesBinding__instance.ServicesBinding___ServicesBinding__defaultBinaryMessenger, "_defaultBinaryMessenger");
      t1 = t1;
      t1.setMessageHandler$2(this.name, new A.MethodChannel_setMethodCallHandler_closure(this, handler));
    },
    _handleAsMethodCall$2(message, handler) {
      return this._handleAsMethodCall$body$MethodChannel(message, handler);
    },
    _handleAsMethodCall$body$MethodChannel(message, handler) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_ByteData),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, e, error, t2, exception, t3, t1, $call, $async$exception, $async$temp1;
      var $async$_handleAsMethodCall$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.codec;
              $call = t1.decodeMethodCall$1(message);
              $async$handler = 4;
              $async$temp1 = t1;
              $async$goto = 7;
              return A._asyncAwait(handler.call$1($call), $async$_handleAsMethodCall$2);
            case 7:
              // returning from await.
              t2 = $async$temp1.encodeSuccessEnvelope$1($async$result);
              $async$returnValue = t2;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t2 = A.unwrapException($async$exception);
              if (t2 instanceof A.PlatformException) {
                e = t2;
                t2 = e.code;
                t3 = e.message;
                $async$returnValue = t1.encodeErrorEnvelope$3$code$details$message(t2, e.details, t3);
                // goto return
                $async$goto = 1;
                break;
              } else if (t2 instanceof A.MissingPluginException) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              } else {
                error = t2;
                t1 = t1.encodeErrorEnvelope$2$code$message("error", J.toString$0$(error));
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
              }
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_handleAsMethodCall$2, $async$completer);
    },
    get$name(receiver) {
      return this.name;
    }
  };
  A.MethodChannel_setMethodCallHandler_closure.prototype = {
    call$1(message) {
      return this.$this._handleAsMethodCall$2(message, this.handler);
    },
    $signature: 68
  };
  A.OptionalMethodChannel.prototype = {
    invokeMethod$1$2(method, $arguments, $T) {
      return this.invokeMethod$body$OptionalMethodChannel(method, $arguments, $T, $T._eval$1("0?"));
    },
    invokeMethod$body$OptionalMethodChannel(method, $arguments, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this;
      var $async$invokeMethod$1$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $async$self.super$MethodChannel$_invokeMethod(method, $arguments, true, $T);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$invokeMethod$1$2, $async$completer);
    }
  };
  A.KeyboardSide.prototype = {
    toString$0(_) {
      return "KeyboardSide." + this._name;
    }
  };
  A.ModifierKey.prototype = {
    toString$0(_) {
      return "ModifierKey." + this._name;
    }
  };
  A.RawKeyEventData.prototype = {
    get$modifiersPressed() {
      var _i, key, side,
        result = A.LinkedHashMap_LinkedHashMap$_empty(type$.ModifierKey, type$.KeyboardSide);
      for (_i = 0; _i < 9; ++_i) {
        key = B.List_4LR[_i];
        if (this.isModifierPressed$1(key)) {
          side = this.getModifierSide$1(key);
          if (side != null)
            result.$indexSet(0, key, side);
        }
      }
      return result;
    },
    shouldDispatchEvent$0() {
      return true;
    }
  };
  A.RawKeyEvent.prototype = {};
  A.RawKeyEvent_RawKeyEvent$fromMessage__dataFromWeb.prototype = {
    call$0() {
      var t4, t5, t6,
        t1 = this.message,
        t2 = J.getInterceptor$asx(t1),
        key = A._asStringQ(t2.$index(t1, "key")),
        t3 = key == null;
      if (!t3) {
        t4 = key.length;
        t4 = t4 !== 0 && t4 === 1;
      } else
        t4 = false;
      if (t4)
        this._box_0.character = key;
      t4 = A._asStringQ(t2.$index(t1, "code"));
      if (t4 == null)
        t4 = "";
      t3 = t3 ? "" : key;
      t5 = A._asIntQ(t2.$index(t1, "location"));
      if (t5 == null)
        t5 = 0;
      t6 = A._asIntQ(t2.$index(t1, "metaState"));
      if (t6 == null)
        t6 = 0;
      t1 = A._asIntQ(t2.$index(t1, "keyCode"));
      return new A.RawKeyEventDataWeb(t4, t3, t5, t6, t1 == null ? 0 : t1);
    },
    $signature: 199
  };
  A.RawKeyDownEvent.prototype = {};
  A.RawKeyUpEvent.prototype = {};
  A.RawKeyboard.prototype = {
    handleRawKeyEvent$1($event) {
      var listener, exception, stack, t1, shouldDispatch, t2, t3, _i, exception0, t4, t5, _this = this;
      if ($event instanceof A.RawKeyDownEvent) {
        t1 = $event.data;
        if (t1.shouldDispatchEvent$0()) {
          _this._keysPressed.$indexSet(0, t1.get$physicalKey(), t1.get$logicalKey());
          shouldDispatch = true;
        } else {
          _this._hiddenKeysPressed.add$1(0, t1.get$physicalKey());
          shouldDispatch = false;
        }
      } else if ($event instanceof A.RawKeyUpEvent) {
        t1 = _this._hiddenKeysPressed;
        t2 = $event.data;
        if (!t1.contains$1(0, t2.get$physicalKey())) {
          _this._keysPressed.remove$1(0, t2.get$physicalKey());
          shouldDispatch = true;
        } else {
          t1.remove$1(0, t2.get$physicalKey());
          shouldDispatch = false;
        }
      } else
        shouldDispatch = true;
      if (!shouldDispatch)
        return true;
      _this._synchronizeModifiers$1($event);
      for (t1 = _this._raw_keyboard$_listeners, t2 = A.List_List$of(t1, true, type$.void_Function_RawKeyEvent), t3 = t2.length, _i = 0; _i < t3; ++_i) {
        listener = t2[_i];
        try {
          if (B.JSArray_methods.contains$1(t1, listener))
            listener.call$1($event);
        } catch (exception0) {
          exception = A.unwrapException(exception0);
          stack = A.getTraceFromException(exception0);
          t4 = A.ErrorDescription$("while processing a raw key listener");
          t5 = $.$get$FlutterError_onError();
          if (t5 != null)
            t5.call$1(new A.FlutterErrorDetails(exception, stack, "services library", t4, null, false));
        }
      }
      return false;
    },
    _synchronizeModifiers$1($event) {
      var thisKeyModifier, _i, key, thisModifierKeys, mappedKeys, t6, t7, t8, t9, logicalKey,
        t1 = $event.data,
        modifiersPressed = t1.get$modifiersPressed(),
        t2 = type$.PhysicalKeyboardKey,
        modifierKeys = A.LinkedHashMap_LinkedHashMap$_empty(t2, type$.LogicalKeyboardKey),
        anySideKeys = A.LinkedHashSet_LinkedHashSet$_empty(t2),
        t3 = this._keysPressed,
        t4 = A.LinkedHashSet_LinkedHashSet$of(new A.LinkedHashMapKeyIterable(t3, A._instanceType(t3)._eval$1("LinkedHashMapKeyIterable<1>")), t2),
        t5 = $event instanceof A.RawKeyDownEvent;
      if (t5)
        t4.add$1(0, t1.get$physicalKey());
      for (thisKeyModifier = null, _i = 0; _i < 9; ++_i) {
        key = B.List_4LR[_i];
        thisModifierKeys = $.RawKeyboard__modifierKeyMap.$index(0, new A._ModifierSidePair(key, B.KeyboardSide_3));
        if (thisModifierKeys == null)
          continue;
        if (thisModifierKeys.contains$1(0, t1.get$physicalKey()))
          thisKeyModifier = key;
        if (modifiersPressed.$index(0, key) === B.KeyboardSide_0) {
          anySideKeys.addAll$1(0, thisModifierKeys);
          if (thisModifierKeys.any$1(0, t4.get$contains(t4)))
            continue;
        }
        mappedKeys = modifiersPressed.$index(0, key) == null ? A.LinkedHashSet_LinkedHashSet$_empty(t2) : $.RawKeyboard__modifierKeyMap.$index(0, new A._ModifierSidePair(key, modifiersPressed.$index(0, key)));
        if (mappedKeys == null)
          continue;
        for (t6 = new A._LinkedHashSetIterator(mappedKeys, mappedKeys._collection$_modifications), t6._collection$_cell = mappedKeys._collection$_first, t7 = A._instanceType(t6)._precomputed1; t6.moveNext$0();) {
          t8 = t6._collection$_current;
          if (t8 == null)
            t8 = t7._as(t8);
          t9 = $.$get$RawKeyboard__allModifiers().$index(0, t8);
          t9.toString;
          modifierKeys.$indexSet(0, t8, t9);
        }
      }
      t2 = A._instanceType($.RawKeyboard__allModifiersExceptFn)._eval$1("LinkedHashMapKeyIterable<1>");
      new A.WhereIterable(new A.LinkedHashMapKeyIterable($.RawKeyboard__allModifiersExceptFn, t2), new A.RawKeyboard__synchronizeModifiers_closure(anySideKeys), t2._eval$1("WhereIterable<Iterable.E>")).forEach$1(0, t3.get$remove(t3));
      if (!(t1 instanceof A.RawKeyEventDataFuchsia) && !(t1 instanceof A.RawKeyEventDataMacOs))
        t3.remove$1(0, B.PhysicalKeyboardKey_18);
      t3.addAll$1(0, modifierKeys);
      if (t5 && thisKeyModifier != null && !t3.containsKey$1(0, t1.get$physicalKey()))
        if (t1 instanceof A.RawKeyEventDataLinux && t1.get$physicalKey().$eq(0, B.PhysicalKeyboardKey_458982)) {
          logicalKey = $.RawKeyboard__allModifiersExceptFn.$index(0, t1.get$physicalKey());
          if (logicalKey != null)
            t3.$indexSet(0, t1.get$physicalKey(), logicalKey);
        }
    }
  };
  A.RawKeyboard__synchronizeModifiers_closure.prototype = {
    call$1(key) {
      return !this.anySideKeys.contains$1(0, key);
    },
    $signature: 200
  };
  A._ModifierSidePair.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return other instanceof A._ModifierSidePair && other.modifier === this.modifier && other.side == this.side;
    },
    get$hashCode(_) {
      return A.hashValues(this.modifier, this.side, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    }
  };
  A._RawKeyEvent_Object_Diagnosticable.prototype = {};
  A._RawKeyEventData_Object_Diagnosticable.prototype = {};
  A.RawKeyEventDataFuchsia.prototype = {};
  A.RawKeyEventDataLinux.prototype = {};
  A.RawKeyEventDataMacOs.prototype = {};
  A.RawKeyEventDataWeb.prototype = {
    get$physicalKey() {
      var t1 = this.code,
        t2 = B.Map_1k5Ax.$index(0, t1);
      return t2 == null ? new A.PhysicalKeyboardKey(98784247808 + B.JSString_methods.get$hashCode(t1)) : t2;
    },
    get$logicalKey() {
      var newKey,
        t1 = this.key,
        t2 = B.Map_8TEJH.$index(0, t1),
        maybeLocationKey = t2 == null ? null : t2[this.location];
      if (maybeLocationKey != null)
        return maybeLocationKey;
      t2 = this.code;
      newKey = B.Map_0mOHH.$index(0, t2);
      if (newKey != null)
        return newKey;
      if (t1.length === 1)
        return new A.LogicalKeyboardKey(B.JSString_methods._codeUnitAt$1(t1.toLowerCase(), 0));
      return new A.LogicalKeyboardKey(B.JSString_methods.get$hashCode(t2) + 98784247808);
    },
    isModifierPressed$1(key) {
      var _this = this;
      switch (key.index) {
        case 0:
          return (_this.metaState & 4) !== 0;
        case 1:
          return (_this.metaState & 1) !== 0;
        case 2:
          return (_this.metaState & 2) !== 0;
        case 3:
          return (_this.metaState & 8) !== 0;
        case 5:
          return (_this.metaState & 16) !== 0;
        case 4:
          return (_this.metaState & 32) !== 0;
        case 6:
          return (_this.metaState & 64) !== 0;
        case 7:
        case 8:
          return false;
      }
    },
    getModifierSide$1(key) {
      return B.KeyboardSide_0;
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      return other instanceof A.RawKeyEventDataWeb && other.code === _this.code && other.key === _this.key && other.location === _this.location && other.metaState === _this.metaState && other.keyCode === _this.keyCode;
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.code, _this.key, _this.location, _this.metaState, _this.keyCode, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    }
  };
  A.RestorationManager.prototype = {
    handleRestorationUpdateFromEngine$2$data$enabled(data, enabled) {
      var oldRoot, t2, _this = this,
        t1 = _this._rootBucketIsValid && enabled;
      _this._isReplacing = t1;
      if (t1)
        $.SchedulerBinding__instance.SchedulerBinding__postFrameCallbacks.push(new A.RestorationManager_handleRestorationUpdateFromEngine_closure(_this));
      oldRoot = _this._rootBucket;
      if (enabled) {
        t1 = _this._decodeRestorationData$1(data);
        t2 = type$.String;
        if (t1 == null) {
          t1 = type$.nullable_Object;
          t1 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
        }
        t2 = new A.RestorationBucket(t1, _this, A.LinkedHashMap_LinkedHashMap$_empty(t2, type$.RestorationBucket), A.LinkedHashMap_LinkedHashMap$_empty(t2, type$.List_RestorationBucket));
        t1 = t2;
      } else
        t1 = null;
      _this._rootBucket = t1;
      _this._rootBucketIsValid = true;
      _this._pendingRootBucket = null;
      if (t1 != oldRoot) {
        _this.notifyListeners$0();
        if (oldRoot != null) {
          oldRoot._visitChildren$2$concurrentModification(oldRoot.get$_dropChild(), true);
          oldRoot._claimedChildren.clear$0(0);
          oldRoot._childrenToAdd.clear$0(0);
          oldRoot._restoration$_parent = null;
          oldRoot._restoration$_updateManager$1(null);
          oldRoot._debugDisposed = true;
        }
      }
    },
    _methodHandler$1($call) {
      return this._methodHandler$body$RestorationManager($call);
    },
    _methodHandler$body$RestorationManager($call) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t2, t3, t1;
      var $async$_methodHandler$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $call.method;
              switch (t1) {
                case "push":
                  t1 = type$.Map_of_nullable_Object_and_nullable_Object._as($call.$arguments);
                  t2 = J.getInterceptor$asx(t1);
                  t3 = t2.$index(t1, "enabled");
                  t3.toString;
                  A._asBool(t3);
                  t1 = type$.nullable_Uint8List._as(t2.$index(t1, "data"));
                  $async$self.handleRestorationUpdateFromEngine$2$data$enabled(t1, t3);
                  break;
                default:
                  throw A.wrapException(A.UnimplementedError$(t1 + " was invoked but isn't implemented by " + A.getRuntimeType($async$self).toString$0(0)));
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_methodHandler$1, $async$completer);
    },
    _decodeRestorationData$1(data) {
      if (data == null)
        return null;
      return type$.nullable_Map_of_nullable_Object_and_nullable_Object._as(B.C_StandardMessageCodec0.decodeMessage$1(A.NativeByteData_NativeByteData$view(data.buffer, data.byteOffset, data.byteLength)));
    },
    scheduleSerializationFor$1(bucket) {
      var _this = this;
      _this._bucketsNeedingSerialization.add$1(0, bucket);
      if (!_this._serializationScheduled) {
        _this._serializationScheduled = true;
        $.SchedulerBinding__instance.SchedulerBinding__postFrameCallbacks.push(new A.RestorationManager_scheduleSerializationFor_closure(_this));
      }
    },
    _doSerialization$0() {
      var t1, t2, t3, t4, encoded, _this = this;
      if (!_this._serializationScheduled)
        return;
      _this._serializationScheduled = false;
      for (t1 = _this._bucketsNeedingSerialization, t2 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications), t3 = A._instanceType(t2)._precomputed1; t2.moveNext$0();) {
        t4 = t2._collection$_current;
        (t4 == null ? t3._as(t4) : t4)._needsSerialization = false;
      }
      t1.clear$0(0);
      encoded = B.C_StandardMessageCodec0.encodeMessage$1(_this._rootBucket._rawData);
      B.OptionalMethodChannel_fgL.invokeMethod$1$2("put", A.NativeUint8List_NativeUint8List$view(encoded.buffer, encoded.byteOffset, encoded.byteLength), type$.void);
    }
  };
  A.RestorationManager_handleRestorationUpdateFromEngine_closure.prototype = {
    call$1(_) {
      this.$this._isReplacing = false;
    },
    $signature: 7
  };
  A.RestorationManager_scheduleSerializationFor_closure.prototype = {
    call$1(_) {
      return this.$this._doSerialization$0();
    },
    $signature: 7
  };
  A.RestorationBucket.prototype = {
    get$_rawChildren() {
      var t1 = J.putIfAbsent$2$x(this._rawData, "c", new A.RestorationBucket__rawChildren_closure());
      t1.toString;
      return type$.Map_of_nullable_Object_and_nullable_Object._as(t1);
    },
    _dropChild$1(child) {
      this._removeChildData$1(child);
      child._restoration$_parent = null;
      if (child._restoration$_manager != null) {
        child._restoration$_updateManager$1(null);
        child._visitChildren$1(this.get$_recursivelyUpdateManager());
      }
    },
    _markNeedsSerialization$0() {
      var t1, _this = this;
      if (!_this._needsSerialization) {
        _this._needsSerialization = true;
        t1 = _this._restoration$_manager;
        if (t1 != null)
          t1.scheduleSerializationFor$1(_this);
      }
    },
    _recursivelyUpdateManager$1(bucket) {
      bucket._restoration$_updateManager$1(this._restoration$_manager);
      bucket._visitChildren$1(this.get$_recursivelyUpdateManager());
    },
    _restoration$_updateManager$1(newManager) {
      var _this = this,
        t1 = _this._restoration$_manager;
      if (t1 == newManager)
        return;
      if (_this._needsSerialization)
        if (t1 != null)
          t1._bucketsNeedingSerialization.remove$1(0, _this);
      _this._restoration$_manager = newManager;
      if (_this._needsSerialization && newManager != null) {
        _this._needsSerialization = false;
        _this._markNeedsSerialization$0();
      }
    },
    _removeChildData$1(child) {
      var t1, _this = this, _s4_ = "root";
      if (J.$eq$(_this._claimedChildren.remove$1(0, _s4_), child)) {
        J.remove$1$ax(_this.get$_rawChildren(), _s4_);
        _this._childrenToAdd.$index(0, _s4_);
        if (J.get$isEmpty$asx(_this.get$_rawChildren()))
          J.remove$1$ax(_this._rawData, "c");
        _this._markNeedsSerialization$0();
        return;
      }
      t1 = _this._childrenToAdd;
      t1.$index(0, _s4_);
      t1.$index(0, _s4_);
    },
    _visitChildren$2$concurrentModification(visitor, concurrentModification) {
      var t2, children,
        t1 = this._claimedChildren;
      t1 = t1.get$values(t1);
      t2 = this._childrenToAdd;
      t2 = t2.get$values(t2);
      children = t1.followedBy$1(0, new A.ExpandIterable(t2, new A.RestorationBucket__visitChildren_closure(), A._instanceType(t2)._eval$1("ExpandIterable<Iterable.E,RestorationBucket>")));
      J.forEach$1$ax(concurrentModification ? A.List_List$of(children, false, A._instanceType(children)._eval$1("Iterable.E")) : children, visitor);
    },
    _visitChildren$1(visitor) {
      return this._visitChildren$2$concurrentModification(visitor, false);
    },
    toString$0(_) {
      return "RestorationBucket(restorationId: root, owner: " + A.S(this._debugOwner) + ")";
    }
  };
  A.RestorationBucket__rawChildren_closure.prototype = {
    call$0() {
      var t1 = type$.nullable_Object;
      return A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
    },
    $signature: 202
  };
  A.RestorationBucket__visitChildren_closure.prototype = {
    call$1(buckets) {
      return buckets;
    },
    $signature: 203
  };
  A.Action.prototype = {};
  A.CallbackAction.prototype = {};
  A.Actions.prototype = {
    createState$0() {
      return new A._ActionsState(A.LinkedHashSet_LinkedHashSet$_empty(type$.Action_Intent), new A.Object(), B._StateLifecycle_0);
    }
  };
  A._ActionsState.prototype = {
    initState$0() {
      this.super$State$initState();
      this._updateActionListeners$0();
    },
    _handleActionChanged$1(action) {
      this.setState$1(new A._ActionsState__handleActionChanged_closure(this));
    },
    _updateActionListeners$0() {
      var widgetActions, removedActions, addedActions, t2, t3, value, result, _this = this,
        t1 = _this._widget.actions;
      t1 = t1.get$values(t1);
      widgetActions = A.LinkedHashSet_LinkedHashSet$of(t1, A._instanceType(t1)._eval$1("Iterable.E"));
      removedActions = _this.listenedActions.difference$1(widgetActions);
      t1 = _this.listenedActions;
      t1.toString;
      addedActions = widgetActions.difference$1(t1);
      for (t1 = removedActions.get$iterator(removedActions), t2 = _this.get$_handleActionChanged(); t1.moveNext$0();) {
        t3 = t1.get$current(t1)._listeners;
        t3._isDirty = true;
        value = t3.__ObserverList__set;
        if (value === $) {
          result = A.HashSet_HashSet(t3.$ti._precomputed1);
          A._lateInitializeOnceCheck(t3.__ObserverList__set, "_set");
          t3.__ObserverList__set = result;
          value = result;
        }
        if (value._collection$_length > 0) {
          value._collection$_strings = value._collection$_nums = value._collection$_rest = value._collection$_elements = null;
          value._collection$_length = 0;
        }
        B.JSArray_methods.remove$1(t3._list, t2);
      }
      for (t1 = addedActions.get$iterator(addedActions); t1.moveNext$0();) {
        t3 = t1.get$current(t1)._listeners;
        t3._isDirty = true;
        t3._list.push(t2);
      }
      _this.listenedActions = widgetActions;
    },
    didUpdateWidget$1(oldWidget) {
      this.super$State$didUpdateWidget(oldWidget);
      this._updateActionListeners$0();
    },
    dispose$0(_) {
      var t1, t2, t3, t4, value, result, _this = this;
      _this.super$State$dispose(0);
      for (t1 = _this.listenedActions, t1 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications), t2 = _this.get$_handleActionChanged(), t3 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
        t4 = t1._collection$_current;
        t4 = (t4 == null ? t3._as(t4) : t4)._listeners;
        t4._isDirty = true;
        value = t4.__ObserverList__set;
        if (value === $) {
          result = A.HashSet_HashSet(t4.$ti._precomputed1);
          A._lateInitializeOnceCheck(t4.__ObserverList__set, "_set");
          t4.__ObserverList__set = result;
          value = result;
        }
        if (value._collection$_length > 0) {
          value._collection$_strings = value._collection$_nums = value._collection$_rest = value._collection$_elements = null;
          value._collection$_length = 0;
        }
        B.JSArray_methods.remove$1(t4._list, t2);
      }
      _this.listenedActions = null;
    },
    build$1(_, context) {
      var t1 = this._widget;
      return new A._ActionsMarker(null, t1.actions, this.rebuildKey, t1.child, null);
    }
  };
  A._ActionsState__handleActionChanged_closure.prototype = {
    call$0() {
      this.$this.rebuildKey = new A.Object();
    },
    $signature: 0
  };
  A._ActionsMarker.prototype = {
    updateShouldNotify$1(oldWidget) {
      var t1;
      if (this.rebuildKey === oldWidget.rebuildKey)
        t1 = !A.mapEquals(oldWidget.actions, this.actions);
      else
        t1 = true;
      return t1;
    }
  };
  A._Action_Object_Diagnosticable.prototype = {};
  A.KeepAliveNotification.prototype = {};
  A.KeepAliveHandle.prototype = {};
  A.AutomaticKeepAliveClientMixin.prototype = {
    _ensureKeepAlive$0() {
      this.AutomaticKeepAliveClientMixin__keepAliveHandle = new A.KeepAliveHandle($.$get$ChangeNotifier__emptyListeners());
      this._framework$_element.visitAncestorElements$1(new A.KeepAliveNotification().get$visitAncestor());
    },
    updateKeepAlive$0() {
      var t1, _this = this;
      if (_this.get$wantKeepAlive()) {
        if (_this.AutomaticKeepAliveClientMixin__keepAliveHandle == null)
          _this._ensureKeepAlive$0();
      } else {
        t1 = _this.AutomaticKeepAliveClientMixin__keepAliveHandle;
        if (t1 != null) {
          t1.notifyListeners$0();
          _this.AutomaticKeepAliveClientMixin__keepAliveHandle = null;
        }
      }
    },
    build$1(_, context) {
      if (this.get$wantKeepAlive() && this.AutomaticKeepAliveClientMixin__keepAliveHandle == null)
        this._ensureKeepAlive$0();
      return B._NullWidget_null0;
    }
  };
  A._NullWidget.prototype = {
    build$1(_, context) {
      throw A.wrapException(A.FlutterError_FlutterError("Widgets that mix AutomaticKeepAliveClientMixin into their State must call super.build() but must ignore the return value of the superclass."));
    }
  };
  A.Directionality.prototype = {
    updateShouldNotify$1(oldWidget) {
      return this.textDirection !== oldWidget.textDirection;
    }
  };
  A.ClipPath.prototype = {
    createRenderObject$1(context) {
      var t1 = new A.RenderClipPath(this.clipper, this.clipBehavior, null, A.LayerHandle$());
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1.__RenderObject__needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      renderObject.set$clipper(this.clipper);
      renderObject.set$clipBehavior(this.clipBehavior);
    },
    didUnmountRenderObject$1(renderObject) {
      renderObject.set$clipper(null);
    }
  };
  A.PhysicalModel.prototype = {
    createRenderObject$1(context) {
      var _this = this,
        t1 = new A.RenderPhysicalModel(_this.shape, _this.borderRadius, _this.elevation, _this.shadowColor, _this.color, null, _this.clipBehavior, null, A.LayerHandle$());
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1.__RenderObject__needsCompositing = true;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      var _this = this;
      renderObject.set$shape(0, _this.shape);
      renderObject.set$clipBehavior(_this.clipBehavior);
      renderObject.set$borderRadius(0, _this.borderRadius);
      renderObject.set$elevation(0, _this.elevation);
      renderObject.set$color(0, _this.color);
      renderObject.set$shadowColor(0, _this.shadowColor);
    }
  };
  A.Transform.prototype = {
    createRenderObject$1(context) {
      var t3, _null = null,
        t1 = A.Directionality_maybeOf(context),
        t2 = new A.RenderTransform(true, _null, A.LayerHandle$());
      t2.get$isRepaintBoundary();
      t3 = t2.get$alwaysNeedsCompositing();
      t2.__RenderObject__needsCompositing = t3;
      t2.set$child(_null);
      t2.set$transform(0, this.transform);
      t2.set$alignment(this.alignment);
      t2.set$textDirection(0, t1);
      t2.set$filterQuality(_null);
      t2.set$origin(0, _null);
      return t2;
    },
    updateRenderObject$2(context, renderObject) {
      renderObject.set$transform(0, this.transform);
      renderObject.set$origin(0, null);
      renderObject.set$alignment(this.alignment);
      renderObject.set$textDirection(0, A.Directionality_maybeOf(context));
      renderObject.transformHitTests = true;
      renderObject.set$filterQuality(null);
    }
  };
  A.Padding.prototype = {
    createRenderObject$1(context) {
      var t1 = new A.RenderPadding(this.padding, A.Directionality_maybeOf(context), null, A.LayerHandle$());
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1.__RenderObject__needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      renderObject.set$padding(0, this.padding);
      renderObject.set$textDirection(0, A.Directionality_maybeOf(context));
    }
  };
  A.Align.prototype = {
    createRenderObject$1(context) {
      var t1 = new A.RenderPositionedBox(this.widthFactor, this.heightFactor, this.alignment, A.Directionality_maybeOf(context), null, A.LayerHandle$());
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1.__RenderObject__needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      renderObject.set$alignment(this.alignment);
      renderObject.set$widthFactor(this.widthFactor);
      renderObject.set$heightFactor(this.heightFactor);
      renderObject.set$textDirection(0, A.Directionality_maybeOf(context));
    }
  };
  A.Center.prototype = {};
  A.ConstrainedBox.prototype = {
    createRenderObject$1(context) {
      return A.RenderConstrainedBox$(this.constraints);
    },
    updateRenderObject$2(context, renderObject) {
      renderObject.set$additionalConstraints(this.constraints);
    }
  };
  A.LimitedBox.prototype = {
    createRenderObject$1(context) {
      var t1 = new A.RenderLimitedBox(this.maxWidth, this.maxHeight, null, A.LayerHandle$());
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1.__RenderObject__needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      renderObject.set$maxWidth(0, this.maxWidth);
      renderObject.set$maxHeight(0, this.maxHeight);
    }
  };
  A.Flex.prototype = {
    get$_needTextDirection() {
      switch (this.direction.index) {
        case 0:
          return true;
        case 1:
          var t1 = this.crossAxisAlignment;
          return t1 === B.CrossAxisAlignment_0 || t1 === B.CrossAxisAlignment_1;
      }
    },
    getEffectiveTextDirection$1(context) {
      var t1 = this.get$_needTextDirection() ? A.Directionality_maybeOf(context) : null;
      return t1;
    },
    createRenderObject$1(context) {
      var _this = this, _null = null,
        t1 = new A.RenderFlex(_this.direction, _this.mainAxisAlignment, _this.mainAxisSize, _this.crossAxisAlignment, _this.getEffectiveTextDirection$1(context), _this.verticalDirection, _this.textBaseline, B.Clip_0, A.LayerHandle$(), A.List_List$filled(4, A.TextPainter$(_null, _null, _null, _null, _null, B.TextAlign_4, B.TextDirection_1, _null, 1, B.TextWidthBasis_0), false, type$.TextPainter), true, 0, _null, _null, A.LayerHandle$());
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1.__RenderObject__needsCompositing = false;
      t1.addAll$1(0, _null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      var _this = this,
        t1 = _this.direction;
      if (renderObject._direction !== t1) {
        renderObject._direction = t1;
        renderObject.markNeedsLayout$0();
      }
      t1 = _this.mainAxisAlignment;
      if (renderObject._mainAxisAlignment !== t1) {
        renderObject._mainAxisAlignment = t1;
        renderObject.markNeedsLayout$0();
      }
      t1 = _this.mainAxisSize;
      if (renderObject._mainAxisSize !== t1) {
        renderObject._mainAxisSize = t1;
        renderObject.markNeedsLayout$0();
      }
      t1 = _this.crossAxisAlignment;
      if (renderObject._crossAxisAlignment !== t1) {
        renderObject._crossAxisAlignment = t1;
        renderObject.markNeedsLayout$0();
      }
      t1 = _this.getEffectiveTextDirection$1(context);
      if (renderObject._textDirection != t1) {
        renderObject._textDirection = t1;
        renderObject.markNeedsLayout$0();
      }
      t1 = _this.verticalDirection;
      if (renderObject._verticalDirection !== t1) {
        renderObject._verticalDirection = t1;
        renderObject.markNeedsLayout$0();
      }
      if (B.Clip_0 !== renderObject._clipBehavior) {
        renderObject._clipBehavior = B.Clip_0;
        renderObject.markNeedsPaint$0();
        renderObject.markNeedsSemanticsUpdate$0();
      }
    }
  };
  A.Column.prototype = {};
  A.RichText.prototype = {
    createRenderObject$1(context) {
      var t3, t4, t5, _this = this, _null = null,
        t1 = _this.text,
        t2 = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality);
      t2.toString;
      t2 = t2.textDirection;
      t3 = _this.overflow;
      t4 = A.Localizations_maybeLocaleOf(context);
      t5 = t3 === B.TextOverflow_2 ? "\u2026" : _null;
      t3 = new A.RenderParagraph(A.TextPainter$(t5, t4, _this.maxLines, _this.strutStyle, t1, _this.textAlign, t2, _this.textHeightBehavior, _this.textScaleFactor, _this.textWidthBasis), true, t3, 0, _null, _null, A.LayerHandle$());
      t3.get$isRepaintBoundary();
      t3.get$alwaysNeedsCompositing();
      t3.__RenderObject__needsCompositing = false;
      t3.addAll$1(0, _null);
      t3._extractPlaceholderSpans$1(t1);
      return t3;
    },
    updateRenderObject$2(context, renderObject) {
      var t1, _this = this;
      renderObject.set$text(0, _this.text);
      renderObject.set$textAlign(0, _this.textAlign);
      t1 = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality);
      t1.toString;
      renderObject.set$textDirection(0, t1.textDirection);
      renderObject.set$softWrap(true);
      renderObject.set$overflow(0, _this.overflow);
      renderObject.set$textScaleFactor(_this.textScaleFactor);
      renderObject.set$maxLines(0, _this.maxLines);
      renderObject.set$strutStyle(0, _this.strutStyle);
      renderObject.set$textWidthBasis(_this.textWidthBasis);
      renderObject.set$textHeightBehavior(0, _this.textHeightBehavior);
      t1 = A.Localizations_maybeLocaleOf(context);
      renderObject.set$locale(0, t1);
    }
  };
  A.RichText__extractChildren_closure.prototype = {
    call$1(span) {
      return true;
    },
    $signature: 37
  };
  A.Listener.prototype = {
    createRenderObject$1(context) {
      var _null = null,
        t1 = new A.RenderPointerListener(this.onPointerDown, _null, _null, _null, _null, _null, this.behavior, _null, A.LayerHandle$());
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1.__RenderObject__needsCompositing = false;
      t1.set$child(_null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      renderObject.onPointerDown = this.onPointerDown;
      renderObject.onPointerSignal = renderObject.onPointerCancel = renderObject.onPointerHover = renderObject.onPointerUp = renderObject.onPointerMove = null;
      renderObject.behavior = this.behavior;
    }
  };
  A.MouseRegion.prototype = {
    createRenderObject$1(context) {
      var t1 = new A.RenderMouseRegion(true, this.onEnter, null, this.onExit, this.cursor, null, A.LayerHandle$());
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1.__RenderObject__needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      var t1;
      renderObject.onEnter = this.onEnter;
      renderObject.onHover = null;
      renderObject.onExit = this.onExit;
      t1 = this.cursor;
      if (!renderObject._cursor.$eq(0, t1)) {
        renderObject._cursor = t1;
        renderObject.markNeedsPaint$0();
      }
    }
  };
  A.Semantics.prototype = {
    get$_effectiveAttributedLabel() {
      return null;
    },
    get$_effectiveAttributedValue() {
      return null;
    },
    get$_effectiveAttributedIncreasedValue() {
      return null;
    },
    get$_effectiveAttributedDecreasedValue() {
      return null;
    },
    get$_effectiveAttributedHint() {
      return null;
    },
    createRenderObject$1(context) {
      var _this = this, _null = null,
        t1 = _this.properties;
      t1 = new A.RenderSemanticsAnnotations(false, false, false, t1.checked, t1.enabled, t1.selected, t1.button, t1.slider, t1.keyboardKey, t1.link, t1.header, t1.textField, t1.readOnly, t1.focusable, t1.focused, t1.inMutuallyExclusiveGroup, t1.obscured, t1.multiline, t1.scopesRoute, t1.namesRoute, t1.hidden, t1.image, t1.liveRegion, t1.maxValueLength, t1.currentValueLength, t1.toggled, _this.get$_effectiveAttributedLabel(), _this.get$_effectiveAttributedValue(), _this.get$_effectiveAttributedIncreasedValue(), _this.get$_effectiveAttributedDecreasedValue(), _this.get$_effectiveAttributedHint(), t1.hintOverrides, _this._getTextDirection$1(context), t1.sortKey, t1.tagForChildren, t1.onTap, t1.onDismiss, t1.onLongPress, t1.onScrollLeft, t1.onScrollRight, t1.onScrollUp, t1.onScrollDown, t1.onIncrease, t1.onDecrease, t1.onCopy, t1.onCut, t1.onPaste, t1.onMoveCursorForwardByCharacter, t1.onMoveCursorBackwardByCharacter, _null, _null, t1.onSetSelection, t1.onSetText, t1.onDidGainAccessibilityFocus, t1.onDidLoseAccessibilityFocus, t1.customSemanticsActions, _null, A.LayerHandle$());
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1.__RenderObject__needsCompositing = false;
      t1.set$child(_null);
      return t1;
    },
    _getTextDirection$1(context) {
      return null;
    },
    updateRenderObject$2(context, renderObject) {
      var t1, t2, _this = this;
      renderObject.set$container(false);
      renderObject.set$explicitChildNodes(false);
      renderObject.set$excludeSemantics(false);
      t1 = _this.properties;
      renderObject.set$scopesRoute(t1.scopesRoute);
      renderObject.set$enabled(0, t1.enabled);
      renderObject.set$checked(0, t1.checked);
      renderObject.set$toggled(t1.toggled);
      renderObject.set$selected(0, t1.selected);
      renderObject.set$button(0, t1.button);
      renderObject.set$slider(t1.slider);
      renderObject.set$keyboardKey(t1.keyboardKey);
      renderObject.set$link(t1.link);
      renderObject.set$header(t1.header);
      renderObject.set$textField(t1.textField);
      renderObject.set$readOnly(0, t1.readOnly);
      renderObject.set$focusable(t1.focusable);
      renderObject.set$focused(0, t1.focused);
      renderObject.set$inMutuallyExclusiveGroup(t1.inMutuallyExclusiveGroup);
      renderObject.set$obscured(t1.obscured);
      renderObject.set$multiline(0, t1.multiline);
      renderObject.set$hidden(0, t1.hidden);
      renderObject.set$image(0, t1.image);
      renderObject.set$liveRegion(t1.liveRegion);
      renderObject.set$maxValueLength(t1.maxValueLength);
      renderObject.set$currentValueLength(t1.currentValueLength);
      renderObject.set$attributedLabel(_this.get$_effectiveAttributedLabel());
      renderObject.set$attributedValue(_this.get$_effectiveAttributedValue());
      renderObject.set$attributedIncreasedValue(_this.get$_effectiveAttributedIncreasedValue());
      renderObject.set$attributedDecreasedValue(_this.get$_effectiveAttributedDecreasedValue());
      renderObject.set$attributedHint(_this.get$_effectiveAttributedHint());
      renderObject.set$hintOverrides(t1.hintOverrides);
      renderObject.set$namesRoute(t1.namesRoute);
      renderObject.set$textDirection(0, _this._getTextDirection$1(context));
      renderObject.set$sortKey(t1.sortKey);
      renderObject.set$tagForChildren(t1.tagForChildren);
      renderObject.set$onTap(t1.onTap);
      renderObject.set$onLongPress(t1.onLongPress);
      renderObject.set$onScrollLeft(t1.onScrollLeft);
      renderObject.set$onScrollRight(t1.onScrollRight);
      renderObject.set$onScrollUp(t1.onScrollUp);
      renderObject.set$onScrollDown(t1.onScrollDown);
      renderObject.set$onIncrease(t1.onIncrease);
      renderObject.set$onDismiss(t1.onDismiss);
      renderObject.set$onDecrease(t1.onDecrease);
      renderObject.set$onCopy(0, t1.onCopy);
      renderObject.set$onCut(0, t1.onCut);
      renderObject.set$onPaste(0, t1.onPaste);
      t2 = t1.onMoveCursorForwardByCharacter;
      renderObject.set$onMoveCursorForwardByCharacter(t2);
      renderObject.set$onMoveCursorBackwardByCharacter(t2);
      renderObject.set$onMoveCursorForwardByWord(null);
      renderObject.set$onMoveCursorBackwardByWord(null);
      renderObject.set$onSetSelection(t1.onSetSelection);
      renderObject.set$onSetText(t1.onSetText);
      renderObject.set$onDidGainAccessibilityFocus(t1.onDidGainAccessibilityFocus);
      renderObject.set$onDidLoseAccessibilityFocus(t1.onDidLoseAccessibilityFocus);
      renderObject.set$customSemanticsActions(t1.customSemanticsActions);
    }
  };
  A.Builder.prototype = {
    build$1(_, context) {
      return this.builder.call$1(context);
    }
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure.prototype = {
    call$1(parameters) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure3(parameters);
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure3(parameters) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_String_Object),
        $async$returnValue, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A._lateReadCheck($.RendererBinding__instance.RendererBinding___RendererBinding__pipelineOwner, "_pipelineOwner")._rootNode;
              t1.toString;
              $async$returnValue = A.LinkedHashMap_LinkedHashMap$_literal(["data", t1.super$DiagnosticableTreeMixin$toStringDeep(B.DiagnosticLevel_2, "", "")], type$.String, type$.Object);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 22
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure0.prototype = {
    call$1(parameters) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure2(parameters);
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure2(parameters) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_String_Object),
        $async$returnValue, t1, data;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A._lateReadCheck($.RendererBinding__instance.RendererBinding___RendererBinding__pipelineOwner, "_pipelineOwner")._rootNode.get$debugSemantics();
              data = t1 == null ? null : t1.toStringDeep$0();
              $async$returnValue = A.LinkedHashMap_LinkedHashMap$_literal(["data", data == null ? "Semantics not collected." : data], type$.String, type$.Object);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 22
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure1.prototype = {
    call$1(parameters) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure1(parameters);
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure1(parameters) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_String_Object),
        $async$returnValue, t1, data;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A._lateReadCheck($.RendererBinding__instance.RendererBinding___RendererBinding__pipelineOwner, "_pipelineOwner")._rootNode.get$debugSemantics();
              data = t1 == null ? null : t1.toStringDeep$1$childOrder(B.DebugSemanticsDumpOrder_0);
              $async$returnValue = A.LinkedHashMap_LinkedHashMap$_literal(["data", data == null ? "Semantics not collected." : data], type$.String, type$.Object);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 22
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $.debugProfilePaintsEnabled;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 29
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure3.prototype = {
    call$1(value) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure0(value);
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure0(value) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($.debugProfilePaintsEnabled !== value)
                $.debugProfilePaintsEnabled = value;
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 33
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure4.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $.debugProfileLayoutsEnabled;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 29
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure5.prototype = {
    call$1(value) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure(value);
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure(value) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($.debugProfileLayoutsEnabled !== value)
                $.debugProfileLayoutsEnabled = value;
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 33
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_dispatchEvent_closure.prototype = {
    call$0() {
      var t2, result, _this = this,
        t1 = _this.hitTestResult;
      if (t1 == null || type$.PointerMoveEvent._is(_this.event)) {
        t1 = A._lateReadCheck(_this.$this.RendererBinding___RendererBinding__pipelineOwner, "_pipelineOwner")._rootNode;
        t1.toString;
        t2 = _this.event;
        t2 = t2.get$position(t2);
        result = A.BoxHitTestResult$();
        t1.hitTest$2$position(result, t2);
        t1 = result;
      }
      return t1;
    },
    $signature: 207
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initInstances_closure.prototype = {
    call$1(timings) {
      J.forEach$1$ax(timings, this.$this.get$_profileFramePostEvent());
    },
    $signature: 41
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.double),
        $async$returnValue;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $._timeDilation;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 208
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure0.prototype = {
    call$1(value) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure(value);
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure(value) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              A.timeDilation(value);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 209
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initInstances_closure.prototype = {
    call$1(message) {
      var t1 = message == null ? type$.Object._as(message) : message;
      return this.$this.handleSystemMessage$1(t1);
    },
    $signature: 210
  };
  A.WidgetsBindingObserver.prototype = {};
  A.WidgetsBinding.prototype = {
    handleLocaleChanged$0() {
      this.dispatchLocalesChanged$1($.$get$window().platformDispatcher._configuration.locales);
    },
    dispatchLocalesChanged$1(locales) {
      var t1, _i;
      for (t1 = this.WidgetsBinding__observers.length, _i = 0; _i < t1; ++_i)
        ;
    },
    handlePopRoute$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, t2, _i, t3;
      var $async$handlePopRoute$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A.List_List$of($async$self.WidgetsBinding__observers, true, type$.WidgetsBindingObserver).length, t2 = type$._Future_bool, _i = 0;
            case 3:
              // for condition
              if (!(_i < t1)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              t3 = new A._Future($.Zone__current, t2);
              t3._asyncComplete$1(false);
              $async$goto = 6;
              return A._asyncAwait(t3, $async$handlePopRoute$0);
            case 6:
              // returning from await.
              if ($async$result) {
                // goto return
                $async$goto = 1;
                break;
              }
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              A.SystemNavigator_pop();
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$handlePopRoute$0, $async$completer);
    },
    handlePushRoute$1(route) {
      return this.handlePushRoute$body$WidgetsBinding(route);
    },
    handlePushRoute$body$WidgetsBinding(route) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, t2, _i, t3;
      var $async$handlePushRoute$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A.List_List$of($async$self.WidgetsBinding__observers, true, type$.WidgetsBindingObserver).length, t2 = type$._Future_bool, _i = 0;
            case 3:
              // for condition
              if (!(_i < t1)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              t3 = new A._Future($.Zone__current, t2);
              t3._asyncComplete$1(false);
              $async$goto = 6;
              return A._asyncAwait(t3, $async$handlePushRoute$1);
            case 6:
              // returning from await.
              if ($async$result) {
                // goto return
                $async$goto = 1;
                break;
              }
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$handlePushRoute$1, $async$completer);
    },
    _handlePushRouteInformation$1(routeArguments) {
      return this._handlePushRouteInformation$body$WidgetsBinding(routeArguments);
    },
    _handlePushRouteInformation$body$WidgetsBinding(routeArguments) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, t2, t3, _i, t4;
      var $async$_handlePushRouteInformation$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A.List_List$of($async$self.WidgetsBinding__observers, true, type$.WidgetsBindingObserver).length, t2 = type$._Future_bool, t3 = J.getInterceptor$asx(routeArguments), _i = 0;
            case 3:
              // for condition
              if (!(_i < t1)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              A._asString(t3.$index(routeArguments, "location"));
              t3.$index(routeArguments, "state");
              t4 = new A._Future($.Zone__current, t2);
              t4._asyncComplete$1(false);
              $async$goto = 6;
              return A._asyncAwait(t4, $async$_handlePushRouteInformation$1);
            case 6:
              // returning from await.
              if ($async$result) {
                // goto return
                $async$goto = 1;
                break;
              }
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_handlePushRouteInformation$1, $async$completer);
    },
    _handleNavigationInvocation$1(methodCall) {
      switch (methodCall.method) {
        case "popRoute":
          return this.handlePopRoute$0();
        case "pushRoute":
          return this.handlePushRoute$1(A._asString(methodCall.$arguments));
        case "pushRouteInformation":
          return this._handlePushRouteInformation$1(type$.Map_dynamic_dynamic._as(methodCall.$arguments));
      }
      return A.Future_Future$value(null, type$.dynamic);
    },
    _handleBuildScheduled$0() {
      this.ensureVisualUpdate$0();
    },
    $isHitTestTarget: 1,
    $isSchedulerBinding: 1
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure.prototype = {
    call$1(parameters) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure3(parameters);
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure3(parameters) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_String_Object),
        $async$returnValue, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.WidgetsBinding__instance;
              t1.toString;
              t1 = "" + (A.getRuntimeType(t1).toString$0(0) + " - PROFILE MODE\n");
              $.WidgetsBinding__instance.toString;
              t1 += "<no tree currently mounted>\n";
              $async$returnValue = A.LinkedHashMap_LinkedHashMap$_literal(["data", t1.charCodeAt(0) == 0 ? t1 : t1], type$.String, type$.Object);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 22
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure0.prototype = {
    call$1(_) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure2(_);
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure2(_) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_String_dynamic),
        $async$returnValue, $async$self = this;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = A.LinkedHashMap_LinkedHashMap$_literal(["enabled", $async$self.$this.WidgetsBinding__needToReportFirstFrame ? "false" : "true"], type$.String, type$.dynamic);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 14
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure1.prototype = {
    call$1(_) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure1(_);
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure1(_) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_String_dynamic),
        $async$returnValue, $async$self = this;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = A.LinkedHashMap_LinkedHashMap$_literal(["enabled", ($async$self.$this.WidgetsBinding__firstFrameCompleter.future._state & 30) !== 0 ? "true" : "false"], type$.String, type$.dynamic);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 14
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure2.prototype = {
    call$1(params) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure0(params);
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure0(params) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_String_String),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, t1, className;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              className = A._asStringQ(J.$index$asx(params, "className"));
              A.throwExpression(A.FlutterError_FlutterError("Cannot instantiate DebugReassembleConfig in profile or release mode."));
              $.BindingBase_debugReassembleConfig = new A.DebugReassembleConfig(className);
              $async$handler = 3;
              t1 = $async$self.$this;
              $async$goto = 6;
              return A._asyncAwait(t1.lockEvents$1(t1.get$performReassemble()), $async$call$1);
            case 6:
              // returning from await.
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              $.BindingBase_debugReassembleConfig = null;
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
              t1 = type$.String;
              $async$returnValue = A.LinkedHashMap_LinkedHashMap$_literal(["type", "Success"], t1, t1);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 212
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure3.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $.debugProfileBuildsEnabled;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 29
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure4.prototype = {
    call$1(value) {
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure(value);
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure(value) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($.debugProfileBuildsEnabled !== value)
                $.debugProfileBuildsEnabled = value;
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 33
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_drawFrame_closure.prototype = {
    call$1(timings) {
      var t2, t3,
        t1 = $.$get$_FakeUserTag__defaultTag();
      $.$get$_currentTag();
      $._currentTag = t1;
      A.Timeline_instantSync("Rasterized first useful frame", null);
      A.postEvent("Flutter.FirstFrame", A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic));
      t1 = $.SchedulerBinding__instance;
      t1.toString;
      t2 = this._box_0;
      t3 = t2.firstFrameCallback;
      t3.toString;
      t1.removeTimingsCallback$1(t3);
      t2.firstFrameCallback = null;
      this.$this.WidgetsBinding__firstFrameCompleter.complete$0(0);
    },
    $signature: 41
  };
  A.RenderObjectToWidgetAdapter.prototype = {
    createElement$0(_) {
      return new A.RenderObjectToWidgetElement(this, B._ElementLifecycle_0, this.$ti._eval$1("RenderObjectToWidgetElement<1>"));
    },
    createRenderObject$1(context) {
      return this.container;
    },
    updateRenderObject$2(context, renderObject) {
    },
    attachToRenderTree$2(owner, element) {
      var t2, t1 = {};
      t1.element = element;
      owner.lockState$1(new A.RenderObjectToWidgetAdapter_attachToRenderTree_closure(t1, this, owner));
      t2 = t1.element;
      t2.toString;
      owner.buildScope$2(t2, new A.RenderObjectToWidgetAdapter_attachToRenderTree_closure0(t1));
      t1 = t1.element;
      t1.toString;
      return t1;
    },
    toStringShort$0() {
      var t1 = this.super$Widget$toStringShort();
      return t1;
    }
  };
  A.RenderObjectToWidgetAdapter_attachToRenderTree_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        element = A.RenderObjectToWidgetElement$(t1, t1.$ti._precomputed1);
      this._box_0.element = element;
      element._owner = this.owner;
    },
    $signature: 0
  };
  A.RenderObjectToWidgetAdapter_attachToRenderTree_closure0.prototype = {
    call$0() {
      var t1 = this._box_0.element;
      t1.toString;
      t1.super$RootRenderObjectElement$mount(null, null);
      t1._rebuild$0();
    },
    $signature: 0
  };
  A.RenderObjectToWidgetElement.prototype = {
    visitChildren$1(visitor) {
      var t1 = this._child;
      if (t1 != null)
        visitor.call$1(t1);
    },
    forgetChild$1(child) {
      this._child = null;
      this.super$Element$forgetChild(child);
    },
    mount$2($parent, newSlot) {
      this.super$RootRenderObjectElement$mount($parent, newSlot);
      this._rebuild$0();
    },
    update$1(_, newWidget) {
      this.super$RenderObjectElement$update(0, newWidget);
      this._rebuild$0();
    },
    performRebuild$0() {
      var _this = this,
        t1 = _this._newWidget;
      if (t1 != null) {
        _this._newWidget = null;
        _this.super$RenderObjectElement$update(0, _this.$ti._eval$1("RenderObjectToWidgetAdapter<1>")._as(t1));
        _this._rebuild$0();
      }
      _this.super$RenderObjectElement$performRebuild();
    },
    _rebuild$0() {
      var exception, stack, details, error, t1, t2, exception0, _this = this;
      try {
        t1 = _this._child;
        t2 = _this._widget;
        t2.toString;
        _this._child = _this.updateChild$3(t1, _this.$ti._eval$1("RenderObjectToWidgetAdapter<1>")._as(t2).child, B.C_Object);
      } catch (exception0) {
        exception = A.unwrapException(exception0);
        stack = A.getTraceFromException(exception0);
        t1 = A.ErrorDescription$("attaching to the render tree");
        details = new A.FlutterErrorDetails(exception, stack, "widgets library", t1, null, false);
        A.FlutterError_reportError(details);
        error = A.ErrorWidget__defaultErrorWidgetBuilder(details);
        _this._child = _this.updateChild$3(null, error, B.C_Object);
      }
    },
    get$renderObject() {
      return this.$ti._eval$1("RenderObjectWithChildMixin<1>")._as(A.RenderObjectElement.prototype.get$renderObject.call(this));
    },
    insertRenderObjectChild$2(child, slot) {
      var t1 = this.$ti;
      t1._eval$1("RenderObjectWithChildMixin<1>")._as(A.RenderObjectElement.prototype.get$renderObject.call(this)).set$child(t1._precomputed1._as(child));
    },
    moveRenderObjectChild$3(child, oldSlot, newSlot) {
    },
    removeRenderObjectChild$2(child, slot) {
      this.$ti._eval$1("RenderObjectWithChildMixin<1>")._as(A.RenderObjectElement.prototype.get$renderObject.call(this)).set$child(null);
    }
  };
  A.WidgetsFlutterBinding.prototype = {$isHitTestTarget: 1};
  A._WidgetsFlutterBinding_BindingBase_GestureBinding.prototype = {
    initInstances$0() {
      this.super$BindingBase$initInstances();
      $.GestureBinding__instance = this;
      var t1 = $.$get$window().platformDispatcher;
      t1._onPointerDataPacket = this.get$_handlePointerDataPacket();
      t1._onPointerDataPacketZone = $.Zone__current;
    },
    unlocked$0() {
      this.super$BindingBase$unlocked();
      this._flushPointerEventQueue$0();
    }
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding.prototype = {
    initInstances$0() {
      var _this = this;
      _this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding$initInstances();
      $.SchedulerBinding__instance = _this;
      _this.addTimingsCallback$1(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initInstances_closure(_this));
    },
    initServiceExtensions$0() {
      this.super$BindingBase$initServiceExtensions();
      this.registerNumericServiceExtension$3$getter$name$setter(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure(), "timeDilation", new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure0());
    }
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding.prototype = {
    initInstances$0() {
      var t1, t2, _this = this,
        _s9_ = "_keyboard",
        _s16_ = "_keyEventManager";
      _this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding$initInstances();
      $.ServicesBinding__instance = _this;
      A._lateWriteOnceCheck(_this.ServicesBinding___ServicesBinding__defaultBinaryMessenger, "_defaultBinaryMessenger");
      _this.ServicesBinding___ServicesBinding__defaultBinaryMessenger = B.C__DefaultBinaryMessenger;
      t1 = new A.RestorationManager(A.LinkedHashSet_LinkedHashSet$_empty(type$.RestorationBucket), $.$get$ChangeNotifier__emptyListeners());
      B.OptionalMethodChannel_fgL.setMethodCallHandler$1(t1.get$_methodHandler());
      _this.ServicesBinding___ServicesBinding__restorationManager = t1;
      t1 = new A.HardwareKeyboard(A.LinkedHashMap_LinkedHashMap$_empty(type$.PhysicalKeyboardKey, type$.LogicalKeyboardKey), A.LinkedHashSet_LinkedHashSet$_empty(type$.KeyboardLockMode), A._setArrayType([], type$.JSArray_of_bool_Function_KeyEvent));
      A._lateWriteOnceCheck(_this.ServicesBinding___ServicesBinding__keyboard, _s9_);
      _this.ServicesBinding___ServicesBinding__keyboard = t1;
      t1 = new A.KeyEventManager(A._lateReadCheck(t1, _s9_), $.$get$RawKeyboard_instance(), A._setArrayType([], type$.JSArray_KeyEvent));
      A._lateWriteOnceCheck(_this.ServicesBinding___ServicesBinding__keyEventManager, _s16_);
      _this.ServicesBinding___ServicesBinding__keyEventManager = t1;
      t2 = $.$get$window();
      t1 = A._lateReadCheck(t1, _s16_).get$handleKeyData();
      t2 = t2.platformDispatcher;
      t2._onKeyData = t1;
      t2._onKeyDataZone = $.Zone__current;
      B.BasicMessageChannel_Cfi.setMessageHandler$1(A._lateReadCheck(_this.ServicesBinding___ServicesBinding__keyEventManager, _s16_).get$handleRawKeyMessage());
      t1 = $.LicenseRegistry__collectors;
      if (t1 == null)
        t1 = $.LicenseRegistry__collectors = A._setArrayType([], type$.JSArray_of_Stream_LicenseEntry_Function);
      t1.push(_this.get$_addLicenses());
      B.BasicMessageChannel_Qma.setMessageHandler$1(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initInstances_closure(_this));
      B.BasicMessageChannel_No7.setMessageHandler$1(_this.get$_handleLifecycleMessage());
      B.OptionalMethodChannel_cWd.setMethodCallHandler$1(_this.get$_handlePlatformMessage());
      _this.readInitialLifecycleStateFromNativeWindow$0();
    },
    initServiceExtensions$0() {
      this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding$initServiceExtensions();
    }
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding.prototype = {
    initInstances$0() {
      this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding$initInstances();
      $.PaintingBinding__instance = this;
      var t1 = type$.Object;
      this.PaintingBinding___PaintingBinding__imageCache = new A.ImageCache(A.LinkedHashMap_LinkedHashMap$_empty(t1, type$._PendingImage), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$._CachedImage), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$._LiveImage));
    },
    handleMemoryPressure$0() {
      this.super$ServicesBinding$handleMemoryPressure();
      A._lateReadCheck(this.PaintingBinding___PaintingBinding__imageCache, "_imageCache").clear$0(0);
    },
    handleSystemMessage$1(systemMessage) {
      return this.handleSystemMessage$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding(systemMessage);
    },
    handleSystemMessage$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding(systemMessage) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this;
      var $async$handleSystemMessage$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.super$ServicesBinding$handleSystemMessage(systemMessage), $async$handleSystemMessage$1);
            case 3:
              // returning from await.
              switch (A._asString(J.$index$asx(type$.Map_String_dynamic._as(systemMessage), "type"))) {
                case "fontsChange":
                  $async$self.PaintingBinding__systemFonts.notifyListeners$0();
                  break;
              }
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$handleSystemMessage$1, $async$completer);
    }
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding.prototype = {
    initInstances$0() {
      this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding$initInstances();
      $.SemanticsBinding__instance = this;
      this.SemanticsBinding___SemanticsBinding__accessibilityFeatures = $.$get$window().platformDispatcher._configuration.accessibilityFeatures;
    }
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding.prototype = {
    initInstances$0() {
      var t1, t2, t3, t4, _this = this,
        _s14_ = "_pipelineOwner";
      _this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding$initInstances();
      $.RendererBinding__instance = _this;
      t1 = type$.JSArray_RenderObject;
      _this.RendererBinding___RendererBinding__pipelineOwner = new A.PipelineOwner(_this.get$ensureVisualUpdate(), _this.get$_handleSemanticsOwnerCreated(), _this.get$_handleSemanticsOwnerDisposed(), A._setArrayType([], t1), A._setArrayType([], t1), A._setArrayType([], t1), A.LinkedHashSet_LinkedHashSet$_empty(type$.RenderObject));
      t1 = $.$get$window();
      t2 = t1.platformDispatcher;
      t2._onMetricsChanged = _this.get$handleMetricsChanged();
      t3 = t2._onMetricsChangedZone = $.Zone__current;
      t2._onTextScaleFactorChanged = _this.get$handleTextScaleFactorChanged();
      t2._onTextScaleFactorChangedZone = t3;
      t2._onPlatformBrightnessChanged = _this.get$handlePlatformBrightnessChanged();
      t2._onPlatformBrightnessChangedZone = t3;
      t2._onSemanticsEnabledChanged = _this.get$_handleSemanticsEnabledChanged();
      t2._onSemanticsEnabledChangedZone = t3;
      t2._onSemanticsAction = _this.get$_handleSemanticsAction();
      t2._onSemanticsActionZone = t3;
      t1 = new A.RenderView(B.Size_0_0, _this.createViewConfiguration$0(), t1, null, A.LayerHandle$());
      t1.get$isRepaintBoundary();
      t1.__RenderObject__needsCompositing = true;
      t1.set$child(null);
      A._lateReadCheck(_this.RendererBinding___RendererBinding__pipelineOwner, _s14_).set$rootNode(t1);
      t1 = A._lateReadCheck(_this.RendererBinding___RendererBinding__pipelineOwner, _s14_)._rootNode;
      t1._relayoutBoundary = t1;
      t3 = type$.nullable_PipelineOwner;
      t3._as(A.AbstractNode.prototype.get$owner.call(t1))._nodesNeedingLayout.push(t1);
      t4 = t1._updateMatricesAndCreateNewRootLayer$0();
      t1._layerHandle.set$layer(0, t4);
      t3._as(A.AbstractNode.prototype.get$owner.call(t1))._nodesNeedingPaint.push(t1);
      _this.setSemanticsEnabled$1(t2._configuration.semanticsEnabled);
      _this.SchedulerBinding__persistentCallbacks.push(_this.get$_handlePersistentFrameCallback());
      t2 = _this.RendererBinding__mouseTracker;
      if (t2 != null) {
        t2.ChangeNotifier__listeners = $.$get$ChangeNotifier__emptyListeners();
        t2.ChangeNotifier__count = 0;
      }
      t1 = type$.int;
      t2 = $.$get$ChangeNotifier__emptyListeners();
      _this.RendererBinding__mouseTracker = new A.MouseTracker(new A.MouseCursorManager(B.SystemMouseCursor_basic, A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.MouseCursorSession)), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$._MouseState), t2);
      _this.SchedulerBinding__postFrameCallbacks.push(_this.get$_handleWebFirstFrame());
    },
    initServiceExtensions$0() {
      var _this = this;
      _this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding$initServiceExtensions();
      _this.registerServiceExtension$2$callback$name(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure(), "debugDumpRenderTree");
      _this.registerServiceExtension$2$callback$name(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure0(), "debugDumpSemanticsTreeInTraversalOrder");
      _this.registerServiceExtension$2$callback$name(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure1(), "debugDumpSemanticsTreeInInverseHitTestOrder");
      _this.registerBoolServiceExtension$3$getter$name$setter(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure2(), "profileRenderObjectPaints", new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure3());
      _this.registerBoolServiceExtension$3$getter$name$setter(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure4(), "profileRenderObjectLayouts", new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure5());
    },
    dispatchEvent$2(_, $event, hitTestResult) {
      this.RendererBinding__mouseTracker.updateWithEvent$2($event, new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_dispatchEvent_closure(this, hitTestResult, $event));
      this.super$GestureBinding$dispatchEvent(0, $event, hitTestResult);
    },
    performReassemble$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$next = [], $async$self = this, t1;
      var $async$performReassemble$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self.super$BindingBase$performReassemble(), $async$performReassemble$0);
            case 2:
              // returning from await.
              t1 = $.BindingBase_debugReassembleConfig;
              if ((t1 == null ? null : t1.widgetName) == null) {
                A.Timeline_startSync("Preparing Hot Reload (layout)", B.Map_9aZ6I, null);
                try {
                  A._lateReadCheck($async$self.RendererBinding___RendererBinding__pipelineOwner, "_pipelineOwner")._rootNode.reassemble$0();
                } finally {
                  A.Timeline_finishSync();
                }
              }
              $async$self.scheduleWarmUpFrame$0();
              $async$goto = 3;
              return A._asyncAwait($async$self.get$endOfFrame(), $async$performReassemble$0);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$performReassemble$0, $async$completer);
    }
  };
  A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding.prototype = {
    initServiceExtensions$0() {
      var _this = this;
      _this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding$initServiceExtensions();
      _this.registerServiceExtension$2$callback$name(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure(), "debugDumpApp");
      _this.registerServiceExtension$2$callback$name(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure0(_this), "didSendFirstFrameEvent");
      _this.registerServiceExtension$2$callback$name(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure1(_this), "didSendFirstFrameRasterizedEvent");
      _this.registerServiceExtension$2$callback$name(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure2(_this), "fastReassemble");
      _this.registerBoolServiceExtension$3$getter$name$setter(new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure3(), "profileWidgetBuilds", new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure4());
    },
    handleMetricsChanged$0() {
      var t1, t2, _i;
      this.super$RendererBinding$handleMetricsChanged();
      for (t1 = this.WidgetsBinding__observers, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].didChangeMetrics$0();
    },
    handleTextScaleFactorChanged$0() {
      var t1, t2, _i;
      this.super$RendererBinding$handleTextScaleFactorChanged();
      for (t1 = this.WidgetsBinding__observers, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].didChangeTextScaleFactor$0();
    },
    handlePlatformBrightnessChanged$0() {
      var t1, t2, _i;
      this.super$RendererBinding$handlePlatformBrightnessChanged();
      for (t1 = this.WidgetsBinding__observers, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].didChangePlatformBrightness$0();
    },
    handleAppLifecycleStateChanged$1(state) {
      var t1, _i;
      this.super$SchedulerBinding$handleAppLifecycleStateChanged(state);
      for (t1 = this.WidgetsBinding__observers.length, _i = 0; _i < t1; ++_i)
        ;
    },
    handleMemoryPressure$0() {
      var t1, _i;
      this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding$handleMemoryPressure();
      for (t1 = this.WidgetsBinding__observers.length, _i = 0; _i < t1; ++_i)
        ;
    },
    drawFrame$0() {
      var firstFrameCallback, t2, _this = this, t1 = {};
      t1.firstFrameCallback = null;
      if (_this.WidgetsBinding__needToReportFirstFrame) {
        firstFrameCallback = new A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_drawFrame_closure(t1, _this);
        t1.firstFrameCallback = firstFrameCallback;
        $.SchedulerBinding__instance.addTimingsCallback$1(firstFrameCallback);
      }
      try {
        _this.super$RendererBinding$drawFrame();
        _this.WidgetsBinding__buildOwner.finalizeTree$0();
      } finally {
      }
      if (_this.WidgetsBinding__needToReportFirstFrame)
        t2 = _this.RendererBinding__firstFrameSent || _this.RendererBinding__firstFrameDeferredCount === 0;
      else
        t2 = false;
      if (t2)
        A.Timeline_instantSync("Widgets built first useful frame", null);
      t2 = _this.WidgetsBinding__needToReportFirstFrame = false;
      t1 = t1.firstFrameCallback;
      if (t1 != null)
        t2 = !(_this.RendererBinding__firstFrameSent || _this.RendererBinding__firstFrameDeferredCount === 0);
      if (t2) {
        _this.WidgetsBinding__needToReportFirstFrame = true;
        t2 = $.SchedulerBinding__instance;
        t2.toString;
        t1.toString;
        t2.removeTimingsCallback$1(t1);
      }
    },
    performReassemble$0() {
      return this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding$performReassemble();
    }
  };
  A.DecoratedBox.prototype = {
    createRenderObject$1(context) {
      var t1 = new A.RenderDecoratedBox(this.decoration, this.position, A.createLocalImageConfiguration(context), null, A.LayerHandle$());
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1.__RenderObject__needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      renderObject.set$decoration(0, this.decoration);
      renderObject.set$configuration(A.createLocalImageConfiguration(context));
      renderObject.set$position(0, this.position);
    }
  };
  A.Container.prototype = {
    get$_container$_paddingIncludingDecoration() {
      var decorationPadding,
        t1 = this.decoration;
      if (t1 == null || t1.get$padding(t1) == null)
        return this.padding;
      decorationPadding = t1.get$padding(t1);
      t1 = this.padding;
      if (t1 == null)
        return decorationPadding;
      decorationPadding.toString;
      return t1.add$1(0, decorationPadding);
    },
    build$1(_, context) {
      var t1, effectivePadding, t2, t3, _this = this, _null = null,
        current = _this.child;
      if (current == null) {
        t1 = _this.constraints;
        if (t1 != null)
          t1 = !(t1.minWidth >= t1.maxWidth && t1.minHeight >= t1.maxHeight);
        else
          t1 = true;
      } else
        t1 = false;
      if (t1)
        current = new A.LimitedBox(0, 0, new A.ConstrainedBox(B.BoxConstraints_ALM, _null, _null), _null);
      t1 = _this.alignment;
      if (t1 != null)
        current = new A.Align(t1, _null, _null, current, _null);
      effectivePadding = _this.get$_container$_paddingIncludingDecoration();
      if (effectivePadding != null)
        current = new A.Padding(effectivePadding, current, _null);
      t1 = _this.clipBehavior;
      if (t1 !== B.Clip_0) {
        t2 = A.Directionality_maybeOf(context);
        t3 = _this.decoration;
        t3.toString;
        current = A.ClipPath$(current, t1, new A._DecorationClipper(t2 == null ? B.TextDirection_1 : t2, t3));
      }
      t1 = _this.decoration;
      if (t1 != null)
        current = A.DecoratedBox$(current, t1, B.DecorationPosition_0);
      t1 = _this.foregroundDecoration;
      if (t1 != null)
        current = A.DecoratedBox$(current, t1, B.DecorationPosition_1);
      t1 = _this.constraints;
      if (t1 != null)
        current = new A.ConstrainedBox(t1, current, _null);
      t1 = _this.margin;
      if (t1 != null)
        current = new A.Padding(t1, current, _null);
      t1 = _this.transform;
      if (t1 != null)
        current = new A.Transform(t1, _this.transformAlignment, current, _null);
      current.toString;
      return current;
    }
  };
  A._DecorationClipper.prototype = {
    getClip$1(size) {
      return this.decoration.getClipPath$2(new A.Rect(0, 0, 0 + size._dx, 0 + size._dy), this.textDirection);
    },
    shouldReclip$1(oldClipper) {
      return !oldClipper.decoration.$eq(0, this.decoration) || oldClipper.textDirection !== this.textDirection;
    }
  };
  A.KeyEventResult.prototype = {
    toString$0(_) {
      return "KeyEventResult." + this._name;
    }
  };
  A.FocusAttachment.prototype = {
    detach$0(_) {
      var t2,
        t1 = this._node;
      if (t1._attachment === this) {
        if (!t1.get$hasPrimaryFocus()) {
          t2 = t1._manager;
          t2 = t2 != null && t2._markedForFocus === t1;
        } else
          t2 = true;
        if (t2)
          t1.unfocus$1$disposition(B.UnfocusDisposition_1);
        t2 = t1._manager;
        if (t2 != null) {
          if (t2._primaryFocus === t1)
            t2._primaryFocus = null;
          t2._dirtyNodes.remove$1(0, t1);
        }
        t2 = t1._focus_manager$_parent;
        if (t2 != null)
          t2._removeChild$1(0, t1);
        t1._attachment = null;
      }
    },
    reparent$0() {
      var t2, $parent,
        t1 = this._node;
      if (t1._attachment === this) {
        t2 = t1._context;
        t2.toString;
        $parent = A.Focus_maybeOf(t2, true);
        ($parent == null ? t1._context._owner.focusManager.rootScope : $parent)._reparent$1(t1);
      }
    }
  };
  A.UnfocusDisposition.prototype = {
    toString$0(_) {
      return "UnfocusDisposition." + this._name;
    }
  };
  A.FocusNode.prototype = {
    set$skipTraversal(value) {
    },
    get$canRequestFocus() {
      var scope, t1, t2, _i;
      if (!this._focus_manager$_canRequestFocus)
        return false;
      scope = this.get$enclosingScope();
      if (scope != null && !scope.get$canRequestFocus())
        return false;
      for (t1 = this.get$ancestors(), t2 = t1.length, _i = 0; _i < t2; ++_i)
        t1[_i].toString;
      return true;
    },
    set$canRequestFocus(value) {
      var t1, _this = this;
      if (value !== _this._focus_manager$_canRequestFocus) {
        _this._focus_manager$_canRequestFocus = value;
        if (_this.get$hasFocus() && !value)
          _this.unfocus$1$disposition(B.UnfocusDisposition_1);
        t1 = _this._manager;
        if (t1 != null) {
          t1._markNeedsUpdate$0();
          t1._dirtyNodes.add$1(0, _this);
        }
      }
    },
    set$descendantsAreFocusable(value) {
      return;
    },
    set$descendantsAreTraversable(value) {
    },
    get$descendants() {
      var result, t2, _i, child,
        t1 = this._descendants;
      if (t1 == null) {
        result = A._setArrayType([], type$.JSArray_FocusNode);
        for (t1 = this._focus_manager$_children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
          child = t1[_i];
          B.JSArray_methods.addAll$1(result, child.get$descendants());
          result.push(child);
        }
        this._descendants = result;
        t1 = result;
      }
      return t1;
    },
    get$ancestors() {
      var result, $parent,
        t1 = this._ancestors;
      if (t1 == null) {
        result = A._setArrayType([], type$.JSArray_FocusNode);
        $parent = this._focus_manager$_parent;
        for (; $parent != null;) {
          result.push($parent);
          $parent = $parent._focus_manager$_parent;
        }
        this._ancestors = result;
        t1 = result;
      }
      return t1;
    },
    get$hasFocus() {
      if (!this.get$hasPrimaryFocus()) {
        var t1 = this._manager;
        if (t1 == null)
          t1 = null;
        else {
          t1 = t1._primaryFocus;
          t1 = t1 == null ? null : B.JSArray_methods.contains$1(t1.get$ancestors(), this);
        }
        t1 = t1 === true;
      } else
        t1 = true;
      return t1;
    },
    get$hasPrimaryFocus() {
      var t1 = this._manager;
      return (t1 == null ? null : t1._primaryFocus) === this;
    },
    get$nearestScope() {
      return this.get$enclosingScope();
    },
    get$enclosingScope() {
      var t1, t2, _i, node;
      for (t1 = this.get$ancestors(), t2 = t1.length, _i = 0; _i < t2; ++_i) {
        node = t1[_i];
        if (node instanceof A.FocusScopeNode)
          return node;
      }
      return null;
    },
    unfocus$1$disposition(disposition) {
      var t1, scope, _this = this;
      if (!_this.get$hasFocus()) {
        t1 = _this._manager;
        t1 = t1 == null || t1._markedForFocus !== _this;
      } else
        t1 = false;
      if (t1)
        return;
      scope = _this.get$enclosingScope();
      if (scope == null)
        return;
      switch (disposition.index) {
        case 0:
          if (scope.get$canRequestFocus())
            B.JSArray_methods.set$length(scope._focusedChildren, 0);
          for (; !scope.get$canRequestFocus();) {
            scope = scope.get$enclosingScope();
            if (scope == null) {
              t1 = _this._manager;
              scope = t1 == null ? null : t1.rootScope;
            }
          }
          scope._doRequestFocus$1$findFirstFocus(false);
          break;
        case 1:
          if (scope.get$canRequestFocus())
            B.JSArray_methods.remove$1(scope._focusedChildren, _this);
          for (; !scope.get$canRequestFocus();) {
            t1 = scope.get$enclosingScope();
            if (t1 != null)
              B.JSArray_methods.remove$1(t1._focusedChildren, scope);
            scope = scope.get$enclosingScope();
            if (scope == null) {
              t1 = _this._manager;
              scope = t1 == null ? null : t1.rootScope;
            }
          }
          scope._doRequestFocus$1$findFirstFocus(true);
          break;
      }
    },
    _markNextFocus$1(newFocus) {
      var _this = this,
        t1 = _this._manager;
      if (t1 != null) {
        if (t1._primaryFocus === _this)
          t1._markedForFocus = null;
        else {
          t1._markedForFocus = _this;
          t1._markNeedsUpdate$0();
        }
        return;
      }
      newFocus._setAsFocusedChildForScope$0();
      newFocus._notify$0();
      if (newFocus !== _this)
        _this._notify$0();
    },
    _removeChild$2$removeScopeFocus(_, node, removeScopeFocus) {
      var t1, t2, _i;
      if (removeScopeFocus) {
        t1 = node.get$enclosingScope();
        if (t1 != null)
          B.JSArray_methods.remove$1(t1._focusedChildren, node);
      }
      node._focus_manager$_parent = null;
      B.JSArray_methods.remove$1(this._focus_manager$_children, node);
      for (t1 = this.get$ancestors(), t2 = t1.length, _i = 0; _i < t2; ++_i)
        t1[_i]._descendants = null;
      this._descendants = null;
    },
    _removeChild$1($receiver, node) {
      return this._removeChild$2$removeScopeFocus($receiver, node, true);
    },
    _updateManager$1(manager) {
      var t1, t2, _i, descendant;
      this._manager = manager;
      for (t1 = this.get$descendants(), t2 = t1.length, _i = 0; _i < t2; ++_i) {
        descendant = t1[_i];
        descendant._manager = manager;
        descendant._ancestors = null;
      }
    },
    _reparent$1(child) {
      var oldScope, hadFocus, t1, t2, _i, _this = this;
      if (child._focus_manager$_parent === _this)
        return;
      oldScope = child.get$enclosingScope();
      hadFocus = child.get$hasFocus();
      t1 = child._focus_manager$_parent;
      if (t1 != null)
        t1._removeChild$2$removeScopeFocus(0, child, oldScope != _this.get$nearestScope());
      _this._focus_manager$_children.push(child);
      child._focus_manager$_parent = _this;
      child._ancestors = null;
      child._updateManager$1(_this._manager);
      for (t1 = child.get$ancestors(), t2 = t1.length, _i = 0; _i < t2; ++_i)
        t1[_i]._descendants = null;
      if (hadFocus) {
        t1 = _this._manager;
        if (t1 != null) {
          t1 = t1._primaryFocus;
          if (t1 != null)
            t1._setAsFocusedChildForScope$0();
        }
      }
      if (oldScope != null && child._context != null && child.get$enclosingScope() !== oldScope)
        child._context.dependOnInheritedWidgetOfExactType$1$0(type$._FocusTraversalGroupMarker);
      if (child._requestFocusWhenReparented) {
        child._doRequestFocus$1$findFirstFocus(true);
        child._requestFocusWhenReparented = false;
      }
    },
    _notify$0() {
      var _this = this;
      if (_this._focus_manager$_parent == null)
        return;
      if (_this.get$hasPrimaryFocus())
        _this._setAsFocusedChildForScope$0();
      _this.notifyListeners$0();
    },
    _doRequestFocus$1$findFirstFocus(findFirstFocus) {
      var t1, _this = this;
      if (!_this.get$canRequestFocus())
        return;
      if (_this._focus_manager$_parent == null) {
        _this._requestFocusWhenReparented = true;
        return;
      }
      _this._setAsFocusedChildForScope$0();
      if (_this.get$hasPrimaryFocus()) {
        t1 = _this._manager._markedForFocus;
        t1 = t1 == null || t1 === _this;
      } else
        t1 = false;
      if (t1)
        return;
      _this._markNextFocus$1(_this);
    },
    _setAsFocusedChildForScope$0() {
      var t1, t2, t3, scopeFocus, scopeFocus0, t4;
      for (t1 = B.JSArray_methods.get$iterator(this.get$ancestors()), t2 = new A.WhereTypeIterator(t1, type$.WhereTypeIterator_FocusScopeNode), t3 = type$.FocusScopeNode, scopeFocus = this; t2.moveNext$0(); scopeFocus = scopeFocus0) {
        scopeFocus0 = t3._as(t1.get$current(t1));
        t4 = scopeFocus0._focusedChildren;
        B.JSArray_methods.remove$1(t4, scopeFocus);
        t4.push(scopeFocus);
      }
    },
    debugDescribeChildren$0() {
      var t2, t3, t1 = {};
      t1.count = 1;
      t2 = this._focus_manager$_children;
      t3 = A._arrayInstanceType(t2)._eval$1("MappedListIterable<1,DiagnosticsNode>");
      return A.List_List$of(new A.MappedListIterable(t2, new A.FocusNode_debugDescribeChildren_closure(t1), t3), true, t3._eval$1("ListIterable.E"));
    },
    toStringShort$0() {
      var t1, extraData, _this = this;
      _this.get$hasFocus();
      t1 = _this.get$hasFocus() && !_this.get$hasPrimaryFocus() ? "[IN FOCUS PATH]" : "";
      extraData = t1 + (_this.get$hasPrimaryFocus() ? "[PRIMARY FOCUS]" : "");
      t1 = "<optimized out>#" + A.shortHash(_this);
      return t1 + (extraData.length !== 0 ? "(" + extraData + ")" : "");
    },
    $isDiagnosticableTree: 1
  };
  A.FocusNode_debugDescribeChildren_closure.prototype = {
    call$1(child) {
      return A.DiagnosticableTreeNode$("Child " + this._box_0.count++, null, child);
    },
    $signature: 213
  };
  A.FocusScopeNode.prototype = {
    get$nearestScope() {
      return this;
    },
    _doRequestFocus$1$findFirstFocus(findFirstFocus) {
      var t2, focusedChild, _this = this,
        t1 = _this._focusedChildren;
      while (true) {
        if ((t1.length !== 0 ? B.JSArray_methods.get$last(t1) : null) != null)
          t2 = !(t1.length !== 0 ? B.JSArray_methods.get$last(t1) : null).get$canRequestFocus();
        else
          t2 = false;
        if (!t2)
          break;
        t1.pop();
      }
      focusedChild = t1.length !== 0 ? B.JSArray_methods.get$last(t1) : null;
      if (!findFirstFocus || focusedChild == null) {
        if (_this.get$canRequestFocus()) {
          _this._setAsFocusedChildForScope$0();
          _this._markNextFocus$1(_this);
        }
        return;
      }
      focusedChild._doRequestFocus$1$findFirstFocus(true);
    }
  };
  A.FocusHighlightMode.prototype = {
    toString$0(_) {
      return "FocusHighlightMode." + this._name;
    }
  };
  A.FocusHighlightStrategy.prototype = {
    toString$0(_) {
      return "FocusHighlightStrategy." + this._name;
    }
  };
  A.FocusManager.prototype = {
    _updateHighlightMode$0() {
      var t1, newMode, t2, _this = this;
      switch (0) {
        case 0:
          t1 = _this._lastInteractionWasTouch;
          if (t1 == null)
            return;
          newMode = t1 ? B.FocusHighlightMode_0 : B.FocusHighlightMode_1;
          break;
      }
      t1 = _this._highlightMode;
      if (t1 == null)
        t1 = A.FocusManager__defaultModeForPlatform();
      t2 = _this._highlightMode = newMode;
      if (t2 !== t1)
        _this._notifyHighlightModeListeners$0();
    },
    _notifyHighlightModeListeners$0() {
      var listener, exception, stack, localListeners, _i, t3, exception0, rti, t4, _this = this,
        t1 = _this._focus_manager$_listeners,
        t2 = t1._observer_list$_map;
      if (t2._length === 0)
        return;
      localListeners = A.List_List$of(t1, true, type$.void_Function_FocusHighlightMode);
      for (t1 = localListeners.length, _i = 0; _i < t1; ++_i) {
        listener = localListeners[_i];
        try {
          if (t2.containsKey$1(0, listener)) {
            t3 = _this._highlightMode;
            if (t3 == null)
              t3 = A.FocusManager__defaultModeForPlatform();
            listener.call$1(t3);
          }
        } catch (exception0) {
          exception = A.unwrapException(exception0);
          stack = A.getTraceFromException(exception0);
          rti = _this instanceof A.Closure ? A.closureFunctionType(_this) : null;
          t3 = A.ErrorDescription$("while dispatching notifications for " + A.createRuntimeType(rti == null ? A.instanceType(_this) : rti).toString$0(0));
          t4 = $.$get$FlutterError_onError();
          if (t4 != null)
            t4.call$1(new A.FlutterErrorDetails(exception, stack, "widgets library", t3, null, false));
        }
      }
    },
    _handlePointerEvent$1($event) {
      var expectedMode, t1, _this = this;
      switch ($event.get$kind($event).index) {
        case 0:
        case 2:
        case 3:
          _this._lastInteractionWasTouch = true;
          expectedMode = B.FocusHighlightMode_0;
          break;
        case 1:
        case 4:
        default:
          _this._lastInteractionWasTouch = false;
          expectedMode = B.FocusHighlightMode_1;
          break;
      }
      t1 = _this._highlightMode;
      if (expectedMode !== (t1 == null ? A.FocusManager__defaultModeForPlatform() : t1))
        _this._updateHighlightMode$0();
    },
    _handleKeyMessage$1(message) {
      var t1, handled, t2, t3, _i, node, results, _this = this;
      _this._lastInteractionWasTouch = false;
      _this._updateHighlightMode$0();
      t1 = _this._primaryFocus;
      if (t1 == null)
        return false;
      t1 = A._setArrayType([t1], type$.JSArray_FocusNode);
      B.JSArray_methods.addAll$1(t1, _this._primaryFocus.get$ancestors());
      t2 = t1.length;
      t3 = type$.JSArray_KeyEventResult;
      _i = 0;
      while (true) {
        if (!(_i < t1.length)) {
          handled = false;
          break;
        }
        c$1: {
          node = t1[_i];
          results = A._setArrayType([], t3);
          node.toString;
          switch (A.combineKeyEventResults(results).index) {
            case 1:
              break c$1;
            case 0:
              handled = true;
              break;
            case 2:
              handled = false;
              break;
            default:
              handled = false;
          }
          break;
        }
        t1.length === t2 || (0, A.throwConcurrentModificationError)(t1);
        ++_i;
      }
      return handled;
    },
    _markNeedsUpdate$0() {
      if (this._haveScheduledUpdate)
        return;
      this._haveScheduledUpdate = true;
      A.scheduleMicrotask(this.get$_applyFocusChange());
    },
    _applyFocusChange$0() {
      var previousFocus, t1, t2, t3, _i, autofocus, t4, t5, shouldApply, previousPath, nextPath, _this = this;
      _this._haveScheduledUpdate = false;
      previousFocus = _this._primaryFocus;
      for (t1 = _this._pendingAutofocuses, t2 = t1.length, t3 = _this.rootScope, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        autofocus = t1[_i];
        t4 = autofocus.scope;
        if (t4._focus_manager$_parent != null || t4 === t3)
          if (t4._manager === _this) {
            t5 = t4._focusedChildren;
            t4 = (t5.length !== 0 ? B.JSArray_methods.get$last(t5) : null) == null && B.JSArray_methods.contains$1(autofocus.autofocusNode.get$ancestors(), t4);
            shouldApply = t4;
          } else
            shouldApply = false;
        else
          shouldApply = false;
        if (shouldApply)
          autofocus.autofocusNode._doRequestFocus$1$findFirstFocus(true);
      }
      B.JSArray_methods.set$length(t1, 0);
      t1 = _this._primaryFocus;
      if (t1 == null && _this._markedForFocus == null)
        _this._markedForFocus = t3;
      t2 = _this._markedForFocus;
      if (t2 != null && t2 !== t1) {
        if (previousFocus == null)
          previousPath = null;
        else {
          t1 = previousFocus.get$ancestors();
          t1 = A.LinkedHashSet_LinkedHashSet$from(t1, A._arrayInstanceType(t1)._precomputed1);
          previousPath = t1;
        }
        if (previousPath == null)
          previousPath = A.LinkedHashSet_LinkedHashSet$_empty(type$.FocusNode);
        t1 = _this._markedForFocus.get$ancestors();
        nextPath = A.LinkedHashSet_LinkedHashSet$from(t1, A._arrayInstanceType(t1)._precomputed1);
        t1 = _this._dirtyNodes;
        t1.addAll$1(0, nextPath.difference$1(previousPath));
        t1.addAll$1(0, previousPath.difference$1(nextPath));
        t1 = _this._primaryFocus = _this._markedForFocus;
        _this._markedForFocus = null;
      }
      if (previousFocus != t1) {
        if (previousFocus != null)
          _this._dirtyNodes.add$1(0, previousFocus);
        t1 = _this._primaryFocus;
        if (t1 != null)
          _this._dirtyNodes.add$1(0, t1);
      }
      for (t1 = _this._dirtyNodes, t2 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications), t3 = A._instanceType(t2)._precomputed1; t2.moveNext$0();) {
        t4 = t2._collection$_current;
        (t4 == null ? t3._as(t4) : t4)._notify$0();
      }
      t1.clear$0(0);
      if (previousFocus != _this._primaryFocus)
        _this.notifyListeners$0();
    },
    debugDescribeChildren$0() {
      return A._setArrayType([A.DiagnosticableTreeNode$("rootScope", null, this.rootScope)], type$.JSArray_DiagnosticsNode);
    },
    $isDiagnosticableTree: 1
  };
  A._FocusManager_Object_DiagnosticableTreeMixin.prototype = {};
  A._FocusManager_Object_DiagnosticableTreeMixin_ChangeNotifier.prototype = {};
  A._FocusNode_Object_DiagnosticableTreeMixin.prototype = {};
  A._FocusNode_Object_DiagnosticableTreeMixin_ChangeNotifier.prototype = {};
  A.Focus.prototype = {
    get$onKeyEvent() {
      return null;
    },
    get$onKey() {
      return null;
    },
    get$canRequestFocus() {
      var t1 = this._focus_scope$_canRequestFocus;
      if (t1 == null)
        t1 = null;
      return t1 !== false;
    },
    get$skipTraversal() {
      return false;
    },
    get$descendantsAreFocusable() {
      return true;
    },
    get$descendantsAreTraversable() {
      return true;
    },
    get$debugLabel() {
      return null;
    },
    createState$0() {
      return new A._FocusState(B._StateLifecycle_0);
    }
  };
  A._FocusState.prototype = {
    get$focusNode(_) {
      var t1;
      this._widget.toString;
      t1 = this._internalNode;
      t1.toString;
      return t1;
    },
    initState$0() {
      this.super$State$initState();
      this._initNode$0();
    },
    _initNode$0() {
      var t2, _this = this,
        t1 = _this._widget;
      t1.toString;
      if (_this._internalNode == null) {
        t1 = t1.get$debugLabel();
        t2 = _this._widget.get$canRequestFocus();
        _this._widget.get$descendantsAreFocusable();
        _this._widget.get$descendantsAreTraversable();
        _this._widget.get$skipTraversal();
        _this._internalNode = A.FocusNode$(t2, t1, true, true, null, null, false);
      }
      t1 = _this.get$focusNode(_this);
      _this._widget.get$descendantsAreFocusable();
      t1.set$descendantsAreFocusable(true);
      t1 = _this.get$focusNode(_this);
      _this._widget.get$descendantsAreTraversable();
      t1.set$descendantsAreTraversable(true);
      _this._widget.get$skipTraversal();
      t1 = _this.get$focusNode(_this);
      _this._widget.get$skipTraversal();
      t1.set$skipTraversal(false);
      if (_this._widget._focus_scope$_canRequestFocus != null) {
        t1 = _this.get$focusNode(_this);
        t2 = _this._widget._focus_scope$_canRequestFocus;
        t2.toString;
        t1.set$canRequestFocus(t2);
      }
      _this.___FocusState__couldRequestFocus = _this.get$focusNode(_this).get$canRequestFocus();
      _this.get$focusNode(_this);
      _this.___FocusState__descendantsWereFocusable = true;
      _this.get$focusNode(_this);
      _this.___FocusState__descendantsWereTraversable = true;
      _this.___FocusState__hadPrimaryFocus = _this.get$focusNode(_this).get$hasPrimaryFocus();
      t1 = _this.get$focusNode(_this);
      t2 = _this._framework$_element;
      t2.toString;
      _this._widget.get$onKeyEvent();
      _this._widget.get$onKey();
      t1._context = t2;
      _this._focusAttachment = t1._attachment = new A.FocusAttachment(t1);
      _this.get$focusNode(_this).addListener$1(0, _this.get$_handleFocusChanged());
    },
    dispose$0(_) {
      var t1, t2, _this = this;
      _this.get$focusNode(_this).removeListener$1(0, _this.get$_handleFocusChanged());
      _this._focusAttachment.detach$0(0);
      t1 = _this._internalNode;
      if (t1 != null) {
        t2 = t1._attachment;
        if (t2 != null)
          t2.detach$0(0);
        t1.super$ChangeNotifier$dispose(0);
      }
      _this.super$State$dispose(0);
    },
    didChangeDependencies$0() {
      this.super$State$didChangeDependencies();
      var t1 = this._focusAttachment;
      if (t1 != null)
        t1.reparent$0();
      this._handleAutofocus$0();
    },
    _handleAutofocus$0() {
      if (!this._didAutofocus)
        this._widget.toString;
    },
    deactivate$0() {
      this.super$State$deactivate();
      var t1 = this._focusAttachment;
      if (t1 != null)
        t1.reparent$0();
      this._didAutofocus = false;
    },
    didUpdateWidget$1(oldWidget) {
      var t1, t2, _this = this;
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = _this._widget;
      t1.get$onKey();
      _this.get$focusNode(_this);
      _this._widget.get$onKeyEvent();
      _this.get$focusNode(_this);
      _this._widget.get$skipTraversal();
      t1 = _this.get$focusNode(_this);
      _this._widget.get$skipTraversal();
      t1.set$skipTraversal(false);
      if (_this._widget._focus_scope$_canRequestFocus != null) {
        t1 = _this.get$focusNode(_this);
        t2 = _this._widget._focus_scope$_canRequestFocus;
        t2.toString;
        t1.set$canRequestFocus(t2);
      }
      t1 = _this.get$focusNode(_this);
      _this._widget.get$descendantsAreFocusable();
      t1.set$descendantsAreFocusable(true);
      t1 = _this.get$focusNode(_this);
      _this._widget.get$descendantsAreTraversable();
      t1.set$descendantsAreTraversable(true);
      _this._widget.toString;
    },
    _handleFocusChanged$0() {
      var _this = this,
        hasPrimaryFocus = _this.get$focusNode(_this).get$hasPrimaryFocus(),
        canRequestFocus = _this.get$focusNode(_this).get$canRequestFocus();
      _this.get$focusNode(_this);
      _this.get$focusNode(_this);
      _this._widget.onFocusChange.call$1(_this.get$focusNode(_this).get$hasFocus());
      if (A._lateReadCheck(_this.___FocusState__hadPrimaryFocus, "_hadPrimaryFocus") !== hasPrimaryFocus)
        _this.setState$1(new A._FocusState__handleFocusChanged_closure(_this, hasPrimaryFocus));
      if (A._lateReadCheck(_this.___FocusState__couldRequestFocus, "_couldRequestFocus") !== canRequestFocus)
        _this.setState$1(new A._FocusState__handleFocusChanged_closure0(_this, canRequestFocus));
      if (!A._lateReadCheck(_this.___FocusState__descendantsWereFocusable, "_descendantsWereFocusable"))
        _this.setState$1(new A._FocusState__handleFocusChanged_closure1(_this, true));
      if (!A._lateReadCheck(_this.___FocusState__descendantsWereTraversable, "_descendantsWereTraversable"))
        _this.setState$1(new A._FocusState__handleFocusChanged_closure2(_this, true));
    },
    build$1(_, context) {
      var t1, t2, child, _this = this, _null = null;
      _this._focusAttachment.reparent$0();
      _this._widget.toString;
      t1 = A._lateReadCheck(_this.___FocusState__couldRequestFocus, "_couldRequestFocus");
      t2 = A._lateReadCheck(_this.___FocusState__hadPrimaryFocus, "_hadPrimaryFocus");
      child = A.Semantics$(_this._widget.child, _null, t1, t2, _null, _null, _null, _null, _null, _null);
      return new A._FocusMarker(_this.get$focusNode(_this), child, _null);
    }
  };
  A._FocusState__handleFocusChanged_closure.prototype = {
    call$0() {
      this.$this.___FocusState__hadPrimaryFocus = this.hasPrimaryFocus;
    },
    $signature: 0
  };
  A._FocusState__handleFocusChanged_closure0.prototype = {
    call$0() {
      this.$this.___FocusState__couldRequestFocus = this.canRequestFocus;
    },
    $signature: 0
  };
  A._FocusState__handleFocusChanged_closure1.prototype = {
    call$0() {
      this.$this.___FocusState__descendantsWereFocusable = this.descendantsAreFocusable;
    },
    $signature: 0
  };
  A._FocusState__handleFocusChanged_closure2.prototype = {
    call$0() {
      this.$this.___FocusState__descendantsWereTraversable = this.descendantsAreTraversable;
    },
    $signature: 0
  };
  A._FocusMarker.prototype = {};
  A.UniqueKey.prototype = {
    toString$0(_) {
      return "[#" + A.shortHash(this) + "]";
    }
  };
  A.GlobalKey.prototype = {};
  A.LabeledGlobalKey.prototype = {
    toString$0(_) {
      var _this = this,
        t1 = _this._debugLabel,
        label = t1 != null ? " " + t1 : "";
      if (A.getRuntimeType(_this) === B.Type_LabeledGlobalKey_6TW)
        return "[GlobalKey#" + A.shortHash(_this) + label + "]";
      return "[" + ("<optimized out>#" + A.shortHash(_this)) + label + "]";
    }
  };
  A.GlobalObjectKey.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return this.$ti._is(other) && other.value === this.value;
    },
    get$hashCode(_) {
      return A.objectHashCode(this.value);
    },
    toString$0(_) {
      var _s15_ = "GlobalObjectKey";
      return "[" + (B.JSString_methods.endsWith$1(_s15_, "<State<StatefulWidget>>") ? B.JSString_methods.substring$2(_s15_, 0, -8) : _s15_) + " " + ("<optimized out>#" + A.shortHash(this.value)) + "]";
    }
  };
  A.Widget.prototype = {
    toStringShort$0() {
      var t1 = this.key;
      return t1 == null ? "Widget" : "Widget-" + t1.toString$0(0);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return this.super$Object$$eq(0, other);
    },
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, this);
    }
  };
  A.InheritedTreeCache.prototype = {
    $index(_, type) {
      var t2,
        t1 = this._framework$_current,
        potential = t1.$index(0, type);
      if (potential != null)
        return potential;
      t2 = this._parent;
      potential = t2 == null ? null : t2._lookupWithoutCaching$1(type);
      if (potential != null)
        t1.$indexSet(0, type, potential);
      return potential;
    },
    _lookupWithoutCaching$1(type) {
      var t1 = this._framework$_current.$index(0, type);
      if (t1 == null) {
        t1 = this._parent;
        t1 = t1 == null ? null : t1._lookupWithoutCaching$1(type);
      }
      return t1;
    }
  };
  A.StatelessWidget.prototype = {
    createElement$0(_) {
      return new A.StatelessElement(this, B._ElementLifecycle_0);
    }
  };
  A.StatefulWidget.prototype = {
    createElement$0(_) {
      return A.StatefulElement$(this);
    }
  };
  A._StateLifecycle.prototype = {
    toString$0(_) {
      return "_StateLifecycle." + this._name;
    }
  };
  A.State.prototype = {
    initState$0() {
    },
    didUpdateWidget$1(oldWidget) {
    },
    setState$1(fn) {
      fn.call$0();
      this._framework$_element.markNeedsBuild$0();
    },
    deactivate$0() {
    },
    activate$0() {
    },
    dispose$0(_) {
    },
    didChangeDependencies$0() {
    }
  };
  A.ProxyWidget.prototype = {};
  A.InheritedWidget.prototype = {
    createElement$0(_) {
      return A.InheritedElement$(this);
    }
  };
  A.RenderObjectWidget.prototype = {
    updateRenderObject$2(context, renderObject) {
    },
    didUnmountRenderObject$1(renderObject) {
    }
  };
  A.LeafRenderObjectWidget.prototype = {
    createElement$0(_) {
      return new A.LeafRenderObjectElement(this, B._ElementLifecycle_0);
    }
  };
  A.SingleChildRenderObjectWidget.prototype = {
    createElement$0(_) {
      return new A.SingleChildRenderObjectElement(this, B._ElementLifecycle_0);
    }
  };
  A.MultiChildRenderObjectWidget.prototype = {
    createElement$0(_) {
      return new A.MultiChildRenderObjectElement(A.HashSet_HashSet(type$.Element_2), this, B._ElementLifecycle_0);
    }
  };
  A._ElementLifecycle.prototype = {
    toString$0(_) {
      return "_ElementLifecycle." + this._name;
    }
  };
  A._InactiveElements.prototype = {
    _unmount$1(element) {
      element.visitChildren$1(new A._InactiveElements__unmount_closure(this, element));
      element.unmount$0();
    },
    _unmountAll$0() {
      var elements, t1, elements0, _this = this;
      _this._locked = true;
      t1 = _this._elements;
      elements0 = A.List_List$of(t1, true, A._instanceType(t1)._eval$1("SetMixin.E"));
      B.JSArray_methods.sort$1(elements0, A.framework_Element__sort$closure());
      elements = elements0;
      t1.clear$0(0);
      try {
        t1 = elements;
        new A.ReversedListIterable(t1, A.instanceType(t1)._eval$1("ReversedListIterable<1>")).forEach$1(0, _this.get$_unmount());
      } finally {
        _this._locked = false;
      }
    }
  };
  A._InactiveElements__unmount_closure.prototype = {
    call$1(child) {
      this.$this._unmount$1(child);
    },
    $signature: 3
  };
  A.BuildOwner.prototype = {
    scheduleBuildFor$1(element) {
      var _this = this;
      if (element._inDirtyList) {
        _this._dirtyElementsNeedsResorting = true;
        return;
      }
      if (!_this._scheduledFlushDirtyElements && _this.onBuildScheduled != null) {
        _this._scheduledFlushDirtyElements = true;
        _this.onBuildScheduled.call$0();
      }
      _this._dirtyElements.push(element);
      element._inDirtyList = true;
    },
    lockState$1(callback) {
      try {
        callback.call$0();
      } finally {
      }
    },
    buildScope$2(context, callback) {
      var element, e, stack, element0, t2, rti, exception, t3, t4, _i, _this = this, _box_1 = {},
        t1 = callback == null;
      if (t1 && _this._dirtyElements.length === 0)
        return;
      _box_1.debugTimelineArguments = B.Map_9aZ6I;
      A.Timeline_startSync("BUILD", B.Map_9aZ6I, null);
      try {
        _this._scheduledFlushDirtyElements = true;
        if (!t1) {
          _box_1.debugPreviousBuildTarget = null;
          _this._dirtyElementsNeedsResorting = false;
          try {
            callback.call$0();
          } finally {
          }
        }
        t1 = _this._dirtyElements;
        B.JSArray_methods.sort$1(t1, A.framework_Element__sort$closure());
        _this._dirtyElementsNeedsResorting = false;
        _box_1.dirtyCount = t1.length;
        _box_1.index = 0;
        for (t2 = 0; t2 < _box_1.dirtyCount;) {
          element = t1[t2];
          t2 = $.debugProfileBuildsEnabled;
          if (t2) {
            t2 = element._widget;
            t2.toString;
            rti = t2 instanceof A.Closure ? A.closureFunctionType(t2) : null;
            A.Timeline_startSync(A.createRuntimeType(rti == null ? A.instanceType(t2) : rti).toString$0(0), B.Map_9aZ6I, null);
          }
          try {
            element.rebuild$0();
          } catch (exception) {
            e = A.unwrapException(exception);
            stack = A.getTraceFromException(exception);
            t2 = A.ErrorDescription$("while rebuilding dirty elements");
            t3 = $.$get$FlutterError_onError();
            if (t3 != null)
              t3.call$1(new A.FlutterErrorDetails(e, stack, "widgets library", t2, new A.BuildOwner_buildScope_closure(_box_1, _this, element), false));
          }
          t2 = $.debugProfileBuildsEnabled;
          if (t2)
            A.Timeline_finishSync();
          t2 = ++_box_1.index;
          t3 = _box_1.dirtyCount;
          t4 = t1.length;
          if (t3 >= t4) {
            t3 = _this._dirtyElementsNeedsResorting;
            t3.toString;
          } else
            t3 = true;
          if (t3) {
            if (!!t1.immutable$list)
              A.throwExpression(A.UnsupportedError$("sort"));
            t2 = t4 - 1;
            if (t2 - 0 <= 32)
              A.Sort__insertionSort(t1, 0, t2, A.framework_Element__sort$closure());
            else
              A.Sort__dualPivotQuicksort(t1, 0, t2, A.framework_Element__sort$closure());
            t2 = _this._dirtyElementsNeedsResorting = false;
            _box_1.dirtyCount = t1.length;
            while (true) {
              t3 = _box_1.index;
              if (!(t3 > 0 ? t1[t3 - 1]._dirty : t2))
                break;
              _box_1.index = t3 - 1;
            }
            t2 = t3;
          }
        }
      } finally {
        for (t1 = _this._dirtyElements, t2 = t1.length, _i = 0; _i < t2; ++_i) {
          element0 = t1[_i];
          element0._inDirtyList = false;
        }
        B.JSArray_methods.set$length(t1, 0);
        _this._scheduledFlushDirtyElements = false;
        _this._dirtyElementsNeedsResorting = null;
        A.Timeline_finishSync();
      }
    },
    finalizeTree$0() {
      var e, stack, exception;
      A.Timeline_startSync("FINALIZE TREE", B.Map_9aZ6I, null);
      try {
        this.lockState$1(this._inactiveElements.get$_unmountAll());
      } catch (exception) {
        e = A.unwrapException(exception);
        stack = A.getTraceFromException(exception);
        A._debugReportException(A.ErrorSummary$("while finalizing the widget tree"), e, stack, null);
      } finally {
        A.Timeline_finishSync();
      }
    }
  };
  A.BuildOwner_buildScope_closure.prototype = {
    call$0() {
      var _null = null,
        _s48_ = "The element being rebuilt at the time was index ",
        t1 = A._setArrayType([], type$.JSArray_DiagnosticsNode),
        t2 = this._box_1,
        t3 = t2.index,
        t4 = this.$this._dirtyElements.length;
      t2 = t2.dirtyCount;
      if (t3 < t4)
        J.add$1$ax(t1, A.DiagnosticsProperty$(_s48_ + t3 + " of " + t2, this.element, true, B.C__NoDefaultValue, _null, false, _null, _null, B.DiagnosticLevel_3, false, true, true, B.DiagnosticsTreeStyle_9, _null, type$.Element_2));
      else
        J.add$1$ax(t1, A.ErrorHint$(_s48_ + t3 + " of " + t2 + ", but _dirtyElements only had " + t4 + " entries. This suggests some confusion in the framework internals."));
      return t1;
    },
    $signature: 9
  };
  A.Element0.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return this === other;
    },
    get$renderObject() {
      var t1 = {};
      t1.result = null;
      new A.Element_renderObject_visit(t1).call$1(this);
      return t1.result;
    },
    visitChildren$1(visitor) {
    },
    updateChild$3(child, newWidget, newSlot) {
      var t1, newChild, _this = this;
      if (newWidget == null) {
        if (child != null)
          _this.deactivateChild$1(child);
        return null;
      }
      if (child != null) {
        t1 = child._widget.$eq(0, newWidget);
        if (t1) {
          if (!J.$eq$(child._slot, newSlot))
            _this.updateSlotForChild$2(child, newSlot);
          t1 = child;
        } else {
          t1 = child._widget;
          t1.toString;
          t1 = A.getRuntimeType(t1) === A.getRuntimeType(newWidget) && J.$eq$(t1.key, newWidget.key);
          if (t1) {
            if (!J.$eq$(child._slot, newSlot))
              _this.updateSlotForChild$2(child, newSlot);
            t1 = $.debugProfileBuildsEnabled;
            if (t1)
              A.Timeline_startSync(A.getRuntimeType(newWidget).toString$0(0), B.Map_9aZ6I, null);
            child.update$1(0, newWidget);
            t1 = $.debugProfileBuildsEnabled;
            if (t1)
              A.Timeline_finishSync();
            t1 = child;
          } else {
            _this.deactivateChild$1(child);
            newChild = _this.inflateWidget$2(newWidget, newSlot);
            t1 = newChild;
          }
        }
      } else {
        newChild = _this.inflateWidget$2(newWidget, newSlot);
        t1 = newChild;
      }
      return t1;
    },
    mount$2($parent, newSlot) {
      var t1, key, _this = this;
      _this._parent = $parent;
      _this._slot = newSlot;
      _this._lifecycleState = B._ElementLifecycle_1;
      t1 = $parent != null;
      _this.__Element__depth = t1 ? A._lateReadCheck($parent.__Element__depth, "_depth") + 1 : 1;
      if (t1)
        _this._owner = $parent._owner;
      key = _this._widget.key;
      if (key instanceof A.GlobalKey)
        _this._owner._globalKeyRegistry.$indexSet(0, key, _this);
      _this._updateInheritance$0();
    },
    update$1(_, newWidget) {
      this._widget = newWidget;
    },
    updateSlotForChild$2(child, newSlot) {
      new A.Element_updateSlotForChild_visit(newSlot).call$1(child);
    },
    _updateSlot$1(newSlot) {
      this._slot = newSlot;
    },
    _updateDepth$1(parentDepth) {
      var expectedDepth = parentDepth + 1;
      if (A._lateReadCheck(this.__Element__depth, "_depth") < expectedDepth) {
        this.__Element__depth = expectedDepth;
        this.visitChildren$1(new A.Element__updateDepth_closure(expectedDepth));
      }
    },
    detachRenderObject$0() {
      this.visitChildren$1(new A.Element_detachRenderObject_closure());
      this._slot = null;
    },
    attachRenderObject$1(newSlot) {
      this.visitChildren$1(new A.Element_attachRenderObject_closure(newSlot));
      this._slot = newSlot;
    },
    _retakeInactiveElement$2(key, newWidget) {
      var t1, $parent,
        element = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, key);
      if (element == null)
        return null;
      t1 = element._widget;
      t1.toString;
      if (!(A.getRuntimeType(t1) === A.getRuntimeType(newWidget) && J.$eq$(t1.key, newWidget.key)))
        return null;
      $parent = element._parent;
      if ($parent != null) {
        $parent.forgetChild$1(element);
        $parent.deactivateChild$1(element);
      }
      this._owner._inactiveElements._elements.remove$1(0, element);
      return element;
    },
    inflateWidget$2(newWidget, newSlot) {
      var key, newChild, updatedChild, _this = this,
        t1 = $.debugProfileBuildsEnabled;
      if (t1)
        A.Timeline_startSync(A.getRuntimeType(newWidget).toString$0(0), B.Map_9aZ6I, null);
      key = newWidget.key;
      if (key instanceof A.GlobalKey) {
        newChild = _this._retakeInactiveElement$2(key, newWidget);
        if (newChild != null) {
          newChild._parent = _this;
          newChild._updateDepth$1(A._lateReadCheck(_this.__Element__depth, "_depth"));
          newChild.activate$0();
          newChild.visitChildren$1(A.framework_Element__activateRecursively$closure());
          newChild.attachRenderObject$1(newSlot);
          updatedChild = _this.updateChild$3(newChild, newWidget, newSlot);
          updatedChild.toString;
          return updatedChild;
        }
      }
      newChild = newWidget.createElement$0(0);
      newChild.mount$2(_this, newSlot);
      t1 = $.debugProfileBuildsEnabled;
      if (t1)
        A.Timeline_finishSync();
      return newChild;
    },
    deactivateChild$1(child) {
      var t1;
      child._parent = null;
      child.detachRenderObject$0();
      t1 = this._owner._inactiveElements;
      if (child._lifecycleState === B._ElementLifecycle_1) {
        child.deactivate$0();
        child.visitChildren$1(A.framework__InactiveElements__deactivateRecursively$closure());
      }
      t1._elements.add$1(0, child);
    },
    forgetChild$1(child) {
    },
    activate$0() {
      var _this = this,
        t1 = _this._dependencies,
        t2 = t1 == null,
        hadDependencies = !t2 && t1._collection$_length !== 0 || _this._hadUnsatisfiedDependencies;
      _this._lifecycleState = B._ElementLifecycle_1;
      if (!t2)
        t1.clear$0(0);
      _this._hadUnsatisfiedDependencies = false;
      _this._updateInheritance$0();
      if (_this._dirty)
        _this._owner.scheduleBuildFor$1(_this);
      if (hadDependencies)
        _this.didChangeDependencies$0();
    },
    deactivate$0() {
      var t2, t3, _this = this,
        t1 = _this._dependencies;
      if (t1 != null && t1._collection$_length !== 0)
        for (t1 = new A._HashSetIterator(t1, t1._computeElements$0()), t2 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
          t3 = t1._collection$_current;
          (t3 == null ? t2._as(t3) : t3)._dependents.remove$1(0, _this);
        }
      _this._inheritedLookup = null;
      _this._lifecycleState = B._ElementLifecycle_2;
    },
    unmount$0() {
      var _this = this,
        t1 = _this._widget,
        key = t1 == null ? null : t1.key;
      if (key instanceof A.GlobalKey) {
        t1 = _this._owner._globalKeyRegistry;
        if (J.$eq$(t1.$index(0, key), _this))
          t1.remove$1(0, key);
      }
      _this._dependencies = _this._widget = null;
      _this._lifecycleState = B._ElementLifecycle_3;
    },
    dependOnInheritedElement$2$aspect(ancestor, aspect) {
      var t1 = this._dependencies;
      (t1 == null ? this._dependencies = A.HashSet_HashSet(type$.InheritedElement) : t1).add$1(0, ancestor);
      ancestor._dependents.$indexSet(0, this, null);
      t1 = ancestor._widget;
      t1.toString;
      return type$.InheritedWidget._as(t1);
    },
    dependOnInheritedWidgetOfExactType$1$0($T) {
      var t1 = this._inheritedLookup,
        ancestor = t1 == null ? null : t1.$index(0, A.createRuntimeType($T));
      if (ancestor != null)
        return $T._as(this.dependOnInheritedElement$2$aspect(ancestor, null));
      this._hadUnsatisfiedDependencies = true;
      return null;
    },
    _updateInheritance$0() {
      var t1 = this._parent;
      this._inheritedLookup = t1 == null ? null : t1._inheritedLookup;
    },
    findAncestorRenderObjectOfType$1$0($T) {
      var ancestor = this._parent;
      for (; ancestor != null;) {
        if (ancestor instanceof A.RenderObjectElement && $T._is(ancestor.get$renderObject()))
          return $T._as(ancestor.get$renderObject());
        ancestor = ancestor._parent;
      }
      return null;
    },
    visitAncestorElements$1(visitor) {
      var ancestor = this._parent;
      while (true) {
        if (!(ancestor != null && visitor.call$1(ancestor)))
          break;
        ancestor = ancestor._parent;
      }
    },
    didChangeDependencies$0() {
      this.markNeedsBuild$0();
    },
    toStringShort$0() {
      var t1 = this._widget;
      t1 = t1 == null ? null : t1.toStringShort$0();
      return t1 == null ? "<optimized out>#" + A.shortHash(this) + "(DEFUNCT)" : t1;
    },
    toDiagnosticsNode$2$name$style($name, style) {
      return A._ElementDiagnosticableTreeNode$($name, false, style, this);
    },
    toDiagnosticsNode$0() {
      return this.toDiagnosticsNode$2$name$style(null, null);
    },
    debugDescribeChildren$0() {
      var children = A._setArrayType([], type$.JSArray_DiagnosticsNode);
      this.visitChildren$1(new A.Element_debugDescribeChildren_closure(children));
      return children;
    },
    markNeedsBuild$0() {
      var _this = this;
      if (_this._lifecycleState !== B._ElementLifecycle_1)
        return;
      if (_this._dirty)
        return;
      _this._dirty = true;
      _this._owner.scheduleBuildFor$1(_this);
    },
    rebuild$0() {
      if (this._lifecycleState !== B._ElementLifecycle_1 || !this._dirty)
        return;
      this.performRebuild$0();
    },
    $isBuildContext: 1
  };
  A.Element_renderObject_visit.prototype = {
    call$1(element) {
      if (element._lifecycleState === B._ElementLifecycle_3)
        return;
      else if (element instanceof A.RenderObjectElement)
        this._box_0.result = element.get$renderObject();
      else
        element.visitChildren$1(this);
    },
    $signature: 3
  };
  A.Element_updateSlotForChild_visit.prototype = {
    call$1(element) {
      element._updateSlot$1(this.newSlot);
      if (!(element instanceof A.RenderObjectElement))
        element.visitChildren$1(this);
    },
    $signature: 3
  };
  A.Element__updateDepth_closure.prototype = {
    call$1(child) {
      child._updateDepth$1(this.expectedDepth);
    },
    $signature: 3
  };
  A.Element_detachRenderObject_closure.prototype = {
    call$1(child) {
      child.detachRenderObject$0();
    },
    $signature: 3
  };
  A.Element_attachRenderObject_closure.prototype = {
    call$1(child) {
      child.attachRenderObject$1(this.newSlot);
    },
    $signature: 3
  };
  A.Element_debugDescribeChildren_closure.prototype = {
    call$1(child) {
      this.children.push(child.toDiagnosticsNode$0());
    },
    $signature: 3
  };
  A._ElementDiagnosticableTreeNode.prototype = {};
  A.ErrorWidget.prototype = {
    createRenderObject$1(context) {
      var t1 = this.message,
        t2 = new A.RenderErrorBox(t1, A.LayerHandle$());
      t2.get$isRepaintBoundary();
      t2.get$alwaysNeedsCompositing();
      t2.__RenderObject__needsCompositing = false;
      t2.RenderErrorBox$1(t1);
      return t2;
    }
  };
  A.ComponentElement.prototype = {
    mount$2($parent, newSlot) {
      this.super$Element$mount($parent, newSlot);
      this._firstBuild$0();
    },
    _firstBuild$0() {
      this.rebuild$0();
    },
    performRebuild$0() {
      var e, stack, e0, stack0, exception, built0, _this = this, built = null;
      try {
        built = _this.build$0(0);
        _this._widget.toString;
      } catch (exception) {
        e = A.unwrapException(exception);
        stack = A.getTraceFromException(exception);
        built0 = A.ErrorWidget__defaultErrorWidgetBuilder(A._debugReportException(A.ErrorDescription$("building " + _this.toString$0(0)), e, stack, new A.ComponentElement_performRebuild_closure(_this)));
        built = built0;
      } finally {
        _this._dirty = false;
      }
      try {
        _this._framework$_child = _this.updateChild$3(_this._framework$_child, built, _this._slot);
      } catch (exception) {
        e0 = A.unwrapException(exception);
        stack0 = A.getTraceFromException(exception);
        built0 = A.ErrorWidget__defaultErrorWidgetBuilder(A._debugReportException(A.ErrorDescription$("building " + _this.toString$0(0)), e0, stack0, new A.ComponentElement_performRebuild_closure0(_this)));
        built = built0;
        _this._framework$_child = _this.updateChild$3(null, built, _this._slot);
      }
    },
    visitChildren$1(visitor) {
      var t1 = this._framework$_child;
      if (t1 != null)
        visitor.call$1(t1);
    },
    forgetChild$1(child) {
      this._framework$_child = null;
      this.super$Element$forgetChild(child);
    }
  };
  A.ComponentElement_performRebuild_closure.prototype = {
    call$0() {
      var t1 = A._setArrayType([], type$.JSArray_DiagnosticsNode);
      return t1;
    },
    $signature: 9
  };
  A.ComponentElement_performRebuild_closure0.prototype = {
    call$0() {
      var t1 = A._setArrayType([], type$.JSArray_DiagnosticsNode);
      return t1;
    },
    $signature: 9
  };
  A.StatelessElement.prototype = {
    build$0(_) {
      var t1 = this._widget;
      t1.toString;
      return type$.StatelessWidget._as(t1).build$1(0, this);
    },
    update$1(_, newWidget) {
      this.super$Element$update(0, newWidget);
      this._dirty = true;
      this.rebuild$0();
    }
  };
  A.StatefulElement.prototype = {
    build$0(_) {
      return this._framework$_state.build$1(0, this);
    },
    _firstBuild$0() {
      var debugCheckForReturnedFuture, _this = this;
      try {
        _this._debugAllowIgnoredCallsToMarkNeedsBuild = true;
        debugCheckForReturnedFuture = _this._framework$_state.initState$0();
      } finally {
        _this._debugAllowIgnoredCallsToMarkNeedsBuild = false;
      }
      _this._framework$_state.didChangeDependencies$0();
      _this.super$ComponentElement$_firstBuild();
    },
    performRebuild$0() {
      var _this = this;
      if (_this._didChangeDependencies) {
        _this._framework$_state.didChangeDependencies$0();
        _this._didChangeDependencies = false;
      }
      _this.super$ComponentElement$performRebuild();
    },
    update$1(_, newWidget) {
      var oldWidget, debugCheckForReturnedFuture, t1, t2, _this = this;
      _this.super$Element$update(0, newWidget);
      t1 = _this._framework$_state;
      t2 = t1._widget;
      t2.toString;
      oldWidget = t2;
      _this._dirty = true;
      t2 = _this._widget;
      t2.toString;
      t1._widget = type$.StatefulWidget._as(t2);
      try {
        _this._debugAllowIgnoredCallsToMarkNeedsBuild = true;
        debugCheckForReturnedFuture = t1.didUpdateWidget$1(oldWidget);
      } finally {
        _this._debugAllowIgnoredCallsToMarkNeedsBuild = false;
      }
      _this.rebuild$0();
    },
    activate$0() {
      this.super$Element$activate();
      this._framework$_state.activate$0();
      this.markNeedsBuild$0();
    },
    deactivate$0() {
      this._framework$_state.deactivate$0();
      this.super$Element$deactivate();
    },
    unmount$0() {
      var _this = this;
      _this.super$Element$unmount();
      _this._framework$_state.dispose$0(0);
      _this._framework$_state = _this._framework$_state._framework$_element = null;
    },
    dependOnInheritedElement$2$aspect(ancestor, aspect) {
      return this.super$Element$dependOnInheritedElement(ancestor, aspect);
    },
    didChangeDependencies$0() {
      this.super$Element$didChangeDependencies();
      this._didChangeDependencies = true;
    },
    toDiagnosticsNode$2$name$style($name, style) {
      return A._ElementDiagnosticableTreeNode$($name, true, style, this);
    },
    toDiagnosticsNode$0() {
      return this.toDiagnosticsNode$2$name$style(null, null);
    }
  };
  A.ProxyElement.prototype = {
    build$0(_) {
      var t1 = this._widget;
      t1.toString;
      return type$.ProxyWidget._as(t1).child;
    },
    update$1(_, newWidget) {
      var t2, _this = this,
        t1 = _this._widget;
      t1.toString;
      type$.ProxyWidget._as(t1);
      _this.super$Element$update(0, newWidget);
      t2 = _this._widget;
      t2.toString;
      if (type$.InheritedWidget._as(t2).updateShouldNotify$1(t1))
        _this.super$ProxyElement$updated(t1);
      _this._dirty = true;
      _this.rebuild$0();
    },
    updated$1(oldWidget) {
      this.notifyClients$1(oldWidget);
    }
  };
  A.InheritedElement.prototype = {
    _updateInheritance$0() {
      var t2, t3, _this = this,
        t1 = _this._parent;
      t1 = t1 == null ? null : t1._inheritedLookup;
      t2 = A.HashMap_HashMap(type$.Type, type$.InheritedElement);
      t3 = _this._widget;
      t3.toString;
      t2.$indexSet(0, A.getRuntimeType(t3), _this);
      _this._inheritedLookup = new A.InheritedTreeCache(t1, t2);
    },
    notifyClients$1(oldWidget) {
      var t1, t2, t3;
      for (t1 = this._dependents, t1 = new A._HashMapKeyIterator(t1, t1._computeKeys$0()), t2 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
        t3 = t1._collection$_current;
        (t3 == null ? t2._as(t3) : t3).didChangeDependencies$0();
      }
    }
  };
  A.RenderObjectElement.prototype = {
    get$renderObject() {
      var t1 = this._renderObject;
      t1.toString;
      return t1;
    },
    _findAncestorRenderObjectElement$0() {
      var ancestor = this._parent;
      while (true) {
        if (!(ancestor != null && !(ancestor instanceof A.RenderObjectElement)))
          break;
        ancestor = ancestor._parent;
      }
      return type$.nullable_RenderObjectElement._as(ancestor);
    },
    _findAncestorParentDataElement$0() {
      var ancestor, _box_0 = {},
        t1 = _box_0.ancestor = this._parent;
      _box_0.result = null;
      while (true) {
        if (!(t1 != null && !(t1 instanceof A.RenderObjectElement)))
          break;
        ancestor = t1._parent;
        _box_0.ancestor = ancestor;
        t1 = ancestor;
      }
      return _box_0.result;
    },
    mount$2($parent, newSlot) {
      var t1, _this = this;
      _this.super$Element$mount($parent, newSlot);
      t1 = _this._widget;
      t1.toString;
      _this._renderObject = type$.RenderObjectWidget._as(t1).createRenderObject$1(_this);
      _this.attachRenderObject$1(newSlot);
      _this._dirty = false;
    },
    update$1(_, newWidget) {
      this.super$Element$update(0, newWidget);
      this._performRebuild$0();
    },
    performRebuild$0() {
      this._performRebuild$0();
    },
    _performRebuild$0() {
      var _this = this,
        t1 = _this._widget;
      t1.toString;
      type$.RenderObjectWidget._as(t1).updateRenderObject$2(_this, _this.get$renderObject());
      _this._dirty = false;
    },
    updateChildren$3$forgottenChildren(oldChildren, newWidgets, forgottenChildren) {
      var oldChild, newWidget, rti, oldChildrenBottom0, haveOldChildren, oldKeyedChildren, key, t3, t4, _this = this, _null = null,
        replaceWithNullIfForgotten = new A.RenderObjectElement_updateChildren_replaceWithNullIfForgotten(forgottenChildren),
        slotFor = new A.RenderObjectElement_updateChildren_slotFor(_null),
        t1 = newWidgets.length,
        newChildrenBottom = t1 - 1,
        t2 = oldChildren.length,
        oldChildrenBottom = t2 - 1,
        newChildren = t2 === t1 ? oldChildren : A.List_List$filled(t1, $.$get$_NullElement_instance(), false, type$.Element_2),
        previousChild = _null,
        newChildrenTop = 0, oldChildrenTop = 0;
      while (true) {
        if (!(oldChildrenTop <= oldChildrenBottom && newChildrenTop <= newChildrenBottom))
          break;
        oldChild = replaceWithNullIfForgotten.call$1(oldChildren[oldChildrenTop]);
        newWidget = newWidgets[newChildrenTop];
        if (oldChild != null) {
          t1 = oldChild._widget;
          t1.toString;
          rti = t1 instanceof A.Closure ? A.closureFunctionType(t1) : _null;
          t2 = A.createRuntimeType(rti == null ? A.instanceType(t1) : rti);
          rti = newWidget instanceof A.Closure ? A.closureFunctionType(newWidget) : _null;
          t1 = !(t2 === A.createRuntimeType(rti == null ? A.instanceType(newWidget) : rti) && J.$eq$(t1.key, newWidget.key));
        } else
          t1 = true;
        if (t1)
          break;
        t1 = _this.updateChild$3(oldChild, newWidget, slotFor.call$2(newChildrenTop, previousChild));
        t1.toString;
        newChildren[newChildrenTop] = t1;
        ++newChildrenTop;
        ++oldChildrenTop;
        previousChild = t1;
      }
      oldChildrenBottom0 = oldChildrenBottom;
      while (true) {
        haveOldChildren = oldChildrenTop <= oldChildrenBottom0;
        if (!(haveOldChildren && newChildrenTop <= newChildrenBottom))
          break;
        oldChild = replaceWithNullIfForgotten.call$1(oldChildren[oldChildrenBottom0]);
        newWidget = newWidgets[newChildrenBottom];
        if (oldChild != null) {
          t1 = oldChild._widget;
          t1.toString;
          rti = t1 instanceof A.Closure ? A.closureFunctionType(t1) : _null;
          t2 = A.createRuntimeType(rti == null ? A.instanceType(t1) : rti);
          rti = newWidget instanceof A.Closure ? A.closureFunctionType(newWidget) : _null;
          t1 = !(t2 === A.createRuntimeType(rti == null ? A.instanceType(newWidget) : rti) && J.$eq$(t1.key, newWidget.key));
        } else
          t1 = true;
        if (t1)
          break;
        --oldChildrenBottom0;
        --newChildrenBottom;
      }
      if (haveOldChildren) {
        oldKeyedChildren = A.LinkedHashMap_LinkedHashMap$_empty(type$.Key, type$.Element_2);
        for (; oldChildrenTop <= oldChildrenBottom0;) {
          oldChild = replaceWithNullIfForgotten.call$1(oldChildren[oldChildrenTop]);
          if (oldChild != null) {
            t1 = oldChild._widget.key;
            if (t1 != null)
              oldKeyedChildren.$indexSet(0, t1, oldChild);
            else {
              oldChild._parent = null;
              oldChild.detachRenderObject$0();
              t1 = _this._owner._inactiveElements;
              if (oldChild._lifecycleState === B._ElementLifecycle_1) {
                oldChild.deactivate$0();
                oldChild.visitChildren$1(A.framework__InactiveElements__deactivateRecursively$closure());
              }
              t1._elements.add$1(0, oldChild);
            }
          }
          ++oldChildrenTop;
        }
        haveOldChildren = true;
      } else
        oldKeyedChildren = _null;
      for (; newChildrenTop <= newChildrenBottom; previousChild = t1) {
        newWidget = newWidgets[newChildrenTop];
        if (haveOldChildren) {
          key = newWidget.key;
          if (key != null) {
            oldChild = oldKeyedChildren.$index(0, key);
            if (oldChild != null) {
              t1 = oldChild._widget;
              t1.toString;
              rti = t1 instanceof A.Closure ? A.closureFunctionType(t1) : _null;
              t2 = A.createRuntimeType(rti == null ? A.instanceType(t1) : rti);
              rti = newWidget instanceof A.Closure ? A.closureFunctionType(newWidget) : _null;
              if (t2 === A.createRuntimeType(rti == null ? A.instanceType(newWidget) : rti) && J.$eq$(t1.key, key))
                oldKeyedChildren.remove$1(0, key);
              else
                oldChild = _null;
            }
          } else
            oldChild = _null;
        } else
          oldChild = _null;
        t1 = _this.updateChild$3(oldChild, newWidget, slotFor.call$2(newChildrenTop, previousChild));
        t1.toString;
        newChildren[newChildrenTop] = t1;
        ++newChildrenTop;
      }
      newChildrenBottom = newWidgets.length - 1;
      while (true) {
        if (!(oldChildrenTop <= oldChildrenBottom && newChildrenTop <= newChildrenBottom))
          break;
        t1 = _this.updateChild$3(oldChildren[oldChildrenTop], newWidgets[newChildrenTop], slotFor.call$2(newChildrenTop, previousChild));
        t1.toString;
        newChildren[newChildrenTop] = t1;
        ++newChildrenTop;
        ++oldChildrenTop;
        previousChild = t1;
      }
      if (haveOldChildren && oldKeyedChildren._length !== 0)
        for (t1 = oldKeyedChildren.get$values(oldKeyedChildren), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f), t2 = A._instanceType(t1)._rest[1]; t1.moveNext$0();) {
          t3 = t1.__internal$_current;
          if (t3 == null)
            t3 = t2._as(t3);
          if (!forgottenChildren.contains$1(0, t3)) {
            t3._parent = null;
            t3.detachRenderObject$0();
            t4 = _this._owner._inactiveElements;
            if (t3._lifecycleState === B._ElementLifecycle_1) {
              t3.deactivate$0();
              t3.visitChildren$1(A.framework__InactiveElements__deactivateRecursively$closure());
            }
            t4._elements.add$1(0, t3);
          }
        }
      return newChildren;
    },
    deactivate$0() {
      this.super$Element$deactivate();
    },
    unmount$0() {
      var _this = this,
        t1 = _this._widget;
      t1.toString;
      type$.RenderObjectWidget._as(t1);
      _this.super$Element$unmount();
      t1.didUnmountRenderObject$1(_this.get$renderObject());
      _this._renderObject.dispose$0(0);
      _this._renderObject = null;
    },
    _updateSlot$1(newSlot) {
      var t1, _this = this,
        oldSlot = _this._slot;
      _this.super$Element$_updateSlot(newSlot);
      t1 = _this._ancestorRenderObjectElement;
      t1.toString;
      t1.moveRenderObjectChild$3(_this.get$renderObject(), oldSlot, _this._slot);
    },
    attachRenderObject$1(newSlot) {
      var t1, _this = this;
      _this._slot = newSlot;
      t1 = _this._ancestorRenderObjectElement = _this._findAncestorRenderObjectElement$0();
      if (t1 != null)
        t1.insertRenderObjectChild$2(_this.get$renderObject(), newSlot);
      _this._findAncestorParentDataElement$0();
    },
    detachRenderObject$0() {
      var _this = this,
        t1 = _this._ancestorRenderObjectElement;
      if (t1 != null) {
        t1.removeRenderObjectChild$2(_this.get$renderObject(), _this._slot);
        _this._ancestorRenderObjectElement = null;
      }
      _this._slot = null;
    },
    insertRenderObjectChild$2(child, slot) {
    },
    moveRenderObjectChild$3(child, oldSlot, newSlot) {
    },
    removeRenderObjectChild$2(child, slot) {
    }
  };
  A.RenderObjectElement_updateChildren_replaceWithNullIfForgotten.prototype = {
    call$1(child) {
      var t1 = this.forgottenChildren.contains$1(0, child);
      return t1 ? null : child;
    },
    $signature: 216
  };
  A.RenderObjectElement_updateChildren_slotFor.prototype = {
    call$2(newChildIndex, previousChild) {
      return new A.IndexedSlot(previousChild, newChildIndex, type$.IndexedSlot_nullable_Element);
    },
    $signature: 217
  };
  A.RootRenderObjectElement.prototype = {
    mount$2($parent, newSlot) {
      this.super$RenderObjectElement$mount($parent, newSlot);
    }
  };
  A.LeafRenderObjectElement.prototype = {
    forgetChild$1(child) {
      this.super$Element$forgetChild(child);
    },
    insertRenderObjectChild$2(child, slot) {
    },
    moveRenderObjectChild$3(child, oldSlot, newSlot) {
    },
    removeRenderObjectChild$2(child, slot) {
    },
    debugDescribeChildren$0() {
      this._widget.toString;
      return B.List_empty;
    }
  };
  A.SingleChildRenderObjectElement.prototype = {
    visitChildren$1(visitor) {
      var t1 = this._framework$_child;
      if (t1 != null)
        visitor.call$1(t1);
    },
    forgetChild$1(child) {
      this._framework$_child = null;
      this.super$Element$forgetChild(child);
    },
    mount$2($parent, newSlot) {
      var t1, t2, _this = this;
      _this.super$RenderObjectElement$mount($parent, newSlot);
      t1 = _this._framework$_child;
      t2 = _this._widget;
      t2.toString;
      _this._framework$_child = _this.updateChild$3(t1, type$.SingleChildRenderObjectWidget._as(t2).child, null);
    },
    update$1(_, newWidget) {
      var t1, t2, _this = this;
      _this.super$RenderObjectElement$update(0, newWidget);
      t1 = _this._framework$_child;
      t2 = _this._widget;
      t2.toString;
      _this._framework$_child = _this.updateChild$3(t1, type$.SingleChildRenderObjectWidget._as(t2).child, null);
    },
    insertRenderObjectChild$2(child, slot) {
      var t1 = this._renderObject;
      t1.toString;
      type$.RenderObjectWithChildMixin_RenderObject._as(t1).set$child(child);
    },
    moveRenderObjectChild$3(child, oldSlot, newSlot) {
    },
    removeRenderObjectChild$2(child, slot) {
      var t1 = this._renderObject;
      t1.toString;
      type$.RenderObjectWithChildMixin_RenderObject._as(t1).set$child(null);
    }
  };
  A.MultiChildRenderObjectElement.prototype = {
    get$renderObject() {
      return type$.ContainerRenderObjectMixin_of_RenderObject_and_ContainerParentDataMixin_RenderObject._as(A.RenderObjectElement.prototype.get$renderObject.call(this));
    },
    insertRenderObjectChild$2(child, slot) {
      var renderObject = type$.ContainerRenderObjectMixin_of_RenderObject_and_ContainerParentDataMixin_RenderObject._as(A.RenderObjectElement.prototype.get$renderObject.call(this)),
        t1 = slot.value;
      t1 = t1 == null ? null : t1.get$renderObject();
      renderObject.adoptChild$1(child);
      renderObject._insertIntoChildList$2$after(child, t1);
    },
    moveRenderObjectChild$3(child, oldSlot, newSlot) {
      var renderObject = type$.ContainerRenderObjectMixin_of_RenderObject_and_ContainerParentDataMixin_RenderObject._as(A.RenderObjectElement.prototype.get$renderObject.call(this)),
        t1 = newSlot.value;
      renderObject.move$2$after(child, t1 == null ? null : t1.get$renderObject());
    },
    removeRenderObjectChild$2(child, slot) {
      var renderObject = type$.ContainerRenderObjectMixin_of_RenderObject_and_ContainerParentDataMixin_RenderObject._as(A.RenderObjectElement.prototype.get$renderObject.call(this));
      renderObject._removeFromChildList$1(child);
      renderObject.dropChild$1(child);
    },
    visitChildren$1(visitor) {
      var t1, t2, t3, _i, child;
      for (t1 = A._lateReadCheck(this.__MultiChildRenderObjectElement__children, "_children"), t2 = t1.length, t3 = this._forgottenChildren, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        child = t1[_i];
        if (!t3.contains$1(0, child))
          visitor.call$1(child);
      }
    },
    forgetChild$1(child) {
      this._forgottenChildren.add$1(0, child);
      this.super$Element$forgetChild(child);
    },
    inflateWidget$2(newWidget, newSlot) {
      return this.super$Element$inflateWidget(newWidget, newSlot);
    },
    mount$2($parent, newSlot) {
      var t1, t2, children, t3, previousChild, i, newChild, _this = this;
      _this.super$RenderObjectElement$mount($parent, newSlot);
      t1 = _this._widget;
      t1.toString;
      t1 = type$.MultiChildRenderObjectWidget._as(t1).children;
      t2 = t1.length;
      children = A.List_List$filled(t2, $.$get$_NullElement_instance(), false, type$.Element_2);
      for (t3 = type$.IndexedSlot_nullable_Element, previousChild = null, i = 0; i < t2; ++i, previousChild = newChild) {
        newChild = _this.super$Element$inflateWidget(t1[i], new A.IndexedSlot(previousChild, i, t3));
        children[i] = newChild;
      }
      _this.__MultiChildRenderObjectElement__children = children;
    },
    update$1(_, newWidget) {
      var t1, t2, _this = this;
      _this.super$RenderObjectElement$update(0, newWidget);
      t1 = _this._widget;
      t1.toString;
      type$.MultiChildRenderObjectWidget._as(t1);
      t2 = _this._forgottenChildren;
      _this.__MultiChildRenderObjectElement__children = _this.updateChildren$3$forgottenChildren(A._lateReadCheck(_this.__MultiChildRenderObjectElement__children, "_children"), t1.children, t2);
      t2.clear$0(0);
    }
  };
  A.IndexedSlot.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(this))
        return false;
      return other instanceof A.IndexedSlot && this.index === other.index && J.$eq$(this.value, other.value);
    },
    get$hashCode(_) {
      return A.hashValues(this.index, this.value, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    }
  };
  A._NullElement.prototype = {
    performRebuild$0() {
      return A.throwExpression(A.UnimplementedError$(null));
    }
  };
  A._NullWidget0.prototype = {
    createElement$0(_) {
      return A.throwExpression(A.UnimplementedError$(null));
    }
  };
  A._State_Object_Diagnosticable.prototype = {};
  A.GestureRecognizerFactory.prototype = {};
  A.GestureRecognizerFactoryWithHandlers.prototype = {};
  A.GestureDetector.prototype = {
    build$1(_, context) {
      var t1, _this = this,
        gestures = A.LinkedHashMap_LinkedHashMap$_empty(type$.Type, type$.GestureRecognizerFactory_GestureRecognizer);
      if (_this.onTapDown == null)
        if (_this.onTapUp == null)
          if (_this.onTap == null)
            if (_this.onTapCancel == null)
              t1 = false;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        gestures.$indexSet(0, B.Type_TapGestureRecognizer_62h, new A.GestureRecognizerFactoryWithHandlers(new A.GestureDetector_build_closure(_this), new A.GestureDetector_build_closure0(_this), type$.GestureRecognizerFactoryWithHandlers_TapGestureRecognizer));
      if (_this.onDoubleTap != null)
        gestures.$indexSet(0, B.Type_DoubleTapGestureRecognizer_oyU, new A.GestureRecognizerFactoryWithHandlers(new A.GestureDetector_build_closure1(_this), new A.GestureDetector_build_closure2(_this), type$.GestureRecognizerFactoryWithHandlers_DoubleTapGestureRecognizer));
      if (_this.onLongPress == null)
        t1 = false;
      else
        t1 = true;
      if (t1)
        gestures.$indexSet(0, B.Type_LongPressGestureRecognizer_46y, new A.GestureRecognizerFactoryWithHandlers(new A.GestureDetector_build_closure3(_this), new A.GestureDetector_build_closure4(_this), type$.GestureRecognizerFactoryWithHandlers_LongPressGestureRecognizer));
      return new A.RawGestureDetector(_this.child, gestures, _this.behavior, true, null);
    }
  };
  A.GestureDetector_build_closure.prototype = {
    call$0() {
      var t1 = type$.int,
        t2 = A.HashSet_HashSet(t1);
      return new A.TapGestureRecognizer(B.Duration_100000, 18, B.GestureRecognizerState_0, A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.GestureArenaEntry), t2, this.$this, null, A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.PointerDeviceKind));
    },
    $signature: 218
  };
  A.GestureDetector_build_closure0.prototype = {
    call$1(instance) {
      var t1 = this.$this;
      instance.onTapDown = t1.onTapDown;
      instance.onTapUp = t1.onTapUp;
      instance.onTap = t1.onTap;
      instance.onTapCancel = t1.onTapCancel;
      instance.onTertiaryTapCancel = instance.onTertiaryTapUp = instance.onTertiaryTapDown = instance.onSecondaryTapCancel = instance.onSecondaryTapUp = instance.onSecondaryTapDown = instance.onSecondaryTap = null;
    },
    $signature: 219
  };
  A.GestureDetector_build_closure1.prototype = {
    call$0() {
      var t1 = type$.int;
      return new A.DoubleTapGestureRecognizer(A.LinkedHashMap_LinkedHashMap$_empty(t1, type$._TapTracker), this.$this, null, A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.PointerDeviceKind));
    },
    $signature: 220
  };
  A.GestureDetector_build_closure2.prototype = {
    call$1(instance) {
      instance.onDoubleTapDown = null;
      instance.onDoubleTap = this.$this.onDoubleTap;
      instance.onDoubleTapCancel = null;
    },
    $signature: 221
  };
  A.GestureDetector_build_closure3.prototype = {
    call$0() {
      var t1 = type$.int,
        t2 = A.HashSet_HashSet(t1);
      return new A.LongPressGestureRecognizer(B.Duration_500000, null, B.GestureRecognizerState_0, A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.GestureArenaEntry), t2, this.$this, null, A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.PointerDeviceKind));
    },
    $signature: 222
  };
  A.GestureDetector_build_closure4.prototype = {
    call$1(instance) {
      instance.onLongPressCancel = instance.onLongPressDown = null;
      instance.onLongPress = this.$this.onLongPress;
      instance.onTertiaryLongPressEnd = instance.onTertiaryLongPressUp = instance.onTertiaryLongPressMoveUpdate = instance.onTertiaryLongPressStart = instance.onTertiaryLongPress = instance.onTertiaryLongPressCancel = instance.onTertiaryLongPressDown = instance.onSecondaryLongPressEnd = instance.onSecondaryLongPressUp = instance.onSecondaryLongPressMoveUpdate = instance.onSecondaryLongPressStart = instance.onSecondaryLongPress = instance.onSecondaryLongPressCancel = instance.onSecondaryLongPressDown = instance.onLongPressEnd = instance.onLongPressUp = instance.onLongPressMoveUpdate = instance.onLongPressStart = null;
    },
    $signature: 223
  };
  A.RawGestureDetector.prototype = {
    createState$0() {
      return new A.RawGestureDetectorState(B.Map_empty0, B._StateLifecycle_0);
    }
  };
  A.RawGestureDetectorState.prototype = {
    initState$0() {
      var t1, _this = this;
      _this.super$State$initState();
      t1 = _this._widget;
      t1.toString;
      _this._gesture_detector$_semantics = new A._DefaultSemanticsGestureDelegate(_this);
      _this._syncAll$1(t1.gestures);
    },
    didUpdateWidget$1(oldWidget) {
      var t1;
      this.super$State$didUpdateWidget(oldWidget);
      t1 = this._widget;
      this._syncAll$1(t1.gestures);
    },
    dispose$0(_) {
      var t1;
      for (t1 = this._recognizers, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();)
        t1.get$current(t1).dispose$0(0);
      this._recognizers = null;
      this.super$State$dispose(0);
    },
    _syncAll$1(gestures) {
      var t2, t3, t4, t5, _this = this,
        t1 = _this._recognizers;
      t1.toString;
      _this._recognizers = A.LinkedHashMap_LinkedHashMap$_empty(type$.Type, type$.GestureRecognizer);
      for (t2 = A.LinkedHashMapKeyIterator$(gestures, gestures._modifications); t2.moveNext$0();) {
        t3 = t2.__js_helper$_current;
        t4 = _this._recognizers;
        t4.toString;
        t5 = t1.$index(0, t3);
        t4.$indexSet(0, t3, t5 == null ? gestures.$index(0, t3)._constructor.call$0() : t5);
        t4 = gestures.$index(0, t3);
        t4.toString;
        t3 = _this._recognizers.$index(0, t3);
        t3.toString;
        t4._initializer.call$1(t3);
      }
      for (t2 = t1.get$keys(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        t3 = t2.get$current(t2);
        if (!_this._recognizers.containsKey$1(0, t3))
          t1.$index(0, t3).dispose$0(0);
      }
    },
    _handlePointerDown$1($event) {
      var t1, t2;
      for (t1 = this._recognizers, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t2 = t1.get$current(t1);
        t2._pointerToKind.$indexSet(0, $event.get$pointer(), $event.get$kind($event));
        if (t2.isPointerAllowed$1($event))
          t2.addAllowedPointer$1($event);
        else
          t2.handleNonAllowedPointer$1($event);
      }
    },
    build$1(_, context) {
      var t1 = this._widget,
        t2 = t1.behavior;
      t1 = t1.child;
      return new A.Listener(this.get$_handlePointerDown(), t2, t1, null);
    }
  };
  A.SemanticsGestureDelegate.prototype = {
    toString$0(_) {
      return "SemanticsGestureDelegate()";
    }
  };
  A._DefaultSemanticsGestureDelegate.prototype = {};
  A.IconTheme.prototype = {
    updateShouldNotify$1(oldWidget) {
      return !this.data.$eq(0, oldWidget.data);
    }
  };
  A.IconTheme_merge_closure.prototype = {
    call$1(context) {
      var iconTheme = context.dependOnInheritedWidgetOfExactType$1$0(type$.IconTheme),
        t1 = iconTheme == null ? null : iconTheme.data;
      if (t1 == null)
        t1 = B.IconThemeData_UfZ1;
      return A.IconTheme$(this.child, t1.merge$1(this.data), this.key);
    },
    $signature: 225
  };
  A.IconThemeData.prototype = {
    copyWith$4$color$opacity$shadows$size(color, opacity, shadows, size) {
      var _this = this,
        t1 = color == null ? _this.color : color,
        t2 = opacity == null ? _this.get$opacity(_this) : opacity,
        t3 = size == null ? _this.size : size;
      return new A.IconThemeData(t1, t2, t3, _this.shadows);
    },
    copyWith$1$color(color) {
      return this.copyWith$4$color$opacity$shadows$size(color, null, null, null);
    },
    merge$1(other) {
      return this.copyWith$4$color$opacity$shadows$size(other.color, other.get$opacity(other), other.shadows, other.size);
    },
    get$opacity(_) {
      var t1 = this._opacity;
      return t1 == null ? null : B.JSNumber_methods.clamp$2(t1, 0, 1);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      return other instanceof A.IconThemeData && J.$eq$(other.color, _this.color) && other.get$opacity(other) == _this.get$opacity(_this) && other.size == _this.size && A.listEquals0(other.shadows, _this.shadows);
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.color, _this.get$opacity(_this), _this.size, A.hashList(_this.shadows), B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    }
  };
  A._IconThemeData_Object_Diagnosticable.prototype = {};
  A.BoxConstraintsTween.prototype = {
    lerp$1(t) {
      var t1 = A.BoxConstraints_lerp(this.begin, this.end, t);
      t1.toString;
      return t1;
    }
  };
  A.DecorationTween.prototype = {
    lerp$1(t) {
      var t1 = A.Decoration_lerp(this.begin, this.end, t);
      t1.toString;
      return t1;
    }
  };
  A.EdgeInsetsGeometryTween.prototype = {
    lerp$1(t) {
      var t1 = A.EdgeInsetsGeometry_lerp(this.begin, this.end, t);
      t1.toString;
      return t1;
    }
  };
  A.BorderRadiusTween.prototype = {
    lerp$1(t) {
      return A.BorderRadius_lerp(this.begin, this.end, t);
    }
  };
  A.Matrix4Tween.prototype = {
    lerp$1(t) {
      var t1, lerpTranslation, t2, t3, lerpRotation, lerpScale, x, y, z, w, x2, y2, z2, xx, xy, xz, yy, yz, zz, wx, wy, wz, arg0Storage,
        beginTranslation = new A.Vector3(new Float64Array(3)),
        endTranslation = new A.Vector3(new Float64Array(3)),
        beginRotation = A.Quaternion_Quaternion$identity(),
        endRotation = A.Quaternion_Quaternion$identity(),
        beginScale = new A.Vector3(new Float64Array(3)),
        endScale = new A.Vector3(new Float64Array(3));
      this.begin.decompose$3(beginTranslation, beginRotation, beginScale);
      this.end.decompose$3(endTranslation, endRotation, endScale);
      t1 = 1 - t;
      lerpTranslation = beginTranslation.scaled$1(t1).$add(0, endTranslation.scaled$1(t));
      t2 = beginRotation.scaled$1(t1).$add(0, endRotation.scaled$1(t));
      t3 = new Float64Array(4);
      lerpRotation = new A.Quaternion(t3);
      lerpRotation.setFrom$1(t2);
      lerpRotation.normalize$0(0);
      lerpScale = beginScale.scaled$1(t1).$add(0, endScale.scaled$1(t));
      t1 = new Float64Array(16);
      t2 = new A.Matrix4(t1);
      x = t3[0];
      y = t3[1];
      z = t3[2];
      w = t3[3];
      x2 = x + x;
      y2 = y + y;
      z2 = z + z;
      xx = x * x2;
      xy = x * y2;
      xz = x * z2;
      yy = y * y2;
      yz = y * z2;
      zz = z * z2;
      wx = w * x2;
      wy = w * y2;
      wz = w * z2;
      arg0Storage = lerpTranslation._v3storage;
      t1[0] = 1 - (yy + zz);
      t1[1] = xy + wz;
      t1[2] = xz - wy;
      t1[3] = 0;
      t1[4] = xy - wz;
      t1[5] = 1 - (xx + zz);
      t1[6] = yz + wx;
      t1[7] = 0;
      t1[8] = xz + wy;
      t1[9] = yz - wx;
      t1[10] = 1 - (xx + yy);
      t1[11] = 0;
      t1[12] = arg0Storage[0];
      t1[13] = arg0Storage[1];
      t1[14] = arg0Storage[2];
      t1[15] = 1;
      t2.scale$1(0, lerpScale);
      return t2;
    }
  };
  A.TextStyleTween.prototype = {
    lerp$1(t) {
      var t1 = A.TextStyle_lerp(this.begin, this.end, t);
      t1.toString;
      return t1;
    }
  };
  A.ImplicitlyAnimatedWidget.prototype = {};
  A.ImplicitlyAnimatedWidgetState.prototype = {
    get$_controller() {
      var t1, result, _this = this,
        value = _this.__ImplicitlyAnimatedWidgetState__controller;
      if (value === $) {
        t1 = _this._widget.duration;
        result = A.AnimationController$(null, t1, _this);
        A._lateInitializeOnceCheck(_this.__ImplicitlyAnimatedWidgetState__controller, "_controller");
        _this.__ImplicitlyAnimatedWidgetState__controller = result;
        value = result;
      }
      return value;
    },
    get$_animation() {
      var t1, _this = this,
        value = _this.__ImplicitlyAnimatedWidgetState__animation;
      if (value === $) {
        t1 = _this.get$_controller();
        value = _this.__ImplicitlyAnimatedWidgetState__animation = A.CurvedAnimation$(_this._widget.curve, t1);
      }
      return value;
    },
    initState$0() {
      var _this = this;
      _this.super$State$initState();
      _this.get$_controller().addStatusListener$1(new A.ImplicitlyAnimatedWidgetState_initState_closure(_this));
      _this._constructTweens$0();
    },
    didUpdateWidget$1(oldWidget) {
      var t1, _this = this;
      _this.super$State$didUpdateWidget(oldWidget);
      if (_this._widget.curve !== oldWidget.curve) {
        _this.get$_animation().dispose$0(0);
        t1 = _this.get$_controller();
        _this.__ImplicitlyAnimatedWidgetState__animation = A.CurvedAnimation$(_this._widget.curve, t1);
      }
      _this.get$_controller().duration = _this._widget.duration;
      if (_this._constructTweens$0()) {
        _this.forEachTween$1(new A.ImplicitlyAnimatedWidgetState_didUpdateWidget_closure(_this));
        t1 = _this.get$_controller();
        t1.set$value(0, 0);
        t1.forward$0(0);
      }
    },
    dispose$0(_) {
      this.get$_animation().dispose$0(0);
      this.get$_controller().dispose$0(0);
      this.super$_ImplicitlyAnimatedWidgetState_State_SingleTickerProviderStateMixin$dispose(0);
    },
    _updateTween$2(tween, targetValue) {
      var t1;
      if (tween == null)
        return;
      t1 = this.get$_animation();
      tween.begin = tween.transform$1(0, t1.get$value(t1));
      tween.end = targetValue;
    },
    _constructTweens$0() {
      var t1 = {};
      t1.shouldStartAnimation = false;
      this.forEachTween$1(new A.ImplicitlyAnimatedWidgetState__constructTweens_closure(t1, this));
      return t1.shouldStartAnimation;
    }
  };
  A.ImplicitlyAnimatedWidgetState_initState_closure.prototype = {
    call$1($status) {
      switch ($status.index) {
        case 3:
          this.$this._widget.toString;
          break;
        case 0:
        case 1:
        case 2:
          break;
      }
    },
    $signature: 27
  };
  A.ImplicitlyAnimatedWidgetState_didUpdateWidget_closure.prototype = {
    call$3(tween, targetValue, $constructor) {
      this.$this._updateTween$2(tween, targetValue);
      return tween;
    },
    $signature: 73
  };
  A.ImplicitlyAnimatedWidgetState__constructTweens_closure.prototype = {
    call$3(tween, targetValue, $constructor) {
      var t1;
      if (targetValue != null) {
        if (tween == null)
          tween = $constructor.call$1(targetValue);
        t1 = tween.end;
        if (!J.$eq$(targetValue, t1 == null ? tween.begin : t1))
          this._box_0.shouldStartAnimation = true;
      } else
        tween = null;
      return tween;
    },
    $signature: 73
  };
  A.AnimatedWidgetBaseState.prototype = {
    initState$0() {
      this.super$ImplicitlyAnimatedWidgetState$initState();
      var t1 = this.get$_controller();
      t1.didRegisterListener$0();
      t1 = t1.AnimationLocalListenersMixin__listeners;
      t1._isDirty = true;
      t1._list.push(this.get$_handleAnimationChanged());
    },
    _handleAnimationChanged$0() {
      this.setState$1(new A.AnimatedWidgetBaseState__handleAnimationChanged_closure());
    }
  };
  A.AnimatedWidgetBaseState__handleAnimationChanged_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A.AnimatedContainer.prototype = {
    createState$0() {
      return new A._AnimatedContainerState(null, null, B._StateLifecycle_0);
    }
  };
  A._AnimatedContainerState.prototype = {
    forEachTween$1(visitor) {
      var t2, t3, _this = this, _null = null,
        t1 = _this._alignment;
      _this._widget.toString;
      t2 = type$.nullable_AlignmentGeometryTween;
      _this._alignment = t2._as(visitor.call$3(t1, _null, new A._AnimatedContainerState_forEachTween_closure()));
      t1 = _this._implicit_animations$_padding;
      _this._widget.toString;
      t3 = type$.nullable_EdgeInsetsGeometryTween;
      _this._implicit_animations$_padding = t3._as(visitor.call$3(t1, _null, new A._AnimatedContainerState_forEachTween_closure0()));
      t1 = type$.nullable_DecorationTween;
      _this._implicit_animations$_decoration = t1._as(visitor.call$3(_this._implicit_animations$_decoration, _this._widget.decoration, new A._AnimatedContainerState_forEachTween_closure1()));
      _this._foregroundDecoration = t1._as(visitor.call$3(_this._foregroundDecoration, _this._widget.foregroundDecoration, new A._AnimatedContainerState_forEachTween_closure2()));
      _this._constraints = type$.nullable_BoxConstraintsTween._as(visitor.call$3(_this._constraints, _this._widget.constraints, new A._AnimatedContainerState_forEachTween_closure3()));
      t1 = _this._margin;
      _this._widget.toString;
      _this._margin = t3._as(visitor.call$3(t1, _null, new A._AnimatedContainerState_forEachTween_closure4()));
      t1 = _this._transform;
      _this._widget.toString;
      _this._transform = type$.nullable_Matrix4Tween._as(visitor.call$3(t1, _null, new A._AnimatedContainerState_forEachTween_closure5()));
      t1 = _this._transformAlignment;
      _this._widget.toString;
      _this._transformAlignment = t2._as(visitor.call$3(t1, _null, new A._AnimatedContainerState_forEachTween_closure6()));
    },
    build$1(_, context) {
      var t2, t3, t4, t5, t6, t7, t8, _this = this, _null = null,
        animation = _this.get$_animation(),
        t1 = _this._alignment;
      t1 = t1 == null ? _null : t1.transform$1(0, animation.get$value(animation));
      t2 = _this._implicit_animations$_padding;
      t2 = t2 == null ? _null : t2.transform$1(0, animation.get$value(animation));
      t3 = _this._implicit_animations$_decoration;
      t3 = t3 == null ? _null : t3.transform$1(0, animation.get$value(animation));
      t4 = _this._foregroundDecoration;
      t4 = t4 == null ? _null : t4.transform$1(0, animation.get$value(animation));
      t5 = _this._constraints;
      t5 = t5 == null ? _null : t5.transform$1(0, animation.get$value(animation));
      t6 = _this._margin;
      t6 = t6 == null ? _null : t6.transform$1(0, animation.get$value(animation));
      t7 = _this._transform;
      t7 = t7 == null ? _null : t7.transform$1(0, animation.get$value(animation));
      t8 = _this._transformAlignment;
      t8 = t8 == null ? _null : t8.transform$1(0, animation.get$value(animation));
      return A.Container$(t1, _this._widget.child, B.Clip_0, t5, t3, t4, t6, t2, t7, t8);
    }
  };
  A._AnimatedContainerState_forEachTween_closure.prototype = {
    call$1(value) {
      return new A.AlignmentGeometryTween(type$.AlignmentGeometry._as(value), null);
    },
    $signature: 74
  };
  A._AnimatedContainerState_forEachTween_closure0.prototype = {
    call$1(value) {
      return new A.EdgeInsetsGeometryTween(type$.EdgeInsetsGeometry._as(value), null);
    },
    $signature: 75
  };
  A._AnimatedContainerState_forEachTween_closure1.prototype = {
    call$1(value) {
      return new A.DecorationTween(type$.Decoration._as(value), null);
    },
    $signature: 76
  };
  A._AnimatedContainerState_forEachTween_closure2.prototype = {
    call$1(value) {
      return new A.DecorationTween(type$.Decoration._as(value), null);
    },
    $signature: 76
  };
  A._AnimatedContainerState_forEachTween_closure3.prototype = {
    call$1(value) {
      return new A.BoxConstraintsTween(type$.BoxConstraints._as(value), null);
    },
    $signature: 230
  };
  A._AnimatedContainerState_forEachTween_closure4.prototype = {
    call$1(value) {
      return new A.EdgeInsetsGeometryTween(type$.EdgeInsetsGeometry._as(value), null);
    },
    $signature: 75
  };
  A._AnimatedContainerState_forEachTween_closure5.prototype = {
    call$1(value) {
      return new A.Matrix4Tween(type$.Matrix4._as(value), null);
    },
    $signature: 231
  };
  A._AnimatedContainerState_forEachTween_closure6.prototype = {
    call$1(value) {
      return new A.AlignmentGeometryTween(type$.AlignmentGeometry._as(value), null);
    },
    $signature: 74
  };
  A.AnimatedDefaultTextStyle.prototype = {
    createState$0() {
      return new A._AnimatedDefaultTextStyleState(null, null, B._StateLifecycle_0);
    }
  };
  A._AnimatedDefaultTextStyleState.prototype = {
    forEachTween$1(visitor) {
      this._implicit_animations$_style = type$.nullable_TextStyleTween._as(visitor.call$3(this._implicit_animations$_style, this._widget.style, new A._AnimatedDefaultTextStyleState_forEachTween_closure()));
    },
    build$1(_, context) {
      var t2,
        t1 = this._implicit_animations$_style;
      t1.toString;
      t2 = this.get$_animation();
      t2 = t1.transform$1(0, t2.get$value(t2));
      return A.DefaultTextStyle$(this._widget.child, null, B.TextOverflow_0, true, t2, null, null, B.TextWidthBasis_0);
    }
  };
  A._AnimatedDefaultTextStyleState_forEachTween_closure.prototype = {
    call$1(value) {
      return new A.TextStyleTween(type$.TextStyle._as(value), null);
    },
    $signature: 232
  };
  A.AnimatedPhysicalModel.prototype = {
    createState$0() {
      return new A._AnimatedPhysicalModelState(null, null, B._StateLifecycle_0);
    }
  };
  A._AnimatedPhysicalModelState.prototype = {
    forEachTween$1(visitor) {
      var _this = this,
        t1 = _this._borderRadius;
      _this._widget.toString;
      _this._borderRadius = type$.nullable_BorderRadiusTween._as(visitor.call$3(t1, B.BorderRadius_tLn, new A._AnimatedPhysicalModelState_forEachTween_closure()));
      _this._elevation = type$.nullable_Tween_double._as(visitor.call$3(_this._elevation, _this._widget.elevation, new A._AnimatedPhysicalModelState_forEachTween_closure0()));
      t1 = type$.nullable_ColorTween;
      _this._implicit_animations$_color = t1._as(visitor.call$3(_this._implicit_animations$_color, _this._widget.color, new A._AnimatedPhysicalModelState_forEachTween_closure1()));
      _this._shadowColor = t1._as(visitor.call$3(_this._shadowColor, _this._widget.shadowColor, new A._AnimatedPhysicalModelState_forEachTween_closure2()));
    },
    build$1(_, context) {
      var t3, t4, t5, t6, t7, _this = this,
        t1 = _this._widget,
        t2 = t1.shape;
      t1 = t1.clipBehavior;
      t3 = _this._borderRadius;
      t3.toString;
      t4 = _this.get$_animation();
      t4 = t3.transform$1(0, t4.get$value(t4));
      t3 = _this._elevation;
      t3.toString;
      t5 = _this.get$_animation();
      t5 = t3.transform$1(0, t5.get$value(t5));
      t3 = _this._widget.color;
      t6 = _this._shadowColor;
      t6.toString;
      t7 = _this.get$_animation();
      t7 = t6.transform$1(0, t7.get$value(t7));
      t7.toString;
      return new A.PhysicalModel(t2, t1, t4, t5, t3, t7, _this._widget.child, null);
    }
  };
  A._AnimatedPhysicalModelState_forEachTween_closure.prototype = {
    call$1(value) {
      return new A.BorderRadiusTween(type$.BorderRadius._as(value), null);
    },
    $signature: 233
  };
  A._AnimatedPhysicalModelState_forEachTween_closure0.prototype = {
    call$1(value) {
      return new A.Tween(A._asDouble(value), null, type$.Tween_double);
    },
    $signature: 234
  };
  A._AnimatedPhysicalModelState_forEachTween_closure1.prototype = {
    call$1(value) {
      return new A.ColorTween(type$.Color._as(value), null);
    },
    $signature: 77
  };
  A._AnimatedPhysicalModelState_forEachTween_closure2.prototype = {
    call$1(value) {
      return new A.ColorTween(type$.Color._as(value), null);
    },
    $signature: 77
  };
  A._ImplicitlyAnimatedWidgetState_State_SingleTickerProviderStateMixin.prototype = {
    dispose$0(_) {
      var _this = this,
        t1 = _this.SingleTickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTicker());
      _this.SingleTickerProviderStateMixin__tickerModeNotifier = null;
      _this.super$State$dispose(0);
    },
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTicker$0();
    }
  };
  A.InheritedNotifier.prototype = {
    updateShouldNotify$1(oldWidget) {
      return oldWidget.notifier !== this.notifier;
    },
    createElement$0(_) {
      var t1 = new A._InheritedNotifierElement(A.HashMap_HashMap(type$.Element_2, type$.nullable_Object), this, B._ElementLifecycle_0, A._instanceType(this)._eval$1("_InheritedNotifierElement<InheritedNotifier.T>"));
      this.notifier.addListener$1(0, t1.get$_handleUpdate());
      return t1;
    }
  };
  A._InheritedNotifierElement.prototype = {
    update$1(_, newWidget) {
      var oldNotifier, newNotifier, _this = this,
        t1 = _this._widget;
      t1.toString;
      oldNotifier = _this.$ti._eval$1("InheritedNotifier<1>")._as(t1).notifier;
      newNotifier = newWidget.notifier;
      if (oldNotifier !== newNotifier) {
        t1 = _this.get$_handleUpdate();
        oldNotifier.removeListener$1(0, t1);
        newNotifier.addListener$1(0, t1);
      }
      _this.super$ProxyElement$update(0, newWidget);
    },
    build$0(_) {
      var t1, _this = this;
      if (_this._inherited_notifier$_dirty) {
        t1 = _this._widget;
        t1.toString;
        _this.super$InheritedElement$notifyClients(_this.$ti._eval$1("InheritedNotifier<1>")._as(t1));
        _this._inherited_notifier$_dirty = false;
      }
      return _this.super$ProxyElement$build(0);
    },
    _handleUpdate$0() {
      this._inherited_notifier$_dirty = true;
      this.markNeedsBuild$0();
    },
    notifyClients$1(oldWidget) {
      this.super$InheritedElement$notifyClients(oldWidget);
      this._inherited_notifier$_dirty = false;
    },
    unmount$0() {
      var _this = this,
        t1 = _this._widget;
      t1.toString;
      _this.$ti._eval$1("InheritedNotifier<1>")._as(t1).notifier.removeListener$1(0, _this.get$_handleUpdate());
      _this.super$Element$unmount();
    }
  };
  A.InheritedTheme.prototype = {};
  A.MediaQueryData.prototype = {
    copyWith$2$platformBrightness$textScaleFactor(platformBrightness, textScaleFactor) {
      var _this = this,
        t1 = textScaleFactor == null ? _this.textScaleFactor : textScaleFactor;
      return A.MediaQueryData$(_this.accessibleNavigation, false, _this.boldText, _this.devicePixelRatio, _this.disableAnimations, _this.displayFeatures, _this.gestureSettings, _this.highContrast, _this.invertColors, _this.navigationMode, _this.padding, _this.platformBrightness, _this.size, _this.systemGestureInsets, t1, _this.viewInsets, _this.viewPadding);
    },
    copyWith$1$textScaleFactor(textScaleFactor) {
      return this.copyWith$2$platformBrightness$textScaleFactor(null, textScaleFactor);
    },
    copyWith$1$platformBrightness(platformBrightness) {
      return this.copyWith$2$platformBrightness$textScaleFactor(platformBrightness, null);
    },
    removePadding$4$removeBottom$removeLeft$removeRight$removeTop(removeBottom, removeLeft, removeRight, removeTop) {
      var _this = this, _null = null,
        t1 = _this.padding,
        t2 = t1.copyWith$4$bottom$left$right$top(_null, 0, 0, _null),
        t3 = _this.viewPadding,
        t4 = Math.max(0, t3.left - t1.left);
      t1 = Math.max(0, t3.right - t1.right);
      return A.MediaQueryData$(_this.accessibleNavigation, false, _this.boldText, _this.devicePixelRatio, _this.disableAnimations, _this.displayFeatures, _this.gestureSettings, _this.highContrast, _this.invertColors, B.NavigationMode_0, t2, _this.platformBrightness, _this.size, B.EdgeInsets_0_0_0_0, _this.textScaleFactor, _this.viewInsets, t3.copyWith$4$bottom$left$right$top(_null, t4, t1, _null));
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeType(_this))
        return false;
      if (other instanceof A.MediaQueryData)
        if (other.size.$eq(0, _this.size))
          if (other.devicePixelRatio === _this.devicePixelRatio)
            if (other.textScaleFactor === _this.textScaleFactor)
              if (other.platformBrightness === _this.platformBrightness)
                if (other.padding.$eq(0, _this.padding))
                  if (other.viewPadding.$eq(0, _this.viewPadding))
                    if (other.viewInsets.$eq(0, _this.viewInsets))
                      t1 = other.highContrast === _this.highContrast && other.disableAnimations === _this.disableAnimations && other.invertColors === _this.invertColors && other.accessibleNavigation === _this.accessibleNavigation && other.boldText === _this.boldText && other.navigationMode === _this.navigationMode && other.gestureSettings.$eq(0, _this.gestureSettings) && A.listEquals0(other.displayFeatures, _this.displayFeatures);
                    else
                      t1 = false;
                  else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var _this = this;
      return A.hashValues(_this.size, _this.devicePixelRatio, _this.textScaleFactor, _this.platformBrightness, _this.padding, _this.viewPadding, _this.viewInsets, false, _this.highContrast, _this.disableAnimations, _this.invertColors, _this.accessibleNavigation, _this.boldText, _this.navigationMode, _this.gestureSettings, A.hashList(_this.displayFeatures), B.C__HashEnd, B.C__HashEnd, B.C__HashEnd, B.C__HashEnd);
    },
    toString$0(_) {
      var _this = this;
      return "MediaQueryData(" + B.JSArray_methods.join$1(A._setArrayType(["size: " + _this.size.toString$0(0), "devicePixelRatio: " + B.JSNumber_methods.toStringAsFixed$1(_this.devicePixelRatio, 1), "textScaleFactor: " + B.JSNumber_methods.toStringAsFixed$1(_this.textScaleFactor, 1), "platformBrightness: " + _this.platformBrightness.toString$0(0), "padding: " + _this.padding.toString$0(0), "viewPadding: " + _this.viewPadding.toString$0(0), "viewInsets: " + _this.viewInsets.toString$0(0), "alwaysUse24HourFormat: false", "accessibleNavigation: " + _this.accessibleNavigation, "highContrast: " + _this.highContrast, "disableAnimations: " + _this.disableAnimations, "invertColors: " + _this.invertColors, "boldText: " + _this.boldText, "navigationMode: " + _this.navigationMode._name, "gestureSettings: " + _this.gestureSettings.toString$0(0), "displayFeatures: " + A.S(_this.displayFeatures)], type$.JSArray_String), ", ") + ")";
    }
  };
  A.MediaQuery.prototype = {
    updateShouldNotify$1(oldWidget) {
      return !this.data.$eq(0, oldWidget.data);
    }
  };
  A.NavigationMode.prototype = {
    toString$0(_) {
      return "NavigationMode." + this._name;
    }
  };
  A._MediaQueryFromWindow.prototype = {
    createState$0() {
      return new A._MediaQueryFromWindowState(B._StateLifecycle_0);
    }
  };
  A._MediaQueryFromWindowState.prototype = {
    initState$0() {
      this.super$State$initState();
      $.WidgetsBinding__instance.WidgetsBinding__observers.push(this);
    },
    didChangeMetrics$0() {
      this.setState$1(new A._MediaQueryFromWindowState_didChangeMetrics_closure());
    },
    didChangeTextScaleFactor$0() {
      this.setState$1(new A._MediaQueryFromWindowState_didChangeTextScaleFactor_closure());
    },
    didChangePlatformBrightness$0() {
      this.setState$1(new A._MediaQueryFromWindowState_didChangePlatformBrightness_closure());
    },
    build$1(_, context) {
      var t1, t2, t3, t4, t5, t6, t7, t8, data;
      $.WidgetsBinding__instance.toString;
      t1 = $.$get$window();
      t2 = t1.get$physicalSize();
      t3 = t1._debugDevicePixelRatio;
      t2 = t2.$div(0, t3 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t3);
      t3 = t1._debugDevicePixelRatio;
      if (t3 == null)
        t3 = A.EnginePlatformDispatcher_browserDevicePixelRatio();
      t4 = t1.platformDispatcher._configuration;
      t1.get$viewConfiguration();
      t5 = t1._debugDevicePixelRatio;
      t5 = A.EdgeInsets$fromWindowPadding(B.WindowPadding_0_0_0_0, t5 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t5);
      t1.get$viewConfiguration();
      t6 = t1._debugDevicePixelRatio;
      t6 = A.EdgeInsets$fromWindowPadding(B.WindowPadding_0_0_0_0, t6 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t6);
      t7 = t1._viewInsets;
      t8 = t1._debugDevicePixelRatio;
      t7 = A.EdgeInsets$fromWindowPadding(t7, t8 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t8);
      t1.get$viewConfiguration();
      t8 = t1._debugDevicePixelRatio;
      t8 = A.EdgeInsets$fromWindowPadding(B.WindowPadding_0_0_0_0, t8 == null ? A.EnginePlatformDispatcher_browserDevicePixelRatio() : t8);
      t1.get$viewConfiguration();
      t1.get$viewConfiguration();
      data = new A.MediaQueryData(t2, t3, t4.textScaleFactor, t4.platformBrightness, t7, t5, t6, t8, false, false, false, false, false, false, B.NavigationMode_0, new A.DeviceGestureSettings(null), B.List_empty3).copyWith$1$platformBrightness($.debugBrightnessOverride);
      return new A.MediaQuery(data, this._widget.child, null);
    },
    dispose$0(_) {
      B.JSArray_methods.remove$1($.WidgetsBinding__instance.WidgetsBinding__observers, this);
      this.super$State$dispose(0);
    }
  };
  A._MediaQueryFromWindowState_didChangeMetrics_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A._MediaQueryFromWindowState_didChangeTextScaleFactor_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A._MediaQueryFromWindowState_didChangePlatformBrightness_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A.__MediaQueryFromWindowState_State_WidgetsBindingObserver.prototype = {};
  A.Notification0.prototype = {
    visitAncestor$1(element) {
      var t1;
      if (element instanceof A.StatelessElement) {
        t1 = element._widget;
        t1.toString;
        if (t1 instanceof A.NotificationListener)
          if (t1._dispatch$2(this, element))
            return false;
      }
      return true;
    },
    toString$0(_) {
      return "Notification(" + B.JSArray_methods.join$1(A._setArrayType([], type$.JSArray_String), ", ") + ")";
    }
  };
  A.NotificationListener.prototype = {
    _dispatch$2(notification, element) {
      if (this.$ti._precomputed1._is(notification))
        return this.onNotification.call$1(notification);
      return false;
    },
    build$1(_, context) {
      return this.child;
    }
  };
  A.SafeArea.prototype = {
    build$1(_, context) {
      var t2, t3, t4, t5,
        t1 = type$.MediaQuery,
        padding = context.dependOnInheritedWidgetOfExactType$1$0(t1).data.padding;
      padding.bottom === 0;
      t2 = this.minimum;
      t3 = Math.max(padding.left, t2.left);
      t4 = Math.max(0, t2.top);
      t5 = Math.max(padding.right, t2.right);
      return new A.Padding(new A.EdgeInsets(t3, t4, t5, Math.max(0, t2.bottom)), new A.MediaQuery(context.dependOnInheritedWidgetOfExactType$1$0(t1).data.removePadding$4$removeBottom$removeLeft$removeRight$removeTop(false, true, true, false), this.child, null), null);
    }
  };
  A.SlottedMultiChildRenderObjectWidgetMixin.prototype = {
    createElement$0(_) {
      var t1 = A._instanceType(this);
      return new A.SlottedRenderObjectElement(A.LinkedHashMap_LinkedHashMap$_empty(t1._eval$1("SlottedMultiChildRenderObjectWidgetMixin.S"), type$.Element_2), this, B._ElementLifecycle_0, t1._eval$1("SlottedRenderObjectElement<SlottedMultiChildRenderObjectWidgetMixin.S>"));
    }
  };
  A.SlottedContainerRenderObjectMixin.prototype = {
    debugNameForSlot$1(slot) {
      if (type$.Enum._is(slot))
        return slot._name;
      return J.toString$0$(slot);
    },
    redepthChildren$0() {
      B.JSArray_methods.forEach$1(this.get$children(this), this.get$redepthChild());
    },
    visitChildren$1(visitor) {
      B.JSArray_methods.forEach$1(this.get$children(this), visitor);
    },
    debugDescribeChildren$0() {
      var _i, child, t4, _this = this, _null = null,
        value = A._setArrayType([], type$.JSArray_DiagnosticsNode),
        t1 = _this.SlottedContainerRenderObjectMixin__slotToChild,
        t2 = t1.get$values(t1),
        t3 = A._instanceType(_this)._eval$1("SlottedContainerRenderObjectMixin.S"),
        map = A.LinkedHashMap_LinkedHashMap(_null, _null, type$.RenderBox, t3);
      A.MapBase__fillMapWithIterables(map, t2, new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>")));
      for (t1 = _this.get$children(_this), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        child = t1[_i];
        t4 = map.$index(0, child);
        value.push(new A.DiagnosticableTreeNode(child, _this.debugNameForSlot$1(t4 == null ? t3._as(t4) : t4), true, true, _null, _null));
      }
      return value;
    },
    _setChild$2(child, slot) {
      var t1 = this.SlottedContainerRenderObjectMixin__slotToChild,
        oldChild = t1.$index(0, slot);
      if (oldChild != null) {
        this.dropChild$1(oldChild);
        t1.remove$1(0, slot);
      }
      if (child != null) {
        t1.$indexSet(0, slot, child);
        this.adoptChild$1(child);
      }
    }
  };
  A.SlottedRenderObjectElement.prototype = {
    get$renderObject() {
      return this.$ti._eval$1("SlottedContainerRenderObjectMixin<1>")._as(A.RenderObjectElement.prototype.get$renderObject.call(this));
    },
    visitChildren$1(visitor) {
      var t1 = this._slotToChild;
      t1.get$values(t1).forEach$1(0, visitor);
    },
    forgetChild$1(child) {
      this._slotToChild.remove$1(0, child._slot);
      this.super$Element$forgetChild(child);
    },
    mount$2($parent, newSlot) {
      this.super$RenderObjectElement$mount($parent, newSlot);
      this._updateChildren$0();
    },
    update$1(_, newWidget) {
      this.super$RenderObjectElement$update(0, newWidget);
      this._updateChildren$0();
    },
    _updateChildren$0() {
      var t2, _i, slot, t3, oldChild, newChild, _this = this,
        t1 = _this._widget;
      t1.toString;
      _this.$ti._eval$1("SlottedMultiChildRenderObjectWidgetMixin<1>")._as(t1);
      for (t2 = _this._slotToChild, _i = 0; _i < 4; ++_i) {
        slot = B.List_ml5[_i];
        t3 = t1.childForSlot$1(slot);
        oldChild = t2.$index(0, slot);
        newChild = _this.updateChild$3(oldChild, t3, slot);
        if (oldChild != null)
          t2.remove$1(0, slot);
        if (newChild != null)
          t2.$indexSet(0, slot, newChild);
      }
    },
    insertRenderObjectChild$2(child, slot) {
      this.$ti._eval$1("SlottedContainerRenderObjectMixin<1>")._as(A.RenderObjectElement.prototype.get$renderObject.call(this))._setChild$2(child, slot);
    },
    removeRenderObjectChild$2(child, slot) {
      this.$ti._eval$1("SlottedContainerRenderObjectMixin<1>")._as(A.RenderObjectElement.prototype.get$renderObject.call(this))._setChild$2(null, slot);
    },
    moveRenderObjectChild$3(child, oldSlot, newSlot) {
    }
  };
  A.DefaultTextStyle.prototype = {
    updateShouldNotify$1(oldWidget) {
      var t1;
      if (this.style.$eq(0, oldWidget.style))
        if (this.overflow === oldWidget.overflow)
          t1 = this.textWidthBasis !== oldWidget.textWidthBasis || false;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    }
  };
  A._NullWidget1.prototype = {
    build$1(_, context) {
      throw A.wrapException(A.FlutterError_FlutterError("A DefaultTextStyle constructed with DefaultTextStyle.fallback cannot be incorporated into the widget tree, it is meant only to provide a fallback value returned by DefaultTextStyle.of() when no enclosing default text style is present in a BuildContext."));
    }
  };
  A.Text.prototype = {
    build$1(_, context) {
      var effectiveTextStyle, t2, t3, t4, t5, _null = null,
        t1 = context.dependOnInheritedWidgetOfExactType$1$0(type$.DefaultTextStyle);
      if (t1 == null)
        t1 = B.DefaultTextStyle_40S;
      effectiveTextStyle = t1.style.merge$1(_null);
      t2 = A.MediaQuery_maybeOf(context);
      t2 = t2 == null ? _null : t2.boldText;
      if (t2 === true)
        effectiveTextStyle = effectiveTextStyle.merge$1(B.TextStyle_oqK);
      t2 = A.MediaQuery_maybeOf(context);
      t2 = t2 == null ? _null : t2.textScaleFactor;
      if (t2 == null)
        t2 = 1;
      t3 = context.dependOnInheritedWidgetOfExactType$1$0(type$.DefaultTextHeightBehavior);
      t3 = t3 == null ? _null : t3.get$textHeightBehavior(t3);
      t4 = A.TextSpan$(_null, effectiveTextStyle, this.data);
      t5 = A.RichText__extractChildren(t4);
      return new A.RichText(t4, B.TextAlign_4, _null, true, t1.overflow, t2, t1.maxLines, _null, _null, t1.textWidthBasis, t3, t5, _null);
    }
  };
  A.SingleTickerProviderStateMixin.prototype = {
    createTicker$1(onTick) {
      var t1, _this = this;
      _this.SingleTickerProviderStateMixin__ticker = new A.Ticker(onTick, null);
      _this._updateTickerModeNotifier$0();
      _this._updateTicker$0();
      t1 = _this.SingleTickerProviderStateMixin__ticker;
      t1.toString;
      return t1;
    },
    _updateTicker$0() {
      var t1 = this.SingleTickerProviderStateMixin__ticker;
      if (t1 != null) {
        this.SingleTickerProviderStateMixin__tickerModeNotifier.toString;
        t1.set$muted(0, false);
      }
    },
    _updateTickerModeNotifier$0() {
      var newNotifier, _this = this,
        t1 = _this._framework$_element;
      t1.toString;
      newNotifier = A.TickerMode_getNotifier(t1);
      t1 = _this.SingleTickerProviderStateMixin__tickerModeNotifier;
      if (newNotifier === t1)
        return;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTicker());
      newNotifier.addListener$1(0, _this.get$_updateTicker());
      _this.SingleTickerProviderStateMixin__tickerModeNotifier = newNotifier;
    }
  };
  A.TickerProviderStateMixin.prototype = {
    createTicker$1(onTick) {
      var result, _this = this;
      if (_this.TickerProviderStateMixin__tickerModeNotifier == null)
        _this._updateTickerModeNotifier$0();
      if (_this.TickerProviderStateMixin__tickers == null)
        _this.TickerProviderStateMixin__tickers = A.LinkedHashSet_LinkedHashSet$_empty(type$._WidgetTicker);
      result = new A._WidgetTicker(_this, onTick, null);
      _this.TickerProviderStateMixin__tickerModeNotifier.toString;
      result.set$muted(0, false);
      _this.TickerProviderStateMixin__tickers.add$1(0, result);
      return result;
    },
    _updateTickers$0() {
      var t2, t3,
        t1 = this.TickerProviderStateMixin__tickers;
      if (t1 != null) {
        this.TickerProviderStateMixin__tickerModeNotifier.toString;
        for (t1 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications), t2 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
          t3 = t1._collection$_current;
          (t3 == null ? t2._as(t3) : t3).set$muted(0, false);
        }
      }
    },
    _updateTickerModeNotifier$0() {
      var newNotifier, _this = this,
        t1 = _this._framework$_element;
      t1.toString;
      newNotifier = A.TickerMode_getNotifier(t1);
      t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (newNotifier === t1)
        return;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTickers());
      newNotifier.addListener$1(0, _this.get$_updateTickers());
      _this.TickerProviderStateMixin__tickerModeNotifier = newNotifier;
    }
  };
  A._WidgetTicker.prototype = {
    dispose$0(_) {
      this._creator.TickerProviderStateMixin__tickers.remove$1(0, this);
      this.super$Ticker$dispose(0);
    }
  };
  A.TypedDataBuffer.prototype = {
    get$length(_) {
      return this._typed_buffer$_length;
    },
    $index(_, index) {
      if (index >= this._typed_buffer$_length)
        throw A.wrapException(A.IndexError$(index, this, null, null, null));
      return this._typed_buffer$_buffer[index];
    },
    $indexSet(_, index, value) {
      if (index >= this._typed_buffer$_length)
        throw A.wrapException(A.IndexError$(index, this, null, null, null));
      this._typed_buffer$_buffer[index] = value;
    },
    set$length(_, newLength) {
      var t2, i, newBuffer, _this = this,
        t1 = _this._typed_buffer$_length;
      if (newLength < t1)
        for (t2 = _this._typed_buffer$_buffer, i = newLength; i < t1; ++i)
          t2[i] = 0;
      else {
        t1 = _this._typed_buffer$_buffer.length;
        if (newLength > t1) {
          if (t1 === 0)
            newBuffer = new Uint8Array(newLength);
          else
            newBuffer = _this._typed_buffer$_createBiggerBuffer$1(newLength);
          B.NativeUint8List_methods.setRange$3(newBuffer, 0, _this._typed_buffer$_length, _this._typed_buffer$_buffer);
          _this._typed_buffer$_buffer = newBuffer;
        }
      }
      _this._typed_buffer$_length = newLength;
    },
    _typed_buffer$_add$1(_, value) {
      var _this = this,
        t1 = _this._typed_buffer$_length,
        t2 = _this._typed_buffer$_buffer;
      if (t1 === t2.length) {
        t2 = _this._typed_buffer$_createBiggerBuffer$1(null);
        B.NativeUint8List_methods.setRange$3(t2, 0, t1, _this._typed_buffer$_buffer);
        _this._typed_buffer$_buffer = t2;
        t1 = t2;
      } else
        t1 = t2;
      t1[_this._typed_buffer$_length++] = value;
    },
    add$1(_, value) {
      var _this = this,
        t1 = _this._typed_buffer$_length,
        t2 = _this._typed_buffer$_buffer;
      if (t1 === t2.length) {
        t2 = _this._typed_buffer$_createBiggerBuffer$1(null);
        B.NativeUint8List_methods.setRange$3(t2, 0, t1, _this._typed_buffer$_buffer);
        _this._typed_buffer$_buffer = t2;
        t1 = t2;
      } else
        t1 = t2;
      t1[_this._typed_buffer$_length++] = value;
    },
    addAll$3(_, values, start, end) {
      A.RangeError_checkNotNegative(start, "start");
      if (end != null && start > end)
        throw A.wrapException(A.RangeError$range(end, start, null, "end", null));
      this._typed_buffer$_addAll$3(values, start, end);
    },
    addAll$1($receiver, values) {
      return this.addAll$3($receiver, values, 0, null);
    },
    _typed_buffer$_addAll$3(values, start, end) {
      var t2, valuesLength, newLength, i, value, _this = this,
        _s16_ = "Too few elements",
        t1 = type$.List_dynamic._is(values);
      if (t1)
        end = end == null ? values.length : end;
      if (end != null) {
        t2 = _this._typed_buffer$_length;
        if (t1) {
          t1 = values.length;
          if (start > t1 || end > t1)
            A.throwExpression(A.StateError$(_s16_));
        }
        valuesLength = end - start;
        newLength = t2 + valuesLength;
        _this._typed_buffer$_ensureCapacity$1(newLength);
        t1 = _this._typed_buffer$_buffer;
        B.NativeUint8List_methods.setRange$4(t1, newLength, _this._typed_buffer$_length + valuesLength, t1, t2);
        B.NativeUint8List_methods.setRange$4(_this._typed_buffer$_buffer, t2, newLength, values, start);
        _this._typed_buffer$_length = newLength;
        return;
      }
      for (t1 = J.get$iterator$ax(values), i = 0; t1.moveNext$0();) {
        value = t1.get$current(t1);
        if (i >= start)
          _this._typed_buffer$_add$1(0, value);
        ++i;
      }
      if (i < start)
        throw A.wrapException(A.StateError$(_s16_));
    },
    _typed_buffer$_ensureCapacity$1(requiredCapacity) {
      var newBuffer, _this = this;
      if (requiredCapacity <= _this._typed_buffer$_buffer.length)
        return;
      newBuffer = _this._typed_buffer$_createBiggerBuffer$1(requiredCapacity);
      B.NativeUint8List_methods.setRange$3(newBuffer, 0, _this._typed_buffer$_length, _this._typed_buffer$_buffer);
      _this._typed_buffer$_buffer = newBuffer;
    },
    _typed_buffer$_createBiggerBuffer$1(requiredCapacity) {
      var newLength = this._typed_buffer$_buffer.length * 2;
      if (requiredCapacity != null && newLength < requiredCapacity)
        newLength = requiredCapacity;
      else if (newLength < 8)
        newLength = 8;
      return new Uint8Array(newLength);
    },
    setRange$4(_, start, end, source, skipCount) {
      var t1 = this._typed_buffer$_length;
      if (end > t1)
        throw A.wrapException(A.RangeError$range(end, 0, t1, null, null));
      t1 = this._typed_buffer$_buffer;
      if (A._instanceType(this)._eval$1("TypedDataBuffer<TypedDataBuffer.E>")._is(source))
        B.NativeUint8List_methods.setRange$4(t1, start, end, source._typed_buffer$_buffer, skipCount);
      else
        B.NativeUint8List_methods.setRange$4(t1, start, end, source, skipCount);
    },
    setRange$3($receiver, start, end, source) {
      return this.setRange$4($receiver, start, end, source, 0);
    }
  };
  A._IntBuffer0.prototype = {};
  A.Uint8Buffer0.prototype = {};
  A.Matrix3.prototype = {
    setFrom$1(arg) {
      var argStorage = arg._m3storage,
        t1 = this._m3storage;
      t1[8] = argStorage[8];
      t1[7] = argStorage[7];
      t1[6] = argStorage[6];
      t1[5] = argStorage[5];
      t1[4] = argStorage[4];
      t1[3] = argStorage[3];
      t1[2] = argStorage[2];
      t1[1] = argStorage[1];
      t1[0] = argStorage[0];
    },
    toString$0(_) {
      return "[0] " + this.getRow$1(0).toString$0(0) + "\n[1] " + this.getRow$1(1).toString$0(0) + "\n[2] " + this.getRow$1(2).toString$0(0) + "\n";
    },
    $index(_, i) {
      return this._m3storage[i];
    },
    $eq(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      if (other instanceof A.Matrix3) {
        t1 = this._m3storage;
        t2 = t1[0];
        t3 = other._m3storage;
        t1 = t2 === t3[0] && t1[1] === t3[1] && t1[2] === t3[2] && t1[3] === t3[3] && t1[4] === t3[4] && t1[5] === t3[5] && t1[6] === t3[6] && t1[7] === t3[7] && t1[8] === t3[8];
      } else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      return A.Object_hashAll(this._m3storage);
    },
    getRow$1(row) {
      var t1 = new Float64Array(3),
        t2 = this._m3storage;
      t1[0] = t2[row];
      t1[1] = t2[3 + row];
      t1[2] = t2[6 + row];
      return new A.Vector3(t1);
    },
    $mul(_, arg) {
      var t1 = new Float64Array(9),
        t2 = new A.Matrix3(t1);
      t2.setFrom$1(this);
      t1[0] = t1[0] * arg;
      t1[1] = t1[1] * arg;
      t1[2] = t1[2] * arg;
      t1[3] = t1[3] * arg;
      t1[4] = t1[4] * arg;
      t1[5] = t1[5] * arg;
      t1[6] = t1[6] * arg;
      t1[7] = t1[7] * arg;
      t1[8] = t1[8] * arg;
      return t2;
    },
    $add(_, arg) {
      var oStorage,
        t1 = new Float64Array(9),
        t2 = new A.Matrix3(t1);
      t2.setFrom$1(this);
      oStorage = arg._m3storage;
      t1[0] = t1[0] + oStorage[0];
      t1[1] = t1[1] + oStorage[1];
      t1[2] = t1[2] + oStorage[2];
      t1[3] = t1[3] + oStorage[3];
      t1[4] = t1[4] + oStorage[4];
      t1[5] = t1[5] + oStorage[5];
      t1[6] = t1[6] + oStorage[6];
      t1[7] = t1[7] + oStorage[7];
      t1[8] = t1[8] + oStorage[8];
      return t2;
    },
    $sub(_, arg) {
      var oStorage,
        t1 = new Float64Array(9),
        t2 = new A.Matrix3(t1);
      t2.setFrom$1(this);
      oStorage = arg._m3storage;
      t1[0] = t1[0] - oStorage[0];
      t1[1] = t1[1] - oStorage[1];
      t1[2] = t1[2] - oStorage[2];
      t1[3] = t1[3] - oStorage[3];
      t1[4] = t1[4] - oStorage[4];
      t1[5] = t1[5] - oStorage[5];
      t1[6] = t1[6] - oStorage[6];
      t1[7] = t1[7] - oStorage[7];
      t1[8] = t1[8] - oStorage[8];
      return t2;
    }
  };
  A.Matrix4.prototype = {
    setFrom$1(arg) {
      var argStorage = arg._m4storage,
        t1 = this._m4storage;
      t1[15] = argStorage[15];
      t1[14] = argStorage[14];
      t1[13] = argStorage[13];
      t1[12] = argStorage[12];
      t1[11] = argStorage[11];
      t1[10] = argStorage[10];
      t1[9] = argStorage[9];
      t1[8] = argStorage[8];
      t1[7] = argStorage[7];
      t1[6] = argStorage[6];
      t1[5] = argStorage[5];
      t1[4] = argStorage[4];
      t1[3] = argStorage[3];
      t1[2] = argStorage[2];
      t1[1] = argStorage[1];
      t1[0] = argStorage[0];
    },
    toString$0(_) {
      var _this = this;
      return "[0] " + _this.getRow$1(0).toString$0(0) + "\n[1] " + _this.getRow$1(1).toString$0(0) + "\n[2] " + _this.getRow$1(2).toString$0(0) + "\n[3] " + _this.getRow$1(3).toString$0(0) + "\n";
    },
    $index(_, i) {
      return this._m4storage[i];
    },
    $eq(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      if (other instanceof A.Matrix4) {
        t1 = this._m4storage;
        t2 = t1[0];
        t3 = other._m4storage;
        t1 = t2 === t3[0] && t1[1] === t3[1] && t1[2] === t3[2] && t1[3] === t3[3] && t1[4] === t3[4] && t1[5] === t3[5] && t1[6] === t3[6] && t1[7] === t3[7] && t1[8] === t3[8] && t1[9] === t3[9] && t1[10] === t3[10] && t1[11] === t3[11] && t1[12] === t3[12] && t1[13] === t3[13] && t1[14] === t3[14] && t1[15] === t3[15];
      } else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      return A.Object_hashAll(this._m4storage);
    },
    getRow$1(row) {
      var t1 = new Float64Array(4),
        t2 = this._m4storage;
      t1[0] = t2[row];
      t1[1] = t2[4 + row];
      t1[2] = t2[8 + row];
      t1[3] = t2[12 + row];
      return new A.Vector4(t1);
    },
    $mul(_, arg) {
      var t1 = new A.Matrix4(new Float64Array(16));
      t1.setFrom$1(this);
      t1.scale$3(0, arg, null, null);
      return t1;
    },
    $add(_, arg) {
      var oStorage,
        t1 = new Float64Array(16),
        t2 = new A.Matrix4(t1);
      t2.setFrom$1(this);
      oStorage = arg._m4storage;
      t1[0] = t1[0] + oStorage[0];
      t1[1] = t1[1] + oStorage[1];
      t1[2] = t1[2] + oStorage[2];
      t1[3] = t1[3] + oStorage[3];
      t1[4] = t1[4] + oStorage[4];
      t1[5] = t1[5] + oStorage[5];
      t1[6] = t1[6] + oStorage[6];
      t1[7] = t1[7] + oStorage[7];
      t1[8] = t1[8] + oStorage[8];
      t1[9] = t1[9] + oStorage[9];
      t1[10] = t1[10] + oStorage[10];
      t1[11] = t1[11] + oStorage[11];
      t1[12] = t1[12] + oStorage[12];
      t1[13] = t1[13] + oStorage[13];
      t1[14] = t1[14] + oStorage[14];
      t1[15] = t1[15] + oStorage[15];
      return t2;
    },
    $sub(_, arg) {
      var oStorage,
        t1 = new Float64Array(16),
        t2 = new A.Matrix4(t1);
      t2.setFrom$1(this);
      oStorage = arg._m4storage;
      t1[0] = t1[0] - oStorage[0];
      t1[1] = t1[1] - oStorage[1];
      t1[2] = t1[2] - oStorage[2];
      t1[3] = t1[3] - oStorage[3];
      t1[4] = t1[4] - oStorage[4];
      t1[5] = t1[5] - oStorage[5];
      t1[6] = t1[6] - oStorage[6];
      t1[7] = t1[7] - oStorage[7];
      t1[8] = t1[8] - oStorage[8];
      t1[9] = t1[9] - oStorage[9];
      t1[10] = t1[10] - oStorage[10];
      t1[11] = t1[11] - oStorage[11];
      t1[12] = t1[12] - oStorage[12];
      t1[13] = t1[13] - oStorage[13];
      t1[14] = t1[14] - oStorage[14];
      t1[15] = t1[15] - oStorage[15];
      return t2;
    },
    translate$2(_, x, y) {
      var t1 = this._m4storage,
        t2 = t1[0],
        t3 = t1[4],
        t4 = t1[8],
        t5 = t1[12],
        t6 = t1[1],
        t7 = t1[5],
        t8 = t1[9],
        t9 = t1[13],
        t10 = t1[2],
        t11 = t1[6],
        t12 = t1[10],
        t13 = t1[14],
        t14 = t1[3],
        t15 = t1[7],
        t16 = t1[11],
        t17 = t1[15];
      t1[12] = t2 * x + t3 * y + t4 * 0 + t5;
      t1[13] = t6 * x + t7 * y + t8 * 0 + t9;
      t1[14] = t10 * x + t11 * y + t12 * 0 + t13;
      t1[15] = t14 * x + t15 * y + t16 * 0 + t17;
    },
    scale$3(_, x, y, z) {
      var t1, sx, sy, sz;
      if (x instanceof A.Vector3) {
        t1 = x._v3storage;
        sx = t1[0];
        sy = t1[1];
        sz = t1[2];
      } else {
        if (typeof x == "number")
          sy = y == null ? x : y;
        else
          throw A.wrapException(A.UnimplementedError$(null));
        sz = x;
        sx = sz;
      }
      t1 = this._m4storage;
      t1[0] = t1[0] * sx;
      t1[1] = t1[1] * sx;
      t1[2] = t1[2] * sx;
      t1[3] = t1[3] * sx;
      t1[4] = t1[4] * sy;
      t1[5] = t1[5] * sy;
      t1[6] = t1[6] * sy;
      t1[7] = t1[7] * sy;
      t1[8] = t1[8] * sz;
      t1[9] = t1[9] * sz;
      t1[10] = t1[10] * sz;
      t1[11] = t1[11] * sz;
      t1[12] = t1[12];
      t1[13] = t1[13];
      t1[14] = t1[14];
      t1[15] = t1[15];
    },
    scale$1($receiver, x) {
      return this.scale$3($receiver, x, null, null);
    },
    setIdentity$0() {
      var t1 = this._m4storage;
      t1[0] = 1;
      t1[1] = 0;
      t1[2] = 0;
      t1[3] = 0;
      t1[4] = 0;
      t1[5] = 1;
      t1[6] = 0;
      t1[7] = 0;
      t1[8] = 0;
      t1[9] = 0;
      t1[10] = 1;
      t1[11] = 0;
      t1[12] = 0;
      t1[13] = 0;
      t1[14] = 0;
      t1[15] = 1;
    },
    copyInverse$1(arg) {
      var invDet, t1, t2, t3,
        argStorage = arg._m4storage,
        a00 = argStorage[0],
        a01 = argStorage[1],
        a02 = argStorage[2],
        a03 = argStorage[3],
        a10 = argStorage[4],
        a11 = argStorage[5],
        a12 = argStorage[6],
        a13 = argStorage[7],
        a20 = argStorage[8],
        a21 = argStorage[9],
        a22 = argStorage[10],
        a23 = argStorage[11],
        a30 = argStorage[12],
        a31 = argStorage[13],
        a32 = argStorage[14],
        a33 = argStorage[15],
        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
      if (det === 0) {
        this.setFrom$1(arg);
        return 0;
      }
      invDet = 1 / det;
      t1 = this._m4storage;
      t1[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
      t1[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
      t1[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
      t1[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
      t2 = -a10;
      t1[4] = (t2 * b11 + a12 * b08 - a13 * b07) * invDet;
      t1[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
      t3 = -a30;
      t1[6] = (t3 * b05 + a32 * b02 - a33 * b01) * invDet;
      t1[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
      t1[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
      t1[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
      t1[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
      t1[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
      t1[12] = (t2 * b09 + a11 * b07 - a12 * b06) * invDet;
      t1[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
      t1[14] = (t3 * b03 + a31 * b01 - a32 * b00) * invDet;
      t1[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
      return det;
    },
    multiply$1(_, arg) {
      var t1 = this._m4storage,
        m00 = t1[0],
        m01 = t1[4],
        m02 = t1[8],
        m03 = t1[12],
        m10 = t1[1],
        m11 = t1[5],
        m12 = t1[9],
        m13 = t1[13],
        m20 = t1[2],
        m21 = t1[6],
        m22 = t1[10],
        m23 = t1[14],
        m30 = t1[3],
        m31 = t1[7],
        m32 = t1[11],
        m33 = t1[15],
        argStorage = arg._m4storage,
        n00 = argStorage[0],
        n01 = argStorage[4],
        n02 = argStorage[8],
        n03 = argStorage[12],
        n10 = argStorage[1],
        n11 = argStorage[5],
        n12 = argStorage[9],
        n13 = argStorage[13],
        n20 = argStorage[2],
        n21 = argStorage[6],
        n22 = argStorage[10],
        n23 = argStorage[14],
        n30 = argStorage[3],
        n31 = argStorage[7],
        n32 = argStorage[11],
        n33 = argStorage[15];
      t1[0] = m00 * n00 + m01 * n10 + m02 * n20 + m03 * n30;
      t1[4] = m00 * n01 + m01 * n11 + m02 * n21 + m03 * n31;
      t1[8] = m00 * n02 + m01 * n12 + m02 * n22 + m03 * n32;
      t1[12] = m00 * n03 + m01 * n13 + m02 * n23 + m03 * n33;
      t1[1] = m10 * n00 + m11 * n10 + m12 * n20 + m13 * n30;
      t1[5] = m10 * n01 + m11 * n11 + m12 * n21 + m13 * n31;
      t1[9] = m10 * n02 + m11 * n12 + m12 * n22 + m13 * n32;
      t1[13] = m10 * n03 + m11 * n13 + m12 * n23 + m13 * n33;
      t1[2] = m20 * n00 + m21 * n10 + m22 * n20 + m23 * n30;
      t1[6] = m20 * n01 + m21 * n11 + m22 * n21 + m23 * n31;
      t1[10] = m20 * n02 + m21 * n12 + m22 * n22 + m23 * n32;
      t1[14] = m20 * n03 + m21 * n13 + m22 * n23 + m23 * n33;
      t1[3] = m30 * n00 + m31 * n10 + m32 * n20 + m33 * n30;
      t1[7] = m30 * n01 + m31 * n11 + m32 * n21 + m33 * n31;
      t1[11] = m30 * n02 + m31 * n12 + m32 * n22 + m33 * n32;
      t1[15] = m30 * n03 + m31 * n13 + m32 * n23 + m33 * n33;
    },
    multiplied$1(arg) {
      var t1 = new A.Matrix4(new Float64Array(16));
      t1.setFrom$1(this);
      t1.multiply$1(0, arg);
      return t1;
    },
    decompose$3(translation, rotation, scale) {
      var t1, sx, sy, sz, t2, t3, t4, t5, det2_01_01, t6, t7, det2_01_02, t8, t9, det2_01_03, det2_01_12, det2_01_13, det2_01_23, invSX, invSY, invSZ, m, r, rStorage, t, s, i, j, k,
        v = $.Matrix4__decomposeV;
      if (v == null)
        v = $.Matrix4__decomposeV = new A.Vector3(new Float64Array(3));
      t1 = this._m4storage;
      v.setValues$3(t1[0], t1[1], t1[2]);
      sx = Math.sqrt(v.get$length2());
      v.setValues$3(t1[4], t1[5], t1[6]);
      sy = Math.sqrt(v.get$length2());
      v.setValues$3(t1[8], t1[9], t1[10]);
      sz = Math.sqrt(v.get$length2());
      t2 = t1[0];
      t3 = t1[5];
      t4 = t1[1];
      t5 = t1[4];
      det2_01_01 = t2 * t3 - t4 * t5;
      t6 = t1[6];
      t7 = t1[2];
      det2_01_02 = t2 * t6 - t7 * t5;
      t8 = t1[7];
      t9 = t1[3];
      det2_01_03 = t2 * t8 - t9 * t5;
      det2_01_12 = t4 * t6 - t7 * t3;
      det2_01_13 = t4 * t8 - t9 * t3;
      det2_01_23 = t7 * t8 - t9 * t6;
      t6 = t1[8];
      t9 = t1[9];
      t8 = t1[10];
      t7 = t1[11];
      t3 = t1[12];
      if (-(t9 * det2_01_23 - t8 * det2_01_13 + t7 * det2_01_12) * t3 + (t6 * det2_01_23 - t8 * det2_01_03 + t7 * det2_01_02) * t1[13] - (t6 * det2_01_13 - t9 * det2_01_03 + t7 * det2_01_01) * t1[14] + (t6 * det2_01_12 - t9 * det2_01_02 + t8 * det2_01_01) * t1[15] < 0)
        sx = -sx;
      t2 = translation._v3storage;
      t2[0] = t3;
      t2[1] = t1[13];
      t2[2] = t1[14];
      invSX = 1 / sx;
      invSY = 1 / sy;
      invSZ = 1 / sz;
      m = $.Matrix4__decomposeM;
      if (m == null)
        m = $.Matrix4__decomposeM = new A.Matrix4(new Float64Array(16));
      m.setFrom$1(this);
      t1 = m._m4storage;
      t1[0] = t1[0] * invSX;
      t1[1] = t1[1] * invSX;
      t1[2] = t1[2] * invSX;
      t1[4] = t1[4] * invSY;
      t1[5] = t1[5] * invSY;
      t1[6] = t1[6] * invSY;
      t1[8] = t1[8] * invSZ;
      t1[9] = t1[9] * invSZ;
      t1[10] = t1[10] * invSZ;
      r = $.Matrix4__decomposeR;
      if (r == null)
        r = $.Matrix4__decomposeR = new A.Matrix3(new Float64Array(9));
      rStorage = r._m3storage;
      rStorage[0] = t1[0];
      rStorage[1] = t1[1];
      rStorage[2] = t1[2];
      rStorage[3] = t1[4];
      rStorage[4] = t1[5];
      rStorage[5] = t1[6];
      rStorage[6] = t1[8];
      rStorage[7] = t1[9];
      rStorage[8] = t1[10];
      t1 = rStorage[0];
      t2 = rStorage[4];
      t3 = rStorage[8];
      t = 0 + t1 + t2 + t3;
      if (t > 0) {
        s = Math.sqrt(t + 1);
        t1 = rotation._qStorage;
        t1[3] = s * 0.5;
        s = 0.5 / s;
        t1[0] = (rStorage[5] - rStorage[7]) * s;
        t1[1] = (rStorage[6] - rStorage[2]) * s;
        t1[2] = (rStorage[1] - rStorage[3]) * s;
      } else {
        if (t1 < t2)
          i = t2 < t3 ? 2 : 1;
        else
          i = t1 < t3 ? 2 : 0;
        j = (i + 1) % 3;
        k = (i + 2) % 3;
        t1 = i * 3;
        t2 = j * 3;
        t3 = k * 3;
        s = Math.sqrt(rStorage[t1 + i] - rStorage[t2 + j] - rStorage[t3 + k] + 1);
        t4 = rotation._qStorage;
        t4[i] = s * 0.5;
        s = 0.5 / s;
        t4[3] = (rStorage[t2 + k] - rStorage[t3 + j]) * s;
        t4[j] = (rStorage[t1 + j] + rStorage[t2 + i]) * s;
        t4[k] = (rStorage[t1 + k] + rStorage[t3 + i]) * s;
      }
      t1 = scale._v3storage;
      t1[0] = sx;
      t1[1] = sy;
      t1[2] = sz;
    },
    transform3$1(arg) {
      var argStorage = arg._v3storage,
        t1 = this._m4storage,
        t2 = t1[0],
        t3 = argStorage[0],
        t4 = t1[4],
        t5 = argStorage[1],
        t6 = t1[8],
        t7 = argStorage[2],
        t8 = t1[12],
        t9 = t1[1],
        t10 = t1[5],
        t11 = t1[9],
        t12 = t1[13],
        t13 = t1[2],
        t14 = t1[6],
        t15 = t1[10];
      t1 = t1[14];
      argStorage[0] = t2 * t3 + t4 * t5 + t6 * t7 + t8;
      argStorage[1] = t9 * t3 + t10 * t5 + t11 * t7 + t12;
      argStorage[2] = t13 * t3 + t14 * t5 + t15 * t7 + t1;
      return arg;
    },
    perspectiveTransform$1(arg) {
      var argStorage = arg._v3storage,
        t1 = this._m4storage,
        t2 = t1[0],
        t3 = argStorage[0],
        t4 = t1[4],
        t5 = argStorage[1],
        t6 = t1[8],
        t7 = argStorage[2],
        t8 = t1[12],
        t9 = t1[1],
        t10 = t1[5],
        t11 = t1[9],
        t12 = t1[13],
        t13 = t1[2],
        t14 = t1[6],
        t15 = t1[10],
        t16 = t1[14],
        w_ = 1 / (t1[3] * t3 + t1[7] * t5 + t1[11] * t7 + t1[15]);
      argStorage[0] = (t2 * t3 + t4 * t5 + t6 * t7 + t8) * w_;
      argStorage[1] = (t9 * t3 + t10 * t5 + t11 * t7 + t12) * w_;
      argStorage[2] = (t13 * t3 + t14 * t5 + t15 * t7 + t16) * w_;
      return arg;
    }
  };
  A.Quaternion.prototype = {
    setFrom$1(source) {
      var sourceStorage = source._qStorage,
        t1 = this._qStorage;
      t1[0] = sourceStorage[0];
      t1[1] = sourceStorage[1];
      t1[2] = sourceStorage[2];
      t1[3] = sourceStorage[3];
    },
    normalize$0(_) {
      var d, t1,
        l = Math.sqrt(this.get$length2());
      if (l === 0)
        return 0;
      d = 1 / l;
      t1 = this._qStorage;
      t1[0] = t1[0] * d;
      t1[1] = t1[1] * d;
      t1[2] = t1[2] * d;
      t1[3] = t1[3] * d;
      return l;
    },
    get$length2() {
      var t1 = this._qStorage,
        x = t1[0],
        y = t1[1],
        z = t1[2],
        w = t1[3];
      return x * x + y * y + z * z + w * w;
    },
    get$length(_) {
      var t1 = this._qStorage,
        x = t1[0],
        y = t1[1],
        z = t1[2],
        w = t1[3];
      return Math.sqrt(x * x + y * y + z * z + w * w);
    },
    scaled$1(scale) {
      var t1 = new Float64Array(4),
        t2 = new A.Quaternion(t1);
      t2.setFrom$1(this);
      t1[3] = t1[3] * scale;
      t1[2] = t1[2] * scale;
      t1[1] = t1[1] * scale;
      t1[0] = t1[0] * scale;
      return t2;
    },
    $mul(_, other) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17,
        t1 = this._qStorage,
        _w = t1[3],
        _z = t1[2],
        _y = t1[1],
        _x = t1[0],
        otherStorage = other.get$_qStorage(),
        ow = otherStorage.$index(0, 3),
        oz = otherStorage.$index(0, 2),
        oy = otherStorage.$index(0, 1),
        ox = otherStorage.$index(0, 0);
      t1 = B.JSNumber_methods.$mul(_w, ox);
      t2 = B.JSNumber_methods.$mul(_x, ow);
      t3 = B.JSNumber_methods.$mul(_y, oz);
      t4 = B.JSNumber_methods.$mul(_z, oy);
      t5 = B.JSNumber_methods.$mul(_w, oy);
      t6 = B.JSNumber_methods.$mul(_y, ow);
      t7 = B.JSNumber_methods.$mul(_z, ox);
      t8 = B.JSNumber_methods.$mul(_x, oz);
      t9 = B.JSNumber_methods.$mul(_w, oz);
      t10 = B.JSNumber_methods.$mul(_z, ow);
      t11 = B.JSNumber_methods.$mul(_x, oy);
      t12 = B.JSNumber_methods.$mul(_y, ox);
      t13 = B.JSNumber_methods.$mul(_w, ow);
      t14 = B.JSNumber_methods.$mul(_x, ox);
      t15 = B.JSNumber_methods.$mul(_y, oy);
      t16 = B.JSNumber_methods.$mul(_z, oz);
      t17 = new Float64Array(4);
      t17[0] = t1 + t2 + t3 - t4;
      t17[1] = t5 + t6 + t7 - t8;
      t17[2] = t9 + t10 + t11 - t12;
      t17[3] = t13 - t14 - t15 - t16;
      return new A.Quaternion(t17);
    },
    $add(_, other) {
      var argStorage,
        t1 = new Float64Array(4),
        t2 = new A.Quaternion(t1);
      t2.setFrom$1(this);
      argStorage = other._qStorage;
      t1[0] = t1[0] + argStorage[0];
      t1[1] = t1[1] + argStorage[1];
      t1[2] = t1[2] + argStorage[2];
      t1[3] = t1[3] + argStorage[3];
      return t2;
    },
    $sub(_, other) {
      var argStorage,
        t1 = new Float64Array(4),
        t2 = new A.Quaternion(t1);
      t2.setFrom$1(this);
      argStorage = other._qStorage;
      t1[0] = t1[0] - argStorage[0];
      t1[1] = t1[1] - argStorage[1];
      t1[2] = t1[2] - argStorage[2];
      t1[3] = t1[3] - argStorage[3];
      return t2;
    },
    $index(_, i) {
      return this._qStorage[i];
    },
    toString$0(_) {
      var t1 = this._qStorage;
      return A.S(t1[0]) + ", " + A.S(t1[1]) + ", " + A.S(t1[2]) + " @ " + A.S(t1[3]);
    }
  };
  A.Vector3.prototype = {
    setValues$3(x, y, z) {
      var t1 = this._v3storage;
      t1[0] = x;
      t1[1] = y;
      t1[2] = z;
    },
    setFrom$1(other) {
      var otherStorage = other._v3storage,
        t1 = this._v3storage;
      t1[0] = otherStorage[0];
      t1[1] = otherStorage[1];
      t1[2] = otherStorage[2];
    },
    toString$0(_) {
      var t1 = this._v3storage;
      return "[" + A.S(t1[0]) + "," + A.S(t1[1]) + "," + A.S(t1[2]) + "]";
    },
    $eq(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      if (other instanceof A.Vector3) {
        t1 = this._v3storage;
        t2 = t1[0];
        t3 = other._v3storage;
        t1 = t2 === t3[0] && t1[1] === t3[1] && t1[2] === t3[2];
      } else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      return A.Object_hashAll(this._v3storage);
    },
    $sub(_, other) {
      var argStorage,
        t1 = new Float64Array(3),
        t2 = new A.Vector3(t1);
      t2.setFrom$1(this);
      argStorage = other._v3storage;
      t1[0] = t1[0] - argStorage[0];
      t1[1] = t1[1] - argStorage[1];
      t1[2] = t1[2] - argStorage[2];
      return t2;
    },
    $add(_, other) {
      var argStorage,
        t1 = new Float64Array(3),
        t2 = new A.Vector3(t1);
      t2.setFrom$1(this);
      argStorage = other._v3storage;
      t1[0] = t1[0] + argStorage[0];
      t1[1] = t1[1] + argStorage[1];
      t1[2] = t1[2] + argStorage[2];
      return t2;
    },
    $mul(_, scale) {
      var t1 = new Float64Array(3),
        t2 = new A.Vector3(t1);
      t2.setFrom$1(this);
      t1[2] = t1[2] * scale;
      t1[1] = t1[1] * scale;
      t1[0] = t1[0] * scale;
      return t2;
    },
    $index(_, i) {
      return this._v3storage[i];
    },
    get$length(_) {
      var t1 = this._v3storage,
        t2 = t1[0],
        t3 = t1[1];
      t1 = t1[2];
      return Math.sqrt(t2 * t2 + t3 * t3 + t1 * t1);
    },
    get$length2() {
      var t1 = this._v3storage,
        t2 = t1[0],
        t3 = t1[1];
      t1 = t1[2];
      return t2 * t2 + t3 * t3 + t1 * t1;
    },
    dot$1(other) {
      var otherStorage = other._v3storage,
        t1 = this._v3storage;
      return t1[0] * otherStorage[0] + t1[1] * otherStorage[1] + t1[2] * otherStorage[2];
    },
    scaled$1(arg) {
      var t1 = new Float64Array(3),
        t2 = new A.Vector3(t1);
      t2.setFrom$1(this);
      t1[2] = t1[2] * arg;
      t1[1] = t1[1] * arg;
      t1[0] = t1[0] * arg;
      return t2;
    }
  };
  A.Vector4.prototype = {
    setFrom$1(other) {
      var otherStorage = other._v4storage,
        t1 = this._v4storage;
      t1[3] = otherStorage[3];
      t1[2] = otherStorage[2];
      t1[1] = otherStorage[1];
      t1[0] = otherStorage[0];
    },
    toString$0(_) {
      var t1 = this._v4storage;
      return A.S(t1[0]) + "," + A.S(t1[1]) + "," + A.S(t1[2]) + "," + A.S(t1[3]);
    },
    $eq(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      if (other instanceof A.Vector4) {
        t1 = this._v4storage;
        t2 = t1[0];
        t3 = other._v4storage;
        t1 = t2 === t3[0] && t1[1] === t3[1] && t1[2] === t3[2] && t1[3] === t3[3];
      } else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      return A.Object_hashAll(this._v4storage);
    },
    $sub(_, other) {
      var argStorage,
        t1 = new Float64Array(4),
        t2 = new A.Vector4(t1);
      t2.setFrom$1(this);
      argStorage = other._v4storage;
      t1[0] = t1[0] - argStorage[0];
      t1[1] = t1[1] - argStorage[1];
      t1[2] = t1[2] - argStorage[2];
      t1[3] = t1[3] - argStorage[3];
      return t2;
    },
    $add(_, other) {
      var argStorage,
        t1 = new Float64Array(4),
        t2 = new A.Vector4(t1);
      t2.setFrom$1(this);
      argStorage = other._v4storage;
      t1[0] = t1[0] + argStorage[0];
      t1[1] = t1[1] + argStorage[1];
      t1[2] = t1[2] + argStorage[2];
      t1[3] = t1[3] + argStorage[3];
      return t2;
    },
    $mul(_, scale) {
      var t1 = new Float64Array(4),
        t2 = new A.Vector4(t1);
      t2.setFrom$1(this);
      t1[0] = t1[0] * scale;
      t1[1] = t1[1] * scale;
      t1[2] = t1[2] * scale;
      t1[3] = t1[3] * scale;
      return t2;
    },
    $index(_, i) {
      return this._v4storage[i];
    },
    get$length(_) {
      var t1 = this._v4storage,
        t2 = t1[0],
        t3 = t1[1],
        t4 = t1[2];
      t1 = t1[3];
      return Math.sqrt(t2 * t2 + t3 * t3 + t4 * t4 + t1 * t1);
    }
  };
  (function aliases() {
    var _ = A._SaveStackTracking.prototype;
    _.super$_SaveStackTracking$clear = _.clear$0;
    _.super$_SaveStackTracking$save = _.save$0;
    _.super$_SaveStackTracking$restore = _.restore$0;
    _.super$_SaveStackTracking$translate = _.translate$2;
    _.super$_SaveStackTracking$transform = _.transform$1;
    _.super$_SaveStackTracking$clipRect = _.clipRect$1;
    _.super$_SaveStackTracking$clipRRect = _.clipRRect$1;
    _.super$_SaveStackTracking$clipPath = _.clipPath$1;
    _ = A.CkCanvas.prototype;
    _.super$CkCanvas$clear = _.clear$1;
    _.super$CkCanvas$clipPath = _.clipPath$2;
    _.super$CkCanvas$clipRRect = _.clipRRect$2;
    _.super$CkCanvas$clipRect = _.clipRect$3;
    _.super$CkCanvas$drawCircle = _.drawCircle$3;
    _.super$CkCanvas$drawDRRect = _.drawDRRect$3;
    _.super$CkCanvas$drawPaint = _.drawPaint$1;
    _.super$CkCanvas$drawParagraph = _.drawParagraph$2;
    _.super$CkCanvas$drawPath = _.drawPath$2;
    _.super$CkCanvas$drawPicture = _.drawPicture$1;
    _.super$CkCanvas$drawRRect = _.drawRRect$2;
    _.super$CkCanvas$drawRect = _.drawRect$2;
    _.super$CkCanvas$drawShadow = _.drawShadow$4;
    _.super$CkCanvas$restore = _.restore$0;
    _.super$CkCanvas$restoreToCount = _.restoreToCount$1;
    _.super$CkCanvas$save = _.save$0;
    _.super$CkCanvas$saveLayer = _.saveLayer$2;
    _.super$CkCanvas$transform = _.transform$1;
    _.super$CkCanvas$translate = _.translate$2;
    _ = A._DomClip.prototype;
    _.super$_DomClip$createElement = _.createElement$0;
    _ = A.PersistedSurface.prototype;
    _.super$PersistedSurface$revive = _.revive$0;
    _.super$PersistedSurface$build = _.build$0;
    _.super$PersistedSurface$adoptElements = _.adoptElements$1;
    _.super$PersistedSurface$update = _.update$1;
    _.super$PersistedSurface$retain = _.retain$0;
    _.super$PersistedSurface$discard = _.discard$0;
    _.super$PersistedSurface$preroll = _.preroll$1;
    _ = A.PersistedContainerSurface.prototype;
    _.super$PersistedContainerSurface$recomputeTransformAndClip = _.recomputeTransformAndClip$0;
    _.super$PersistedContainerSurface$update = _.update$1;
    _.super$PersistedContainerSurface$discard = _.discard$0;
    _ = A.DefaultTextEditingStrategy.prototype;
    _.super$DefaultTextEditingStrategy$initializeTextEditing = _.initializeTextEditing$3$onAction$onChange;
    _.super$DefaultTextEditingStrategy$updateElementStyle = _.updateElementStyle$1;
    _.super$DefaultTextEditingStrategy$disable = _.disable$0;
    _.super$DefaultTextEditingStrategy$enable = _.enable$3$onAction$onChange;
    _ = A._PersistedPhysicalShape_PersistedContainerSurface__DomClip.prototype;
    _.super$_PersistedPhysicalShape_PersistedContainerSurface__DomClip$discard = _.discard$0;
    _ = J.Interceptor.prototype;
    _.super$Interceptor$toString = _.toString$0;
    _ = J.LegacyJavaScriptObject.prototype;
    _.super$LegacyJavaScriptObject$toString = _.toString$0;
    _ = A.JsLinkedHashMap.prototype;
    _.super$JsLinkedHashMap$internalContainsKey = _.internalContainsKey$1;
    _.super$JsLinkedHashMap$internalGet = _.internalGet$1;
    _.super$JsLinkedHashMap$internalSet = _.internalSet$2;
    _.super$JsLinkedHashMap$internalRemove = _.internalRemove$1;
    _ = A.ListMixin.prototype;
    _.super$ListMixin$setRange = _.setRange$4;
    _ = A.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _ = A.Object.prototype;
    _.super$Object$$eq = _.$eq;
    _.super$Object$toString = _.toString$0;
    _ = A.Element.prototype;
    _.super$Element$createFragment = _.createFragment$3$treeSanitizer$validator;
    _ = A.EventTarget.prototype;
    _.super$EventTarget$addEventListener = _.addEventListener$3;
    _ = A._SimpleNodeValidator.prototype;
    _.super$_SimpleNodeValidator$allowsAttribute = _.allowsAttribute$3;
    _ = A.JsObject.prototype;
    _.super$JsObject$$index = _.$index;
    _.super$JsObject$$indexSet = _.$indexSet;
    _ = A._JsArray_JsObject_ListMixin.prototype;
    _.super$_JsArray_JsObject_ListMixin$$indexSet = _.$indexSet;
    _ = A.Color.prototype;
    _.super$Color$$eq = _.$eq;
    _.super$Color$toString = _.toString$0;
    _ = A.Animation0.prototype;
    _.super$Animation$toStringDetails = _.toStringDetails$0;
    _ = A.ParametricCurve.prototype;
    _.super$ParametricCurve$transform = _.transform$1;
    _ = A.AnimationEagerListenerMixin.prototype;
    _.super$AnimationEagerListenerMixin$dispose = _.dispose$0;
    _ = A.BindingBase.prototype;
    _.super$BindingBase$initInstances = _.initInstances$0;
    _.super$BindingBase$initServiceExtensions = _.initServiceExtensions$0;
    _.super$BindingBase$unlocked = _.unlocked$0;
    _.super$BindingBase$performReassemble = _.performReassemble$0;
    _ = A.ChangeNotifier.prototype;
    _.super$ChangeNotifier$dispose = _.dispose$0;
    _ = A.Diagnosticable.prototype;
    _.super$Diagnosticable$toStringShort = _.toStringShort$0;
    _.super$Diagnosticable$debugFillProperties = _.debugFillProperties$1;
    _ = A.DiagnosticableTreeMixin.prototype;
    _.super$DiagnosticableTreeMixin$toStringDeep = _.toStringDeep$3$minLevel$prefixLineOne$prefixOtherLines;
    _.super$DiagnosticableTreeMixin$toStringShort = _.toStringShort$0;
    _ = A.AbstractNode.prototype;
    _.super$AbstractNode$attach = _.attach$1;
    _.super$AbstractNode$detach = _.detach$0;
    _.super$AbstractNode$adoptChild = _.adoptChild$1;
    _.super$AbstractNode$dropChild = _.dropChild$1;
    _ = A.GestureBinding.prototype;
    _.super$GestureBinding$hitTest = _.hitTest$2;
    _.super$GestureBinding$dispatchEvent = _.dispatchEvent$2;
    _ = A.GestureRecognizer.prototype;
    _.super$GestureRecognizer$isPointerAllowed = _.isPointerAllowed$1;
    _.super$GestureRecognizer$dispose = _.dispose$0;
    _ = A.OneSequenceGestureRecognizer.prototype;
    _.super$OneSequenceGestureRecognizer$addAllowedPointer = _.addAllowedPointer$1;
    _.super$OneSequenceGestureRecognizer$handleNonAllowedPointer = _.handleNonAllowedPointer$1;
    _.super$OneSequenceGestureRecognizer$resolve = _.resolve$1;
    _.super$OneSequenceGestureRecognizer$dispose = _.dispose$0;
    _.super$OneSequenceGestureRecognizer$startTrackingPointer = _.startTrackingPointer$2;
    _ = A.PrimaryPointerGestureRecognizer.prototype;
    _.super$PrimaryPointerGestureRecognizer$addAllowedPointer = _.addAllowedPointer$1;
    _.super$PrimaryPointerGestureRecognizer$acceptGesture = _.acceptGesture$1;
    _.super$PrimaryPointerGestureRecognizer$rejectGesture = _.rejectGesture$1;
    _ = A.__InkResponseState_State_AutomaticKeepAliveClientMixin.prototype;
    _.super$__InkResponseState_State_AutomaticKeepAliveClientMixin$initState = _.initState$0;
    _.super$__InkResponseState_State_AutomaticKeepAliveClientMixin$deactivate = _.deactivate$0;
    _ = A.InkFeature.prototype;
    _.super$InkFeature$dispose = _.dispose$0;
    _ = A.BorderRadiusGeometry.prototype;
    _.super$BorderRadiusGeometry$subtract = _.subtract$1;
    _.super$BorderRadiusGeometry$add = _.add$1;
    _ = A.ShapeBorder.prototype;
    _.super$ShapeBorder$lerpFrom = _.lerpFrom$2;
    _.super$ShapeBorder$lerpTo = _.lerpTo$2;
    _ = A.Decoration.prototype;
    _.super$Decoration$lerpFrom = _.lerpFrom$2;
    _.super$Decoration$lerpTo = _.lerpTo$2;
    _ = A.BoxPainter.prototype;
    _.super$BoxPainter$dispose = _.dispose$0;
    _ = A.EdgeInsetsGeometry.prototype;
    _.super$EdgeInsetsGeometry$add = _.add$1;
    _ = A.InlineSpan.prototype;
    _.super$InlineSpan$$eq = _.$eq;
    _ = A.RendererBinding.prototype;
    _.super$RendererBinding$handleMetricsChanged = _.handleMetricsChanged$0;
    _.super$RendererBinding$handleTextScaleFactorChanged = _.handleTextScaleFactorChanged$0;
    _.super$RendererBinding$handlePlatformBrightnessChanged = _.handlePlatformBrightnessChanged$0;
    _.super$RendererBinding$drawFrame = _.drawFrame$0;
    _ = A.BoxParentData.prototype;
    _.super$BoxParentData$toString = _.toString$0;
    _ = A.RenderBox.prototype;
    _.super$RenderBox$computeDistanceToActualBaseline = _.computeDistanceToActualBaseline$1;
    _.super$RenderBox$hitTest = _.hitTest$2$position;
    _ = A.Layer0.prototype;
    _.super$Layer$dispose = _.dispose$0;
    _.super$Layer$updateSubtreeNeedsAddToScene = _.updateSubtreeNeedsAddToScene$0;
    _ = A.ContainerLayer0.prototype;
    _.super$ContainerLayer$findAnnotations = _.findAnnotations$1$3$onlyFirst;
    _ = A.OffsetLayer.prototype;
    _.super$OffsetLayer$findAnnotations = _.findAnnotations$1$3$onlyFirst;
    _ = A.ParentData.prototype;
    _.super$ParentData$detach = _.detach$0;
    _ = A.RenderObject.prototype;
    _.super$RenderObject$reassemble = _.reassemble$0;
    _.super$RenderObject$dispose = _.dispose$0;
    _.super$RenderObject$attach = _.attach$1;
    _.super$RenderObject$markNeedsLayout = _.markNeedsLayout$0;
    _.super$RenderObject$applyPaintTransform = _.applyPaintTransform$2;
    _.super$RenderObject$describeSemanticsConfiguration = _.describeSemanticsConfiguration$1;
    _.super$RenderObject$clearSemantics = _.clearSemantics$0;
    _.super$RenderObject$visitChildrenForSemantics = _.visitChildrenForSemantics$1;
    _.super$RenderObject$handleEvent = _.handleEvent$2;
    _.super$RenderObject$toStringShort = _.toStringShort$0;
    _ = A.RelayoutWhenSystemFontsChangeMixin.prototype;
    _.super$RelayoutWhenSystemFontsChangeMixin$systemFontsDidChange = _.systemFontsDidChange$0;
    _ = A._RenderParagraph_RenderBox_ContainerRenderObjectMixin.prototype;
    _.super$_RenderParagraph_RenderBox_ContainerRenderObjectMixin$attach = _.attach$1;
    _.super$_RenderParagraph_RenderBox_ContainerRenderObjectMixin$detach = _.detach$0;
    _ = A.RenderProxyBoxMixin.prototype;
    _.super$RenderProxyBoxMixin$performLayout = _.performLayout$0;
    _.super$RenderProxyBoxMixin$hitTestChildren = _.hitTestChildren$2$position;
    _.super$RenderProxyBoxMixin$paint = _.paint$2;
    _ = A._RenderProxyBox_RenderBox_RenderObjectWithChildMixin.prototype;
    _.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin$attach = _.attach$1;
    _.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin$detach = _.detach$0;
    _ = A.SchedulerBinding.prototype;
    _.super$SchedulerBinding$handleAppLifecycleStateChanged = _.handleAppLifecycleStateChanged$1;
    _ = A.Ticker.prototype;
    _.super$Ticker$dispose = _.dispose$0;
    _ = A.AssetBundle.prototype;
    _.super$AssetBundle$loadString = _.loadString$2$cache;
    _ = A.ServicesBinding.prototype;
    _.super$ServicesBinding$handleMemoryPressure = _.handleMemoryPressure$0;
    _.super$ServicesBinding$handleSystemMessage = _.handleSystemMessage$1;
    _ = A.MethodChannel.prototype;
    _.super$MethodChannel$_invokeMethod = _._invokeMethod$1$3$arguments$missingOk;
    _ = A.AutomaticKeepAliveClientMixin.prototype;
    _.super$AutomaticKeepAliveClientMixin$build = _.build$1;
    _ = A._WidgetsFlutterBinding_BindingBase_GestureBinding.prototype;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding$initInstances = _.initInstances$0;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding$unlocked = _.unlocked$0;
    _ = A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding.prototype;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding$initInstances = _.initInstances$0;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding$initServiceExtensions = _.initServiceExtensions$0;
    _ = A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding.prototype;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding$initInstances = _.initInstances$0;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding$initServiceExtensions = _.initServiceExtensions$0;
    _ = A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding.prototype;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding$initInstances = _.initInstances$0;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding$handleMemoryPressure = _.handleMemoryPressure$0;
    _ = A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding.prototype;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding$initInstances = _.initInstances$0;
    _ = A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding.prototype;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding$initInstances = _.initInstances$0;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding$initServiceExtensions = _.initServiceExtensions$0;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding$performReassemble = _.performReassemble$0;
    _ = A.Widget.prototype;
    _.super$Widget$toStringShort = _.toStringShort$0;
    _ = A.State.prototype;
    _.super$State$initState = _.initState$0;
    _.super$State$didUpdateWidget = _.didUpdateWidget$1;
    _.super$State$deactivate = _.deactivate$0;
    _.super$State$activate = _.activate$0;
    _.super$State$dispose = _.dispose$0;
    _.super$State$didChangeDependencies = _.didChangeDependencies$0;
    _ = A.RenderObjectWidget.prototype;
    _.super$RenderObjectWidget$updateRenderObject = _.updateRenderObject$2;
    _ = A.Element0.prototype;
    _.super$Element$mount = _.mount$2;
    _.super$Element$update = _.update$1;
    _.super$Element$_updateSlot = _._updateSlot$1;
    _.super$Element$inflateWidget = _.inflateWidget$2;
    _.super$Element$forgetChild = _.forgetChild$1;
    _.super$Element$activate = _.activate$0;
    _.super$Element$deactivate = _.deactivate$0;
    _.super$Element$unmount = _.unmount$0;
    _.super$Element$dependOnInheritedElement = _.dependOnInheritedElement$2$aspect;
    _.super$Element$didChangeDependencies = _.didChangeDependencies$0;
    _ = A.ComponentElement.prototype;
    _.super$ComponentElement$_firstBuild = _._firstBuild$0;
    _.super$ComponentElement$performRebuild = _.performRebuild$0;
    _ = A.ProxyElement.prototype;
    _.super$ProxyElement$build = _.build$0;
    _.super$ProxyElement$update = _.update$1;
    _.super$ProxyElement$updated = _.updated$1;
    _ = A.InheritedElement.prototype;
    _.super$InheritedElement$notifyClients = _.notifyClients$1;
    _ = A.RenderObjectElement.prototype;
    _.super$RenderObjectElement$mount = _.mount$2;
    _.super$RenderObjectElement$update = _.update$1;
    _.super$RenderObjectElement$performRebuild = _.performRebuild$0;
    _ = A.RootRenderObjectElement.prototype;
    _.super$RootRenderObjectElement$mount = _.mount$2;
    _ = A.ImplicitlyAnimatedWidgetState.prototype;
    _.super$ImplicitlyAnimatedWidgetState$initState = _.initState$0;
    _ = A._ImplicitlyAnimatedWidgetState_State_SingleTickerProviderStateMixin.prototype;
    _.super$_ImplicitlyAnimatedWidgetState_State_SingleTickerProviderStateMixin$dispose = _.dispose$0;
  })();
  (function installTearOffs() {
    var _static_0 = hunkHelpers._static_0,
      _static_1 = hunkHelpers._static_1,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance_1_u = hunkHelpers._instance_1u,
      _instance_1_i = hunkHelpers._instance_1i,
      _instance_0_i = hunkHelpers._instance_0i,
      _static_2 = hunkHelpers._static_2,
      _instance = hunkHelpers.installInstanceTearOff,
      _instance_2_u = hunkHelpers._instance_2u,
      _static = hunkHelpers.installStaticTearOff;
    _static_0(A, "_engine_SkiaObjects_postFrameCleanUp$closure", "SkiaObjects_postFrameCleanUp", 0);
    _static_1(A, "_engine___noopCallback$closure", "_noopCallback", 5);
    _static_1(A, "_engine___emptyCallback$closure", "_emptyCallback", 8);
    _instance_0_u(A.AlarmClock.prototype, "get$_timerDidFire", "_timerDidFire$0", 0);
    _instance_1_u(A.HtmlViewEmbedder.prototype, "get$_releaseOverlay", "_releaseOverlay$1", 61);
    _instance_0_u(A.FontFallbackData.prototype, "get$_ensureFallbackFonts", "_ensureFallbackFonts$0", 0);
    var _;
    _instance_1_i(_ = A.FallbackFontDownloadQueue.prototype, "get$add", "add$1", 173);
    _instance_0_u(_, "get$startDownloads", "startDownloads$0", 12);
    _instance_1_u(A.SkiaFontCollection.prototype, "get$_getArrayBuffer", "_getArrayBuffer$1", 72);
    _instance_1_u(_ = A.Surface.prototype, "get$_contextRestoredListener", "_contextRestoredListener$1", 1);
    _instance_1_u(_, "get$_contextLostListener", "_contextLostListener$1", 1);
    _instance_1_u(A.SurfaceFactory.prototype, "get$_removeFromDom", "_removeFromDom$1", 130);
    _instance_1_u(_ = A.FlutterViewEmbedder.prototype, "get$_metricsDidChange", "_metricsDidChange$1", 227);
    _instance_1_u(_, "get$_languageDidChange", "_languageDidChange$1", 1);
    _instance_1_u(A.KeyboardBinding.prototype, "get$_onKeyData", "_onKeyData$1", 34);
    _instance_1_i(A.MultiEntriesBrowserHistory.prototype, "get$onPopState", "onPopState$1", 17);
    _instance_1_i(A.SingleEntryBrowserHistory.prototype, "get$onPopState", "onPopState$1", 17);
    _instance_1_u(A.PointerBinding.prototype, "get$_onPointerData", "_onPointerData$1", 140);
    _instance_0_i(A.RulerHost.prototype, "get$dispose", "dispose$0", 0);
    _instance_1_u(_ = A.DefaultTextEditingStrategy.prototype, "get$handleChange", "handleChange$1", 1);
    _instance_1_u(_, "get$handleBeforeInput", "handleBeforeInput$1", 1);
    _instance_1_u(_, "get$handleCompositionUpdate", "handleCompositionUpdate$1", 1);
    _instance_1_u(_, "get$maybeSendAction", "maybeSendAction$1", 1);
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 237);
    _static_1(A, "_js_helper_GeneralConstantMap__constantMapHashCode$closure", "GeneralConstantMap__constantMapHashCode", 78);
    _static_0(A, "_js_helper_Primitives_dateNow$closure", "Primitives_dateNow", 32);
    _instance_1_i(A.JsLinkedHashMap.prototype, "get$remove", "remove$1", "2?(Object?)");
    _static_1(A, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 43);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 43);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 43);
    _static_0(A, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 0);
    _static_1(A, "async___nullDataHandler$closure", "_nullDataHandler", 8);
    _instance(A._Completer.prototype, "get$completeError", 0, 1, null, ["call$2", "call$1"], ["completeError$2", "completeError$1"], 93, 0, 0);
    _instance_2_u(A._Future.prototype, "get$_completeError", "_completeError$2", 54);
    _instance_1_i(A._StreamController.prototype, "get$add", "add$1", 17);
    _static_2(A, "collection___defaultEquals$closure", "_defaultEquals", 240);
    _static_1(A, "collection___defaultHashCode$closure", "_defaultHashCode", 78);
    _instance_1_i(A._LinkedCustomHashMap.prototype, "get$remove", "remove$1", "2?(Object?)");
    _instance_1_i(A._LinkedHashSet.prototype, "get$contains", "contains$1", 57);
    _static_1(A, "convert___defaultToEncodable$closure", "_defaultToEncodable", 20);
    _static_1(A, "core_Uri_decodeComponent$closure", "Uri_decodeComponent", 38);
    _instance(A.StringBuffer.prototype, "get$writeln", 0, 0, null, ["call$1", "call$0"], ["writeln$1", "writeln$0"], 98, 0, 0);
    _static(A, "html__Html5NodeValidator__standardAttributeValidator$closure", 4, null, ["call$4"], ["_Html5NodeValidator__standardAttributeValidator"], 60, 0);
    _static(A, "html__Html5NodeValidator__uriAttributeValidator$closure", 4, null, ["call$4"], ["_Html5NodeValidator__uriAttributeValidator"], 60, 0);
    _instance_1_u(A.Console.prototype, "get$warn", "warn$1", 17);
    _static_1(A, "js___convertToJS$closure", "_convertToJS", 242);
    _static_1(A, "js___convertToDart$closure", "_convertToDart", 243);
    _instance_1_u(A._StoredMessage.prototype, "get$invoke", "invoke$1", 5);
    _instance_0_u(A._Channel.prototype, "get$_drainStep", "_drainStep$0", 0);
    _instance_1_u(A.AnimationController.prototype, "get$_animation_controller$_tick", "_animation_controller$_tick$1", 7);
    _instance_1_u(A.CurvedAnimation.prototype, "get$_updateCurveDirection", "_updateCurveDirection$1", 27);
    _static(A, "assertions_FlutterError_dumpErrorToConsole$closure", 1, null, ["call$2$forceReport", "call$1"], ["FlutterError_dumpErrorToConsole", function(details) {
      return A.FlutterError_dumpErrorToConsole(details, false);
    }], 244, 0);
    _static_1(A, "assertions_DiagnosticsStackTrace__createStackFrame$closure", "DiagnosticsStackTrace__createStackFrame", 245);
    _instance_1_i(A.DiagnosticPropertiesBuilder.prototype, "get$add", "add$1", 55);
    _instance_1_u(A.AbstractNode.prototype, "get$redepthChild", "redepthChild$1", 136);
    _static_1(A, "stack_frame_StackFrame_fromStackTraceLine$closure", "StackFrame_fromStackTraceLine", 246);
    _instance_1_u(_ = A.GestureBinding.prototype, "get$_handlePointerDataPacket", "_handlePointerDataPacket$1", 139);
    _instance_1_u(_, "get$_handlePointerEventImmediately", "_handlePointerEventImmediately$1", 31);
    _instance_0_u(_, "get$_handleSampleTimeChanged", "_handleSampleTimeChanged$0", 0);
    _instance_0_u(A._CountdownZoned.prototype, "get$_onTimeout", "_onTimeout$0", 0);
    _instance_1_u(_ = A.DoubleTapGestureRecognizer.prototype, "get$_handleEvent", "_handleEvent$1", 31);
    _instance_1_u(_, "get$_reject", "_reject$1", 143);
    _instance_0_u(_, "get$_multitap$_reset", "_multitap$_reset$0", 0);
    _instance_1_u(A.PrimaryPointerGestureRecognizer.prototype, "get$handleEvent", "handleEvent$1", 31);
    _instance_0_u(_ = A._InkState.prototype, "get$_handleRemoved", "_handleRemoved$0", 0);
    _instance_1_u(_, "get$_build", "_build$1", 146);
    _instance_0_u(A.InkDecoration.prototype, "get$_handleChanged", "_handleChanged$0", 0);
    _instance_1_u(A.InkHighlight.prototype, "get$_handleAlphaStatusChanged", "_handleAlphaStatusChanged$1", 27);
    _instance_1_u(A.InkSplash.prototype, "get$_ink_splash$_handleAlphaStatusChanged", "_ink_splash$_handleAlphaStatusChanged$1", 27);
    _instance_1_u(_ = A.InkResponse.prototype, "get$getRectCallback", "getRectCallback$1", 148);
    _instance_1_u(_, "get$debugCheckContext", "debugCheckContext$1", 149);
    _instance_1_u(_ = A._InkResponseState.prototype, "get$_handleFocusHighlightModeChange", "_handleFocusHighlightModeChange$1", 150);
    _instance_1_u(_, "get$_handleFocusUpdate", "_handleFocusUpdate$1", 23);
    _instance_1_u(_, "get$_handleTapDown", "_handleTapDown$1", 151);
    _instance_1_u(_, "get$_handleTapUp", "_handleTapUp$1", 152);
    _instance_0_u(_, "get$_handleTap", "_handleTap$0", 0);
    _instance_0_u(_, "get$_handleTapCancel", "_handleTapCancel$0", 0);
    _instance_1_u(_, "get$_handleMouseEnter", "_handleMouseEnter$1", 153);
    _instance_1_u(_, "get$_handleMouseExit", "_handleMouseExit$1", 154);
    _instance_2_u(A.DecorationImagePainter.prototype, "get$_handleImage", "_handleImage$2", 164);
    _instance_0_u(_ = A.RendererBinding.prototype, "get$_handleSemanticsEnabledChanged", "_handleSemanticsEnabledChanged$0", 0);
    _instance_1_u(_, "get$_handleWebFirstFrame", "_handleWebFirstFrame$1", 7);
    _instance(_, "get$_handleSemanticsAction", 0, 3, null, ["call$3"], ["_handleSemanticsAction$3"], 169, 0, 0);
    _instance_0_u(_, "get$_handleSemanticsOwnerCreated", "_handleSemanticsOwnerCreated$0", 0);
    _instance_0_u(_, "get$_handleSemanticsOwnerDisposed", "_handleSemanticsOwnerDisposed$0", 0);
    _instance_1_u(_, "get$_handlePersistentFrameCallback", "_handlePersistentFrameCallback$1", 7);
    _instance_2_u(A.RenderBoxContainerDefaultsMixin.prototype, "get$defaultPaint", "defaultPaint$2", 44);
    _static_1(A, "object_RenderObject__cleanChildRelayoutBoundary$closure", "RenderObject__cleanChildRelayoutBoundary", 16);
    _instance_0_u(_ = A.RenderObject.prototype, "get$markNeedsPaint", "markNeedsPaint$0", 0);
    _instance(_, "get$showOnScreen", 0, 0, null, ["call$4$curve$descendant$duration$rect", "call$0"], ["showOnScreen$4$curve$descendant$duration$rect", "showOnScreen$0"], 178, 0, 0);
    _instance_0_u(A.RenderParagraph.prototype, "get$systemFontsDidChange", "systemFontsDidChange$0", 0);
    _instance(A.RenderProxyBoxMixin.prototype, "get$paint", 0, 2, null, ["call$2"], ["paint$2"], 44, 0, 1);
    _instance_0_u(A._RenderCustomClip.prototype, "get$_markNeedsClip", "_markNeedsClip$0", 0);
    _instance_0_u(_ = A.RenderSemanticsAnnotations.prototype, "get$_performTap", "_performTap$0", 0);
    _instance_0_u(_, "get$_performLongPress", "_performLongPress$0", 0);
    _instance_1_u(A.RenderView.prototype, "get$hitTestMouseTrackers", "hitTestMouseTrackers$1", 181);
    _static_2(A, "binding_SchedulerBinding__taskSorter$closure", "SchedulerBinding__taskSorter", 247);
    _static(A, "binding__defaultSchedulingStrategy$closure", 0, null, ["call$2$priority$scheduler"], ["defaultSchedulingStrategy"], 248, 0);
    _instance_1_u(_ = A.SchedulerBinding.prototype, "get$_executeTimingsCallbacks", "_executeTimingsCallbacks$1", 41);
    _instance_0_u(_, "get$_runTasks", "_runTasks$0", 0);
    _instance_0_u(_, "get$ensureVisualUpdate", "ensureVisualUpdate$0", 0);
    _instance_1_u(_, "get$_profileFramePostEvent", "_profileFramePostEvent$1", 183);
    _instance_1_u(A.Ticker.prototype, "get$_ticker$_tick", "_ticker$_tick$1", 7);
    _static_1(A, "asset_bundle_AssetBundle__utf8decode$closure", "AssetBundle__utf8decode", 249);
    _static_1(A, "binding1_ServicesBinding__parseLicenses$closure", "ServicesBinding__parseLicenses", 250);
    _instance_0_u(_ = A.ServicesBinding.prototype, "get$_addLicenses", "_addLicenses$0", 192);
    _instance_1_u(_, "get$_handleLifecycleMessage", "_handleLifecycleMessage$1", 193);
    _instance_1_u(_, "get$_handlePlatformMessage", "_handlePlatformMessage$1", 67);
    _instance_1_u(_ = A.KeyEventManager.prototype, "get$handleKeyData", "handleKeyData$1", 34);
    _instance_1_u(_, "get$handleRawKeyMessage", "handleRawKeyMessage$1", 196);
    _instance_1_u(_, "get$_convertRawEventAndStore", "_convertRawEventAndStore$1", 197);
    _instance_1_u(A.RestorationManager.prototype, "get$_methodHandler", "_methodHandler$1", 67);
    _instance_1_u(_ = A.RestorationBucket.prototype, "get$_dropChild", "_dropChild$1", 69);
    _instance_1_u(_, "get$_recursivelyUpdateManager", "_recursivelyUpdateManager$1", 69);
    _instance_1_u(A._ActionsState.prototype, "get$_handleActionChanged", "_handleActionChanged$1", 204);
    _instance_0_u(_ = A.WidgetsBinding.prototype, "get$handleLocaleChanged", "handleLocaleChanged$0", 0);
    _instance_1_u(_, "get$_handleNavigationInvocation", "_handleNavigationInvocation$1", 211);
    _instance_0_u(_, "get$_handleBuildScheduled", "_handleBuildScheduled$0", 0);
    _instance_0_u(_ = A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding.prototype, "get$handleMetricsChanged", "handleMetricsChanged$0", 0);
    _instance_0_u(_, "get$handleTextScaleFactorChanged", "handleTextScaleFactorChanged$0", 0);
    _instance_0_u(_, "get$handlePlatformBrightnessChanged", "handlePlatformBrightnessChanged$0", 0);
    _instance_0_u(_, "get$performReassemble", "performReassemble$0", 12);
    _instance_1_u(_ = A.FocusManager.prototype, "get$_handlePointerEvent", "_handlePointerEvent$1", 31);
    _instance_1_u(_, "get$_handleKeyMessage", "_handleKeyMessage$1", 214);
    _instance_0_u(_, "get$_applyFocusChange", "_applyFocusChange$0", 0);
    _instance_0_u(A._FocusState.prototype, "get$_handleFocusChanged", "_handleFocusChanged$0", 0);
    _static_1(A, "framework__InactiveElements__deactivateRecursively$closure", "_InactiveElements__deactivateRecursively", 3);
    _static_2(A, "framework_Element__sort$closure", "Element__sort", 251);
    _static_1(A, "framework_Element__activateRecursively$closure", "Element__activateRecursively", 3);
    _instance_1_u(_ = A._InactiveElements.prototype, "get$_unmount", "_unmount$1", 3);
    _instance_0_u(_, "get$_unmountAll", "_unmountAll$0", 0);
    _instance_1_u(A.RawGestureDetectorState.prototype, "get$_handlePointerDown", "_handlePointerDown$1", 224);
    _instance_0_u(A.AnimatedWidgetBaseState.prototype, "get$_handleAnimationChanged", "_handleAnimationChanged$0", 0);
    _instance_0_u(A._InheritedNotifierElement.prototype, "get$_handleUpdate", "_handleUpdate$0", 0);
    _instance_1_u(A.Notification0.prototype, "get$visitAncestor", "visitAncestor$1", 236);
    _instance_0_u(A.SingleTickerProviderStateMixin.prototype, "get$_updateTicker", "_updateTicker$0", 0);
    _instance_0_u(A.TickerProviderStateMixin.prototype, "get$_updateTickers", "_updateTickers$0", 0);
    _static(A, "print__debugPrintThrottled$closure", 1, null, ["call$2$wrapWidth", "call$1"], ["debugPrintThrottled", function(message) {
      return A.debugPrintThrottled(message, null);
    }], 252, 0);
    _static_0(A, "print___debugPrintTask$closure", "_debugPrintTask", 0);
    _static_2(A, "layout_helper_ChildLayoutHelper_dryLayoutChild$closure", "ChildLayoutHelper_dryLayoutChild", 59);
    _static_2(A, "layout_helper_ChildLayoutHelper_layoutChild$closure", "ChildLayoutHelper_layoutChild", 59);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _mixinHard = hunkHelpers.mixinHard,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.Object, null);
    _inheritMany(A.Object, [A.AlarmClock, A.AssetManager, A.Closure, A.AssetManagerException, A._Enum, A._SaveStackTracking, A.ContextStateHandle, A.CkCanvas, A.CkPictureSnapshot, A.CkPaintCommand, J.Interceptor, A.ProductionCollector, A.SkiaObjectCollectionError, A.CanvasKitCanvas, A.HtmlViewEmbedder, A.Mutator, A.Iterable, A.ViewListDiffResult, A.FontFallbackData, A.NotoFont, A.CodeunitRange, A._ResolvedNotoFont, A._ResolvedNotoSubset, A.FallbackFontDownloadQueue, A.NotoDownloader, A.SkiaFontCollection, A.RegisteredFont, A.IntervalTree, A.IntervalTreeNode, A.Layer, A.PrerollContext, A.PaintContext, A.LayerScene, A.LayerSceneBuilder, A.LayerTree, A.Frame, A.CompositorContext, A.SkiaObject, A.CkNWayCanvas, A.CkPictureRecorder, A.Rasterizer, A.SkiaObjectCache, A.SynchronousSkiaObjectCache, A.SurfaceFrame, A.Surface, A.CkSurface, A.SurfaceFactory, A.CkParagraphStyle, A.CkTextStyle, A.CkParagraphBuilder, A._ParagraphCommand, A.Error, A.ClipboardMessageHandler, A.ClipboardAPICopyStrategy, A.ClipboardAPIPasteStrategy, A.ExecCommandCopyStrategy, A.ExecCommandPasteStrategy, A.FlutterConfiguration, A.FlutterViewEmbedder, A.EngineCanvas, A.SaveStackEntry, A.SaveClipEntry, A._SaveElementStackEntry, A.SaveElementStackTracking, A.FrameReference, A.CrossFrameCache, A.ShadowDomHostNode, A.ElementHostNode, A.SurfaceCanvas, A._DomClip, A.PersistedSurface, A.SurfacePaint, A.SurfacePaintData, A.Conic, A.QuadBounds, A.ConicBounds, A._ConicPair, A.CubicBounds, A.SurfacePath, A.PathIterator, A.PathRef, A.PathRefIterator, A.QuadRoots, A.SkQuadCoefficients, A.PathWinding, A.PaintRequest, A.RecordingCanvas, A.PaintCommand, A._PaintBounds, A.RenderStrategy, A._WebGlRenderer, A.SurfaceScene, A.SurfaceSceneBuilder, A.NormalizedGradient, A.EngineGradient, A.ShaderBuilder, A.ShaderMethod, A.ShaderDeclaration, A._PersistedSurfaceMatch, A.PrerollSurfaceContext, A.Keyboard, A.KeyboardBinding, A.FlutterHtmlKeyboardEvent, A.KeyboardConverter, A.MouseCursor, A.BrowserHistory, A.UrlStrategy, A.PlatformLocation, A.EnginePictureRecorder, A.EnginePicture, A.PlatformDispatcher, A.PlatformViewManager, A.PlatformViewMessageHandler, A.PointerBinding, A.PointerSupportDetector, A._BaseAdapter, A._WheelEventListenerMixin, A._SanitizedDetails, A._ButtonSanitizer, A._PointerState, A.PointerDataConverter, A.Profiler, A.GlProgram, A.GlContext, A.OffScreenCanvas, A.AccessibilityAnnouncements, A.RoleManager, A.SemanticsUpdate, A.SemanticsNodeUpdate, A.SemanticsObject, A.EngineSemanticsOwner, A.SemanticsHelper, A.SemanticsEnabler, A.DefaultTextEditingStrategy, A._ListBase_Object_ListMixin, A.MethodCall, A.JSONMessageCodec, A.JSONMethodCodec, A.StandardMessageCodec, A.StandardMethodCodec, A.WriteBuffer, A.ReadBuffer, A.SurfaceShadowData, A.CanvasParagraph, A.FlatTextSpan, A.StyleNode, A.CanvasParagraphBuilder, A.FontCollection, A.FontManager, A.TextLayoutService, A.RangeBox, A.LineSegment, A.LineBuilder, A.Spanometer, A.LineBreakResult, A.RulerHost, A.TextPaintService, A.EngineLineMetrics, A.EngineParagraphStyle, A.EngineTextStyle, A.TextHeightStyle, A.TextDimensions, A.TextHeightRuler, A.DirectionalPosition, A.UnicodeRange, A.UnicodePropertyLookup, A.BrowserAutofillHints, A.EngineInputType, A.TextCapitalizationConfig, A.EngineAutofillForm, A.AutofillInfo, A.TextEditingDeltaState, A.EditingState, A.InputConfiguration, A.TextInputCommand, A.TextEditingChannel, A.HybridTextEditing, A.EditableTextStyle, A.EditableTextGeometry, A.Matrix40, A.FlutterView, A.WindowPadding, A.JS_CONST, J.ArrayIterator, A.CastIterator, A.SentinelValue, A.ListIterator, A.Iterator, A.ExpandIterator, A.EmptyIterator, A.FollowedByIterator, A.WhereTypeIterator, A.FixedLengthListMixin, A.UnmodifiableListMixin, A.Symbol, A.MapView, A.ConstantMap, A.JSInvocationMirror, A.TypeErrorDecoder, A.NullThrownFromJavaScriptException, A.ExceptionAndStackTrace, A._StackTrace, A._Required, A.MapMixin, A.LinkedHashMapCell, A.LinkedHashMapKeyIterator, A.JSSyntaxRegExp, A._MatchImplementation, A._AllMatchesIterator, A.StringMatch, A._StringAllMatchesIterator, A._Cell, A.Rti, A._FunctionParameters, A._Type, A._TimerImpl, A._AsyncAwaitCompleter, A._IterationMarker, A._SyncStarIterator, A.AsyncError, A._Completer, A._FutureListener, A._Future, A._AsyncCallbackEntry, A.Stream, A.StreamSubscription, A.StreamTransformerBase, A._StreamController, A._AsyncStreamControllerDispatch, A._BufferingStreamSubscription, A._DelayedEvent, A._DelayedDone, A._PendingEvents, A._StreamIterator, A._Zone, A._HashMapKeyIterator, A.__SetBase_Object_SetMixin, A._HashSetIterator, A._LinkedHashSetCell, A._LinkedHashSetIterator, A.ListMixin, A._UnmodifiableMapMixin, A._DoubleLinkedQueueEntry, A._DoubleLinkedQueueIterator, A._ListQueueIterator, A.SetMixin, A._UnmodifiableSetMixin, A.Codec, A._JsonStringifier, A._Utf8Encoder, A._Utf8Decoder, A.Comparable, A.DateTime, A.Duration, A.OutOfMemoryError, A.StackOverflowError, A._Exception, A.FormatException, A.MapEntry, A.Null, A._StringStackTrace, A.Stopwatch, A.RuneIterator, A.StringBuffer, A._Uri, A.UriData, A._SimpleUri, A._FakeUserTag, A.ServiceExtensionResponse, A.TimelineTask, A.CssStyleDeclarationBase, A.EventStreamProvider, A._Html5NodeValidator, A.ImmutableListMixin, A.NodeValidatorBuilder, A._SimpleNodeValidator, A._SvgNodeValidator, A.FixedSizeListIterator, A.Console, A._DOMWindowCrossFrame, A._SameOriginUriPolicy, A._ValidatingTreeSanitizer, A._StructuredClone, A._AcceptStructuredClone, A.JsObject, A.NullRejectionException, A.Point, A.Endian, A._ChannelCallbackRecord, A._StoredMessage, A._Channel, A.ChannelBuffers, A.OffsetBase, A.Rect, A.Radius, A.RRect, A._HashEnd, A.KeyData, A.Color, A.MaskFilter, A.Shadow, A.PlatformConfiguration, A.ViewConfiguration0, A.FrameTiming, A.Locale, A.PointerData, A.PointerDataPacket, A.SemanticsAction, A.SemanticsFlag, A.SemanticsUpdateBuilder, A.FontWeight, A.TextDecoration, A.TextHeightBehavior, A.TextBox, A.TextPosition, A.TextRange, A.ParagraphConstraints, A.AccessibilityFeatures, A.GestureSettings, A.HeapPriorityQueue, A.Listenable, A.Simulation, A.AnimationWithParentMixin, A.ParametricCurve, A.AnimationEagerListenerMixin, A.AnimationLocalListenersMixin, A.AnimationLocalStatusListenersMixin, A.Animatable, A.DiagnosticsNode, A._FlutterErrorDetails_Object_Diagnosticable, A.BindingBase, A.DebugReassembleConfig, A.ChangeNotifier, A.TextTreeConfiguration, A._PrefixedStringBuilder, A._NoDefaultValue, A.TextTreeRenderer, A.DiagnosticPropertiesBuilder, A.Diagnosticable, A._DiagnosticableTree_Object_Diagnosticable, A.DiagnosticableTreeMixin, A.Key, A.LicenseEntry, A.AbstractNode, A.WriteBuffer0, A.ReadBuffer0, A.StackFrame, A.GestureArenaMember, A.GestureArenaEntry, A._GestureArena, A.GestureArenaManager, A._Resampler, A.GestureBinding, A._PointerEvent_Object_Diagnosticable, A._PointerEventDescription, A._AbstractPointerEvent, A._CopyPointerAddedEvent, A._CopyPointerRemovedEvent, A._CopyPointerHoverEvent, A._CopyPointerEnterEvent, A._CopyPointerExitEvent, A._CopyPointerDownEvent, A._CopyPointerMoveEvent, A._CopyPointerUpEvent, A._CopyPointerScrollEvent, A._CopyPointerCancelEvent, A.DeviceGestureSettings, A.HitTestEntry, A._TransformPart, A.HitTestResult, A._Vector, A._Matrix, A.PolynomialFit, A.LeastSquaresSolver, A._CountdownZoned, A._TapTracker, A.PointerRouter, A.PointerSignalResolver, A.OffsetPair, A.TapDownDetails, A.TapUpDetails, A.VelocityEstimate, A._PointAtTime, A.VelocityTracker, A._AppBarTheme_Object_Diagnosticable, A._MaterialBannerThemeData_Object_Diagnosticable, A._BottomAppBarTheme_Object_Diagnosticable, A._BottomNavigationBarThemeData_Object_Diagnosticable, A._BottomSheetThemeData_Object_Diagnosticable, A._ButtonBarThemeData_Object_Diagnosticable, A._ButtonThemeData_Object_Diagnosticable, A._CardTheme_Object_Diagnosticable, A._CheckboxThemeData_Object_Diagnosticable, A._ChipThemeData_Object_Diagnosticable, A._ColorScheme_Object_Diagnosticable, A._DataTableThemeData_Object_Diagnosticable, A._DialogTheme_Object_Diagnosticable, A._DividerThemeData_Object_Diagnosticable, A._DrawerThemeData_Object_Diagnosticable, A._ElevatedButtonThemeData_Object_Diagnosticable, A._FloatingActionButtonThemeData_Object_Diagnosticable, A._State_Object_Diagnosticable, A.InkFeature, A.InteractiveInkFeatureFactory, A.FloatingLabelAlignment, A._InputDecorationTheme_Object_Diagnosticable, A._ListTileThemeData_Object_Diagnosticable, A._MouseCursor_Object_Diagnosticable, A._NavigationBarThemeData_Object_Diagnosticable, A._NavigationRailThemeData_Object_Diagnosticable, A._OutlinedButtonThemeData_Object_Diagnosticable, A.PageTransitionsBuilder, A._PageTransitionsTheme_Object_Diagnosticable, A._PopupMenuThemeData_Object_Diagnosticable, A._ProgressIndicatorThemeData_Object_Diagnosticable, A._RadioThemeData_Object_Diagnosticable, A._ScrollbarThemeData_Object_Diagnosticable, A._SliderThemeData_Object_Diagnosticable, A._SnackBarThemeData_Object_Diagnosticable, A._SwitchThemeData_Object_Diagnosticable, A._TabBarTheme_Object_Diagnosticable, A._TextButtonThemeData_Object_Diagnosticable, A._TextSelectionThemeData_Object_Diagnosticable, A._TextTheme_Object_Diagnosticable, A._ThemeData_Object_Diagnosticable, A._IdentityThemeDataCacheKey, A._FifoCache, A._VisualDensity_Object_Diagnosticable, A._TimePickerThemeData_Object_Diagnosticable, A._ToggleButtonsThemeData_Object_Diagnosticable, A._TooltipThemeData_Object_Diagnosticable, A._Typography_Object_Diagnosticable, A.AlignmentGeometry, A.PaintingBinding, A.BorderRadiusGeometry, A.BorderSide, A.ShapeBorder, A._Decoration_Object_Diagnosticable, A.BoxPainter, A.ClipContext, A.DecorationImagePainter, A.EdgeInsetsGeometry, A.ImageCache, A.ImageConfiguration, A.ImageStreamListener, A.Accumulator, A.InlineSpanSemanticsInformation, A.PlaceholderDimensions, A.TextPainter, A._TextStyle_Object_Diagnosticable, A.RendererBinding, A.Constraints, A.ParentData, A.RenderBoxContainerDefaultsMixin, A.DebugOverflowIndicatorMixin, A._LayoutSizes, A.AnnotationResult, A.LayerHandle, A._MouseState, A.__MouseTrackerUpdateDetails_Object_Diagnosticable, A.SemanticsHandle, A.PipelineOwner, A.RenderObjectWithChildMixin, A.ContainerParentDataMixin, A.ContainerRenderObjectMixin, A.RelayoutWhenSystemFontsChangeMixin, A._SemanticsFragment, A._SemanticsGeometry, A.RenderProxyBoxMixin, A.ViewConfiguration, A._FrameCallbackEntry, A.SchedulerBinding, A.Ticker, A.TickerFuture, A.SemanticsBinding, A.AttributedString, A._SemanticsData_Object_Diagnosticable, A._BoxEdge, A._TraversalSortNode, A.SemanticsConfiguration, A._SemanticsSortKey_Object_Diagnosticable, A.AssetBundle, A.BinaryMessenger, A.ServicesBinding, A.KeyboardLockMode, A._KeyEvent_Object_Diagnosticable, A.HardwareKeyboard, A.KeyMessage, A.KeyEventManager, A._KeyboardKey_Object_Diagnosticable, A.MethodCall0, A.PlatformException, A.MissingPluginException, A.StringCodec, A.JSONMessageCodec0, A.JSONMethodCodec0, A.StandardMessageCodec0, A.StandardMethodCodec0, A.MouseCursorManager, A.MouseCursorSession, A.BasicMessageChannel, A.MethodChannel, A._RawKeyEventData_Object_Diagnosticable, A._RawKeyEvent_Object_Diagnosticable, A.RawKeyboard, A._ModifierSidePair, A.RestorationBucket, A._Action_Object_Diagnosticable, A.Notification0, A.AutomaticKeepAliveClientMixin, A.WidgetsBindingObserver, A.WidgetsBinding, A.FocusAttachment, A._FocusNode_Object_DiagnosticableTreeMixin, A._FocusManager_Object_DiagnosticableTreeMixin, A.InheritedTreeCache, A._InactiveElements, A.BuildOwner, A.IndexedSlot, A.GestureRecognizerFactory, A.SemanticsGestureDelegate, A._IconThemeData_Object_Diagnosticable, A.MediaQueryData, A.SlottedMultiChildRenderObjectWidgetMixin, A.SlottedContainerRenderObjectMixin, A.SingleTickerProviderStateMixin, A.TickerProviderStateMixin, A.Matrix3, A.Matrix4, A.Quaternion, A.Vector3, A.Vector4]);
    _inheritMany(A.Closure, [A.AssetManager__baseUrl_closure, A.Closure0Args, A.ProductionCollector_closure, A.patchCanvasKitModule_closure0, A.patchCanvasKitModule_closure2, A.HtmlViewEmbedder_getOverlayCanvases_closure, A.HtmlViewEmbedder_submitFrame_closure, A.HtmlViewEmbedder_submitFrame_closure0, A.Closure2Args, A.HtmlViewEmbedder__updateOverlays_closure, A.FontFallbackData_ensureFontsSupportText_closure, A._registerSymbolsAndEmoji_extractUrlFromCss, A.findMinimumFontsForCodeUnits_closure, A.findMinimumFontsForCodeUnits_closure0, A.NotoDownloader_downloadAsBytes_closure, A.NotoDownloader_downloadAsBytes__closure, A.NotoDownloader_downloadAsString_closure, A.NotoDownloader_downloadAsString__closure, A.SkiaFontCollection__getArrayBuffer_closure, A.downloadCanvasKit_closure0, A._downloadCanvasKitJs_closure, A.IntervalTree_IntervalTree$createFromRanges__makeBalancedTree, A.IntervalTree_IntervalTree$createFromRanges__computeHigh, A._getEffectiveFontFamilies_closure, A.ClipboardMessageHandler_setDataMethodCall_closure, A.ClipboardMessageHandler_setDataMethodCall_closure0, A.ClipboardMessageHandler_getDataMethodCall_closure, A.ClipboardMessageHandler_getDataMethodCall_closure0, A.ClipboardMessageHandler_getDataMethodCall__closure, A.FlutterViewEmbedder_reset_closure, A.FlutterViewEmbedder_setPreferredOrientation_closure, A.FlutterViewEmbedder_setPreferredOrientation_closure0, A.sendFontChangeMessage_closure, A.sendFontChangeMessage__closure, A.NormalizedGradient_NormalizedGradient_closure, A.initializeEngine__closure, A._addUrlStrategyListener_closure, A.Keyboard$__closure, A.Keyboard$__closure0, A.Keyboard__handleHtmlEvent_closure0, A._kLogicalKeyToModifierGetter_closure, A._kLogicalKeyToModifierGetter_closure0, A._kLogicalKeyToModifierGetter_closure1, A._kLogicalKeyToModifierGetter_closure2, A._kLogicalKeyToModifierGetter_closure3, A._kLogicalKeyToModifierGetter_closure4, A._kLogicalKeyToModifierGetter_closure5, A._kLogicalKeyToModifierGetter_closure6, A.KeyboardBinding__addEventListener_loggedHandler, A.KeyboardBinding__onKeyData_closure, A.KeyboardBinding__setup_closure, A.KeyboardBinding__setup_closure0, A.KeyboardConverter__scheduleAsyncEvent_closure, A.KeyboardConverter_handleEvent_closure, A.MultiEntriesBrowserHistory_onPopState_closure, A.SingleEntryBrowserHistory_onPopState_closure, A.SingleEntryBrowserHistory_onPopState_closure0, A.HashUrlStrategy__waitForPopState_closure, A.EnginePlatformDispatcher__zonedPlatformMessageResponseCallback_closure, A.EnginePlatformDispatcher__sendPlatformMessage_closure, A.EnginePlatformDispatcher__sendPlatformMessage_closure0, A.EnginePlatformDispatcher__sendPlatformMessage_closure1, A.EnginePlatformDispatcher__sendPlatformMessage_closure2, A.EnginePlatformDispatcher__sendPlatformMessage_closure3, A.EnginePlatformDispatcher__sendPlatformMessage_closure4, A.EnginePlatformDispatcher__addBrightnessMediaQueryListener_closure, A.EnginePlatformDispatcher_replyToPlatformMessage_closure, A._BaseAdapter_addEventListener_loggedHandler, A._WheelEventListenerMixin__addWheelEventListener_closure, A._PointerAdapter__addPointerEventListener_closure, A._PointerAdapter_setup_closure, A._PointerAdapter_setup_closure0, A._PointerAdapter_setup_closure1, A._PointerAdapter_setup_closure2, A._PointerAdapter_setup_closure3, A._TouchAdapter__addTouchEventListener_closure, A._TouchAdapter_setup_closure, A._TouchAdapter_setup_closure0, A._TouchAdapter_setup_closure1, A._TouchAdapter_setup_closure2, A._MouseAdapter__addMouseEventListener_closure, A._MouseAdapter_setup_closure, A._MouseAdapter_setup_closure0, A._MouseAdapter_setup_closure1, A._MouseAdapter_setup_closure2, A.Incrementable_closure, A.Incrementable_closure0, A.Scrollable_update_closure0, A.Scrollable_update_closure1, A._roleFactories_closure, A._roleFactories_closure0, A._roleFactories_closure1, A._roleFactories_closure2, A._roleFactories_closure3, A._roleFactories_closure4, A._roleFactories_closure5, A._roleFactories_closure6, A.DesktopSemanticsEnabler_prepareAccessibilityPlaceholder_closure, A.MobileSemanticsEnabler_prepareAccessibilityPlaceholder_closure, A.Tappable_update_closure, A.TextField__initializeForBlink_closure, A.TextField__initializeForWebkit_closure, A.TextField__initializeForWebkit_closure0, A.FontManager__loadFontFace_closure, A.FontManager__loadFontFace_closure0, A._PolyfillFontManager_registerAsset_closure, A.EngineAutofillForm_fromFrameworkMessage_closure, A.EngineAutofillForm_addInputEventListeners_addSubscriptionForKey, A.EngineAutofillForm_addInputEventListeners_addSubscriptionForKey_closure, A.DefaultTextEditingStrategy_addEventHandlers_closure, A.DefaultTextEditingStrategy_preventDefaultForMouseEvents_closure, A.DefaultTextEditingStrategy_preventDefaultForMouseEvents_closure0, A.DefaultTextEditingStrategy_preventDefaultForMouseEvents_closure1, A.IOSTextEditingStrategy_addEventHandlers_closure, A.IOSTextEditingStrategy_addEventHandlers_closure0, A.IOSTextEditingStrategy__addTapListener_closure, A.AndroidTextEditingStrategy_addEventHandlers_closure, A.FirefoxTextEditingStrategy_addEventHandlers_closure, A.FirefoxTextEditingStrategy_addEventHandlers_closure0, A.HybridTextEditing__startEditing_closure, A.ConstantStringMap_values_closure, A.GeneralConstantMap__typeTest_closure, A.TearOffClosure, A.JsLinkedHashMap_values_closure, A.JsLinkedHashMap_containsValue_closure, A.initHooks_closure, A.initHooks_closure1, A._AsyncRun__initializeScheduleImmediate_internalCallback, A._AsyncRun__initializeScheduleImmediate_closure, A._awaitOnObject_closure, A.Future_wait_closure, A._Future__chainForeignFuture_closure, A._Future__propagateToListeners_handleWhenCompleteCallback_closure, A.Stream_length_closure, A._RootZone_bindUnaryCallbackGuarded_closure, A._LinkedCustomHashMap_closure, A.MapMixin_entries_closure, A._createTables_setChars, A._createTables_setRange, A.Element_Element$html_closure, A.Entry_remove_closure0, A.HttpRequest_request_closure, A._EventStreamSubscription_closure, A.NodeValidatorBuilder_allowsElement_closure, A.NodeValidatorBuilder_allowsAttribute_closure, A._SimpleNodeValidator_closure, A._SimpleNodeValidator_closure0, A._TemplatingNodeValidator_closure, A._convertDartToNative_Value_closure, A.FilteredElementList__iterable_closure, A.FilteredElementList__iterable_closure0, A.FilteredElementList_removeRange_closure, A.JsObject__convertDataTree__convert, A._convertToJS_closure, A._convertToJS_closure0, A._wrapToDart_closure, A._wrapToDart_closure0, A._wrapToDart_closure1, A.promiseToFuture_closure, A.promiseToFuture_closure0, A.KeyData__quotedCharCode_closure, A.FlutterErrorDetails_summary_closure, A.FlutterErrorDetails_debugFillProperties_closure, A.FlutterError_FlutterError_closure, A.FlutterError_defaultStackFilter_closure, A.FlutterError_defaultStackFilter_closure0, A.FlutterError_toString_closure, A.debugPrintStack_closure, A.BindingBase_initServiceExtensions_closure0, A.BindingBase_initServiceExtensions_closure2, A.BindingBase_registerBoolServiceExtension_closure, A.BindingBase_registerNumericServiceExtension_closure, A.BindingBase_registerStringServiceExtension_closure, A._PrefixedStringBuilder__wordWrapLine_noWrap, A.TextTreeRenderer__debugRender_visitor, A.TextTreeRenderer__debugRender_closure, A.StackFrame_fromStackString_closure, A._GestureArena_toString_closure, A.PointerEventConverter_expand_closure, A.PointerEventConverter_expand_closure0, A._InkResponseState_highlightsExist_closure, A._RenderListTile_paint_doPaint, A._MaterialState_build_closure, A.PageTransitionsTheme__all_closure, A._CompoundBorder_scale_closure, A._CompoundBorder_toString_closure, A.ClipContext_clipPathAndPaint_closure, A.ClipContext_clipRectAndPaint_closure, A.InlineSpan_getSpanForPosition_closure, A._ShapeDecorationPainter__precache_closure, A._ShapeDecorationPainter__precache_closure0, A.TextSpan_debugDescribeChildren_closure, A.RendererBinding__scheduleMouseTrackerUpdate_closure, A.BoxConstraints_toString_describe, A.MouseTracker__handleDeviceUpdate_closure, A.MouseTracker__handleDeviceUpdateMouseEvents_closure0, A.RenderObject_reassemble_closure, A.RenderObject__updateCompositingBits_closure, A.RenderObject_clearSemantics_closure, A.RenderObject__getSemanticsForParent_closure, A.RenderParagraph__extractPlaceholderSpans_closure, A.RenderParagraph_describeSemanticsConfiguration_closure, A.SchedulerBinding_endOfFrame_closure, A.SemanticsNode__childrenInTraversalOrder_closure, A.SemanticsNode_debugDescribeChildren_closure, A._SemanticsSortGroup_sortedWithinVerticalGroup_closure, A._SemanticsSortGroup_sortedWithinKnot_search, A._SemanticsSortGroup_sortedWithinKnot_closure0, A._SemanticsSortGroup_sortedWithinKnot_closure1, A._childrenInDefaultOrder_closure, A.SemanticsOwner_sendSemanticsUpdate_closure, A.SemanticsOwner__getSemanticsActionHandlerForId_closure, A.SemanticsConfiguration__addArgumentlessAction_closure, A._DefaultBinaryMessenger_send_closure, A.BasicMessageChannel_setMessageHandler_closure, A.MethodChannel_setMethodCallHandler_closure, A.RawKeyboard__synchronizeModifiers_closure, A.RestorationManager_handleRestorationUpdateFromEngine_closure, A.RestorationManager_scheduleSerializationFor_closure, A.RestorationBucket__visitChildren_closure, A.RichText__extractChildren_closure, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure0, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure1, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure3, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure5, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initInstances_closure, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure0, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_initInstances_closure, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure0, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure1, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure2, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure4, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_drawFrame_closure, A.FocusNode_debugDescribeChildren_closure, A._InactiveElements__unmount_closure, A.Element_renderObject_visit, A.Element_updateSlotForChild_visit, A.Element__updateDepth_closure, A.Element_detachRenderObject_closure, A.Element_attachRenderObject_closure, A.Element_debugDescribeChildren_closure, A.RenderObjectElement_updateChildren_replaceWithNullIfForgotten, A.GestureDetector_build_closure0, A.GestureDetector_build_closure2, A.GestureDetector_build_closure4, A.IconTheme_merge_closure, A.ImplicitlyAnimatedWidgetState_initState_closure, A.ImplicitlyAnimatedWidgetState_didUpdateWidget_closure, A.ImplicitlyAnimatedWidgetState__constructTweens_closure, A._AnimatedContainerState_forEachTween_closure, A._AnimatedContainerState_forEachTween_closure0, A._AnimatedContainerState_forEachTween_closure1, A._AnimatedContainerState_forEachTween_closure2, A._AnimatedContainerState_forEachTween_closure3, A._AnimatedContainerState_forEachTween_closure4, A._AnimatedContainerState_forEachTween_closure5, A._AnimatedContainerState_forEachTween_closure6, A._AnimatedDefaultTextStyleState_forEachTween_closure, A._AnimatedPhysicalModelState_forEachTween_closure, A._AnimatedPhysicalModelState_forEachTween_closure0, A._AnimatedPhysicalModelState_forEachTween_closure1, A._AnimatedPhysicalModelState_forEachTween_closure2]);
    _inheritMany(A.Closure0Args, [A.AssetManager__baseUrl_closure0, A.ProductionCollector_collect_closure, A.patchCanvasKitModule_closure, A.patchCanvasKitModule_closure1, A.FontFallbackData_createNotoFontTree_closure, A.FontFallbackData_registerFallbackFont_closure, A._makeResolvedNotoFontFromCss_closure, A.FallbackFontDownloadQueue_startDownloads_closure, A.SkiaFontCollection_ensureFontsLoaded_closure, A.SkiaFontCollection_ensureFontsLoaded_closure0, A.SkiaFontCollection__registerFont__downloadFont, A.Frame_raster_closure, A.Frame_raster_closure0, A.CkTextStyle_skTextStyle_closure, A.PersistedPicture__applyBitmapPaint_closure, A.SurfaceSceneBuilder_build_closure, A.SurfaceSceneBuilder_build_closure0, A.initializeEngine_closure0, A._addUrlStrategyListener_closure0, A.Keyboard$__closure1, A.Keyboard__handleHtmlEvent_closure, A.KeyboardConverter__scheduleAsyncEvent_closure0, A.KeyboardConverter__startGuardingKey_closure, A.KeyboardConverter__startGuardingKey_closure0, A.KeyboardConverter__handleEvent_closure, A.KeyboardConverter__handleEvent_closure0, A.KeyboardConverter__handleEvent_closure1, A.HashUrlStrategy_addPopStateListener_closure, A.EnginePlatformDispatcher_invokeOnKeyData_closure, A.EnginePlatformDispatcher__addFontSizeObserver_closure0, A.EnginePlatformDispatcher__addBrightnessMediaQueryListener_closure0, A.invoke2_closure, A.invoke3_closure, A.PlatformViewManager_renderContent_closure, A._PointerAdapter__ensureSanitizer_closure, A.PointerDataConverter__ensureStateForPointer_closure, A.AccessibilityAnnouncements$__closure, A.AccessibilityAnnouncements_handleMessage_closure, A.Scrollable_update_closure, A.EngineSemanticsOwner$__closure, A.EngineSemanticsOwner__now_closure, A.EngineSemanticsOwner__getGestureModeClock_closure, A.MobileSemanticsEnabler_tryEnableSemantics_closure, A.TextField_update_closure, A._PolyfillFontManager_registerAsset__watchWidth, A.IOSTextEditingStrategy__schedulePlacement_closure, A.FirefoxTextEditingStrategy__postponeFocus_closure, A.TextEditingChannel_handleTextInput_closure, A.EngineFlutterWindow_closure, A.EngineFlutterWindow_handleNavigationMessage_closure, A.nullFuture_closure, A.Primitives_initTicker_closure, A._AsyncRun__scheduleImmediateJsOverride_internalCallback, A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, A._TimerImpl_internalCallback, A._TimerImpl$periodic_closure, A.Future_Future_closure, A.Future_Future$delayed_closure, A._Future__addListener_closure, A._Future__prependListeners_closure, A._Future__chainForeignFuture_closure1, A._Future__asyncCompleteWithValue_closure, A._Future__chainFuture_closure, A._Future__asyncCompleteError_closure, A._Future__propagateToListeners_handleWhenCompleteCallback, A._Future__propagateToListeners_handleValueCallback, A._Future__propagateToListeners_handleError, A.Stream_length_closure0, A._StreamController__subscribe_closure, A._StreamController__recordCancel_complete, A._BufferingStreamSubscription__sendDone_sendDone, A._PendingEvents_schedule_closure, A._rootHandleError_closure, A._RootZone_bindCallbackGuarded_closure, A.Utf8Decoder__decoder_closure, A.Utf8Decoder__decoderNonfatal_closure, A.Entry_remove_closure, A.ChannelBuffers_push_closure, A.ChannelBuffers_setListener_closure, A.webOnlyInitializePlatform_closure, A.KeyData__logicalToString_closure, A._testPlatform_closure, A._browserPlatform_closure, A.FlutterErrorDetails_summary_formatException, A.FlutterErrorDetails_summary_closure0, A.BindingBase_initServiceExtensions_closure, A.BindingBase_initServiceExtensions_closure1, A.BindingBase_lockEvents_closure, A.BindingBase_registerServiceExtension__closure, A.ChangeNotifier_notifyListeners_closure, A.GestureArenaManager_add_closure, A.GestureArenaManager__tryToResolveArena_closure, A.GestureBinding_dispatchEvent_closure, A.GestureBinding_dispatchEvent_closure0, A.PointerRouter_addRoute_closure, A.PrimaryPointerGestureRecognizer_addAllowedPointer_closure, A.TapGestureRecognizer_handleTapDown_closure, A.TapGestureRecognizer_handleTapUp_closure, A._getClipCallback_closure, A._InkResponseState_updateHighlight_handleInkRemoval, A._InkResponseState__createInkFeature_onRemoved, A._InkResponseState__handleFocusHighlightModeChange_closure, A.ThemeData_localize_closure, A.RenderBox_getDryLayout_closure, A.RenderBox_getDistanceToActualBaseline_closure, A.MouseTracker_updateWithEvent_closure, A.MouseTracker_updateWithEvent__closure, A.MouseTracker_updateAllDevices_closure, A.PaintingContext_pushClipRect_closure, A.PaintingContext_pushClipPath_closure, A.RenderObject__debugReportException_closure, A.SchedulerBinding_scheduleWarmUpFrame_closure, A.SchedulerBinding_scheduleWarmUpFrame_closure0, A.SchedulerBinding_scheduleWarmUpFrame_closure1, A.ServicesBinding__addLicenses_closure, A.RawKeyEvent_RawKeyEvent$fromMessage__dataFromWeb, A.RestorationBucket__rawChildren_closure, A._ActionsState__handleActionChanged_closure, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure2, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure4, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_dispatchEvent_closure, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_initServiceExtensions_closure, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure3, A.RenderObjectToWidgetAdapter_attachToRenderTree_closure, A.RenderObjectToWidgetAdapter_attachToRenderTree_closure0, A._FocusState__handleFocusChanged_closure, A._FocusState__handleFocusChanged_closure0, A._FocusState__handleFocusChanged_closure1, A._FocusState__handleFocusChanged_closure2, A.BuildOwner_buildScope_closure, A.ComponentElement_performRebuild_closure, A.ComponentElement_performRebuild_closure0, A.GestureDetector_build_closure, A.GestureDetector_build_closure1, A.GestureDetector_build_closure3, A.AnimatedWidgetBaseState__handleAnimationChanged_closure, A._MediaQueryFromWindowState_didChangeMetrics_closure, A._MediaQueryFromWindowState_didChangeTextScaleFactor_closure, A._MediaQueryFromWindowState_didChangePlatformBrightness_closure]);
    _inheritMany(A._Enum, [A.BrowserEngine, A.OperatingSystem, A.MutatorType, A._ParagraphCommandType, A.PersistedSurfaceState, A._CheckableKind, A.Role, A.AccessibilityMode, A.GestureMode, A.EnabledState, A.LineCharProperty, A.LineBreakType, A._ComparisonResult, A.TextCapitalization, A.TransformKind, A.ClipOp, A.PathFillType, A.KeyEventType, A.StrokeCap, A.StrokeJoin, A.PaintingStyle, A.BlendMode, A.Clip, A.FilterQuality, A.AppLifecycleState, A.PointerChange, A.PointerDeviceKind, A.PointerSignalKind, A.PlaceholderAlignment, A.TextAlign, A.TextBaseline, A.TextLeadingDistribution, A.TextDirection, A.TextAffinity, A.BoxHeightStyle, A.BoxWidthStyle, A.TileMode, A.Brightness, A.AnimationStatus, A._AnimationDirection, A.AnimationBehavior, A.DiagnosticLevel, A.DiagnosticsTreeStyle, A._WordWrapParseMode, A.TargetPlatform, A.GestureDisposition, A.DragStartBehavior, A.GestureRecognizerState, A.ButtonTextTheme, A._HighlightType, A.FloatingLabelBehavior, A._ListTileSlot, A.MaterialType, A.MaterialState, A.MaterialTapTargetSize, A.ScriptCategory, A.RenderComparison, A.Axis, A.VerticalDirection, A.BorderStyle, A.BoxShape, A.BoxFit, A.TextOverflow, A.TextWidthBasis, A.MainAxisSize, A.MainAxisAlignment, A.CrossAxisAlignment, A.HitTestBehavior, A.DecorationPosition, A.SchedulerPhase, A.DebugSemanticsDumpOrder, A.KeyDataTransitMode, A.KeyboardSide, A.ModifierKey, A.KeyEventResult, A.UnfocusDisposition, A.FocusHighlightMode, A.FocusHighlightStrategy, A._StateLifecycle, A._ElementLifecycle, A.NavigationMode]);
    _inherit(A.CanvasPool, A._SaveStackTracking);
    _inherit(A.RecordingCkCanvas, A.CkCanvas);
    _inheritMany(A.CkPaintCommand, [A.CkClearCommand, A.CkSaveCommand, A.CkRestoreCommand, A.CkRestoreToCountCommand, A.CkTranslateCommand, A.CkTransformCommand, A.CkClipRectCommand, A.CkClipRRectCommand, A.CkClipPathCommand, A.CkDrawPaintCommand, A.CkDrawRectCommand, A.CkDrawRRectCommand, A.CkDrawDRRectCommand, A.CkDrawCircleCommand, A.CkDrawPathCommand, A.CkDrawShadowCommand, A.CkDrawParagraphCommand, A.CkDrawPictureCommand, A.CkSaveLayerCommand]);
    _inheritMany(J.Interceptor, [J.JavaScriptObject, J.JSBool, J.JSNull, J.JSArray, J.JSNumber, J.JSString, A.NativeByteBuffer, A.NativeTypedData]);
    _inheritMany(J.JavaScriptObject, [J.LegacyJavaScriptObject, A.EventTarget, A.AccessibleNodeList, A.Blob, A.Body, A.CanvasRenderingContext2D, A.Credential, A.CredentialUserData, A.CssRule, A.CssTransformComponent, A._CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase, A.StyleSheet, A.CssStyleValue, A.DataTransferItemList, A.DomError, A.DomException, A._DomRectList_JavaScriptObject_ListMixin, A.DomRectReadOnly, A._DomStringList_JavaScriptObject_ListMixin, A.DomTokenList, A.Entry, A.Event, A._FileList_JavaScriptObject_ListMixin, A.FileSystem, A.FontFace, A.Gamepad, A.History, A._HtmlCollection_JavaScriptObject_ListMixin, A.ImageData, A.Location, A.MediaList, A._MidiInputMap_JavaScriptObject_MapMixin, A._MidiOutputMap_JavaScriptObject_MapMixin, A.MimeType, A._MimeTypeArray_JavaScriptObject_ListMixin, A.MutationObserver, A.MutationRecord, A.NavigatorUserMediaError, A._NodeList_JavaScriptObject_ListMixin, A.OverconstrainedError, A.PerformanceEntry, A.PerformanceServerTiming, A.Plugin, A._PluginArray_JavaScriptObject_ListMixin, A._RtcStatsReport_JavaScriptObject_MapMixin, A.SpeechGrammar, A._SpeechGrammarList_JavaScriptObject_ListMixin, A.SpeechRecognitionResult, A.SpeechSynthesisVoice, A._Storage_JavaScriptObject_MapMixin, A._TextTrackCueList_JavaScriptObject_ListMixin, A.TimeRanges, A.Touch, A._TouchList_JavaScriptObject_ListMixin, A.TrackDefaultList, A.Url, A.__CssRuleList_JavaScriptObject_ListMixin, A.__GamepadList_JavaScriptObject_ListMixin, A.__NamedNodeMap_JavaScriptObject_ListMixin, A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin, A.__StyleSheetList_JavaScriptObject_ListMixin, A.Index, A.KeyRange, A.ObjectStore, A.Length, A._LengthList_JavaScriptObject_ListMixin, A.Number, A._NumberList_JavaScriptObject_ListMixin, A.PointList, A._StringList_JavaScriptObject_ListMixin, A.Transform0, A._TransformList_JavaScriptObject_ListMixin, A.AudioBuffer, A._AudioParamMap_JavaScriptObject_MapMixin, A.ActiveInfo]);
    _inheritMany(J.LegacyJavaScriptObject, [A.H5vcc, A.CanvasKit, A.CanvasKitInitOptions, A.CanvasKitInitPromise, A.ColorSpace, A.SkWebGLContextOptions, A.SkSurface, A.SkGrContext, A.SkFontSlantEnum, A.SkFontSlant, A.SkFontWeightEnum, A.SkFontWeight, A.SkAffinityEnum, A.SkAffinity, A.SkTextDirectionEnum, A.SkTextDirection, A.SkTextAlignEnum, A.SkTextAlign, A.SkTextHeightBehaviorEnum, A.SkTextHeightBehavior, A.SkRectHeightStyleEnum, A.SkRectHeightStyle, A.SkRectWidthStyleEnum, A.SkRectWidthStyle, A.SkVertexModeEnum, A.SkVertexMode, A.SkPointModeEnum, A.SkPointMode, A.SkClipOpEnum, A.SkClipOp, A.SkFillTypeEnum, A.SkFillType, A.SkPathOpEnum, A.SkPathOp, A.SkBlurStyleEnum, A.SkBlurStyle, A.SkStrokeCapEnum, A.SkStrokeCap, A.SkPaintStyleEnum, A.SkPaintStyle, A.SkBlendModeEnum, A.SkBlendMode, A.SkStrokeJoinEnum, A.SkStrokeJoin, A.SkTileModeEnum, A.SkTileMode, A.SkFilterModeEnum, A.SkFilterMode, A.SkMipmapModeEnum, A.SkMipmapMode, A.SkAlphaTypeEnum, A.SkAlphaType, A.SkColorTypeEnum, A.SkColorType, A.SkAnimatedImage, A.SkImage, A.SkShaderNamespace, A.SkShader, A.SkMaskFilterNamespace, A.SkPaint, A.CkFilterOptions, A.SkMaskFilter, A.SkColorFilterNamespace, A.SkColorFilter, A.SkImageFilterNamespace, A.SkImageFilter, A.SkPathNamespace, A._NativeFloat32ArrayType, A.SkFloat32List, A.SkPath, A.SkContourMeasureIter, A.SkContourMeasure, A.SkPictureRecorder, A.SkCanvas, A.SkPicture, A.SkParagraphBuilderNamespace, A.SkParagraphBuilder, A.SkParagraphStyle, A.SkParagraphStyleProperties, A.SkTextStyle, A.SkTextDecorationStyleEnum, A.SkTextDecorationStyle, A.SkTextBaselineEnum, A.SkTextBaseline, A.SkPlaceholderAlignmentEnum, A.SkPlaceholderAlignment, A.SkTextStyleProperties, A.SkStrutStyleProperties, A.SkFontStyle, A.SkTextShadow, A.SkFontFeature, A.SkTypeface, A.SkFont, A.SkFontMgr, A.SkLineMetrics, A.SkParagraph, A.SkTextPosition, A.SkTextRange, A.SkVertices, A.SkTonalColors, A.SkFontMgrNamespace, A.TypefaceFontProviderNamespace, A.SkTypefaceFactory, A.SkDeletable, A.JsConstructor, A.SkObjectFinalizationRegistry, A.SkData, A.SkImageInfo, A.SkPartialImageInfo, A.JsFlutterConfiguration, A.JsUrlStrategy, A.JsPromise, A.ImageDecoder, A.ImageDecoderOptions, A.DecodeResult, A.DecodeOptions, A.VideoFrame, A.ImageTrackList, A.ImageTrack, J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inheritMany(A.CkFilterOptions, [A._CkCubicFilterOptions, A._CkTransformFilterOptions]);
    _inherit(A.TypefaceFontProvider, A.SkFontMgr);
    _inheritMany(A.Closure2Args, [A.HtmlViewEmbedder_submitFrame_closure1, A.downloadCanvasKit_closure, A.IntervalTree_IntervalTree$createFromRanges_closure, A.IntervalTree_IntervalTree$createFromRanges_closure0, A.Surface_acquireFrame_closure, A.commitScene_closure, A.PersistedContainerSurface__matchChildren_closure, A.initializeEngine_closure, A.KeyboardConverter__handleEvent_closure2, A.KeyboardConverter__handleEvent__closure, A.EnginePlatformDispatcher__addFontSizeObserver_closure, A.StandardMessageCodec_writeValue_closure, A.saveForms_closure, A.HybridTextEditing__startEditing_closure0, A.Primitives_functionNoSuchMethod_closure, A.JsLinkedHashMap_addAll_closure, A.initHooks_closure0, A._awaitOnObject_closure0, A._wrapJsFunctionForAsync_closure, A.Future_wait_handleError, A._Future__chainForeignFuture_closure0, A._RootZone_bindBinaryCallbackGuarded_closure, A.MapBase_mapToString_closure, A._JsonStringifier_writeMap_closure, A.NoSuchMethodError_toString_closure, A.Uri__parseIPv4Address_error, A.Uri_parseIPv6Address_error, A.Uri_parseIPv6Address_parseHex, A._Uri__makeQuery_writeParameter, A._Uri__makeQuery_closure, A._createTables_build, A.MidiInputMap_keys_closure, A.MidiOutputMap_keys_closure, A.MutationObserver_observe_override, A.RtcStatsReport_keys_closure, A.Storage_keys_closure, A._ValidatingTreeSanitizer_sanitizeTree_walk, A._StructuredClone_walk_closure, A._StructuredClone_walk_closure0, A._AcceptStructuredClone_walk_closure, A.convertDartToNative_Dictionary_closure, A.AudioParamMap_keys_closure, A.BindingBase_registerServiceExtension_closure, A.PointerRouter__dispatchEventToRoutes_closure, A._RenderListTile_hitTestChildren_closure, A._CompoundBorder_dimensions_closure, A.RenderBoxContainerDefaultsMixin_defaultHitTestChildren_closure, A.MouseTracker__handleDeviceUpdateMouseEvents_closure, A.PipelineOwner_flushLayout_closure, A.PipelineOwner_flushCompositingBits_closure, A.PipelineOwner_flushPaint_closure, A.PipelineOwner_flushSemantics_closure, A.RenderParagraph_hitTestChildren_closure, A.RenderParagraph_paint_closure, A.RenderTransform_hitTestChildren_closure, A.RenderShiftedBox_hitTestChildren_closure, A.SchedulerBinding_handleBeginFrame_closure, A._SemanticsSortGroup_sortedWithinKnot_closure, A.SemanticsOwner_sendSemanticsUpdate_closure0, A.SemanticsOwner_sendSemanticsUpdate_closure1, A._DefaultBinaryMessenger_setMessageHandler_closure, A.StandardMessageCodec_writeValue_closure0, A.RenderObjectElement_updateChildren_slotFor]);
    _inheritMany(A.Iterable, [A.MutatorsStack, A._CastIterableBase, A.EfficientLengthIterable, A.MappedIterable, A.WhereIterable, A.ExpandIterable, A.TakeIterable, A.SkipIterable, A.SkipWhileIterable, A.FollowedByIterable, A.WhereTypeIterable, A._ConstantMapKeyIterable, A._StringAllMatchesIterable, A.IterableBase, A.DoubleLinkedQueue, A.ObserverList, A.HashedObserverList]);
    _inheritMany(A.Layer, [A.ContainerLayer, A.PictureLayer0]);
    _inheritMany(A.ContainerLayer, [A.RootLayer, A.ClipPathEngineLayer, A.ClipRectEngineLayer, A.TransformEngineLayer, A.PhysicalShapeEngineLayer]);
    _inherit(A.OffsetEngineLayer, A.TransformEngineLayer);
    _inheritMany(A.SkiaObject, [A.ManagedSkiaObject, A.CkParagraph]);
    _inheritMany(A.ManagedSkiaObject, [A.CkMaskFilter, A.CkPaint, A.CkPath, A.CkPicture, A.CkShader]);
    _inherit(A.CkGradientLinear, A.CkShader);
    _inheritMany(A.Error, [A.CanvasKitError, A.LateError, A.TypeError, A.JsNoSuchMethodError, A.UnknownJsTypeError, A.RuntimeError, A._Error, A.JsonUnsupportedObjectError, A.AssertionError, A.NullThrownError, A.ArgumentError, A.NoSuchMethodError, A.UnsupportedError, A.UnimplementedError, A.StateError, A.ConcurrentModificationError, A.CyclicInitializationError, A._FlutterError_Error_DiagnosticableTreeMixin]);
    _inheritMany(A.EngineCanvas, [A.BitmapCanvas, A._DomCanvas_EngineCanvas_SaveElementStackTracking]);
    _inheritMany(A.PersistedSurface, [A.PersistedContainerSurface, A.PersistedLeafSurface]);
    _inheritMany(A.PersistedContainerSurface, [A._PersistedClipRect_PersistedContainerSurface__DomClip, A._PersistedPhysicalShape_PersistedContainerSurface__DomClip, A.PersistedClipPath, A.PersistedOffset, A.PersistedScene, A.PersistedTransform]);
    _inherit(A.PersistedClipRect, A._PersistedClipRect_PersistedContainerSurface__DomClip);
    _inherit(A.PersistedPhysicalShape, A._PersistedPhysicalShape_PersistedContainerSurface__DomClip);
    _inherit(A.DomCanvas, A._DomCanvas_EngineCanvas_SaveElementStackTracking);
    _inherit(A.PersistedPicture, A.PersistedLeafSurface);
    _inheritMany(A.PaintCommand, [A.DrawCommand, A.PaintSave, A.PaintRestore, A.PaintTranslate, A.PaintTransform]);
    _inheritMany(A.DrawCommand, [A.PaintClipRect, A.PaintClipRRect, A.PaintClipPath, A.PaintDrawRect, A.PaintDrawRRect, A.PaintDrawDRRect, A.PaintDrawCircle, A.PaintDrawPath, A.PaintDrawParagraph]);
    _inherit(A.GradientLinear, A.EngineGradient);
    _inheritMany(A.BrowserHistory, [A.MultiEntriesBrowserHistory, A.SingleEntryBrowserHistory]);
    _inheritMany(A.UrlStrategy, [A.HashUrlStrategy, A.CustomUrlStrategy]);
    _inherit(A.BrowserPlatformLocation, A.PlatformLocation);
    _inherit(A.EnginePlatformDispatcher, A.PlatformDispatcher);
    _inheritMany(A._BaseAdapter, [A.__PointerAdapter__BaseAdapter__WheelEventListenerMixin, A._TouchAdapter, A.__MouseAdapter__BaseAdapter__WheelEventListenerMixin]);
    _inherit(A._PointerAdapter, A.__PointerAdapter__BaseAdapter__WheelEventListenerMixin);
    _inherit(A._MouseAdapter, A.__MouseAdapter__BaseAdapter__WheelEventListenerMixin);
    _inheritMany(A.RoleManager, [A.Checkable, A.ImageRoleManager, A.Incrementable, A.LabelAndValue, A.LiveRegion, A.Scrollable, A.Tappable, A.TextField]);
    _inheritMany(A.SemanticsEnabler, [A.DesktopSemanticsEnabler, A.MobileSemanticsEnabler]);
    _inheritMany(A.DefaultTextEditingStrategy, [A.SemanticsTextEditingStrategy, A.GloballyPositionedTextEditingStrategy, A.SafariDesktopTextEditingStrategy]);
    _inherit(A.ListBase, A._ListBase_Object_ListMixin);
    _inheritMany(A.ListBase, [A._TypedDataBuffer, A.UnmodifiableListBase, A._ChildrenElementList, A._FrozenElementList, A._ChildNodeListLazy, A.FilteredElementList, A.TypedDataBuffer]);
    _inherit(A._IntBuffer, A._TypedDataBuffer);
    _inherit(A.Uint8Buffer, A._IntBuffer);
    _inheritMany(A.StyleNode, [A.ChildStyleNode, A.RootStyleNode]);
    _inherit(A._PolyfillFontManager, A.FontManager);
    _inheritMany(A.RangeBox, [A.PlaceholderBox, A.SpanBox]);
    _inheritMany(A.EngineInputType, [A.NoTextInputType, A.TextInputType, A.NumberInputType, A.DecimalInputType, A.PhoneInputType, A.EmailInputType, A.UrlInputType, A.MultilineInputType]);
    _inheritMany(A.GloballyPositionedTextEditingStrategy, [A.IOSTextEditingStrategy, A.AndroidTextEditingStrategy, A.FirefoxTextEditingStrategy]);
    _inheritMany(A.TextInputCommand, [A.TextInputSetClient, A.TextInputUpdateConfig, A.TextInputSetEditingState, A.TextInputShow, A.TextInputSetEditableSizeAndTransform, A.TextInputSetStyle, A.TextInputClearClient, A.TextInputHide, A.TextInputSetMarkedTextRect, A.TextInputSetCaretRect, A.TextInputRequestAutofill, A.TextInputFinishAutofillContext]);
    _inherit(A.FlutterWindow, A.FlutterView);
    _inherit(A.SingletonFlutterWindow, A.FlutterWindow);
    _inherit(A.EngineFlutterWindow, A.SingletonFlutterWindow);
    _inherit(A.EngineSingletonFlutterWindow, A.EngineFlutterWindow);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A._CastIterableBase, [A.CastIterable, A.__CastListBase__CastIterableBase_ListMixin]);
    _inherit(A._EfficientLengthCastIterable, A.CastIterable);
    _inherit(A._CastListBase, A.__CastListBase__CastIterableBase_ListMixin);
    _inherit(A.CastList, A._CastListBase);
    _inherit(A.CodeUnits, A.UnmodifiableListBase);
    _inheritMany(A.EfficientLengthIterable, [A.ListIterable, A.EmptyIterable, A.LinkedHashMapKeyIterable, A._HashMapKeyIterable]);
    _inheritMany(A.ListIterable, [A.SubListIterable, A.MappedListIterable, A.ReversedListIterable, A.ListQueue, A._JsonMapKeyIterable]);
    _inherit(A.EfficientLengthMappedIterable, A.MappedIterable);
    _inheritMany(A.Iterator, [A.MappedIterator, A.WhereIterator, A.TakeIterator, A.SkipIterator, A.SkipWhileIterator]);
    _inherit(A.EfficientLengthTakeIterable, A.TakeIterable);
    _inherit(A.EfficientLengthSkipIterable, A.SkipIterable);
    _inherit(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A.MapView);
    _inherit(A.UnmodifiableMapView, A._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(A.ConstantMapView, A.UnmodifiableMapView);
    _inheritMany(A.ConstantMap, [A.ConstantStringMap, A.GeneralConstantMap]);
    _inherit(A.NullError, A.TypeError);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inherit(A.MapBase, A.MapMixin);
    _inheritMany(A.MapBase, [A.JsLinkedHashMap, A._HashMap, A._JsonMap, A._AttributeMap]);
    _inheritMany(A.NativeTypedData, [A.NativeByteData, A.NativeTypedArray]);
    _inheritMany(A.NativeTypedArray, [A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfDouble, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfInt, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(A.NativeTypedArrayOfDouble, [A.NativeFloat32List, A.NativeFloat64List]);
    _inheritMany(A.NativeTypedArrayOfInt, [A.NativeInt16List, A.NativeInt32List, A.NativeInt8List, A.NativeUint16List, A.NativeUint32List, A.NativeUint8ClampedList, A.NativeUint8List]);
    _inherit(A._TypeError, A._Error);
    _inherit(A._SyncStarIterable, A.IterableBase);
    _inherit(A._AsyncCompleter, A._Completer);
    _inherit(A._AsyncStreamController, A._StreamController);
    _inheritMany(A.Stream, [A._StreamImpl, A._EventStream]);
    _inherit(A._ControllerStream, A._StreamImpl);
    _inherit(A._ControllerSubscription, A._BufferingStreamSubscription);
    _inherit(A._DelayedData, A._DelayedEvent);
    _inherit(A._StreamImplEvents, A._PendingEvents);
    _inherit(A._RootZone, A._Zone);
    _inherit(A._IdentityHashMap, A._HashMap);
    _inherit(A._LinkedCustomHashMap, A.JsLinkedHashMap);
    _inherit(A._SetBase, A.__SetBase_Object_SetMixin);
    _inheritMany(A._SetBase, [A._HashSet, A._LinkedHashSet, A.__UnmodifiableSet__SetBase__UnmodifiableSetMixin]);
    _inheritMany(A._DoubleLinkedQueueEntry, [A._DoubleLinkedQueueElement, A._DoubleLinkedQueueSentinel]);
    _inherit(A._UnmodifiableSet, A.__UnmodifiableSet__SetBase__UnmodifiableSetMixin);
    _inheritMany(A.Codec, [A.Base64Codec, A.Encoding, A.JsonCodec]);
    _inherit(A.Converter, A.StreamTransformerBase);
    _inheritMany(A.Converter, [A.Base64Encoder, A.JsonEncoder, A.JsonDecoder, A.Utf8Encoder, A.Utf8Decoder]);
    _inherit(A.JsonCyclicError, A.JsonUnsupportedObjectError);
    _inherit(A._JsonStringStringifier, A._JsonStringifier);
    _inherit(A.Utf8Codec, A.Encoding);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError]);
    _inherit(A._DataUri, A._Uri);
    _inheritMany(A.EventTarget, [A.Node, A.BroadcastChannel, A.FileWriter, A.HttpRequestEventTarget, A.MediaKeySession, A.MediaQueryList, A.MessagePort, A.MidiPort, A.OffscreenCanvas, A.ScreenOrientation, A.WorkerGlobalScope, A.SourceBuffer, A._SourceBufferList_EventTarget_ListMixin, A.TextTrack, A.TextTrackCue, A._TextTrackList_EventTarget_ListMixin, A.VideoTrackList, A.Window, A.Database, A.AudioTrackList, A.BaseAudioContext]);
    _inheritMany(A.Node, [A.Element, A.CharacterData, A.Document, A._Attr]);
    _inheritMany(A.Element, [A.HtmlElement, A.SvgElement]);
    _inheritMany(A.HtmlElement, [A.AnchorElement, A.AreaElement, A.BaseElement, A.BodyElement, A.ButtonElement, A.CanvasElement, A.DivElement, A.EmbedElement, A.FieldSetElement, A.FormElement, A.IFrameElement, A.InputElement, A.LabelElement, A.MapElement, A.MetaElement, A.ObjectElement, A.OutputElement, A.ParagraphElement, A.ParamElement, A.SelectElement, A.SlotElement, A.StyleElement, A.TableElement, A.TableRowElement, A.TableSectionElement, A.TemplateElement, A.TextAreaElement]);
    _inherit(A.CssKeyframesRule, A.CssRule);
    _inherit(A.CssPerspective, A.CssTransformComponent);
    _inherit(A.CssStyleDeclaration, A._CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase);
    _inherit(A.CssStyleSheet, A.StyleSheet);
    _inheritMany(A.CssStyleValue, [A.CssTransformValue, A.CssUnparsedValue]);
    _inherit(A._DomRectList_JavaScriptObject_ListMixin_ImmutableListMixin, A._DomRectList_JavaScriptObject_ListMixin);
    _inherit(A.DomRectList, A._DomRectList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._DomStringList_JavaScriptObject_ListMixin_ImmutableListMixin, A._DomStringList_JavaScriptObject_ListMixin);
    _inherit(A.DomStringList, A._DomStringList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inheritMany(A.Credential, [A.FederatedCredential, A.PasswordCredential]);
    _inherit(A.File, A.Blob);
    _inherit(A._FileList_JavaScriptObject_ListMixin_ImmutableListMixin, A._FileList_JavaScriptObject_ListMixin);
    _inherit(A.FileList, A._FileList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin, A._HtmlCollection_JavaScriptObject_ListMixin);
    _inherit(A.HtmlCollection, A._HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.HtmlDocument, A.Document);
    _inherit(A.HttpRequest, A.HttpRequestEventTarget);
    _inheritMany(A.Event, [A.UIEvent, A.MediaQueryListEvent, A.ProgressEvent, A.SpeechSynthesisEvent, A.VersionChangeEvent]);
    _inheritMany(A.UIEvent, [A.KeyboardEvent, A.MouseEvent, A.TouchEvent]);
    _inherit(A.MidiInputMap, A._MidiInputMap_JavaScriptObject_MapMixin);
    _inherit(A.MidiOutputMap, A._MidiOutputMap_JavaScriptObject_MapMixin);
    _inherit(A._MimeTypeArray_JavaScriptObject_ListMixin_ImmutableListMixin, A._MimeTypeArray_JavaScriptObject_ListMixin);
    _inherit(A.MimeTypeArray, A._MimeTypeArray_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._NodeList_JavaScriptObject_ListMixin_ImmutableListMixin, A._NodeList_JavaScriptObject_ListMixin);
    _inherit(A.NodeList, A._NodeList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._PluginArray_JavaScriptObject_ListMixin_ImmutableListMixin, A._PluginArray_JavaScriptObject_ListMixin);
    _inherit(A.PluginArray, A._PluginArray_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inheritMany(A.MouseEvent, [A.PointerEvent0, A.WheelEvent]);
    _inherit(A.RtcStatsReport, A._RtcStatsReport_JavaScriptObject_MapMixin);
    _inherit(A.SharedWorkerGlobalScope, A.WorkerGlobalScope);
    _inherit(A._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, A._SourceBufferList_EventTarget_ListMixin);
    _inherit(A.SourceBufferList, A._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(A._SpeechGrammarList_JavaScriptObject_ListMixin_ImmutableListMixin, A._SpeechGrammarList_JavaScriptObject_ListMixin);
    _inherit(A.SpeechGrammarList, A._SpeechGrammarList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.Storage, A._Storage_JavaScriptObject_MapMixin);
    _inherit(A._TextTrackCueList_JavaScriptObject_ListMixin_ImmutableListMixin, A._TextTrackCueList_JavaScriptObject_ListMixin);
    _inherit(A.TextTrackCueList, A._TextTrackCueList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, A._TextTrackList_EventTarget_ListMixin);
    _inherit(A.TextTrackList, A._TextTrackList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(A._TouchList_JavaScriptObject_ListMixin_ImmutableListMixin, A._TouchList_JavaScriptObject_ListMixin);
    _inherit(A.TouchList, A._TouchList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.__CssRuleList_JavaScriptObject_ListMixin_ImmutableListMixin, A.__CssRuleList_JavaScriptObject_ListMixin);
    _inherit(A._CssRuleList, A.__CssRuleList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._DomRect, A.DomRectReadOnly);
    _inherit(A.__GamepadList_JavaScriptObject_ListMixin_ImmutableListMixin, A.__GamepadList_JavaScriptObject_ListMixin);
    _inherit(A._GamepadList, A.__GamepadList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.__NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin, A.__NamedNodeMap_JavaScriptObject_ListMixin);
    _inherit(A._NamedNodeMap, A.__NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin_ImmutableListMixin, A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin);
    _inherit(A._SpeechRecognitionResultList, A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.__StyleSheetList_JavaScriptObject_ListMixin_ImmutableListMixin, A.__StyleSheetList_JavaScriptObject_ListMixin);
    _inherit(A._StyleSheetList, A.__StyleSheetList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._ElementAttributeMap, A._AttributeMap);
    _inherit(A._ElementEventStreamImpl, A._EventStream);
    _inherit(A._EventStreamSubscription, A.StreamSubscription);
    _inherit(A._TemplatingNodeValidator, A._SimpleNodeValidator);
    _inherit(A._StructuredCloneDart2Js, A._StructuredClone);
    _inherit(A._AcceptStructuredCloneDart2Js, A._AcceptStructuredClone);
    _inheritMany(A.JsObject, [A.JsFunction, A._JsArray_JsObject_ListMixin]);
    _inherit(A.JsArray, A._JsArray_JsObject_ListMixin);
    _inheritMany(A.SvgElement, [A.GraphicsElement, A.ScriptElement0]);
    _inheritMany(A.GraphicsElement, [A.ClipPathElement, A.DefsElement, A.GeometryElement, A.SvgSvgElement]);
    _inherit(A._LengthList_JavaScriptObject_ListMixin_ImmutableListMixin, A._LengthList_JavaScriptObject_ListMixin);
    _inherit(A.LengthList, A._LengthList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._NumberList_JavaScriptObject_ListMixin_ImmutableListMixin, A._NumberList_JavaScriptObject_ListMixin);
    _inherit(A.NumberList, A._NumberList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.PathElement, A.GeometryElement);
    _inherit(A._StringList_JavaScriptObject_ListMixin_ImmutableListMixin, A._StringList_JavaScriptObject_ListMixin);
    _inherit(A.StringList, A._StringList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._TransformList_JavaScriptObject_ListMixin_ImmutableListMixin, A._TransformList_JavaScriptObject_ListMixin);
    _inherit(A.TransformList, A._TransformList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inheritMany(A.OffsetBase, [A.Offset, A.Size]);
    _inherit(A.AudioParamMap, A._AudioParamMap_JavaScriptObject_MapMixin);
    _inherit(A.OfflineAudioContext, A.BaseAudioContext);
    _inheritMany(A.Listenable, [A.Animation0, A._SystemFontsNotifier, A.CustomClipper]);
    _inheritMany(A.Animation0, [A._AnimationController_Animation_AnimationEagerListenerMixin, A._CurvedAnimation_Animation_AnimationWithParentMixin, A.__AnimatedEvaluation_Animation_AnimationWithParentMixin]);
    _inherit(A._AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin, A._AnimationController_Animation_AnimationEagerListenerMixin);
    _inherit(A._AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin, A._AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin);
    _inherit(A.AnimationController, A._AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin);
    _inherit(A._InterpolationSimulation, A.Simulation);
    _inherit(A.CurvedAnimation, A._CurvedAnimation_Animation_AnimationWithParentMixin);
    _inherit(A.Curve, A.ParametricCurve);
    _inheritMany(A.Curve, [A._Linear, A.Cubic]);
    _inherit(A._AnimatedEvaluation, A.__AnimatedEvaluation_Animation_AnimationWithParentMixin);
    _inherit(A.Tween, A.Animatable);
    _inheritMany(A.Tween, [A.ColorTween, A.IntTween, A.AlignmentGeometryTween, A.BoxConstraintsTween, A.DecorationTween, A.EdgeInsetsGeometryTween, A.BorderRadiusTween, A.Matrix4Tween, A.TextStyleTween]);
    _inheritMany(A.DiagnosticsNode, [A.DiagnosticsProperty, A.DiagnosticsBlock, A.DiagnosticableNode]);
    _inheritMany(A.DiagnosticsProperty, [A._ErrorDiagnostic, A.ErrorSpacer]);
    _inheritMany(A._ErrorDiagnostic, [A.ErrorDescription, A.ErrorSummary, A.ErrorHint]);
    _inherit(A.FlutterErrorDetails, A._FlutterErrorDetails_Object_Diagnosticable);
    _inherit(A.FlutterError, A._FlutterError_Error_DiagnosticableTreeMixin);
    _inherit(A.DiagnosticsStackTrace, A.DiagnosticsBlock);
    _inheritMany(A.DiagnosticableNode, [A._FlutterErrorDetailsNode, A.DiagnosticableTreeNode, A._SemanticsDiagnosticableNode]);
    _inheritMany(A.ChangeNotifier, [A.ValueNotifier, A.MouseTracker, A.SemanticsOwner, A.RestorationManager, A.KeepAliveHandle]);
    _inherit(A.DiagnosticableTree, A._DiagnosticableTree_Object_Diagnosticable);
    _inheritMany(A.Key, [A.LocalKey, A.GlobalKey]);
    _inherit(A.LicenseEntryWithLineBreaks, A.LicenseEntry);
    _inherit(A.FlutterErrorDetailsForPointerEventDispatcher, A.FlutterErrorDetails);
    _inherit(A.PointerEvent, A._PointerEvent_Object_Diagnosticable);
    _inherit(A.__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable, A._AbstractPointerEvent);
    _inherit(A.__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription, A.__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable);
    _inherit(A._TransformedPointerEvent, A.__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription);
    _inheritMany(A.PointerEvent, [A._PointerAddedEvent_PointerEvent__PointerEventDescription, A._PointerRemovedEvent_PointerEvent__PointerEventDescription, A._PointerHoverEvent_PointerEvent__PointerEventDescription, A._PointerEnterEvent_PointerEvent__PointerEventDescription, A._PointerExitEvent_PointerEvent__PointerEventDescription, A._PointerDownEvent_PointerEvent__PointerEventDescription, A._PointerMoveEvent_PointerEvent__PointerEventDescription, A._PointerUpEvent_PointerEvent__PointerEventDescription, A.PointerSignalEvent, A._PointerCancelEvent_PointerEvent__PointerEventDescription]);
    _inherit(A._PointerAddedEvent_PointerEvent__PointerEventDescription__CopyPointerAddedEvent, A._PointerAddedEvent_PointerEvent__PointerEventDescription);
    _inherit(A.PointerAddedEvent, A._PointerAddedEvent_PointerEvent__PointerEventDescription__CopyPointerAddedEvent);
    _inheritMany(A._TransformedPointerEvent, [A.__TransformedPointerAddedEvent__TransformedPointerEvent__CopyPointerAddedEvent, A.__TransformedPointerRemovedEvent__TransformedPointerEvent__CopyPointerRemovedEvent, A.__TransformedPointerHoverEvent__TransformedPointerEvent__CopyPointerHoverEvent, A.__TransformedPointerEnterEvent__TransformedPointerEvent__CopyPointerEnterEvent, A.__TransformedPointerExitEvent__TransformedPointerEvent__CopyPointerExitEvent, A.__TransformedPointerDownEvent__TransformedPointerEvent__CopyPointerDownEvent, A.__TransformedPointerMoveEvent__TransformedPointerEvent__CopyPointerMoveEvent, A.__TransformedPointerUpEvent__TransformedPointerEvent__CopyPointerUpEvent, A.__TransformedPointerScrollEvent__TransformedPointerEvent__CopyPointerScrollEvent, A.__TransformedPointerCancelEvent__TransformedPointerEvent__CopyPointerCancelEvent]);
    _inherit(A._TransformedPointerAddedEvent, A.__TransformedPointerAddedEvent__TransformedPointerEvent__CopyPointerAddedEvent);
    _inherit(A._PointerRemovedEvent_PointerEvent__PointerEventDescription__CopyPointerRemovedEvent, A._PointerRemovedEvent_PointerEvent__PointerEventDescription);
    _inherit(A.PointerRemovedEvent, A._PointerRemovedEvent_PointerEvent__PointerEventDescription__CopyPointerRemovedEvent);
    _inherit(A._TransformedPointerRemovedEvent, A.__TransformedPointerRemovedEvent__TransformedPointerEvent__CopyPointerRemovedEvent);
    _inherit(A._PointerHoverEvent_PointerEvent__PointerEventDescription__CopyPointerHoverEvent, A._PointerHoverEvent_PointerEvent__PointerEventDescription);
    _inherit(A.PointerHoverEvent, A._PointerHoverEvent_PointerEvent__PointerEventDescription__CopyPointerHoverEvent);
    _inherit(A._TransformedPointerHoverEvent, A.__TransformedPointerHoverEvent__TransformedPointerEvent__CopyPointerHoverEvent);
    _inherit(A._PointerEnterEvent_PointerEvent__PointerEventDescription__CopyPointerEnterEvent, A._PointerEnterEvent_PointerEvent__PointerEventDescription);
    _inherit(A.PointerEnterEvent, A._PointerEnterEvent_PointerEvent__PointerEventDescription__CopyPointerEnterEvent);
    _inherit(A._TransformedPointerEnterEvent, A.__TransformedPointerEnterEvent__TransformedPointerEvent__CopyPointerEnterEvent);
    _inherit(A._PointerExitEvent_PointerEvent__PointerEventDescription__CopyPointerExitEvent, A._PointerExitEvent_PointerEvent__PointerEventDescription);
    _inherit(A.PointerExitEvent, A._PointerExitEvent_PointerEvent__PointerEventDescription__CopyPointerExitEvent);
    _inherit(A._TransformedPointerExitEvent, A.__TransformedPointerExitEvent__TransformedPointerEvent__CopyPointerExitEvent);
    _inherit(A._PointerDownEvent_PointerEvent__PointerEventDescription__CopyPointerDownEvent, A._PointerDownEvent_PointerEvent__PointerEventDescription);
    _inherit(A.PointerDownEvent, A._PointerDownEvent_PointerEvent__PointerEventDescription__CopyPointerDownEvent);
    _inherit(A._TransformedPointerDownEvent, A.__TransformedPointerDownEvent__TransformedPointerEvent__CopyPointerDownEvent);
    _inherit(A._PointerMoveEvent_PointerEvent__PointerEventDescription__CopyPointerMoveEvent, A._PointerMoveEvent_PointerEvent__PointerEventDescription);
    _inherit(A.PointerMoveEvent, A._PointerMoveEvent_PointerEvent__PointerEventDescription__CopyPointerMoveEvent);
    _inherit(A._TransformedPointerMoveEvent, A.__TransformedPointerMoveEvent__TransformedPointerEvent__CopyPointerMoveEvent);
    _inherit(A._PointerUpEvent_PointerEvent__PointerEventDescription__CopyPointerUpEvent, A._PointerUpEvent_PointerEvent__PointerEventDescription);
    _inherit(A.PointerUpEvent, A._PointerUpEvent_PointerEvent__PointerEventDescription__CopyPointerUpEvent);
    _inherit(A._TransformedPointerUpEvent, A.__TransformedPointerUpEvent__TransformedPointerEvent__CopyPointerUpEvent);
    _inherit(A._PointerScrollEvent_PointerSignalEvent__PointerEventDescription, A.PointerSignalEvent);
    _inherit(A._PointerScrollEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollEvent, A._PointerScrollEvent_PointerSignalEvent__PointerEventDescription);
    _inherit(A.PointerScrollEvent, A._PointerScrollEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollEvent);
    _inherit(A._TransformedPointerScrollEvent, A.__TransformedPointerScrollEvent__TransformedPointerEvent__CopyPointerScrollEvent);
    _inherit(A._PointerCancelEvent_PointerEvent__PointerEventDescription__CopyPointerCancelEvent, A._PointerCancelEvent_PointerEvent__PointerEventDescription);
    _inherit(A.PointerCancelEvent, A._PointerCancelEvent_PointerEvent__PointerEventDescription__CopyPointerCancelEvent);
    _inherit(A._TransformedPointerCancelEvent, A.__TransformedPointerCancelEvent__TransformedPointerEvent__CopyPointerCancelEvent);
    _inheritMany(A._TransformPart, [A._MatrixTransformPart, A._OffsetTransformPart]);
    _inherit(A._GestureRecognizer_GestureArenaMember_DiagnosticableTreeMixin, A.GestureArenaMember);
    _inherit(A.GestureRecognizer, A._GestureRecognizer_GestureArenaMember_DiagnosticableTreeMixin);
    _inheritMany(A.GestureRecognizer, [A.OneSequenceGestureRecognizer, A.DoubleTapGestureRecognizer]);
    _inherit(A.PrimaryPointerGestureRecognizer, A.OneSequenceGestureRecognizer);
    _inheritMany(A.PrimaryPointerGestureRecognizer, [A.LongPressGestureRecognizer, A.BaseTapGestureRecognizer]);
    _inherit(A.TapGestureRecognizer, A.BaseTapGestureRecognizer);
    _inherit(A.AppBarTheme, A._AppBarTheme_Object_Diagnosticable);
    _inherit(A.MaterialBannerThemeData, A._MaterialBannerThemeData_Object_Diagnosticable);
    _inherit(A.BottomAppBarTheme, A._BottomAppBarTheme_Object_Diagnosticable);
    _inherit(A.BottomNavigationBarThemeData, A._BottomNavigationBarThemeData_Object_Diagnosticable);
    _inherit(A.BottomSheetThemeData, A._BottomSheetThemeData_Object_Diagnosticable);
    _inherit(A.ButtonBarThemeData, A._ButtonBarThemeData_Object_Diagnosticable);
    _inherit(A.ButtonThemeData, A._ButtonThemeData_Object_Diagnosticable);
    _inherit(A.CardTheme, A._CardTheme_Object_Diagnosticable);
    _inherit(A.CheckboxThemeData, A._CheckboxThemeData_Object_Diagnosticable);
    _inherit(A.ChipThemeData, A._ChipThemeData_Object_Diagnosticable);
    _inheritMany(A.DiagnosticableTree, [A.Widget, A.InlineSpan, A.SemanticsProperties, A.Element0]);
    _inheritMany(A.Widget, [A.StatelessWidget, A.StatefulWidget, A.ProxyWidget, A.RenderObjectWidget, A._NullWidget0]);
    _inheritMany(A.StatelessWidget, [A.CircleAvatar, A.InkResponse, A.ListTile, A._NullWidget, A.Builder, A.Container, A.GestureDetector, A.NotificationListener, A.SafeArea, A._NullWidget1, A.Text]);
    _inherit(A.ColorScheme, A._ColorScheme_Object_Diagnosticable);
    _inherit(A.ColorSwatch, A.Color);
    _inherit(A.MaterialColor, A.ColorSwatch);
    _inherit(A.DataTableThemeData, A._DataTableThemeData_Object_Diagnosticable);
    _inherit(A.DialogTheme, A._DialogTheme_Object_Diagnosticable);
    _inherit(A.DividerThemeData, A._DividerThemeData_Object_Diagnosticable);
    _inherit(A.DrawerThemeData, A._DrawerThemeData_Object_Diagnosticable);
    _inherit(A.ElevatedButtonThemeData, A._ElevatedButtonThemeData_Object_Diagnosticable);
    _inherit(A.FloatingActionButtonThemeData, A._FloatingActionButtonThemeData_Object_Diagnosticable);
    _inheritMany(A.StatefulWidget, [A.Ink, A._InkResponseStateWidget, A.Material, A.Actions, A.Focus, A.RawGestureDetector, A.ImplicitlyAnimatedWidget, A._MediaQueryFromWindow]);
    _inherit(A.State, A._State_Object_Diagnosticable);
    _inheritMany(A.State, [A._InkState, A.__InkResponseState_State_AutomaticKeepAliveClientMixin, A.__MaterialState_State_TickerProviderStateMixin, A._ActionsState, A._FocusState, A.RawGestureDetectorState, A._ImplicitlyAnimatedWidgetState_State_SingleTickerProviderStateMixin, A.__MediaQueryFromWindowState_State_WidgetsBindingObserver]);
    _inheritMany(A.InkFeature, [A.InkDecoration, A.InteractiveInkFeature]);
    _inheritMany(A.InteractiveInkFeature, [A.InkHighlight, A.InkSplash]);
    _inherit(A._InkSplashFactory, A.InteractiveInkFeatureFactory);
    _inherit(A.InheritedWidget, A.ProxyWidget);
    _inheritMany(A.InheritedWidget, [A._ParentInkResponseProvider, A._ActionsMarker, A.Directionality, A.InheritedNotifier, A.InheritedTheme, A.MediaQuery]);
    _inherit(A._InkResponseState, A.__InkResponseState_State_AutomaticKeepAliveClientMixin);
    _inherit(A.InkWell, A.InkResponse);
    _inherit(A.InputDecorationTheme, A._InputDecorationTheme_Object_Diagnosticable);
    _inherit(A.ListTileThemeData, A._ListTileThemeData_Object_Diagnosticable);
    _inheritMany(A.RenderObjectWidget, [A.__ListTile_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin, A.SingleChildRenderObjectWidget, A.MultiChildRenderObjectWidget, A.RenderObjectToWidgetAdapter, A.LeafRenderObjectWidget]);
    _inherit(A._ListTile, A.__ListTile_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin);
    _inheritMany(A.AbstractNode, [A._RenderObject_AbstractNode_DiagnosticableTreeMixin, A._Layer_AbstractNode_DiagnosticableTreeMixin, A._SemanticsNode_AbstractNode_DiagnosticableTreeMixin]);
    _inherit(A.RenderObject, A._RenderObject_AbstractNode_DiagnosticableTreeMixin);
    _inheritMany(A.RenderObject, [A.RenderBox, A._RenderView_RenderObject_RenderObjectWithChildMixin]);
    _inheritMany(A.RenderBox, [A.__RenderListTile_RenderBox_SlottedContainerRenderObjectMixin, A._RenderProxyBox_RenderBox_RenderObjectWithChildMixin, A.RenderErrorBox, A._RenderFlex_RenderBox_ContainerRenderObjectMixin, A._RenderParagraph_RenderBox_ContainerRenderObjectMixin, A._RenderShiftedBox_RenderBox_RenderObjectWithChildMixin]);
    _inherit(A._RenderListTile, A.__RenderListTile_RenderBox_SlottedContainerRenderObjectMixin);
    _inherit(A._MaterialState, A.__MaterialState_State_TickerProviderStateMixin);
    _inherit(A._RenderProxyBox_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin, A._RenderProxyBox_RenderBox_RenderObjectWithChildMixin);
    _inherit(A.RenderProxyBox, A._RenderProxyBox_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin);
    _inheritMany(A.RenderProxyBox, [A._RenderInkFeatures, A.RenderProxyBoxWithHitTestBehavior, A.RenderConstrainedBox, A.RenderLimitedBox, A._RenderCustomClip, A.RenderDecoratedBox, A.RenderTransform, A.RenderMouseRegion, A.RenderSemanticsAnnotations]);
    _inheritMany(A.SingleChildRenderObjectWidget, [A._InkFeatures, A.ClipPath, A.PhysicalModel, A.Transform, A.Padding, A.Align, A.ConstrainedBox, A.LimitedBox, A.Listener, A.MouseRegion, A.Semantics, A.DecoratedBox]);
    _inherit(A.MouseCursor0, A._MouseCursor_Object_Diagnosticable);
    _inheritMany(A.MouseCursor0, [A.MaterialStateMouseCursor, A._DeferringMouseCursor, A.SystemMouseCursor]);
    _inherit(A._EnabledAndDisabledMouseCursor, A.MaterialStateMouseCursor);
    _inherit(A.NavigationBarThemeData, A._NavigationBarThemeData_Object_Diagnosticable);
    _inherit(A.NavigationRailThemeData, A._NavigationRailThemeData_Object_Diagnosticable);
    _inherit(A.OutlinedButtonThemeData, A._OutlinedButtonThemeData_Object_Diagnosticable);
    _inheritMany(A.PageTransitionsBuilder, [A.FadeUpwardsPageTransitionsBuilder, A.CupertinoPageTransitionsBuilder]);
    _inherit(A.PageTransitionsTheme, A._PageTransitionsTheme_Object_Diagnosticable);
    _inherit(A.PopupMenuThemeData, A._PopupMenuThemeData_Object_Diagnosticable);
    _inherit(A.ProgressIndicatorThemeData, A._ProgressIndicatorThemeData_Object_Diagnosticable);
    _inherit(A.RadioThemeData, A._RadioThemeData_Object_Diagnosticable);
    _inherit(A.ScrollbarThemeData, A._ScrollbarThemeData_Object_Diagnosticable);
    _inherit(A.SliderThemeData, A._SliderThemeData_Object_Diagnosticable);
    _inherit(A.SnackBarThemeData, A._SnackBarThemeData_Object_Diagnosticable);
    _inherit(A.SwitchThemeData, A._SwitchThemeData_Object_Diagnosticable);
    _inherit(A.TabBarTheme, A._TabBarTheme_Object_Diagnosticable);
    _inherit(A.TextButtonThemeData, A._TextButtonThemeData_Object_Diagnosticable);
    _inherit(A.TextSelectionThemeData, A._TextSelectionThemeData_Object_Diagnosticable);
    _inherit(A.TextTheme, A._TextTheme_Object_Diagnosticable);
    _inherit(A.ThemeData, A._ThemeData_Object_Diagnosticable);
    _inherit(A.VisualDensity, A._VisualDensity_Object_Diagnosticable);
    _inherit(A.TimePickerThemeData, A._TimePickerThemeData_Object_Diagnosticable);
    _inherit(A.ToggleButtonsThemeData, A._ToggleButtonsThemeData_Object_Diagnosticable);
    _inherit(A.TooltipThemeData, A._TooltipThemeData_Object_Diagnosticable);
    _inherit(A.Typography, A._Typography_Object_Diagnosticable);
    _inheritMany(A.AlignmentGeometry, [A.Alignment, A.AlignmentDirectional, A._MixedAlignment]);
    _inheritMany(A.BorderRadiusGeometry, [A.BorderRadius, A._MixedBorderRadius]);
    _inheritMany(A.ShapeBorder, [A.OutlinedBorder, A._CompoundBorder, A.BoxBorder]);
    _inheritMany(A.BoxBorder, [A.Border, A.BorderDirectional]);
    _inherit(A.Decoration, A._Decoration_Object_Diagnosticable);
    _inheritMany(A.Decoration, [A.BoxDecoration, A.ShapeDecoration]);
    _inheritMany(A.BoxPainter, [A._BoxDecorationPainter, A._ShapeDecorationPainter]);
    _inherit(A.BoxShadow, A.Shadow);
    _inheritMany(A.OutlinedBorder, [A.CircleBorder, A.RoundedRectangleBorder, A._RoundedRectangleToCircleBorder]);
    _inheritMany(A.EdgeInsetsGeometry, [A.EdgeInsets, A.EdgeInsetsDirectional, A._MixedEdgeInsets]);
    _inherit(A.TextSpan, A.InlineSpan);
    _inherit(A.TextStyle, A._TextStyle_Object_Diagnosticable);
    _inherit(A.BoxConstraints, A.Constraints);
    _inherit(A.BoxHitTestResult, A.HitTestResult);
    _inherit(A.BoxHitTestEntry, A.HitTestEntry);
    _inherit(A.BoxParentData, A.ParentData);
    _inherit(A._ContainerBoxParentData_BoxParentData_ContainerParentDataMixin, A.BoxParentData);
    _inherit(A.ContainerBoxParentData, A._ContainerBoxParentData_BoxParentData_ContainerParentDataMixin);
    _inheritMany(A.ContainerBoxParentData, [A.FlexParentData, A.TextParentData]);
    _inherit(A._RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin, A._RenderFlex_RenderBox_ContainerRenderObjectMixin);
    _inherit(A._RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin_DebugOverflowIndicatorMixin, A._RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin);
    _inherit(A.RenderFlex, A._RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin_DebugOverflowIndicatorMixin);
    _inherit(A.Layer0, A._Layer_AbstractNode_DiagnosticableTreeMixin);
    _inheritMany(A.Layer0, [A.PictureLayer, A.ContainerLayer0]);
    _inheritMany(A.ContainerLayer0, [A.OffsetLayer, A.ClipRectLayer, A.ClipPathLayer, A.PhysicalModelLayer]);
    _inherit(A.TransformLayer, A.OffsetLayer);
    _inherit(A._MouseTrackerUpdateDetails, A.__MouseTrackerUpdateDetails_Object_Diagnosticable);
    _inherit(A.PaintingContext, A.ClipContext);
    _inheritMany(A._SemanticsFragment, [A._ContainerSemanticsFragment, A._InterestingSemanticsFragment]);
    _inheritMany(A._InterestingSemanticsFragment, [A._RootSemanticsFragment, A._SwitchableSemanticsFragment]);
    _inherit(A._RenderParagraph_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin, A._RenderParagraph_RenderBox_ContainerRenderObjectMixin);
    _inherit(A._RenderParagraph_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin_RelayoutWhenSystemFontsChangeMixin, A._RenderParagraph_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin);
    _inherit(A.RenderParagraph, A._RenderParagraph_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin_RelayoutWhenSystemFontsChangeMixin);
    _inheritMany(A._RenderCustomClip, [A.RenderClipPath, A._RenderPhysicalModelBase]);
    _inherit(A.RenderPhysicalModel, A._RenderPhysicalModelBase);
    _inherit(A.RenderPointerListener, A.RenderProxyBoxWithHitTestBehavior);
    _inherit(A.RenderShiftedBox, A._RenderShiftedBox_RenderBox_RenderObjectWithChildMixin);
    _inheritMany(A.RenderShiftedBox, [A.RenderPadding, A.RenderAligningShiftedBox]);
    _inherit(A.RenderPositionedBox, A.RenderAligningShiftedBox);
    _inherit(A.RenderView, A._RenderView_RenderObject_RenderObjectWithChildMixin);
    _inherit(A.SemanticsData, A._SemanticsData_Object_Diagnosticable);
    _inherit(A.SemanticsNode, A._SemanticsNode_AbstractNode_DiagnosticableTreeMixin);
    _inherit(A._SemanticsSortGroup, A.Comparable);
    _inherit(A.SemanticsSortKey, A._SemanticsSortKey_Object_Diagnosticable);
    _inherit(A.OrdinalSortKey, A.SemanticsSortKey);
    _inherit(A.CachingAssetBundle, A.AssetBundle);
    _inherit(A.PlatformAssetBundle, A.CachingAssetBundle);
    _inherit(A._DefaultBinaryMessenger, A.BinaryMessenger);
    _inherit(A.KeyEvent, A._KeyEvent_Object_Diagnosticable);
    _inheritMany(A.KeyEvent, [A.KeyDownEvent, A.KeyUpEvent, A.KeyRepeatEvent]);
    _inherit(A.KeyboardKey, A._KeyboardKey_Object_Diagnosticable);
    _inheritMany(A.KeyboardKey, [A.LogicalKeyboardKey, A.PhysicalKeyboardKey]);
    _inherit(A._SystemMouseCursorSession, A.MouseCursorSession);
    _inherit(A.OptionalMethodChannel, A.MethodChannel);
    _inherit(A.RawKeyEventData, A._RawKeyEventData_Object_Diagnosticable);
    _inherit(A.RawKeyEvent, A._RawKeyEvent_Object_Diagnosticable);
    _inheritMany(A.RawKeyEvent, [A.RawKeyDownEvent, A.RawKeyUpEvent]);
    _inheritMany(A.RawKeyEventData, [A.RawKeyEventDataFuchsia, A.RawKeyEventDataLinux, A.RawKeyEventDataMacOs, A.RawKeyEventDataWeb]);
    _inherit(A.Action, A._Action_Object_Diagnosticable);
    _inherit(A.CallbackAction, A.Action);
    _inherit(A.KeepAliveNotification, A.Notification0);
    _inherit(A.Center, A.Align);
    _inheritMany(A.MultiChildRenderObjectWidget, [A.Flex, A.RichText]);
    _inherit(A.Column, A.Flex);
    _inheritMany(A.Element0, [A.RenderObjectElement, A.ComponentElement, A._NullElement]);
    _inheritMany(A.RenderObjectElement, [A.RootRenderObjectElement, A.LeafRenderObjectElement, A.SingleChildRenderObjectElement, A.MultiChildRenderObjectElement, A.SlottedRenderObjectElement]);
    _inherit(A.RenderObjectToWidgetElement, A.RootRenderObjectElement);
    _inherit(A._WidgetsFlutterBinding_BindingBase_GestureBinding, A.BindingBase);
    _inherit(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding, A._WidgetsFlutterBinding_BindingBase_GestureBinding);
    _inherit(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding);
    _inherit(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding);
    _inherit(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding);
    _inherit(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding);
    _inherit(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding);
    _inherit(A.WidgetsFlutterBinding, A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding);
    _inherit(A._DecorationClipper, A.CustomClipper);
    _inherit(A._FocusNode_Object_DiagnosticableTreeMixin_ChangeNotifier, A._FocusNode_Object_DiagnosticableTreeMixin);
    _inherit(A.FocusNode, A._FocusNode_Object_DiagnosticableTreeMixin_ChangeNotifier);
    _inherit(A.FocusScopeNode, A.FocusNode);
    _inherit(A._FocusManager_Object_DiagnosticableTreeMixin_ChangeNotifier, A._FocusManager_Object_DiagnosticableTreeMixin);
    _inherit(A.FocusManager, A._FocusManager_Object_DiagnosticableTreeMixin_ChangeNotifier);
    _inherit(A._FocusMarker, A.InheritedNotifier);
    _inherit(A.UniqueKey, A.LocalKey);
    _inheritMany(A.GlobalKey, [A.LabeledGlobalKey, A.GlobalObjectKey]);
    _inherit(A._ElementDiagnosticableTreeNode, A.DiagnosticableTreeNode);
    _inherit(A.ErrorWidget, A.LeafRenderObjectWidget);
    _inheritMany(A.ComponentElement, [A.StatelessElement, A.StatefulElement, A.ProxyElement]);
    _inherit(A.InheritedElement, A.ProxyElement);
    _inherit(A.GestureRecognizerFactoryWithHandlers, A.GestureRecognizerFactory);
    _inherit(A._DefaultSemanticsGestureDelegate, A.SemanticsGestureDelegate);
    _inheritMany(A.InheritedTheme, [A.IconTheme, A.DefaultTextStyle]);
    _inherit(A.IconThemeData, A._IconThemeData_Object_Diagnosticable);
    _inherit(A.ImplicitlyAnimatedWidgetState, A._ImplicitlyAnimatedWidgetState_State_SingleTickerProviderStateMixin);
    _inherit(A.AnimatedWidgetBaseState, A.ImplicitlyAnimatedWidgetState);
    _inheritMany(A.ImplicitlyAnimatedWidget, [A.AnimatedContainer, A.AnimatedDefaultTextStyle, A.AnimatedPhysicalModel]);
    _inheritMany(A.AnimatedWidgetBaseState, [A._AnimatedContainerState, A._AnimatedDefaultTextStyleState, A._AnimatedPhysicalModelState]);
    _inherit(A._InheritedNotifierElement, A.InheritedElement);
    _inherit(A._MediaQueryFromWindowState, A.__MediaQueryFromWindowState_State_WidgetsBindingObserver);
    _inherit(A._WidgetTicker, A.Ticker);
    _inherit(A._IntBuffer0, A.TypedDataBuffer);
    _inherit(A.Uint8Buffer0, A._IntBuffer0);
    _mixin(A._DomCanvas_EngineCanvas_SaveElementStackTracking, A.SaveElementStackTracking);
    _mixinHard(A._PersistedClipRect_PersistedContainerSurface__DomClip, A._DomClip);
    _mixinHard(A._PersistedPhysicalShape_PersistedContainerSurface__DomClip, A._DomClip);
    _mixin(A.__MouseAdapter__BaseAdapter__WheelEventListenerMixin, A._WheelEventListenerMixin);
    _mixin(A.__PointerAdapter__BaseAdapter__WheelEventListenerMixin, A._WheelEventListenerMixin);
    _mixin(A.UnmodifiableListBase, A.UnmodifiableListMixin);
    _mixin(A.__CastListBase__CastIterableBase_ListMixin, A.ListMixin);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A.ListMixin);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.ListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._AsyncStreamController, A._AsyncStreamControllerDispatch);
    _mixin(A._ListBase_Object_ListMixin, A.ListMixin);
    _mixin(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A._UnmodifiableMapMixin);
    _mixin(A.__SetBase_Object_SetMixin, A.SetMixin);
    _mixin(A.__UnmodifiableSet__SetBase__UnmodifiableSetMixin, A._UnmodifiableSetMixin);
    _mixin(A._CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase, A.CssStyleDeclarationBase);
    _mixin(A._DomRectList_JavaScriptObject_ListMixin, A.ListMixin);
    _mixin(A._DomRectList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._DomStringList_JavaScriptObject_ListMixin, A.ListMixin);
    _mixin(A._DomStringList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._FileList_JavaScriptObject_ListMixin, A.ListMixin);
    _mixin(A._FileList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._HtmlCollection_JavaScriptObject_ListMixin, A.ListMixin);
    _mixin(A._HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._MidiInputMap_JavaScriptObject_MapMixin, A.MapMixin);
    _mixin(A._MidiOutputMap_JavaScriptObject_MapMixin, A.MapMixin);
    _mixin(A._MimeTypeArray_JavaScriptObject_ListMixin, A.ListMixin);
    _mixin(A._MimeTypeArray_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._NodeList_JavaScriptObject_ListMixin, A.ListMixin);
    _mixin(A._NodeList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._PluginArray_JavaScriptObject_ListMixin, A.ListMixin);
    _mixin(A._PluginArray_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._RtcStatsReport_JavaScriptObject_MapMixin, A.MapMixin);
    _mixin(A._SourceBufferList_EventTarget_ListMixin, A.ListMixin);
    _mixin(A._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._SpeechGrammarList_JavaScriptObject_ListMixin, A.ListMixin);
    _mixin(A._SpeechGrammarList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._Storage_JavaScriptObject_MapMixin, A.MapMixin);
    _mixin(A._TextTrackCueList_JavaScriptObject_ListMixin, A.ListMixin);
    _mixin(A._TextTrackCueList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._TextTrackList_EventTarget_ListMixin, A.ListMixin);
    _mixin(A._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._TouchList_JavaScriptObject_ListMixin, A.ListMixin);
    _mixin(A._TouchList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A.__CssRuleList_JavaScriptObject_ListMixin, A.ListMixin);
    _mixin(A.__CssRuleList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A.__GamepadList_JavaScriptObject_ListMixin, A.ListMixin);
    _mixin(A.__GamepadList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A.__NamedNodeMap_JavaScriptObject_ListMixin, A.ListMixin);
    _mixin(A.__NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin, A.ListMixin);
    _mixin(A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A.__StyleSheetList_JavaScriptObject_ListMixin, A.ListMixin);
    _mixin(A.__StyleSheetList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixinHard(A._JsArray_JsObject_ListMixin, A.ListMixin);
    _mixin(A._LengthList_JavaScriptObject_ListMixin, A.ListMixin);
    _mixin(A._LengthList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._NumberList_JavaScriptObject_ListMixin, A.ListMixin);
    _mixin(A._NumberList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._StringList_JavaScriptObject_ListMixin, A.ListMixin);
    _mixin(A._StringList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._TransformList_JavaScriptObject_ListMixin, A.ListMixin);
    _mixin(A._TransformList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._AudioParamMap_JavaScriptObject_MapMixin, A.MapMixin);
    _mixin(A._AnimationController_Animation_AnimationEagerListenerMixin, A.AnimationEagerListenerMixin);
    _mixin(A._AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin, A.AnimationLocalListenersMixin);
    _mixin(A._AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin, A.AnimationLocalStatusListenersMixin);
    _mixin(A._CurvedAnimation_Animation_AnimationWithParentMixin, A.AnimationWithParentMixin);
    _mixin(A.__AnimatedEvaluation_Animation_AnimationWithParentMixin, A.AnimationWithParentMixin);
    _mixin(A._FlutterError_Error_DiagnosticableTreeMixin, A.DiagnosticableTreeMixin);
    _mixin(A._FlutterErrorDetails_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._DiagnosticableTree_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._PointerAddedEvent_PointerEvent__PointerEventDescription, A._PointerEventDescription);
    _mixin(A._PointerAddedEvent_PointerEvent__PointerEventDescription__CopyPointerAddedEvent, A._CopyPointerAddedEvent);
    _mixin(A._PointerCancelEvent_PointerEvent__PointerEventDescription, A._PointerEventDescription);
    _mixin(A._PointerCancelEvent_PointerEvent__PointerEventDescription__CopyPointerCancelEvent, A._CopyPointerCancelEvent);
    _mixin(A._PointerDownEvent_PointerEvent__PointerEventDescription, A._PointerEventDescription);
    _mixin(A._PointerDownEvent_PointerEvent__PointerEventDescription__CopyPointerDownEvent, A._CopyPointerDownEvent);
    _mixin(A._PointerEnterEvent_PointerEvent__PointerEventDescription, A._PointerEventDescription);
    _mixin(A._PointerEnterEvent_PointerEvent__PointerEventDescription__CopyPointerEnterEvent, A._CopyPointerEnterEvent);
    _mixin(A._PointerEvent_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._PointerExitEvent_PointerEvent__PointerEventDescription, A._PointerEventDescription);
    _mixin(A._PointerExitEvent_PointerEvent__PointerEventDescription__CopyPointerExitEvent, A._CopyPointerExitEvent);
    _mixin(A._PointerHoverEvent_PointerEvent__PointerEventDescription, A._PointerEventDescription);
    _mixin(A._PointerHoverEvent_PointerEvent__PointerEventDescription__CopyPointerHoverEvent, A._CopyPointerHoverEvent);
    _mixin(A._PointerMoveEvent_PointerEvent__PointerEventDescription, A._PointerEventDescription);
    _mixin(A._PointerMoveEvent_PointerEvent__PointerEventDescription__CopyPointerMoveEvent, A._CopyPointerMoveEvent);
    _mixin(A._PointerRemovedEvent_PointerEvent__PointerEventDescription, A._PointerEventDescription);
    _mixin(A._PointerRemovedEvent_PointerEvent__PointerEventDescription__CopyPointerRemovedEvent, A._CopyPointerRemovedEvent);
    _mixin(A._PointerScrollEvent_PointerSignalEvent__PointerEventDescription, A._PointerEventDescription);
    _mixin(A._PointerScrollEvent_PointerSignalEvent__PointerEventDescription__CopyPointerScrollEvent, A._CopyPointerScrollEvent);
    _mixin(A._PointerUpEvent_PointerEvent__PointerEventDescription, A._PointerEventDescription);
    _mixin(A._PointerUpEvent_PointerEvent__PointerEventDescription__CopyPointerUpEvent, A._CopyPointerUpEvent);
    _mixin(A.__TransformedPointerAddedEvent__TransformedPointerEvent__CopyPointerAddedEvent, A._CopyPointerAddedEvent);
    _mixin(A.__TransformedPointerCancelEvent__TransformedPointerEvent__CopyPointerCancelEvent, A._CopyPointerCancelEvent);
    _mixin(A.__TransformedPointerDownEvent__TransformedPointerEvent__CopyPointerDownEvent, A._CopyPointerDownEvent);
    _mixin(A.__TransformedPointerEnterEvent__TransformedPointerEvent__CopyPointerEnterEvent, A._CopyPointerEnterEvent);
    _mixin(A.__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable, A.Diagnosticable);
    _mixin(A.__TransformedPointerEvent__AbstractPointerEvent_Diagnosticable__PointerEventDescription, A._PointerEventDescription);
    _mixin(A.__TransformedPointerExitEvent__TransformedPointerEvent__CopyPointerExitEvent, A._CopyPointerExitEvent);
    _mixin(A.__TransformedPointerHoverEvent__TransformedPointerEvent__CopyPointerHoverEvent, A._CopyPointerHoverEvent);
    _mixin(A.__TransformedPointerMoveEvent__TransformedPointerEvent__CopyPointerMoveEvent, A._CopyPointerMoveEvent);
    _mixin(A.__TransformedPointerRemovedEvent__TransformedPointerEvent__CopyPointerRemovedEvent, A._CopyPointerRemovedEvent);
    _mixin(A.__TransformedPointerScrollEvent__TransformedPointerEvent__CopyPointerScrollEvent, A._CopyPointerScrollEvent);
    _mixin(A.__TransformedPointerUpEvent__TransformedPointerEvent__CopyPointerUpEvent, A._CopyPointerUpEvent);
    _mixin(A._GestureRecognizer_GestureArenaMember_DiagnosticableTreeMixin, A.DiagnosticableTreeMixin);
    _mixin(A._AppBarTheme_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._MaterialBannerThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._BottomAppBarTheme_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._BottomNavigationBarThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._BottomSheetThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._ButtonBarThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._ButtonThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._CardTheme_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._CheckboxThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._ChipThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._ColorScheme_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._DataTableThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._DialogTheme_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._DividerThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._DrawerThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._ElevatedButtonThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._FloatingActionButtonThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixinHard(A.__InkResponseState_State_AutomaticKeepAliveClientMixin, A.AutomaticKeepAliveClientMixin);
    _mixin(A._InputDecorationTheme_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._ListTileThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixinHard(A.__ListTile_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin, A.SlottedMultiChildRenderObjectWidgetMixin);
    _mixinHard(A.__RenderListTile_RenderBox_SlottedContainerRenderObjectMixin, A.SlottedContainerRenderObjectMixin);
    _mixinHard(A.__MaterialState_State_TickerProviderStateMixin, A.TickerProviderStateMixin);
    _mixin(A._NavigationBarThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._NavigationRailThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._OutlinedButtonThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._PageTransitionsTheme_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._PopupMenuThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._ProgressIndicatorThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._RadioThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._ScrollbarThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._SliderThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._SnackBarThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._SwitchThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._TabBarTheme_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._TextButtonThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._TextSelectionThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._TextTheme_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._ThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._VisualDensity_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._TimePickerThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._ToggleButtonsThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._TooltipThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._Typography_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._Decoration_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._TextStyle_Object_Diagnosticable, A.Diagnosticable);
    _mixinHard(A._ContainerBoxParentData_BoxParentData_ContainerParentDataMixin, A.ContainerParentDataMixin);
    _mixinHard(A._RenderFlex_RenderBox_ContainerRenderObjectMixin, A.ContainerRenderObjectMixin);
    _mixin(A._RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin, A.RenderBoxContainerDefaultsMixin);
    _mixinHard(A._RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin_DebugOverflowIndicatorMixin, A.DebugOverflowIndicatorMixin);
    _mixin(A._Layer_AbstractNode_DiagnosticableTreeMixin, A.DiagnosticableTreeMixin);
    _mixin(A.__MouseTrackerUpdateDetails_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._RenderObject_AbstractNode_DiagnosticableTreeMixin, A.DiagnosticableTreeMixin);
    _mixinHard(A._RenderParagraph_RenderBox_ContainerRenderObjectMixin, A.ContainerRenderObjectMixin);
    _mixin(A._RenderParagraph_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin, A.RenderBoxContainerDefaultsMixin);
    _mixinHard(A._RenderParagraph_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin_RelayoutWhenSystemFontsChangeMixin, A.RelayoutWhenSystemFontsChangeMixin);
    _mixinHard(A._RenderProxyBox_RenderBox_RenderObjectWithChildMixin, A.RenderObjectWithChildMixin);
    _mixinHard(A._RenderProxyBox_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin, A.RenderProxyBoxMixin);
    _mixinHard(A._RenderShiftedBox_RenderBox_RenderObjectWithChildMixin, A.RenderObjectWithChildMixin);
    _mixinHard(A._RenderView_RenderObject_RenderObjectWithChildMixin, A.RenderObjectWithChildMixin);
    _mixin(A._SemanticsData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._SemanticsNode_AbstractNode_DiagnosticableTreeMixin, A.DiagnosticableTreeMixin);
    _mixin(A._SemanticsSortKey_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._KeyEvent_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._KeyboardKey_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._MouseCursor_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._RawKeyEvent_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._RawKeyEventData_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._Action_Object_Diagnosticable, A.Diagnosticable);
    _mixinHard(A._WidgetsFlutterBinding_BindingBase_GestureBinding, A.GestureBinding);
    _mixinHard(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding, A.SchedulerBinding);
    _mixinHard(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding, A.ServicesBinding);
    _mixinHard(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding, A.PaintingBinding);
    _mixinHard(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding, A.SemanticsBinding);
    _mixinHard(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding, A.RendererBinding);
    _mixinHard(A._WidgetsFlutterBinding_BindingBase_GestureBinding_SchedulerBinding_ServicesBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding, A.WidgetsBinding);
    _mixin(A._FocusManager_Object_DiagnosticableTreeMixin, A.DiagnosticableTreeMixin);
    _mixin(A._FocusManager_Object_DiagnosticableTreeMixin_ChangeNotifier, A.ChangeNotifier);
    _mixin(A._FocusNode_Object_DiagnosticableTreeMixin, A.DiagnosticableTreeMixin);
    _mixin(A._FocusNode_Object_DiagnosticableTreeMixin_ChangeNotifier, A.ChangeNotifier);
    _mixin(A._State_Object_Diagnosticable, A.Diagnosticable);
    _mixin(A._IconThemeData_Object_Diagnosticable, A.Diagnosticable);
    _mixinHard(A._ImplicitlyAnimatedWidgetState_State_SingleTickerProviderStateMixin, A.SingleTickerProviderStateMixin);
    _mixin(A.__MediaQueryFromWindowState_State_WidgetsBindingObserver, A.WidgetsBindingObserver);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"},
    mangledNames: {},
    types: ["~()", "~(Event)", "Null(Event)", "~(Element0)", "Null(@)", "~(ByteData?)", "bool(FlutterHtmlKeyboardEvent)", "~(Duration)", "~(@)", "List<DiagnosticsNode>()", "Null()", "~(String,@)", "Future<~>()", "@(Event)", "Future<Map<String,@>>(Map<String,String>)", "bool(String)", "~(RenderObject)", "~(Object?)", "bool(BoxHitTestResult,Offset)", "bool(int)", "@(@)", "int(RenderObject,RenderObject)", "Future<Map<String,Object>>(Map<String,String>)", "~(bool)", "Null(~)", "Null(PointerEvent0)", "Null(TouchEvent)", "~(AnimationStatus)", "~(MouseEvent)", "Future<bool>()", "@()", "~(PointerEvent)", "int()", "Future<~>(bool)", "bool(KeyData)", "Null(bool)", "Null(MouseEvent)", "bool(InlineSpan)", "String(String)", "int(SemanticsNode,SemanticsNode)", "~(@,@)", "~(List<FrameTiming>)", "~(Object?,Object?)", "~(~())", "~(PaintingContext,Offset)", "bool(NodeValidator)", "_Channel()", "String()", "List<CodeunitRange>()", "Null(@,@)", "int(int)", "Future<String>()", "bool(Node)", "~(Uint8List,String,int)", "~(Object,StackTrace)", "~(DiagnosticsNode)", "KeyData()", "bool(Object?)", "~(GestureMode)", "Size(RenderBox,BoxConstraints)", "bool(Element,String,String,_Html5NodeValidator)", "~(int)", "bool(@)", "Future<ServiceExtensionResponse>(String,Map<String,String>)", "List<SemanticsNode>(_SemanticsSortGroup)", "~(num)", "bool(SemanticsNode)", "Future<~>(MethodCall0)", "Future<ByteData?>(ByteData?)", "~(RestorationBucket)", "List<SkFont>()", "ByteBuffer(@)", "Future<ByteBuffer>(Body)", "Tween<@>?(Tween<@>?,@,Tween<@>(@))", "AlignmentGeometryTween(@)", "EdgeInsetsGeometryTween(@)", "DecorationTween(@)", "ColorTween(@)", "int(Object?)", "Future<~>(String)", "~(JsUrlStrategy?)", "CkCanvas(CkPictureRecorder)", "Future<Null>()", "bool(bool)", "SurfaceScene()", "bool(Color)", "@(@,String)", "@(String)", "Null(~())", "int(PaintRequest,PaintRequest)", "Null(@,StackTrace)", "~(int,@)", "int(_PersistedSurfaceMatch,_PersistedSurfaceMatch)", "~(Object[StackTrace?])", "Null(Object,StackTrace)", "_Future<@>(@)", "Future<String>(Body)", "~(Symbol0,@)", "~([Object?])", "~(String,int)", "~(String,int?)", "int(int,int)", "~(String,String?)", "Uint8List(@,@)", "String(@)", "Null(SkDeletable)", "~(DomException)", "~(ProgressEvent)", "Future<RegisteredFont?>()", "~(String,String)", "String(String,String)", "~(Node,Node?)", "@(@,@)", "Element(Node)", "@(Object?)", "JsFunction(@)", "JsArray<@>(@)", "JsObject(@)", "~(CanvasKit)", "String?(String)", "String(int)", "bool(SurfaceFrame,CkCanvas)", "~(int,bool(FlutterHtmlKeyboardEvent))", "TargetPlatform?()", "TargetPlatform()", "bool(DiagnosticsNode?)", "bool(StackFrame)", "ErrorDescription(String)", "bool(int,int)", "String(DiagnosticsNode)", "~(Surface)", "Null(ByteData)", "~(Element)", "~(List<@>,MutationObserver)", "Element()", "bool(DiagnosticsNode)", "~(AbstractNode)", "String(GestureArenaMember)", "_GestureArena()", "~(PointerDataPacket)", "~(Iterable<PointerData>)", "bool(PointerData)", "_PointerEventDescription(PointerData)", "~(_TapTracker)", "Map<~(PointerEvent),Matrix4?>()", "~(~(PointerEvent),Matrix4?)", "Widget(BuildContext)", "Rect()", "Rect()?(RenderBox)", "bool(BuildContext)", "~(FocusHighlightMode)", "~(TapDownDetails)", "~(TapUpDetails)", "~(PointerEnterEvent)", "~(PointerExitEvent)", "bool(InkHighlight?)", "~(RenderBox?)", "_ButtonSanitizer()", "bool(LayoutChangedNotification)", "PageTransitionsBuilder?(TargetPlatform)", "ThemeData()", "EdgeInsetsGeometry(EdgeInsetsGeometry,ShapeBorder)", "ShapeBorder(ShapeBorder)", "String(ShapeBorder)", "~(ImageInfo,bool)", "SkTextStyle()", "Paint(BoxShadow)", "Path(BoxShadow)", "bool(NotoFont)", "~(int,SemanticsAction,ByteData?)", "String(double,double,String)", "Size()", "double?()", "~(_ResolvedNotoSubset)", "MouseCursor0(MouseTrackerAnnotation)", "~(MouseTrackerAnnotation,Matrix4)", "bool(MouseTrackerAnnotation)", "_PointerState()", "~({curve:Curve,descendant:RenderObject?,duration:Duration,rect:Rect?})", "Null(String)", "bool(InlineSpanSemanticsInformation)", "HitTestResult(Offset)", "Incrementable(SemanticsObject)", "~(FrameTiming)", "~(int,_FrameCallbackEntry)", "SemanticsNode(_TraversalSortNode)", "DiagnosticsNode(SemanticsNode)", "Scrollable(SemanticsObject)", "LabelAndValue(SemanticsObject)", "int(SemanticsNode)", "SemanticsNode(int)", "Tappable(SemanticsObject)", "Stream<LicenseEntry>()", "Future<String?>(String?)", "TextField(SemanticsObject)", "Future<~>(ByteData?,~(ByteData?))", "Future<Map<String,@>>(@)", "~(RawKeyEvent)", "Checkable(SemanticsObject)", "RawKeyEventData()", "bool(PhysicalKeyboardKey)", "ImageRoleManager(SemanticsObject)", "Map<Object?,Object?>()", "List<RestorationBucket>(List<RestorationBucket>)", "~(Action<Intent>)", "LiveRegion(SemanticsObject)", "DateTime()", "HitTestResult()", "Future<double>()", "Future<~>(double)", "Future<~>(@)", "Future<@>(MethodCall0)", "Future<Map<String,String>>(Map<String,Object>)", "DiagnosticsNode(FocusNode)", "bool(KeyMessage)", "~(int,int)", "Element0?(Element0)", "Object?(int,Element0?)", "TapGestureRecognizer()", "~(TapGestureRecognizer)", "DoubleTapGestureRecognizer()", "~(DoubleTapGestureRecognizer)", "LongPressGestureRecognizer()", "~(LongPressGestureRecognizer)", "~(PointerDownEvent)", "IconTheme(BuildContext)", "Null(FontFace)", "~(Event?)", "~(String)", "~(Timer)", "BoxConstraintsTween(@)", "Matrix4Tween(@)", "TextStyleTween(@)", "BorderRadiusTween(@)", "Tween<double>(@)", "~(KeyboardEvent)", "bool(Element0)", "int(@,@)", "~(String,FormElement)", "~(EditingState?,TextEditingDeltaState?)", "bool(Object?,Object?)", "~(String?)", "Object?(Object?)", "Object?(@)", "~(FlutterErrorDetails{forceReport:bool})", "DiagnosticsNode(String)", "StackFrame?(String)", "int(_TaskEntry<@>,_TaskEntry<@>)", "bool({priority!int,scheduler!SchedulerBinding})", "String(ByteData)", "List<LicenseEntry>(String)", "int(Element0,Element0)", "~(String?{wrapWidth:int?})", "DiagnosticsNode(InlineSpan)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti")
  };
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"CanvasKit":"LegacyJavaScriptObject","SkFontWeight":"LegacyJavaScriptObject","SkTextDirection":"LegacyJavaScriptObject","SkTextAlign":"LegacyJavaScriptObject","SkTextHeightBehavior":"LegacyJavaScriptObject","SkRectHeightStyle":"LegacyJavaScriptObject","SkRectWidthStyle":"LegacyJavaScriptObject","SkClipOp":"LegacyJavaScriptObject","SkFillType":"LegacyJavaScriptObject","SkBlurStyle":"LegacyJavaScriptObject","SkStrokeCap":"LegacyJavaScriptObject","SkPaintStyle":"LegacyJavaScriptObject","SkBlendMode":"LegacyJavaScriptObject","SkStrokeJoin":"LegacyJavaScriptObject","SkTileMode":"LegacyJavaScriptObject","SkShader":"LegacyJavaScriptObject","SkPaint":"LegacyJavaScriptObject","SkMaskFilter":"LegacyJavaScriptObject","SkPath":"LegacyJavaScriptObject","SkPicture":"LegacyJavaScriptObject","SkTextStyle":"LegacyJavaScriptObject","SkTextBaseline":"LegacyJavaScriptObject","SkTextShadow":"LegacyJavaScriptObject","SkFontFeature":"LegacyJavaScriptObject","SkFont":"LegacyJavaScriptObject","SkParagraph":"LegacyJavaScriptObject","SkDeletable":"LegacyJavaScriptObject","JsUrlStrategy":"LegacyJavaScriptObject","H5vcc":"LegacyJavaScriptObject","CanvasKitInitOptions":"LegacyJavaScriptObject","CanvasKitInitPromise":"LegacyJavaScriptObject","ColorSpace":"LegacyJavaScriptObject","SkWebGLContextOptions":"LegacyJavaScriptObject","SkSurface":"LegacyJavaScriptObject","SkGrContext":"LegacyJavaScriptObject","SkFontSlantEnum":"LegacyJavaScriptObject","SkFontSlant":"LegacyJavaScriptObject","SkFontWeightEnum":"LegacyJavaScriptObject","SkAffinityEnum":"LegacyJavaScriptObject","SkAffinity":"LegacyJavaScriptObject","SkTextDirectionEnum":"LegacyJavaScriptObject","SkTextAlignEnum":"LegacyJavaScriptObject","SkTextHeightBehaviorEnum":"LegacyJavaScriptObject","SkRectHeightStyleEnum":"LegacyJavaScriptObject","SkRectWidthStyleEnum":"LegacyJavaScriptObject","SkVertexModeEnum":"LegacyJavaScriptObject","SkVertexMode":"LegacyJavaScriptObject","SkPointModeEnum":"LegacyJavaScriptObject","SkPointMode":"LegacyJavaScriptObject","SkClipOpEnum":"LegacyJavaScriptObject","SkFillTypeEnum":"LegacyJavaScriptObject","SkPathOpEnum":"LegacyJavaScriptObject","SkPathOp":"LegacyJavaScriptObject","SkBlurStyleEnum":"LegacyJavaScriptObject","SkStrokeCapEnum":"LegacyJavaScriptObject","SkPaintStyleEnum":"LegacyJavaScriptObject","SkBlendModeEnum":"LegacyJavaScriptObject","SkStrokeJoinEnum":"LegacyJavaScriptObject","SkTileModeEnum":"LegacyJavaScriptObject","SkFilterModeEnum":"LegacyJavaScriptObject","SkFilterMode":"LegacyJavaScriptObject","SkMipmapModeEnum":"LegacyJavaScriptObject","SkMipmapMode":"LegacyJavaScriptObject","SkAlphaTypeEnum":"LegacyJavaScriptObject","SkAlphaType":"LegacyJavaScriptObject","SkColorTypeEnum":"LegacyJavaScriptObject","SkColorType":"LegacyJavaScriptObject","SkAnimatedImage":"LegacyJavaScriptObject","SkImage":"LegacyJavaScriptObject","SkShaderNamespace":"LegacyJavaScriptObject","SkMaskFilterNamespace":"LegacyJavaScriptObject","CkFilterOptions":"LegacyJavaScriptObject","_CkCubicFilterOptions":"LegacyJavaScriptObject","_CkTransformFilterOptions":"LegacyJavaScriptObject","SkColorFilterNamespace":"LegacyJavaScriptObject","SkColorFilter":"LegacyJavaScriptObject","SkImageFilterNamespace":"LegacyJavaScriptObject","SkImageFilter":"LegacyJavaScriptObject","SkPathNamespace":"LegacyJavaScriptObject","_NativeFloat32ArrayType":"LegacyJavaScriptObject","SkFloat32List":"LegacyJavaScriptObject","SkContourMeasureIter":"LegacyJavaScriptObject","SkContourMeasure":"LegacyJavaScriptObject","SkPictureRecorder":"LegacyJavaScriptObject","SkCanvas":"LegacyJavaScriptObject","SkParagraphBuilderNamespace":"LegacyJavaScriptObject","SkParagraphBuilder":"LegacyJavaScriptObject","SkParagraphStyle":"LegacyJavaScriptObject","SkParagraphStyleProperties":"LegacyJavaScriptObject","SkTextDecorationStyleEnum":"LegacyJavaScriptObject","SkTextDecorationStyle":"LegacyJavaScriptObject","SkTextBaselineEnum":"LegacyJavaScriptObject","SkPlaceholderAlignmentEnum":"LegacyJavaScriptObject","SkPlaceholderAlignment":"LegacyJavaScriptObject","SkTextStyleProperties":"LegacyJavaScriptObject","SkStrutStyleProperties":"LegacyJavaScriptObject","SkFontStyle":"LegacyJavaScriptObject","SkTypeface":"LegacyJavaScriptObject","SkFontMgr":"LegacyJavaScriptObject","TypefaceFontProvider":"LegacyJavaScriptObject","SkLineMetrics":"LegacyJavaScriptObject","SkTextPosition":"LegacyJavaScriptObject","SkTextRange":"LegacyJavaScriptObject","SkVertices":"LegacyJavaScriptObject","SkTonalColors":"LegacyJavaScriptObject","SkFontMgrNamespace":"LegacyJavaScriptObject","TypefaceFontProviderNamespace":"LegacyJavaScriptObject","SkTypefaceFactory":"LegacyJavaScriptObject","JsConstructor":"LegacyJavaScriptObject","SkObjectFinalizationRegistry":"LegacyJavaScriptObject","SkData":"LegacyJavaScriptObject","SkImageInfo":"LegacyJavaScriptObject","SkPartialImageInfo":"LegacyJavaScriptObject","JsFlutterConfiguration":"LegacyJavaScriptObject","JsPromise":"LegacyJavaScriptObject","ImageDecoder":"LegacyJavaScriptObject","ImageDecoderOptions":"LegacyJavaScriptObject","DecodeResult":"LegacyJavaScriptObject","DecodeOptions":"LegacyJavaScriptObject","VideoFrame":"LegacyJavaScriptObject","ImageTrackList":"LegacyJavaScriptObject","ImageTrack":"LegacyJavaScriptObject","PlainJavaScriptObject":"LegacyJavaScriptObject","UnknownJavaScriptObject":"LegacyJavaScriptObject","JavaScriptFunction":"LegacyJavaScriptObject","AbortPaymentEvent":"Event","ExtendableEvent":"Event","AnimateElement":"SvgElement","AnimationElement":"SvgElement","AElement":"GraphicsElement","CircleElement":"GeometryElement","_Request":"Body","_ResourceProgressEvent":"ProgressEvent","AudioElement":"HtmlElement","MediaElement":"HtmlElement","ShadowRoot":"Node","DocumentFragment":"Node","XmlDocument":"Document","VttCue":"TextTrackCue","CompositionEvent":"UIEvent","DedicatedWorkerGlobalScope":"WorkerGlobalScope","CDataSection":"CharacterData","Text0":"CharacterData","HtmlFormControlsCollection":"HtmlCollection","CssCharsetRule":"CssRule","OperatingSystem":{"Enum":[]},"ManagedSkiaObject":{"SkiaObject":["1"]},"PersistedContainerSurface":{"PersistedSurface":[]},"Checkable":{"RoleManager":[]},"ImageRoleManager":{"RoleManager":[]},"Incrementable":{"RoleManager":[]},"LabelAndValue":{"RoleManager":[]},"LiveRegion":{"RoleManager":[]},"Scrollable":{"RoleManager":[]},"Role":{"Enum":[]},"GestureMode":{"Enum":[]},"Tappable":{"RoleManager":[]},"TextField":{"RoleManager":[]},"LineCharProperty":{"Enum":[]},"AssetManagerException":{"Exception":[]},"BrowserEngine":{"Enum":[]},"RecordingCkCanvas":{"CkCanvas":[]},"CkClearCommand":{"CkPaintCommand":[]},"CkSaveCommand":{"CkPaintCommand":[]},"CkRestoreCommand":{"CkPaintCommand":[]},"CkRestoreToCountCommand":{"CkPaintCommand":[]},"CkTranslateCommand":{"CkPaintCommand":[]},"CkTransformCommand":{"CkPaintCommand":[]},"CkClipRectCommand":{"CkPaintCommand":[]},"CkClipRRectCommand":{"CkPaintCommand":[]},"CkClipPathCommand":{"CkPaintCommand":[]},"CkDrawPaintCommand":{"CkPaintCommand":[]},"CkDrawRectCommand":{"CkPaintCommand":[]},"CkDrawRRectCommand":{"CkPaintCommand":[]},"CkDrawDRRectCommand":{"CkPaintCommand":[]},"CkDrawCircleCommand":{"CkPaintCommand":[]},"CkDrawPathCommand":{"CkPaintCommand":[]},"CkDrawShadowCommand":{"CkPaintCommand":[]},"CkDrawParagraphCommand":{"CkPaintCommand":[]},"CkDrawPictureCommand":{"CkPaintCommand":[]},"CkSaveLayerCommand":{"CkPaintCommand":[]},"SkiaObjectCollectionError":{"Error":[]},"MutatorType":{"Enum":[]},"MutatorsStack":{"Iterable":["Mutator"],"Iterable.E":"Mutator"},"ContainerLayer":{"Layer":[]},"RootLayer":{"Layer":[]},"ClipPathEngineLayer":{"Layer":[],"ClipPathEngineLayer0":[]},"ClipRectEngineLayer":{"Layer":[],"ClipRectEngineLayer0":[]},"TransformEngineLayer":{"Layer":[],"TransformEngineLayer0":[]},"OffsetEngineLayer":{"Layer":[],"TransformEngineLayer0":[],"OffsetEngineLayer0":[]},"PictureLayer0":{"Layer":[]},"PhysicalShapeEngineLayer":{"Layer":[],"PhysicalShapeEngineLayer0":[]},"CkMaskFilter":{"ManagedSkiaObject":["SkMaskFilter"],"SkiaObject":["SkMaskFilter"]},"CkPaint":{"ManagedSkiaObject":["SkPaint"],"SkiaObject":["SkPaint"],"Paint":[]},"CkPath":{"ManagedSkiaObject":["SkPath"],"SkiaObject":["SkPath"],"Path":[]},"CkPicture":{"ManagedSkiaObject":["SkPicture"],"SkiaObject":["SkPicture"]},"CkShader":{"ManagedSkiaObject":["SkShader"],"SkiaObject":["SkShader"]},"CkGradientLinear":{"CkShader":[],"ManagedSkiaObject":["SkShader"],"SkiaObject":["SkShader"]},"CkParagraph":{"SkiaObject":["SkParagraph"]},"_ParagraphCommandType":{"Enum":[]},"CanvasKitError":{"Error":[]},"PersistedClipRect":{"PersistedContainerSurface":[],"PersistedSurface":[],"ClipRectEngineLayer0":[]},"PersistedPhysicalShape":{"PersistedContainerSurface":[],"PersistedSurface":[],"PhysicalShapeEngineLayer0":[]},"PersistedClipPath":{"PersistedContainerSurface":[],"PersistedSurface":[],"ClipPathEngineLayer0":[]},"PersistedOffset":{"PersistedContainerSurface":[],"PersistedSurface":[],"OffsetEngineLayer0":[]},"SurfacePaint":{"Paint":[]},"SurfacePath":{"Path":[]},"PersistedPicture":{"PersistedSurface":[]},"DrawCommand":{"PaintCommand":[]},"PaintSave":{"PaintCommand":[]},"PaintRestore":{"PaintCommand":[]},"PaintTranslate":{"PaintCommand":[]},"PaintTransform":{"PaintCommand":[]},"PaintClipRect":{"PaintCommand":[]},"PaintClipRRect":{"PaintCommand":[]},"PaintClipPath":{"PaintCommand":[]},"PaintDrawRect":{"PaintCommand":[]},"PaintDrawRRect":{"PaintCommand":[]},"PaintDrawDRRect":{"PaintCommand":[]},"PaintDrawCircle":{"PaintCommand":[]},"PaintDrawPath":{"PaintCommand":[]},"PaintDrawParagraph":{"PaintCommand":[]},"PersistedScene":{"PersistedContainerSurface":[],"PersistedSurface":[]},"PersistedSurfaceState":{"Enum":[]},"PersistedLeafSurface":{"PersistedSurface":[]},"PersistedTransform":{"PersistedContainerSurface":[],"PersistedSurface":[],"TransformEngineLayer0":[]},"_CheckableKind":{"Enum":[]},"AccessibilityMode":{"Enum":[]},"EnabledState":{"Enum":[]},"_TypedDataBuffer":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_IntBuffer":{"_TypedDataBuffer":["int"],"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint8Buffer":{"_TypedDataBuffer":["int"],"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int","_TypedDataBuffer.E":"int"},"FlatTextSpan":{"ParagraphSpan":[]},"ChildStyleNode":{"StyleNode":[]},"RootStyleNode":{"StyleNode":[]},"SpanBox":{"RangeBox":[]},"LineBreakType":{"Enum":[]},"_ComparisonResult":{"Enum":[]},"TextCapitalization":{"Enum":[]},"TransformKind":{"Enum":[]},"EngineFlutterWindow":{"FlutterWindow":[]},"EngineSingletonFlutterWindow":{"FlutterWindow":[]},"JSBool":{"bool":[]},"JSNull":{"Null":[]},"LegacyJavaScriptObject":{"JSObject":[],"CanvasKit":[],"SkFontWeight":[],"SkTextDirection":[],"SkTextAlign":[],"SkTextHeightBehavior":[],"SkRectHeightStyle":[],"SkRectWidthStyle":[],"SkClipOp":[],"SkFillType":[],"SkBlurStyle":[],"SkStrokeCap":[],"SkPaintStyle":[],"SkBlendMode":[],"SkStrokeJoin":[],"SkTileMode":[],"SkShader":[],"SkPaint":[],"SkMaskFilter":[],"SkPath":[],"SkPicture":[],"SkTextStyle":[],"SkTextBaseline":[],"SkTextShadow":[],"SkFontFeature":[],"SkFont":[],"SkParagraph":[],"SkDeletable":[],"JsUrlStrategy":[]},"JSArray":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"JSIndexable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"JSIndexable":["1"]},"JSNumber":{"double":[],"num":[]},"JSInt":{"double":[],"int":[],"num":[]},"JSNumNotInt":{"double":[],"num":[]},"JSString":{"String":[],"JSIndexable":["@"]},"_CastIterableBase":{"Iterable":["2"]},"CastIterable":{"_CastIterableBase":["1","2"],"Iterable":["2"],"Iterable.E":"2"},"_EfficientLengthCastIterable":{"CastIterable":["1","2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_CastListBase":{"ListMixin":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"CastList":{"_CastListBase":["1","2"],"ListMixin":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2","ListMixin.E":"2"},"LateError":{"Error":[]},"CodeUnits":{"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedListIterable":{"ListIterable":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2","ListIterable.E":"2"},"WhereIterable":{"Iterable":["1"],"Iterable.E":"1"},"ExpandIterable":{"Iterable":["2"],"Iterable.E":"2"},"TakeIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthTakeIterable":{"TakeIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"SkipIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthSkipIterable":{"SkipIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"SkipWhileIterable":{"Iterable":["1"],"Iterable.E":"1"},"EmptyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"FollowedByIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereTypeIterable":{"Iterable":["1"],"Iterable.E":"1"},"UnmodifiableListBase":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"ReversedListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"Symbol":{"Symbol0":[]},"ConstantMapView":{"UnmodifiableMapView":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"_ConstantMapKeyIterable":{"Iterable":["1"],"Iterable.E":"1"},"GeneralConstantMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"NullError":{"TypeError":[],"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"NullThrownFromJavaScriptException":{"Exception":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Function":[]},"Closure2Args":{"Function":[]},"TearOffClosure":{"Function":[]},"StaticClosure":{"Function":[]},"BoundClosure":{"Function":[]},"RuntimeError":{"Error":[]},"JsLinkedHashMap":{"MapMixin":["1","2"],"Map":["1","2"],"MapMixin.V":"2","MapMixin.K":"1"},"LinkedHashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"JSSyntaxRegExp":{"RegExp":[]},"_MatchImplementation":{"RegExpMatch":[],"Match":[]},"StringMatch":{"Match":[]},"_StringAllMatchesIterable":{"Iterable":["Match"],"Iterable.E":"Match"},"NativeByteBuffer":{"ByteBuffer":[]},"NativeTypedData":{"TypedData":[]},"NativeByteData":{"NativeTypedData":[],"ByteData":[],"TypedData":[]},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"],"NativeTypedData":[],"TypedData":[],"JSIndexable":["1"]},"NativeTypedArrayOfDouble":{"ListMixin":["double"],"JavaScriptIndexingBehavior":["double"],"List":["double"],"NativeTypedData":[],"EfficientLengthIterable":["double"],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"]},"NativeTypedArrayOfInt":{"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"]},"NativeFloat32List":{"NativeTypedArrayOfDouble":[],"ListMixin":["double"],"Float32List":[],"JavaScriptIndexingBehavior":["double"],"List":["double"],"NativeTypedData":[],"EfficientLengthIterable":["double"],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"ListMixin.E":"double"},"NativeFloat64List":{"NativeTypedArrayOfDouble":[],"ListMixin":["double"],"Float64List":[],"JavaScriptIndexingBehavior":["double"],"List":["double"],"NativeTypedData":[],"EfficientLengthIterable":["double"],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"ListMixin.E":"double"},"NativeInt16List":{"NativeTypedArrayOfInt":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"NativeInt32List":{"NativeTypedArrayOfInt":[],"ListMixin":["int"],"Int32List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"NativeInt8List":{"NativeTypedArrayOfInt":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"NativeUint32List":{"NativeTypedArrayOfInt":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"NativeUint8ClampedList":{"NativeTypedArrayOfInt":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"ListMixin":["int"],"Uint8List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"_Type":{"Type":[]},"_Error":{"Error":[]},"_TypeError":{"TypeError":[],"Error":[]},"_Future":{"Future":["1"]},"_TimerImpl":{"Timer":[]},"_SyncStarIterable":{"Iterable":["1"],"Iterable.E":"1"},"AsyncError":{"Error":[]},"_AsyncCompleter":{"_Completer":["1"]},"_AsyncStreamController":{"_StreamController":["1"]},"_ControllerStream":{"_StreamImpl":["1"],"Stream":["1"]},"_ControllerSubscription":{"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"]},"_BufferingStreamSubscription":{"StreamSubscription":["1"]},"_StreamImpl":{"Stream":["1"]},"_HashMap":{"MapMixin":["1","2"],"Map":["1","2"],"MapMixin.V":"2","MapMixin.K":"1"},"_IdentityHashMap":{"_HashMap":["1","2"],"MapMixin":["1","2"],"Map":["1","2"],"MapMixin.V":"2","MapMixin.K":"1"},"_HashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"_LinkedCustomHashMap":{"JsLinkedHashMap":["1","2"],"MapMixin":["1","2"],"Map":["1","2"],"MapMixin.V":"2","MapMixin.K":"1"},"_HashSet":{"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"SetMixin.E":"1"},"_LinkedHashSet":{"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"SetMixin.E":"1"},"IterableBase":{"Iterable":["1"]},"ListBase":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapBase":{"MapMixin":["1","2"],"Map":["1","2"]},"MapMixin":{"Map":["1","2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"_DoubleLinkedQueueElement":{"_DoubleLinkedQueueEntry":["1"],"DoubleLinkedQueueEntry":["1"]},"_DoubleLinkedQueueSentinel":{"_DoubleLinkedQueueEntry":["1"]},"DoubleLinkedQueue":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"ListQueue":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"_SetBase":{"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_UnmodifiableSet":{"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"SetMixin.E":"1"},"_JsonMap":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.V":"@","MapMixin.K":"String"},"_JsonMapKeyIterable":{"ListIterable":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"],"Iterable.E":"String","ListIterable.E":"String"},"Base64Codec":{"Codec":["List<int>","String"]},"Encoding":{"Codec":["String","List<int>"]},"JsonUnsupportedObjectError":{"Error":[]},"JsonCyclicError":{"Error":[]},"JsonCodec":{"Codec":["Object?","String"]},"Utf8Codec":{"Codec":["String","List<int>"]},"double":{"num":[]},"int":{"num":[]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"RegExpMatch":{"Match":[]},"Set":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"_Enum":{"Enum":[]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"NullThrownError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"NoSuchMethodError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"CyclicInitializationError":{"Error":[]},"_Exception":{"Exception":[]},"FormatException":{"Exception":[]},"_StringStackTrace":{"StackTrace":[]},"_Uri":{"Uri":[]},"_SimpleUri":{"Uri":[]},"_DataUri":{"Uri":[]},"HtmlElement":{"Element":[],"Node":[]},"CanvasElement":{"HtmlElement":[],"Element":[],"Node":[]},"Element":{"Node":[]},"File":{"Blob":[]},"FormElement":{"HtmlElement":[],"Element":[],"Node":[]},"KeyboardEvent":{"Event":[]},"MetaElement":{"HtmlElement":[],"Element":[],"Node":[]},"MouseEvent":{"Event":[]},"PointerEvent0":{"MouseEvent":[],"Event":[]},"ProgressEvent":{"Event":[]},"TouchEvent":{"Event":[]},"_Html5NodeValidator":{"NodeValidator":[]},"AnchorElement":{"HtmlElement":[],"Element":[],"Node":[]},"AreaElement":{"HtmlElement":[],"Element":[],"Node":[]},"BaseElement":{"HtmlElement":[],"Element":[],"Node":[]},"BodyElement":{"HtmlElement":[],"Element":[],"Node":[]},"ButtonElement":{"HtmlElement":[],"Element":[],"Node":[]},"CharacterData":{"Node":[]},"CssKeyframesRule":{"CssRule":[]},"CssStyleSheet":{"StyleSheet":[]},"DivElement":{"HtmlElement":[],"Element":[],"Node":[]},"Document":{"Node":[]},"DomRectList":{"ListMixin":["Rectangle<num>"],"List":["Rectangle<num>"],"JavaScriptIndexingBehavior":["Rectangle<num>"],"EfficientLengthIterable":["Rectangle<num>"],"Iterable":["Rectangle<num>"],"JSIndexable":["Rectangle<num>"],"ListMixin.E":"Rectangle<num>"},"DomRectReadOnly":{"Rectangle":["num"]},"DomStringList":{"ListMixin":["String"],"List":["String"],"JavaScriptIndexingBehavior":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"],"JSIndexable":["String"],"ListMixin.E":"String"},"_ChildrenElementList":{"ListMixin":["Element"],"List":["Element"],"EfficientLengthIterable":["Element"],"Iterable":["Element"],"ListMixin.E":"Element"},"_FrozenElementList":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListMixin.E":"1"},"EmbedElement":{"HtmlElement":[],"Element":[],"Node":[]},"FieldSetElement":{"HtmlElement":[],"Element":[],"Node":[]},"FileList":{"ListMixin":["File"],"List":["File"],"JavaScriptIndexingBehavior":["File"],"EfficientLengthIterable":["File"],"Iterable":["File"],"JSIndexable":["File"],"ListMixin.E":"File"},"HtmlCollection":{"ListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"EfficientLengthIterable":["Node"],"Iterable":["Node"],"JSIndexable":["Node"],"ListMixin.E":"Node"},"HtmlDocument":{"Document":[],"Node":[]},"IFrameElement":{"HtmlElement":[],"Element":[],"Node":[]},"InputElement":{"HtmlElement":[],"Element":[],"Node":[]},"LabelElement":{"HtmlElement":[],"Element":[],"Node":[]},"MapElement":{"HtmlElement":[],"Element":[],"Node":[]},"MediaQueryListEvent":{"Event":[]},"MidiInputMap":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.V":"@","MapMixin.K":"String"},"MidiOutputMap":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.V":"@","MapMixin.K":"String"},"MimeTypeArray":{"ListMixin":["MimeType"],"List":["MimeType"],"JavaScriptIndexingBehavior":["MimeType"],"EfficientLengthIterable":["MimeType"],"Iterable":["MimeType"],"JSIndexable":["MimeType"],"ListMixin.E":"MimeType"},"_ChildNodeListLazy":{"ListMixin":["Node"],"List":["Node"],"EfficientLengthIterable":["Node"],"Iterable":["Node"],"ListMixin.E":"Node"},"NodeList":{"ListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"EfficientLengthIterable":["Node"],"Iterable":["Node"],"JSIndexable":["Node"],"ListMixin.E":"Node"},"ObjectElement":{"HtmlElement":[],"Element":[],"Node":[]},"OutputElement":{"HtmlElement":[],"Element":[],"Node":[]},"ParagraphElement":{"HtmlElement":[],"Element":[],"Node":[]},"ParamElement":{"HtmlElement":[],"Element":[],"Node":[]},"PluginArray":{"ListMixin":["Plugin"],"List":["Plugin"],"JavaScriptIndexingBehavior":["Plugin"],"EfficientLengthIterable":["Plugin"],"Iterable":["Plugin"],"JSIndexable":["Plugin"],"ListMixin.E":"Plugin"},"RtcStatsReport":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.V":"@","MapMixin.K":"String"},"SelectElement":{"HtmlElement":[],"Element":[],"Node":[]},"SharedWorkerGlobalScope":{"WorkerGlobalScope":[]},"SlotElement":{"HtmlElement":[],"Element":[],"Node":[]},"SourceBufferList":{"ListMixin":["SourceBuffer"],"List":["SourceBuffer"],"JavaScriptIndexingBehavior":["SourceBuffer"],"EfficientLengthIterable":["SourceBuffer"],"Iterable":["SourceBuffer"],"JSIndexable":["SourceBuffer"],"ListMixin.E":"SourceBuffer"},"SpeechGrammarList":{"ListMixin":["SpeechGrammar"],"List":["SpeechGrammar"],"JavaScriptIndexingBehavior":["SpeechGrammar"],"EfficientLengthIterable":["SpeechGrammar"],"Iterable":["SpeechGrammar"],"JSIndexable":["SpeechGrammar"],"ListMixin.E":"SpeechGrammar"},"SpeechSynthesisEvent":{"Event":[]},"Storage":{"MapMixin":["String","String"],"Map":["String","String"],"MapMixin.V":"String","MapMixin.K":"String"},"StyleElement":{"HtmlElement":[],"Element":[],"Node":[]},"TableElement":{"HtmlElement":[],"Element":[],"Node":[]},"TableRowElement":{"HtmlElement":[],"Element":[],"Node":[]},"TableSectionElement":{"HtmlElement":[],"Element":[],"Node":[]},"TemplateElement":{"HtmlElement":[],"Element":[],"Node":[]},"TextAreaElement":{"HtmlElement":[],"Element":[],"Node":[]},"TextTrackCueList":{"ListMixin":["TextTrackCue"],"List":["TextTrackCue"],"JavaScriptIndexingBehavior":["TextTrackCue"],"EfficientLengthIterable":["TextTrackCue"],"Iterable":["TextTrackCue"],"JSIndexable":["TextTrackCue"],"ListMixin.E":"TextTrackCue"},"TextTrackList":{"ListMixin":["TextTrack"],"List":["TextTrack"],"JavaScriptIndexingBehavior":["TextTrack"],"EfficientLengthIterable":["TextTrack"],"Iterable":["TextTrack"],"JSIndexable":["TextTrack"],"ListMixin.E":"TextTrack"},"TouchList":{"ListMixin":["Touch"],"List":["Touch"],"JavaScriptIndexingBehavior":["Touch"],"EfficientLengthIterable":["Touch"],"Iterable":["Touch"],"JSIndexable":["Touch"],"ListMixin.E":"Touch"},"UIEvent":{"Event":[]},"WheelEvent":{"MouseEvent":[],"Event":[]},"_Attr":{"Node":[]},"_CssRuleList":{"ListMixin":["CssRule"],"List":["CssRule"],"JavaScriptIndexingBehavior":["CssRule"],"EfficientLengthIterable":["CssRule"],"Iterable":["CssRule"],"JSIndexable":["CssRule"],"ListMixin.E":"CssRule"},"_DomRect":{"Rectangle":["num"]},"_GamepadList":{"ListMixin":["Gamepad?"],"List":["Gamepad?"],"JavaScriptIndexingBehavior":["Gamepad?"],"EfficientLengthIterable":["Gamepad?"],"Iterable":["Gamepad?"],"JSIndexable":["Gamepad?"],"ListMixin.E":"Gamepad?"},"_NamedNodeMap":{"ListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"EfficientLengthIterable":["Node"],"Iterable":["Node"],"JSIndexable":["Node"],"ListMixin.E":"Node"},"_SpeechRecognitionResultList":{"ListMixin":["SpeechRecognitionResult"],"List":["SpeechRecognitionResult"],"JavaScriptIndexingBehavior":["SpeechRecognitionResult"],"EfficientLengthIterable":["SpeechRecognitionResult"],"Iterable":["SpeechRecognitionResult"],"JSIndexable":["SpeechRecognitionResult"],"ListMixin.E":"SpeechRecognitionResult"},"_StyleSheetList":{"ListMixin":["StyleSheet"],"List":["StyleSheet"],"JavaScriptIndexingBehavior":["StyleSheet"],"EfficientLengthIterable":["StyleSheet"],"Iterable":["StyleSheet"],"JSIndexable":["StyleSheet"],"ListMixin.E":"StyleSheet"},"_AttributeMap":{"MapMixin":["String","String"],"Map":["String","String"]},"_ElementAttributeMap":{"MapMixin":["String","String"],"Map":["String","String"],"MapMixin.V":"String","MapMixin.K":"String"},"_EventStream":{"Stream":["1"]},"_ElementEventStreamImpl":{"_EventStream":["1"],"Stream":["1"]},"_EventStreamSubscription":{"StreamSubscription":["1"]},"NodeValidatorBuilder":{"NodeValidator":[]},"_SimpleNodeValidator":{"NodeValidator":[]},"_TemplatingNodeValidator":{"NodeValidator":[]},"_SvgNodeValidator":{"NodeValidator":[]},"FilteredElementList":{"ListMixin":["Element"],"List":["Element"],"EfficientLengthIterable":["Element"],"Iterable":["Element"],"ListMixin.E":"Element"},"VersionChangeEvent":{"Event":[]},"JsArray":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListMixin.E":"1"},"NullRejectionException":{"Exception":[]},"Rectangle":{"_RectangleBase":["1"]},"ClipPathElement":{"SvgElement":[],"Element":[],"Node":[]},"DefsElement":{"SvgElement":[],"Element":[],"Node":[]},"GeometryElement":{"SvgElement":[],"Element":[],"Node":[]},"GraphicsElement":{"SvgElement":[],"Element":[],"Node":[]},"LengthList":{"ListMixin":["Length"],"List":["Length"],"EfficientLengthIterable":["Length"],"Iterable":["Length"],"ListMixin.E":"Length"},"NumberList":{"ListMixin":["Number"],"List":["Number"],"EfficientLengthIterable":["Number"],"Iterable":["Number"],"ListMixin.E":"Number"},"PathElement":{"SvgElement":[],"Element":[],"Node":[]},"ScriptElement0":{"SvgElement":[],"Element":[],"Node":[]},"StringList":{"ListMixin":["String"],"List":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"],"ListMixin.E":"String"},"SvgElement":{"Element":[],"Node":[]},"SvgSvgElement":{"SvgElement":[],"Element":[],"Node":[]},"TransformList":{"ListMixin":["Transform0"],"List":["Transform0"],"EfficientLengthIterable":["Transform0"],"Iterable":["Transform0"],"ListMixin.E":"Transform0"},"ByteData":{"TypedData":[]},"Int8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"Uint8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"Uint8ClampedList":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"Int16List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"Uint16List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"Int32List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"Uint32List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"Float32List":{"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"],"TypedData":[]},"Float64List":{"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"],"TypedData":[]},"PointerDeviceKind":{"Enum":[]},"TextAlign":{"Enum":[]},"TextBaseline":{"Enum":[]},"TextDirection":{"Enum":[]},"TextAffinity":{"Enum":[]},"ClipOp":{"Enum":[]},"PathFillType":{"Enum":[]},"KeyEventType":{"Enum":[]},"StrokeCap":{"Enum":[]},"StrokeJoin":{"Enum":[]},"PaintingStyle":{"Enum":[]},"BlendMode":{"Enum":[]},"Clip":{"Enum":[]},"FilterQuality":{"Enum":[]},"AppLifecycleState":{"Enum":[]},"PointerChange":{"Enum":[]},"PointerSignalKind":{"Enum":[]},"PlaceholderAlignment":{"Enum":[]},"TextLeadingDistribution":{"Enum":[]},"BoxHeightStyle":{"Enum":[]},"BoxWidthStyle":{"Enum":[]},"TileMode":{"Enum":[]},"SingletonFlutterWindow":{"FlutterWindow":[]},"Brightness":{"Enum":[]},"AudioParamMap":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.V":"@","MapMixin.K":"String"},"AnimationStatus":{"Enum":[]},"_AnimationDirection":{"Enum":[]},"AnimationBehavior":{"Enum":[]},"AnimationController":{"Animation0":["double"]},"CurvedAnimation":{"Animation0":["double"]},"_Linear":{"Curve":[]},"Cubic":{"Curve":[]},"Tween":{"Animatable":["1"],"Tween.T":"1","Animatable.T":"1"},"ColorTween":{"Tween":["Color?"],"Animatable":["Color?"],"Tween.T":"Color?","Animatable.T":"Color?"},"_AnimatedEvaluation":{"Animation0":["1"]},"IntTween":{"Tween":["int"],"Animatable":["int"],"Tween.T":"int","Animatable.T":"int"},"_ErrorDiagnostic":{"DiagnosticsProperty":["List<Object>"],"DiagnosticsNode":[]},"ErrorDescription":{"_ErrorDiagnostic":[],"DiagnosticsProperty":["List<Object>"],"DiagnosticsNode":[]},"ErrorSummary":{"_ErrorDiagnostic":[],"DiagnosticsProperty":["List<Object>"],"DiagnosticsNode":[]},"ErrorHint":{"_ErrorDiagnostic":[],"DiagnosticsProperty":["List<Object>"],"DiagnosticsNode":[]},"ErrorSpacer":{"DiagnosticsProperty":["~"],"DiagnosticsNode":[]},"FlutterError":{"DiagnosticableTree":[],"AssertionError":[],"Error":[]},"DiagnosticsStackTrace":{"DiagnosticsNode":[]},"_FlutterErrorDetailsNode":{"DiagnosticsNode":[]},"DiagnosticLevel":{"Enum":[]},"DiagnosticsTreeStyle":{"Enum":[]},"_WordWrapParseMode":{"Enum":[]},"DiagnosticsProperty":{"DiagnosticsNode":[]},"DiagnosticableNode":{"DiagnosticsNode":[]},"DiagnosticableTreeNode":{"DiagnosticsNode":[]},"DiagnosticsBlock":{"DiagnosticsNode":[]},"LocalKey":{"Key":[]},"LicenseEntryWithLineBreaks":{"LicenseEntry":[]},"ObserverList":{"Iterable":["1"],"Iterable.E":"1"},"HashedObserverList":{"Iterable":["1"],"Iterable.E":"1"},"TargetPlatform":{"Enum":[]},"GestureDisposition":{"Enum":[]},"GestureBinding":{"HitTestTarget":[]},"FlutterErrorDetailsForPointerEventDispatcher":{"FlutterErrorDetails":[]},"_PointerEventDescription":{"PointerEvent":[]},"PointerEnterEvent":{"PointerEvent":[]},"PointerExitEvent":{"PointerEvent":[]},"PointerDownEvent":{"PointerEvent":[]},"_AbstractPointerEvent":{"PointerEvent":[]},"_TransformedPointerEvent":{"PointerEvent":[]},"PointerAddedEvent":{"PointerEvent":[]},"_TransformedPointerAddedEvent":{"PointerAddedEvent":[],"PointerEvent":[]},"PointerRemovedEvent":{"PointerEvent":[]},"_TransformedPointerRemovedEvent":{"PointerRemovedEvent":[],"PointerEvent":[]},"PointerHoverEvent":{"PointerEvent":[]},"_TransformedPointerHoverEvent":{"PointerHoverEvent":[],"PointerEvent":[]},"_TransformedPointerEnterEvent":{"PointerEnterEvent":[],"PointerEvent":[]},"_TransformedPointerExitEvent":{"PointerExitEvent":[],"PointerEvent":[]},"_TransformedPointerDownEvent":{"PointerDownEvent":[],"PointerEvent":[]},"PointerMoveEvent":{"PointerEvent":[]},"_TransformedPointerMoveEvent":{"PointerMoveEvent":[],"PointerEvent":[]},"PointerUpEvent":{"PointerEvent":[]},"_TransformedPointerUpEvent":{"PointerUpEvent":[],"PointerEvent":[]},"PointerSignalEvent":{"PointerEvent":[]},"PointerScrollEvent":{"PointerSignalEvent":[],"PointerEvent":[]},"_TransformedPointerScrollEvent":{"PointerSignalEvent":[],"PointerEvent":[]},"PointerCancelEvent":{"PointerEvent":[]},"_TransformedPointerCancelEvent":{"PointerCancelEvent":[],"PointerEvent":[]},"_MatrixTransformPart":{"_TransformPart":[]},"_OffsetTransformPart":{"_TransformPart":[]},"LongPressGestureRecognizer":{"GestureRecognizer":[],"DiagnosticableTree":[],"GestureArenaMember":[]},"DoubleTapGestureRecognizer":{"GestureRecognizer":[],"DiagnosticableTree":[],"GestureArenaMember":[]},"GestureRecognizer":{"DiagnosticableTree":[],"GestureArenaMember":[]},"DragStartBehavior":{"Enum":[]},"OneSequenceGestureRecognizer":{"GestureRecognizer":[],"DiagnosticableTree":[],"GestureArenaMember":[]},"GestureRecognizerState":{"Enum":[]},"PrimaryPointerGestureRecognizer":{"GestureRecognizer":[],"DiagnosticableTree":[],"GestureArenaMember":[]},"TapGestureRecognizer":{"GestureRecognizer":[],"DiagnosticableTree":[],"GestureArenaMember":[]},"BaseTapGestureRecognizer":{"GestureRecognizer":[],"DiagnosticableTree":[],"GestureArenaMember":[]},"ButtonTextTheme":{"Enum":[]},"CircleAvatar":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"MaterialColor":{"ColorSwatch":["int"],"Color":[],"ColorSwatch.T":"int"},"Ink":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_InkState":{"State":["Ink"]},"InkDecoration":{"InkFeature":[]},"InkHighlight":{"InteractiveInkFeature":[],"InkFeature":[]},"InkSplash":{"InteractiveInkFeature":[],"InkFeature":[]},"InteractiveInkFeature":{"InkFeature":[]},"_ParentInkResponseProvider":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"_InkResponseStateWidget":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_HighlightType":{"Enum":[]},"InkResponse":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"_InkResponseState":{"State":["_InkResponseStateWidget"],"_ParentInkResponseState":[]},"InkWell":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"FloatingLabelBehavior":{"Enum":[]},"ListTileTheme":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"_ListTileSlot":{"Enum":[]},"ListTile":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"_ListTile":{"SlottedMultiChildRenderObjectWidgetMixin":["_ListTileSlot"],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[],"SlottedMultiChildRenderObjectWidgetMixin.S":"_ListTileSlot"},"_RenderListTile":{"SlottedContainerRenderObjectMixin":["_ListTileSlot"],"RenderBox":[],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[],"SlottedContainerRenderObjectMixin.S":"_ListTileSlot"},"Material":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_RenderInkFeatures":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"MaterialType":{"Enum":[]},"_MaterialState":{"State":["Material"]},"_InkFeatures":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"MaterialState":{"Enum":[]},"MaterialStateMouseCursor":{"MouseCursor0":[],"MaterialStateProperty":["MouseCursor0"]},"_EnabledAndDisabledMouseCursor":{"MouseCursor0":[],"MaterialStateProperty":["MouseCursor0"]},"FadeUpwardsPageTransitionsBuilder":{"PageTransitionsBuilder":[]},"CupertinoPageTransitionsBuilder":{"PageTransitionsBuilder":[]},"MaterialTapTargetSize":{"Enum":[]},"ScriptCategory":{"Enum":[]},"Alignment":{"AlignmentGeometry":[]},"AlignmentDirectional":{"AlignmentGeometry":[]},"_MixedAlignment":{"AlignmentGeometry":[]},"RenderComparison":{"Enum":[]},"Axis":{"Enum":[]},"VerticalDirection":{"Enum":[]},"PaintingBinding":{"SchedulerBinding":[]},"BorderStyle":{"Enum":[]},"OutlinedBorder":{"ShapeBorder":[]},"_CompoundBorder":{"ShapeBorder":[]},"BoxShape":{"Enum":[]},"BoxBorder":{"ShapeBorder":[]},"Border":{"ShapeBorder":[]},"BorderDirectional":{"ShapeBorder":[]},"BoxDecoration":{"Decoration":[]},"BoxFit":{"Enum":[]},"CircleBorder":{"ShapeBorder":[]},"ColorSwatch":{"Color":[]},"EdgeInsets":{"EdgeInsetsGeometry":[]},"EdgeInsetsDirectional":{"EdgeInsetsGeometry":[]},"_MixedEdgeInsets":{"EdgeInsetsGeometry":[]},"InlineSpan":{"DiagnosticableTree":[]},"RoundedRectangleBorder":{"ShapeBorder":[]},"_RoundedRectangleToCircleBorder":{"ShapeBorder":[]},"ShapeDecoration":{"Decoration":[]},"TextOverflow":{"Enum":[]},"TextWidthBasis":{"Enum":[]},"TextSpan":{"InlineSpan":[],"DiagnosticableTree":[],"MouseTrackerAnnotation":[],"HitTestTarget":[]},"RendererBinding":{"SchedulerBinding":[],"HitTestTarget":[]},"BoxHitTestResult":{"HitTestResult":[]},"RenderBox":{"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"BoxHitTestEntry":{"HitTestEntry":["RenderBox"]},"ContainerBoxParentData":{"BoxParentData":[],"ContainerParentDataMixin":["1"]},"RenderErrorBox":{"RenderBox":[],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"FlexParentData":{"BoxParentData":[],"ContainerParentDataMixin":["RenderBox"]},"MainAxisSize":{"Enum":[]},"MainAxisAlignment":{"Enum":[]},"CrossAxisAlignment":{"Enum":[]},"RenderFlex":{"RenderBoxContainerDefaultsMixin":["RenderBox","FlexParentData"],"RenderBox":[],"ContainerRenderObjectMixin":["RenderBox","FlexParentData"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[],"ContainerRenderObjectMixin.1":"FlexParentData","RenderBoxContainerDefaultsMixin.1":"FlexParentData"},"Layer0":{"DiagnosticableTree":[],"AbstractNode":[]},"ContainerLayer0":{"DiagnosticableTree":[],"AbstractNode":[]},"ClipRectLayer":{"ContainerLayer0":[],"DiagnosticableTree":[],"AbstractNode":[]},"PictureLayer":{"DiagnosticableTree":[],"AbstractNode":[]},"OffsetLayer":{"ContainerLayer0":[],"DiagnosticableTree":[],"AbstractNode":[]},"ClipPathLayer":{"ContainerLayer0":[],"DiagnosticableTree":[],"AbstractNode":[]},"TransformLayer":{"OffsetLayer":[],"ContainerLayer0":[],"DiagnosticableTree":[],"AbstractNode":[]},"PhysicalModelLayer":{"ContainerLayer0":[],"DiagnosticableTree":[],"AbstractNode":[]},"RenderObject":{"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"_RootSemanticsFragment":{"_InterestingSemanticsFragment":[]},"_SwitchableSemanticsFragment":{"_InterestingSemanticsFragment":[]},"TextParentData":{"BoxParentData":[],"ContainerParentDataMixin":["RenderBox"]},"RenderParagraph":{"RenderBoxContainerDefaultsMixin":["RenderBox","TextParentData"],"RenderBox":[],"ContainerRenderObjectMixin":["RenderBox","TextParentData"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[],"ContainerRenderObjectMixin.1":"TextParentData","RenderBoxContainerDefaultsMixin.1":"TextParentData"},"RenderProxyBox":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"HitTestBehavior":{"Enum":[]},"RenderProxyBoxWithHitTestBehavior":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"RenderConstrainedBox":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"RenderLimitedBox":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"_RenderCustomClip":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"RenderClipPath":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"_RenderPhysicalModelBase":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"RenderPhysicalModel":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"DecorationPosition":{"Enum":[]},"RenderDecoratedBox":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"RenderTransform":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"RenderPointerListener":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"RenderMouseRegion":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"MouseTrackerAnnotation":[],"AbstractNode":[],"HitTestTarget":[]},"RenderSemanticsAnnotations":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"RenderShiftedBox":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"RenderPadding":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"RenderAligningShiftedBox":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"RenderPositionedBox":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"AlignmentGeometryTween":{"Tween":["AlignmentGeometry?"],"Animatable":["AlignmentGeometry?"],"Tween.T":"AlignmentGeometry?","Animatable.T":"AlignmentGeometry?"},"RenderView":{"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"SchedulerPhase":{"Enum":[]},"TickerFuture":{"Future":["~"]},"SemanticsNode":{"DiagnosticableTree":[],"AbstractNode":[]},"_SemanticsDiagnosticableNode":{"DiagnosticsNode":[]},"SemanticsProperties":{"DiagnosticableTree":[]},"DebugSemanticsDumpOrder":{"Enum":[]},"ServicesBinding":{"SchedulerBinding":[]},"KeyDownEvent":{"KeyEvent":[]},"KeyUpEvent":{"KeyEvent":[]},"KeyRepeatEvent":{"KeyEvent":[]},"KeyDataTransitMode":{"Enum":[]},"PlatformException":{"Exception":[]},"MissingPluginException":{"Exception":[]},"_DeferringMouseCursor":{"MouseCursor0":[]},"_SystemMouseCursorSession":{"MouseCursorSession":[]},"SystemMouseCursor":{"MouseCursor0":[]},"KeyboardSide":{"Enum":[]},"ModifierKey":{"Enum":[]},"RawKeyDownEvent":{"RawKeyEvent":[]},"RawKeyUpEvent":{"RawKeyEvent":[]},"Actions":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"ActivateIntent":{"Intent":[]},"ButtonActivateIntent":{"Intent":[]},"CallbackAction":{"Action":["1"]},"_ActionsState":{"State":["Actions"]},"_ActionsMarker":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"_NullWidget":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"Directionality":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"DefaultAssetBundle":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"ClipPath":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"PhysicalModel":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"Transform":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"Padding":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"Align":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"Center":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"ConstrainedBox":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"LimitedBox":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"Flex":{"MultiChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"Column":{"MultiChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"RichText":{"MultiChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"Listener":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"MouseRegion":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"Semantics":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"Builder":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"WidgetsBinding":{"SchedulerBinding":[],"HitTestTarget":[]},"RenderObjectToWidgetAdapter":{"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"RenderObjectToWidgetElement":{"RenderObjectElement":[],"Element0":[],"DiagnosticableTree":[],"BuildContext":[]},"WidgetsFlutterBinding":{"SchedulerBinding":[],"HitTestTarget":[]},"DecoratedBox":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"Container":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"KeyEventResult":{"Enum":[]},"FocusNode":{"DiagnosticableTree":[]},"FocusScopeNode":{"FocusNode":[],"DiagnosticableTree":[]},"FocusHighlightMode":{"Enum":[]},"UnfocusDisposition":{"Enum":[]},"FocusHighlightStrategy":{"Enum":[]},"FocusManager":{"DiagnosticableTree":[]},"Focus":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_FocusMarker":{"InheritedNotifier":["FocusNode"],"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[],"InheritedNotifier.T":"FocusNode"},"_FocusState":{"State":["Focus"]},"GlobalKey":{"Key":[]},"LabeledGlobalKey":{"GlobalKey":["1"],"Key":[]},"Widget":{"DiagnosticableTree":[]},"StatefulWidget":{"Widget":[],"DiagnosticableTree":[]},"Element0":{"DiagnosticableTree":[],"BuildContext":[]},"InheritedElement":{"Element0":[],"DiagnosticableTree":[],"BuildContext":[]},"UniqueKey":{"Key":[]},"GlobalObjectKey":{"GlobalKey":["1"],"Key":[]},"StatelessWidget":{"Widget":[],"DiagnosticableTree":[]},"_StateLifecycle":{"Enum":[]},"ProxyWidget":{"Widget":[],"DiagnosticableTree":[]},"InheritedWidget":{"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"RenderObjectWidget":{"Widget":[],"DiagnosticableTree":[]},"LeafRenderObjectWidget":{"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"SingleChildRenderObjectWidget":{"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"MultiChildRenderObjectWidget":{"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_ElementLifecycle":{"Enum":[]},"_ElementDiagnosticableTreeNode":{"DiagnosticsNode":[]},"ErrorWidget":{"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"ComponentElement":{"Element0":[],"DiagnosticableTree":[],"BuildContext":[]},"StatelessElement":{"Element0":[],"DiagnosticableTree":[],"BuildContext":[]},"StatefulElement":{"Element0":[],"DiagnosticableTree":[],"BuildContext":[]},"ProxyElement":{"Element0":[],"DiagnosticableTree":[],"BuildContext":[]},"RenderObjectElement":{"Element0":[],"DiagnosticableTree":[],"BuildContext":[]},"RootRenderObjectElement":{"RenderObjectElement":[],"Element0":[],"DiagnosticableTree":[],"BuildContext":[]},"LeafRenderObjectElement":{"RenderObjectElement":[],"Element0":[],"DiagnosticableTree":[],"BuildContext":[]},"SingleChildRenderObjectElement":{"RenderObjectElement":[],"Element0":[],"DiagnosticableTree":[],"BuildContext":[]},"MultiChildRenderObjectElement":{"RenderObjectElement":[],"Element0":[],"DiagnosticableTree":[],"BuildContext":[]},"_NullElement":{"Element0":[],"DiagnosticableTree":[],"BuildContext":[]},"_NullWidget0":{"Widget":[],"DiagnosticableTree":[]},"RawGestureDetector":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"GestureRecognizerFactoryWithHandlers":{"GestureRecognizerFactory":["1"]},"GestureDetector":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"RawGestureDetectorState":{"State":["RawGestureDetector"]},"IconTheme":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"BoxConstraintsTween":{"Tween":["BoxConstraints"],"Animatable":["BoxConstraints"],"Tween.T":"BoxConstraints","Animatable.T":"BoxConstraints"},"DecorationTween":{"Tween":["Decoration"],"Animatable":["Decoration"],"Tween.T":"Decoration","Animatable.T":"Decoration"},"EdgeInsetsGeometryTween":{"Tween":["EdgeInsetsGeometry"],"Animatable":["EdgeInsetsGeometry"],"Tween.T":"EdgeInsetsGeometry","Animatable.T":"EdgeInsetsGeometry"},"BorderRadiusTween":{"Tween":["BorderRadius?"],"Animatable":["BorderRadius?"],"Tween.T":"BorderRadius?","Animatable.T":"BorderRadius?"},"Matrix4Tween":{"Tween":["Matrix4"],"Animatable":["Matrix4"],"Tween.T":"Matrix4","Animatable.T":"Matrix4"},"TextStyleTween":{"Tween":["TextStyle"],"Animatable":["TextStyle"],"Tween.T":"TextStyle","Animatable.T":"TextStyle"},"AnimatedContainer":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"AnimatedDefaultTextStyle":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"AnimatedPhysicalModel":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"ImplicitlyAnimatedWidget":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"ImplicitlyAnimatedWidgetState":{"State":["1"]},"AnimatedWidgetBaseState":{"State":["1"]},"_AnimatedContainerState":{"State":["AnimatedContainer"]},"_AnimatedDefaultTextStyleState":{"State":["AnimatedDefaultTextStyle"]},"_AnimatedPhysicalModelState":{"State":["AnimatedPhysicalModel"]},"InheritedNotifier":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"_InheritedNotifierElement":{"InheritedElement":[],"Element0":[],"DiagnosticableTree":[],"BuildContext":[]},"InheritedTheme":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"MediaQuery":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"_MediaQueryFromWindow":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"NavigationMode":{"Enum":[]},"_MediaQueryFromWindowState":{"State":["_MediaQueryFromWindow"],"WidgetsBindingObserver":[]},"NotificationListener":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"SafeArea":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"SlottedRenderObjectElement":{"RenderObjectElement":[],"Element0":[],"DiagnosticableTree":[],"BuildContext":[]},"DefaultTextStyle":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"DefaultTextHeightBehavior":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"_NullWidget1":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"Text":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"_EffectiveTickerMode":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"TypedDataBuffer":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_IntBuffer0":{"TypedDataBuffer":["int"],"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint8Buffer0":{"TypedDataBuffer":["int"],"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int","TypedDataBuffer.E":"int"},"_InheritedTheme":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"PlaceholderSpan":{"InlineSpan":[],"DiagnosticableTree":[]},"_FocusTraversalGroupMarker":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"_LocalizationsScope":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]}}'));
  A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"FrameReference":1,"ArrayIterator":1,"ListIterator":1,"MappedIterator":2,"WhereIterator":1,"ExpandIterator":2,"TakeIterator":1,"SkipIterator":1,"SkipWhileIterator":1,"EmptyIterator":1,"FollowedByIterator":1,"FixedLengthListMixin":1,"UnmodifiableListMixin":1,"UnmodifiableListBase":1,"__CastListBase__CastIterableBase_ListMixin":2,"LinkedHashMapKeyIterator":1,"NativeTypedArray":1,"_SyncStarIterator":1,"StreamTransformerBase":2,"_AsyncStreamControllerDispatch":1,"_DelayedEvent":1,"_DelayedData":1,"_PendingEvents":1,"_StreamImplEvents":1,"_StreamIterator":1,"_HashMapKeyIterator":1,"_HashSetIterator":1,"_LinkedHashSetIterator":1,"IterableBase":1,"ListBase":1,"MapBase":2,"_DoubleLinkedQueueIterator":1,"_ListQueueIterator":1,"_SetBase":1,"_UnmodifiableSetMixin":1,"_ListBase_Object_ListMixin":1,"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":2,"__SetBase_Object_SetMixin":1,"__UnmodifiableSet__SetBase__UnmodifiableSetMixin":1,"Converter":2,"Comparable":1,"Iterator":1,"ImmutableListMixin":1,"FixedSizeListIterator":1,"_JsArray_JsObject_ListMixin":1,"AnimationWithParentMixin":1,"ParametricCurve":1,"__AnimatedEvaluation_Animation_AnimationWithParentMixin":1,"ValueNotifier":1,"DiagnosticableNode":1,"ContainerBoxParentData":1,"_ContainerBoxParentData_BoxParentData_ContainerParentDataMixin":1,"LayerHandle":1,"ContainerParentDataMixin":1,"RenderProxyBoxMixin":1,"CustomClipper":1,"_RenderCustomClip":1,"_RenderPhysicalModelBase":1,"AutomaticKeepAliveClientMixin":1,"ImplicitlyAnimatedWidgetState":1,"AnimatedWidgetBaseState":1,"_ImplicitlyAnimatedWidgetState_State_SingleTickerProviderStateMixin":1,"SingleTickerProviderStateMixin":1,"TickerProviderStateMixin":1}'));
  var string$ = {
    _00000: "00000008A0009!B000a!C000b000cD000d!E000e000vA000w!F000x!G000y!H000z!I0010!J0011!K0012!I0013!H0014!L0015!M0016!I0017!J0018!N0019!O001a!N001b!P001c001lQ001m001nN001o001qI001r!G001s002iI002j!L002k!J002l!M002m003eI003f!L003g!B003h!R003i!I003j003oA003p!D003q004fA004g!S004h!L004i!K004j004lJ004m004qI004r!H004s!I004t!B004u004vI004w!K004x!J004y004zI0050!T00510056I0057!H0058005aI005b!L005c00jrI00js!T00jt00jvI00jw!T00jx00keI00kf!T00kg00lbI00lc00niA00nj!S00nk00nvA00nw00o2S00o300ofA00og00otI00ou!N00ov00w2I00w300w9A00wa013cI013d!N013e!B013h013iI013j!J013l014tA014u!B014v!A014w!I014x014yA014z!I01500151A0152!G0153!A015c0162U0167016aU016b016wI016x016zK01700171N01720173I0174017eA017f!G017g!A017i017jG017k018qI018r019bA019c019lQ019m!K019n019oQ019p019rI019s!A019t01cjI01ck!G01cl!I01cm01csA01ct01cuI01cv01d0A01d101d2I01d301d4A01d5!I01d601d9A01da01dbI01dc01dlQ01dm01e8I01e9!A01ea01f3I01f401fuA01fx01idI01ie01ioA01ip!I01j401jdQ01je01kaI01kb01kjA01kk01knI01ko!N01kp!G01kq!I01kt!A01ku01kvJ01kw01lhI01li01llA01lm!I01ln01lvA01lw!I01lx01lzA01m0!I01m101m5A01m801ncI01nd01nfA01ni01qfI01qr01r5A01r6!I01r701s3A01s401tlI01tm01toA01tp!I01tq01u7A01u8!I01u901ufA01ug01upI01uq01urA01us01utB01uu01v3Q01v401vkI01vl01vnA01vp01x5I01x8!A01x9!I01xa01xgA01xj01xkA01xn01xpA01xq!I01xz!A01y401y9I01ya01ybA01ye01ynQ01yo01ypI01yq01yrK01ys01ywI01yx!K01yy!I01yz!J01z001z1I01z2!A01z501z7A01z9020pI020s!A020u020yA02130214A02170219A021d!A021l021qI021y0227Q02280229A022a022cI022d!A022e!I022p022rA022t0249I024c!A024d!I024e024lA024n024pA024r024tA024w025dI025e025fA025i025rQ025s!I025t!J0261!I02620267A0269026bA026d027tI027w!A027x!I027y0284A02870288A028b028dA028l028nA028s028xI028y028zA0292029bQ029c029jI029u!A029v02bdI02bi02bmA02bq02bsA02bu02bxA02c0!I02c7!A02cm02cvQ02cw02d4I02d5!J02d6!I02dc02dgA02dh02f1I02f202f8A02fa02fcA02fe02fhA02fp02fqA02fs02g1I02g202g3A02g602gfQ02gn!T02go02gwI02gx02gzA02h0!T02h102ihI02ik!A02il!I02im02isA02iu02iwA02iy02j1A02j902jaA02ji02jlI02jm02jnA02jq02jzQ02k102k2I02kg02kjA02kk02m2I02m302m4A02m5!I02m602mcA02me02mgA02mi02mlA02mm02muI02mv!A02mw02n5I02n602n7A02na02njQ02nk02nsI02nt!K02nu02nzI02o102o3A02o502pyI02q2!A02q702qcA02qe!A02qg02qnA02qu02r3Q02r602r7A02r802t6I02tb!J02tc02trI02ts02u1Q02u202u3B02v502x9I02xc02xlQ02xo02yoI02yp02ysT02yt!I02yu02yvT02yw!S02yx02yyT02yz!B02z0!S02z102z5G02z6!S02z7!I02z8!G02z902zbI02zc02zdA02ze02zjI02zk02ztQ02zu0303I0304!B0305!A0306!I0307!A0308!I0309!A030a!L030b!R030c!L030d!R030e030fA030g031oI031t0326A0327!B0328032cA032d!B032e032fA032g032kI032l032vA032x033wA033y033zB03400345I0346!A0347034fI034g034hT034i!B034j!T034k034oI034p034qS035s037jI037k037tQ037u037vB037w039rI039s03a1Q03a203cvI03cw03fjV03fk03hjW03hk03jzX03k003tmI03tp03trA03ts!I03tt!B03tu03y5I03y8!B03y904fzI04g0!B04g104gqI04gr!L04gs!R04gw04iyI04iz04j1B04j204k1I04k204k4A04kg04kxI04ky04l0A04l104l2B04lc04ltI04lu04lvA04m804moI04mq04mrA04n404pfI04pg04phB04pi!Y04pj!I04pk!B04pl!I04pm!B04pn!J04po04ppI04ps04q1Q04q804qpI04qq04qrG04qs04qtB04qu!T04qv!I04qw04qxG04qy!I04qz04r1A04r2!S04r404rdQ04rk04ucI04ud04ueA04uf04vcI04vd!A04ve04ymI04yo04yzA04z404zfA04zk!I04zo04zpG04zq04zzQ0500053dI053k053tQ053u055iI055j055nA055q058cI058f!A058g058pQ058w0595Q059c059pI059s05a8A05c005c4A05c505dfI05dg05dwA05dx05e3I05e805ehQ05ei05ejB05ek!I05el05eoB05ep05eyI05ez05f7A05f805fgI05fk05fmA05fn05ggI05gh05gtA05gu05gvI05gw05h5Q05h605idI05ie05irA05j005k3I05k405knA05kr05kvB05kw05l5Q05l905lbI05lc05llQ05lm05mlI05mm05mnB05mo05onI05ow05oyA05oz!I05p005pkA05pl05poI05pp!A05pq05pvI05pw!A05px05pyI05pz05q1A05q205vjI05vk05x5A05x705xbA05xc06bgI06bh!T06bi!I06bk06bqB06br!S06bs06buB06bv!Z06bw!A06bx!a06by06bzA06c0!B06c1!S06c206c3B06c4!b06c506c7I06c806c9H06ca!L06cb06cdH06ce!L06cf!H06cg06cjI06ck06cmc06cn!B06co06cpD06cq06cuA06cv!S06cw06d3K06d4!I06d506d6H06d7!I06d806d9Y06da06dfI06dg!N06dh!L06di!R06dj06dlY06dm06dxI06dy!B06dz!I06e006e3B06e4!I06e506e7B06e8!d06e906ecI06ee06enA06eo06f0I06f1!L06f2!R06f306fgI06fh!L06fi!R06fk06fwI06g006g6J06g7!K06g806glJ06gm!K06gn06gqJ06gr!K06gs06gtJ06gu!K06gv06hbJ06hc06i8A06io06iqI06ir!K06is06iwI06ix!K06iy06j9I06ja!J06jb06q9I06qa06qbJ06qc06weI06wf!c06wg06x3I06x4!L06x5!R06x6!L06x7!R06x806xlI06xm06xne06xo06y0I06y1!L06y2!R06y3073jI073k073ne073o07i7I07i807ibe07ic07irI07is07ite07iu07ivI07iw!e07ix!I07iy07j0e07j1!f07j207j3e07j407jsI07jt07jve07jw07l3I07l4!e07l507lqI07lr!e07ls07ngI07nh07nse07nt07nwI07nx!e07ny!I07nz07o1e07o2!I07o307o4e07o507o7I07o807o9e07oa07obI07oc!e07od07oeI07of07ohe07oi07opI07oq!e07or07owI07ox07p1e07p2!I07p307p4e07p5!f07p6!e07p707p8I07p907pge07ph07pjI07pk07ple07pm07ppf07pq07ruI07rv07s0H07s1!I07s207s3G07s4!e07s507s7I07s8!L07s9!R07sa!L07sb!R07sc!L07sd!R07se!L07sf!R07sg!L07sh!R07si!L07sj!R07sk!L07sl!R07sm07usI07ut!L07uu!R07uv07vpI07vq!L07vr!R07vs!L07vt!R07vu!L07vv!R07vw!L07vx!R07vy!L07vz!R07w00876I0877!L0878!R0879!L087a!R087b!L087c!R087d!L087e!R087f!L087g!R087h!L087i!R087j!L087k!R087l!L087m!R087n!L087o!R087p!L087q!R087r!L087s!R087t089jI089k!L089l!R089m!L089n!R089o08ajI08ak!L08al!R08am08viI08vj08vlA08vm08vnI08vt!G08vu08vwB08vx!I08vy!G08vz!B08w008z3I08z4!B08zj!A08zk0926I09280933A0934093hH093i093pB093q!I093r!B093s!L093t!B093u093vI093w093xH093y093zI09400941H0942!L0943!R0944!L0945!R0946!L0947!R0948!L0949!R094a094dB094e!G094f!I094g094hB094i!I094j094kB094l094pI094q094rb094s094uB094v!I094w094xB094y!L094z0956B0957!I0958!B0959!I095a095bB095c095eI096o097de097f099ve09a809g5e09gw09h7e09hc!B09hd09heR09hf09hge09hh!Y09hi09hje09hk!L09hl!R09hm!L09hn!R09ho!L09hp!R09hq!L09hr!R09hs!L09ht!R09hu09hve09hw!L09hx!R09hy!L09hz!R09i0!L09i1!R09i2!L09i3!R09i4!Y09i5!L09i609i7R09i809ihe09ii09inA09io09ise09it!A09iu09iye09iz09j0Y09j109j3e09j5!Y09j6!e09j7!Y09j8!e09j9!Y09ja!e09jb!Y09jc!e09jd!Y09je09k2e09k3!Y09k409kye09kz!Y09l0!e09l1!Y09l2!e09l3!Y09l409l9e09la!Y09lb09lge09lh09liY09ll09lmA09ln09lqY09lr!e09ls09ltY09lu!e09lv!Y09lw!e09lx!Y09ly!e09lz!Y09m0!e09m1!Y09m209mqe09mr!Y09ms09nme09nn!Y09no!e09np!Y09nq!e09nr!Y09ns09nxe09ny!Y09nz09o4e09o509o6Y09o709oae09ob09oeY09of!e09ol09pre09pt09see09sg09ure09v409vjY09vk09wee09wg09xje09xk09xrI09xs0fcve0fcw0fenI0feo0vmce0vmd!Y0vme0wi4e0wi80wjqe0wk00wl9I0wla0wlbB0wlc0wssI0wst!B0wsu!G0wsv!B0wsw0wtbI0wtc0wtlQ0wtm0wviI0wvj0wvmA0wvn!I0wvo0wvxA0wvy0wwtI0wwu0wwvA0www0wz3I0wz40wz5A0wz6!I0wz70wzbB0wzk0x6pI0x6q!A0x6r0x6tI0x6u!A0x6v0x6yI0x6z!A0x700x7mI0x7n0x7rA0x7s0x7vI0x7w!A0x800x87I0x88!K0x890x9vI0x9w0x9xT0x9y0x9zG0xa80xa9A0xaa0xbnI0xbo0xc5A0xce0xcfB0xcg0xcpQ0xcw0xddA0xde0xdnI0xdo!T0xdp0xdqI0xdr!A0xds0xe1Q0xe20xetI0xeu0xf1A0xf20xf3B0xf40xfqI0xfr0xg3A0xgf!I0xgg0xh8V0xhc0xhfA0xhg0xiqI0xir0xj4A0xj50xjaI0xjb0xjdB0xje0xjjI0xjk0xjtQ0xjy0xkfI0xkg0xkpQ0xkq0xm0I0xm10xmeA0xmo0xmqI0xmr!A0xms0xmzI0xn00xn1A0xn40xndQ0xng!I0xnh0xnjB0xnk0xreI0xrf0xrjA0xrk0xrlB0xrm0xroI0xrp0xrqA0xs10xyaI0xyb0xyiA0xyj!B0xyk0xylA0xyo0xyxQ0xz4!g0xz50xzvh0xzw!g0xzx0y0nh0y0o!g0y0p0y1fh0y1g!g0y1h0y27h0y28!g0y290y2zh0y30!g0y310y3rh0y3s!g0y3t0y4jh0y4k!g0y4l0y5bh0y5c!g0y5d0y63h0y64!g0y650y6vh0y6w!g0y6x0y7nh0y7o!g0y7p0y8fh0y8g!g0y8h0y97h0y98!g0y990y9zh0ya0!g0ya10yarh0yas!g0yat0ybjh0ybk!g0ybl0ycbh0ycc!g0ycd0yd3h0yd4!g0yd50ydvh0ydw!g0ydx0yenh0yeo!g0yep0yffh0yfg!g0yfh0yg7h0yg8!g0yg90ygzh0yh0!g0yh10yhrh0yhs!g0yht0yijh0yik!g0yil0yjbh0yjc!g0yjd0yk3h0yk4!g0yk50ykvh0ykw!g0ykx0ylnh0ylo!g0ylp0ymfh0ymg!g0ymh0yn7h0yn8!g0yn90ynzh0yo0!g0yo10yorh0yos!g0yot0ypjh0ypk!g0ypl0yqbh0yqc!g0yqd0yr3h0yr4!g0yr50yrvh0yrw!g0yrx0ysnh0yso!g0ysp0ytfh0ytg!g0yth0yu7h0yu8!g0yu90yuzh0yv0!g0yv10yvrh0yvs!g0yvt0ywjh0ywk!g0ywl0yxbh0yxc!g0yxd0yy3h0yy4!g0yy50yyvh0yyw!g0yyx0yznh0yzo!g0yzp0z0fh0z0g!g0z0h0z17h0z18!g0z190z1zh0z20!g0z210z2rh0z2s!g0z2t0z3jh0z3k!g0z3l0z4bh0z4c!g0z4d0z53h0z54!g0z550z5vh0z5w!g0z5x0z6nh0z6o!g0z6p0z7fh0z7g!g0z7h0z87h0z88!g0z890z8zh0z90!g0z910z9rh0z9s!g0z9t0zajh0zak!g0zal0zbbh0zbc!g0zbd0zc3h0zc4!g0zc50zcvh0zcw!g0zcx0zdnh0zdo!g0zdp0zefh0zeg!g0zeh0zf7h0zf8!g0zf90zfzh0zg0!g0zg10zgrh0zgs!g0zgt0zhjh0zhk!g0zhl0zibh0zic!g0zid0zj3h0zj4!g0zj50zjvh0zjw!g0zjx0zknh0zko!g0zkp0zlfh0zlg!g0zlh0zm7h0zm8!g0zm90zmzh0zn0!g0zn10znrh0zns!g0znt0zojh0zok!g0zol0zpbh0zpc!g0zpd0zq3h0zq4!g0zq50zqvh0zqw!g0zqx0zrnh0zro!g0zrp0zsfh0zsg!g0zsh0zt7h0zt8!g0zt90ztzh0zu0!g0zu10zurh0zus!g0zut0zvjh0zvk!g0zvl0zwbh0zwc!g0zwd0zx3h0zx4!g0zx50zxvh0zxw!g0zxx0zynh0zyo!g0zyp0zzfh0zzg!g0zzh1007h1008!g1009100zh1010!g1011101rh101s!g101t102jh102k!g102l103bh103c!g103d1043h1044!g1045104vh104w!g104x105nh105o!g105p106fh106g!g106h1077h1078!g1079107zh1080!g1081108rh108s!g108t109jh109k!g109l10abh10ac!g10ad10b3h10b4!g10b510bvh10bw!g10bx10cnh10co!g10cp10dfh10dg!g10dh10e7h10e8!g10e910ezh10f0!g10f110frh10fs!g10ft10gjh10gk!g10gl10hbh10hc!g10hd10i3h10i4!g10i510ivh10iw!g10ix10jnh10jo!g10jp10kfh10kg!g10kh10l7h10l8!g10l910lzh10m0!g10m110mrh10ms!g10mt10njh10nk!g10nl10obh10oc!g10od10p3h10p4!g10p510pvh10pw!g10px10qnh10qo!g10qp10rfh10rg!g10rh10s7h10s8!g10s910szh10t0!g10t110trh10ts!g10tt10ujh10uk!g10ul10vbh10vc!g10vd10w3h10w4!g10w510wvh10ww!g10wx10xnh10xo!g10xp10yfh10yg!g10yh10z7h10z8!g10z910zzh1100!g1101110rh110s!g110t111jh111k!g111l112bh112c!g112d1133h1134!g1135113vh113w!g113x114nh114o!g114p115fh115g!g115h1167h1168!g1169116zh1170!g1171117rh117s!g117t118jh118k!g118l119bh119c!g119d11a3h11a4!g11a511avh11aw!g11ax11bnh11bo!g11bp11cfh11cg!g11ch11d7h11d8!g11d911dzh11e0!g11e111erh11es!g11et11fjh11fk!g11fl11gbh11gc!g11gd11h3h11h4!g11h511hvh11hw!g11hx11inh11io!g11ip11jfh11jg!g11jh11k7h11k8!g11k911kzh11l0!g11l111lrh11ls!g11lt11mjh11mk!g11ml11nbh11nc!g11nd11o3h11o4!g11o511ovh11ow!g11ox11pnh11po!g11pp11qfh11qg!g11qh11r7h11r8!g11r911rzh11s0!g11s111srh11ss!g11st11tjh11tk!g11tl11ubh11uc!g11ud11v3h11v4!g11v511vvh11vw!g11vx11wnh11wo!g11wp11xfh11xg!g11xh11y7h11y8!g11y911yzh11z0!g11z111zrh11zs!g11zt120jh120k!g120l121bh121c!g121d1223h1224!g1225122vh122w!g122x123nh123o!g123p124fh124g!g124h1257h1258!g1259125zh1260!g1261126rh126s!g126t127jh127k!g127l128bh128c!g128d1293h1294!g1295129vh129w!g129x12anh12ao!g12ap12bfh12bg!g12bh12c7h12c8!g12c912czh12d0!g12d112drh12ds!g12dt12ejh12ek!g12el12fbh12fc!g12fd12g3h12g4!g12g512gvh12gw!g12gx12hnh12ho!g12hp12ifh12ig!g12ih12j7h12j8!g12j912jzh12k0!g12k112krh12ks!g12kt12ljh12lk!g12ll12mbh12mc!g12md12n3h12n4!g12n512nvh12nw!g12nx12onh12oo!g12op12pfh12pg!g12ph12q7h12q8!g12q912qzh12r0!g12r112rrh12rs!g12rt12sjh12sk!g12sl12tbh12tc!g12td12u3h12u4!g12u512uvh12uw!g12ux12vnh12vo!g12vp12wfh12wg!g12wh12x7h12x8!g12x912xzh12y0!g12y112yrh12ys!g12yt12zjh12zk!g12zl130bh130c!g130d1313h1314!g1315131vh131w!g131x132nh132o!g132p133fh133g!g133h1347h1348!g1349134zh1350!g1351135rh135s!g135t136jh136k!g136l137bh137c!g137d1383h1384!g1385138vh138w!g138x139nh139o!g139p13afh13ag!g13ah13b7h13b8!g13b913bzh13c0!g13c113crh13cs!g13ct13djh13dk!g13dl13ebh13ec!g13ed13f3h13f4!g13f513fvh13fw!g13fx13gnh13go!g13gp13hfh13hg!g13hh13i7h13i8!g13i913izh13j0!g13j113jrh13js!g13jt13kjh13kk!g13kl13lbh13lc!g13ld13m3h13m4!g13m513mvh13mw!g13mx13nnh13no!g13np13ofh13og!g13oh13p7h13p8!g13p913pzh13q0!g13q113qrh13qs!g13qt13rjh13rk!g13rl13sbh13sc!g13sd13t3h13t4!g13t513tvh13tw!g13tx13unh13uo!g13up13vfh13vg!g13vh13w7h13w8!g13w913wzh13x0!g13x113xrh13xs!g13xt13yjh13yk!g13yl13zbh13zc!g13zd1403h1404!g1405140vh140w!g140x141nh141o!g141p142fh142g!g142h1437h1438!g1439143zh1440!g1441144rh144s!g144t145jh145k!g145l146bh146c!g146d1473h1474!g1475147vh147w!g147x148nh148o!g148p149fh149g!g149h14a7h14a8!g14a914azh14b0!g14b114brh14bs!g14bt14cjh14ck!g14cl14dbh14dc!g14dd14e3h14e4!g14e514evh14ew!g14ex14fnh14fo!g14fp14gfh14gg!g14gh14h7h14h8!g14h914hzh14i0!g14i114irh14is!g14it14jjh14jk!g14jl14kbh14kc!g14kd14l3h14l4!g14l514lvh14lw!g14lx14mnh14mo!g14mp14nfh14ng!g14nh14o7h14o8!g14o914ozh14p0!g14p114prh14ps!g14pt14qjh14qk!g14ql14rbh14rc!g14rd14s3h14s4!g14s514svh14sw!g14sx14tnh14to!g14tp14ufh14ug!g14uh14v7h14v8!g14v914vzh14w0!g14w114wrh14ws!g14wt14xjh14xk!g14xl14ybh14yc!g14yd14z3h14z4!g14z514zvh14zw!g14zx150nh150o!g150p151fh151g!g151h1527h1528!g1529152zh1530!g1531153rh153s!g153t154jh154k!g154l155bh155c!g155d1563h1564!g1565156vh156w!g156x157nh157o!g157p158fh158g!g158h1597h1598!g1599159zh15a0!g15a115arh15as!g15at15bjh15bk!g15bl15cbh15cc!g15cd15d3h15d4!g15d515dvh15dw!g15dx15enh15eo!g15ep15ffh15fg!g15fh15g7h15g8!g15g915gzh15h0!g15h115hrh15hs!g15ht15ijh15ik!g15il15jbh15jc!g15jd15k3h15k4!g15k515kvh15kw!g15kx15lnh15lo!g15lp15mfh15mg!g15mh15n7h15n8!g15n915nzh15o0!g15o115orh15os!g15ot15pjh15pk!g15pl15qbh15qc!g15qd15r3h15r4!g15r515rvh15rw!g15rx15snh15so!g15sp15tfh15tg!g15th15u7h15u8!g15u915uzh15v0!g15v115vrh15vs!g15vt15wjh15wk!g15wl15xbh15xc!g15xd15y3h15y4!g15y515yvh15yw!g15yx15znh15zo!g15zp160fh160g!g160h1617h1618!g1619161zh1620!g1621162rh162s!g162t163jh163k!g163l164bh164c!g164d1653h1654!g1655165vh165w!g165x166nh166o!g166p167fh167g!g167h1687h1688!g1689168zh1690!g1691169rh169s!g169t16ajh16ak!g16al16bbh16bc!g16bd16c3h16c4!g16c516cvh16cw!g16cx16dnh16do!g16dp16efh16eg!g16eh16f7h16f8!g16f916fzh16g0!g16g116grh16gs!g16gt16hjh16hk!g16hl16ibh16ic!g16id16j3h16j4!g16j516jvh16jw!g16jx16knh16ko!g16kp16lfh16ls16meW16mj16nvX16o01d6nI1d6o1dkve1dkw1dljI1dlp!U1dlq!A1dlr1dm0U1dm1!I1dm21dmeU1dmg1dmkU1dmm!U1dmo1dmpU1dmr1dmsU1dmu1dn3U1dn41e0tI1e0u!R1e0v!L1e1c1e63I1e64!K1e65!I1e681e6nA1e6o!N1e6p1e6qR1e6r1e6sN1e6t1e6uG1e6v!L1e6w!R1e6x!c1e741e7jA1e7k1e7oe1e7p!L1e7q!R1e7r!L1e7s!R1e7t!L1e7u!R1e7v!L1e7w!R1e7x!L1e7y!R1e7z!L1e80!R1e81!L1e82!R1e83!L1e84!R1e851e86e1e87!L1e88!R1e891e8fe1e8g!R1e8h!e1e8i!R1e8k1e8lY1e8m1e8nG1e8o!e1e8p!L1e8q!R1e8r!L1e8s!R1e8t!L1e8u!R1e8v1e92e1e94!e1e95!J1e96!K1e97!e1e9c1ed8I1edb!d1edd!G1ede1edfe1edg!J1edh!K1edi1edje1edk!L1edl!R1edm1edne1edo!R1edp!e1edq!R1edr1ee1e1ee21ee3Y1ee41ee6e1ee7!G1ee81eeye1eez!L1ef0!e1ef1!R1ef21efue1efv!L1efw!e1efx!R1efy!e1efz!L1eg01eg1R1eg2!L1eg31eg4R1eg5!Y1eg6!e1eg71eggY1egh1ehpe1ehq1ehrY1ehs1eime1eiq1eive1eiy1ej3e1ej61ejbe1eje1ejge1ejk!K1ejl!J1ejm1ejoe1ejp1ejqJ1ejs1ejyI1ek91ekbA1ekc!i1ekd1ereI1erk1ermB1err1eykI1eyl!A1f281f4gI1f4w!A1f4x1f91I1f921f96A1f9c1fa5I1fa7!B1fa81fbjI1fbk!B1fbl1fh9I1fhc1fhlQ1fhs1g7pI1g7r!B1g7s1gd7I1gdb!B1gdc1gjkI1gjl1gjnA1gjp1gjqA1gjw1gjzA1gk01gl1I1gl41gl6A1glb!A1glc1glkI1gls1glzB1gm01gpwI1gpx1gpyA1gq31gq7I1gq81gqdB1gqe!c1gqo1gs5I1gs91gsfB1gsg1h5vI1h5w1h5zA1h681h6hQ1heo1hgpI1hgr1hgsA1hgt!B1hgw1hl1I1hl21hlcA1hld1hpyI1hq81hqaA1hqb1hrrI1hrs1hs6A1hs71hs8B1hs91ht1I1ht21htbQ1htr1htuA1htv1hv3I1hv41hveA1hvf1hvhI1hvi1hvlB1hvx1hwoI1hww1hx5Q1hxc1hxeA1hxf1hyeI1hyf1hysA1hyu1hz3Q1hz41hz7B1hz8!I1hz91hzaA1hzb1i0iI1i0j!A1i0k!I1i0l!T1i0m!I1i0w1i0yA1i0z1i2aI1i2b1i2oA1i2p1i2sI1i2t1i2uB1i2v!I1i2w!B1i2x1i30A1i31!I1i321i33A1i341i3dQ1i3e!I1i3f!T1i3g!I1i3h1i3jB1i3l1i5nI1i5o1i5zA1i601i61B1i62!I1i631i64B1i65!I1i66!A1i801i94I1i95!B1i9c1iamI1ian1iayA1ib41ibdQ1ibk1ibnA1ibp1id5I1id71id8A1id9!I1ida1idgA1idj1idkA1idn1idpA1ids!I1idz!A1ie51ie9I1iea1iebA1iee1iekA1ieo1iesA1iio1ik4I1ik51ikmA1ikn1ikqI1ikr1ikuB1ikv!I1ikw1il5Q1il61il7B1il9!I1ila!A1ilb1injI1ink1io3A1io41io7I1iog1iopQ1itc1iumI1iun1iutA1iuw1iv4A1iv5!T1iv61iv7B1iv81iv9G1iva1ivcI1ivd1ivrB1ivs1ivvI1ivw1ivxA1iww1iy7I1iy81iyoA1iyp1iyqB1iyr1iysI1iz41izdQ1izk1izwT1j0g1j1mI1j1n1j1zA1j20!I1j281j2hQ1j401j57I1j5c1j5lQ1j5m1j5nI1j5o1j5qB1j5r1jcbI1jcc1jcqA1jcr1jhbI1jhc1jhlQ1jhm1jjjI1jjk1jjpA1jjr1jjsA1jjv1jjyA1jjz!I1jk0!A1jk1!I1jk21jk3A1jk41jk6B1jkg1jkpQ1jmo1jo0I1jo11jo7A1joa1jogA1joh!I1joi!T1joj!I1jok!A1jpc!I1jpd1jpmA1jpn1jqqI1jqr1jqxA1jqy!I1jqz1jr2A1jr3!T1jr4!I1jr51jr8B1jr9!T1jra!I1jrb!A1jrk!I1jrl1jrvA1jrw1jt5I1jt61jtlA1jtm1jtoB1jtp!I1jtq1jtsT1jtt1jtuB1juo1k4uI1k4v1k52A1k541k5bA1k5c!I1k5d1k5hB1k5s1k61Q1k621k6kI1k6o!T1k6p!G1k6q1k7jI1k7m1k87A1k891k8mA1kao1kc0I1kc11kc6A1kca!A1kcc1kcdA1kcf1kclA1kcm!I1kcn!A1kcw1kd5Q1kdc1kehI1kei1kemA1keo1kepA1ker1kevA1kew!I1kf41kfdQ1ko01koiI1koj1komA1kon1kv0I1kv11kv4K1kv51kvlI1kvz!B1kw01lriI1lrk1lroB1ls01oifI1oig1oiiL1oij1oilR1oim1ojlI1ojm!R1ojn1ojpI1ojq!L1ojr!R1ojs!L1ojt!R1oju1oqgI1oqh!L1oqi1oqjR1oqk1oviI1ovk1ovqS1ovr!L1ovs!R1s001sctI1scu!L1scv!R1scw1zkuI1zkw1zl5Q1zla1zlbB1zo01zotI1zow1zp0A1zp1!B1zpc1zqnI1zqo1zquA1zqv1zqxB1zqy1zr7I1zr8!B1zr9!I1zrk1zrtQ1zrv20euI20ev20ewB20ex20juI20jz!A20k0!I20k120ljA20lr20luA20lv20m7I20o020o3Y20o4!S20og20ohA20ow25fbe25fk260ve260w26dxI26f426fce2dc02djye2dlc2dleY2dlw2dlzY2dm82dx7e2fpc2ftoI2ftp2ftqA2ftr!B2fts2ftvA2jnk2jxgI2jxh2jxlA2jxm2jxoI2jxp2jyaA2jyb2jycI2jyd2jyjA2jyk2jzdI2jze2jzhA2jzi2k3lI2k3m2k3oA2k3p2l6zI2l722l8fQ2l8g2lmnI2lmo2lo6A2lo72loaI2lob2lpoA2lpp2lpwI2lpx!A2lpy2lqbI2lqc!A2lqd2lqeI2lqf2lqiB2lqj!I2lqz2lr3A2lr52lrjA2mtc2mtiA2mtk2mu0A2mu32mu9A2mub2mucA2mue2muiA2n0g2n1oI2n1s2n1yA2n1z2n25I2n282n2hQ2n2m2ne3I2ne42ne7A2ne82nehQ2nen!J2oe82ojzI2ok02ok6A2olc2on7I2on82oneA2onf!I2onk2ontQ2ony2onzL2p9t2pbfI2pbg!K2pbh2pbjI2pbk!K2pbl2prlI2pz42q67e2q682q6kI2q6l2q6ne2q6o2q98I2q992q9be2q9c2qb0I2qb12qcle2qcm2qdbj2qdc2qo4e2qo5!f2qo62qore2qos2qotI2qou2qpge2qph2qpiI2qpj2qpne2qpo!I2qpp2qpte2qpu2qpwf2qpx2qpye2qpz!f2qq02qq1e2qq22qq4f2qq52qree2qrf2qrjk2qrk2qtde2qte2qtff2qtg2qthe2qti2qtsf2qtt2qude2que2quwf2qux2quze2qv0!f2qv12qv4e2qv52qv7f2qv8!e2qv92qvbf2qvc2qvie2qvj!f2qvk!e2qvl!f2qvm2qvze2qw0!I2qw1!e2qw2!I2qw3!e2qw4!I2qw52qw9e2qwa!f2qwb2qwee2qwf!I2qwg!e2qwh2qwiI2qwj2qyne2qyo2qyuI2qyv2qzae2qzb2qzoI2qzp2r01e2r022r0pI2r0q2r1ve2r1w2r1xf2r1y2r21e2r22!f2r232r2ne2r2o!f2r2p2r2se2r2t2r2uf2r2v2r4je2r4k2r4rI2r4s2r5fe2r5g2r5lI2r5m2r7oe2r7p2r7rf2r7s2r7ue2r7v2r7zf2r802r91I2r922r94H2r952r97Y2r982r9bI2r9c2raae2rab!f2rac2rare2ras2rauf2rav2rb3e2rb4!f2rb52rbfe2rbg!f2rbh2rcve2rcw2rg3I2rg42rgfe2rgg2risI2rit2rjze2rk02rkbI2rkc2rkfe2rkg2rlzI2rm02rm7e2rm82rmhI2rmi2rmne2rmo2rnrI2rns2rnze2ro02rotI2rou2rr3e2rr42rrfI2rrg!f2rrh2rrie2rrj!f2rrk2rrre2rrs2rrzf2rs02rs5e2rs6!f2rs72rsfe2rsg2rspf2rsq2rsre2rss2rsuf2rsv2ruee2ruf!f2rug2rw4e2rw52rw6f2rw7!e2rw82rw9f2rwa!e2rwb!f2rwc2rwse2rwt2rwvf2rww!e2rwx2rx9f2rxa2ry7e2ry82s0jI2s0k2s5be2s5c2sayI2sc02sc9Q2scg2t4te2t4w47p9e47pc5m9pejny9!Ajnz4jo1rAjo5cjobzAl2ionvnhI",
    Error_: "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type",
    There_: "There was a problem trying to load FontManifest.json"
  };
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      Action_Intent: findType("Action<Intent>"),
      AlignmentGeometry: findType("AlignmentGeometry"),
      Animation_double: findType("Animation0<double>"),
      AssertionError: findType("AssertionError"),
      AutofillInfo: findType("AutofillInfo"),
      BaseElement: findType("BaseElement"),
      BasicMessageChannel_nullable_Object: findType("BasicMessageChannel<Object?>"),
      Blob: findType("Blob"),
      Body: findType("Body"),
      BodyElement: findType("BodyElement"),
      BorderRadius: findType("BorderRadius"),
      BoxConstraints: findType("BoxConstraints"),
      BoxParentData: findType("BoxParentData"),
      ByteBuffer: findType("ByteBuffer"),
      ByteData: findType("ByteData"),
      CallbackAction_ActivateIntent: findType("CallbackAction<ActivateIntent>"),
      CallbackAction_ButtonActivateIntent: findType("CallbackAction<ButtonActivateIntent>"),
      CanvasKit: findType("CanvasKit"),
      CanvasParagraph: findType("CanvasParagraph"),
      CastList_of_DiagnosticsNode_and_nullable_DiagnosticsNode: findType("CastList<DiagnosticsNode,DiagnosticsNode?>"),
      ChangeNotifier: findType("ChangeNotifier"),
      CkPaint: findType("CkPaint"),
      CkParagraph: findType("CkParagraph"),
      CkParagraphStyle: findType("CkParagraphStyle"),
      CkPath: findType("CkPath"),
      CkPicture: findType("CkPicture"),
      CkPictureRecorder: findType("CkPictureRecorder"),
      CkStrutStyle: findType("CkStrutStyle"),
      CkTextStyle: findType("CkTextStyle"),
      ClipPathElement: findType("ClipPathElement"),
      CodeUnits: findType("CodeUnits"),
      Color: findType("Color"),
      ConstantMapView_Symbol_dynamic: findType("ConstantMapView<Symbol0,@>"),
      ConstantStringMap_String_Null: findType("ConstantStringMap<String,Null>"),
      ConstantStringMap_String_String: findType("ConstantStringMap<String,String>"),
      ConstantStringMap_String_int: findType("ConstantStringMap<String,int>"),
      ContainerLayer: findType("ContainerLayer"),
      ContainerRenderObjectMixin_of_RenderObject_and_ContainerParentDataMixin_RenderObject: findType("ContainerRenderObjectMixin<RenderObject,ContainerParentDataMixin<RenderObject>>"),
      CrossFrameCache_HtmlElement: findType("CrossFrameCache<HtmlElement>"),
      CssStyleSheet: findType("CssStyleSheet"),
      CustomSemanticsAction: findType("CustomSemanticsAction"),
      Decoration: findType("Decoration"),
      DefaultAssetBundle: findType("DefaultAssetBundle"),
      DefaultTextHeightBehavior: findType("DefaultTextHeightBehavior"),
      DefaultTextStyle: findType("DefaultTextStyle"),
      DefsElement: findType("DefsElement"),
      DiagnosticableTree: findType("DiagnosticableTree"),
      DiagnosticsNode: findType("DiagnosticsNode"),
      Directionality: findType("Directionality"),
      Document: findType("Document"),
      EdgeInsetsGeometry: findType("EdgeInsetsGeometry"),
      EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
      Element: findType("Element"),
      Element_2: findType("Element0"),
      Element_Function_int: findType("Element(int)"),
      EngineParagraphStyle: findType("EngineParagraphStyle"),
      EnginePicture: findType("EnginePicture"),
      EnginePictureRecorder: findType("EnginePictureRecorder"),
      EngineTextStyle: findType("EngineTextStyle"),
      Enum: findType("Enum"),
      Error: findType("Error"),
      Event: findType("Event"),
      Exception: findType("Exception"),
      ExpandIterable__SemanticsSortGroup_SemanticsNode: findType("ExpandIterable<_SemanticsSortGroup,SemanticsNode>"),
      File: findType("File"),
      FileList: findType("FileList"),
      FlexParentData: findType("FlexParentData"),
      Float32List: findType("Float32List"),
      Float64List: findType("Float64List"),
      FlutterError: findType("FlutterError"),
      FocusNode: findType("FocusNode"),
      FocusScopeNode: findType("FocusScopeNode"),
      FontFace: findType("FontFace"),
      Function: findType("Function"),
      Future_dynamic: findType("Future<@>"),
      Future_void: findType("Future<~>"),
      GeneralConstantMap_int_Color: findType("GeneralConstantMap<int,Color>"),
      GeneralConstantMap_int_PhysicalKeyboardKey: findType("GeneralConstantMap<int,PhysicalKeyboardKey>"),
      GestureArenaEntry: findType("GestureArenaEntry"),
      GestureRecognizer: findType("GestureRecognizer"),
      GestureRecognizerFactoryWithHandlers_DoubleTapGestureRecognizer: findType("GestureRecognizerFactoryWithHandlers<DoubleTapGestureRecognizer>"),
      GestureRecognizerFactoryWithHandlers_LongPressGestureRecognizer: findType("GestureRecognizerFactoryWithHandlers<LongPressGestureRecognizer>"),
      GestureRecognizerFactoryWithHandlers_TapGestureRecognizer: findType("GestureRecognizerFactoryWithHandlers<TapGestureRecognizer>"),
      GestureRecognizerFactory_GestureRecognizer: findType("GestureRecognizerFactory<GestureRecognizer>"),
      GlobalKey_State_StatefulWidget: findType("GlobalKey<State<StatefulWidget>>"),
      GlobalObjectKey_State_StatefulWidget: findType("GlobalObjectKey<State<StatefulWidget>>"),
      HashedObserverList_of_void_Function_FocusHighlightMode: findType("HashedObserverList<~(FocusHighlightMode)>"),
      HeapPriorityQueue__TaskEntry_dynamic: findType("HeapPriorityQueue<_TaskEntry<@>>"),
      HitTestEntry_HitTestTarget: findType("HitTestEntry<HitTestTarget>"),
      HitTestResult: findType("HitTestResult"),
      HitTestTarget: findType("HitTestTarget"),
      HtmlElement: findType("HtmlElement"),
      HttpRequest: findType("HttpRequest"),
      IconTheme: findType("IconTheme"),
      ImageData: findType("ImageData"),
      IndexedSlot_nullable_Element: findType("IndexedSlot<Element0?>"),
      InheritedElement: findType("InheritedElement"),
      InheritedWidget: findType("InheritedWidget"),
      InputElement: findType("InputElement"),
      Int32List: findType("Int32List"),
      IntTween: findType("IntTween"),
      InteractiveInkFeature: findType("InteractiveInkFeature"),
      Iterable_dynamic: findType("Iterable<@>"),
      JSArray_BoxShadow: findType("JSArray<BoxShadow>"),
      JSArray_CanvasElement: findType("JSArray<CanvasElement>"),
      JSArray_CkCanvas: findType("JSArray<CkCanvas>"),
      JSArray_CkPaintCommand: findType("JSArray<CkPaintCommand>"),
      JSArray_CkTextStyle: findType("JSArray<CkTextStyle>"),
      JSArray_CodeunitRange: findType("JSArray<CodeunitRange>"),
      JSArray_Color: findType("JSArray<Color>"),
      JSArray_Conic: findType("JSArray<Conic>"),
      JSArray_DiagnosticsNode: findType("JSArray<DiagnosticsNode>"),
      JSArray_Element: findType("JSArray<Element>"),
      JSArray_Element_2: findType("JSArray<Element0>"),
      JSArray_EngineLineMetrics: findType("JSArray<EngineLineMetrics>"),
      JSArray_FocusNode: findType("JSArray<FocusNode>"),
      JSArray_FrameReference_dynamic: findType("JSArray<FrameReference<@>>"),
      JSArray_FrameTiming: findType("JSArray<FrameTiming>"),
      JSArray_Future_nullable_RegisteredFont: findType("JSArray<Future<RegisteredFont?>>"),
      JSArray_Future_void: findType("JSArray<Future<~>>"),
      JSArray_GestureArenaMember: findType("JSArray<GestureArenaMember>"),
      JSArray_HitTestEntry_HitTestTarget: findType("JSArray<HitTestEntry<HitTestTarget>>"),
      JSArray_InkFeature: findType("JSArray<InkFeature>"),
      JSArray_InlineSpanSemanticsInformation: findType("JSArray<InlineSpanSemanticsInformation>"),
      JSArray_KeyEvent: findType("JSArray<KeyEvent>"),
      JSArray_KeyEventResult: findType("JSArray<KeyEventResult>"),
      JSArray_Layer: findType("JSArray<Layer>"),
      JSArray_LicenseEntry: findType("JSArray<LicenseEntry>"),
      JSArray_LineSegment: findType("JSArray<LineSegment>"),
      JSArray_Locale: findType("JSArray<Locale>"),
      JSArray_Map_String_dynamic: findType("JSArray<Map<String,@>>"),
      JSArray_Matrix4: findType("JSArray<Matrix40>"),
      JSArray_Matrix4_2: findType("JSArray<Matrix4>"),
      JSArray_Mutator: findType("JSArray<Mutator>"),
      JSArray_Node: findType("JSArray<Node>"),
      JSArray_NodeValidator: findType("JSArray<NodeValidator>"),
      JSArray_NotoFont: findType("JSArray<NotoFont>"),
      JSArray_Object: findType("JSArray<Object>"),
      JSArray_Offset: findType("JSArray<Offset>"),
      JSArray_PaintCommand: findType("JSArray<PaintCommand>"),
      JSArray_PaintRequest: findType("JSArray<PaintRequest>"),
      JSArray_ParagraphSpan: findType("JSArray<ParagraphSpan>"),
      JSArray_PersistedContainerSurface: findType("JSArray<PersistedContainerSurface>"),
      JSArray_PersistedSurface: findType("JSArray<PersistedSurface>"),
      JSArray_PlaceholderDimensions: findType("JSArray<PlaceholderDimensions>"),
      JSArray_PlaceholderSpan: findType("JSArray<PlaceholderSpan>"),
      JSArray_PointerData: findType("JSArray<PointerData>"),
      JSArray_PointerEvent: findType("JSArray<PointerEvent0>"),
      JSArray_Radius: findType("JSArray<Radius>"),
      JSArray_RangeBox: findType("JSArray<RangeBox>"),
      JSArray_RegisteredFont: findType("JSArray<RegisteredFont>"),
      JSArray_RenderBox: findType("JSArray<RenderBox>"),
      JSArray_RenderObject: findType("JSArray<RenderObject>"),
      JSArray_SaveClipEntry: findType("JSArray<SaveClipEntry>"),
      JSArray_SaveStackEntry: findType("JSArray<SaveStackEntry>"),
      JSArray_SemanticsNode: findType("JSArray<SemanticsNode>"),
      JSArray_SemanticsNodeUpdate: findType("JSArray<SemanticsNodeUpdate>"),
      JSArray_ShaderDeclaration: findType("JSArray<ShaderDeclaration>"),
      JSArray_ShaderMethod: findType("JSArray<ShaderMethod>"),
      JSArray_ShapeBorder: findType("JSArray<ShapeBorder>"),
      JSArray_SkDeletable: findType("JSArray<SkDeletable>"),
      JSArray_SkFont: findType("JSArray<SkFont>"),
      JSArray_StreamSubscription_Event: findType("JSArray<StreamSubscription<Event>>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_StringAttribute: findType("JSArray<StringAttribute>"),
      JSArray_StyleNode: findType("JSArray<StyleNode>"),
      JSArray_Surface: findType("JSArray<Surface>"),
      JSArray_TextBox: findType("JSArray<TextBox>"),
      JSArray_Widget: findType("JSArray<Widget>"),
      JSArray_WidgetsBindingObserver: findType("JSArray<WidgetsBindingObserver>"),
      JSArray__Autofocus: findType("JSArray<_Autofocus>"),
      JSArray__BoxEdge: findType("JSArray<_BoxEdge>"),
      JSArray__InterestingSemanticsFragment: findType("JSArray<_InterestingSemanticsFragment>"),
      JSArray__ParagraphCommand: findType("JSArray<_ParagraphCommand>"),
      JSArray__ParentInkResponseState: findType("JSArray<_ParentInkResponseState>"),
      JSArray__PersistedSurfaceMatch: findType("JSArray<_PersistedSurfaceMatch>"),
      JSArray__ResolvedNotoSubset: findType("JSArray<_ResolvedNotoSubset>"),
      JSArray__SaveElementStackEntry: findType("JSArray<_SaveElementStackEntry>"),
      JSArray__SemanticsSortGroup: findType("JSArray<_SemanticsSortGroup>"),
      JSArray__TransformPart: findType("JSArray<_TransformPart>"),
      JSArray__TraversalSortNode: findType("JSArray<_TraversalSortNode>"),
      JSArray_bool: findType("JSArray<bool>"),
      JSArray_double: findType("JSArray<double>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSArray_nullable_LogicalKeyboardKey: findType("JSArray<LogicalKeyboardKey?>"),
      JSArray_nullable_PersistedSurface: findType("JSArray<PersistedSurface?>"),
      JSArray_nullable_Rect: findType("JSArray<Rect?>"),
      JSArray_nullable_SemanticsObject: findType("JSArray<SemanticsObject?>"),
      JSArray_nullable_ShapeBorder: findType("JSArray<ShapeBorder?>"),
      JSArray_nullable__AsyncBlock: findType("JSArray<_AsyncBlock?>"),
      JSArray_nullable_int: findType("JSArray<int?>"),
      JSArray_of_Stream_LicenseEntry_Function: findType("JSArray<Stream<LicenseEntry>()>"),
      JSArray_of_bool_Function_KeyEvent: findType("JSArray<bool(KeyEvent)>"),
      JSArray_of_nullable_void_Function_GestureMode: findType("JSArray<~(GestureMode)?>"),
      JSArray_of_void_Function: findType("JSArray<~()>"),
      JSArray_of_void_Function_Action_Intent: findType("JSArray<~(Action<Intent>)>"),
      JSArray_of_void_Function_AnimationStatus: findType("JSArray<~(AnimationStatus)>"),
      JSArray_of_void_Function_Duration: findType("JSArray<~(Duration)>"),
      JSArray_of_void_Function_List_FrameTiming: findType("JSArray<~(List<FrameTiming>)>"),
      JSIndexable_dynamic: findType("JSIndexable<@>"),
      JSNull: findType("JSNull"),
      JSObject: findType("JSObject"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      JsArray_dynamic: findType("JsArray<@>"),
      JsFunction: findType("JsFunction"),
      JsLinkedHashMap_Symbol_dynamic: findType("JsLinkedHashMap<Symbol0,@>"),
      Key: findType("Key"),
      KeyRange: findType("KeyRange"),
      KeyboardEvent: findType("KeyboardEvent"),
      KeyboardLockMode: findType("KeyboardLockMode"),
      KeyboardSide: findType("KeyboardSide"),
      LabeledGlobalKey_State_StatefulWidget: findType("LabeledGlobalKey<State<StatefulWidget>>"),
      Layer: findType("Layer"),
      LayerScene: findType("LayerScene"),
      LineCharProperty: findType("LineCharProperty"),
      ListTileTheme: findType("ListTileTheme"),
      List_CodeunitRange: findType("List<CodeunitRange>"),
      List_LicenseEntry: findType("List<LicenseEntry>"),
      List_RestorationBucket: findType("List<RestorationBucket>"),
      List_SemanticsNode: findType("List<SemanticsNode>"),
      List_SkFont: findType("List<SkFont>"),
      List_double: findType("List<double>"),
      List_dynamic: findType("List<@>"),
      LogicalKeyboardKey: findType("LogicalKeyboardKey"),
      Map_String_Object: findType("Map<String,Object>"),
      Map_String_String: findType("Map<String,String>"),
      Map_String_dynamic: findType("Map<String,@>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      Map_of_nullable_Object_and_nullable_Object: findType("Map<Object?,Object?>"),
      Map_of_void_Function_PointerEvent_and_nullable_Matrix4: findType("Map<~(PointerEvent),Matrix4?>"),
      MappedIterable_of_String_and_nullable_StackFrame: findType("MappedIterable<String,StackFrame?>"),
      MappedListIterable_String_String: findType("MappedListIterable<String,String>"),
      MappedListIterable_String_dynamic: findType("MappedListIterable<String,@>"),
      MappedListIterable__TraversalSortNode_SemanticsNode: findType("MappedListIterable<_TraversalSortNode,SemanticsNode>"),
      MappedListIterable_int_SemanticsNode: findType("MappedListIterable<int,SemanticsNode>"),
      MappedListIterable_of_TargetPlatform_and_nullable_PageTransitionsBuilder: findType("MappedListIterable<TargetPlatform,PageTransitionsBuilder?>"),
      MaterialState: findType("MaterialState"),
      Matrix4: findType("Matrix4"),
      MediaQuery: findType("MediaQuery"),
      MediaQueryListEvent: findType("MediaQueryListEvent"),
      MessagePort: findType("MessagePort"),
      ModifierKey: findType("ModifierKey"),
      MouseCursor: findType("MouseCursor0"),
      MouseCursorSession: findType("MouseCursorSession"),
      MouseEvent: findType("MouseEvent"),
      MouseTrackerAnnotation: findType("MouseTrackerAnnotation"),
      MultiChildRenderObjectWidget: findType("MultiChildRenderObjectWidget"),
      MutationObserver: findType("MutationObserver"),
      MutationRecord: findType("MutationRecord"),
      NativeByteBuffer: findType("NativeByteBuffer"),
      NativeTypedArrayOfDouble: findType("NativeTypedArrayOfDouble"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      NativeTypedData: findType("NativeTypedData"),
      NativeUint8List: findType("NativeUint8List"),
      Node: findType("Node"),
      NotificationListener_LayoutChangedNotification: findType("NotificationListener<LayoutChangedNotification>"),
      NotoFont: findType("NotoFont"),
      Null: findType("Null"),
      Object: findType("Object"),
      ObserverList__ParentInkResponseState: findType("ObserverList<_ParentInkResponseState>"),
      ObserverList_of_void_Function: findType("ObserverList<~()>"),
      ObserverList_of_void_Function_Action_Intent: findType("ObserverList<~(Action<Intent>)>"),
      ObserverList_of_void_Function_AnimationStatus: findType("ObserverList<~(AnimationStatus)>"),
      Offset: findType("Offset"),
      Paint: findType("Paint"),
      Path: findType("Path"),
      PathElement: findType("PathElement"),
      PersistedContainerSurface: findType("PersistedContainerSurface"),
      PersistedScene: findType("PersistedScene"),
      PersistedSurface: findType("PersistedSurface"),
      PhysicalKeyboardKey: findType("PhysicalKeyboardKey"),
      PlaceholderDimensions: findType("PlaceholderDimensions"),
      Point_num: findType("Point<num>"),
      PointerAddedEvent: findType("PointerAddedEvent"),
      PointerCancelEvent: findType("PointerCancelEvent"),
      PointerDeviceKind: findType("PointerDeviceKind"),
      PointerDownEvent: findType("PointerDownEvent"),
      PointerEvent: findType("PointerEvent0"),
      PointerEventResampler: findType("PointerEventResampler"),
      PointerEvent_2: findType("PointerEvent"),
      PointerHoverEvent: findType("PointerHoverEvent"),
      PointerMoveEvent: findType("PointerMoveEvent"),
      PointerRemovedEvent: findType("PointerRemovedEvent"),
      PointerSignalEvent: findType("PointerSignalEvent"),
      PointerUpEvent: findType("PointerUpEvent"),
      ProgressEvent: findType("ProgressEvent"),
      ProxyWidget: findType("ProxyWidget"),
      Rectangle_num: findType("Rectangle<num>"),
      RegExp: findType("RegExp"),
      RegExpMatch: findType("RegExpMatch"),
      RenderBox: findType("RenderBox"),
      RenderObject: findType("RenderObject"),
      RenderObjectToWidgetAdapter_RenderBox: findType("RenderObjectToWidgetAdapter<RenderBox>"),
      RenderObjectWidget: findType("RenderObjectWidget"),
      RenderObjectWithChildMixin_RenderObject: findType("RenderObjectWithChildMixin<RenderObject>"),
      RestorationBucket: findType("RestorationBucket"),
      ReversedListIterable__SemanticsSortGroup: findType("ReversedListIterable<_SemanticsSortGroup>"),
      Role: findType("Role"),
      SaveClipEntry: findType("SaveClipEntry"),
      ScriptElement: findType("ScriptElement0"),
      SemanticsAction: findType("SemanticsAction"),
      SemanticsNode: findType("SemanticsNode"),
      SemanticsObject: findType("SemanticsObject"),
      SemanticsTag: findType("SemanticsTag"),
      ServiceExtensionResponse: findType("ServiceExtensionResponse"),
      ShapeBorder: findType("ShapeBorder"),
      SingleChildRenderObjectWidget: findType("SingleChildRenderObjectWidget"),
      Size: findType("Size"),
      SkDeletable: findType("SkDeletable"),
      SkMaskFilter: findType("SkMaskFilter"),
      SkPaint: findType("SkPaint"),
      SkPath: findType("SkPath"),
      SkPicture: findType("SkPicture"),
      SkShader: findType("SkShader"),
      SkipWhileIterable_String: findType("SkipWhileIterable<String>"),
      StackTrace: findType("StackTrace"),
      StatefulWidget: findType("StatefulWidget"),
      StatelessWidget: findType("StatelessWidget"),
      String: findType("String"),
      StringAttribute: findType("StringAttribute"),
      SurfacePaint: findType("SurfacePaint"),
      SurfacePath: findType("SurfacePath"),
      SurfaceScene: findType("SurfaceScene"),
      SvgElement: findType("SvgElement"),
      SvgSvgElement: findType("SvgSvgElement"),
      Symbol: findType("Symbol0"),
      SystemMouseCursor: findType("SystemMouseCursor"),
      SystemUiOverlayStyle: findType("SystemUiOverlayStyle"),
      TemplateElement: findType("TemplateElement"),
      TextAreaElement: findType("TextAreaElement"),
      TextBaseline: findType("TextBaseline"),
      TextPainter: findType("TextPainter"),
      TextParentData: findType("TextParentData"),
      TextStyle: findType("TextStyle"),
      Timer: findType("Timer"),
      TouchEvent: findType("TouchEvent"),
      Tween_double: findType("Tween<double>"),
      Type: findType("Type"),
      TypeError: findType("TypeError"),
      TypedData: findType("TypedData"),
      Uint8List: findType("Uint8List"),
      UnicodePropertyLookup_LineCharProperty: findType("UnicodePropertyLookup<LineCharProperty>"),
      UnicodeRange_TextDirection: findType("UnicodeRange<TextDirection>"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      Uri: findType("Uri"),
      WheelEvent: findType("WheelEvent"),
      WhereIterable_String: findType("WhereIterable<String>"),
      WhereTypeIterable_StackFrame: findType("WhereTypeIterable<StackFrame>"),
      WhereTypeIterable_nullable_MetaElement: findType("WhereTypeIterable<MetaElement?>"),
      WhereTypeIterator_FocusScopeNode: findType("WhereTypeIterator<FocusScopeNode>"),
      Widget: findType("Widget"),
      WidgetsBindingObserver: findType("WidgetsBindingObserver"),
      Window: findType("Window"),
      WorkerGlobalScope: findType("WorkerGlobalScope"),
      _AsyncCompleter_CanvasKit: findType("_AsyncCompleter<CanvasKit>"),
      _AsyncCompleter_HttpRequest: findType("_AsyncCompleter<HttpRequest>"),
      _AsyncCompleter_bool: findType("_AsyncCompleter<bool>"),
      _AsyncCompleter_dynamic: findType("_AsyncCompleter<@>"),
      _AsyncCompleter_nullable_ByteData: findType("_AsyncCompleter<ByteData?>"),
      _AsyncCompleter_void: findType("_AsyncCompleter<~>"),
      _AsyncStreamController_LicenseEntry: findType("_AsyncStreamController<LicenseEntry>"),
      _Attr: findType("_Attr"),
      _ButtonSanitizer: findType("_ButtonSanitizer"),
      _CachedImage: findType("_CachedImage"),
      _ChildNodeListLazy: findType("_ChildNodeListLazy"),
      _EffectiveTickerMode: findType("_EffectiveTickerMode"),
      _ElementEventStreamImpl_Event: findType("_ElementEventStreamImpl<Event>"),
      _ElementEventStreamImpl_KeyboardEvent: findType("_ElementEventStreamImpl<KeyboardEvent>"),
      _ElementEventStreamImpl_MouseEvent: findType("_ElementEventStreamImpl<MouseEvent>"),
      _FocusMarker: findType("_FocusMarker"),
      _FocusTraversalGroupMarker: findType("_FocusTraversalGroupMarker"),
      _FrameCallbackEntry: findType("_FrameCallbackEntry"),
      _FrozenElementList_Element: findType("_FrozenElementList<Element>"),
      _Future_CanvasKit: findType("_Future<CanvasKit>"),
      _Future_HttpRequest: findType("_Future<HttpRequest>"),
      _Future_bool: findType("_Future<bool>"),
      _Future_dynamic: findType("_Future<@>"),
      _Future_int: findType("_Future<int>"),
      _Future_nullable_ByteData: findType("_Future<ByteData?>"),
      _Future_void: findType("_Future<~>"),
      _GestureArena: findType("_GestureArena"),
      _HighlightType: findType("_HighlightType"),
      _IdentityHashMap_dynamic_dynamic: findType("_IdentityHashMap<@,@>"),
      _InheritedTheme: findType("_InheritedTheme"),
      _InterestingSemanticsFragment: findType("_InterestingSemanticsFragment"),
      _ListTileSlot: findType("_ListTileSlot"),
      _LiveImage: findType("_LiveImage"),
      _LocalizationsScope: findType("_LocalizationsScope"),
      _MouseState: findType("_MouseState"),
      _ParentInkResponseProvider: findType("_ParentInkResponseProvider"),
      _PendingImage: findType("_PendingImage"),
      _PointerState: findType("_PointerState"),
      _RenderInkFeatures: findType("_RenderInkFeatures"),
      _ResolvedNotoSubset: findType("_ResolvedNotoSubset"),
      _StoredMessage: findType("_StoredMessage"),
      _TapTracker: findType("_TapTracker"),
      _UnmodifiableSet_String: findType("_UnmodifiableSet<String>"),
      _WidgetTicker: findType("_WidgetTicker"),
      bool: findType("bool"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function_Event: findType("@(Event)"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      int: findType("int"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_AlignmentGeometryTween: findType("AlignmentGeometryTween?"),
      nullable_BitmapCanvas: findType("BitmapCanvas?"),
      nullable_Border: findType("Border?"),
      nullable_BorderDirectional: findType("BorderDirectional?"),
      nullable_BorderRadiusTween: findType("BorderRadiusTween?"),
      nullable_BoxConstraintsTween: findType("BoxConstraintsTween?"),
      nullable_ByteData: findType("ByteData?"),
      nullable_CkPaint: findType("CkPaint?"),
      nullable_CkShader: findType("CkShader?"),
      nullable_ClipPathEngineLayer: findType("ClipPathEngineLayer0?"),
      nullable_ClipPathLayer: findType("ClipPathLayer?"),
      nullable_ClipRectEngineLayer: findType("ClipRectEngineLayer0?"),
      nullable_ColorTween: findType("ColorTween?"),
      nullable_ContainerLayer: findType("ContainerLayer0?"),
      nullable_DecorationTween: findType("DecorationTween?"),
      nullable_EdgeInsetsGeometryTween: findType("EdgeInsetsGeometryTween?"),
      nullable_EngineStrutStyle: findType("EngineStrutStyle?"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_GlProgram: findType("GlProgram?"),
      nullable_InkHighlight: findType("InkHighlight?"),
      nullable_List_dynamic: findType("List<@>?"),
      nullable_Map_String_dynamic: findType("Map<String,@>?"),
      nullable_Map_of_nullable_Object_and_nullable_Object: findType("Map<Object?,Object?>?"),
      nullable_Matrix4: findType("Matrix4?"),
      nullable_Matrix4Tween: findType("Matrix4Tween?"),
      nullable_MetaElement: findType("MetaElement?"),
      nullable_MouseCursor: findType("MouseCursor0?"),
      nullable_Node: findType("Node?"),
      nullable_Object: findType("Object?"),
      nullable_OffsetEngineLayer: findType("OffsetEngineLayer0?"),
      nullable_OffsetLayer: findType("OffsetLayer?"),
      nullable_PersistedClipPath: findType("PersistedClipPath?"),
      nullable_PersistedClipRect: findType("PersistedClipRect?"),
      nullable_PersistedOffset: findType("PersistedOffset?"),
      nullable_PersistedPhysicalShape: findType("PersistedPhysicalShape?"),
      nullable_PersistedSurface: findType("PersistedSurface?"),
      nullable_PersistedTransform: findType("PersistedTransform?"),
      nullable_PhysicalModelLayer: findType("PhysicalModelLayer?"),
      nullable_PhysicalShapeEngineLayer: findType("PhysicalShapeEngineLayer0?"),
      nullable_PipelineOwner: findType("PipelineOwner?"),
      nullable_RegisteredFont: findType("RegisteredFont?"),
      nullable_RenderObject: findType("RenderObject?"),
      nullable_RenderObjectElement: findType("RenderObjectElement?"),
      nullable_RoleManager: findType("RoleManager?"),
      nullable_SemanticsNode: findType("SemanticsNode?"),
      nullable_SemanticsOwner: findType("SemanticsOwner?"),
      nullable_ShapeDecoration: findType("ShapeDecoration?"),
      nullable_String: findType("String?"),
      nullable_SurfacePaint: findType("SurfacePaint?"),
      nullable_TextStyleTween: findType("TextStyleTween?"),
      nullable_TransformEngineLayer: findType("TransformEngineLayer0?"),
      nullable_Tween_double: findType("Tween<double>?"),
      nullable_Uint8List: findType("Uint8List?"),
      nullable__EffectiveTickerMode: findType("_EffectiveTickerMode?"),
      nullable__PointAtTime: findType("_PointAtTime?"),
      nullable__TaskEntry_dynamic: findType("_TaskEntry<@>?"),
      nullable_double: findType("double?"),
      nullable_int: findType("int?"),
      nullable_void_Function: findType("~()?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_AnimationStatus: findType("~(AnimationStatus)"),
      void_Function_Duration: findType("~(Duration)"),
      void_Function_FocusHighlightMode: findType("~(FocusHighlightMode)"),
      void_Function_List_FrameTiming: findType("~(List<FrameTiming>)"),
      void_Function_Object: findType("~(Object)"),
      void_Function_Object_StackTrace: findType("~(Object,StackTrace)"),
      void_Function_PointerEvent: findType("~(PointerEvent)"),
      void_Function_RawKeyEvent: findType("~(RawKeyEvent)"),
      void_Function_nullable_Object: findType("~(Object?)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.BodyElement_methods = A.BodyElement.prototype;
    B.CanvasElement_methods = A.CanvasElement.prototype;
    B.CanvasRenderingContext2D_methods = A.CanvasRenderingContext2D.prototype;
    B.CssStyleDeclaration_methods = A.CssStyleDeclaration.prototype;
    B.DivElement_methods = A.DivElement.prototype;
    B.FormElement_methods = A.FormElement.prototype;
    B.HtmlDocument_methods = A.HtmlDocument.prototype;
    B.HttpRequest_methods = A.HttpRequest.prototype;
    B.InputElement_methods = A.InputElement.prototype;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSBool_methods = J.JSBool.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSNull_methods = J.JSNull.prototype;
    B.JSNumber_methods = J.JSNumber.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    B.JavaScriptObject_methods = J.JavaScriptObject.prototype;
    B.LabelElement_methods = A.LabelElement.prototype;
    B.MediaQueryList_methods = A.MediaQueryList.prototype;
    B.MetaElement_methods = A.MetaElement.prototype;
    B.MutationObserver_methods = A.MutationObserver.prototype;
    B.NativeByteBuffer_methods = A.NativeByteBuffer.prototype;
    B.NativeByteData_methods = A.NativeByteData.prototype;
    B.NativeFloat32List_methods = A.NativeFloat32List.prototype;
    B.NativeInt32List_methods = A.NativeInt32List.prototype;
    B.NativeUint8List_methods = A.NativeUint8List.prototype;
    B.NodeList_methods = A.NodeList.prototype;
    B.OffscreenCanvas_methods = A.OffscreenCanvas.prototype;
    B.ParagraphElement_methods = A.ParagraphElement.prototype;
    B.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    B.StyleElement_methods = A.StyleElement.prototype;
    B.SvgSvgElement_methods = A.SvgSvgElement.prototype;
    B.TableElement_methods = A.TableElement.prototype;
    B.TouchList_methods = A.TouchList.prototype;
    B.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    B.WheelEvent_methods = A.WheelEvent.prototype;
    B.Window_methods = A.Window.prototype;
    B.AccessibilityMode_0 = new A.AccessibilityMode(0, "unknown");
    B.Alignment_0_0 = new A.Alignment(0, 0);
    B.AnimationBehavior_0 = new A.AnimationBehavior(0, "normal");
    B.AnimationStatus_0 = new A.AnimationStatus(0, "dismissed");
    B.AnimationStatus_1 = new A.AnimationStatus(1, "forward");
    B.AnimationStatus_2 = new A.AnimationStatus(2, "reverse");
    B.AnimationStatus_3 = new A.AnimationStatus(3, "completed");
    B.AppLifecycleState_0 = new A.AppLifecycleState(0, "resumed");
    B.AppLifecycleState_1 = new A.AppLifecycleState(1, "inactive");
    B.AppLifecycleState_2 = new A.AppLifecycleState(2, "paused");
    B.AppLifecycleState_3 = new A.AppLifecycleState(3, "detached");
    B.Axis_0 = new A.Axis(0, "horizontal");
    B.Axis_1 = new A.Axis(1, "vertical");
    B.C_JSONMessageCodec0 = new A.JSONMessageCodec0();
    B.BasicMessageChannel_Cfi = new A.BasicMessageChannel("flutter/keyevent", B.C_JSONMessageCodec0, type$.BasicMessageChannel_nullable_Object);
    B.C_StringCodec = new A.StringCodec();
    B.BasicMessageChannel_No7 = new A.BasicMessageChannel("flutter/lifecycle", B.C_StringCodec, A.findType("BasicMessageChannel<String?>"));
    B.BasicMessageChannel_Qma = new A.BasicMessageChannel("flutter/system", B.C_JSONMessageCodec0, type$.BasicMessageChannel_nullable_Object);
    B.BlendMode_13 = new A.BlendMode(13, "modulate");
    B.BlendMode_3 = new A.BlendMode(3, "srcOver");
    B.Radius_0_0 = new A.Radius(0, 0);
    B.BorderRadius_tLn = new A.BorderRadius(B.Radius_0_0, B.Radius_0_0, B.Radius_0_0, B.Radius_0_0);
    B.Color_4278190080 = new A.Color(4278190080);
    B.BorderStyle_0 = new A.BorderStyle(0, "none");
    B.BorderSide_0CF = new A.BorderSide(B.Color_4278190080, 0, B.BorderStyle_0);
    B.BorderStyle_1 = new A.BorderStyle(1, "solid");
    B.Border_27z = new A.Border(B.BorderSide_0CF, B.BorderSide_0CF, B.BorderSide_0CF, B.BorderSide_0CF);
    B.BoxConstraints_ALM = new A.BoxConstraints(1 / 0, 1 / 0, 1 / 0, 1 / 0);
    B.BoxFit_6 = new A.BoxFit(6, "scaleDown");
    B.BoxHeightStyle_0 = new A.BoxHeightStyle(0, "tight");
    B.BoxShape_0 = new A.BoxShape(0, "rectangle");
    B.BoxShape_1 = new A.BoxShape(1, "circle");
    B.BoxWidthStyle_0 = new A.BoxWidthStyle(0, "tight");
    B.Brightness_0 = new A.Brightness(0, "dark");
    B.Brightness_1 = new A.Brightness(1, "light");
    B.BrowserEngine_0 = new A.BrowserEngine(0, "blink");
    B.BrowserEngine_1 = new A.BrowserEngine(1, "webkit");
    B.BrowserEngine_2 = new A.BrowserEngine(2, "firefox");
    B.BrowserEngine_3 = new A.BrowserEngine(3, "edge");
    B.BrowserEngine_4 = new A.BrowserEngine(4, "ie11");
    B.BrowserEngine_5 = new A.BrowserEngine(5, "samsung");
    B.BrowserEngine_6 = new A.BrowserEngine(6, "unknown");
    B.ButtonTextTheme_0 = new A.ButtonTextTheme(0, "normal");
    B.C_AccessibilityFeatures = new A.AccessibilityFeatures();
    B.C_AppBarTheme = new A.AppBarTheme();
    B.C_AssetManager = new A.AssetManager();
    B.C_Base64Encoder = new A.Base64Encoder();
    B.C_Base64Codec = new A.Base64Codec();
    B.C_BottomAppBarTheme = new A.BottomAppBarTheme();
    B.C_BottomNavigationBarThemeData = new A.BottomNavigationBarThemeData();
    B.C_BottomSheetThemeData = new A.BottomSheetThemeData();
    B.C_BrowserPlatformLocation = new A.BrowserPlatformLocation();
    B.C_ButtonBarThemeData = new A.ButtonBarThemeData();
    B.C_CardTheme = new A.CardTheme();
    B.C_CheckboxThemeData = new A.CheckboxThemeData();
    B.C_ChipThemeData = new A.ChipThemeData();
    B.C_CkRestoreCommand = new A.CkRestoreCommand();
    B.C_CkSaveCommand = new A.CkSaveCommand();
    B.C_Console = new A.Console();
    B.C_DataTableThemeData = new A.DataTableThemeData();
    B.C_DecimalInputType = new A.DecimalInputType();
    B.C_DialogTheme = new A.DialogTheme();
    B.C_DividerThemeData = new A.DividerThemeData();
    B.C_DrawerThemeData = new A.DrawerThemeData();
    B.C_ElevatedButtonThemeData = new A.ElevatedButtonThemeData();
    B.C_EmailInputType = new A.EmailInputType();
    B.C_EmptyIterator = new A.EmptyIterator();
    B.C_Endian0 = new A.Endian();
    B.C_Endian = new A.Endian();
    B.C_FloatingActionButtonThemeData = new A.FloatingActionButtonThemeData();
    B.C_FloatingLabelAlignment = new A.FloatingLabelAlignment();
    B.C_GestureSettings = new A.GestureSettings();
    B.C_HashUrlStrategy = new A.HashUrlStrategy();
    B.FloatingLabelBehavior_1 = new A.FloatingLabelBehavior(1, "auto");
    B.C_InputDecorationTheme = new A.InputDecorationTheme();
    B.C_JSONMessageCodec = new A.JSONMessageCodec();
    B.C_JSONMethodCodec = new A.JSONMethodCodec();
    B.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    B.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    B.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    B.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    B.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    B.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    B.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    B.C_JS_CONST3 = function(hooks) { return hooks; }
;
    B.C_JsonCodec = new A.JsonCodec();
    B.C_ListTileThemeData = new A.ListTileThemeData();
    B.C_MaterialBannerThemeData = new A.MaterialBannerThemeData();
    B.C_MultilineInputType = new A.MultilineInputType();
    B.C_NavigationBarThemeData = new A.NavigationBarThemeData();
    B.C_NavigationRailThemeData = new A.NavigationRailThemeData();
    B.C_NoTextInputType = new A.NoTextInputType();
    B.C_NumberInputType = new A.NumberInputType();
    B.C_Object = new A.Object();
    B.C_OutOfMemoryError = new A.OutOfMemoryError();
    B.C_OutlinedButtonThemeData = new A.OutlinedButtonThemeData();
    B.TargetPlatform_0 = new A.TargetPlatform(0, "android");
    B.TargetPlatform_2 = new A.TargetPlatform(2, "iOS");
    B.TargetPlatform_3 = new A.TargetPlatform(3, "linux");
    B.TargetPlatform_4 = new A.TargetPlatform(4, "macOS");
    B.TargetPlatform_5 = new A.TargetPlatform(5, "windows");
    B.C_FadeUpwardsPageTransitionsBuilder = new A.FadeUpwardsPageTransitionsBuilder();
    B.C_CupertinoPageTransitionsBuilder = new A.CupertinoPageTransitionsBuilder();
    B.Map_3hES6 = new A.GeneralConstantMap([B.TargetPlatform_0, B.C_FadeUpwardsPageTransitionsBuilder, B.TargetPlatform_2, B.C_CupertinoPageTransitionsBuilder, B.TargetPlatform_3, B.C_FadeUpwardsPageTransitionsBuilder, B.TargetPlatform_4, B.C_CupertinoPageTransitionsBuilder, B.TargetPlatform_5, B.C_FadeUpwardsPageTransitionsBuilder], A.findType("GeneralConstantMap<TargetPlatform,PageTransitionsBuilder>"));
    B.C_PageTransitionsTheme = new A.PageTransitionsTheme();
    B.C_PaintRestore = new A.PaintRestore();
    B.C_PaintSave = new A.PaintSave();
    B.C_PhoneInputType = new A.PhoneInputType();
    B.C_PointerSupportDetector = new A.PointerSupportDetector();
    B.C_PopupMenuThemeData = new A.PopupMenuThemeData();
    B.C_ProgressIndicatorThemeData = new A.ProgressIndicatorThemeData();
    B.C_RadioThemeData = new A.RadioThemeData();
    B.C_ScrollbarThemeData = new A.ScrollbarThemeData();
    B.C_SentinelValue = new A.SentinelValue();
    B.C_SliderThemeData = new A.SliderThemeData();
    B.C_SnackBarThemeData = new A.SnackBarThemeData();
    B.C_StandardMessageCodec = new A.StandardMessageCodec();
    B.C_StandardMessageCodec0 = new A.StandardMessageCodec0();
    B.C_StandardMethodCodec = new A.StandardMethodCodec();
    B.C_SwitchThemeData = new A.SwitchThemeData();
    B.C_TabBarTheme = new A.TabBarTheme();
    B.C_TextButtonThemeData = new A.TextButtonThemeData();
    B.C_TextInputClearClient = new A.TextInputClearClient();
    B.C_TextInputHide = new A.TextInputHide();
    B.C_TextInputRequestAutofill = new A.TextInputRequestAutofill();
    B.C_TextInputSetCaretRect = new A.TextInputSetCaretRect();
    B.C_TextInputSetMarkedTextRect = new A.TextInputSetMarkedTextRect();
    B.C_TextInputShow = new A.TextInputShow();
    B.C_TextInputType = new A.TextInputType();
    B.C_TextInputUpdateConfig = new A.TextInputUpdateConfig();
    B.C_TextSelectionThemeData = new A.TextSelectionThemeData();
    B.C_TimePickerThemeData = new A.TimePickerThemeData();
    B.C_ToggleButtonsThemeData = new A.ToggleButtonsThemeData();
    B.C_TooltipThemeData = new A.TooltipThemeData();
    B.C_UrlInputType = new A.UrlInputType();
    B.C_Utf8Codec = new A.Utf8Codec();
    B.C_Utf8Encoder = new A.Utf8Encoder();
    B.Rect_0_0_0_0 = new A.Rect(0, 0, 0, 0);
    B.WindowPadding_0_0_0_0 = new A.WindowPadding(0, 0, 0, 0);
    B.List_empty3 = A._setArrayType(makeConstList([]), A.findType("JSArray<DisplayFeature>"));
    B.C_ViewConfiguration = new A.ViewConfiguration0();
    B.C__DefaultBinaryMessenger = new A._DefaultBinaryMessenger();
    B.C__DeferringMouseCursor = new A._DeferringMouseCursor();
    B.C__DelayedDone = new A._DelayedDone();
    B.SystemMouseCursor_click = new A.SystemMouseCursor("click");
    B.SystemMouseCursor_basic = new A.SystemMouseCursor("basic");
    B.C__EnabledAndDisabledMouseCursor = new A._EnabledAndDisabledMouseCursor();
    B.C__HashEnd = new A._HashEnd();
    B.C__InkSplashFactory = new A._InkSplashFactory();
    B.C__Linear = new A._Linear();
    B.C__NoDefaultValue = new A._NoDefaultValue();
    B.C__Required = new A._Required();
    B.C__RootZone = new A._RootZone();
    B.C__StringStackTrace = new A._StringStackTrace();
    B.CircleBorder_IVQ = new A.CircleBorder(B.BorderSide_0CF);
    B.ClipOp_0 = new A.ClipOp(0, "difference");
    B.ClipOp_1 = new A.ClipOp(1, "intersect");
    B.Clip_0 = new A.Clip(0, "none");
    B.Clip_1 = new A.Clip(1, "hardEdge");
    B.Clip_2 = new A.Clip(2, "antiAlias");
    B.Clip_3 = new A.Clip(3, "antiAliasWithSaveLayer");
    B.CodeunitRange_0_255 = new A.CodeunitRange(0, 255);
    B.CodeunitRange_1024_1119 = new A.CodeunitRange(1024, 1119);
    B.CodeunitRange_1120_1327 = new A.CodeunitRange(1120, 1327);
    B.CodeunitRange_11360_11391 = new A.CodeunitRange(11360, 11391);
    B.CodeunitRange_11520_11567 = new A.CodeunitRange(11520, 11567);
    B.CodeunitRange_11648_11742 = new A.CodeunitRange(11648, 11742);
    B.CodeunitRange_1168_1169 = new A.CodeunitRange(1168, 1169);
    B.CodeunitRange_11744_11775 = new A.CodeunitRange(11744, 11775);
    B.CodeunitRange_11841_11841 = new A.CodeunitRange(11841, 11841);
    B.CodeunitRange_1200_1201 = new A.CodeunitRange(1200, 1201);
    B.CodeunitRange_12288_12351 = new A.CodeunitRange(12288, 12351);
    B.CodeunitRange_12288_12543 = new A.CodeunitRange(12288, 12543);
    B.CodeunitRange_12288_12591 = new A.CodeunitRange(12288, 12591);
    B.CodeunitRange_12549_12585 = new A.CodeunitRange(12549, 12585);
    B.CodeunitRange_12593_12686 = new A.CodeunitRange(12593, 12686);
    B.CodeunitRange_12800_12828 = new A.CodeunitRange(12800, 12828);
    B.CodeunitRange_12800_13311 = new A.CodeunitRange(12800, 13311);
    B.CodeunitRange_12896_12923 = new A.CodeunitRange(12896, 12923);
    B.CodeunitRange_1328_1424 = new A.CodeunitRange(1328, 1424);
    B.CodeunitRange_1417_1417 = new A.CodeunitRange(1417, 1417);
    B.CodeunitRange_1424_1535 = new A.CodeunitRange(1424, 1535);
    B.CodeunitRange_1536_1791 = new A.CodeunitRange(1536, 1791);
    B.CodeunitRange_19968_40959 = new A.CodeunitRange(19968, 40959);
    B.CodeunitRange_2304_2431 = new A.CodeunitRange(2304, 2431);
    B.CodeunitRange_2385_2386 = new A.CodeunitRange(2385, 2386);
    B.CodeunitRange_2404_2405 = new A.CodeunitRange(2404, 2405);
    B.CodeunitRange_2433_2555 = new A.CodeunitRange(2433, 2555);
    B.CodeunitRange_2561_2677 = new A.CodeunitRange(2561, 2677);
    B.CodeunitRange_256_591 = new A.CodeunitRange(256, 591);
    B.CodeunitRange_258_259 = new A.CodeunitRange(258, 259);
    B.CodeunitRange_2688_2815 = new A.CodeunitRange(2688, 2815);
    B.CodeunitRange_272_273 = new A.CodeunitRange(272, 273);
    B.CodeunitRange_2946_3066 = new A.CodeunitRange(2946, 3066);
    B.CodeunitRange_296_297 = new A.CodeunitRange(296, 297);
    B.CodeunitRange_305_305 = new A.CodeunitRange(305, 305);
    B.CodeunitRange_3072_3199 = new A.CodeunitRange(3072, 3199);
    B.CodeunitRange_3202_3314 = new A.CodeunitRange(3202, 3314);
    B.CodeunitRange_3330_3455 = new A.CodeunitRange(3330, 3455);
    B.CodeunitRange_338_339 = new A.CodeunitRange(338, 339);
    B.CodeunitRange_3458_3572 = new A.CodeunitRange(3458, 3572);
    B.CodeunitRange_3585_3675 = new A.CodeunitRange(3585, 3675);
    B.CodeunitRange_360_361 = new A.CodeunitRange(360, 361);
    B.CodeunitRange_3713_3807 = new A.CodeunitRange(3713, 3807);
    B.CodeunitRange_4096_4255 = new A.CodeunitRange(4096, 4255);
    B.CodeunitRange_416_417 = new A.CodeunitRange(416, 417);
    B.CodeunitRange_42560_42655 = new A.CodeunitRange(42560, 42655);
    B.CodeunitRange_4256_4351 = new A.CodeunitRange(4256, 4351);
    B.CodeunitRange_42784_43007 = new A.CodeunitRange(42784, 43007);
    B.CodeunitRange_43056_43065 = new A.CodeunitRange(43056, 43065);
    B.CodeunitRange_431_432 = new A.CodeunitRange(431, 432);
    B.CodeunitRange_43232_43259 = new A.CodeunitRange(43232, 43259);
    B.CodeunitRange_43777_43822 = new A.CodeunitRange(43777, 43822);
    B.CodeunitRange_44032_55215 = new A.CodeunitRange(44032, 55215);
    B.CodeunitRange_4608_5017 = new A.CodeunitRange(4608, 5017);
    B.CodeunitRange_6016_6143 = new A.CodeunitRange(6016, 6143);
    B.CodeunitRange_601_601 = new A.CodeunitRange(601, 601);
    B.CodeunitRange_64275_64279 = new A.CodeunitRange(64275, 64279);
    B.CodeunitRange_64285_64335 = new A.CodeunitRange(64285, 64335);
    B.CodeunitRange_64336_65023 = new A.CodeunitRange(64336, 65023);
    B.CodeunitRange_65070_65071 = new A.CodeunitRange(65070, 65071);
    B.CodeunitRange_65072_65135 = new A.CodeunitRange(65072, 65135);
    B.CodeunitRange_65132_65276 = new A.CodeunitRange(65132, 65276);
    B.CodeunitRange_65279_65279 = new A.CodeunitRange(65279, 65279);
    B.CodeunitRange_65280_65519 = new A.CodeunitRange(65280, 65519);
    B.CodeunitRange_65533_65533 = new A.CodeunitRange(65533, 65533);
    B.CodeunitRange_699_700 = new A.CodeunitRange(699, 700);
    B.CodeunitRange_710_710 = new A.CodeunitRange(710, 710);
    B.CodeunitRange_7296_7304 = new A.CodeunitRange(7296, 7304);
    B.CodeunitRange_730_730 = new A.CodeunitRange(730, 730);
    B.CodeunitRange_732_732 = new A.CodeunitRange(732, 732);
    B.CodeunitRange_7376_7414 = new A.CodeunitRange(7376, 7414);
    B.CodeunitRange_7386_7386 = new A.CodeunitRange(7386, 7386);
    B.CodeunitRange_7416_7417 = new A.CodeunitRange(7416, 7417);
    B.CodeunitRange_7680_7935 = new A.CodeunitRange(7680, 7935);
    B.CodeunitRange_775_775 = new A.CodeunitRange(775, 775);
    B.CodeunitRange_77824_78894 = new A.CodeunitRange(77824, 78894);
    B.CodeunitRange_7840_7929 = new A.CodeunitRange(7840, 7929);
    B.CodeunitRange_7936_8191 = new A.CodeunitRange(7936, 8191);
    B.CodeunitRange_803_803 = new A.CodeunitRange(803, 803);
    B.CodeunitRange_8192_8303 = new A.CodeunitRange(8192, 8303);
    B.CodeunitRange_8204_8204 = new A.CodeunitRange(8204, 8204);
    B.CodeunitRange_8204_8205 = new A.CodeunitRange(8204, 8205);
    B.CodeunitRange_8204_8206 = new A.CodeunitRange(8204, 8206);
    B.CodeunitRange_8208_8209 = new A.CodeunitRange(8208, 8209);
    B.CodeunitRange_8224_8224 = new A.CodeunitRange(8224, 8224);
    B.CodeunitRange_8271_8271 = new A.CodeunitRange(8271, 8271);
    B.CodeunitRange_8308_8308 = new A.CodeunitRange(8308, 8308);
    B.CodeunitRange_8352_8363 = new A.CodeunitRange(8352, 8363);
    B.CodeunitRange_8360_8360 = new A.CodeunitRange(8360, 8360);
    B.CodeunitRange_8362_8362 = new A.CodeunitRange(8362, 8362);
    B.CodeunitRange_8363_8363 = new A.CodeunitRange(8363, 8363);
    B.CodeunitRange_8364_8364 = new A.CodeunitRange(8364, 8364);
    B.CodeunitRange_8365_8399 = new A.CodeunitRange(8365, 8399);
    B.CodeunitRange_8372_8372 = new A.CodeunitRange(8372, 8372);
    B.CodeunitRange_8377_8377 = new A.CodeunitRange(8377, 8377);
    B.CodeunitRange_8467_8467 = new A.CodeunitRange(8467, 8467);
    B.CodeunitRange_8470_8470 = new A.CodeunitRange(8470, 8470);
    B.CodeunitRange_8482_8482 = new A.CodeunitRange(8482, 8482);
    B.CodeunitRange_8593_8593 = new A.CodeunitRange(8593, 8593);
    B.CodeunitRange_8595_8595 = new A.CodeunitRange(8595, 8595);
    B.CodeunitRange_8722_8722 = new A.CodeunitRange(8722, 8722);
    B.CodeunitRange_8725_8725 = new A.CodeunitRange(8725, 8725);
    B.CodeunitRange_880_1023 = new A.CodeunitRange(880, 1023);
    B.CodeunitRange_9676_9676 = new A.CodeunitRange(9676, 9676);
    B.CodeunitRange_9772_9772 = new A.CodeunitRange(9772, 9772);
    B.Color_0 = new A.Color(0);
    B.Color_1087163596 = new A.Color(1087163596);
    B.Color_1627389952 = new A.Color(1627389952);
    B.Color_1660944383 = new A.Color(1660944383);
    B.Color_16777215 = new A.Color(16777215);
    B.Color_1723645116 = new A.Color(1723645116);
    B.Color_1724434632 = new A.Color(1724434632);
    B.Color_1929379840 = new A.Color(1929379840);
    B.Color_2315255808 = new A.Color(2315255808);
    B.Color_2583691263 = new A.Color(2583691263);
    B.Color_3019898879 = new A.Color(3019898879);
    B.Color_4039164096 = new A.Color(4039164096);
    B.Color_4281348144 = new A.Color(4281348144);
    B.Color_4282549748 = new A.Color(4282549748);
    B.Color_4294901760 = new A.Color(4294901760);
    B.Color_4294967295 = new A.Color(4294967295);
    B.Color_520093696 = new A.Color(520093696);
    B.Color_536870911 = new A.Color(536870911);
    B.CrossAxisAlignment_0 = new A.CrossAxisAlignment(0, "start");
    B.CrossAxisAlignment_1 = new A.CrossAxisAlignment(1, "end");
    B.CrossAxisAlignment_2 = new A.CrossAxisAlignment(2, "center");
    B.CrossAxisAlignment_3 = new A.CrossAxisAlignment(3, "stretch");
    B.CrossAxisAlignment_4 = new A.CrossAxisAlignment(4, "baseline");
    B.Cubic_gkc = new A.Cubic(0.25, 0.1, 0.25);
    B.Cubic_y1j = new A.Cubic(0.4, 0, 0.2);
    B.DebugSemanticsDumpOrder_0 = new A.DebugSemanticsDumpOrder(0, "inverseHitTest");
    B.DebugSemanticsDumpOrder_1 = new A.DebugSemanticsDumpOrder(1, "traversalOrder");
    B.DecorationPosition_0 = new A.DecorationPosition(0, "background");
    B.DecorationPosition_1 = new A.DecorationPosition(1, "foreground");
    B.TextStyle_zIQ = new A.TextStyle(true, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.TextOverflow_0 = new A.TextOverflow(0, "clip");
    B.TextWidthBasis_0 = new A.TextWidthBasis(0, "parent");
    B._NullWidget_null1 = new A._NullWidget1(null);
    B.DefaultTextStyle_40S = new A.DefaultTextStyle(B.TextStyle_zIQ, null, true, B.TextOverflow_0, null, B.TextWidthBasis_0, null, B._NullWidget_null1, null);
    B.DeviceGestureSettings_18 = new A.DeviceGestureSettings(18);
    B.DiagnosticLevel_0 = new A.DiagnosticLevel(0, "hidden");
    B.DiagnosticLevel_1 = new A.DiagnosticLevel(1, "fine");
    B.DiagnosticLevel_2 = new A.DiagnosticLevel(2, "debug");
    B.DiagnosticLevel_3 = new A.DiagnosticLevel(3, "info");
    B.DiagnosticLevel_4 = new A.DiagnosticLevel(4, "warning");
    B.DiagnosticLevel_5 = new A.DiagnosticLevel(5, "hint");
    B.DiagnosticLevel_6 = new A.DiagnosticLevel(6, "summary");
    B.DiagnosticLevel_7 = new A.DiagnosticLevel(7, "error");
    B.DiagnosticsTreeStyle_1 = new A.DiagnosticsTreeStyle(1, "sparse");
    B.DiagnosticsTreeStyle_10 = new A.DiagnosticsTreeStyle(10, "shallow");
    B.DiagnosticsTreeStyle_11 = new A.DiagnosticsTreeStyle(11, "truncateChildren");
    B.DiagnosticsTreeStyle_4 = new A.DiagnosticsTreeStyle(4, "transition");
    B.DiagnosticsTreeStyle_5 = new A.DiagnosticsTreeStyle(5, "error");
    B.DiagnosticsTreeStyle_7 = new A.DiagnosticsTreeStyle(7, "flat");
    B.DiagnosticsTreeStyle_8 = new A.DiagnosticsTreeStyle(8, "singleLine");
    B.DiagnosticsTreeStyle_9 = new A.DiagnosticsTreeStyle(9, "errorProperty");
    B.DragStartBehavior_1 = new A.DragStartBehavior(1, "start");
    B.Duration_0 = new A.Duration(0);
    B.Duration_100000 = new A.Duration(100000);
    B.Duration_1000000 = new A.Duration(1000000);
    B.Duration_16667 = new A.Duration(16667);
    B.Duration_200000 = new A.Duration(200000);
    B.Duration_2000000 = new A.Duration(2000000);
    B.Duration_300000 = new A.Duration(300000);
    B.Duration_40000 = new A.Duration(40000);
    B.Duration_50000 = new A.Duration(50000);
    B.Duration_500000 = new A.Duration(500000);
    B.Duration_5000000 = new A.Duration(5000000);
    B.Duration_m38000 = new A.Duration(-38000);
    B.EdgeInsets_0_0_0_0 = new A.EdgeInsets(0, 0, 0, 0);
    B.EdgeInsets_16_0_16_0 = new A.EdgeInsets(16, 0, 16, 0);
    B.EnabledState_0 = new A.EnabledState(0, "noOpinion");
    B.EnabledState_1 = new A.EnabledState(1, "enabled");
    B.EnabledState_2 = new A.EnabledState(2, "disabled");
    B.FilterQuality_0 = new A.FilterQuality(0, "none");
    B.FilterQuality_1 = new A.FilterQuality(1, "low");
    B.FocusHighlightMode_0 = new A.FocusHighlightMode(0, "touch");
    B.FocusHighlightMode_1 = new A.FocusHighlightMode(1, "traditional");
    B.FocusHighlightStrategy_0 = new A.FocusHighlightStrategy(0, "automatic");
    B.FormatException_Qi2 = new A.FormatException("Invalid method call", null, null);
    B.FormatException_iDw = new A.FormatException("Expected envelope, got nothing", null, null);
    B.FormatException_oCg = new A.FormatException("Message corrupted", null, null);
    B.FormatException_pSr = new A.FormatException("Invalid envelope", null, null);
    B.GestureDisposition_0 = new A.GestureDisposition(0, "accepted");
    B.GestureDisposition_1 = new A.GestureDisposition(1, "rejected");
    B.GestureMode_0 = new A.GestureMode(0, "pointerEvents");
    B.GestureMode_1 = new A.GestureMode(1, "browserGestures");
    B.GestureRecognizerState_0 = new A.GestureRecognizerState(0, "ready");
    B.GestureRecognizerState_1 = new A.GestureRecognizerState(1, "possible");
    B.GestureRecognizerState_2 = new A.GestureRecognizerState(2, "defunct");
    B.HitTestBehavior_1 = new A.HitTestBehavior(1, "opaque");
    B.HitTestBehavior_2 = new A.HitTestBehavior(2, "translucent");
    B.Color_3707764736 = new A.Color(3707764736);
    B.IconThemeData_UfZ = new A.IconThemeData(B.Color_3707764736, null, null, null);
    B.IconThemeData_UfZ0 = new A.IconThemeData(B.Color_4278190080, null, null, null);
    B.IconThemeData_UfZ1 = new A.IconThemeData(B.Color_4278190080, 1, 24, null);
    B.IconThemeData_yrt = new A.IconThemeData(B.Color_4294967295, null, null, null);
    B.JsonDecoder_null = new A.JsonDecoder(null);
    B.JsonEncoder_null = new A.JsonEncoder(null);
    B.KeyDataTransitMode_0 = new A.KeyDataTransitMode(0, "rawKeyData");
    B.KeyDataTransitMode_1 = new A.KeyDataTransitMode(1, "keyDataThenRawKeyData");
    B.KeyEventType_0 = new A.KeyEventType(0, "down");
    B.KeyData_cgD = new A.KeyData(B.Duration_0, B.KeyEventType_0, 0, 0, null, false);
    B.KeyEventResult_0 = new A.KeyEventResult(0, "handled");
    B.KeyEventResult_1 = new A.KeyEventResult(1, "ignored");
    B.KeyEventResult_2 = new A.KeyEventResult(2, "skipRemainingHandlers");
    B.KeyEventType_1 = new A.KeyEventType(1, "up");
    B.KeyEventType_2 = new A.KeyEventType(2, "repeat");
    B.LogicalKeyboardKey_4294967556 = new A.LogicalKeyboardKey(4294967556);
    B.KeyboardLockMode_LogicalKeyboardKey_4294967556 = new A.KeyboardLockMode(B.LogicalKeyboardKey_4294967556);
    B.LogicalKeyboardKey_4294967562 = new A.LogicalKeyboardKey(4294967562);
    B.KeyboardLockMode_LogicalKeyboardKey_4294967562 = new A.KeyboardLockMode(B.LogicalKeyboardKey_4294967562);
    B.LogicalKeyboardKey_4294967564 = new A.LogicalKeyboardKey(4294967564);
    B.KeyboardLockMode_LogicalKeyboardKey_4294967564 = new A.KeyboardLockMode(B.LogicalKeyboardKey_4294967564);
    B.KeyboardSide_0 = new A.KeyboardSide(0, "any");
    B.KeyboardSide_3 = new A.KeyboardSide(3, "all");
    B.LineBreakType_1 = new A.LineBreakType(1, "prohibited");
    B.LineBreakResult_vhn = new A.LineBreakResult(0, 0, 0, B.LineBreakType_1);
    B.LineBreakType_0 = new A.LineBreakType(0, "opportunity");
    B.LineBreakType_2 = new A.LineBreakType(2, "mandatory");
    B.LineBreakType_3 = new A.LineBreakType(3, "endOfText");
    B.LineCharProperty_0 = new A.LineCharProperty(0, "CM");
    B.LineCharProperty_1 = new A.LineCharProperty(1, "BA");
    B.LineCharProperty_10 = new A.LineCharProperty(10, "PO");
    B.LineCharProperty_11 = new A.LineCharProperty(11, "OP");
    B.LineCharProperty_12 = new A.LineCharProperty(12, "CP");
    B.LineCharProperty_13 = new A.LineCharProperty(13, "IS");
    B.LineCharProperty_14 = new A.LineCharProperty(14, "HY");
    B.LineCharProperty_15 = new A.LineCharProperty(15, "SY");
    B.LineCharProperty_16 = new A.LineCharProperty(16, "NU");
    B.LineCharProperty_17 = new A.LineCharProperty(17, "CL");
    B.LineCharProperty_18 = new A.LineCharProperty(18, "GL");
    B.LineCharProperty_19 = new A.LineCharProperty(19, "BB");
    B.LineCharProperty_2 = new A.LineCharProperty(2, "LF");
    B.LineCharProperty_20 = new A.LineCharProperty(20, "HL");
    B.LineCharProperty_21 = new A.LineCharProperty(21, "JL");
    B.LineCharProperty_22 = new A.LineCharProperty(22, "JV");
    B.LineCharProperty_23 = new A.LineCharProperty(23, "JT");
    B.LineCharProperty_24 = new A.LineCharProperty(24, "NS");
    B.LineCharProperty_25 = new A.LineCharProperty(25, "ZW");
    B.LineCharProperty_26 = new A.LineCharProperty(26, "ZWJ");
    B.LineCharProperty_27 = new A.LineCharProperty(27, "B2");
    B.LineCharProperty_28 = new A.LineCharProperty(28, "IN");
    B.LineCharProperty_29 = new A.LineCharProperty(29, "WJ");
    B.LineCharProperty_3 = new A.LineCharProperty(3, "BK");
    B.LineCharProperty_30 = new A.LineCharProperty(30, "ID");
    B.LineCharProperty_31 = new A.LineCharProperty(31, "EB");
    B.LineCharProperty_32 = new A.LineCharProperty(32, "H2");
    B.LineCharProperty_33 = new A.LineCharProperty(33, "H3");
    B.LineCharProperty_34 = new A.LineCharProperty(34, "CB");
    B.LineCharProperty_35 = new A.LineCharProperty(35, "RI");
    B.LineCharProperty_36 = new A.LineCharProperty(36, "EM");
    B.LineCharProperty_4 = new A.LineCharProperty(4, "CR");
    B.LineCharProperty_5 = new A.LineCharProperty(5, "SP");
    B.LineCharProperty_6 = new A.LineCharProperty(6, "EX");
    B.LineCharProperty_7 = new A.LineCharProperty(7, "QU");
    B.LineCharProperty_8 = new A.LineCharProperty(8, "AL");
    B.LineCharProperty_9 = new A.LineCharProperty(9, "PR");
    B.List_0_1 = A._setArrayType(makeConstList([0, 1]), type$.JSArray_double);
    B.FontWeight_0 = new A.FontWeight(0);
    B.FontWeight_1 = new A.FontWeight(1);
    B.FontWeight_2 = new A.FontWeight(2);
    B.FontWeight_3 = new A.FontWeight(3);
    B.FontWeight_4 = new A.FontWeight(4);
    B.FontWeight_5 = new A.FontWeight(5);
    B.FontWeight_6 = new A.FontWeight(6);
    B.FontWeight_7 = new A.FontWeight(7);
    B.FontWeight_8 = new A.FontWeight(8);
    B.List_27p = A._setArrayType(makeConstList([B.FontWeight_0, B.FontWeight_1, B.FontWeight_2, B.FontWeight_3, B.FontWeight_4, B.FontWeight_5, B.FontWeight_6, B.FontWeight_7, B.FontWeight_8]), A.findType("JSArray<FontWeight>"));
    B.List_2Vk = A._setArrayType(makeConstList([0, 0, 32776, 33792, 1, 10240, 0, 0]), type$.JSArray_int);
    B.List_2Zi = A._setArrayType(makeConstList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::autofocus", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), type$.JSArray_String);
    B.ModifierKey_0 = new A.ModifierKey(0, "controlModifier");
    B.ModifierKey_1 = new A.ModifierKey(1, "shiftModifier");
    B.ModifierKey_2 = new A.ModifierKey(2, "altModifier");
    B.ModifierKey_3 = new A.ModifierKey(3, "metaModifier");
    B.ModifierKey_4 = new A.ModifierKey(4, "capsLockModifier");
    B.ModifierKey_5 = new A.ModifierKey(5, "numLockModifier");
    B.ModifierKey_6 = new A.ModifierKey(6, "scrollLockModifier");
    B.ModifierKey_7 = new A.ModifierKey(7, "functionModifier");
    B.ModifierKey_8 = new A.ModifierKey(8, "symbolModifier");
    B.List_4LR = A._setArrayType(makeConstList([B.ModifierKey_0, B.ModifierKey_1, B.ModifierKey_2, B.ModifierKey_3, B.ModifierKey_4, B.ModifierKey_5, B.ModifierKey_6, B.ModifierKey_7, B.ModifierKey_8]), A.findType("JSArray<ModifierKey>"));
    B.TargetPlatform_1 = new A.TargetPlatform(1, "fuchsia");
    B.List_4fl = A._setArrayType(makeConstList([B.TargetPlatform_0, B.TargetPlatform_1, B.TargetPlatform_2, B.TargetPlatform_3, B.TargetPlatform_4, B.TargetPlatform_5]), A.findType("JSArray<TargetPlatform>"));
    B.List_CVk = A._setArrayType(makeConstList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_Cg9 = A._setArrayType(makeConstList(["pointerdown", "pointermove", "pointerup", "pointercancel", "touchstart", "touchend", "touchmove", "touchcancel", "mousedown", "mousemove", "mouseup", "keyup", "keydown"]), type$.JSArray_String);
    B.List_JYB = A._setArrayType(makeConstList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]), type$.JSArray_int);
    B.Locale_en_US = new A.Locale("en", "US");
    B.List_Locale_en_US = A._setArrayType(makeConstList([B.Locale_en_US]), type$.JSArray_Locale);
    B.TextAffinity_0 = new A.TextAffinity(0, "upstream");
    B.TextAffinity_1 = new A.TextAffinity(1, "downstream");
    B.List_TextAffinity_0_TextAffinity_1 = A._setArrayType(makeConstList([B.TextAffinity_0, B.TextAffinity_1]), A.findType("JSArray<TextAffinity>"));
    B.TextDirection_0 = new A.TextDirection(0, "rtl");
    B.TextDirection_1 = new A.TextDirection(1, "ltr");
    B.List_TextDirection_0_TextDirection_1 = A._setArrayType(makeConstList([B.TextDirection_0, B.TextDirection_1]), A.findType("JSArray<TextDirection>"));
    B.List_UVg = A._setArrayType(makeConstList([B.LineCharProperty_0, B.LineCharProperty_1, B.LineCharProperty_2, B.LineCharProperty_3, B.LineCharProperty_4, B.LineCharProperty_5, B.LineCharProperty_6, B.LineCharProperty_7, B.LineCharProperty_8, B.LineCharProperty_9, B.LineCharProperty_10, B.LineCharProperty_11, B.LineCharProperty_12, B.LineCharProperty_13, B.LineCharProperty_14, B.LineCharProperty_15, B.LineCharProperty_16, B.LineCharProperty_17, B.LineCharProperty_18, B.LineCharProperty_19, B.LineCharProperty_20, B.LineCharProperty_21, B.LineCharProperty_22, B.LineCharProperty_23, B.LineCharProperty_24, B.LineCharProperty_25, B.LineCharProperty_26, B.LineCharProperty_27, B.LineCharProperty_28, B.LineCharProperty_29, B.LineCharProperty_30, B.LineCharProperty_31, B.LineCharProperty_32, B.LineCharProperty_33, B.LineCharProperty_34, B.LineCharProperty_35, B.LineCharProperty_36]), A.findType("JSArray<LineCharProperty>"));
    B.List_click_scroll = A._setArrayType(makeConstList(["click", "scroll"]), type$.JSArray_String);
    B.List_ego = A._setArrayType(makeConstList(["HEAD", "AREA", "BASE", "BASEFONT", "BR", "COL", "COLGROUP", "EMBED", "FRAME", "FRAMESET", "HR", "IMAGE", "IMG", "INPUT", "ISINDEX", "LINK", "META", "PARAM", "SOURCE", "STYLE", "TITLE", "WBR"]), type$.JSArray_String);
    B.List_empty7 = A._setArrayType(makeConstList([]), type$.JSArray_CkCanvas);
    B.List_empty1 = A._setArrayType(makeConstList([]), type$.JSArray_CodeunitRange);
    B.List_empty = A._setArrayType(makeConstList([]), type$.JSArray_DiagnosticsNode);
    B.List_empty9 = A._setArrayType(makeConstList([]), type$.JSArray_Locale);
    B.List_empty5 = A._setArrayType(makeConstList([]), type$.JSArray_SemanticsNode);
    B.List_empty0 = A._setArrayType(makeConstList([]), type$.JSArray_String);
    B.List_empty2 = A._setArrayType(makeConstList([]), type$.JSArray_StringAttribute);
    B.List_empty6 = A._setArrayType(makeConstList([]), type$.JSArray_TextBox);
    B.List_empty8 = A._setArrayType(makeConstList([]), type$.JSArray_int);
    B.List_empty4 = A._setArrayType(makeConstList([]), type$.JSArray_dynamic);
    B.List_gRj = A._setArrayType(makeConstList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_gnE = A._setArrayType(makeConstList([0, 0, 65498, 45055, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B._ListTileSlot_0 = new A._ListTileSlot(0, "leading");
    B._ListTileSlot_1 = new A._ListTileSlot(1, "title");
    B._ListTileSlot_2 = new A._ListTileSlot(2, "subtitle");
    B._ListTileSlot_3 = new A._ListTileSlot(3, "trailing");
    B.List_ml5 = A._setArrayType(makeConstList([B._ListTileSlot_0, B._ListTileSlot_1, B._ListTileSlot_2, B._ListTileSlot_3]), A.findType("JSArray<_ListTileSlot>"));
    B.List_nxB = A._setArrayType(makeConstList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_qNA = A._setArrayType(makeConstList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_qg4 = A._setArrayType(makeConstList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.TextAlign_0 = new A.TextAlign(0, "left");
    B.TextAlign_1 = new A.TextAlign(1, "right");
    B.TextAlign_2 = new A.TextAlign(2, "center");
    B.TextAlign_3 = new A.TextAlign(3, "justify");
    B.TextAlign_4 = new A.TextAlign(4, "start");
    B.TextAlign_5 = new A.TextAlign(5, "end");
    B.List_s2p = A._setArrayType(makeConstList([B.TextAlign_0, B.TextAlign_1, B.TextAlign_2, B.TextAlign_3, B.TextAlign_4, B.TextAlign_5]), A.findType("JSArray<TextAlign>"));
    B.List_wSV = A._setArrayType(makeConstList(["bind", "if", "ref", "repeat", "syntax"]), type$.JSArray_String);
    B.List_yXZ = A._setArrayType(makeConstList([0, 4, 12, 1, 5, 13, 3, 7, 15]), type$.JSArray_int);
    B.List_yrN = A._setArrayType(makeConstList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), type$.JSArray_String);
    B.LogicalKeyboardKey_4294967558 = new A.LogicalKeyboardKey(4294967558);
    B.LogicalKeyboardKey_8589934848 = new A.LogicalKeyboardKey(8589934848);
    B.LogicalKeyboardKey_8589934849 = new A.LogicalKeyboardKey(8589934849);
    B.LogicalKeyboardKey_8589934850 = new A.LogicalKeyboardKey(8589934850);
    B.LogicalKeyboardKey_8589934851 = new A.LogicalKeyboardKey(8589934851);
    B.LogicalKeyboardKey_8589934852 = new A.LogicalKeyboardKey(8589934852);
    B.LogicalKeyboardKey_8589934853 = new A.LogicalKeyboardKey(8589934853);
    B.LogicalKeyboardKey_8589934854 = new A.LogicalKeyboardKey(8589934854);
    B.LogicalKeyboardKey_8589934855 = new A.LogicalKeyboardKey(8589934855);
    B.MainAxisAlignment_0 = new A.MainAxisAlignment(0, "start");
    B.MainAxisSize_1 = new A.MainAxisSize(1, "max");
    B.List_0AS = A._setArrayType(makeConstList(["BU", "DD", "FX", "TP", "YD", "ZR"]), type$.JSArray_String);
    B.Map_0Agg9 = new A.ConstantStringMap(6, {BU: "MM", DD: "DE", FX: "FR", TP: "TL", YD: "YE", ZR: "CD"}, B.List_0AS, type$.ConstantStringMap_String_String);
    B.List_0mM = A._setArrayType(makeConstList(["AVRInput", "AVRPower", "Accel", "Accept", "Again", "AllCandidates", "Alphanumeric", "AltGraph", "AppSwitch", "ArrowDown", "ArrowLeft", "ArrowRight", "ArrowUp", "Attn", "AudioBalanceLeft", "AudioBalanceRight", "AudioBassBoostDown", "AudioBassBoostToggle", "AudioBassBoostUp", "AudioFaderFront", "AudioFaderRear", "AudioSurroundModeNext", "AudioTrebleDown", "AudioTrebleUp", "AudioVolumeDown", "AudioVolumeMute", "AudioVolumeUp", "Backspace", "BrightnessDown", "BrightnessUp", "BrowserBack", "BrowserFavorites", "BrowserForward", "BrowserHome", "BrowserRefresh", "BrowserSearch", "BrowserStop", "Call", "Camera", "CameraFocus", "Cancel", "CapsLock", "ChannelDown", "ChannelUp", "Clear", "Close", "ClosedCaptionToggle", "CodeInput", "ColorF0Red", "ColorF1Green", "ColorF2Yellow", "ColorF3Blue", "ColorF4Grey", "ColorF5Brown", "Compose", "ContextMenu", "Convert", "Copy", "CrSel", "Cut", "DVR", "Delete", "Dimmer", "DisplaySwap", "Eisu", "Eject", "End", "EndCall", "Enter", "EraseEof", "Escape", "ExSel", "Execute", "Exit", "F1", "F10", "F11", "F12", "F13", "F14", "F15", "F16", "F17", "F18", "F19", "F2", "F20", "F21", "F22", "F23", "F24", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "FavoriteClear0", "FavoriteClear1", "FavoriteClear2", "FavoriteClear3", "FavoriteRecall0", "FavoriteRecall1", "FavoriteRecall2", "FavoriteRecall3", "FavoriteStore0", "FavoriteStore1", "FavoriteStore2", "FavoriteStore3", "FinalMode", "Find", "Fn", "FnLock", "GoBack", "GoHome", "GroupFirst", "GroupLast", "GroupNext", "GroupPrevious", "Guide", "GuideNextDay", "GuidePreviousDay", "HangulMode", "HanjaMode", "Hankaku", "HeadsetHook", "Help", "Hibernate", "Hiragana", "HiraganaKatakana", "Home", "Hyper", "Info", "Insert", "InstantReplay", "JunjaMode", "KanaMode", "KanjiMode", "Katakana", "Key11", "Key12", "LastNumberRedial", "LaunchApplication1", "LaunchApplication2", "LaunchAssistant", "LaunchCalendar", "LaunchContacts", "LaunchControlPanel", "LaunchMail", "LaunchMediaPlayer", "LaunchMusicPlayer", "LaunchPhone", "LaunchScreenSaver", "LaunchSpreadsheet", "LaunchWebBrowser", "LaunchWebCam", "LaunchWordProcessor", "Link", "ListProgram", "LiveContent", "Lock", "LogOff", "MailForward", "MailReply", "MailSend", "MannerMode", "MediaApps", "MediaAudioTrack", "MediaClose", "MediaFastForward", "MediaLast", "MediaPause", "MediaPlay", "MediaPlayPause", "MediaRecord", "MediaRewind", "MediaSkip", "MediaSkipBackward", "MediaSkipForward", "MediaStepBackward", "MediaStepForward", "MediaStop", "MediaTopMenu", "MediaTrackNext", "MediaTrackPrevious", "MicrophoneToggle", "MicrophoneVolumeDown", "MicrophoneVolumeMute", "MicrophoneVolumeUp", "ModeChange", "NavigateIn", "NavigateNext", "NavigateOut", "NavigatePrevious", "New", "NextCandidate", "NextFavoriteChannel", "NextUserProfile", "NonConvert", "Notification", "NumLock", "OnDemand", "Open", "PageDown", "PageUp", "Pairing", "Paste", "Pause", "PinPDown", "PinPMove", "PinPToggle", "PinPUp", "Play", "PlaySpeedDown", "PlaySpeedReset", "PlaySpeedUp", "Power", "PowerOff", "PreviousCandidate", "Print", "PrintScreen", "Process", "Props", "RandomToggle", "RcLowBattery", "RecordSpeedNext", "Redo", "RfBypass", "Romaji", "STBInput", "STBPower", "Save", "ScanChannelsToggle", "ScreenModeNext", "ScrollLock", "Select", "Settings", "ShiftLevel5", "SingleCandidate", "Soft1", "Soft2", "Soft3", "Soft4", "Soft5", "Soft6", "Soft7", "Soft8", "SpeechCorrectionList", "SpeechInputToggle", "SpellCheck", "SplitScreenToggle", "Standby", "Subtitle", "Super", "Symbol", "SymbolLock", "TV", "TV3DMode", "TVAntennaCable", "TVAudioDescription", "TVAudioDescriptionMixDown", "TVAudioDescriptionMixUp", "TVContentsMenu", "TVDataService", "TVInput", "TVInputComponent1", "TVInputComponent2", "TVInputComposite1", "TVInputComposite2", "TVInputHDMI1", "TVInputHDMI2", "TVInputHDMI3", "TVInputHDMI4", "TVInputVGA1", "TVMediaContext", "TVNetwork", "TVNumberEntry", "TVPower", "TVRadioService", "TVSatellite", "TVSatelliteBS", "TVSatelliteCS", "TVSatelliteToggle", "TVTerrestrialAnalog", "TVTerrestrialDigital", "TVTimer", "Tab", "Teletext", "Undo", "Unidentified", "VideoModeNext", "VoiceDial", "WakeUp", "Wink", "Zenkaku", "ZenkakuHankaku", "ZoomIn", "ZoomOut", "ZoomToggle"]), type$.JSArray_String);
    B.LogicalKeyboardKey_4294970632 = new A.LogicalKeyboardKey(4294970632);
    B.LogicalKeyboardKey_4294970633 = new A.LogicalKeyboardKey(4294970633);
    B.LogicalKeyboardKey_4294967553 = new A.LogicalKeyboardKey(4294967553);
    B.LogicalKeyboardKey_4294968577 = new A.LogicalKeyboardKey(4294968577);
    B.LogicalKeyboardKey_4294968578 = new A.LogicalKeyboardKey(4294968578);
    B.LogicalKeyboardKey_4294969089 = new A.LogicalKeyboardKey(4294969089);
    B.LogicalKeyboardKey_4294969090 = new A.LogicalKeyboardKey(4294969090);
    B.LogicalKeyboardKey_4294967555 = new A.LogicalKeyboardKey(4294967555);
    B.LogicalKeyboardKey_4294971393 = new A.LogicalKeyboardKey(4294971393);
    B.LogicalKeyboardKey_4294968065 = new A.LogicalKeyboardKey(4294968065);
    B.LogicalKeyboardKey_4294968066 = new A.LogicalKeyboardKey(4294968066);
    B.LogicalKeyboardKey_4294968067 = new A.LogicalKeyboardKey(4294968067);
    B.LogicalKeyboardKey_4294968068 = new A.LogicalKeyboardKey(4294968068);
    B.LogicalKeyboardKey_4294968579 = new A.LogicalKeyboardKey(4294968579);
    B.LogicalKeyboardKey_4294970625 = new A.LogicalKeyboardKey(4294970625);
    B.LogicalKeyboardKey_4294970626 = new A.LogicalKeyboardKey(4294970626);
    B.LogicalKeyboardKey_4294970627 = new A.LogicalKeyboardKey(4294970627);
    B.LogicalKeyboardKey_4294970882 = new A.LogicalKeyboardKey(4294970882);
    B.LogicalKeyboardKey_4294970628 = new A.LogicalKeyboardKey(4294970628);
    B.LogicalKeyboardKey_4294970629 = new A.LogicalKeyboardKey(4294970629);
    B.LogicalKeyboardKey_4294970630 = new A.LogicalKeyboardKey(4294970630);
    B.LogicalKeyboardKey_4294970631 = new A.LogicalKeyboardKey(4294970631);
    B.LogicalKeyboardKey_4294970884 = new A.LogicalKeyboardKey(4294970884);
    B.LogicalKeyboardKey_4294970885 = new A.LogicalKeyboardKey(4294970885);
    B.LogicalKeyboardKey_4294969871 = new A.LogicalKeyboardKey(4294969871);
    B.LogicalKeyboardKey_4294969873 = new A.LogicalKeyboardKey(4294969873);
    B.LogicalKeyboardKey_4294969872 = new A.LogicalKeyboardKey(4294969872);
    B.LogicalKeyboardKey_4294967304 = new A.LogicalKeyboardKey(4294967304);
    B.LogicalKeyboardKey_4294968833 = new A.LogicalKeyboardKey(4294968833);
    B.LogicalKeyboardKey_4294968834 = new A.LogicalKeyboardKey(4294968834);
    B.LogicalKeyboardKey_4294970369 = new A.LogicalKeyboardKey(4294970369);
    B.LogicalKeyboardKey_4294970370 = new A.LogicalKeyboardKey(4294970370);
    B.LogicalKeyboardKey_4294970371 = new A.LogicalKeyboardKey(4294970371);
    B.LogicalKeyboardKey_4294970372 = new A.LogicalKeyboardKey(4294970372);
    B.LogicalKeyboardKey_4294970373 = new A.LogicalKeyboardKey(4294970373);
    B.LogicalKeyboardKey_4294970374 = new A.LogicalKeyboardKey(4294970374);
    B.LogicalKeyboardKey_4294970375 = new A.LogicalKeyboardKey(4294970375);
    B.LogicalKeyboardKey_4294971394 = new A.LogicalKeyboardKey(4294971394);
    B.LogicalKeyboardKey_4294968835 = new A.LogicalKeyboardKey(4294968835);
    B.LogicalKeyboardKey_4294971395 = new A.LogicalKeyboardKey(4294971395);
    B.LogicalKeyboardKey_4294968580 = new A.LogicalKeyboardKey(4294968580);
    B.LogicalKeyboardKey_4294970634 = new A.LogicalKeyboardKey(4294970634);
    B.LogicalKeyboardKey_4294970635 = new A.LogicalKeyboardKey(4294970635);
    B.LogicalKeyboardKey_4294968321 = new A.LogicalKeyboardKey(4294968321);
    B.LogicalKeyboardKey_4294969857 = new A.LogicalKeyboardKey(4294969857);
    B.LogicalKeyboardKey_4294970642 = new A.LogicalKeyboardKey(4294970642);
    B.LogicalKeyboardKey_4294969091 = new A.LogicalKeyboardKey(4294969091);
    B.LogicalKeyboardKey_4294970636 = new A.LogicalKeyboardKey(4294970636);
    B.LogicalKeyboardKey_4294970637 = new A.LogicalKeyboardKey(4294970637);
    B.LogicalKeyboardKey_4294970638 = new A.LogicalKeyboardKey(4294970638);
    B.LogicalKeyboardKey_4294970639 = new A.LogicalKeyboardKey(4294970639);
    B.LogicalKeyboardKey_4294970640 = new A.LogicalKeyboardKey(4294970640);
    B.LogicalKeyboardKey_4294970641 = new A.LogicalKeyboardKey(4294970641);
    B.LogicalKeyboardKey_4294969092 = new A.LogicalKeyboardKey(4294969092);
    B.LogicalKeyboardKey_4294968581 = new A.LogicalKeyboardKey(4294968581);
    B.LogicalKeyboardKey_4294969093 = new A.LogicalKeyboardKey(4294969093);
    B.LogicalKeyboardKey_4294968322 = new A.LogicalKeyboardKey(4294968322);
    B.LogicalKeyboardKey_4294968323 = new A.LogicalKeyboardKey(4294968323);
    B.LogicalKeyboardKey_4294968324 = new A.LogicalKeyboardKey(4294968324);
    B.LogicalKeyboardKey_4294970703 = new A.LogicalKeyboardKey(4294970703);
    B.LogicalKeyboardKey_4294967423 = new A.LogicalKeyboardKey(4294967423);
    B.LogicalKeyboardKey_4294970643 = new A.LogicalKeyboardKey(4294970643);
    B.LogicalKeyboardKey_4294970644 = new A.LogicalKeyboardKey(4294970644);
    B.LogicalKeyboardKey_4294969108 = new A.LogicalKeyboardKey(4294969108);
    B.LogicalKeyboardKey_4294968836 = new A.LogicalKeyboardKey(4294968836);
    B.LogicalKeyboardKey_4294968069 = new A.LogicalKeyboardKey(4294968069);
    B.LogicalKeyboardKey_4294971396 = new A.LogicalKeyboardKey(4294971396);
    B.LogicalKeyboardKey_4294967309 = new A.LogicalKeyboardKey(4294967309);
    B.LogicalKeyboardKey_4294968325 = new A.LogicalKeyboardKey(4294968325);
    B.LogicalKeyboardKey_4294967323 = new A.LogicalKeyboardKey(4294967323);
    B.LogicalKeyboardKey_4294968326 = new A.LogicalKeyboardKey(4294968326);
    B.LogicalKeyboardKey_4294968582 = new A.LogicalKeyboardKey(4294968582);
    B.LogicalKeyboardKey_4294970645 = new A.LogicalKeyboardKey(4294970645);
    B.LogicalKeyboardKey_4294969345 = new A.LogicalKeyboardKey(4294969345);
    B.LogicalKeyboardKey_4294969354 = new A.LogicalKeyboardKey(4294969354);
    B.LogicalKeyboardKey_4294969355 = new A.LogicalKeyboardKey(4294969355);
    B.LogicalKeyboardKey_4294969356 = new A.LogicalKeyboardKey(4294969356);
    B.LogicalKeyboardKey_4294969357 = new A.LogicalKeyboardKey(4294969357);
    B.LogicalKeyboardKey_4294969358 = new A.LogicalKeyboardKey(4294969358);
    B.LogicalKeyboardKey_4294969359 = new A.LogicalKeyboardKey(4294969359);
    B.LogicalKeyboardKey_4294969360 = new A.LogicalKeyboardKey(4294969360);
    B.LogicalKeyboardKey_4294969361 = new A.LogicalKeyboardKey(4294969361);
    B.LogicalKeyboardKey_4294969362 = new A.LogicalKeyboardKey(4294969362);
    B.LogicalKeyboardKey_4294969363 = new A.LogicalKeyboardKey(4294969363);
    B.LogicalKeyboardKey_4294969346 = new A.LogicalKeyboardKey(4294969346);
    B.LogicalKeyboardKey_4294969364 = new A.LogicalKeyboardKey(4294969364);
    B.LogicalKeyboardKey_4294969365 = new A.LogicalKeyboardKey(4294969365);
    B.LogicalKeyboardKey_4294969366 = new A.LogicalKeyboardKey(4294969366);
    B.LogicalKeyboardKey_4294969367 = new A.LogicalKeyboardKey(4294969367);
    B.LogicalKeyboardKey_4294969368 = new A.LogicalKeyboardKey(4294969368);
    B.LogicalKeyboardKey_4294969347 = new A.LogicalKeyboardKey(4294969347);
    B.LogicalKeyboardKey_4294969348 = new A.LogicalKeyboardKey(4294969348);
    B.LogicalKeyboardKey_4294969349 = new A.LogicalKeyboardKey(4294969349);
    B.LogicalKeyboardKey_4294969350 = new A.LogicalKeyboardKey(4294969350);
    B.LogicalKeyboardKey_4294969351 = new A.LogicalKeyboardKey(4294969351);
    B.LogicalKeyboardKey_4294969352 = new A.LogicalKeyboardKey(4294969352);
    B.LogicalKeyboardKey_4294969353 = new A.LogicalKeyboardKey(4294969353);
    B.LogicalKeyboardKey_4294970646 = new A.LogicalKeyboardKey(4294970646);
    B.LogicalKeyboardKey_4294970647 = new A.LogicalKeyboardKey(4294970647);
    B.LogicalKeyboardKey_4294970648 = new A.LogicalKeyboardKey(4294970648);
    B.LogicalKeyboardKey_4294970649 = new A.LogicalKeyboardKey(4294970649);
    B.LogicalKeyboardKey_4294970650 = new A.LogicalKeyboardKey(4294970650);
    B.LogicalKeyboardKey_4294970651 = new A.LogicalKeyboardKey(4294970651);
    B.LogicalKeyboardKey_4294970652 = new A.LogicalKeyboardKey(4294970652);
    B.LogicalKeyboardKey_4294970653 = new A.LogicalKeyboardKey(4294970653);
    B.LogicalKeyboardKey_4294970654 = new A.LogicalKeyboardKey(4294970654);
    B.LogicalKeyboardKey_4294970655 = new A.LogicalKeyboardKey(4294970655);
    B.LogicalKeyboardKey_4294970656 = new A.LogicalKeyboardKey(4294970656);
    B.LogicalKeyboardKey_4294970657 = new A.LogicalKeyboardKey(4294970657);
    B.LogicalKeyboardKey_4294969094 = new A.LogicalKeyboardKey(4294969094);
    B.LogicalKeyboardKey_4294968583 = new A.LogicalKeyboardKey(4294968583);
    B.LogicalKeyboardKey_4294967559 = new A.LogicalKeyboardKey(4294967559);
    B.LogicalKeyboardKey_4294971397 = new A.LogicalKeyboardKey(4294971397);
    B.LogicalKeyboardKey_4294971398 = new A.LogicalKeyboardKey(4294971398);
    B.LogicalKeyboardKey_4294969095 = new A.LogicalKeyboardKey(4294969095);
    B.LogicalKeyboardKey_4294969096 = new A.LogicalKeyboardKey(4294969096);
    B.LogicalKeyboardKey_4294969097 = new A.LogicalKeyboardKey(4294969097);
    B.LogicalKeyboardKey_4294969098 = new A.LogicalKeyboardKey(4294969098);
    B.LogicalKeyboardKey_4294970658 = new A.LogicalKeyboardKey(4294970658);
    B.LogicalKeyboardKey_4294970659 = new A.LogicalKeyboardKey(4294970659);
    B.LogicalKeyboardKey_4294970660 = new A.LogicalKeyboardKey(4294970660);
    B.LogicalKeyboardKey_4294969105 = new A.LogicalKeyboardKey(4294969105);
    B.LogicalKeyboardKey_4294969106 = new A.LogicalKeyboardKey(4294969106);
    B.LogicalKeyboardKey_4294969109 = new A.LogicalKeyboardKey(4294969109);
    B.LogicalKeyboardKey_4294971399 = new A.LogicalKeyboardKey(4294971399);
    B.LogicalKeyboardKey_4294968584 = new A.LogicalKeyboardKey(4294968584);
    B.LogicalKeyboardKey_4294968841 = new A.LogicalKeyboardKey(4294968841);
    B.LogicalKeyboardKey_4294969110 = new A.LogicalKeyboardKey(4294969110);
    B.LogicalKeyboardKey_4294969111 = new A.LogicalKeyboardKey(4294969111);
    B.LogicalKeyboardKey_4294968070 = new A.LogicalKeyboardKey(4294968070);
    B.LogicalKeyboardKey_4294967560 = new A.LogicalKeyboardKey(4294967560);
    B.LogicalKeyboardKey_4294970661 = new A.LogicalKeyboardKey(4294970661);
    B.LogicalKeyboardKey_4294968327 = new A.LogicalKeyboardKey(4294968327);
    B.LogicalKeyboardKey_4294970662 = new A.LogicalKeyboardKey(4294970662);
    B.LogicalKeyboardKey_4294969107 = new A.LogicalKeyboardKey(4294969107);
    B.LogicalKeyboardKey_4294969112 = new A.LogicalKeyboardKey(4294969112);
    B.LogicalKeyboardKey_4294969113 = new A.LogicalKeyboardKey(4294969113);
    B.LogicalKeyboardKey_4294969114 = new A.LogicalKeyboardKey(4294969114);
    B.LogicalKeyboardKey_4294971905 = new A.LogicalKeyboardKey(4294971905);
    B.LogicalKeyboardKey_4294971906 = new A.LogicalKeyboardKey(4294971906);
    B.LogicalKeyboardKey_4294971400 = new A.LogicalKeyboardKey(4294971400);
    B.LogicalKeyboardKey_4294970118 = new A.LogicalKeyboardKey(4294970118);
    B.LogicalKeyboardKey_4294970113 = new A.LogicalKeyboardKey(4294970113);
    B.LogicalKeyboardKey_4294970126 = new A.LogicalKeyboardKey(4294970126);
    B.LogicalKeyboardKey_4294970114 = new A.LogicalKeyboardKey(4294970114);
    B.LogicalKeyboardKey_4294970124 = new A.LogicalKeyboardKey(4294970124);
    B.LogicalKeyboardKey_4294970127 = new A.LogicalKeyboardKey(4294970127);
    B.LogicalKeyboardKey_4294970115 = new A.LogicalKeyboardKey(4294970115);
    B.LogicalKeyboardKey_4294970116 = new A.LogicalKeyboardKey(4294970116);
    B.LogicalKeyboardKey_4294970117 = new A.LogicalKeyboardKey(4294970117);
    B.LogicalKeyboardKey_4294970125 = new A.LogicalKeyboardKey(4294970125);
    B.LogicalKeyboardKey_4294970119 = new A.LogicalKeyboardKey(4294970119);
    B.LogicalKeyboardKey_4294970120 = new A.LogicalKeyboardKey(4294970120);
    B.LogicalKeyboardKey_4294970121 = new A.LogicalKeyboardKey(4294970121);
    B.LogicalKeyboardKey_4294970122 = new A.LogicalKeyboardKey(4294970122);
    B.LogicalKeyboardKey_4294970123 = new A.LogicalKeyboardKey(4294970123);
    B.LogicalKeyboardKey_4294970663 = new A.LogicalKeyboardKey(4294970663);
    B.LogicalKeyboardKey_4294970664 = new A.LogicalKeyboardKey(4294970664);
    B.LogicalKeyboardKey_4294970665 = new A.LogicalKeyboardKey(4294970665);
    B.LogicalKeyboardKey_4294970666 = new A.LogicalKeyboardKey(4294970666);
    B.LogicalKeyboardKey_4294968837 = new A.LogicalKeyboardKey(4294968837);
    B.LogicalKeyboardKey_4294969858 = new A.LogicalKeyboardKey(4294969858);
    B.LogicalKeyboardKey_4294969859 = new A.LogicalKeyboardKey(4294969859);
    B.LogicalKeyboardKey_4294969860 = new A.LogicalKeyboardKey(4294969860);
    B.LogicalKeyboardKey_4294971402 = new A.LogicalKeyboardKey(4294971402);
    B.LogicalKeyboardKey_4294970667 = new A.LogicalKeyboardKey(4294970667);
    B.LogicalKeyboardKey_4294970704 = new A.LogicalKeyboardKey(4294970704);
    B.LogicalKeyboardKey_4294970715 = new A.LogicalKeyboardKey(4294970715);
    B.LogicalKeyboardKey_4294970668 = new A.LogicalKeyboardKey(4294970668);
    B.LogicalKeyboardKey_4294970669 = new A.LogicalKeyboardKey(4294970669);
    B.LogicalKeyboardKey_4294970670 = new A.LogicalKeyboardKey(4294970670);
    B.LogicalKeyboardKey_4294970671 = new A.LogicalKeyboardKey(4294970671);
    B.LogicalKeyboardKey_4294969861 = new A.LogicalKeyboardKey(4294969861);
    B.LogicalKeyboardKey_4294970672 = new A.LogicalKeyboardKey(4294970672);
    B.LogicalKeyboardKey_4294970673 = new A.LogicalKeyboardKey(4294970673);
    B.LogicalKeyboardKey_4294970674 = new A.LogicalKeyboardKey(4294970674);
    B.LogicalKeyboardKey_4294970705 = new A.LogicalKeyboardKey(4294970705);
    B.LogicalKeyboardKey_4294970706 = new A.LogicalKeyboardKey(4294970706);
    B.LogicalKeyboardKey_4294970707 = new A.LogicalKeyboardKey(4294970707);
    B.LogicalKeyboardKey_4294970708 = new A.LogicalKeyboardKey(4294970708);
    B.LogicalKeyboardKey_4294969863 = new A.LogicalKeyboardKey(4294969863);
    B.LogicalKeyboardKey_4294970709 = new A.LogicalKeyboardKey(4294970709);
    B.LogicalKeyboardKey_4294969864 = new A.LogicalKeyboardKey(4294969864);
    B.LogicalKeyboardKey_4294969865 = new A.LogicalKeyboardKey(4294969865);
    B.LogicalKeyboardKey_4294970886 = new A.LogicalKeyboardKey(4294970886);
    B.LogicalKeyboardKey_4294970887 = new A.LogicalKeyboardKey(4294970887);
    B.LogicalKeyboardKey_4294970889 = new A.LogicalKeyboardKey(4294970889);
    B.LogicalKeyboardKey_4294970888 = new A.LogicalKeyboardKey(4294970888);
    B.LogicalKeyboardKey_4294969099 = new A.LogicalKeyboardKey(4294969099);
    B.LogicalKeyboardKey_4294970710 = new A.LogicalKeyboardKey(4294970710);
    B.LogicalKeyboardKey_4294970711 = new A.LogicalKeyboardKey(4294970711);
    B.LogicalKeyboardKey_4294970712 = new A.LogicalKeyboardKey(4294970712);
    B.LogicalKeyboardKey_4294970713 = new A.LogicalKeyboardKey(4294970713);
    B.LogicalKeyboardKey_4294969866 = new A.LogicalKeyboardKey(4294969866);
    B.LogicalKeyboardKey_4294969100 = new A.LogicalKeyboardKey(4294969100);
    B.LogicalKeyboardKey_4294970675 = new A.LogicalKeyboardKey(4294970675);
    B.LogicalKeyboardKey_4294970676 = new A.LogicalKeyboardKey(4294970676);
    B.LogicalKeyboardKey_4294969101 = new A.LogicalKeyboardKey(4294969101);
    B.LogicalKeyboardKey_4294971401 = new A.LogicalKeyboardKey(4294971401);
    B.LogicalKeyboardKey_4294970677 = new A.LogicalKeyboardKey(4294970677);
    B.LogicalKeyboardKey_4294969867 = new A.LogicalKeyboardKey(4294969867);
    B.LogicalKeyboardKey_4294968071 = new A.LogicalKeyboardKey(4294968071);
    B.LogicalKeyboardKey_4294968072 = new A.LogicalKeyboardKey(4294968072);
    B.LogicalKeyboardKey_4294970714 = new A.LogicalKeyboardKey(4294970714);
    B.LogicalKeyboardKey_4294968328 = new A.LogicalKeyboardKey(4294968328);
    B.LogicalKeyboardKey_4294968585 = new A.LogicalKeyboardKey(4294968585);
    B.LogicalKeyboardKey_4294970678 = new A.LogicalKeyboardKey(4294970678);
    B.LogicalKeyboardKey_4294970679 = new A.LogicalKeyboardKey(4294970679);
    B.LogicalKeyboardKey_4294970680 = new A.LogicalKeyboardKey(4294970680);
    B.LogicalKeyboardKey_4294970681 = new A.LogicalKeyboardKey(4294970681);
    B.LogicalKeyboardKey_4294968586 = new A.LogicalKeyboardKey(4294968586);
    B.LogicalKeyboardKey_4294970682 = new A.LogicalKeyboardKey(4294970682);
    B.LogicalKeyboardKey_4294970683 = new A.LogicalKeyboardKey(4294970683);
    B.LogicalKeyboardKey_4294970684 = new A.LogicalKeyboardKey(4294970684);
    B.LogicalKeyboardKey_4294968838 = new A.LogicalKeyboardKey(4294968838);
    B.LogicalKeyboardKey_4294968839 = new A.LogicalKeyboardKey(4294968839);
    B.LogicalKeyboardKey_4294969102 = new A.LogicalKeyboardKey(4294969102);
    B.LogicalKeyboardKey_4294969868 = new A.LogicalKeyboardKey(4294969868);
    B.LogicalKeyboardKey_4294968840 = new A.LogicalKeyboardKey(4294968840);
    B.LogicalKeyboardKey_4294969103 = new A.LogicalKeyboardKey(4294969103);
    B.LogicalKeyboardKey_4294968587 = new A.LogicalKeyboardKey(4294968587);
    B.LogicalKeyboardKey_4294970685 = new A.LogicalKeyboardKey(4294970685);
    B.LogicalKeyboardKey_4294970686 = new A.LogicalKeyboardKey(4294970686);
    B.LogicalKeyboardKey_4294970687 = new A.LogicalKeyboardKey(4294970687);
    B.LogicalKeyboardKey_4294968329 = new A.LogicalKeyboardKey(4294968329);
    B.LogicalKeyboardKey_4294970688 = new A.LogicalKeyboardKey(4294970688);
    B.LogicalKeyboardKey_4294969115 = new A.LogicalKeyboardKey(4294969115);
    B.LogicalKeyboardKey_4294970693 = new A.LogicalKeyboardKey(4294970693);
    B.LogicalKeyboardKey_4294970694 = new A.LogicalKeyboardKey(4294970694);
    B.LogicalKeyboardKey_4294969869 = new A.LogicalKeyboardKey(4294969869);
    B.LogicalKeyboardKey_4294970689 = new A.LogicalKeyboardKey(4294970689);
    B.LogicalKeyboardKey_4294970690 = new A.LogicalKeyboardKey(4294970690);
    B.LogicalKeyboardKey_4294968588 = new A.LogicalKeyboardKey(4294968588);
    B.LogicalKeyboardKey_4294970691 = new A.LogicalKeyboardKey(4294970691);
    B.LogicalKeyboardKey_4294967569 = new A.LogicalKeyboardKey(4294967569);
    B.LogicalKeyboardKey_4294969104 = new A.LogicalKeyboardKey(4294969104);
    B.LogicalKeyboardKey_4294969601 = new A.LogicalKeyboardKey(4294969601);
    B.LogicalKeyboardKey_4294969602 = new A.LogicalKeyboardKey(4294969602);
    B.LogicalKeyboardKey_4294969603 = new A.LogicalKeyboardKey(4294969603);
    B.LogicalKeyboardKey_4294969604 = new A.LogicalKeyboardKey(4294969604);
    B.LogicalKeyboardKey_4294969605 = new A.LogicalKeyboardKey(4294969605);
    B.LogicalKeyboardKey_4294969606 = new A.LogicalKeyboardKey(4294969606);
    B.LogicalKeyboardKey_4294969607 = new A.LogicalKeyboardKey(4294969607);
    B.LogicalKeyboardKey_4294969608 = new A.LogicalKeyboardKey(4294969608);
    B.LogicalKeyboardKey_4294971137 = new A.LogicalKeyboardKey(4294971137);
    B.LogicalKeyboardKey_4294971138 = new A.LogicalKeyboardKey(4294971138);
    B.LogicalKeyboardKey_4294969870 = new A.LogicalKeyboardKey(4294969870);
    B.LogicalKeyboardKey_4294970692 = new A.LogicalKeyboardKey(4294970692);
    B.LogicalKeyboardKey_4294968842 = new A.LogicalKeyboardKey(4294968842);
    B.LogicalKeyboardKey_4294970695 = new A.LogicalKeyboardKey(4294970695);
    B.LogicalKeyboardKey_4294967566 = new A.LogicalKeyboardKey(4294967566);
    B.LogicalKeyboardKey_4294967567 = new A.LogicalKeyboardKey(4294967567);
    B.LogicalKeyboardKey_4294967568 = new A.LogicalKeyboardKey(4294967568);
    B.LogicalKeyboardKey_4294970697 = new A.LogicalKeyboardKey(4294970697);
    B.LogicalKeyboardKey_4294971649 = new A.LogicalKeyboardKey(4294971649);
    B.LogicalKeyboardKey_4294971650 = new A.LogicalKeyboardKey(4294971650);
    B.LogicalKeyboardKey_4294971651 = new A.LogicalKeyboardKey(4294971651);
    B.LogicalKeyboardKey_4294971652 = new A.LogicalKeyboardKey(4294971652);
    B.LogicalKeyboardKey_4294971653 = new A.LogicalKeyboardKey(4294971653);
    B.LogicalKeyboardKey_4294971654 = new A.LogicalKeyboardKey(4294971654);
    B.LogicalKeyboardKey_4294971655 = new A.LogicalKeyboardKey(4294971655);
    B.LogicalKeyboardKey_4294970698 = new A.LogicalKeyboardKey(4294970698);
    B.LogicalKeyboardKey_4294971656 = new A.LogicalKeyboardKey(4294971656);
    B.LogicalKeyboardKey_4294971657 = new A.LogicalKeyboardKey(4294971657);
    B.LogicalKeyboardKey_4294971658 = new A.LogicalKeyboardKey(4294971658);
    B.LogicalKeyboardKey_4294971659 = new A.LogicalKeyboardKey(4294971659);
    B.LogicalKeyboardKey_4294971660 = new A.LogicalKeyboardKey(4294971660);
    B.LogicalKeyboardKey_4294971661 = new A.LogicalKeyboardKey(4294971661);
    B.LogicalKeyboardKey_4294971662 = new A.LogicalKeyboardKey(4294971662);
    B.LogicalKeyboardKey_4294971663 = new A.LogicalKeyboardKey(4294971663);
    B.LogicalKeyboardKey_4294971664 = new A.LogicalKeyboardKey(4294971664);
    B.LogicalKeyboardKey_4294971665 = new A.LogicalKeyboardKey(4294971665);
    B.LogicalKeyboardKey_4294971666 = new A.LogicalKeyboardKey(4294971666);
    B.LogicalKeyboardKey_4294971667 = new A.LogicalKeyboardKey(4294971667);
    B.LogicalKeyboardKey_4294970699 = new A.LogicalKeyboardKey(4294970699);
    B.LogicalKeyboardKey_4294971668 = new A.LogicalKeyboardKey(4294971668);
    B.LogicalKeyboardKey_4294971669 = new A.LogicalKeyboardKey(4294971669);
    B.LogicalKeyboardKey_4294971670 = new A.LogicalKeyboardKey(4294971670);
    B.LogicalKeyboardKey_4294971671 = new A.LogicalKeyboardKey(4294971671);
    B.LogicalKeyboardKey_4294971672 = new A.LogicalKeyboardKey(4294971672);
    B.LogicalKeyboardKey_4294971673 = new A.LogicalKeyboardKey(4294971673);
    B.LogicalKeyboardKey_4294971674 = new A.LogicalKeyboardKey(4294971674);
    B.LogicalKeyboardKey_4294971675 = new A.LogicalKeyboardKey(4294971675);
    B.LogicalKeyboardKey_4294967305 = new A.LogicalKeyboardKey(4294967305);
    B.LogicalKeyboardKey_4294970696 = new A.LogicalKeyboardKey(4294970696);
    B.LogicalKeyboardKey_4294968330 = new A.LogicalKeyboardKey(4294968330);
    B.LogicalKeyboardKey_4294967297 = new A.LogicalKeyboardKey(4294967297);
    B.LogicalKeyboardKey_4294970700 = new A.LogicalKeyboardKey(4294970700);
    B.LogicalKeyboardKey_4294971403 = new A.LogicalKeyboardKey(4294971403);
    B.LogicalKeyboardKey_4294968843 = new A.LogicalKeyboardKey(4294968843);
    B.LogicalKeyboardKey_4294970701 = new A.LogicalKeyboardKey(4294970701);
    B.LogicalKeyboardKey_4294969116 = new A.LogicalKeyboardKey(4294969116);
    B.LogicalKeyboardKey_4294969117 = new A.LogicalKeyboardKey(4294969117);
    B.LogicalKeyboardKey_4294968589 = new A.LogicalKeyboardKey(4294968589);
    B.LogicalKeyboardKey_4294968590 = new A.LogicalKeyboardKey(4294968590);
    B.LogicalKeyboardKey_4294970702 = new A.LogicalKeyboardKey(4294970702);
    B.Map_0mOHH = new A.ConstantStringMap(300, {AVRInput: B.LogicalKeyboardKey_4294970632, AVRPower: B.LogicalKeyboardKey_4294970633, Accel: B.LogicalKeyboardKey_4294967553, Accept: B.LogicalKeyboardKey_4294968577, Again: B.LogicalKeyboardKey_4294968578, AllCandidates: B.LogicalKeyboardKey_4294969089, Alphanumeric: B.LogicalKeyboardKey_4294969090, AltGraph: B.LogicalKeyboardKey_4294967555, AppSwitch: B.LogicalKeyboardKey_4294971393, ArrowDown: B.LogicalKeyboardKey_4294968065, ArrowLeft: B.LogicalKeyboardKey_4294968066, ArrowRight: B.LogicalKeyboardKey_4294968067, ArrowUp: B.LogicalKeyboardKey_4294968068, Attn: B.LogicalKeyboardKey_4294968579, AudioBalanceLeft: B.LogicalKeyboardKey_4294970625, AudioBalanceRight: B.LogicalKeyboardKey_4294970626, AudioBassBoostDown: B.LogicalKeyboardKey_4294970627, AudioBassBoostToggle: B.LogicalKeyboardKey_4294970882, AudioBassBoostUp: B.LogicalKeyboardKey_4294970628, AudioFaderFront: B.LogicalKeyboardKey_4294970629, AudioFaderRear: B.LogicalKeyboardKey_4294970630, AudioSurroundModeNext: B.LogicalKeyboardKey_4294970631, AudioTrebleDown: B.LogicalKeyboardKey_4294970884, AudioTrebleUp: B.LogicalKeyboardKey_4294970885, AudioVolumeDown: B.LogicalKeyboardKey_4294969871, AudioVolumeMute: B.LogicalKeyboardKey_4294969873, AudioVolumeUp: B.LogicalKeyboardKey_4294969872, Backspace: B.LogicalKeyboardKey_4294967304, BrightnessDown: B.LogicalKeyboardKey_4294968833, BrightnessUp: B.LogicalKeyboardKey_4294968834, BrowserBack: B.LogicalKeyboardKey_4294970369, BrowserFavorites: B.LogicalKeyboardKey_4294970370, BrowserForward: B.LogicalKeyboardKey_4294970371, BrowserHome: B.LogicalKeyboardKey_4294970372, BrowserRefresh: B.LogicalKeyboardKey_4294970373, BrowserSearch: B.LogicalKeyboardKey_4294970374, BrowserStop: B.LogicalKeyboardKey_4294970375, Call: B.LogicalKeyboardKey_4294971394, Camera: B.LogicalKeyboardKey_4294968835, CameraFocus: B.LogicalKeyboardKey_4294971395, Cancel: B.LogicalKeyboardKey_4294968580, CapsLock: B.LogicalKeyboardKey_4294967556, ChannelDown: B.LogicalKeyboardKey_4294970634, ChannelUp: B.LogicalKeyboardKey_4294970635, Clear: B.LogicalKeyboardKey_4294968321, Close: B.LogicalKeyboardKey_4294969857, ClosedCaptionToggle: B.LogicalKeyboardKey_4294970642, CodeInput: B.LogicalKeyboardKey_4294969091, ColorF0Red: B.LogicalKeyboardKey_4294970636, ColorF1Green: B.LogicalKeyboardKey_4294970637, ColorF2Yellow: B.LogicalKeyboardKey_4294970638, ColorF3Blue: B.LogicalKeyboardKey_4294970639, ColorF4Grey: B.LogicalKeyboardKey_4294970640, ColorF5Brown: B.LogicalKeyboardKey_4294970641, Compose: B.LogicalKeyboardKey_4294969092, ContextMenu: B.LogicalKeyboardKey_4294968581, Convert: B.LogicalKeyboardKey_4294969093, Copy: B.LogicalKeyboardKey_4294968322, CrSel: B.LogicalKeyboardKey_4294968323, Cut: B.LogicalKeyboardKey_4294968324, DVR: B.LogicalKeyboardKey_4294970703, Delete: B.LogicalKeyboardKey_4294967423, Dimmer: B.LogicalKeyboardKey_4294970643, DisplaySwap: B.LogicalKeyboardKey_4294970644, Eisu: B.LogicalKeyboardKey_4294969108, Eject: B.LogicalKeyboardKey_4294968836, End: B.LogicalKeyboardKey_4294968069, EndCall: B.LogicalKeyboardKey_4294971396, Enter: B.LogicalKeyboardKey_4294967309, EraseEof: B.LogicalKeyboardKey_4294968325, Escape: B.LogicalKeyboardKey_4294967323, ExSel: B.LogicalKeyboardKey_4294968326, Execute: B.LogicalKeyboardKey_4294968582, Exit: B.LogicalKeyboardKey_4294970645, F1: B.LogicalKeyboardKey_4294969345, F10: B.LogicalKeyboardKey_4294969354, F11: B.LogicalKeyboardKey_4294969355, F12: B.LogicalKeyboardKey_4294969356, F13: B.LogicalKeyboardKey_4294969357, F14: B.LogicalKeyboardKey_4294969358, F15: B.LogicalKeyboardKey_4294969359, F16: B.LogicalKeyboardKey_4294969360, F17: B.LogicalKeyboardKey_4294969361, F18: B.LogicalKeyboardKey_4294969362, F19: B.LogicalKeyboardKey_4294969363, F2: B.LogicalKeyboardKey_4294969346, F20: B.LogicalKeyboardKey_4294969364, F21: B.LogicalKeyboardKey_4294969365, F22: B.LogicalKeyboardKey_4294969366, F23: B.LogicalKeyboardKey_4294969367, F24: B.LogicalKeyboardKey_4294969368, F3: B.LogicalKeyboardKey_4294969347, F4: B.LogicalKeyboardKey_4294969348, F5: B.LogicalKeyboardKey_4294969349, F6: B.LogicalKeyboardKey_4294969350, F7: B.LogicalKeyboardKey_4294969351, F8: B.LogicalKeyboardKey_4294969352, F9: B.LogicalKeyboardKey_4294969353, FavoriteClear0: B.LogicalKeyboardKey_4294970646, FavoriteClear1: B.LogicalKeyboardKey_4294970647, FavoriteClear2: B.LogicalKeyboardKey_4294970648, FavoriteClear3: B.LogicalKeyboardKey_4294970649, FavoriteRecall0: B.LogicalKeyboardKey_4294970650, FavoriteRecall1: B.LogicalKeyboardKey_4294970651, FavoriteRecall2: B.LogicalKeyboardKey_4294970652, FavoriteRecall3: B.LogicalKeyboardKey_4294970653, FavoriteStore0: B.LogicalKeyboardKey_4294970654, FavoriteStore1: B.LogicalKeyboardKey_4294970655, FavoriteStore2: B.LogicalKeyboardKey_4294970656, FavoriteStore3: B.LogicalKeyboardKey_4294970657, FinalMode: B.LogicalKeyboardKey_4294969094, Find: B.LogicalKeyboardKey_4294968583, Fn: B.LogicalKeyboardKey_4294967558, FnLock: B.LogicalKeyboardKey_4294967559, GoBack: B.LogicalKeyboardKey_4294971397, GoHome: B.LogicalKeyboardKey_4294971398, GroupFirst: B.LogicalKeyboardKey_4294969095, GroupLast: B.LogicalKeyboardKey_4294969096, GroupNext: B.LogicalKeyboardKey_4294969097, GroupPrevious: B.LogicalKeyboardKey_4294969098, Guide: B.LogicalKeyboardKey_4294970658, GuideNextDay: B.LogicalKeyboardKey_4294970659, GuidePreviousDay: B.LogicalKeyboardKey_4294970660, HangulMode: B.LogicalKeyboardKey_4294969105, HanjaMode: B.LogicalKeyboardKey_4294969106, Hankaku: B.LogicalKeyboardKey_4294969109, HeadsetHook: B.LogicalKeyboardKey_4294971399, Help: B.LogicalKeyboardKey_4294968584, Hibernate: B.LogicalKeyboardKey_4294968841, Hiragana: B.LogicalKeyboardKey_4294969110, HiraganaKatakana: B.LogicalKeyboardKey_4294969111, Home: B.LogicalKeyboardKey_4294968070, Hyper: B.LogicalKeyboardKey_4294967560, Info: B.LogicalKeyboardKey_4294970661, Insert: B.LogicalKeyboardKey_4294968327, InstantReplay: B.LogicalKeyboardKey_4294970662, JunjaMode: B.LogicalKeyboardKey_4294969107, KanaMode: B.LogicalKeyboardKey_4294969112, KanjiMode: B.LogicalKeyboardKey_4294969113, Katakana: B.LogicalKeyboardKey_4294969114, Key11: B.LogicalKeyboardKey_4294971905, Key12: B.LogicalKeyboardKey_4294971906, LastNumberRedial: B.LogicalKeyboardKey_4294971400, LaunchApplication1: B.LogicalKeyboardKey_4294970118, LaunchApplication2: B.LogicalKeyboardKey_4294970113, LaunchAssistant: B.LogicalKeyboardKey_4294970126, LaunchCalendar: B.LogicalKeyboardKey_4294970114, LaunchContacts: B.LogicalKeyboardKey_4294970124, LaunchControlPanel: B.LogicalKeyboardKey_4294970127, LaunchMail: B.LogicalKeyboardKey_4294970115, LaunchMediaPlayer: B.LogicalKeyboardKey_4294970116, LaunchMusicPlayer: B.LogicalKeyboardKey_4294970117, LaunchPhone: B.LogicalKeyboardKey_4294970125, LaunchScreenSaver: B.LogicalKeyboardKey_4294970119, LaunchSpreadsheet: B.LogicalKeyboardKey_4294970120, LaunchWebBrowser: B.LogicalKeyboardKey_4294970121, LaunchWebCam: B.LogicalKeyboardKey_4294970122, LaunchWordProcessor: B.LogicalKeyboardKey_4294970123, Link: B.LogicalKeyboardKey_4294970663, ListProgram: B.LogicalKeyboardKey_4294970664, LiveContent: B.LogicalKeyboardKey_4294970665, Lock: B.LogicalKeyboardKey_4294970666, LogOff: B.LogicalKeyboardKey_4294968837, MailForward: B.LogicalKeyboardKey_4294969858, MailReply: B.LogicalKeyboardKey_4294969859, MailSend: B.LogicalKeyboardKey_4294969860, MannerMode: B.LogicalKeyboardKey_4294971402, MediaApps: B.LogicalKeyboardKey_4294970667, MediaAudioTrack: B.LogicalKeyboardKey_4294970704, MediaClose: B.LogicalKeyboardKey_4294970715, MediaFastForward: B.LogicalKeyboardKey_4294970668, MediaLast: B.LogicalKeyboardKey_4294970669, MediaPause: B.LogicalKeyboardKey_4294970670, MediaPlay: B.LogicalKeyboardKey_4294970671, MediaPlayPause: B.LogicalKeyboardKey_4294969861, MediaRecord: B.LogicalKeyboardKey_4294970672, MediaRewind: B.LogicalKeyboardKey_4294970673, MediaSkip: B.LogicalKeyboardKey_4294970674, MediaSkipBackward: B.LogicalKeyboardKey_4294970705, MediaSkipForward: B.LogicalKeyboardKey_4294970706, MediaStepBackward: B.LogicalKeyboardKey_4294970707, MediaStepForward: B.LogicalKeyboardKey_4294970708, MediaStop: B.LogicalKeyboardKey_4294969863, MediaTopMenu: B.LogicalKeyboardKey_4294970709, MediaTrackNext: B.LogicalKeyboardKey_4294969864, MediaTrackPrevious: B.LogicalKeyboardKey_4294969865, MicrophoneToggle: B.LogicalKeyboardKey_4294970886, MicrophoneVolumeDown: B.LogicalKeyboardKey_4294970887, MicrophoneVolumeMute: B.LogicalKeyboardKey_4294970889, MicrophoneVolumeUp: B.LogicalKeyboardKey_4294970888, ModeChange: B.LogicalKeyboardKey_4294969099, NavigateIn: B.LogicalKeyboardKey_4294970710, NavigateNext: B.LogicalKeyboardKey_4294970711, NavigateOut: B.LogicalKeyboardKey_4294970712, NavigatePrevious: B.LogicalKeyboardKey_4294970713, New: B.LogicalKeyboardKey_4294969866, NextCandidate: B.LogicalKeyboardKey_4294969100, NextFavoriteChannel: B.LogicalKeyboardKey_4294970675, NextUserProfile: B.LogicalKeyboardKey_4294970676, NonConvert: B.LogicalKeyboardKey_4294969101, Notification: B.LogicalKeyboardKey_4294971401, NumLock: B.LogicalKeyboardKey_4294967562, OnDemand: B.LogicalKeyboardKey_4294970677, Open: B.LogicalKeyboardKey_4294969867, PageDown: B.LogicalKeyboardKey_4294968071, PageUp: B.LogicalKeyboardKey_4294968072, Pairing: B.LogicalKeyboardKey_4294970714, Paste: B.LogicalKeyboardKey_4294968328, Pause: B.LogicalKeyboardKey_4294968585, PinPDown: B.LogicalKeyboardKey_4294970678, PinPMove: B.LogicalKeyboardKey_4294970679, PinPToggle: B.LogicalKeyboardKey_4294970680, PinPUp: B.LogicalKeyboardKey_4294970681, Play: B.LogicalKeyboardKey_4294968586, PlaySpeedDown: B.LogicalKeyboardKey_4294970682, PlaySpeedReset: B.LogicalKeyboardKey_4294970683, PlaySpeedUp: B.LogicalKeyboardKey_4294970684, Power: B.LogicalKeyboardKey_4294968838, PowerOff: B.LogicalKeyboardKey_4294968839, PreviousCandidate: B.LogicalKeyboardKey_4294969102, Print: B.LogicalKeyboardKey_4294969868, PrintScreen: B.LogicalKeyboardKey_4294968840, Process: B.LogicalKeyboardKey_4294969103, Props: B.LogicalKeyboardKey_4294968587, RandomToggle: B.LogicalKeyboardKey_4294970685, RcLowBattery: B.LogicalKeyboardKey_4294970686, RecordSpeedNext: B.LogicalKeyboardKey_4294970687, Redo: B.LogicalKeyboardKey_4294968329, RfBypass: B.LogicalKeyboardKey_4294970688, Romaji: B.LogicalKeyboardKey_4294969115, STBInput: B.LogicalKeyboardKey_4294970693, STBPower: B.LogicalKeyboardKey_4294970694, Save: B.LogicalKeyboardKey_4294969869, ScanChannelsToggle: B.LogicalKeyboardKey_4294970689, ScreenModeNext: B.LogicalKeyboardKey_4294970690, ScrollLock: B.LogicalKeyboardKey_4294967564, Select: B.LogicalKeyboardKey_4294968588, Settings: B.LogicalKeyboardKey_4294970691, ShiftLevel5: B.LogicalKeyboardKey_4294967569, SingleCandidate: B.LogicalKeyboardKey_4294969104, Soft1: B.LogicalKeyboardKey_4294969601, Soft2: B.LogicalKeyboardKey_4294969602, Soft3: B.LogicalKeyboardKey_4294969603, Soft4: B.LogicalKeyboardKey_4294969604, Soft5: B.LogicalKeyboardKey_4294969605, Soft6: B.LogicalKeyboardKey_4294969606, Soft7: B.LogicalKeyboardKey_4294969607, Soft8: B.LogicalKeyboardKey_4294969608, SpeechCorrectionList: B.LogicalKeyboardKey_4294971137, SpeechInputToggle: B.LogicalKeyboardKey_4294971138, SpellCheck: B.LogicalKeyboardKey_4294969870, SplitScreenToggle: B.LogicalKeyboardKey_4294970692, Standby: B.LogicalKeyboardKey_4294968842, Subtitle: B.LogicalKeyboardKey_4294970695, Super: B.LogicalKeyboardKey_4294967566, Symbol: B.LogicalKeyboardKey_4294967567, SymbolLock: B.LogicalKeyboardKey_4294967568, TV: B.LogicalKeyboardKey_4294970697, TV3DMode: B.LogicalKeyboardKey_4294971649, TVAntennaCable: B.LogicalKeyboardKey_4294971650, TVAudioDescription: B.LogicalKeyboardKey_4294971651, TVAudioDescriptionMixDown: B.LogicalKeyboardKey_4294971652, TVAudioDescriptionMixUp: B.LogicalKeyboardKey_4294971653, TVContentsMenu: B.LogicalKeyboardKey_4294971654, TVDataService: B.LogicalKeyboardKey_4294971655, TVInput: B.LogicalKeyboardKey_4294970698, TVInputComponent1: B.LogicalKeyboardKey_4294971656, TVInputComponent2: B.LogicalKeyboardKey_4294971657, TVInputComposite1: B.LogicalKeyboardKey_4294971658, TVInputComposite2: B.LogicalKeyboardKey_4294971659, TVInputHDMI1: B.LogicalKeyboardKey_4294971660, TVInputHDMI2: B.LogicalKeyboardKey_4294971661, TVInputHDMI3: B.LogicalKeyboardKey_4294971662, TVInputHDMI4: B.LogicalKeyboardKey_4294971663, TVInputVGA1: B.LogicalKeyboardKey_4294971664, TVMediaContext: B.LogicalKeyboardKey_4294971665, TVNetwork: B.LogicalKeyboardKey_4294971666, TVNumberEntry: B.LogicalKeyboardKey_4294971667, TVPower: B.LogicalKeyboardKey_4294970699, TVRadioService: B.LogicalKeyboardKey_4294971668, TVSatellite: B.LogicalKeyboardKey_4294971669, TVSatelliteBS: B.LogicalKeyboardKey_4294971670, TVSatelliteCS: B.LogicalKeyboardKey_4294971671, TVSatelliteToggle: B.LogicalKeyboardKey_4294971672, TVTerrestrialAnalog: B.LogicalKeyboardKey_4294971673, TVTerrestrialDigital: B.LogicalKeyboardKey_4294971674, TVTimer: B.LogicalKeyboardKey_4294971675, Tab: B.LogicalKeyboardKey_4294967305, Teletext: B.LogicalKeyboardKey_4294970696, Undo: B.LogicalKeyboardKey_4294968330, Unidentified: B.LogicalKeyboardKey_4294967297, VideoModeNext: B.LogicalKeyboardKey_4294970700, VoiceDial: B.LogicalKeyboardKey_4294971403, WakeUp: B.LogicalKeyboardKey_4294968843, Wink: B.LogicalKeyboardKey_4294970701, Zenkaku: B.LogicalKeyboardKey_4294969116, ZenkakuHankaku: B.LogicalKeyboardKey_4294969117, ZoomIn: B.LogicalKeyboardKey_4294968589, ZoomOut: B.LogicalKeyboardKey_4294968590, ZoomToggle: B.LogicalKeyboardKey_4294970702}, B.List_0mM, A.findType("ConstantStringMap<String,LogicalKeyboardKey>"));
    B.Map_0mogo = new A.ConstantStringMap(300, {AVRInput: 4294970632, AVRPower: 4294970633, Accel: 4294967553, Accept: 4294968577, Again: 4294968578, AllCandidates: 4294969089, Alphanumeric: 4294969090, AltGraph: 4294967555, AppSwitch: 4294971393, ArrowDown: 4294968065, ArrowLeft: 4294968066, ArrowRight: 4294968067, ArrowUp: 4294968068, Attn: 4294968579, AudioBalanceLeft: 4294970625, AudioBalanceRight: 4294970626, AudioBassBoostDown: 4294970627, AudioBassBoostToggle: 4294970882, AudioBassBoostUp: 4294970628, AudioFaderFront: 4294970629, AudioFaderRear: 4294970630, AudioSurroundModeNext: 4294970631, AudioTrebleDown: 4294970884, AudioTrebleUp: 4294970885, AudioVolumeDown: 4294969871, AudioVolumeMute: 4294969873, AudioVolumeUp: 4294969872, Backspace: 4294967304, BrightnessDown: 4294968833, BrightnessUp: 4294968834, BrowserBack: 4294970369, BrowserFavorites: 4294970370, BrowserForward: 4294970371, BrowserHome: 4294970372, BrowserRefresh: 4294970373, BrowserSearch: 4294970374, BrowserStop: 4294970375, Call: 4294971394, Camera: 4294968835, CameraFocus: 4294971395, Cancel: 4294968580, CapsLock: 4294967556, ChannelDown: 4294970634, ChannelUp: 4294970635, Clear: 4294968321, Close: 4294969857, ClosedCaptionToggle: 4294970642, CodeInput: 4294969091, ColorF0Red: 4294970636, ColorF1Green: 4294970637, ColorF2Yellow: 4294970638, ColorF3Blue: 4294970639, ColorF4Grey: 4294970640, ColorF5Brown: 4294970641, Compose: 4294969092, ContextMenu: 4294968581, Convert: 4294969093, Copy: 4294968322, CrSel: 4294968323, Cut: 4294968324, DVR: 4294970703, Delete: 4294967423, Dimmer: 4294970643, DisplaySwap: 4294970644, Eisu: 4294969108, Eject: 4294968836, End: 4294968069, EndCall: 4294971396, Enter: 4294967309, EraseEof: 4294968325, Escape: 4294967323, ExSel: 4294968326, Execute: 4294968582, Exit: 4294970645, F1: 4294969345, F10: 4294969354, F11: 4294969355, F12: 4294969356, F13: 4294969357, F14: 4294969358, F15: 4294969359, F16: 4294969360, F17: 4294969361, F18: 4294969362, F19: 4294969363, F2: 4294969346, F20: 4294969364, F21: 4294969365, F22: 4294969366, F23: 4294969367, F24: 4294969368, F3: 4294969347, F4: 4294969348, F5: 4294969349, F6: 4294969350, F7: 4294969351, F8: 4294969352, F9: 4294969353, FavoriteClear0: 4294970646, FavoriteClear1: 4294970647, FavoriteClear2: 4294970648, FavoriteClear3: 4294970649, FavoriteRecall0: 4294970650, FavoriteRecall1: 4294970651, FavoriteRecall2: 4294970652, FavoriteRecall3: 4294970653, FavoriteStore0: 4294970654, FavoriteStore1: 4294970655, FavoriteStore2: 4294970656, FavoriteStore3: 4294970657, FinalMode: 4294969094, Find: 4294968583, Fn: 4294967558, FnLock: 4294967559, GoBack: 4294971397, GoHome: 4294971398, GroupFirst: 4294969095, GroupLast: 4294969096, GroupNext: 4294969097, GroupPrevious: 4294969098, Guide: 4294970658, GuideNextDay: 4294970659, GuidePreviousDay: 4294970660, HangulMode: 4294969105, HanjaMode: 4294969106, Hankaku: 4294969109, HeadsetHook: 4294971399, Help: 4294968584, Hibernate: 4294968841, Hiragana: 4294969110, HiraganaKatakana: 4294969111, Home: 4294968070, Hyper: 4294967560, Info: 4294970661, Insert: 4294968327, InstantReplay: 4294970662, JunjaMode: 4294969107, KanaMode: 4294969112, KanjiMode: 4294969113, Katakana: 4294969114, Key11: 4294971905, Key12: 4294971906, LastNumberRedial: 4294971400, LaunchApplication1: 4294970118, LaunchApplication2: 4294970113, LaunchAssistant: 4294970126, LaunchCalendar: 4294970114, LaunchContacts: 4294970124, LaunchControlPanel: 4294970127, LaunchMail: 4294970115, LaunchMediaPlayer: 4294970116, LaunchMusicPlayer: 4294970117, LaunchPhone: 4294970125, LaunchScreenSaver: 4294970119, LaunchSpreadsheet: 4294970120, LaunchWebBrowser: 4294970121, LaunchWebCam: 4294970122, LaunchWordProcessor: 4294970123, Link: 4294970663, ListProgram: 4294970664, LiveContent: 4294970665, Lock: 4294970666, LogOff: 4294968837, MailForward: 4294969858, MailReply: 4294969859, MailSend: 4294969860, MannerMode: 4294971402, MediaApps: 4294970667, MediaAudioTrack: 4294970704, MediaClose: 4294970715, MediaFastForward: 4294970668, MediaLast: 4294970669, MediaPause: 4294970670, MediaPlay: 4294970671, MediaPlayPause: 4294969861, MediaRecord: 4294970672, MediaRewind: 4294970673, MediaSkip: 4294970674, MediaSkipBackward: 4294970705, MediaSkipForward: 4294970706, MediaStepBackward: 4294970707, MediaStepForward: 4294970708, MediaStop: 4294969863, MediaTopMenu: 4294970709, MediaTrackNext: 4294969864, MediaTrackPrevious: 4294969865, MicrophoneToggle: 4294970886, MicrophoneVolumeDown: 4294970887, MicrophoneVolumeMute: 4294970889, MicrophoneVolumeUp: 4294970888, ModeChange: 4294969099, NavigateIn: 4294970710, NavigateNext: 4294970711, NavigateOut: 4294970712, NavigatePrevious: 4294970713, New: 4294969866, NextCandidate: 4294969100, NextFavoriteChannel: 4294970675, NextUserProfile: 4294970676, NonConvert: 4294969101, Notification: 4294971401, NumLock: 4294967562, OnDemand: 4294970677, Open: 4294969867, PageDown: 4294968071, PageUp: 4294968072, Pairing: 4294970714, Paste: 4294968328, Pause: 4294968585, PinPDown: 4294970678, PinPMove: 4294970679, PinPToggle: 4294970680, PinPUp: 4294970681, Play: 4294968586, PlaySpeedDown: 4294970682, PlaySpeedReset: 4294970683, PlaySpeedUp: 4294970684, Power: 4294968838, PowerOff: 4294968839, PreviousCandidate: 4294969102, Print: 4294969868, PrintScreen: 4294968840, Process: 4294969103, Props: 4294968587, RandomToggle: 4294970685, RcLowBattery: 4294970686, RecordSpeedNext: 4294970687, Redo: 4294968329, RfBypass: 4294970688, Romaji: 4294969115, STBInput: 4294970693, STBPower: 4294970694, Save: 4294969869, ScanChannelsToggle: 4294970689, ScreenModeNext: 4294970690, ScrollLock: 4294967564, Select: 4294968588, Settings: 4294970691, ShiftLevel5: 4294967569, SingleCandidate: 4294969104, Soft1: 4294969601, Soft2: 4294969602, Soft3: 4294969603, Soft4: 4294969604, Soft5: 4294969605, Soft6: 4294969606, Soft7: 4294969607, Soft8: 4294969608, SpeechCorrectionList: 4294971137, SpeechInputToggle: 4294971138, SpellCheck: 4294969870, SplitScreenToggle: 4294970692, Standby: 4294968842, Subtitle: 4294970695, Super: 4294967566, Symbol: 4294967567, SymbolLock: 4294967568, TV: 4294970697, TV3DMode: 4294971649, TVAntennaCable: 4294971650, TVAudioDescription: 4294971651, TVAudioDescriptionMixDown: 4294971652, TVAudioDescriptionMixUp: 4294971653, TVContentsMenu: 4294971654, TVDataService: 4294971655, TVInput: 4294970698, TVInputComponent1: 4294971656, TVInputComponent2: 4294971657, TVInputComposite1: 4294971658, TVInputComposite2: 4294971659, TVInputHDMI1: 4294971660, TVInputHDMI2: 4294971661, TVInputHDMI3: 4294971662, TVInputHDMI4: 4294971663, TVInputVGA1: 4294971664, TVMediaContext: 4294971665, TVNetwork: 4294971666, TVNumberEntry: 4294971667, TVPower: 4294970699, TVRadioService: 4294971668, TVSatellite: 4294971669, TVSatelliteBS: 4294971670, TVSatelliteCS: 4294971671, TVSatelliteToggle: 4294971672, TVTerrestrialAnalog: 4294971673, TVTerrestrialDigital: 4294971674, TVTimer: 4294971675, Tab: 4294967305, Teletext: 4294970696, Undo: 4294968330, Unidentified: 4294967297, VideoModeNext: 4294970700, VoiceDial: 4294971403, WakeUp: 4294968843, Wink: 4294970701, Zenkaku: 4294969116, ZenkakuHankaku: 4294969117, ZoomIn: 4294968589, ZoomOut: 4294968590, ZoomToggle: 4294970702}, B.List_0mM, type$.ConstantStringMap_String_int);
    B.List_1kC = A._setArrayType(makeConstList(["Abort", "Again", "AltLeft", "AltRight", "ArrowDown", "ArrowLeft", "ArrowRight", "ArrowUp", "AudioVolumeDown", "AudioVolumeMute", "AudioVolumeUp", "Backquote", "Backslash", "Backspace", "BassBoost", "BracketLeft", "BracketRight", "BrightnessAuto", "BrightnessDown", "BrightnessMaximum", "BrightnessMinimum", "BrightnessToggle", "BrightnessUp", "BrowserBack", "BrowserFavorites", "BrowserForward", "BrowserHome", "BrowserRefresh", "BrowserSearch", "BrowserStop", "CapsLock", "ChannelDown", "ChannelUp", "Close", "ClosedCaptionToggle", "Comma", "ContextMenu", "ControlLeft", "ControlRight", "Convert", "Copy", "Cut", "Delete", "Digit0", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "DisplayToggleIntExt", "Eject", "End", "Enter", "Equal", "Escape", "Exit", "F1", "F10", "F11", "F12", "F13", "F14", "F15", "F16", "F17", "F18", "F19", "F2", "F20", "F21", "F22", "F23", "F24", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "Find", "Fn", "FnLock", "GameButton1", "GameButton10", "GameButton11", "GameButton12", "GameButton13", "GameButton14", "GameButton15", "GameButton16", "GameButton2", "GameButton3", "GameButton4", "GameButton5", "GameButton6", "GameButton7", "GameButton8", "GameButton9", "GameButtonA", "GameButtonB", "GameButtonC", "GameButtonLeft1", "GameButtonLeft2", "GameButtonMode", "GameButtonRight1", "GameButtonRight2", "GameButtonSelect", "GameButtonStart", "GameButtonThumbLeft", "GameButtonThumbRight", "GameButtonX", "GameButtonY", "GameButtonZ", "Help", "Home", "Hyper", "Info", "Insert", "IntlBackslash", "IntlRo", "IntlYen", "KanaMode", "KbdIllumDown", "KbdIllumUp", "KeyA", "KeyB", "KeyC", "KeyD", "KeyE", "KeyF", "KeyG", "KeyH", "KeyI", "KeyJ", "KeyK", "KeyL", "KeyM", "KeyN", "KeyO", "KeyP", "KeyQ", "KeyR", "KeyS", "KeyT", "KeyU", "KeyV", "KeyW", "KeyX", "KeyY", "KeyZ", "KeyboardLayoutSelect", "Lang1", "Lang2", "Lang3", "Lang4", "Lang5", "LaunchApp1", "LaunchApp2", "LaunchAssistant", "LaunchAudioBrowser", "LaunchCalendar", "LaunchContacts", "LaunchControlPanel", "LaunchDocuments", "LaunchInternetBrowser", "LaunchKeyboardLayout", "LaunchMail", "LaunchPhone", "LaunchScreenSaver", "LaunchSpreadsheet", "LaunchWordProcessor", "LockScreen", "LogOff", "MailForward", "MailReply", "MailSend", "MediaFastForward", "MediaLast", "MediaPause", "MediaPlay", "MediaPlayPause", "MediaRecord", "MediaRewind", "MediaSelect", "MediaStop", "MediaTrackNext", "MediaTrackPrevious", "MetaLeft", "MetaRight", "MicrophoneMuteToggle", "Minus", "New", "NonConvert", "NumLock", "Numpad0", "Numpad1", "Numpad2", "Numpad3", "Numpad4", "Numpad5", "Numpad6", "Numpad7", "Numpad8", "Numpad9", "NumpadAdd", "NumpadBackspace", "NumpadClear", "NumpadClearEntry", "NumpadComma", "NumpadDecimal", "NumpadDivide", "NumpadEnter", "NumpadEqual", "NumpadMemoryAdd", "NumpadMemoryClear", "NumpadMemoryRecall", "NumpadMemoryStore", "NumpadMemorySubtract", "NumpadMultiply", "NumpadParenLeft", "NumpadParenRight", "NumpadSignChange", "NumpadSubtract", "Open", "PageDown", "PageUp", "Paste", "Pause", "Period", "Power", "Print", "PrintScreen", "PrivacyScreenToggle", "ProgramGuide", "Props", "Quote", "Redo", "Resume", "Save", "ScrollLock", "Select", "SelectTask", "Semicolon", "ShiftLeft", "ShiftRight", "ShowAllWindows", "Slash", "Sleep", "Space", "SpeechInputToggle", "SpellCheck", "Super", "Suspend", "Tab", "Turbo", "Undo", "UsbErrorRollOver", "UsbErrorUndefined", "UsbPostFail", "UsbReserved", "WakeUp", "ZoomIn", "ZoomOut", "ZoomToggle"]), type$.JSArray_String);
    B.PhysicalKeyboardKey_458907 = new A.PhysicalKeyboardKey(458907);
    B.PhysicalKeyboardKey_458873 = new A.PhysicalKeyboardKey(458873);
    B.PhysicalKeyboardKey_458978 = new A.PhysicalKeyboardKey(458978);
    B.PhysicalKeyboardKey_458982 = new A.PhysicalKeyboardKey(458982);
    B.PhysicalKeyboardKey_458833 = new A.PhysicalKeyboardKey(458833);
    B.PhysicalKeyboardKey_458832 = new A.PhysicalKeyboardKey(458832);
    B.PhysicalKeyboardKey_458831 = new A.PhysicalKeyboardKey(458831);
    B.PhysicalKeyboardKey_458834 = new A.PhysicalKeyboardKey(458834);
    B.PhysicalKeyboardKey_458881 = new A.PhysicalKeyboardKey(458881);
    B.PhysicalKeyboardKey_458879 = new A.PhysicalKeyboardKey(458879);
    B.PhysicalKeyboardKey_458880 = new A.PhysicalKeyboardKey(458880);
    B.PhysicalKeyboardKey_458805 = new A.PhysicalKeyboardKey(458805);
    B.PhysicalKeyboardKey_458801 = new A.PhysicalKeyboardKey(458801);
    B.PhysicalKeyboardKey_458794 = new A.PhysicalKeyboardKey(458794);
    B.PhysicalKeyboardKey_786661 = new A.PhysicalKeyboardKey(786661);
    B.PhysicalKeyboardKey_458799 = new A.PhysicalKeyboardKey(458799);
    B.PhysicalKeyboardKey_458800 = new A.PhysicalKeyboardKey(458800);
    B.PhysicalKeyboardKey_786549 = new A.PhysicalKeyboardKey(786549);
    B.PhysicalKeyboardKey_786544 = new A.PhysicalKeyboardKey(786544);
    B.PhysicalKeyboardKey_786548 = new A.PhysicalKeyboardKey(786548);
    B.PhysicalKeyboardKey_786547 = new A.PhysicalKeyboardKey(786547);
    B.PhysicalKeyboardKey_786546 = new A.PhysicalKeyboardKey(786546);
    B.PhysicalKeyboardKey_786543 = new A.PhysicalKeyboardKey(786543);
    B.PhysicalKeyboardKey_786980 = new A.PhysicalKeyboardKey(786980);
    B.PhysicalKeyboardKey_786986 = new A.PhysicalKeyboardKey(786986);
    B.PhysicalKeyboardKey_786981 = new A.PhysicalKeyboardKey(786981);
    B.PhysicalKeyboardKey_786979 = new A.PhysicalKeyboardKey(786979);
    B.PhysicalKeyboardKey_786983 = new A.PhysicalKeyboardKey(786983);
    B.PhysicalKeyboardKey_786977 = new A.PhysicalKeyboardKey(786977);
    B.PhysicalKeyboardKey_786982 = new A.PhysicalKeyboardKey(786982);
    B.PhysicalKeyboardKey_458809 = new A.PhysicalKeyboardKey(458809);
    B.PhysicalKeyboardKey_786589 = new A.PhysicalKeyboardKey(786589);
    B.PhysicalKeyboardKey_786588 = new A.PhysicalKeyboardKey(786588);
    B.PhysicalKeyboardKey_786947 = new A.PhysicalKeyboardKey(786947);
    B.PhysicalKeyboardKey_786529 = new A.PhysicalKeyboardKey(786529);
    B.PhysicalKeyboardKey_458806 = new A.PhysicalKeyboardKey(458806);
    B.PhysicalKeyboardKey_458853 = new A.PhysicalKeyboardKey(458853);
    B.PhysicalKeyboardKey_458976 = new A.PhysicalKeyboardKey(458976);
    B.PhysicalKeyboardKey_458980 = new A.PhysicalKeyboardKey(458980);
    B.PhysicalKeyboardKey_458890 = new A.PhysicalKeyboardKey(458890);
    B.PhysicalKeyboardKey_458876 = new A.PhysicalKeyboardKey(458876);
    B.PhysicalKeyboardKey_458875 = new A.PhysicalKeyboardKey(458875);
    B.PhysicalKeyboardKey_458828 = new A.PhysicalKeyboardKey(458828);
    B.PhysicalKeyboardKey_458791 = new A.PhysicalKeyboardKey(458791);
    B.PhysicalKeyboardKey_458782 = new A.PhysicalKeyboardKey(458782);
    B.PhysicalKeyboardKey_458783 = new A.PhysicalKeyboardKey(458783);
    B.PhysicalKeyboardKey_458784 = new A.PhysicalKeyboardKey(458784);
    B.PhysicalKeyboardKey_458785 = new A.PhysicalKeyboardKey(458785);
    B.PhysicalKeyboardKey_458786 = new A.PhysicalKeyboardKey(458786);
    B.PhysicalKeyboardKey_458787 = new A.PhysicalKeyboardKey(458787);
    B.PhysicalKeyboardKey_458788 = new A.PhysicalKeyboardKey(458788);
    B.PhysicalKeyboardKey_458789 = new A.PhysicalKeyboardKey(458789);
    B.PhysicalKeyboardKey_458790 = new A.PhysicalKeyboardKey(458790);
    B.PhysicalKeyboardKey_65717 = new A.PhysicalKeyboardKey(65717);
    B.PhysicalKeyboardKey_786616 = new A.PhysicalKeyboardKey(786616);
    B.PhysicalKeyboardKey_458829 = new A.PhysicalKeyboardKey(458829);
    B.PhysicalKeyboardKey_458792 = new A.PhysicalKeyboardKey(458792);
    B.PhysicalKeyboardKey_458798 = new A.PhysicalKeyboardKey(458798);
    B.PhysicalKeyboardKey_458793 = new A.PhysicalKeyboardKey(458793);
    B.PhysicalKeyboardKey_786580 = new A.PhysicalKeyboardKey(786580);
    B.PhysicalKeyboardKey_458810 = new A.PhysicalKeyboardKey(458810);
    B.PhysicalKeyboardKey_458819 = new A.PhysicalKeyboardKey(458819);
    B.PhysicalKeyboardKey_458820 = new A.PhysicalKeyboardKey(458820);
    B.PhysicalKeyboardKey_458821 = new A.PhysicalKeyboardKey(458821);
    B.PhysicalKeyboardKey_458856 = new A.PhysicalKeyboardKey(458856);
    B.PhysicalKeyboardKey_458857 = new A.PhysicalKeyboardKey(458857);
    B.PhysicalKeyboardKey_458858 = new A.PhysicalKeyboardKey(458858);
    B.PhysicalKeyboardKey_458859 = new A.PhysicalKeyboardKey(458859);
    B.PhysicalKeyboardKey_458860 = new A.PhysicalKeyboardKey(458860);
    B.PhysicalKeyboardKey_458861 = new A.PhysicalKeyboardKey(458861);
    B.PhysicalKeyboardKey_458862 = new A.PhysicalKeyboardKey(458862);
    B.PhysicalKeyboardKey_458811 = new A.PhysicalKeyboardKey(458811);
    B.PhysicalKeyboardKey_458863 = new A.PhysicalKeyboardKey(458863);
    B.PhysicalKeyboardKey_458864 = new A.PhysicalKeyboardKey(458864);
    B.PhysicalKeyboardKey_458865 = new A.PhysicalKeyboardKey(458865);
    B.PhysicalKeyboardKey_458866 = new A.PhysicalKeyboardKey(458866);
    B.PhysicalKeyboardKey_458867 = new A.PhysicalKeyboardKey(458867);
    B.PhysicalKeyboardKey_458812 = new A.PhysicalKeyboardKey(458812);
    B.PhysicalKeyboardKey_458813 = new A.PhysicalKeyboardKey(458813);
    B.PhysicalKeyboardKey_458814 = new A.PhysicalKeyboardKey(458814);
    B.PhysicalKeyboardKey_458815 = new A.PhysicalKeyboardKey(458815);
    B.PhysicalKeyboardKey_458816 = new A.PhysicalKeyboardKey(458816);
    B.PhysicalKeyboardKey_458817 = new A.PhysicalKeyboardKey(458817);
    B.PhysicalKeyboardKey_458818 = new A.PhysicalKeyboardKey(458818);
    B.PhysicalKeyboardKey_458878 = new A.PhysicalKeyboardKey(458878);
    B.PhysicalKeyboardKey_18 = new A.PhysicalKeyboardKey(18);
    B.PhysicalKeyboardKey_19 = new A.PhysicalKeyboardKey(19);
    B.PhysicalKeyboardKey_392961 = new A.PhysicalKeyboardKey(392961);
    B.PhysicalKeyboardKey_392970 = new A.PhysicalKeyboardKey(392970);
    B.PhysicalKeyboardKey_392971 = new A.PhysicalKeyboardKey(392971);
    B.PhysicalKeyboardKey_392972 = new A.PhysicalKeyboardKey(392972);
    B.PhysicalKeyboardKey_392973 = new A.PhysicalKeyboardKey(392973);
    B.PhysicalKeyboardKey_392974 = new A.PhysicalKeyboardKey(392974);
    B.PhysicalKeyboardKey_392975 = new A.PhysicalKeyboardKey(392975);
    B.PhysicalKeyboardKey_392976 = new A.PhysicalKeyboardKey(392976);
    B.PhysicalKeyboardKey_392962 = new A.PhysicalKeyboardKey(392962);
    B.PhysicalKeyboardKey_392963 = new A.PhysicalKeyboardKey(392963);
    B.PhysicalKeyboardKey_392964 = new A.PhysicalKeyboardKey(392964);
    B.PhysicalKeyboardKey_392965 = new A.PhysicalKeyboardKey(392965);
    B.PhysicalKeyboardKey_392966 = new A.PhysicalKeyboardKey(392966);
    B.PhysicalKeyboardKey_392967 = new A.PhysicalKeyboardKey(392967);
    B.PhysicalKeyboardKey_392968 = new A.PhysicalKeyboardKey(392968);
    B.PhysicalKeyboardKey_392969 = new A.PhysicalKeyboardKey(392969);
    B.PhysicalKeyboardKey_392977 = new A.PhysicalKeyboardKey(392977);
    B.PhysicalKeyboardKey_392978 = new A.PhysicalKeyboardKey(392978);
    B.PhysicalKeyboardKey_392979 = new A.PhysicalKeyboardKey(392979);
    B.PhysicalKeyboardKey_392980 = new A.PhysicalKeyboardKey(392980);
    B.PhysicalKeyboardKey_392981 = new A.PhysicalKeyboardKey(392981);
    B.PhysicalKeyboardKey_392982 = new A.PhysicalKeyboardKey(392982);
    B.PhysicalKeyboardKey_392983 = new A.PhysicalKeyboardKey(392983);
    B.PhysicalKeyboardKey_392984 = new A.PhysicalKeyboardKey(392984);
    B.PhysicalKeyboardKey_392985 = new A.PhysicalKeyboardKey(392985);
    B.PhysicalKeyboardKey_392986 = new A.PhysicalKeyboardKey(392986);
    B.PhysicalKeyboardKey_392987 = new A.PhysicalKeyboardKey(392987);
    B.PhysicalKeyboardKey_392988 = new A.PhysicalKeyboardKey(392988);
    B.PhysicalKeyboardKey_392989 = new A.PhysicalKeyboardKey(392989);
    B.PhysicalKeyboardKey_392990 = new A.PhysicalKeyboardKey(392990);
    B.PhysicalKeyboardKey_392991 = new A.PhysicalKeyboardKey(392991);
    B.PhysicalKeyboardKey_458869 = new A.PhysicalKeyboardKey(458869);
    B.PhysicalKeyboardKey_458826 = new A.PhysicalKeyboardKey(458826);
    B.PhysicalKeyboardKey_16 = new A.PhysicalKeyboardKey(16);
    B.PhysicalKeyboardKey_786528 = new A.PhysicalKeyboardKey(786528);
    B.PhysicalKeyboardKey_458825 = new A.PhysicalKeyboardKey(458825);
    B.PhysicalKeyboardKey_458852 = new A.PhysicalKeyboardKey(458852);
    B.PhysicalKeyboardKey_458887 = new A.PhysicalKeyboardKey(458887);
    B.PhysicalKeyboardKey_458889 = new A.PhysicalKeyboardKey(458889);
    B.PhysicalKeyboardKey_458888 = new A.PhysicalKeyboardKey(458888);
    B.PhysicalKeyboardKey_786554 = new A.PhysicalKeyboardKey(786554);
    B.PhysicalKeyboardKey_786553 = new A.PhysicalKeyboardKey(786553);
    B.PhysicalKeyboardKey_458756 = new A.PhysicalKeyboardKey(458756);
    B.PhysicalKeyboardKey_458757 = new A.PhysicalKeyboardKey(458757);
    B.PhysicalKeyboardKey_458758 = new A.PhysicalKeyboardKey(458758);
    B.PhysicalKeyboardKey_458759 = new A.PhysicalKeyboardKey(458759);
    B.PhysicalKeyboardKey_458760 = new A.PhysicalKeyboardKey(458760);
    B.PhysicalKeyboardKey_458761 = new A.PhysicalKeyboardKey(458761);
    B.PhysicalKeyboardKey_458762 = new A.PhysicalKeyboardKey(458762);
    B.PhysicalKeyboardKey_458763 = new A.PhysicalKeyboardKey(458763);
    B.PhysicalKeyboardKey_458764 = new A.PhysicalKeyboardKey(458764);
    B.PhysicalKeyboardKey_458765 = new A.PhysicalKeyboardKey(458765);
    B.PhysicalKeyboardKey_458766 = new A.PhysicalKeyboardKey(458766);
    B.PhysicalKeyboardKey_458767 = new A.PhysicalKeyboardKey(458767);
    B.PhysicalKeyboardKey_458768 = new A.PhysicalKeyboardKey(458768);
    B.PhysicalKeyboardKey_458769 = new A.PhysicalKeyboardKey(458769);
    B.PhysicalKeyboardKey_458770 = new A.PhysicalKeyboardKey(458770);
    B.PhysicalKeyboardKey_458771 = new A.PhysicalKeyboardKey(458771);
    B.PhysicalKeyboardKey_458772 = new A.PhysicalKeyboardKey(458772);
    B.PhysicalKeyboardKey_458773 = new A.PhysicalKeyboardKey(458773);
    B.PhysicalKeyboardKey_458774 = new A.PhysicalKeyboardKey(458774);
    B.PhysicalKeyboardKey_458775 = new A.PhysicalKeyboardKey(458775);
    B.PhysicalKeyboardKey_458776 = new A.PhysicalKeyboardKey(458776);
    B.PhysicalKeyboardKey_458777 = new A.PhysicalKeyboardKey(458777);
    B.PhysicalKeyboardKey_458778 = new A.PhysicalKeyboardKey(458778);
    B.PhysicalKeyboardKey_458779 = new A.PhysicalKeyboardKey(458779);
    B.PhysicalKeyboardKey_458780 = new A.PhysicalKeyboardKey(458780);
    B.PhysicalKeyboardKey_458781 = new A.PhysicalKeyboardKey(458781);
    B.PhysicalKeyboardKey_787101 = new A.PhysicalKeyboardKey(787101);
    B.PhysicalKeyboardKey_458896 = new A.PhysicalKeyboardKey(458896);
    B.PhysicalKeyboardKey_458897 = new A.PhysicalKeyboardKey(458897);
    B.PhysicalKeyboardKey_458898 = new A.PhysicalKeyboardKey(458898);
    B.PhysicalKeyboardKey_458899 = new A.PhysicalKeyboardKey(458899);
    B.PhysicalKeyboardKey_458900 = new A.PhysicalKeyboardKey(458900);
    B.PhysicalKeyboardKey_786836 = new A.PhysicalKeyboardKey(786836);
    B.PhysicalKeyboardKey_786834 = new A.PhysicalKeyboardKey(786834);
    B.PhysicalKeyboardKey_786891 = new A.PhysicalKeyboardKey(786891);
    B.PhysicalKeyboardKey_786871 = new A.PhysicalKeyboardKey(786871);
    B.PhysicalKeyboardKey_786830 = new A.PhysicalKeyboardKey(786830);
    B.PhysicalKeyboardKey_786829 = new A.PhysicalKeyboardKey(786829);
    B.PhysicalKeyboardKey_786847 = new A.PhysicalKeyboardKey(786847);
    B.PhysicalKeyboardKey_786855 = new A.PhysicalKeyboardKey(786855);
    B.PhysicalKeyboardKey_786838 = new A.PhysicalKeyboardKey(786838);
    B.PhysicalKeyboardKey_786862 = new A.PhysicalKeyboardKey(786862);
    B.PhysicalKeyboardKey_786826 = new A.PhysicalKeyboardKey(786826);
    B.PhysicalKeyboardKey_786572 = new A.PhysicalKeyboardKey(786572);
    B.PhysicalKeyboardKey_786865 = new A.PhysicalKeyboardKey(786865);
    B.PhysicalKeyboardKey_786822 = new A.PhysicalKeyboardKey(786822);
    B.PhysicalKeyboardKey_786820 = new A.PhysicalKeyboardKey(786820);
    B.PhysicalKeyboardKey_786846 = new A.PhysicalKeyboardKey(786846);
    B.PhysicalKeyboardKey_786844 = new A.PhysicalKeyboardKey(786844);
    B.PhysicalKeyboardKey_787083 = new A.PhysicalKeyboardKey(787083);
    B.PhysicalKeyboardKey_787081 = new A.PhysicalKeyboardKey(787081);
    B.PhysicalKeyboardKey_787084 = new A.PhysicalKeyboardKey(787084);
    B.PhysicalKeyboardKey_786611 = new A.PhysicalKeyboardKey(786611);
    B.PhysicalKeyboardKey_786563 = new A.PhysicalKeyboardKey(786563);
    B.PhysicalKeyboardKey_786609 = new A.PhysicalKeyboardKey(786609);
    B.PhysicalKeyboardKey_786608 = new A.PhysicalKeyboardKey(786608);
    B.PhysicalKeyboardKey_786637 = new A.PhysicalKeyboardKey(786637);
    B.PhysicalKeyboardKey_786610 = new A.PhysicalKeyboardKey(786610);
    B.PhysicalKeyboardKey_786612 = new A.PhysicalKeyboardKey(786612);
    B.PhysicalKeyboardKey_786819 = new A.PhysicalKeyboardKey(786819);
    B.PhysicalKeyboardKey_786615 = new A.PhysicalKeyboardKey(786615);
    B.PhysicalKeyboardKey_786613 = new A.PhysicalKeyboardKey(786613);
    B.PhysicalKeyboardKey_786614 = new A.PhysicalKeyboardKey(786614);
    B.PhysicalKeyboardKey_458979 = new A.PhysicalKeyboardKey(458979);
    B.PhysicalKeyboardKey_458983 = new A.PhysicalKeyboardKey(458983);
    B.PhysicalKeyboardKey_24 = new A.PhysicalKeyboardKey(24);
    B.PhysicalKeyboardKey_458797 = new A.PhysicalKeyboardKey(458797);
    B.PhysicalKeyboardKey_786945 = new A.PhysicalKeyboardKey(786945);
    B.PhysicalKeyboardKey_458891 = new A.PhysicalKeyboardKey(458891);
    B.PhysicalKeyboardKey_458835 = new A.PhysicalKeyboardKey(458835);
    B.PhysicalKeyboardKey_458850 = new A.PhysicalKeyboardKey(458850);
    B.PhysicalKeyboardKey_458841 = new A.PhysicalKeyboardKey(458841);
    B.PhysicalKeyboardKey_458842 = new A.PhysicalKeyboardKey(458842);
    B.PhysicalKeyboardKey_458843 = new A.PhysicalKeyboardKey(458843);
    B.PhysicalKeyboardKey_458844 = new A.PhysicalKeyboardKey(458844);
    B.PhysicalKeyboardKey_458845 = new A.PhysicalKeyboardKey(458845);
    B.PhysicalKeyboardKey_458846 = new A.PhysicalKeyboardKey(458846);
    B.PhysicalKeyboardKey_458847 = new A.PhysicalKeyboardKey(458847);
    B.PhysicalKeyboardKey_458848 = new A.PhysicalKeyboardKey(458848);
    B.PhysicalKeyboardKey_458849 = new A.PhysicalKeyboardKey(458849);
    B.PhysicalKeyboardKey_458839 = new A.PhysicalKeyboardKey(458839);
    B.PhysicalKeyboardKey_458939 = new A.PhysicalKeyboardKey(458939);
    B.PhysicalKeyboardKey_458968 = new A.PhysicalKeyboardKey(458968);
    B.PhysicalKeyboardKey_458969 = new A.PhysicalKeyboardKey(458969);
    B.PhysicalKeyboardKey_458885 = new A.PhysicalKeyboardKey(458885);
    B.PhysicalKeyboardKey_458851 = new A.PhysicalKeyboardKey(458851);
    B.PhysicalKeyboardKey_458836 = new A.PhysicalKeyboardKey(458836);
    B.PhysicalKeyboardKey_458840 = new A.PhysicalKeyboardKey(458840);
    B.PhysicalKeyboardKey_458855 = new A.PhysicalKeyboardKey(458855);
    B.PhysicalKeyboardKey_458963 = new A.PhysicalKeyboardKey(458963);
    B.PhysicalKeyboardKey_458962 = new A.PhysicalKeyboardKey(458962);
    B.PhysicalKeyboardKey_458961 = new A.PhysicalKeyboardKey(458961);
    B.PhysicalKeyboardKey_458960 = new A.PhysicalKeyboardKey(458960);
    B.PhysicalKeyboardKey_458964 = new A.PhysicalKeyboardKey(458964);
    B.PhysicalKeyboardKey_458837 = new A.PhysicalKeyboardKey(458837);
    B.PhysicalKeyboardKey_458934 = new A.PhysicalKeyboardKey(458934);
    B.PhysicalKeyboardKey_458935 = new A.PhysicalKeyboardKey(458935);
    B.PhysicalKeyboardKey_458967 = new A.PhysicalKeyboardKey(458967);
    B.PhysicalKeyboardKey_458838 = new A.PhysicalKeyboardKey(458838);
    B.PhysicalKeyboardKey_458868 = new A.PhysicalKeyboardKey(458868);
    B.PhysicalKeyboardKey_458830 = new A.PhysicalKeyboardKey(458830);
    B.PhysicalKeyboardKey_458827 = new A.PhysicalKeyboardKey(458827);
    B.PhysicalKeyboardKey_458877 = new A.PhysicalKeyboardKey(458877);
    B.PhysicalKeyboardKey_458824 = new A.PhysicalKeyboardKey(458824);
    B.PhysicalKeyboardKey_458807 = new A.PhysicalKeyboardKey(458807);
    B.PhysicalKeyboardKey_458854 = new A.PhysicalKeyboardKey(458854);
    B.PhysicalKeyboardKey_786952 = new A.PhysicalKeyboardKey(786952);
    B.PhysicalKeyboardKey_458822 = new A.PhysicalKeyboardKey(458822);
    B.PhysicalKeyboardKey_23 = new A.PhysicalKeyboardKey(23);
    B.PhysicalKeyboardKey_786573 = new A.PhysicalKeyboardKey(786573);
    B.PhysicalKeyboardKey_458915 = new A.PhysicalKeyboardKey(458915);
    B.PhysicalKeyboardKey_458804 = new A.PhysicalKeyboardKey(458804);
    B.PhysicalKeyboardKey_787065 = new A.PhysicalKeyboardKey(787065);
    B.PhysicalKeyboardKey_21 = new A.PhysicalKeyboardKey(21);
    B.PhysicalKeyboardKey_786951 = new A.PhysicalKeyboardKey(786951);
    B.PhysicalKeyboardKey_458823 = new A.PhysicalKeyboardKey(458823);
    B.PhysicalKeyboardKey_458871 = new A.PhysicalKeyboardKey(458871);
    B.PhysicalKeyboardKey_786850 = new A.PhysicalKeyboardKey(786850);
    B.PhysicalKeyboardKey_458803 = new A.PhysicalKeyboardKey(458803);
    B.PhysicalKeyboardKey_458977 = new A.PhysicalKeyboardKey(458977);
    B.PhysicalKeyboardKey_458981 = new A.PhysicalKeyboardKey(458981);
    B.PhysicalKeyboardKey_787103 = new A.PhysicalKeyboardKey(787103);
    B.PhysicalKeyboardKey_458808 = new A.PhysicalKeyboardKey(458808);
    B.PhysicalKeyboardKey_65666 = new A.PhysicalKeyboardKey(65666);
    B.PhysicalKeyboardKey_458796 = new A.PhysicalKeyboardKey(458796);
    B.PhysicalKeyboardKey_786639 = new A.PhysicalKeyboardKey(786639);
    B.PhysicalKeyboardKey_786859 = new A.PhysicalKeyboardKey(786859);
    B.PhysicalKeyboardKey_17 = new A.PhysicalKeyboardKey(17);
    B.PhysicalKeyboardKey_20 = new A.PhysicalKeyboardKey(20);
    B.PhysicalKeyboardKey_458795 = new A.PhysicalKeyboardKey(458795);
    B.PhysicalKeyboardKey_22 = new A.PhysicalKeyboardKey(22);
    B.PhysicalKeyboardKey_458874 = new A.PhysicalKeyboardKey(458874);
    B.PhysicalKeyboardKey_458753 = new A.PhysicalKeyboardKey(458753);
    B.PhysicalKeyboardKey_458755 = new A.PhysicalKeyboardKey(458755);
    B.PhysicalKeyboardKey_458754 = new A.PhysicalKeyboardKey(458754);
    B.PhysicalKeyboardKey_458752 = new A.PhysicalKeyboardKey(458752);
    B.PhysicalKeyboardKey_65667 = new A.PhysicalKeyboardKey(65667);
    B.PhysicalKeyboardKey_786989 = new A.PhysicalKeyboardKey(786989);
    B.PhysicalKeyboardKey_786990 = new A.PhysicalKeyboardKey(786990);
    B.PhysicalKeyboardKey_786994 = new A.PhysicalKeyboardKey(786994);
    B.Map_1k5Ax = new A.ConstantStringMap(269, {Abort: B.PhysicalKeyboardKey_458907, Again: B.PhysicalKeyboardKey_458873, AltLeft: B.PhysicalKeyboardKey_458978, AltRight: B.PhysicalKeyboardKey_458982, ArrowDown: B.PhysicalKeyboardKey_458833, ArrowLeft: B.PhysicalKeyboardKey_458832, ArrowRight: B.PhysicalKeyboardKey_458831, ArrowUp: B.PhysicalKeyboardKey_458834, AudioVolumeDown: B.PhysicalKeyboardKey_458881, AudioVolumeMute: B.PhysicalKeyboardKey_458879, AudioVolumeUp: B.PhysicalKeyboardKey_458880, Backquote: B.PhysicalKeyboardKey_458805, Backslash: B.PhysicalKeyboardKey_458801, Backspace: B.PhysicalKeyboardKey_458794, BassBoost: B.PhysicalKeyboardKey_786661, BracketLeft: B.PhysicalKeyboardKey_458799, BracketRight: B.PhysicalKeyboardKey_458800, BrightnessAuto: B.PhysicalKeyboardKey_786549, BrightnessDown: B.PhysicalKeyboardKey_786544, BrightnessMaximum: B.PhysicalKeyboardKey_786548, BrightnessMinimum: B.PhysicalKeyboardKey_786547, BrightnessToggle: B.PhysicalKeyboardKey_786546, BrightnessUp: B.PhysicalKeyboardKey_786543, BrowserBack: B.PhysicalKeyboardKey_786980, BrowserFavorites: B.PhysicalKeyboardKey_786986, BrowserForward: B.PhysicalKeyboardKey_786981, BrowserHome: B.PhysicalKeyboardKey_786979, BrowserRefresh: B.PhysicalKeyboardKey_786983, BrowserSearch: B.PhysicalKeyboardKey_786977, BrowserStop: B.PhysicalKeyboardKey_786982, CapsLock: B.PhysicalKeyboardKey_458809, ChannelDown: B.PhysicalKeyboardKey_786589, ChannelUp: B.PhysicalKeyboardKey_786588, Close: B.PhysicalKeyboardKey_786947, ClosedCaptionToggle: B.PhysicalKeyboardKey_786529, Comma: B.PhysicalKeyboardKey_458806, ContextMenu: B.PhysicalKeyboardKey_458853, ControlLeft: B.PhysicalKeyboardKey_458976, ControlRight: B.PhysicalKeyboardKey_458980, Convert: B.PhysicalKeyboardKey_458890, Copy: B.PhysicalKeyboardKey_458876, Cut: B.PhysicalKeyboardKey_458875, Delete: B.PhysicalKeyboardKey_458828, Digit0: B.PhysicalKeyboardKey_458791, Digit1: B.PhysicalKeyboardKey_458782, Digit2: B.PhysicalKeyboardKey_458783, Digit3: B.PhysicalKeyboardKey_458784, Digit4: B.PhysicalKeyboardKey_458785, Digit5: B.PhysicalKeyboardKey_458786, Digit6: B.PhysicalKeyboardKey_458787, Digit7: B.PhysicalKeyboardKey_458788, Digit8: B.PhysicalKeyboardKey_458789, Digit9: B.PhysicalKeyboardKey_458790, DisplayToggleIntExt: B.PhysicalKeyboardKey_65717, Eject: B.PhysicalKeyboardKey_786616, End: B.PhysicalKeyboardKey_458829, Enter: B.PhysicalKeyboardKey_458792, Equal: B.PhysicalKeyboardKey_458798, Escape: B.PhysicalKeyboardKey_458793, Exit: B.PhysicalKeyboardKey_786580, F1: B.PhysicalKeyboardKey_458810, F10: B.PhysicalKeyboardKey_458819, F11: B.PhysicalKeyboardKey_458820, F12: B.PhysicalKeyboardKey_458821, F13: B.PhysicalKeyboardKey_458856, F14: B.PhysicalKeyboardKey_458857, F15: B.PhysicalKeyboardKey_458858, F16: B.PhysicalKeyboardKey_458859, F17: B.PhysicalKeyboardKey_458860, F18: B.PhysicalKeyboardKey_458861, F19: B.PhysicalKeyboardKey_458862, F2: B.PhysicalKeyboardKey_458811, F20: B.PhysicalKeyboardKey_458863, F21: B.PhysicalKeyboardKey_458864, F22: B.PhysicalKeyboardKey_458865, F23: B.PhysicalKeyboardKey_458866, F24: B.PhysicalKeyboardKey_458867, F3: B.PhysicalKeyboardKey_458812, F4: B.PhysicalKeyboardKey_458813, F5: B.PhysicalKeyboardKey_458814, F6: B.PhysicalKeyboardKey_458815, F7: B.PhysicalKeyboardKey_458816, F8: B.PhysicalKeyboardKey_458817, F9: B.PhysicalKeyboardKey_458818, Find: B.PhysicalKeyboardKey_458878, Fn: B.PhysicalKeyboardKey_18, FnLock: B.PhysicalKeyboardKey_19, GameButton1: B.PhysicalKeyboardKey_392961, GameButton10: B.PhysicalKeyboardKey_392970, GameButton11: B.PhysicalKeyboardKey_392971, GameButton12: B.PhysicalKeyboardKey_392972, GameButton13: B.PhysicalKeyboardKey_392973, GameButton14: B.PhysicalKeyboardKey_392974, GameButton15: B.PhysicalKeyboardKey_392975, GameButton16: B.PhysicalKeyboardKey_392976, GameButton2: B.PhysicalKeyboardKey_392962, GameButton3: B.PhysicalKeyboardKey_392963, GameButton4: B.PhysicalKeyboardKey_392964, GameButton5: B.PhysicalKeyboardKey_392965, GameButton6: B.PhysicalKeyboardKey_392966, GameButton7: B.PhysicalKeyboardKey_392967, GameButton8: B.PhysicalKeyboardKey_392968, GameButton9: B.PhysicalKeyboardKey_392969, GameButtonA: B.PhysicalKeyboardKey_392977, GameButtonB: B.PhysicalKeyboardKey_392978, GameButtonC: B.PhysicalKeyboardKey_392979, GameButtonLeft1: B.PhysicalKeyboardKey_392980, GameButtonLeft2: B.PhysicalKeyboardKey_392981, GameButtonMode: B.PhysicalKeyboardKey_392982, GameButtonRight1: B.PhysicalKeyboardKey_392983, GameButtonRight2: B.PhysicalKeyboardKey_392984, GameButtonSelect: B.PhysicalKeyboardKey_392985, GameButtonStart: B.PhysicalKeyboardKey_392986, GameButtonThumbLeft: B.PhysicalKeyboardKey_392987, GameButtonThumbRight: B.PhysicalKeyboardKey_392988, GameButtonX: B.PhysicalKeyboardKey_392989, GameButtonY: B.PhysicalKeyboardKey_392990, GameButtonZ: B.PhysicalKeyboardKey_392991, Help: B.PhysicalKeyboardKey_458869, Home: B.PhysicalKeyboardKey_458826, Hyper: B.PhysicalKeyboardKey_16, Info: B.PhysicalKeyboardKey_786528, Insert: B.PhysicalKeyboardKey_458825, IntlBackslash: B.PhysicalKeyboardKey_458852, IntlRo: B.PhysicalKeyboardKey_458887, IntlYen: B.PhysicalKeyboardKey_458889, KanaMode: B.PhysicalKeyboardKey_458888, KbdIllumDown: B.PhysicalKeyboardKey_786554, KbdIllumUp: B.PhysicalKeyboardKey_786553, KeyA: B.PhysicalKeyboardKey_458756, KeyB: B.PhysicalKeyboardKey_458757, KeyC: B.PhysicalKeyboardKey_458758, KeyD: B.PhysicalKeyboardKey_458759, KeyE: B.PhysicalKeyboardKey_458760, KeyF: B.PhysicalKeyboardKey_458761, KeyG: B.PhysicalKeyboardKey_458762, KeyH: B.PhysicalKeyboardKey_458763, KeyI: B.PhysicalKeyboardKey_458764, KeyJ: B.PhysicalKeyboardKey_458765, KeyK: B.PhysicalKeyboardKey_458766, KeyL: B.PhysicalKeyboardKey_458767, KeyM: B.PhysicalKeyboardKey_458768, KeyN: B.PhysicalKeyboardKey_458769, KeyO: B.PhysicalKeyboardKey_458770, KeyP: B.PhysicalKeyboardKey_458771, KeyQ: B.PhysicalKeyboardKey_458772, KeyR: B.PhysicalKeyboardKey_458773, KeyS: B.PhysicalKeyboardKey_458774, KeyT: B.PhysicalKeyboardKey_458775, KeyU: B.PhysicalKeyboardKey_458776, KeyV: B.PhysicalKeyboardKey_458777, KeyW: B.PhysicalKeyboardKey_458778, KeyX: B.PhysicalKeyboardKey_458779, KeyY: B.PhysicalKeyboardKey_458780, KeyZ: B.PhysicalKeyboardKey_458781, KeyboardLayoutSelect: B.PhysicalKeyboardKey_787101, Lang1: B.PhysicalKeyboardKey_458896, Lang2: B.PhysicalKeyboardKey_458897, Lang3: B.PhysicalKeyboardKey_458898, Lang4: B.PhysicalKeyboardKey_458899, Lang5: B.PhysicalKeyboardKey_458900, LaunchApp1: B.PhysicalKeyboardKey_786836, LaunchApp2: B.PhysicalKeyboardKey_786834, LaunchAssistant: B.PhysicalKeyboardKey_786891, LaunchAudioBrowser: B.PhysicalKeyboardKey_786871, LaunchCalendar: B.PhysicalKeyboardKey_786830, LaunchContacts: B.PhysicalKeyboardKey_786829, LaunchControlPanel: B.PhysicalKeyboardKey_786847, LaunchDocuments: B.PhysicalKeyboardKey_786855, LaunchInternetBrowser: B.PhysicalKeyboardKey_786838, LaunchKeyboardLayout: B.PhysicalKeyboardKey_786862, LaunchMail: B.PhysicalKeyboardKey_786826, LaunchPhone: B.PhysicalKeyboardKey_786572, LaunchScreenSaver: B.PhysicalKeyboardKey_786865, LaunchSpreadsheet: B.PhysicalKeyboardKey_786822, LaunchWordProcessor: B.PhysicalKeyboardKey_786820, LockScreen: B.PhysicalKeyboardKey_786846, LogOff: B.PhysicalKeyboardKey_786844, MailForward: B.PhysicalKeyboardKey_787083, MailReply: B.PhysicalKeyboardKey_787081, MailSend: B.PhysicalKeyboardKey_787084, MediaFastForward: B.PhysicalKeyboardKey_786611, MediaLast: B.PhysicalKeyboardKey_786563, MediaPause: B.PhysicalKeyboardKey_786609, MediaPlay: B.PhysicalKeyboardKey_786608, MediaPlayPause: B.PhysicalKeyboardKey_786637, MediaRecord: B.PhysicalKeyboardKey_786610, MediaRewind: B.PhysicalKeyboardKey_786612, MediaSelect: B.PhysicalKeyboardKey_786819, MediaStop: B.PhysicalKeyboardKey_786615, MediaTrackNext: B.PhysicalKeyboardKey_786613, MediaTrackPrevious: B.PhysicalKeyboardKey_786614, MetaLeft: B.PhysicalKeyboardKey_458979, MetaRight: B.PhysicalKeyboardKey_458983, MicrophoneMuteToggle: B.PhysicalKeyboardKey_24, Minus: B.PhysicalKeyboardKey_458797, New: B.PhysicalKeyboardKey_786945, NonConvert: B.PhysicalKeyboardKey_458891, NumLock: B.PhysicalKeyboardKey_458835, Numpad0: B.PhysicalKeyboardKey_458850, Numpad1: B.PhysicalKeyboardKey_458841, Numpad2: B.PhysicalKeyboardKey_458842, Numpad3: B.PhysicalKeyboardKey_458843, Numpad4: B.PhysicalKeyboardKey_458844, Numpad5: B.PhysicalKeyboardKey_458845, Numpad6: B.PhysicalKeyboardKey_458846, Numpad7: B.PhysicalKeyboardKey_458847, Numpad8: B.PhysicalKeyboardKey_458848, Numpad9: B.PhysicalKeyboardKey_458849, NumpadAdd: B.PhysicalKeyboardKey_458839, NumpadBackspace: B.PhysicalKeyboardKey_458939, NumpadClear: B.PhysicalKeyboardKey_458968, NumpadClearEntry: B.PhysicalKeyboardKey_458969, NumpadComma: B.PhysicalKeyboardKey_458885, NumpadDecimal: B.PhysicalKeyboardKey_458851, NumpadDivide: B.PhysicalKeyboardKey_458836, NumpadEnter: B.PhysicalKeyboardKey_458840, NumpadEqual: B.PhysicalKeyboardKey_458855, NumpadMemoryAdd: B.PhysicalKeyboardKey_458963, NumpadMemoryClear: B.PhysicalKeyboardKey_458962, NumpadMemoryRecall: B.PhysicalKeyboardKey_458961, NumpadMemoryStore: B.PhysicalKeyboardKey_458960, NumpadMemorySubtract: B.PhysicalKeyboardKey_458964, NumpadMultiply: B.PhysicalKeyboardKey_458837, NumpadParenLeft: B.PhysicalKeyboardKey_458934, NumpadParenRight: B.PhysicalKeyboardKey_458935, NumpadSignChange: B.PhysicalKeyboardKey_458967, NumpadSubtract: B.PhysicalKeyboardKey_458838, Open: B.PhysicalKeyboardKey_458868, PageDown: B.PhysicalKeyboardKey_458830, PageUp: B.PhysicalKeyboardKey_458827, Paste: B.PhysicalKeyboardKey_458877, Pause: B.PhysicalKeyboardKey_458824, Period: B.PhysicalKeyboardKey_458807, Power: B.PhysicalKeyboardKey_458854, Print: B.PhysicalKeyboardKey_786952, PrintScreen: B.PhysicalKeyboardKey_458822, PrivacyScreenToggle: B.PhysicalKeyboardKey_23, ProgramGuide: B.PhysicalKeyboardKey_786573, Props: B.PhysicalKeyboardKey_458915, Quote: B.PhysicalKeyboardKey_458804, Redo: B.PhysicalKeyboardKey_787065, Resume: B.PhysicalKeyboardKey_21, Save: B.PhysicalKeyboardKey_786951, ScrollLock: B.PhysicalKeyboardKey_458823, Select: B.PhysicalKeyboardKey_458871, SelectTask: B.PhysicalKeyboardKey_786850, Semicolon: B.PhysicalKeyboardKey_458803, ShiftLeft: B.PhysicalKeyboardKey_458977, ShiftRight: B.PhysicalKeyboardKey_458981, ShowAllWindows: B.PhysicalKeyboardKey_787103, Slash: B.PhysicalKeyboardKey_458808, Sleep: B.PhysicalKeyboardKey_65666, Space: B.PhysicalKeyboardKey_458796, SpeechInputToggle: B.PhysicalKeyboardKey_786639, SpellCheck: B.PhysicalKeyboardKey_786859, Super: B.PhysicalKeyboardKey_17, Suspend: B.PhysicalKeyboardKey_20, Tab: B.PhysicalKeyboardKey_458795, Turbo: B.PhysicalKeyboardKey_22, Undo: B.PhysicalKeyboardKey_458874, UsbErrorRollOver: B.PhysicalKeyboardKey_458753, UsbErrorUndefined: B.PhysicalKeyboardKey_458755, UsbPostFail: B.PhysicalKeyboardKey_458754, UsbReserved: B.PhysicalKeyboardKey_458752, WakeUp: B.PhysicalKeyboardKey_65667, ZoomIn: B.PhysicalKeyboardKey_786989, ZoomOut: B.PhysicalKeyboardKey_786990, ZoomToggle: B.PhysicalKeyboardKey_786994}, B.List_1kC, A.findType("ConstantStringMap<String,PhysicalKeyboardKey>"));
    B.List_8TI = A._setArrayType(makeConstList(["*", "+", "-", ".", "/", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "Alt", "ArrowDown", "ArrowLeft", "ArrowRight", "ArrowUp", "Clear", "Control", "Delete", "End", "Enter", "Home", "Insert", "Meta", "PageDown", "PageUp", "Shift"]), type$.JSArray_String);
    B.LogicalKeyboardKey_42 = new A.LogicalKeyboardKey(42);
    B.LogicalKeyboardKey_8589935146 = new A.LogicalKeyboardKey(8589935146);
    B.List_MHC = A._setArrayType(makeConstList([B.LogicalKeyboardKey_42, null, null, B.LogicalKeyboardKey_8589935146]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_43 = new A.LogicalKeyboardKey(43);
    B.LogicalKeyboardKey_8589935147 = new A.LogicalKeyboardKey(8589935147);
    B.List_MHC0 = A._setArrayType(makeConstList([B.LogicalKeyboardKey_43, null, null, B.LogicalKeyboardKey_8589935147]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_45 = new A.LogicalKeyboardKey(45);
    B.LogicalKeyboardKey_8589935149 = new A.LogicalKeyboardKey(8589935149);
    B.List_MHC1 = A._setArrayType(makeConstList([B.LogicalKeyboardKey_45, null, null, B.LogicalKeyboardKey_8589935149]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_46 = new A.LogicalKeyboardKey(46);
    B.LogicalKeyboardKey_8589935150 = new A.LogicalKeyboardKey(8589935150);
    B.List_MHC2 = A._setArrayType(makeConstList([B.LogicalKeyboardKey_46, null, null, B.LogicalKeyboardKey_8589935150]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_47 = new A.LogicalKeyboardKey(47);
    B.LogicalKeyboardKey_8589935151 = new A.LogicalKeyboardKey(8589935151);
    B.List_MHC3 = A._setArrayType(makeConstList([B.LogicalKeyboardKey_47, null, null, B.LogicalKeyboardKey_8589935151]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_48 = new A.LogicalKeyboardKey(48);
    B.LogicalKeyboardKey_8589935152 = new A.LogicalKeyboardKey(8589935152);
    B.List_yHZ = A._setArrayType(makeConstList([B.LogicalKeyboardKey_48, null, null, B.LogicalKeyboardKey_8589935152]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_49 = new A.LogicalKeyboardKey(49);
    B.LogicalKeyboardKey_8589935153 = new A.LogicalKeyboardKey(8589935153);
    B.List_yHZ0 = A._setArrayType(makeConstList([B.LogicalKeyboardKey_49, null, null, B.LogicalKeyboardKey_8589935153]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_50 = new A.LogicalKeyboardKey(50);
    B.LogicalKeyboardKey_8589935154 = new A.LogicalKeyboardKey(8589935154);
    B.List_yHZ1 = A._setArrayType(makeConstList([B.LogicalKeyboardKey_50, null, null, B.LogicalKeyboardKey_8589935154]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_51 = new A.LogicalKeyboardKey(51);
    B.LogicalKeyboardKey_8589935155 = new A.LogicalKeyboardKey(8589935155);
    B.List_yHZ2 = A._setArrayType(makeConstList([B.LogicalKeyboardKey_51, null, null, B.LogicalKeyboardKey_8589935155]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_52 = new A.LogicalKeyboardKey(52);
    B.LogicalKeyboardKey_8589935156 = new A.LogicalKeyboardKey(8589935156);
    B.List_yHZ3 = A._setArrayType(makeConstList([B.LogicalKeyboardKey_52, null, null, B.LogicalKeyboardKey_8589935156]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_53 = new A.LogicalKeyboardKey(53);
    B.LogicalKeyboardKey_8589935157 = new A.LogicalKeyboardKey(8589935157);
    B.List_yHZ4 = A._setArrayType(makeConstList([B.LogicalKeyboardKey_53, null, null, B.LogicalKeyboardKey_8589935157]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_54 = new A.LogicalKeyboardKey(54);
    B.LogicalKeyboardKey_8589935158 = new A.LogicalKeyboardKey(8589935158);
    B.List_yHZ5 = A._setArrayType(makeConstList([B.LogicalKeyboardKey_54, null, null, B.LogicalKeyboardKey_8589935158]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_55 = new A.LogicalKeyboardKey(55);
    B.LogicalKeyboardKey_8589935159 = new A.LogicalKeyboardKey(8589935159);
    B.List_yHZ6 = A._setArrayType(makeConstList([B.LogicalKeyboardKey_55, null, null, B.LogicalKeyboardKey_8589935159]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_56 = new A.LogicalKeyboardKey(56);
    B.LogicalKeyboardKey_8589935160 = new A.LogicalKeyboardKey(8589935160);
    B.List_Sxn = A._setArrayType(makeConstList([B.LogicalKeyboardKey_56, null, null, B.LogicalKeyboardKey_8589935160]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_57 = new A.LogicalKeyboardKey(57);
    B.LogicalKeyboardKey_8589935161 = new A.LogicalKeyboardKey(8589935161);
    B.List_Sxn0 = A._setArrayType(makeConstList([B.LogicalKeyboardKey_57, null, null, B.LogicalKeyboardKey_8589935161]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_gzb = A._setArrayType(makeConstList([null, B.LogicalKeyboardKey_8589934852, B.LogicalKeyboardKey_8589934853, null]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_RsV = A._setArrayType(makeConstList([B.LogicalKeyboardKey_4294968065, null, null, B.LogicalKeyboardKey_8589935154]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_RsV0 = A._setArrayType(makeConstList([B.LogicalKeyboardKey_4294968066, null, null, B.LogicalKeyboardKey_8589935156]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_RsV1 = A._setArrayType(makeConstList([B.LogicalKeyboardKey_4294968067, null, null, B.LogicalKeyboardKey_8589935158]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_3Vk = A._setArrayType(makeConstList([B.LogicalKeyboardKey_4294968068, null, null, B.LogicalKeyboardKey_8589935160]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_6FR = A._setArrayType(makeConstList([B.LogicalKeyboardKey_4294968321, null, null, B.LogicalKeyboardKey_8589935157]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_gzb0 = A._setArrayType(makeConstList([null, B.LogicalKeyboardKey_8589934848, B.LogicalKeyboardKey_8589934849, null]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_IAQ = A._setArrayType(makeConstList([B.LogicalKeyboardKey_4294967423, null, null, B.LogicalKeyboardKey_8589935150]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_RsV2 = A._setArrayType(makeConstList([B.LogicalKeyboardKey_4294968069, null, null, B.LogicalKeyboardKey_8589935153]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.LogicalKeyboardKey_8589935117 = new A.LogicalKeyboardKey(8589935117);
    B.List_bnV = A._setArrayType(makeConstList([B.LogicalKeyboardKey_4294967309, null, null, B.LogicalKeyboardKey_8589935117]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_RsV3 = A._setArrayType(makeConstList([B.LogicalKeyboardKey_4294968070, null, null, B.LogicalKeyboardKey_8589935159]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_6FR0 = A._setArrayType(makeConstList([B.LogicalKeyboardKey_4294968327, null, null, B.LogicalKeyboardKey_8589935152]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_gzb1 = A._setArrayType(makeConstList([null, B.LogicalKeyboardKey_8589934854, B.LogicalKeyboardKey_8589934855, null]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_RsV4 = A._setArrayType(makeConstList([B.LogicalKeyboardKey_4294968071, null, null, B.LogicalKeyboardKey_8589935155]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_mDg = A._setArrayType(makeConstList([B.LogicalKeyboardKey_4294968072, null, null, B.LogicalKeyboardKey_8589935161]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.List_gzb2 = A._setArrayType(makeConstList([null, B.LogicalKeyboardKey_8589934850, B.LogicalKeyboardKey_8589934851, null]), type$.JSArray_nullable_LogicalKeyboardKey);
    B.Map_8TEJH = new A.ConstantStringMap(31, {"*": B.List_MHC, "+": B.List_MHC0, "-": B.List_MHC1, ".": B.List_MHC2, "/": B.List_MHC3, "0": B.List_yHZ, "1": B.List_yHZ0, "2": B.List_yHZ1, "3": B.List_yHZ2, "4": B.List_yHZ3, "5": B.List_yHZ4, "6": B.List_yHZ5, "7": B.List_yHZ6, "8": B.List_Sxn, "9": B.List_Sxn0, Alt: B.List_gzb, ArrowDown: B.List_RsV, ArrowLeft: B.List_RsV0, ArrowRight: B.List_RsV1, ArrowUp: B.List_3Vk, Clear: B.List_6FR, Control: B.List_gzb0, Delete: B.List_IAQ, End: B.List_RsV2, Enter: B.List_bnV, Home: B.List_RsV3, Insert: B.List_6FR0, Meta: B.List_gzb1, PageDown: B.List_RsV4, PageUp: B.List_mDg, Shift: B.List_gzb2}, B.List_8TI, A.findType("ConstantStringMap<String,List<LogicalKeyboardKey?>>"));
    B.List_42_null_null_8589935146 = A._setArrayType(makeConstList([42, null, null, 8589935146]), type$.JSArray_nullable_int);
    B.List_43_null_null_8589935147 = A._setArrayType(makeConstList([43, null, null, 8589935147]), type$.JSArray_nullable_int);
    B.List_45_null_null_8589935149 = A._setArrayType(makeConstList([45, null, null, 8589935149]), type$.JSArray_nullable_int);
    B.List_46_null_null_8589935150 = A._setArrayType(makeConstList([46, null, null, 8589935150]), type$.JSArray_nullable_int);
    B.List_47_null_null_8589935151 = A._setArrayType(makeConstList([47, null, null, 8589935151]), type$.JSArray_nullable_int);
    B.List_48_null_null_8589935152 = A._setArrayType(makeConstList([48, null, null, 8589935152]), type$.JSArray_nullable_int);
    B.List_49_null_null_8589935153 = A._setArrayType(makeConstList([49, null, null, 8589935153]), type$.JSArray_nullable_int);
    B.List_50_null_null_8589935154 = A._setArrayType(makeConstList([50, null, null, 8589935154]), type$.JSArray_nullable_int);
    B.List_51_null_null_8589935155 = A._setArrayType(makeConstList([51, null, null, 8589935155]), type$.JSArray_nullable_int);
    B.List_52_null_null_8589935156 = A._setArrayType(makeConstList([52, null, null, 8589935156]), type$.JSArray_nullable_int);
    B.List_53_null_null_8589935157 = A._setArrayType(makeConstList([53, null, null, 8589935157]), type$.JSArray_nullable_int);
    B.List_54_null_null_8589935158 = A._setArrayType(makeConstList([54, null, null, 8589935158]), type$.JSArray_nullable_int);
    B.List_55_null_null_8589935159 = A._setArrayType(makeConstList([55, null, null, 8589935159]), type$.JSArray_nullable_int);
    B.List_56_null_null_8589935160 = A._setArrayType(makeConstList([56, null, null, 8589935160]), type$.JSArray_nullable_int);
    B.List_57_null_null_8589935161 = A._setArrayType(makeConstList([57, null, null, 8589935161]), type$.JSArray_nullable_int);
    B.List_null_8589934852_8589934853_null = A._setArrayType(makeConstList([null, 8589934852, 8589934853, null]), type$.JSArray_nullable_int);
    B.List_4294968065_null_null_8589935154 = A._setArrayType(makeConstList([4294968065, null, null, 8589935154]), type$.JSArray_nullable_int);
    B.List_4294968066_null_null_8589935156 = A._setArrayType(makeConstList([4294968066, null, null, 8589935156]), type$.JSArray_nullable_int);
    B.List_4294968067_null_null_8589935158 = A._setArrayType(makeConstList([4294968067, null, null, 8589935158]), type$.JSArray_nullable_int);
    B.List_4294968068_null_null_8589935160 = A._setArrayType(makeConstList([4294968068, null, null, 8589935160]), type$.JSArray_nullable_int);
    B.List_4294968321_null_null_8589935157 = A._setArrayType(makeConstList([4294968321, null, null, 8589935157]), type$.JSArray_nullable_int);
    B.List_null_8589934848_8589934849_null = A._setArrayType(makeConstList([null, 8589934848, 8589934849, null]), type$.JSArray_nullable_int);
    B.List_4294967423_null_null_8589935150 = A._setArrayType(makeConstList([4294967423, null, null, 8589935150]), type$.JSArray_nullable_int);
    B.List_4294968069_null_null_8589935153 = A._setArrayType(makeConstList([4294968069, null, null, 8589935153]), type$.JSArray_nullable_int);
    B.List_4294967309_null_null_8589935117 = A._setArrayType(makeConstList([4294967309, null, null, 8589935117]), type$.JSArray_nullable_int);
    B.List_4294968070_null_null_8589935159 = A._setArrayType(makeConstList([4294968070, null, null, 8589935159]), type$.JSArray_nullable_int);
    B.List_4294968327_null_null_8589935152 = A._setArrayType(makeConstList([4294968327, null, null, 8589935152]), type$.JSArray_nullable_int);
    B.List_null_8589934854_8589934855_null = A._setArrayType(makeConstList([null, 8589934854, 8589934855, null]), type$.JSArray_nullable_int);
    B.List_4294968071_null_null_8589935155 = A._setArrayType(makeConstList([4294968071, null, null, 8589935155]), type$.JSArray_nullable_int);
    B.List_4294968072_null_null_8589935161 = A._setArrayType(makeConstList([4294968072, null, null, 8589935161]), type$.JSArray_nullable_int);
    B.List_null_8589934850_8589934851_null = A._setArrayType(makeConstList([null, 8589934850, 8589934851, null]), type$.JSArray_nullable_int);
    B.Map_8TmdZ = new A.ConstantStringMap(31, {"*": B.List_42_null_null_8589935146, "+": B.List_43_null_null_8589935147, "-": B.List_45_null_null_8589935149, ".": B.List_46_null_null_8589935150, "/": B.List_47_null_null_8589935151, "0": B.List_48_null_null_8589935152, "1": B.List_49_null_null_8589935153, "2": B.List_50_null_null_8589935154, "3": B.List_51_null_null_8589935155, "4": B.List_52_null_null_8589935156, "5": B.List_53_null_null_8589935157, "6": B.List_54_null_null_8589935158, "7": B.List_55_null_null_8589935159, "8": B.List_56_null_null_8589935160, "9": B.List_57_null_null_8589935161, Alt: B.List_null_8589934852_8589934853_null, ArrowDown: B.List_4294968065_null_null_8589935154, ArrowLeft: B.List_4294968066_null_null_8589935156, ArrowRight: B.List_4294968067_null_null_8589935158, ArrowUp: B.List_4294968068_null_null_8589935160, Clear: B.List_4294968321_null_null_8589935157, Control: B.List_null_8589934848_8589934849_null, Delete: B.List_4294967423_null_null_8589935150, End: B.List_4294968069_null_null_8589935153, Enter: B.List_4294967309_null_null_8589935117, Home: B.List_4294968070_null_null_8589935159, Insert: B.List_4294968327_null_null_8589935152, Meta: B.List_null_8589934854_8589934855_null, PageDown: B.List_4294968071_null_null_8589935155, PageUp: B.List_4294968072_null_null_8589935161, Shift: B.List_null_8589934850_8589934851_null}, B.List_8TI, A.findType("ConstantStringMap<String,List<int?>>"));
    B.List_mode = A._setArrayType(makeConstList(["mode"]), type$.JSArray_String);
    B.Map_9aZ6I = new A.ConstantStringMap(1, {mode: "basic"}, B.List_mode, type$.ConstantStringMap_String_String);
    B.Color_4294638330 = new A.Color(4294638330);
    B.Color_4294309365 = new A.Color(4294309365);
    B.Color_4293848814 = new A.Color(4293848814);
    B.Color_4292927712 = new A.Color(4292927712);
    B.Color_4292269782 = new A.Color(4292269782);
    B.Color_4290624957 = new A.Color(4290624957);
    B.Color_4288585374 = new A.Color(4288585374);
    B.Color_4285887861 = new A.Color(4285887861);
    B.Color_4284572001 = new A.Color(4284572001);
    B.Color_4282532418 = new A.Color(4282532418);
    B.Color_4280361249 = new A.Color(4280361249);
    B.Map_HFpTk = new A.GeneralConstantMap([50, B.Color_4294638330, 100, B.Color_4294309365, 200, B.Color_4293848814, 300, B.Color_4292927712, 350, B.Color_4292269782, 400, B.Color_4290624957, 500, B.Color_4288585374, 600, B.Color_4285887861, 700, B.Color_4284572001, 800, B.Color_4282532418, 850, B.Color_4281348144, 900, B.Color_4280361249], type$.GeneralConstantMap_int_Color);
    B.Color_4294962158 = new A.Color(4294962158);
    B.Color_4294954450 = new A.Color(4294954450);
    B.Color_4293892762 = new A.Color(4293892762);
    B.Color_4293227379 = new A.Color(4293227379);
    B.Color_4293874512 = new A.Color(4293874512);
    B.Color_4294198070 = new A.Color(4294198070);
    B.Color_4293212469 = new A.Color(4293212469);
    B.Color_4292030255 = new A.Color(4292030255);
    B.Color_4291176488 = new A.Color(4291176488);
    B.Color_4290190364 = new A.Color(4290190364);
    B.Map_JNc9P = new A.GeneralConstantMap([50, B.Color_4294962158, 100, B.Color_4294954450, 200, B.Color_4293892762, 300, B.Color_4293227379, 400, B.Color_4293874512, 500, B.Color_4294198070, 600, B.Color_4293212469, 700, B.Color_4292030255, 800, B.Color_4291176488, 900, B.Color_4290190364], type$.GeneralConstantMap_int_Color);
    B.Color_4293128957 = new A.Color(4293128957);
    B.Color_4290502395 = new A.Color(4290502395);
    B.Color_4287679225 = new A.Color(4287679225);
    B.Color_4284790262 = new A.Color(4284790262);
    B.Color_4282557941 = new A.Color(4282557941);
    B.Color_4280391411 = new A.Color(4280391411);
    B.Color_4280191205 = new A.Color(4280191205);
    B.Color_4279858898 = new A.Color(4279858898);
    B.Color_4279592384 = new A.Color(4279592384);
    B.Color_4279060385 = new A.Color(4279060385);
    B.Map_JNwaj = new A.GeneralConstantMap([50, B.Color_4293128957, 100, B.Color_4290502395, 200, B.Color_4287679225, 300, B.Color_4284790262, 400, B.Color_4282557941, 500, B.Color_4280391411, 600, B.Color_4280191205, 700, B.Color_4279858898, 800, B.Color_4279592384, 900, B.Color_4279060385], type$.GeneralConstantMap_int_Color);
    B.List_KPc = A._setArrayType(makeConstList(["Abort", "Again", "AltLeft", "AltRight", "ArrowDown", "ArrowLeft", "ArrowRight", "ArrowUp", "AudioVolumeDown", "AudioVolumeMute", "AudioVolumeUp", "Backquote", "Backslash", "Backspace", "BassBoost", "BracketLeft", "BracketRight", "BrightnessAuto", "BrightnessDown", "BrightnessMaximum", "BrightnessMinimum", "BrightnessToggle", "BrightnessUp", "BrowserBack", "BrowserFavorites", "BrowserForward", "BrowserHome", "BrowserRefresh", "BrowserSearch", "BrowserStop", "CapsLock", "ChannelDown", "ChannelUp", "Close", "ClosedCaptionToggle", "Comma", "ContextMenu", "ControlLeft", "ControlRight", "Convert", "Copy", "Cut", "Delete", "Digit0", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "DisplayToggleIntExt", "Eject", "End", "Enter", "Equal", "Escape", "Exit", "F1", "F10", "F11", "F12", "F13", "F14", "F15", "F16", "F17", "F18", "F19", "F2", "F20", "F21", "F22", "F23", "F24", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "Find", "Fn", "FnLock", "GameButton1", "GameButton10", "GameButton11", "GameButton12", "GameButton13", "GameButton14", "GameButton15", "GameButton16", "GameButton2", "GameButton3", "GameButton4", "GameButton5", "GameButton6", "GameButton7", "GameButton8", "GameButton9", "GameButtonA", "GameButtonB", "GameButtonC", "GameButtonLeft1", "GameButtonLeft2", "GameButtonMode", "GameButtonRight1", "GameButtonRight2", "GameButtonSelect", "GameButtonStart", "GameButtonThumbLeft", "GameButtonThumbRight", "GameButtonX", "GameButtonY", "GameButtonZ", "Help", "Home", "Hyper", "Info", "Insert", "IntlBackslash", "IntlRo", "IntlYen", "KanaMode", "KbdIllumDown", "KbdIllumUp", "KeyA", "KeyB", "KeyC", "KeyD", "KeyE", "KeyF", "KeyG", "KeyH", "KeyI", "KeyJ", "KeyK", "KeyL", "KeyM", "KeyN", "KeyO", "KeyP", "KeyQ", "KeyR", "KeyS", "KeyT", "KeyU", "KeyV", "KeyW", "KeyX", "KeyY", "KeyZ", "KeyboardLayoutSelect", "Lang1", "Lang2", "Lang3", "Lang4", "Lang5", "LaunchApp1", "LaunchApp2", "LaunchAssistant", "LaunchAudioBrowser", "LaunchCalendar", "LaunchContacts", "LaunchControlPanel", "LaunchDocuments", "LaunchInternetBrowser", "LaunchKeyboardLayout", "LaunchMail", "LaunchPhone", "LaunchScreenSaver", "LaunchSpreadsheet", "LaunchWordProcessor", "LockScreen", "LogOff", "MailForward", "MailReply", "MailSend", "MediaFastForward", "MediaLast", "MediaPause", "MediaPlay", "MediaPlayPause", "MediaRecord", "MediaRewind", "MediaSelect", "MediaStop", "MediaTrackNext", "MediaTrackPrevious", "MetaLeft", "MetaRight", "Minus", "New", "NonConvert", "NumLock", "Numpad0", "Numpad1", "Numpad2", "Numpad3", "Numpad4", "Numpad5", "Numpad6", "Numpad7", "Numpad8", "Numpad9", "NumpadAdd", "NumpadBackspace", "NumpadClear", "NumpadClearEntry", "NumpadComma", "NumpadDecimal", "NumpadDivide", "NumpadEnter", "NumpadEqual", "NumpadMemoryAdd", "NumpadMemoryClear", "NumpadMemoryRecall", "NumpadMemoryStore", "NumpadMemorySubtract", "NumpadMultiply", "NumpadParenLeft", "NumpadParenRight", "NumpadSignChange", "NumpadSubtract", "Open", "PageDown", "PageUp", "Paste", "Pause", "Period", "Power", "Print", "PrintScreen", "PrivacyScreenToggle", "ProgramGuide", "Props", "Quote", "Redo", "Resume", "Save", "ScrollLock", "Select", "SelectTask", "Semicolon", "ShiftLeft", "ShiftRight", "ShowAllWindows", "Slash", "Sleep", "Space", "SpeechInputToggle", "SpellCheck", "Super", "Suspend", "Tab", "Turbo", "Undo", "UsbErrorRollOver", "UsbErrorUndefined", "UsbPostFail", "UsbReserved", "WakeUp", "ZoomIn", "ZoomOut", "ZoomToggle"]), type$.JSArray_String);
    B.Map_KP6BJ = new A.ConstantStringMap(268, {Abort: 458907, Again: 458873, AltLeft: 458978, AltRight: 458982, ArrowDown: 458833, ArrowLeft: 458832, ArrowRight: 458831, ArrowUp: 458834, AudioVolumeDown: 458881, AudioVolumeMute: 458879, AudioVolumeUp: 458880, Backquote: 458805, Backslash: 458801, Backspace: 458794, BassBoost: 786661, BracketLeft: 458799, BracketRight: 458800, BrightnessAuto: 786549, BrightnessDown: 786544, BrightnessMaximum: 786548, BrightnessMinimum: 786547, BrightnessToggle: 786546, BrightnessUp: 786543, BrowserBack: 786980, BrowserFavorites: 786986, BrowserForward: 786981, BrowserHome: 786979, BrowserRefresh: 786983, BrowserSearch: 786977, BrowserStop: 786982, CapsLock: 458809, ChannelDown: 786589, ChannelUp: 786588, Close: 786947, ClosedCaptionToggle: 786529, Comma: 458806, ContextMenu: 458853, ControlLeft: 458976, ControlRight: 458980, Convert: 458890, Copy: 458876, Cut: 458875, Delete: 458828, Digit0: 458791, Digit1: 458782, Digit2: 458783, Digit3: 458784, Digit4: 458785, Digit5: 458786, Digit6: 458787, Digit7: 458788, Digit8: 458789, Digit9: 458790, DisplayToggleIntExt: 65717, Eject: 786616, End: 458829, Enter: 458792, Equal: 458798, Escape: 458793, Exit: 786580, F1: 458810, F10: 458819, F11: 458820, F12: 458821, F13: 458856, F14: 458857, F15: 458858, F16: 458859, F17: 458860, F18: 458861, F19: 458862, F2: 458811, F20: 458863, F21: 458864, F22: 458865, F23: 458866, F24: 458867, F3: 458812, F4: 458813, F5: 458814, F6: 458815, F7: 458816, F8: 458817, F9: 458818, Find: 458878, Fn: 18, FnLock: 19, GameButton1: 392961, GameButton10: 392970, GameButton11: 392971, GameButton12: 392972, GameButton13: 392973, GameButton14: 392974, GameButton15: 392975, GameButton16: 392976, GameButton2: 392962, GameButton3: 392963, GameButton4: 392964, GameButton5: 392965, GameButton6: 392966, GameButton7: 392967, GameButton8: 392968, GameButton9: 392969, GameButtonA: 392977, GameButtonB: 392978, GameButtonC: 392979, GameButtonLeft1: 392980, GameButtonLeft2: 392981, GameButtonMode: 392982, GameButtonRight1: 392983, GameButtonRight2: 392984, GameButtonSelect: 392985, GameButtonStart: 392986, GameButtonThumbLeft: 392987, GameButtonThumbRight: 392988, GameButtonX: 392989, GameButtonY: 392990, GameButtonZ: 392991, Help: 458869, Home: 458826, Hyper: 16, Info: 786528, Insert: 458825, IntlBackslash: 458852, IntlRo: 458887, IntlYen: 458889, KanaMode: 458888, KbdIllumDown: 786554, KbdIllumUp: 786553, KeyA: 458756, KeyB: 458757, KeyC: 458758, KeyD: 458759, KeyE: 458760, KeyF: 458761, KeyG: 458762, KeyH: 458763, KeyI: 458764, KeyJ: 458765, KeyK: 458766, KeyL: 458767, KeyM: 458768, KeyN: 458769, KeyO: 458770, KeyP: 458771, KeyQ: 458772, KeyR: 458773, KeyS: 458774, KeyT: 458775, KeyU: 458776, KeyV: 458777, KeyW: 458778, KeyX: 458779, KeyY: 458780, KeyZ: 458781, KeyboardLayoutSelect: 787101, Lang1: 458896, Lang2: 458897, Lang3: 458898, Lang4: 458899, Lang5: 458900, LaunchApp1: 786836, LaunchApp2: 786834, LaunchAssistant: 786891, LaunchAudioBrowser: 786871, LaunchCalendar: 786830, LaunchContacts: 786829, LaunchControlPanel: 786847, LaunchDocuments: 786855, LaunchInternetBrowser: 786838, LaunchKeyboardLayout: 786862, LaunchMail: 786826, LaunchPhone: 786572, LaunchScreenSaver: 786865, LaunchSpreadsheet: 786822, LaunchWordProcessor: 786820, LockScreen: 786846, LogOff: 786844, MailForward: 787083, MailReply: 787081, MailSend: 787084, MediaFastForward: 786611, MediaLast: 786563, MediaPause: 786609, MediaPlay: 786608, MediaPlayPause: 786637, MediaRecord: 786610, MediaRewind: 786612, MediaSelect: 786819, MediaStop: 786615, MediaTrackNext: 786613, MediaTrackPrevious: 786614, MetaLeft: 458979, MetaRight: 458983, Minus: 458797, New: 786945, NonConvert: 458891, NumLock: 458835, Numpad0: 458850, Numpad1: 458841, Numpad2: 458842, Numpad3: 458843, Numpad4: 458844, Numpad5: 458845, Numpad6: 458846, Numpad7: 458847, Numpad8: 458848, Numpad9: 458849, NumpadAdd: 458839, NumpadBackspace: 458939, NumpadClear: 458968, NumpadClearEntry: 458969, NumpadComma: 458885, NumpadDecimal: 458851, NumpadDivide: 458836, NumpadEnter: 458840, NumpadEqual: 458855, NumpadMemoryAdd: 458963, NumpadMemoryClear: 458962, NumpadMemoryRecall: 458961, NumpadMemoryStore: 458960, NumpadMemorySubtract: 458964, NumpadMultiply: 458837, NumpadParenLeft: 458934, NumpadParenRight: 458935, NumpadSignChange: 458967, NumpadSubtract: 458838, Open: 458868, PageDown: 458830, PageUp: 458827, Paste: 458877, Pause: 458824, Period: 458807, Power: 458854, Print: 786952, PrintScreen: 458822, PrivacyScreenToggle: 23, ProgramGuide: 786573, Props: 458915, Quote: 458804, Redo: 787065, Resume: 21, Save: 786951, ScrollLock: 458823, Select: 458871, SelectTask: 786850, Semicolon: 458803, ShiftLeft: 458977, ShiftRight: 458981, ShowAllWindows: 787103, Slash: 458808, Sleep: 65666, Space: 458796, SpeechInputToggle: 786639, SpellCheck: 786859, Super: 17, Suspend: 20, Tab: 458795, Turbo: 22, Undo: 458874, UsbErrorRollOver: 458753, UsbErrorUndefined: 458755, UsbPostFail: 458754, UsbReserved: 458752, WakeUp: 65667, ZoomIn: 786989, ZoomOut: 786990, ZoomToggle: 786994}, B.List_KPc, type$.ConstantStringMap_String_int);
    B.Map_Q5S3m = new A.GeneralConstantMap([16, B.PhysicalKeyboardKey_16, 17, B.PhysicalKeyboardKey_17, 18, B.PhysicalKeyboardKey_18, 19, B.PhysicalKeyboardKey_19, 20, B.PhysicalKeyboardKey_20, 21, B.PhysicalKeyboardKey_21, 22, B.PhysicalKeyboardKey_22, 23, B.PhysicalKeyboardKey_23, 24, B.PhysicalKeyboardKey_24, 65666, B.PhysicalKeyboardKey_65666, 65667, B.PhysicalKeyboardKey_65667, 65717, B.PhysicalKeyboardKey_65717, 392961, B.PhysicalKeyboardKey_392961, 392962, B.PhysicalKeyboardKey_392962, 392963, B.PhysicalKeyboardKey_392963, 392964, B.PhysicalKeyboardKey_392964, 392965, B.PhysicalKeyboardKey_392965, 392966, B.PhysicalKeyboardKey_392966, 392967, B.PhysicalKeyboardKey_392967, 392968, B.PhysicalKeyboardKey_392968, 392969, B.PhysicalKeyboardKey_392969, 392970, B.PhysicalKeyboardKey_392970, 392971, B.PhysicalKeyboardKey_392971, 392972, B.PhysicalKeyboardKey_392972, 392973, B.PhysicalKeyboardKey_392973, 392974, B.PhysicalKeyboardKey_392974, 392975, B.PhysicalKeyboardKey_392975, 392976, B.PhysicalKeyboardKey_392976, 392977, B.PhysicalKeyboardKey_392977, 392978, B.PhysicalKeyboardKey_392978, 392979, B.PhysicalKeyboardKey_392979, 392980, B.PhysicalKeyboardKey_392980, 392981, B.PhysicalKeyboardKey_392981, 392982, B.PhysicalKeyboardKey_392982, 392983, B.PhysicalKeyboardKey_392983, 392984, B.PhysicalKeyboardKey_392984, 392985, B.PhysicalKeyboardKey_392985, 392986, B.PhysicalKeyboardKey_392986, 392987, B.PhysicalKeyboardKey_392987, 392988, B.PhysicalKeyboardKey_392988, 392989, B.PhysicalKeyboardKey_392989, 392990, B.PhysicalKeyboardKey_392990, 392991, B.PhysicalKeyboardKey_392991, 458752, B.PhysicalKeyboardKey_458752, 458753, B.PhysicalKeyboardKey_458753, 458754, B.PhysicalKeyboardKey_458754, 458755, B.PhysicalKeyboardKey_458755, 458756, B.PhysicalKeyboardKey_458756, 458757, B.PhysicalKeyboardKey_458757, 458758, B.PhysicalKeyboardKey_458758, 458759, B.PhysicalKeyboardKey_458759, 458760, B.PhysicalKeyboardKey_458760, 458761, B.PhysicalKeyboardKey_458761, 458762, B.PhysicalKeyboardKey_458762, 458763, B.PhysicalKeyboardKey_458763, 458764, B.PhysicalKeyboardKey_458764, 458765, B.PhysicalKeyboardKey_458765, 458766, B.PhysicalKeyboardKey_458766, 458767, B.PhysicalKeyboardKey_458767, 458768, B.PhysicalKeyboardKey_458768, 458769, B.PhysicalKeyboardKey_458769, 458770, B.PhysicalKeyboardKey_458770, 458771, B.PhysicalKeyboardKey_458771, 458772, B.PhysicalKeyboardKey_458772, 458773, B.PhysicalKeyboardKey_458773, 458774, B.PhysicalKeyboardKey_458774, 458775, B.PhysicalKeyboardKey_458775, 458776, B.PhysicalKeyboardKey_458776, 458777, B.PhysicalKeyboardKey_458777, 458778, B.PhysicalKeyboardKey_458778, 458779, B.PhysicalKeyboardKey_458779, 458780, B.PhysicalKeyboardKey_458780, 458781, B.PhysicalKeyboardKey_458781, 458782, B.PhysicalKeyboardKey_458782, 458783, B.PhysicalKeyboardKey_458783, 458784, B.PhysicalKeyboardKey_458784, 458785, B.PhysicalKeyboardKey_458785, 458786, B.PhysicalKeyboardKey_458786, 458787, B.PhysicalKeyboardKey_458787, 458788, B.PhysicalKeyboardKey_458788, 458789, B.PhysicalKeyboardKey_458789, 458790, B.PhysicalKeyboardKey_458790, 458791, B.PhysicalKeyboardKey_458791, 458792, B.PhysicalKeyboardKey_458792, 458793, B.PhysicalKeyboardKey_458793, 458794, B.PhysicalKeyboardKey_458794, 458795, B.PhysicalKeyboardKey_458795, 458796, B.PhysicalKeyboardKey_458796, 458797, B.PhysicalKeyboardKey_458797, 458798, B.PhysicalKeyboardKey_458798, 458799, B.PhysicalKeyboardKey_458799, 458800, B.PhysicalKeyboardKey_458800, 458801, B.PhysicalKeyboardKey_458801, 458803, B.PhysicalKeyboardKey_458803, 458804, B.PhysicalKeyboardKey_458804, 458805, B.PhysicalKeyboardKey_458805, 458806, B.PhysicalKeyboardKey_458806, 458807, B.PhysicalKeyboardKey_458807, 458808, B.PhysicalKeyboardKey_458808, 458809, B.PhysicalKeyboardKey_458809, 458810, B.PhysicalKeyboardKey_458810, 458811, B.PhysicalKeyboardKey_458811, 458812, B.PhysicalKeyboardKey_458812, 458813, B.PhysicalKeyboardKey_458813, 458814, B.PhysicalKeyboardKey_458814, 458815, B.PhysicalKeyboardKey_458815, 458816, B.PhysicalKeyboardKey_458816, 458817, B.PhysicalKeyboardKey_458817, 458818, B.PhysicalKeyboardKey_458818, 458819, B.PhysicalKeyboardKey_458819, 458820, B.PhysicalKeyboardKey_458820, 458821, B.PhysicalKeyboardKey_458821, 458822, B.PhysicalKeyboardKey_458822, 458823, B.PhysicalKeyboardKey_458823, 458824, B.PhysicalKeyboardKey_458824, 458825, B.PhysicalKeyboardKey_458825, 458826, B.PhysicalKeyboardKey_458826, 458827, B.PhysicalKeyboardKey_458827, 458828, B.PhysicalKeyboardKey_458828, 458829, B.PhysicalKeyboardKey_458829, 458830, B.PhysicalKeyboardKey_458830, 458831, B.PhysicalKeyboardKey_458831, 458832, B.PhysicalKeyboardKey_458832, 458833, B.PhysicalKeyboardKey_458833, 458834, B.PhysicalKeyboardKey_458834, 458835, B.PhysicalKeyboardKey_458835, 458836, B.PhysicalKeyboardKey_458836, 458837, B.PhysicalKeyboardKey_458837, 458838, B.PhysicalKeyboardKey_458838, 458839, B.PhysicalKeyboardKey_458839, 458840, B.PhysicalKeyboardKey_458840, 458841, B.PhysicalKeyboardKey_458841, 458842, B.PhysicalKeyboardKey_458842, 458843, B.PhysicalKeyboardKey_458843, 458844, B.PhysicalKeyboardKey_458844, 458845, B.PhysicalKeyboardKey_458845, 458846, B.PhysicalKeyboardKey_458846, 458847, B.PhysicalKeyboardKey_458847, 458848, B.PhysicalKeyboardKey_458848, 458849, B.PhysicalKeyboardKey_458849, 458850, B.PhysicalKeyboardKey_458850, 458851, B.PhysicalKeyboardKey_458851, 458852, B.PhysicalKeyboardKey_458852, 458853, B.PhysicalKeyboardKey_458853, 458854, B.PhysicalKeyboardKey_458854, 458855, B.PhysicalKeyboardKey_458855, 458856, B.PhysicalKeyboardKey_458856, 458857, B.PhysicalKeyboardKey_458857, 458858, B.PhysicalKeyboardKey_458858, 458859, B.PhysicalKeyboardKey_458859, 458860, B.PhysicalKeyboardKey_458860, 458861, B.PhysicalKeyboardKey_458861, 458862, B.PhysicalKeyboardKey_458862, 458863, B.PhysicalKeyboardKey_458863, 458864, B.PhysicalKeyboardKey_458864, 458865, B.PhysicalKeyboardKey_458865, 458866, B.PhysicalKeyboardKey_458866, 458867, B.PhysicalKeyboardKey_458867, 458868, B.PhysicalKeyboardKey_458868, 458869, B.PhysicalKeyboardKey_458869, 458871, B.PhysicalKeyboardKey_458871, 458873, B.PhysicalKeyboardKey_458873, 458874, B.PhysicalKeyboardKey_458874, 458875, B.PhysicalKeyboardKey_458875, 458876, B.PhysicalKeyboardKey_458876, 458877, B.PhysicalKeyboardKey_458877, 458878, B.PhysicalKeyboardKey_458878, 458879, B.PhysicalKeyboardKey_458879, 458880, B.PhysicalKeyboardKey_458880, 458881, B.PhysicalKeyboardKey_458881, 458885, B.PhysicalKeyboardKey_458885, 458887, B.PhysicalKeyboardKey_458887, 458888, B.PhysicalKeyboardKey_458888, 458889, B.PhysicalKeyboardKey_458889, 458890, B.PhysicalKeyboardKey_458890, 458891, B.PhysicalKeyboardKey_458891, 458896, B.PhysicalKeyboardKey_458896, 458897, B.PhysicalKeyboardKey_458897, 458898, B.PhysicalKeyboardKey_458898, 458899, B.PhysicalKeyboardKey_458899, 458900, B.PhysicalKeyboardKey_458900, 458907, B.PhysicalKeyboardKey_458907, 458915, B.PhysicalKeyboardKey_458915, 458934, B.PhysicalKeyboardKey_458934, 458935, B.PhysicalKeyboardKey_458935, 458939, B.PhysicalKeyboardKey_458939, 458960, B.PhysicalKeyboardKey_458960, 458961, B.PhysicalKeyboardKey_458961, 458962, B.PhysicalKeyboardKey_458962, 458963, B.PhysicalKeyboardKey_458963, 458964, B.PhysicalKeyboardKey_458964, 458967, B.PhysicalKeyboardKey_458967, 458968, B.PhysicalKeyboardKey_458968, 458969, B.PhysicalKeyboardKey_458969, 458976, B.PhysicalKeyboardKey_458976, 458977, B.PhysicalKeyboardKey_458977, 458978, B.PhysicalKeyboardKey_458978, 458979, B.PhysicalKeyboardKey_458979, 458980, B.PhysicalKeyboardKey_458980, 458981, B.PhysicalKeyboardKey_458981, 458982, B.PhysicalKeyboardKey_458982, 458983, B.PhysicalKeyboardKey_458983, 786528, B.PhysicalKeyboardKey_786528, 786529, B.PhysicalKeyboardKey_786529, 786543, B.PhysicalKeyboardKey_786543, 786544, B.PhysicalKeyboardKey_786544, 786546, B.PhysicalKeyboardKey_786546, 786547, B.PhysicalKeyboardKey_786547, 786548, B.PhysicalKeyboardKey_786548, 786549, B.PhysicalKeyboardKey_786549, 786553, B.PhysicalKeyboardKey_786553, 786554, B.PhysicalKeyboardKey_786554, 786563, B.PhysicalKeyboardKey_786563, 786572, B.PhysicalKeyboardKey_786572, 786573, B.PhysicalKeyboardKey_786573, 786580, B.PhysicalKeyboardKey_786580, 786588, B.PhysicalKeyboardKey_786588, 786589, B.PhysicalKeyboardKey_786589, 786608, B.PhysicalKeyboardKey_786608, 786609, B.PhysicalKeyboardKey_786609, 786610, B.PhysicalKeyboardKey_786610, 786611, B.PhysicalKeyboardKey_786611, 786612, B.PhysicalKeyboardKey_786612, 786613, B.PhysicalKeyboardKey_786613, 786614, B.PhysicalKeyboardKey_786614, 786615, B.PhysicalKeyboardKey_786615, 786616, B.PhysicalKeyboardKey_786616, 786637, B.PhysicalKeyboardKey_786637, 786639, B.PhysicalKeyboardKey_786639, 786661, B.PhysicalKeyboardKey_786661, 786819, B.PhysicalKeyboardKey_786819, 786820, B.PhysicalKeyboardKey_786820, 786822, B.PhysicalKeyboardKey_786822, 786826, B.PhysicalKeyboardKey_786826, 786829, B.PhysicalKeyboardKey_786829, 786830, B.PhysicalKeyboardKey_786830, 786834, B.PhysicalKeyboardKey_786834, 786836, B.PhysicalKeyboardKey_786836, 786838, B.PhysicalKeyboardKey_786838, 786844, B.PhysicalKeyboardKey_786844, 786846, B.PhysicalKeyboardKey_786846, 786847, B.PhysicalKeyboardKey_786847, 786850, B.PhysicalKeyboardKey_786850, 786855, B.PhysicalKeyboardKey_786855, 786859, B.PhysicalKeyboardKey_786859, 786862, B.PhysicalKeyboardKey_786862, 786865, B.PhysicalKeyboardKey_786865, 786871, B.PhysicalKeyboardKey_786871, 786891, B.PhysicalKeyboardKey_786891, 786945, B.PhysicalKeyboardKey_786945, 786947, B.PhysicalKeyboardKey_786947, 786951, B.PhysicalKeyboardKey_786951, 786952, B.PhysicalKeyboardKey_786952, 786977, B.PhysicalKeyboardKey_786977, 786979, B.PhysicalKeyboardKey_786979, 786980, B.PhysicalKeyboardKey_786980, 786981, B.PhysicalKeyboardKey_786981, 786982, B.PhysicalKeyboardKey_786982, 786983, B.PhysicalKeyboardKey_786983, 786986, B.PhysicalKeyboardKey_786986, 786989, B.PhysicalKeyboardKey_786989, 786990, B.PhysicalKeyboardKey_786990, 786994, B.PhysicalKeyboardKey_786994, 787065, B.PhysicalKeyboardKey_787065, 787081, B.PhysicalKeyboardKey_787081, 787083, B.PhysicalKeyboardKey_787083, 787084, B.PhysicalKeyboardKey_787084, 787101, B.PhysicalKeyboardKey_787101, 787103, B.PhysicalKeyboardKey_787103], type$.GeneralConstantMap_int_PhysicalKeyboardKey);
    B.List_YCM = A._setArrayType(makeConstList(["in", "iw", "ji", "jw", "mo", "aam", "adp", "aue", "ayx", "bgm", "bjd", "ccq", "cjr", "cka", "cmk", "coy", "cqu", "drh", "drw", "gav", "gfx", "ggn", "gti", "guv", "hrr", "ibi", "ilw", "jeg", "kgc", "kgh", "koj", "krm", "ktr", "kvs", "kwq", "kxe", "kzj", "kzt", "lii", "lmm", "meg", "mst", "mwj", "myt", "nad", "ncp", "nnx", "nts", "oun", "pcr", "pmc", "pmu", "ppa", "ppr", "pry", "puz", "sca", "skk", "tdu", "thc", "thx", "tie", "tkk", "tlw", "tmp", "tne", "tnf", "tsf", "uok", "xba", "xia", "xkh", "xsj", "ybd", "yma", "ymt", "yos", "yuu"]), type$.JSArray_String);
    B.Map_YCOho = new A.ConstantStringMap(78, {in: "id", iw: "he", ji: "yi", jw: "jv", mo: "ro", aam: "aas", adp: "dz", aue: "ktz", ayx: "nun", bgm: "bcg", bjd: "drl", ccq: "rki", cjr: "mom", cka: "cmr", cmk: "xch", coy: "pij", cqu: "quh", drh: "khk", drw: "prs", gav: "dev", gfx: "vaj", ggn: "gvr", gti: "nyc", guv: "duz", hrr: "jal", ibi: "opa", ilw: "gal", jeg: "oyb", kgc: "tdf", kgh: "kml", koj: "kwv", krm: "bmf", ktr: "dtp", kvs: "gdj", kwq: "yam", kxe: "tvd", kzj: "dtp", kzt: "dtp", lii: "raq", lmm: "rmx", meg: "cir", mst: "mry", mwj: "vaj", myt: "mry", nad: "xny", ncp: "kdz", nnx: "ngv", nts: "pij", oun: "vaj", pcr: "adx", pmc: "huw", pmu: "phr", ppa: "bfy", ppr: "lcq", pry: "prt", puz: "pub", sca: "hle", skk: "oyb", tdu: "dtp", thc: "tpo", thx: "oyb", tie: "ras", tkk: "twm", tlw: "weo", tmp: "tyj", tne: "kak", tnf: "prs", tsf: "taj", uok: "ema", xba: "cax", xia: "acn", xkh: "waw", xsj: "suj", ybd: "rki", yma: "lrr", ymt: "mtm", yos: "zom", yuu: "yug"}, B.List_YCM, type$.ConstantStringMap_String_String);
    B.Map_eRea7 = new A.GeneralConstantMap([9, B.PhysicalKeyboardKey_458793, 10, B.PhysicalKeyboardKey_458782, 11, B.PhysicalKeyboardKey_458783, 12, B.PhysicalKeyboardKey_458784, 13, B.PhysicalKeyboardKey_458785, 14, B.PhysicalKeyboardKey_458786, 15, B.PhysicalKeyboardKey_458787, 16, B.PhysicalKeyboardKey_458788, 17, B.PhysicalKeyboardKey_458789, 18, B.PhysicalKeyboardKey_458790, 19, B.PhysicalKeyboardKey_458791, 20, B.PhysicalKeyboardKey_458797, 21, B.PhysicalKeyboardKey_458798, 22, B.PhysicalKeyboardKey_458794, 23, B.PhysicalKeyboardKey_458795, 24, B.PhysicalKeyboardKey_458772, 25, B.PhysicalKeyboardKey_458778, 26, B.PhysicalKeyboardKey_458760, 27, B.PhysicalKeyboardKey_458773, 28, B.PhysicalKeyboardKey_458775, 29, B.PhysicalKeyboardKey_458780, 30, B.PhysicalKeyboardKey_458776, 31, B.PhysicalKeyboardKey_458764, 32, B.PhysicalKeyboardKey_458770, 33, B.PhysicalKeyboardKey_458771, 34, B.PhysicalKeyboardKey_458799, 35, B.PhysicalKeyboardKey_458800, 36, B.PhysicalKeyboardKey_458792, 37, B.PhysicalKeyboardKey_458976, 38, B.PhysicalKeyboardKey_458756, 39, B.PhysicalKeyboardKey_458774, 40, B.PhysicalKeyboardKey_458759, 41, B.PhysicalKeyboardKey_458761, 42, B.PhysicalKeyboardKey_458762, 43, B.PhysicalKeyboardKey_458763, 44, B.PhysicalKeyboardKey_458765, 45, B.PhysicalKeyboardKey_458766, 46, B.PhysicalKeyboardKey_458767, 47, B.PhysicalKeyboardKey_458803, 48, B.PhysicalKeyboardKey_458804, 49, B.PhysicalKeyboardKey_458805, 50, B.PhysicalKeyboardKey_458977, 51, B.PhysicalKeyboardKey_458801, 52, B.PhysicalKeyboardKey_458781, 53, B.PhysicalKeyboardKey_458779, 54, B.PhysicalKeyboardKey_458758, 55, B.PhysicalKeyboardKey_458777, 56, B.PhysicalKeyboardKey_458757, 57, B.PhysicalKeyboardKey_458769, 58, B.PhysicalKeyboardKey_458768, 59, B.PhysicalKeyboardKey_458806, 60, B.PhysicalKeyboardKey_458807, 61, B.PhysicalKeyboardKey_458808, 62, B.PhysicalKeyboardKey_458981, 63, B.PhysicalKeyboardKey_458837, 64, B.PhysicalKeyboardKey_458978, 65, B.PhysicalKeyboardKey_458796, 66, B.PhysicalKeyboardKey_458809, 67, B.PhysicalKeyboardKey_458810, 68, B.PhysicalKeyboardKey_458811, 69, B.PhysicalKeyboardKey_458812, 70, B.PhysicalKeyboardKey_458813, 71, B.PhysicalKeyboardKey_458814, 72, B.PhysicalKeyboardKey_458815, 73, B.PhysicalKeyboardKey_458816, 74, B.PhysicalKeyboardKey_458817, 75, B.PhysicalKeyboardKey_458818, 76, B.PhysicalKeyboardKey_458819, 77, B.PhysicalKeyboardKey_458835, 78, B.PhysicalKeyboardKey_458823, 79, B.PhysicalKeyboardKey_458847, 80, B.PhysicalKeyboardKey_458848, 81, B.PhysicalKeyboardKey_458849, 82, B.PhysicalKeyboardKey_458838, 83, B.PhysicalKeyboardKey_458844, 84, B.PhysicalKeyboardKey_458845, 85, B.PhysicalKeyboardKey_458846, 86, B.PhysicalKeyboardKey_458839, 87, B.PhysicalKeyboardKey_458841, 88, B.PhysicalKeyboardKey_458842, 89, B.PhysicalKeyboardKey_458843, 90, B.PhysicalKeyboardKey_458850, 91, B.PhysicalKeyboardKey_458851, 93, B.PhysicalKeyboardKey_458900, 94, B.PhysicalKeyboardKey_458852, 95, B.PhysicalKeyboardKey_458820, 96, B.PhysicalKeyboardKey_458821, 97, B.PhysicalKeyboardKey_458887, 98, B.PhysicalKeyboardKey_458898, 99, B.PhysicalKeyboardKey_458899, 100, B.PhysicalKeyboardKey_458890, 101, B.PhysicalKeyboardKey_458888, 102, B.PhysicalKeyboardKey_458891, 104, B.PhysicalKeyboardKey_458840, 105, B.PhysicalKeyboardKey_458980, 106, B.PhysicalKeyboardKey_458836, 107, B.PhysicalKeyboardKey_458822, 108, B.PhysicalKeyboardKey_458982, 110, B.PhysicalKeyboardKey_458826, 111, B.PhysicalKeyboardKey_458834, 112, B.PhysicalKeyboardKey_458827, 113, B.PhysicalKeyboardKey_458832, 114, B.PhysicalKeyboardKey_458831, 115, B.PhysicalKeyboardKey_458829, 116, B.PhysicalKeyboardKey_458833, 117, B.PhysicalKeyboardKey_458830, 118, B.PhysicalKeyboardKey_458825, 119, B.PhysicalKeyboardKey_458828, 121, B.PhysicalKeyboardKey_458879, 122, B.PhysicalKeyboardKey_458881, 123, B.PhysicalKeyboardKey_458880, 124, B.PhysicalKeyboardKey_458854, 125, B.PhysicalKeyboardKey_458855, 126, B.PhysicalKeyboardKey_458967, 127, B.PhysicalKeyboardKey_458824, 128, B.PhysicalKeyboardKey_787103, 129, B.PhysicalKeyboardKey_458885, 130, B.PhysicalKeyboardKey_458896, 131, B.PhysicalKeyboardKey_458897, 132, B.PhysicalKeyboardKey_458889, 133, B.PhysicalKeyboardKey_458979, 134, B.PhysicalKeyboardKey_458983, 135, B.PhysicalKeyboardKey_458853, 136, B.PhysicalKeyboardKey_786982, 137, B.PhysicalKeyboardKey_458873, 139, B.PhysicalKeyboardKey_458874, 140, B.PhysicalKeyboardKey_458871, 141, B.PhysicalKeyboardKey_458876, 142, B.PhysicalKeyboardKey_458868, 143, B.PhysicalKeyboardKey_458877, 144, B.PhysicalKeyboardKey_458878, 145, B.PhysicalKeyboardKey_458875, 146, B.PhysicalKeyboardKey_458869, 148, B.PhysicalKeyboardKey_786834, 150, B.PhysicalKeyboardKey_65666, 151, B.PhysicalKeyboardKey_65667, 152, B.PhysicalKeyboardKey_786836, 158, B.PhysicalKeyboardKey_786838, 160, B.PhysicalKeyboardKey_786846, 163, B.PhysicalKeyboardKey_786826, 164, B.PhysicalKeyboardKey_786986, 166, B.PhysicalKeyboardKey_786980, 167, B.PhysicalKeyboardKey_786981, 169, B.PhysicalKeyboardKey_786616, 171, B.PhysicalKeyboardKey_786613, 172, B.PhysicalKeyboardKey_786637, 173, B.PhysicalKeyboardKey_786614, 174, B.PhysicalKeyboardKey_786615, 175, B.PhysicalKeyboardKey_786610, 176, B.PhysicalKeyboardKey_786612, 177, B.PhysicalKeyboardKey_786572, 179, B.PhysicalKeyboardKey_786819, 180, B.PhysicalKeyboardKey_786979, 181, B.PhysicalKeyboardKey_786983, 182, B.PhysicalKeyboardKey_786580, 187, B.PhysicalKeyboardKey_458934, 188, B.PhysicalKeyboardKey_458935, 189, B.PhysicalKeyboardKey_786945, 190, B.PhysicalKeyboardKey_787065, 191, B.PhysicalKeyboardKey_458856, 192, B.PhysicalKeyboardKey_458857, 193, B.PhysicalKeyboardKey_458858, 194, B.PhysicalKeyboardKey_458859, 195, B.PhysicalKeyboardKey_458860, 196, B.PhysicalKeyboardKey_458861, 197, B.PhysicalKeyboardKey_458862, 198, B.PhysicalKeyboardKey_458863, 199, B.PhysicalKeyboardKey_458864, 200, B.PhysicalKeyboardKey_458865, 201, B.PhysicalKeyboardKey_458866, 202, B.PhysicalKeyboardKey_458867, 209, B.PhysicalKeyboardKey_786609, 214, B.PhysicalKeyboardKey_786947, 215, B.PhysicalKeyboardKey_786608, 216, B.PhysicalKeyboardKey_786611, 217, B.PhysicalKeyboardKey_786661, 218, B.PhysicalKeyboardKey_786952, 225, B.PhysicalKeyboardKey_786977, 232, B.PhysicalKeyboardKey_786544, 233, B.PhysicalKeyboardKey_786543, 235, B.PhysicalKeyboardKey_65717, 237, B.PhysicalKeyboardKey_786554, 238, B.PhysicalKeyboardKey_786553, 239, B.PhysicalKeyboardKey_787084, 240, B.PhysicalKeyboardKey_787081, 241, B.PhysicalKeyboardKey_787083, 242, B.PhysicalKeyboardKey_786951, 243, B.PhysicalKeyboardKey_786855, 252, B.PhysicalKeyboardKey_786549, 256, B.PhysicalKeyboardKey_24, 366, B.PhysicalKeyboardKey_786528, 370, B.PhysicalKeyboardKey_786573, 378, B.PhysicalKeyboardKey_786529, 380, B.PhysicalKeyboardKey_786994, 382, B.PhysicalKeyboardKey_786862, 400, B.PhysicalKeyboardKey_786871, 405, B.PhysicalKeyboardKey_786830, 413, B.PhysicalKeyboardKey_786563, 418, B.PhysicalKeyboardKey_786588, 419, B.PhysicalKeyboardKey_786589, 426, B.PhysicalKeyboardKey_786989, 427, B.PhysicalKeyboardKey_786990, 429, B.PhysicalKeyboardKey_786820, 431, B.PhysicalKeyboardKey_786822, 437, B.PhysicalKeyboardKey_786829, 439, B.PhysicalKeyboardKey_786546, 440, B.PhysicalKeyboardKey_786859, 441, B.PhysicalKeyboardKey_786844, 587, B.PhysicalKeyboardKey_786847, 588, B.PhysicalKeyboardKey_786850, 589, B.PhysicalKeyboardKey_786865, 590, B.PhysicalKeyboardKey_786639, 591, B.PhysicalKeyboardKey_786891, 592, B.PhysicalKeyboardKey_787101, 600, B.PhysicalKeyboardKey_786547, 601, B.PhysicalKeyboardKey_786548, 641, B.PhysicalKeyboardKey_23], type$.GeneralConstantMap_int_PhysicalKeyboardKey);
    B.List_empty10 = A._setArrayType(makeConstList([]), type$.JSArray_PersistedSurface);
    B.Map_empty1 = new A.ConstantStringMap(0, {}, B.List_empty10, A.findType("ConstantStringMap<PersistedSurface,PersistedSurface>"));
    B.List_empty11 = A._setArrayType(makeConstList([]), A.findType("JSArray<Symbol0>"));
    B.Map_empty = new A.ConstantStringMap(0, {}, B.List_empty11, A.findType("ConstantStringMap<Symbol0,@>"));
    B.List_empty12 = A._setArrayType(makeConstList([]), A.findType("JSArray<Type>"));
    B.Map_empty0 = new A.ConstantStringMap(0, {}, B.List_empty12, A.findType("ConstantStringMap<Type,GestureRecognizer>"));
    B.List_gFn = A._setArrayType(makeConstList(["alias", "allScroll", "basic", "cell", "click", "contextMenu", "copy", "forbidden", "grab", "grabbing", "help", "move", "none", "noDrop", "precise", "progress", "text", "resizeColumn", "resizeDown", "resizeDownLeft", "resizeDownRight", "resizeLeft", "resizeLeftRight", "resizeRight", "resizeRow", "resizeUp", "resizeUpDown", "resizeUpLeft", "resizeUpRight", "resizeUpLeftDownRight", "resizeUpRightDownLeft", "verticalText", "wait", "zoomIn", "zoomOut"]), type$.JSArray_String);
    B.Map_gFKQ1 = new A.ConstantStringMap(35, {alias: "alias", allScroll: "all-scroll", basic: "default", cell: "cell", click: "pointer", contextMenu: "context-menu", copy: "copy", forbidden: "not-allowed", grab: "grab", grabbing: "grabbing", help: "help", move: "move", none: "none", noDrop: "no-drop", precise: "crosshair", progress: "progress", text: "text", resizeColumn: "col-resize", resizeDown: "s-resize", resizeDownLeft: "sw-resize", resizeDownRight: "se-resize", resizeLeft: "w-resize", resizeLeftRight: "ew-resize", resizeRight: "e-resize", resizeRow: "row-resize", resizeUp: "n-resize", resizeUpDown: "ns-resize", resizeUpLeft: "nw-resize", resizeUpRight: "ne-resize", resizeUpLeftDownRight: "nwse-resize", resizeUpRightDownLeft: "nesw-resize", verticalText: "vertical-text", wait: "wait", zoomIn: "zoom-in", zoomOut: "zoom-out"}, B.List_gFn, type$.ConstantStringMap_String_String);
    B.Color_4289200107 = new A.Color(4289200107);
    B.Color_4284809178 = new A.Color(4284809178);
    B.Color_4280150454 = new A.Color(4280150454);
    B.Color_4278239141 = new A.Color(4278239141);
    B.Map_iTYZn = new A.GeneralConstantMap([100, B.Color_4289200107, 200, B.Color_4284809178, 400, B.Color_4280150454, 700, B.Color_4278239141], type$.GeneralConstantMap_int_Color);
    B.LogicalKeyboardKey_32 = new A.LogicalKeyboardKey(32);
    B.LogicalKeyboardKey_33 = new A.LogicalKeyboardKey(33);
    B.LogicalKeyboardKey_34 = new A.LogicalKeyboardKey(34);
    B.LogicalKeyboardKey_35 = new A.LogicalKeyboardKey(35);
    B.LogicalKeyboardKey_36 = new A.LogicalKeyboardKey(36);
    B.LogicalKeyboardKey_37 = new A.LogicalKeyboardKey(37);
    B.LogicalKeyboardKey_38 = new A.LogicalKeyboardKey(38);
    B.LogicalKeyboardKey_39 = new A.LogicalKeyboardKey(39);
    B.LogicalKeyboardKey_40 = new A.LogicalKeyboardKey(40);
    B.LogicalKeyboardKey_41 = new A.LogicalKeyboardKey(41);
    B.LogicalKeyboardKey_44 = new A.LogicalKeyboardKey(44);
    B.LogicalKeyboardKey_58 = new A.LogicalKeyboardKey(58);
    B.LogicalKeyboardKey_59 = new A.LogicalKeyboardKey(59);
    B.LogicalKeyboardKey_60 = new A.LogicalKeyboardKey(60);
    B.LogicalKeyboardKey_61 = new A.LogicalKeyboardKey(61);
    B.LogicalKeyboardKey_62 = new A.LogicalKeyboardKey(62);
    B.LogicalKeyboardKey_63 = new A.LogicalKeyboardKey(63);
    B.LogicalKeyboardKey_64 = new A.LogicalKeyboardKey(64);
    B.LogicalKeyboardKey_91 = new A.LogicalKeyboardKey(91);
    B.LogicalKeyboardKey_92 = new A.LogicalKeyboardKey(92);
    B.LogicalKeyboardKey_93 = new A.LogicalKeyboardKey(93);
    B.LogicalKeyboardKey_94 = new A.LogicalKeyboardKey(94);
    B.LogicalKeyboardKey_95 = new A.LogicalKeyboardKey(95);
    B.LogicalKeyboardKey_96 = new A.LogicalKeyboardKey(96);
    B.LogicalKeyboardKey_97 = new A.LogicalKeyboardKey(97);
    B.LogicalKeyboardKey_98 = new A.LogicalKeyboardKey(98);
    B.LogicalKeyboardKey_99 = new A.LogicalKeyboardKey(99);
    B.LogicalKeyboardKey_100 = new A.LogicalKeyboardKey(100);
    B.LogicalKeyboardKey_101 = new A.LogicalKeyboardKey(101);
    B.LogicalKeyboardKey_102 = new A.LogicalKeyboardKey(102);
    B.LogicalKeyboardKey_103 = new A.LogicalKeyboardKey(103);
    B.LogicalKeyboardKey_104 = new A.LogicalKeyboardKey(104);
    B.LogicalKeyboardKey_105 = new A.LogicalKeyboardKey(105);
    B.LogicalKeyboardKey_106 = new A.LogicalKeyboardKey(106);
    B.LogicalKeyboardKey_107 = new A.LogicalKeyboardKey(107);
    B.LogicalKeyboardKey_108 = new A.LogicalKeyboardKey(108);
    B.LogicalKeyboardKey_109 = new A.LogicalKeyboardKey(109);
    B.LogicalKeyboardKey_110 = new A.LogicalKeyboardKey(110);
    B.LogicalKeyboardKey_111 = new A.LogicalKeyboardKey(111);
    B.LogicalKeyboardKey_112 = new A.LogicalKeyboardKey(112);
    B.LogicalKeyboardKey_113 = new A.LogicalKeyboardKey(113);
    B.LogicalKeyboardKey_114 = new A.LogicalKeyboardKey(114);
    B.LogicalKeyboardKey_115 = new A.LogicalKeyboardKey(115);
    B.LogicalKeyboardKey_116 = new A.LogicalKeyboardKey(116);
    B.LogicalKeyboardKey_117 = new A.LogicalKeyboardKey(117);
    B.LogicalKeyboardKey_118 = new A.LogicalKeyboardKey(118);
    B.LogicalKeyboardKey_119 = new A.LogicalKeyboardKey(119);
    B.LogicalKeyboardKey_120 = new A.LogicalKeyboardKey(120);
    B.LogicalKeyboardKey_121 = new A.LogicalKeyboardKey(121);
    B.LogicalKeyboardKey_122 = new A.LogicalKeyboardKey(122);
    B.LogicalKeyboardKey_123 = new A.LogicalKeyboardKey(123);
    B.LogicalKeyboardKey_124 = new A.LogicalKeyboardKey(124);
    B.LogicalKeyboardKey_125 = new A.LogicalKeyboardKey(125);
    B.LogicalKeyboardKey_126 = new A.LogicalKeyboardKey(126);
    B.LogicalKeyboardKey_8589934592 = new A.LogicalKeyboardKey(8589934592);
    B.LogicalKeyboardKey_8589934593 = new A.LogicalKeyboardKey(8589934593);
    B.LogicalKeyboardKey_8589934594 = new A.LogicalKeyboardKey(8589934594);
    B.LogicalKeyboardKey_8589934595 = new A.LogicalKeyboardKey(8589934595);
    B.LogicalKeyboardKey_8589934608 = new A.LogicalKeyboardKey(8589934608);
    B.LogicalKeyboardKey_8589934609 = new A.LogicalKeyboardKey(8589934609);
    B.LogicalKeyboardKey_8589934610 = new A.LogicalKeyboardKey(8589934610);
    B.LogicalKeyboardKey_8589934611 = new A.LogicalKeyboardKey(8589934611);
    B.LogicalKeyboardKey_8589934612 = new A.LogicalKeyboardKey(8589934612);
    B.LogicalKeyboardKey_8589934624 = new A.LogicalKeyboardKey(8589934624);
    B.LogicalKeyboardKey_8589934625 = new A.LogicalKeyboardKey(8589934625);
    B.LogicalKeyboardKey_8589934626 = new A.LogicalKeyboardKey(8589934626);
    B.LogicalKeyboardKey_8589935088 = new A.LogicalKeyboardKey(8589935088);
    B.LogicalKeyboardKey_8589935090 = new A.LogicalKeyboardKey(8589935090);
    B.LogicalKeyboardKey_8589935092 = new A.LogicalKeyboardKey(8589935092);
    B.LogicalKeyboardKey_8589935094 = new A.LogicalKeyboardKey(8589935094);
    B.LogicalKeyboardKey_8589935144 = new A.LogicalKeyboardKey(8589935144);
    B.LogicalKeyboardKey_8589935145 = new A.LogicalKeyboardKey(8589935145);
    B.LogicalKeyboardKey_8589935148 = new A.LogicalKeyboardKey(8589935148);
    B.LogicalKeyboardKey_8589935165 = new A.LogicalKeyboardKey(8589935165);
    B.LogicalKeyboardKey_8589935361 = new A.LogicalKeyboardKey(8589935361);
    B.LogicalKeyboardKey_8589935362 = new A.LogicalKeyboardKey(8589935362);
    B.LogicalKeyboardKey_8589935363 = new A.LogicalKeyboardKey(8589935363);
    B.LogicalKeyboardKey_8589935364 = new A.LogicalKeyboardKey(8589935364);
    B.LogicalKeyboardKey_8589935365 = new A.LogicalKeyboardKey(8589935365);
    B.LogicalKeyboardKey_8589935366 = new A.LogicalKeyboardKey(8589935366);
    B.LogicalKeyboardKey_8589935367 = new A.LogicalKeyboardKey(8589935367);
    B.LogicalKeyboardKey_8589935368 = new A.LogicalKeyboardKey(8589935368);
    B.LogicalKeyboardKey_8589935369 = new A.LogicalKeyboardKey(8589935369);
    B.LogicalKeyboardKey_8589935370 = new A.LogicalKeyboardKey(8589935370);
    B.LogicalKeyboardKey_8589935371 = new A.LogicalKeyboardKey(8589935371);
    B.LogicalKeyboardKey_8589935372 = new A.LogicalKeyboardKey(8589935372);
    B.LogicalKeyboardKey_8589935373 = new A.LogicalKeyboardKey(8589935373);
    B.LogicalKeyboardKey_8589935374 = new A.LogicalKeyboardKey(8589935374);
    B.LogicalKeyboardKey_8589935375 = new A.LogicalKeyboardKey(8589935375);
    B.LogicalKeyboardKey_8589935376 = new A.LogicalKeyboardKey(8589935376);
    B.LogicalKeyboardKey_8589935377 = new A.LogicalKeyboardKey(8589935377);
    B.LogicalKeyboardKey_8589935378 = new A.LogicalKeyboardKey(8589935378);
    B.LogicalKeyboardKey_8589935379 = new A.LogicalKeyboardKey(8589935379);
    B.LogicalKeyboardKey_8589935380 = new A.LogicalKeyboardKey(8589935380);
    B.LogicalKeyboardKey_8589935381 = new A.LogicalKeyboardKey(8589935381);
    B.LogicalKeyboardKey_8589935382 = new A.LogicalKeyboardKey(8589935382);
    B.LogicalKeyboardKey_8589935383 = new A.LogicalKeyboardKey(8589935383);
    B.LogicalKeyboardKey_8589935384 = new A.LogicalKeyboardKey(8589935384);
    B.LogicalKeyboardKey_8589935385 = new A.LogicalKeyboardKey(8589935385);
    B.LogicalKeyboardKey_8589935386 = new A.LogicalKeyboardKey(8589935386);
    B.LogicalKeyboardKey_8589935387 = new A.LogicalKeyboardKey(8589935387);
    B.LogicalKeyboardKey_8589935388 = new A.LogicalKeyboardKey(8589935388);
    B.LogicalKeyboardKey_8589935389 = new A.LogicalKeyboardKey(8589935389);
    B.LogicalKeyboardKey_8589935390 = new A.LogicalKeyboardKey(8589935390);
    B.LogicalKeyboardKey_8589935391 = new A.LogicalKeyboardKey(8589935391);
    B.Map_mUsBb = new A.GeneralConstantMap([32, B.LogicalKeyboardKey_32, 33, B.LogicalKeyboardKey_33, 34, B.LogicalKeyboardKey_34, 35, B.LogicalKeyboardKey_35, 36, B.LogicalKeyboardKey_36, 37, B.LogicalKeyboardKey_37, 38, B.LogicalKeyboardKey_38, 39, B.LogicalKeyboardKey_39, 40, B.LogicalKeyboardKey_40, 41, B.LogicalKeyboardKey_41, 42, B.LogicalKeyboardKey_42, 43, B.LogicalKeyboardKey_43, 44, B.LogicalKeyboardKey_44, 45, B.LogicalKeyboardKey_45, 46, B.LogicalKeyboardKey_46, 47, B.LogicalKeyboardKey_47, 48, B.LogicalKeyboardKey_48, 49, B.LogicalKeyboardKey_49, 50, B.LogicalKeyboardKey_50, 51, B.LogicalKeyboardKey_51, 52, B.LogicalKeyboardKey_52, 53, B.LogicalKeyboardKey_53, 54, B.LogicalKeyboardKey_54, 55, B.LogicalKeyboardKey_55, 56, B.LogicalKeyboardKey_56, 57, B.LogicalKeyboardKey_57, 58, B.LogicalKeyboardKey_58, 59, B.LogicalKeyboardKey_59, 60, B.LogicalKeyboardKey_60, 61, B.LogicalKeyboardKey_61, 62, B.LogicalKeyboardKey_62, 63, B.LogicalKeyboardKey_63, 64, B.LogicalKeyboardKey_64, 91, B.LogicalKeyboardKey_91, 92, B.LogicalKeyboardKey_92, 93, B.LogicalKeyboardKey_93, 94, B.LogicalKeyboardKey_94, 95, B.LogicalKeyboardKey_95, 96, B.LogicalKeyboardKey_96, 97, B.LogicalKeyboardKey_97, 98, B.LogicalKeyboardKey_98, 99, B.LogicalKeyboardKey_99, 100, B.LogicalKeyboardKey_100, 101, B.LogicalKeyboardKey_101, 102, B.LogicalKeyboardKey_102, 103, B.LogicalKeyboardKey_103, 104, B.LogicalKeyboardKey_104, 105, B.LogicalKeyboardKey_105, 106, B.LogicalKeyboardKey_106, 107, B.LogicalKeyboardKey_107, 108, B.LogicalKeyboardKey_108, 109, B.LogicalKeyboardKey_109, 110, B.LogicalKeyboardKey_110, 111, B.LogicalKeyboardKey_111, 112, B.LogicalKeyboardKey_112, 113, B.LogicalKeyboardKey_113, 114, B.LogicalKeyboardKey_114, 115, B.LogicalKeyboardKey_115, 116, B.LogicalKeyboardKey_116, 117, B.LogicalKeyboardKey_117, 118, B.LogicalKeyboardKey_118, 119, B.LogicalKeyboardKey_119, 120, B.LogicalKeyboardKey_120, 121, B.LogicalKeyboardKey_121, 122, B.LogicalKeyboardKey_122, 123, B.LogicalKeyboardKey_123, 124, B.LogicalKeyboardKey_124, 125, B.LogicalKeyboardKey_125, 126, B.LogicalKeyboardKey_126, 4294967297, B.LogicalKeyboardKey_4294967297, 4294967304, B.LogicalKeyboardKey_4294967304, 4294967305, B.LogicalKeyboardKey_4294967305, 4294967309, B.LogicalKeyboardKey_4294967309, 4294967323, B.LogicalKeyboardKey_4294967323, 4294967423, B.LogicalKeyboardKey_4294967423, 4294967553, B.LogicalKeyboardKey_4294967553, 4294967555, B.LogicalKeyboardKey_4294967555, 4294967556, B.LogicalKeyboardKey_4294967556, 4294967558, B.LogicalKeyboardKey_4294967558, 4294967559, B.LogicalKeyboardKey_4294967559, 4294967560, B.LogicalKeyboardKey_4294967560, 4294967562, B.LogicalKeyboardKey_4294967562, 4294967564, B.LogicalKeyboardKey_4294967564, 4294967566, B.LogicalKeyboardKey_4294967566, 4294967567, B.LogicalKeyboardKey_4294967567, 4294967568, B.LogicalKeyboardKey_4294967568, 4294967569, B.LogicalKeyboardKey_4294967569, 4294968065, B.LogicalKeyboardKey_4294968065, 4294968066, B.LogicalKeyboardKey_4294968066, 4294968067, B.LogicalKeyboardKey_4294968067, 4294968068, B.LogicalKeyboardKey_4294968068, 4294968069, B.LogicalKeyboardKey_4294968069, 4294968070, B.LogicalKeyboardKey_4294968070, 4294968071, B.LogicalKeyboardKey_4294968071, 4294968072, B.LogicalKeyboardKey_4294968072, 4294968321, B.LogicalKeyboardKey_4294968321, 4294968322, B.LogicalKeyboardKey_4294968322, 4294968323, B.LogicalKeyboardKey_4294968323, 4294968324, B.LogicalKeyboardKey_4294968324, 4294968325, B.LogicalKeyboardKey_4294968325, 4294968326, B.LogicalKeyboardKey_4294968326, 4294968327, B.LogicalKeyboardKey_4294968327, 4294968328, B.LogicalKeyboardKey_4294968328, 4294968329, B.LogicalKeyboardKey_4294968329, 4294968330, B.LogicalKeyboardKey_4294968330, 4294968577, B.LogicalKeyboardKey_4294968577, 4294968578, B.LogicalKeyboardKey_4294968578, 4294968579, B.LogicalKeyboardKey_4294968579, 4294968580, B.LogicalKeyboardKey_4294968580, 4294968581, B.LogicalKeyboardKey_4294968581, 4294968582, B.LogicalKeyboardKey_4294968582, 4294968583, B.LogicalKeyboardKey_4294968583, 4294968584, B.LogicalKeyboardKey_4294968584, 4294968585, B.LogicalKeyboardKey_4294968585, 4294968586, B.LogicalKeyboardKey_4294968586, 4294968587, B.LogicalKeyboardKey_4294968587, 4294968588, B.LogicalKeyboardKey_4294968588, 4294968589, B.LogicalKeyboardKey_4294968589, 4294968590, B.LogicalKeyboardKey_4294968590, 4294968833, B.LogicalKeyboardKey_4294968833, 4294968834, B.LogicalKeyboardKey_4294968834, 4294968835, B.LogicalKeyboardKey_4294968835, 4294968836, B.LogicalKeyboardKey_4294968836, 4294968837, B.LogicalKeyboardKey_4294968837, 4294968838, B.LogicalKeyboardKey_4294968838, 4294968839, B.LogicalKeyboardKey_4294968839, 4294968840, B.LogicalKeyboardKey_4294968840, 4294968841, B.LogicalKeyboardKey_4294968841, 4294968842, B.LogicalKeyboardKey_4294968842, 4294968843, B.LogicalKeyboardKey_4294968843, 4294969089, B.LogicalKeyboardKey_4294969089, 4294969090, B.LogicalKeyboardKey_4294969090, 4294969091, B.LogicalKeyboardKey_4294969091, 4294969092, B.LogicalKeyboardKey_4294969092, 4294969093, B.LogicalKeyboardKey_4294969093, 4294969094, B.LogicalKeyboardKey_4294969094, 4294969095, B.LogicalKeyboardKey_4294969095, 4294969096, B.LogicalKeyboardKey_4294969096, 4294969097, B.LogicalKeyboardKey_4294969097, 4294969098, B.LogicalKeyboardKey_4294969098, 4294969099, B.LogicalKeyboardKey_4294969099, 4294969100, B.LogicalKeyboardKey_4294969100, 4294969101, B.LogicalKeyboardKey_4294969101, 4294969102, B.LogicalKeyboardKey_4294969102, 4294969103, B.LogicalKeyboardKey_4294969103, 4294969104, B.LogicalKeyboardKey_4294969104, 4294969105, B.LogicalKeyboardKey_4294969105, 4294969106, B.LogicalKeyboardKey_4294969106, 4294969107, B.LogicalKeyboardKey_4294969107, 4294969108, B.LogicalKeyboardKey_4294969108, 4294969109, B.LogicalKeyboardKey_4294969109, 4294969110, B.LogicalKeyboardKey_4294969110, 4294969111, B.LogicalKeyboardKey_4294969111, 4294969112, B.LogicalKeyboardKey_4294969112, 4294969113, B.LogicalKeyboardKey_4294969113, 4294969114, B.LogicalKeyboardKey_4294969114, 4294969115, B.LogicalKeyboardKey_4294969115, 4294969116, B.LogicalKeyboardKey_4294969116, 4294969117, B.LogicalKeyboardKey_4294969117, 4294969345, B.LogicalKeyboardKey_4294969345, 4294969346, B.LogicalKeyboardKey_4294969346, 4294969347, B.LogicalKeyboardKey_4294969347, 4294969348, B.LogicalKeyboardKey_4294969348, 4294969349, B.LogicalKeyboardKey_4294969349, 4294969350, B.LogicalKeyboardKey_4294969350, 4294969351, B.LogicalKeyboardKey_4294969351, 4294969352, B.LogicalKeyboardKey_4294969352, 4294969353, B.LogicalKeyboardKey_4294969353, 4294969354, B.LogicalKeyboardKey_4294969354, 4294969355, B.LogicalKeyboardKey_4294969355, 4294969356, B.LogicalKeyboardKey_4294969356, 4294969357, B.LogicalKeyboardKey_4294969357, 4294969358, B.LogicalKeyboardKey_4294969358, 4294969359, B.LogicalKeyboardKey_4294969359, 4294969360, B.LogicalKeyboardKey_4294969360, 4294969361, B.LogicalKeyboardKey_4294969361, 4294969362, B.LogicalKeyboardKey_4294969362, 4294969363, B.LogicalKeyboardKey_4294969363, 4294969364, B.LogicalKeyboardKey_4294969364, 4294969365, B.LogicalKeyboardKey_4294969365, 4294969366, B.LogicalKeyboardKey_4294969366, 4294969367, B.LogicalKeyboardKey_4294969367, 4294969368, B.LogicalKeyboardKey_4294969368, 4294969601, B.LogicalKeyboardKey_4294969601, 4294969602, B.LogicalKeyboardKey_4294969602, 4294969603, B.LogicalKeyboardKey_4294969603, 4294969604, B.LogicalKeyboardKey_4294969604, 4294969605, B.LogicalKeyboardKey_4294969605, 4294969606, B.LogicalKeyboardKey_4294969606, 4294969607, B.LogicalKeyboardKey_4294969607, 4294969608, B.LogicalKeyboardKey_4294969608, 4294969857, B.LogicalKeyboardKey_4294969857, 4294969858, B.LogicalKeyboardKey_4294969858, 4294969859, B.LogicalKeyboardKey_4294969859, 4294969860, B.LogicalKeyboardKey_4294969860, 4294969861, B.LogicalKeyboardKey_4294969861, 4294969863, B.LogicalKeyboardKey_4294969863, 4294969864, B.LogicalKeyboardKey_4294969864, 4294969865, B.LogicalKeyboardKey_4294969865, 4294969866, B.LogicalKeyboardKey_4294969866, 4294969867, B.LogicalKeyboardKey_4294969867, 4294969868, B.LogicalKeyboardKey_4294969868, 4294969869, B.LogicalKeyboardKey_4294969869, 4294969870, B.LogicalKeyboardKey_4294969870, 4294969871, B.LogicalKeyboardKey_4294969871, 4294969872, B.LogicalKeyboardKey_4294969872, 4294969873, B.LogicalKeyboardKey_4294969873, 4294970113, B.LogicalKeyboardKey_4294970113, 4294970114, B.LogicalKeyboardKey_4294970114, 4294970115, B.LogicalKeyboardKey_4294970115, 4294970116, B.LogicalKeyboardKey_4294970116, 4294970117, B.LogicalKeyboardKey_4294970117, 4294970118, B.LogicalKeyboardKey_4294970118, 4294970119, B.LogicalKeyboardKey_4294970119, 4294970120, B.LogicalKeyboardKey_4294970120, 4294970121, B.LogicalKeyboardKey_4294970121, 4294970122, B.LogicalKeyboardKey_4294970122, 4294970123, B.LogicalKeyboardKey_4294970123, 4294970124, B.LogicalKeyboardKey_4294970124, 4294970125, B.LogicalKeyboardKey_4294970125, 4294970126, B.LogicalKeyboardKey_4294970126, 4294970127, B.LogicalKeyboardKey_4294970127, 4294970369, B.LogicalKeyboardKey_4294970369, 4294970370, B.LogicalKeyboardKey_4294970370, 4294970371, B.LogicalKeyboardKey_4294970371, 4294970372, B.LogicalKeyboardKey_4294970372, 4294970373, B.LogicalKeyboardKey_4294970373, 4294970374, B.LogicalKeyboardKey_4294970374, 4294970375, B.LogicalKeyboardKey_4294970375, 4294970625, B.LogicalKeyboardKey_4294970625, 4294970626, B.LogicalKeyboardKey_4294970626, 4294970627, B.LogicalKeyboardKey_4294970627, 4294970628, B.LogicalKeyboardKey_4294970628, 4294970629, B.LogicalKeyboardKey_4294970629, 4294970630, B.LogicalKeyboardKey_4294970630, 4294970631, B.LogicalKeyboardKey_4294970631, 4294970632, B.LogicalKeyboardKey_4294970632, 4294970633, B.LogicalKeyboardKey_4294970633, 4294970634, B.LogicalKeyboardKey_4294970634, 4294970635, B.LogicalKeyboardKey_4294970635, 4294970636, B.LogicalKeyboardKey_4294970636, 4294970637, B.LogicalKeyboardKey_4294970637, 4294970638, B.LogicalKeyboardKey_4294970638, 4294970639, B.LogicalKeyboardKey_4294970639, 4294970640, B.LogicalKeyboardKey_4294970640, 4294970641, B.LogicalKeyboardKey_4294970641, 4294970642, B.LogicalKeyboardKey_4294970642, 4294970643, B.LogicalKeyboardKey_4294970643, 4294970644, B.LogicalKeyboardKey_4294970644, 4294970645, B.LogicalKeyboardKey_4294970645, 4294970646, B.LogicalKeyboardKey_4294970646, 4294970647, B.LogicalKeyboardKey_4294970647, 4294970648, B.LogicalKeyboardKey_4294970648, 4294970649, B.LogicalKeyboardKey_4294970649, 4294970650, B.LogicalKeyboardKey_4294970650, 4294970651, B.LogicalKeyboardKey_4294970651, 4294970652, B.LogicalKeyboardKey_4294970652, 4294970653, B.LogicalKeyboardKey_4294970653, 4294970654, B.LogicalKeyboardKey_4294970654, 4294970655, B.LogicalKeyboardKey_4294970655, 4294970656, B.LogicalKeyboardKey_4294970656, 4294970657, B.LogicalKeyboardKey_4294970657, 4294970658, B.LogicalKeyboardKey_4294970658, 4294970659, B.LogicalKeyboardKey_4294970659, 4294970660, B.LogicalKeyboardKey_4294970660, 4294970661, B.LogicalKeyboardKey_4294970661, 4294970662, B.LogicalKeyboardKey_4294970662, 4294970663, B.LogicalKeyboardKey_4294970663, 4294970664, B.LogicalKeyboardKey_4294970664, 4294970665, B.LogicalKeyboardKey_4294970665, 4294970666, B.LogicalKeyboardKey_4294970666, 4294970667, B.LogicalKeyboardKey_4294970667, 4294970668, B.LogicalKeyboardKey_4294970668, 4294970669, B.LogicalKeyboardKey_4294970669, 4294970670, B.LogicalKeyboardKey_4294970670, 4294970671, B.LogicalKeyboardKey_4294970671, 4294970672, B.LogicalKeyboardKey_4294970672, 4294970673, B.LogicalKeyboardKey_4294970673, 4294970674, B.LogicalKeyboardKey_4294970674, 4294970675, B.LogicalKeyboardKey_4294970675, 4294970676, B.LogicalKeyboardKey_4294970676, 4294970677, B.LogicalKeyboardKey_4294970677, 4294970678, B.LogicalKeyboardKey_4294970678, 4294970679, B.LogicalKeyboardKey_4294970679, 4294970680, B.LogicalKeyboardKey_4294970680, 4294970681, B.LogicalKeyboardKey_4294970681, 4294970682, B.LogicalKeyboardKey_4294970682, 4294970683, B.LogicalKeyboardKey_4294970683, 4294970684, B.LogicalKeyboardKey_4294970684, 4294970685, B.LogicalKeyboardKey_4294970685, 4294970686, B.LogicalKeyboardKey_4294970686, 4294970687, B.LogicalKeyboardKey_4294970687, 4294970688, B.LogicalKeyboardKey_4294970688, 4294970689, B.LogicalKeyboardKey_4294970689, 4294970690, B.LogicalKeyboardKey_4294970690, 4294970691, B.LogicalKeyboardKey_4294970691, 4294970692, B.LogicalKeyboardKey_4294970692, 4294970693, B.LogicalKeyboardKey_4294970693, 4294970694, B.LogicalKeyboardKey_4294970694, 4294970695, B.LogicalKeyboardKey_4294970695, 4294970696, B.LogicalKeyboardKey_4294970696, 4294970697, B.LogicalKeyboardKey_4294970697, 4294970698, B.LogicalKeyboardKey_4294970698, 4294970699, B.LogicalKeyboardKey_4294970699, 4294970700, B.LogicalKeyboardKey_4294970700, 4294970701, B.LogicalKeyboardKey_4294970701, 4294970702, B.LogicalKeyboardKey_4294970702, 4294970703, B.LogicalKeyboardKey_4294970703, 4294970704, B.LogicalKeyboardKey_4294970704, 4294970705, B.LogicalKeyboardKey_4294970705, 4294970706, B.LogicalKeyboardKey_4294970706, 4294970707, B.LogicalKeyboardKey_4294970707, 4294970708, B.LogicalKeyboardKey_4294970708, 4294970709, B.LogicalKeyboardKey_4294970709, 4294970710, B.LogicalKeyboardKey_4294970710, 4294970711, B.LogicalKeyboardKey_4294970711, 4294970712, B.LogicalKeyboardKey_4294970712, 4294970713, B.LogicalKeyboardKey_4294970713, 4294970714, B.LogicalKeyboardKey_4294970714, 4294970715, B.LogicalKeyboardKey_4294970715, 4294970882, B.LogicalKeyboardKey_4294970882, 4294970884, B.LogicalKeyboardKey_4294970884, 4294970885, B.LogicalKeyboardKey_4294970885, 4294970886, B.LogicalKeyboardKey_4294970886, 4294970887, B.LogicalKeyboardKey_4294970887, 4294970888, B.LogicalKeyboardKey_4294970888, 4294970889, B.LogicalKeyboardKey_4294970889, 4294971137, B.LogicalKeyboardKey_4294971137, 4294971138, B.LogicalKeyboardKey_4294971138, 4294971393, B.LogicalKeyboardKey_4294971393, 4294971394, B.LogicalKeyboardKey_4294971394, 4294971395, B.LogicalKeyboardKey_4294971395, 4294971396, B.LogicalKeyboardKey_4294971396, 4294971397, B.LogicalKeyboardKey_4294971397, 4294971398, B.LogicalKeyboardKey_4294971398, 4294971399, B.LogicalKeyboardKey_4294971399, 4294971400, B.LogicalKeyboardKey_4294971400, 4294971401, B.LogicalKeyboardKey_4294971401, 4294971402, B.LogicalKeyboardKey_4294971402, 4294971403, B.LogicalKeyboardKey_4294971403, 4294971649, B.LogicalKeyboardKey_4294971649, 4294971650, B.LogicalKeyboardKey_4294971650, 4294971651, B.LogicalKeyboardKey_4294971651, 4294971652, B.LogicalKeyboardKey_4294971652, 4294971653, B.LogicalKeyboardKey_4294971653, 4294971654, B.LogicalKeyboardKey_4294971654, 4294971655, B.LogicalKeyboardKey_4294971655, 4294971656, B.LogicalKeyboardKey_4294971656, 4294971657, B.LogicalKeyboardKey_4294971657, 4294971658, B.LogicalKeyboardKey_4294971658, 4294971659, B.LogicalKeyboardKey_4294971659, 4294971660, B.LogicalKeyboardKey_4294971660, 4294971661, B.LogicalKeyboardKey_4294971661, 4294971662, B.LogicalKeyboardKey_4294971662, 4294971663, B.LogicalKeyboardKey_4294971663, 4294971664, B.LogicalKeyboardKey_4294971664, 4294971665, B.LogicalKeyboardKey_4294971665, 4294971666, B.LogicalKeyboardKey_4294971666, 4294971667, B.LogicalKeyboardKey_4294971667, 4294971668, B.LogicalKeyboardKey_4294971668, 4294971669, B.LogicalKeyboardKey_4294971669, 4294971670, B.LogicalKeyboardKey_4294971670, 4294971671, B.LogicalKeyboardKey_4294971671, 4294971672, B.LogicalKeyboardKey_4294971672, 4294971673, B.LogicalKeyboardKey_4294971673, 4294971674, B.LogicalKeyboardKey_4294971674, 4294971675, B.LogicalKeyboardKey_4294971675, 4294971905, B.LogicalKeyboardKey_4294971905, 4294971906, B.LogicalKeyboardKey_4294971906, 8589934592, B.LogicalKeyboardKey_8589934592, 8589934593, B.LogicalKeyboardKey_8589934593, 8589934594, B.LogicalKeyboardKey_8589934594, 8589934595, B.LogicalKeyboardKey_8589934595, 8589934608, B.LogicalKeyboardKey_8589934608, 8589934609, B.LogicalKeyboardKey_8589934609, 8589934610, B.LogicalKeyboardKey_8589934610, 8589934611, B.LogicalKeyboardKey_8589934611, 8589934612, B.LogicalKeyboardKey_8589934612, 8589934624, B.LogicalKeyboardKey_8589934624, 8589934625, B.LogicalKeyboardKey_8589934625, 8589934626, B.LogicalKeyboardKey_8589934626, 8589934848, B.LogicalKeyboardKey_8589934848, 8589934849, B.LogicalKeyboardKey_8589934849, 8589934850, B.LogicalKeyboardKey_8589934850, 8589934851, B.LogicalKeyboardKey_8589934851, 8589934852, B.LogicalKeyboardKey_8589934852, 8589934853, B.LogicalKeyboardKey_8589934853, 8589934854, B.LogicalKeyboardKey_8589934854, 8589934855, B.LogicalKeyboardKey_8589934855, 8589935088, B.LogicalKeyboardKey_8589935088, 8589935090, B.LogicalKeyboardKey_8589935090, 8589935092, B.LogicalKeyboardKey_8589935092, 8589935094, B.LogicalKeyboardKey_8589935094, 8589935117, B.LogicalKeyboardKey_8589935117, 8589935144, B.LogicalKeyboardKey_8589935144, 8589935145, B.LogicalKeyboardKey_8589935145, 8589935146, B.LogicalKeyboardKey_8589935146, 8589935147, B.LogicalKeyboardKey_8589935147, 8589935148, B.LogicalKeyboardKey_8589935148, 8589935149, B.LogicalKeyboardKey_8589935149, 8589935150, B.LogicalKeyboardKey_8589935150, 8589935151, B.LogicalKeyboardKey_8589935151, 8589935152, B.LogicalKeyboardKey_8589935152, 8589935153, B.LogicalKeyboardKey_8589935153, 8589935154, B.LogicalKeyboardKey_8589935154, 8589935155, B.LogicalKeyboardKey_8589935155, 8589935156, B.LogicalKeyboardKey_8589935156, 8589935157, B.LogicalKeyboardKey_8589935157, 8589935158, B.LogicalKeyboardKey_8589935158, 8589935159, B.LogicalKeyboardKey_8589935159, 8589935160, B.LogicalKeyboardKey_8589935160, 8589935161, B.LogicalKeyboardKey_8589935161, 8589935165, B.LogicalKeyboardKey_8589935165, 8589935361, B.LogicalKeyboardKey_8589935361, 8589935362, B.LogicalKeyboardKey_8589935362, 8589935363, B.LogicalKeyboardKey_8589935363, 8589935364, B.LogicalKeyboardKey_8589935364, 8589935365, B.LogicalKeyboardKey_8589935365, 8589935366, B.LogicalKeyboardKey_8589935366, 8589935367, B.LogicalKeyboardKey_8589935367, 8589935368, B.LogicalKeyboardKey_8589935368, 8589935369, B.LogicalKeyboardKey_8589935369, 8589935370, B.LogicalKeyboardKey_8589935370, 8589935371, B.LogicalKeyboardKey_8589935371, 8589935372, B.LogicalKeyboardKey_8589935372, 8589935373, B.LogicalKeyboardKey_8589935373, 8589935374, B.LogicalKeyboardKey_8589935374, 8589935375, B.LogicalKeyboardKey_8589935375, 8589935376, B.LogicalKeyboardKey_8589935376, 8589935377, B.LogicalKeyboardKey_8589935377, 8589935378, B.LogicalKeyboardKey_8589935378, 8589935379, B.LogicalKeyboardKey_8589935379, 8589935380, B.LogicalKeyboardKey_8589935380, 8589935381, B.LogicalKeyboardKey_8589935381, 8589935382, B.LogicalKeyboardKey_8589935382, 8589935383, B.LogicalKeyboardKey_8589935383, 8589935384, B.LogicalKeyboardKey_8589935384, 8589935385, B.LogicalKeyboardKey_8589935385, 8589935386, B.LogicalKeyboardKey_8589935386, 8589935387, B.LogicalKeyboardKey_8589935387, 8589935388, B.LogicalKeyboardKey_8589935388, 8589935389, B.LogicalKeyboardKey_8589935389, 8589935390, B.LogicalKeyboardKey_8589935390, 8589935391, B.LogicalKeyboardKey_8589935391], A.findType("GeneralConstantMap<int,LogicalKeyboardKey>"));
    B.Map_yXAeS = new A.GeneralConstantMap([0, "FontWeight.w100", 1, "FontWeight.w200", 2, "FontWeight.w300", 3, "FontWeight.w400", 4, "FontWeight.w500", 5, "FontWeight.w600", 6, "FontWeight.w700", 7, "FontWeight.w800", 8, "FontWeight.w900"], A.findType("GeneralConstantMap<int,String>"));
    B.MaterialColor_Map_JNwaj_4280391411 = new A.MaterialColor(B.Map_JNwaj, 4280391411);
    B.MaterialState_0 = new A.MaterialState(0, "hovered");
    B.MaterialState_1 = new A.MaterialState(1, "focused");
    B.MaterialState_6 = new A.MaterialState(6, "disabled");
    B.MaterialTapTargetSize_0 = new A.MaterialTapTargetSize(0, "padded");
    B.MaterialTapTargetSize_1 = new A.MaterialTapTargetSize(1, "shrinkWrap");
    B.MaterialType_0 = new A.MaterialType(0, "canvas");
    B.MethodCall_popRoute_null = new A.MethodCall("popRoute", null);
    B.C_StandardMethodCodec0 = new A.StandardMethodCodec0();
    B.MethodChannel_Gpa = new A.MethodChannel("flutter/service_worker", B.C_StandardMethodCodec0);
    B.MutatorType_0 = new A.MutatorType(0, "clipRect");
    B.MutatorType_2 = new A.MutatorType(2, "clipPath");
    B.MutatorType_3 = new A.MutatorType(3, "transform");
    B.NavigationMode_0 = new A.NavigationMode(0, "traditional");
    B.Offset_0_0 = new A.Offset(0, 0);
    B.OperatingSystem_0 = new A.OperatingSystem(0, "iOs");
    B.OperatingSystem_1 = new A.OperatingSystem(1, "android");
    B.OperatingSystem_2 = new A.OperatingSystem(2, "linux");
    B.OperatingSystem_3 = new A.OperatingSystem(3, "windows");
    B.OperatingSystem_4 = new A.OperatingSystem(4, "macOs");
    B.OperatingSystem_5 = new A.OperatingSystem(5, "unknown");
    B.C_JSONMethodCodec0 = new A.JSONMethodCodec0();
    B.OptionalMethodChannel_cWd = new A.OptionalMethodChannel("flutter/platform", B.C_JSONMethodCodec0);
    B.OptionalMethodChannel_fgL = new A.OptionalMethodChannel("flutter/restoration", B.C_StandardMethodCodec0);
    B.OptionalMethodChannel_meQ = new A.OptionalMethodChannel("flutter/mousecursor", B.C_StandardMethodCodec0);
    B.OptionalMethodChannel_urv = new A.OptionalMethodChannel("flutter/navigation", B.C_JSONMethodCodec0);
    B.PaintingStyle_0 = new A.PaintingStyle(0, "fill");
    B.PaintingStyle_1 = new A.PaintingStyle(1, "stroke");
    B.PathFillType_0 = new A.PathFillType(0, "nonZero");
    B.PathFillType_1 = new A.PathFillType(1, "evenOdd");
    B.PersistedSurfaceState_0 = new A.PersistedSurfaceState(0, "created");
    B.PersistedSurfaceState_1 = new A.PersistedSurfaceState(1, "active");
    B.PersistedSurfaceState_2 = new A.PersistedSurfaceState(2, "pendingRetention");
    B.PersistedSurfaceState_3 = new A.PersistedSurfaceState(3, "pendingUpdate");
    B.PersistedSurfaceState_4 = new A.PersistedSurfaceState(4, "released");
    B.PlaceholderAlignment_0 = new A.PlaceholderAlignment(0, "baseline");
    B.PlaceholderAlignment_1 = new A.PlaceholderAlignment(1, "aboveBaseline");
    B.PlaceholderAlignment_2 = new A.PlaceholderAlignment(2, "belowBaseline");
    B.PlaceholderAlignment_3 = new A.PlaceholderAlignment(3, "top");
    B.PlaceholderAlignment_4 = new A.PlaceholderAlignment(4, "bottom");
    B.PlaceholderAlignment_5 = new A.PlaceholderAlignment(5, "middle");
    B.Size_0_0 = new A.Size(0, 0);
    B.PlaceholderDimensions_Size_0_0_null = new A.PlaceholderDimensions(B.Size_0_0, null);
    B.PointerChange_0 = new A.PointerChange(0, "cancel");
    B.PointerChange_1 = new A.PointerChange(1, "add");
    B.PointerChange_2 = new A.PointerChange(2, "remove");
    B.PointerChange_3 = new A.PointerChange(3, "hover");
    B.PointerChange_4 = new A.PointerChange(4, "down");
    B.PointerChange_5 = new A.PointerChange(5, "move");
    B.PointerChange_6 = new A.PointerChange(6, "up");
    B.PointerDeviceKind_0 = new A.PointerDeviceKind(0, "touch");
    B.PointerDeviceKind_1 = new A.PointerDeviceKind(1, "mouse");
    B.PointerDeviceKind_2 = new A.PointerDeviceKind(2, "stylus");
    B.PointerDeviceKind_4 = new A.PointerDeviceKind(4, "unknown");
    B.PointerSignalKind_0 = new A.PointerSignalKind(0, "none");
    B.PointerSignalKind_1 = new A.PointerSignalKind(1, "scroll");
    B.PointerSignalKind_2 = new A.PointerSignalKind(2, "unknown");
    B.Rect_aha = new A.Rect(-1000000000, -1000000000, 1000000000, 1000000000);
    B.RenderComparison_0 = new A.RenderComparison(0, "identical");
    B.RenderComparison_2 = new A.RenderComparison(2, "paint");
    B.RenderComparison_3 = new A.RenderComparison(3, "layout");
    B.Role_0 = new A.Role(0, "incrementable");
    B.Role_1 = new A.Role(1, "scrollable");
    B.Role_2 = new A.Role(2, "labelAndValue");
    B.Role_3 = new A.Role(3, "tappable");
    B.Role_4 = new A.Role(4, "textField");
    B.Role_5 = new A.Role(5, "checkable");
    B.Role_6 = new A.Role(6, "image");
    B.Role_7 = new A.Role(7, "liveRegion");
    B.Radius_2_2 = new A.Radius(2, 2);
    B.BorderRadius_tLn0 = new A.BorderRadius(B.Radius_2_2, B.Radius_2_2, B.Radius_2_2, B.Radius_2_2);
    B.RoundedRectangleBorder_LkV = new A.RoundedRectangleBorder(B.BorderRadius_tLn0, B.BorderSide_0CF);
    B.SchedulerPhase_0 = new A.SchedulerPhase(0, "idle");
    B.SchedulerPhase_1 = new A.SchedulerPhase(1, "transientCallbacks");
    B.SchedulerPhase_2 = new A.SchedulerPhase(2, "midFrameMicrotasks");
    B.SchedulerPhase_3 = new A.SchedulerPhase(3, "persistentCallbacks");
    B.SchedulerPhase_4 = new A.SchedulerPhase(4, "postFrameCallbacks");
    B.ScriptCategory_0 = new A.ScriptCategory(0, "englishLike");
    B.SemanticsAction_1 = new A.SemanticsAction(1);
    B.SemanticsAction_128 = new A.SemanticsAction(128);
    B.SemanticsAction_16 = new A.SemanticsAction(16);
    B.SemanticsAction_2 = new A.SemanticsAction(2);
    B.SemanticsAction_256 = new A.SemanticsAction(256);
    B.SemanticsAction_32 = new A.SemanticsAction(32);
    B.SemanticsAction_4 = new A.SemanticsAction(4);
    B.SemanticsAction_64 = new A.SemanticsAction(64);
    B.SemanticsAction_8 = new A.SemanticsAction(8);
    B.SemanticsFlag_128 = new A.SemanticsFlag(128);
    B.SemanticsFlag_2097152 = new A.SemanticsFlag(2097152);
    B.SemanticsFlag_32 = new A.SemanticsFlag(32);
    B.SemanticsFlag_4 = new A.SemanticsFlag(4);
    B.SemanticsFlag_64 = new A.SemanticsFlag(64);
    B.SemanticsFlag_8192 = new A.SemanticsFlag(8192);
    B.List_2No = A._setArrayType(makeConstList(["click", "touchstart", "touchend", "pointerdown", "pointermove", "pointerup"]), type$.JSArray_String);
    B.Map_2NPLv = new A.ConstantStringMap(6, {click: null, touchstart: null, touchend: null, pointerdown: null, pointermove: null, pointerup: null}, B.List_2No, type$.ConstantStringMap_String_Null);
    B.Set_2No4 = new A._UnmodifiableSet(B.Map_2NPLv, type$._UnmodifiableSet_String);
    B.Map_69gc6 = new A.GeneralConstantMap([B.OperatingSystem_4, null, B.OperatingSystem_2, null, B.OperatingSystem_3, null], A.findType("GeneralConstantMap<OperatingSystem,Null>"));
    B.Set_69tl2 = new A._UnmodifiableSet(B.Map_69gc6, A.findType("_UnmodifiableSet<OperatingSystem>"));
    B.List_Yab = A._setArrayType(makeConstList(["click", "keyup", "keydown", "mouseup", "mousedown", "pointerdown", "pointerup"]), type$.JSArray_String);
    B.Map_Yae5Z = new A.ConstantStringMap(7, {click: null, keyup: null, keydown: null, mouseup: null, mousedown: null, pointerdown: null, pointerup: null}, B.List_Yab, type$.ConstantStringMap_String_Null);
    B.Set_Yabt3 = new A._UnmodifiableSet(B.Map_Yae5Z, type$._UnmodifiableSet_String);
    B.List_wIv = A._setArrayType(makeConstList(["serif", "sans-serif", "monospace", "cursive", "fantasy", "system-ui", "math", "emoji", "fangsong"]), type$.JSArray_String);
    B.Map_wImu2 = new A.ConstantStringMap(9, {serif: null, "sans-serif": null, monospace: null, cursive: null, fantasy: null, "system-ui": null, math: null, emoji: null, fangsong: null}, B.List_wIv, type$.ConstantStringMap_String_Null);
    B.Set_wIvsi = new A._UnmodifiableSet(B.Map_wImu2, type$._UnmodifiableSet_String);
    B.Size_100000_100000 = new A.Size(100000, 100000);
    B.StackFrame_8sg = new A.StackFrame("...", -1, "", "", "", -1, -1, "", "...");
    B.StackFrame_SOW = new A.StackFrame("<asynchronous suspension>", -1, "", "", "", -1, -1, "", "asynchronous suspension");
    B.StrokeCap_0 = new A.StrokeCap(0, "butt");
    B.StrokeJoin_0 = new A.StrokeJoin(0, "miter");
    B.Symbol_call = new A.Symbol("call");
    B.TextBaseline_0 = new A.TextBaseline(0, "alphabetic");
    B.TextCapitalization_3 = new A.TextCapitalization(3, "none");
    B.TextCapitalizationConfig_TextCapitalization_3 = new A.TextCapitalizationConfig(B.TextCapitalization_3);
    B.TextCapitalization_0 = new A.TextCapitalization(0, "words");
    B.TextCapitalization_1 = new A.TextCapitalization(1, "sentences");
    B.TextCapitalization_2 = new A.TextCapitalization(2, "characters");
    B.TextDecoration_0 = new A.TextDecoration(0);
    B.TextLeadingDistribution_0 = new A.TextLeadingDistribution(0, "proportional");
    B.TextLeadingDistribution_1 = new A.TextLeadingDistribution(1, "even");
    B.TextOverflow_2 = new A.TextOverflow(2, "ellipsis");
    B.TextStyle_oqK = new A.TextStyle(true, null, null, null, null, null, null, B.FontWeight_6, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.TextStyle_4IJ = new A.TextStyle(true, B.Color_3019898879, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedmond displayLarge", null, null, null);
    B.TextStyle_4UD = new A.TextStyle(true, B.Color_3019898879, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedmond displayMedium", null, null, null);
    B.TextStyle_c2q = new A.TextStyle(true, B.Color_3019898879, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedmond displaySmall", null, null, null);
    B.TextStyle_yw2 = new A.TextStyle(true, B.Color_3019898879, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedmond headlineLarge", null, null, null);
    B.TextStyle_yHZ = new A.TextStyle(true, B.Color_3019898879, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedmond headlineMedium", null, null, null);
    B.TextStyle_4CA = new A.TextStyle(true, B.Color_4294967295, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedmond headlineSmall", null, null, null);
    B.TextStyle_EaB = new A.TextStyle(true, B.Color_4294967295, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedmond titleLarge", null, null, null);
    B.TextStyle_GNA = new A.TextStyle(true, B.Color_4294967295, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedmond titleMedium", null, null, null);
    B.TextStyle_P12 = new A.TextStyle(true, B.Color_4294967295, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedmond titleSmall", null, null, null);
    B.TextStyle_mGH = new A.TextStyle(true, B.Color_4294967295, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedmond bodyLarge", null, null, null);
    B.TextStyle_46y = new A.TextStyle(true, B.Color_4294967295, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedmond bodyMedium", null, null, null);
    B.TextStyle_MIV = new A.TextStyle(true, B.Color_3019898879, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedmond bodySmall", null, null, null);
    B.TextStyle_ef1 = new A.TextStyle(true, B.Color_4294967295, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedmond labelLarge", null, null, null);
    B.TextStyle_hSl = new A.TextStyle(true, B.Color_4294967295, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedmond labelMedium", null, null, null);
    B.TextStyle_T9T = new A.TextStyle(true, B.Color_4294967295, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedmond labelSmall", null, null, null);
    B.TextTheme_3nh = new A.TextTheme(B.TextStyle_4IJ, B.TextStyle_4UD, B.TextStyle_c2q, B.TextStyle_yw2, B.TextStyle_yHZ, B.TextStyle_4CA, B.TextStyle_EaB, B.TextStyle_GNA, B.TextStyle_P12, B.TextStyle_mGH, B.TextStyle_46y, B.TextStyle_MIV, B.TextStyle_ef1, B.TextStyle_hSl, B.TextStyle_T9T);
    B.TextStyle_yAK = new A.TextStyle(true, B.Color_2315255808, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedwoodCity displayLarge", null, null, null);
    B.TextStyle_Esm = new A.TextStyle(true, B.Color_2315255808, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedwoodCity displayMedium", null, null, null);
    B.TextStyle_yAK0 = new A.TextStyle(true, B.Color_2315255808, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedwoodCity displaySmall", null, null, null);
    B.TextStyle_8eb = new A.TextStyle(true, B.Color_2315255808, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedwoodCity headlineLarge", null, null, null);
    B.TextStyle_myx = new A.TextStyle(true, B.Color_2315255808, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedwoodCity headlineMedium", null, null, null);
    B.TextStyle_OgC = new A.TextStyle(true, B.Color_3707764736, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedwoodCity headlineSmall", null, null, null);
    B.TextStyle_avx = new A.TextStyle(true, B.Color_3707764736, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedwoodCity titleLarge", null, null, null);
    B.TextStyle_0 = new A.TextStyle(true, B.Color_3707764736, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedwoodCity titleMedium", null, null, null);
    B.TextStyle_QEL = new A.TextStyle(true, B.Color_4278190080, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedwoodCity titleSmall", null, null, null);
    B.TextStyle_4AN = new A.TextStyle(true, B.Color_3707764736, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedwoodCity bodyLarge", null, null, null);
    B.TextStyle_XPt = new A.TextStyle(true, B.Color_3707764736, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedwoodCity bodyMedium", null, null, null);
    B.TextStyle_2rT = new A.TextStyle(true, B.Color_2315255808, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedwoodCity bodySmall", null, null, null);
    B.TextStyle_yto = new A.TextStyle(true, B.Color_3707764736, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedwoodCity labelLarge", null, null, null);
    B.TextStyle_OX3 = new A.TextStyle(true, B.Color_4278190080, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedwoodCity labelMedium", null, null, null);
    B.TextStyle_gMT = new A.TextStyle(true, B.Color_4278190080, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedwoodCity labelSmall", null, null, null);
    B.TextTheme_6bg = new A.TextTheme(B.TextStyle_yAK, B.TextStyle_Esm, B.TextStyle_yAK0, B.TextStyle_8eb, B.TextStyle_myx, B.TextStyle_OgC, B.TextStyle_avx, B.TextStyle_0, B.TextStyle_QEL, B.TextStyle_4AN, B.TextStyle_XPt, B.TextStyle_2rT, B.TextStyle_yto, B.TextStyle_OX3, B.TextStyle_gMT);
    B.TextStyle_ub4 = new A.TextStyle(true, B.Color_3019898879, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteMountainView displayLarge", null, null, null);
    B.TextStyle_sIv = new A.TextStyle(true, B.Color_3019898879, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteMountainView displayMedium", null, null, null);
    B.TextStyle_M6L = new A.TextStyle(true, B.Color_3019898879, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteMountainView displaySmall", null, null, null);
    B.TextStyle_jiq = new A.TextStyle(true, B.Color_3019898879, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteMountainView headlineLarge", null, null, null);
    B.TextStyle_RKg = new A.TextStyle(true, B.Color_3019898879, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteMountainView headlineMedium", null, null, null);
    B.TextStyle_ezV = new A.TextStyle(true, B.Color_4294967295, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteMountainView headlineSmall", null, null, null);
    B.TextStyle_OAa = new A.TextStyle(true, B.Color_4294967295, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteMountainView titleLarge", null, null, null);
    B.TextStyle_r9A = new A.TextStyle(true, B.Color_4294967295, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteMountainView titleMedium", null, null, null);
    B.TextStyle_QBc = new A.TextStyle(true, B.Color_4294967295, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteMountainView titleSmall", null, null, null);
    B.TextStyle_cRW = new A.TextStyle(true, B.Color_4294967295, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteMountainView bodyLarge", null, null, null);
    B.TextStyle_irG = new A.TextStyle(true, B.Color_4294967295, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteMountainView bodyMedium", null, null, null);
    B.TextStyle_inH = new A.TextStyle(true, B.Color_3019898879, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteMountainView bodySmall", null, null, null);
    B.TextStyle_wgw = new A.TextStyle(true, B.Color_4294967295, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteMountainView labelLarge", null, null, null);
    B.TextStyle_WXT = new A.TextStyle(true, B.Color_4294967295, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteMountainView labelMedium", null, null, null);
    B.TextStyle_Fcu = new A.TextStyle(true, B.Color_4294967295, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteMountainView labelSmall", null, null, null);
    B.TextTheme_8I8 = new A.TextTheme(B.TextStyle_ub4, B.TextStyle_sIv, B.TextStyle_M6L, B.TextStyle_jiq, B.TextStyle_RKg, B.TextStyle_ezV, B.TextStyle_OAa, B.TextStyle_r9A, B.TextStyle_QBc, B.TextStyle_cRW, B.TextStyle_irG, B.TextStyle_inH, B.TextStyle_wgw, B.TextStyle_WXT, B.TextStyle_Fcu);
    B.List_Exl = A._setArrayType(makeConstList(["Ubuntu", "Cantarell", "DejaVu Sans", "Liberation Sans", "Arial"]), type$.JSArray_String);
    B.TextStyle_eea = new A.TextStyle(true, B.Color_2315255808, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackHelsinki displayLarge", null, null, null);
    B.TextStyle_liY = new A.TextStyle(true, B.Color_2315255808, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackHelsinki displayMedium", null, null, null);
    B.TextStyle_8hD = new A.TextStyle(true, B.Color_2315255808, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackHelsinki displaySmall", null, null, null);
    B.TextStyle_a9P = new A.TextStyle(true, B.Color_2315255808, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackHelsinki headlineLarge", null, null, null);
    B.TextStyle_T7e = new A.TextStyle(true, B.Color_2315255808, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackHelsinki headlineMedium", null, null, null);
    B.TextStyle_gMT0 = new A.TextStyle(true, B.Color_3707764736, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackHelsinki headlineSmall", null, null, null);
    B.TextStyle_MRv = new A.TextStyle(true, B.Color_3707764736, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackHelsinki titleLarge", null, null, null);
    B.TextStyle_nVV = new A.TextStyle(true, B.Color_3707764736, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackHelsinki titleMedium", null, null, null);
    B.TextStyle_KzQ = new A.TextStyle(true, B.Color_4278190080, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackHelsinki titleSmall", null, null, null);
    B.TextStyle_b88 = new A.TextStyle(true, B.Color_3707764736, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackHelsinki bodyLarge", null, null, null);
    B.TextStyle_wwo = new A.TextStyle(true, B.Color_3707764736, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackHelsinki bodyMedium", null, null, null);
    B.TextStyle_gA4 = new A.TextStyle(true, B.Color_2315255808, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackHelsinki bodySmall", null, null, null);
    B.TextStyle_46y0 = new A.TextStyle(true, B.Color_3707764736, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackHelsinki labelLarge", null, null, null);
    B.TextStyle_8dr = new A.TextStyle(true, B.Color_4278190080, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackHelsinki labelMedium", null, null, null);
    B.TextStyle_AcR = new A.TextStyle(true, B.Color_4278190080, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackHelsinki labelSmall", null, null, null);
    B.TextTheme_AZd = new A.TextTheme(B.TextStyle_eea, B.TextStyle_liY, B.TextStyle_8hD, B.TextStyle_a9P, B.TextStyle_T7e, B.TextStyle_gMT0, B.TextStyle_MRv, B.TextStyle_nVV, B.TextStyle_KzQ, B.TextStyle_b88, B.TextStyle_wwo, B.TextStyle_gA4, B.TextStyle_46y0, B.TextStyle_8dr, B.TextStyle_AcR);
    B.TextStyle_4t1 = new A.TextStyle(true, B.Color_2315255808, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackCupertino displayLarge", null, null, null);
    B.TextStyle_8eb0 = new A.TextStyle(true, B.Color_2315255808, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackCupertino displayMedium", null, null, null);
    B.TextStyle_i7B = new A.TextStyle(true, B.Color_2315255808, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackCupertino displaySmall", null, null, null);
    B.TextStyle_gkc = new A.TextStyle(true, B.Color_2315255808, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackCupertino headlineLarge", null, null, null);
    B.TextStyle_zLf = new A.TextStyle(true, B.Color_2315255808, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackCupertino headlineMedium", null, null, null);
    B.TextStyle_yzp = new A.TextStyle(true, B.Color_3707764736, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackCupertino headlineSmall", null, null, null);
    B.TextStyle_2E5 = new A.TextStyle(true, B.Color_3707764736, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackCupertino titleLarge", null, null, null);
    B.TextStyle_Bcj = new A.TextStyle(true, B.Color_3707764736, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackCupertino titleMedium", null, null, null);
    B.TextStyle_Q1p = new A.TextStyle(true, B.Color_4278190080, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackCupertino titleSmall", null, null, null);
    B.TextStyle_mT8 = new A.TextStyle(true, B.Color_3707764736, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackCupertino bodyLarge", null, null, null);
    B.TextStyle_CKg = new A.TextStyle(true, B.Color_3707764736, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackCupertino bodyMedium", null, null, null);
    B.TextStyle_D3E = new A.TextStyle(true, B.Color_2315255808, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackCupertino bodySmall", null, null, null);
    B.TextStyle_2jN = new A.TextStyle(true, B.Color_3707764736, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackCupertino labelLarge", null, null, null);
    B.TextStyle_cWd = new A.TextStyle(true, B.Color_4278190080, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackCupertino labelMedium", null, null, null);
    B.TextStyle_4QF = new A.TextStyle(true, B.Color_4278190080, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackCupertino labelSmall", null, null, null);
    B.TextTheme_QJO = new A.TextTheme(B.TextStyle_4t1, B.TextStyle_8eb0, B.TextStyle_i7B, B.TextStyle_gkc, B.TextStyle_zLf, B.TextStyle_yzp, B.TextStyle_2E5, B.TextStyle_Bcj, B.TextStyle_Q1p, B.TextStyle_mT8, B.TextStyle_CKg, B.TextStyle_D3E, B.TextStyle_2jN, B.TextStyle_cWd, B.TextStyle_4QF);
    B.TextStyle_OTZ = new A.TextStyle(true, B.Color_2315255808, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackMountainView displayLarge", null, null, null);
    B.TextStyle_CDT = new A.TextStyle(true, B.Color_2315255808, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackMountainView displayMedium", null, null, null);
    B.TextStyle_Kg1 = new A.TextStyle(true, B.Color_2315255808, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackMountainView displaySmall", null, null, null);
    B.TextStyle_woc = new A.TextStyle(true, B.Color_2315255808, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackMountainView headlineLarge", null, null, null);
    B.TextStyle_gcQ = new A.TextStyle(true, B.Color_2315255808, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackMountainView headlineMedium", null, null, null);
    B.TextStyle_Qq8 = new A.TextStyle(true, B.Color_3707764736, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackMountainView headlineSmall", null, null, null);
    B.TextStyle_89t = new A.TextStyle(true, B.Color_3707764736, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackMountainView titleLarge", null, null, null);
    B.TextStyle_Azp = new A.TextStyle(true, B.Color_3707764736, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackMountainView titleMedium", null, null, null);
    B.TextStyle_23h = new A.TextStyle(true, B.Color_4278190080, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackMountainView titleSmall", null, null, null);
    B.TextStyle_2Hq = new A.TextStyle(true, B.Color_3707764736, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackMountainView bodyLarge", null, null, null);
    B.TextStyle_muG = new A.TextStyle(true, B.Color_3707764736, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackMountainView bodyMedium", null, null, null);
    B.TextStyle_fXI = new A.TextStyle(true, B.Color_2315255808, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackMountainView bodySmall", null, null, null);
    B.TextStyle_rgA = new A.TextStyle(true, B.Color_3707764736, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackMountainView labelLarge", null, null, null);
    B.TextStyle_4y8 = new A.TextStyle(true, B.Color_4278190080, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackMountainView labelMedium", null, null, null);
    B.TextStyle_8bC = new A.TextStyle(true, B.Color_4278190080, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackMountainView labelSmall", null, null, null);
    B.TextTheme_WrZ = new A.TextTheme(B.TextStyle_OTZ, B.TextStyle_CDT, B.TextStyle_Kg1, B.TextStyle_woc, B.TextStyle_gcQ, B.TextStyle_Qq8, B.TextStyle_89t, B.TextStyle_Azp, B.TextStyle_23h, B.TextStyle_2Hq, B.TextStyle_muG, B.TextStyle_fXI, B.TextStyle_rgA, B.TextStyle_4y8, B.TextStyle_8bC);
    B.TextStyle_yPr = new A.TextStyle(true, B.Color_3019898879, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteHelsinki displayLarge", null, null, null);
    B.TextStyle_0TE = new A.TextStyle(true, B.Color_3019898879, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteHelsinki displayMedium", null, null, null);
    B.TextStyle_g8S = new A.TextStyle(true, B.Color_3019898879, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteHelsinki displaySmall", null, null, null);
    B.TextStyle_oUC = new A.TextStyle(true, B.Color_3019898879, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteHelsinki headlineLarge", null, null, null);
    B.TextStyle_U0a = new A.TextStyle(true, B.Color_3019898879, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteHelsinki headlineMedium", null, null, null);
    B.TextStyle_XZn = new A.TextStyle(true, B.Color_4294967295, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteHelsinki headlineSmall", null, null, null);
    B.TextStyle_iL9 = new A.TextStyle(true, B.Color_4294967295, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteHelsinki titleLarge", null, null, null);
    B.TextStyle_Odg = new A.TextStyle(true, B.Color_4294967295, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteHelsinki titleMedium", null, null, null);
    B.TextStyle_86y = new A.TextStyle(true, B.Color_4294967295, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteHelsinki titleSmall", null, null, null);
    B.TextStyle_kUZ = new A.TextStyle(true, B.Color_4294967295, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteHelsinki bodyLarge", null, null, null);
    B.TextStyle_3Tv = new A.TextStyle(true, B.Color_4294967295, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteHelsinki bodyMedium", null, null, null);
    B.TextStyle_CF2 = new A.TextStyle(true, B.Color_3019898879, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteHelsinki bodySmall", null, null, null);
    B.TextStyle_Sh2 = new A.TextStyle(true, B.Color_4294967295, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteHelsinki labelLarge", null, null, null);
    B.TextStyle_Qug = new A.TextStyle(true, B.Color_4294967295, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteHelsinki labelMedium", null, null, null);
    B.TextStyle_Sh20 = new A.TextStyle(true, B.Color_4294967295, null, "Roboto", B.List_Exl, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteHelsinki labelSmall", null, null, null);
    B.TextTheme_Zy0 = new A.TextTheme(B.TextStyle_yPr, B.TextStyle_0TE, B.TextStyle_g8S, B.TextStyle_oUC, B.TextStyle_U0a, B.TextStyle_XZn, B.TextStyle_iL9, B.TextStyle_Odg, B.TextStyle_86y, B.TextStyle_kUZ, B.TextStyle_3Tv, B.TextStyle_CF2, B.TextStyle_Sh2, B.TextStyle_Qug, B.TextStyle_Sh20);
    B.TextStyle_C72 = new A.TextStyle(false, null, null, null, null, null, 112, B.FontWeight_0, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "englishLike displayLarge 2014", null, null, null);
    B.TextStyle_q3P = new A.TextStyle(false, null, null, null, null, null, 56, B.FontWeight_3, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "englishLike displayMedium 2014", null, null, null);
    B.TextStyle_00 = new A.TextStyle(false, null, null, null, null, null, 45, B.FontWeight_3, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "englishLike displaySmall 2014", null, null, null);
    B.TextStyle_Amm = new A.TextStyle(false, null, null, null, null, null, 40, B.FontWeight_3, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "englishLike headlineLarge 2014", null, null, null);
    B.TextStyle_KjO = new A.TextStyle(false, null, null, null, null, null, 34, B.FontWeight_3, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "englishLike headlineMedium 2014", null, null, null);
    B.TextStyle_saY = new A.TextStyle(false, null, null, null, null, null, 24, B.FontWeight_3, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "englishLike headlineSmall 2014", null, null, null);
    B.TextStyle_eFJ = new A.TextStyle(false, null, null, null, null, null, 20, B.FontWeight_4, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "englishLike titleLarge 2014", null, null, null);
    B.TextStyle_23h0 = new A.TextStyle(false, null, null, null, null, null, 16, B.FontWeight_3, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "englishLike titleMedium 2014", null, null, null);
    B.TextStyle_Met = new A.TextStyle(false, null, null, null, null, null, 14, B.FontWeight_4, null, 0.1, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "englishLike titleSmall 2014", null, null, null);
    B.TextStyle_UGQ = new A.TextStyle(false, null, null, null, null, null, 14, B.FontWeight_4, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "englishLike bodyLarge 2014", null, null, null);
    B.TextStyle_yFD = new A.TextStyle(false, null, null, null, null, null, 14, B.FontWeight_3, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "englishLike bodyMedium 2014", null, null, null);
    B.TextStyle_mes = new A.TextStyle(false, null, null, null, null, null, 12, B.FontWeight_3, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "englishLike bodySmall 2014", null, null, null);
    B.TextStyle_gkc0 = new A.TextStyle(false, null, null, null, null, null, 14, B.FontWeight_4, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "englishLike labelLarge 2014", null, null, null);
    B.TextStyle_u5H = new A.TextStyle(false, null, null, null, null, null, 12, B.FontWeight_3, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "englishLike labelMedium 2014", null, null, null);
    B.TextStyle_gsm = new A.TextStyle(false, null, null, null, null, null, 10, B.FontWeight_3, null, 1.5, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "englishLike labelSmall 2014", null, null, null);
    B.TextTheme_gSp = new A.TextTheme(B.TextStyle_C72, B.TextStyle_q3P, B.TextStyle_00, B.TextStyle_Amm, B.TextStyle_KjO, B.TextStyle_saY, B.TextStyle_eFJ, B.TextStyle_23h0, B.TextStyle_Met, B.TextStyle_UGQ, B.TextStyle_yFD, B.TextStyle_mes, B.TextStyle_gkc0, B.TextStyle_u5H, B.TextStyle_gsm);
    B.TextBaseline_1 = new A.TextBaseline(1, "ideographic");
    B.TextStyle_kaS = new A.TextStyle(false, null, null, null, null, null, 112, B.FontWeight_0, null, null, null, B.TextBaseline_1, null, null, null, null, null, null, null, null, null, "dense displayLarge 2014", null, null, null);
    B.TextStyle_IFX = new A.TextStyle(false, null, null, null, null, null, 56, B.FontWeight_3, null, null, null, B.TextBaseline_1, null, null, null, null, null, null, null, null, null, "dense displayMedium 2014", null, null, null);
    B.TextStyle_yzu = new A.TextStyle(false, null, null, null, null, null, 45, B.FontWeight_3, null, null, null, B.TextBaseline_1, null, null, null, null, null, null, null, null, null, "dense displaySmall 2014", null, null, null);
    B.TextStyle_mR7 = new A.TextStyle(false, null, null, null, null, null, 40, B.FontWeight_3, null, null, null, B.TextBaseline_1, null, null, null, null, null, null, null, null, null, "dense headlineLarge 2014", null, null, null);
    B.TextStyle_8MP = new A.TextStyle(false, null, null, null, null, null, 34, B.FontWeight_3, null, null, null, B.TextBaseline_1, null, null, null, null, null, null, null, null, null, "dense headlineMedium 2014", null, null, null);
    B.TextStyle_2Vk = new A.TextStyle(false, null, null, null, null, null, 24, B.FontWeight_3, null, null, null, B.TextBaseline_1, null, null, null, null, null, null, null, null, null, "dense headlineSmall 2014", null, null, null);
    B.TextStyle_oqF = new A.TextStyle(false, null, null, null, null, null, 21, B.FontWeight_4, null, null, null, B.TextBaseline_1, null, null, null, null, null, null, null, null, null, "dense titleLarge 2014", null, null, null);
    B.TextStyle_NQk = new A.TextStyle(false, null, null, null, null, null, 17, B.FontWeight_3, null, null, null, B.TextBaseline_1, null, null, null, null, null, null, null, null, null, "dense titleMedium 2014", null, null, null);
    B.TextStyle_EYU = new A.TextStyle(false, null, null, null, null, null, 15, B.FontWeight_4, null, null, null, B.TextBaseline_1, null, null, null, null, null, null, null, null, null, "dense titleSmall 2014", null, null, null);
    B.TextStyle_kJ4 = new A.TextStyle(false, null, null, null, null, null, 15, B.FontWeight_4, null, null, null, B.TextBaseline_1, null, null, null, null, null, null, null, null, null, "dense bodyLarge 2014", null, null, null);
    B.TextStyle_oge = new A.TextStyle(false, null, null, null, null, null, 15, B.FontWeight_3, null, null, null, B.TextBaseline_1, null, null, null, null, null, null, null, null, null, "dense bodyMedium 2014", null, null, null);
    B.TextStyle_Kx9 = new A.TextStyle(false, null, null, null, null, null, 13, B.FontWeight_3, null, null, null, B.TextBaseline_1, null, null, null, null, null, null, null, null, null, "dense bodySmall 2014", null, null, null);
    B.TextStyle_WfU = new A.TextStyle(false, null, null, null, null, null, 15, B.FontWeight_4, null, null, null, B.TextBaseline_1, null, null, null, null, null, null, null, null, null, "dense labelLarge 2014", null, null, null);
    B.TextStyle_2Vk0 = new A.TextStyle(false, null, null, null, null, null, 12, B.FontWeight_3, null, null, null, B.TextBaseline_1, null, null, null, null, null, null, null, null, null, "dense labelMedium 2014", null, null, null);
    B.TextStyle_7Tu = new A.TextStyle(false, null, null, null, null, null, 11, B.FontWeight_3, null, null, null, B.TextBaseline_1, null, null, null, null, null, null, null, null, null, "dense labelSmall 2014", null, null, null);
    B.TextTheme_jnH = new A.TextTheme(B.TextStyle_kaS, B.TextStyle_IFX, B.TextStyle_yzu, B.TextStyle_mR7, B.TextStyle_8MP, B.TextStyle_2Vk, B.TextStyle_oqF, B.TextStyle_NQk, B.TextStyle_EYU, B.TextStyle_kJ4, B.TextStyle_oge, B.TextStyle_Kx9, B.TextStyle_WfU, B.TextStyle_2Vk0, B.TextStyle_7Tu);
    B.TextStyle_kmR = new A.TextStyle(true, B.Color_2315255808, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedmond displayLarge", null, null, null);
    B.TextStyle_ald = new A.TextStyle(true, B.Color_2315255808, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedmond displayMedium", null, null, null);
    B.TextStyle_04u = new A.TextStyle(true, B.Color_2315255808, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedmond displaySmall", null, null, null);
    B.TextStyle_ZY1 = new A.TextStyle(true, B.Color_2315255808, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedmond headlineLarge", null, null, null);
    B.TextStyle_sBE = new A.TextStyle(true, B.Color_2315255808, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedmond headlineMedium", null, null, null);
    B.TextStyle_66B = new A.TextStyle(true, B.Color_3707764736, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedmond headlineSmall", null, null, null);
    B.TextStyle_bJM = new A.TextStyle(true, B.Color_3707764736, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedmond titleLarge", null, null, null);
    B.TextStyle_rx4 = new A.TextStyle(true, B.Color_3707764736, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedmond titleMedium", null, null, null);
    B.TextStyle_cUt = new A.TextStyle(true, B.Color_4278190080, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedmond titleSmall", null, null, null);
    B.TextStyle_sQ0 = new A.TextStyle(true, B.Color_3707764736, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedmond bodyLarge", null, null, null);
    B.TextStyle_yzJ = new A.TextStyle(true, B.Color_3707764736, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedmond bodyMedium", null, null, null);
    B.TextStyle_MUx = new A.TextStyle(true, B.Color_2315255808, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedmond bodySmall", null, null, null);
    B.TextStyle_bQo = new A.TextStyle(true, B.Color_3707764736, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedmond labelLarge", null, null, null);
    B.TextStyle_TDG = new A.TextStyle(true, B.Color_4278190080, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedmond labelMedium", null, null, null);
    B.TextStyle_EO3 = new A.TextStyle(true, B.Color_4278190080, null, "Segoe UI", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "blackRedmond labelSmall", null, null, null);
    B.TextTheme_pEW = new A.TextTheme(B.TextStyle_kmR, B.TextStyle_ald, B.TextStyle_04u, B.TextStyle_ZY1, B.TextStyle_sBE, B.TextStyle_66B, B.TextStyle_bJM, B.TextStyle_rx4, B.TextStyle_cUt, B.TextStyle_sQ0, B.TextStyle_yzJ, B.TextStyle_MUx, B.TextStyle_bQo, B.TextStyle_TDG, B.TextStyle_EO3);
    B.TextStyle_01 = new A.TextStyle(true, B.Color_3019898879, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedwoodCity displayLarge", null, null, null);
    B.TextStyle_woc0 = new A.TextStyle(true, B.Color_3019898879, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedwoodCity displayMedium", null, null, null);
    B.TextStyle_02 = new A.TextStyle(true, B.Color_3019898879, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedwoodCity displaySmall", null, null, null);
    B.TextStyle_EKj = new A.TextStyle(true, B.Color_3019898879, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedwoodCity headlineLarge", null, null, null);
    B.TextStyle_sIv0 = new A.TextStyle(true, B.Color_3019898879, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedwoodCity headlineMedium", null, null, null);
    B.TextStyle_oyU = new A.TextStyle(true, B.Color_4294967295, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedwoodCity headlineSmall", null, null, null);
    B.TextStyle_Feh = new A.TextStyle(true, B.Color_4294967295, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedwoodCity titleLarge", null, null, null);
    B.TextStyle_A2C = new A.TextStyle(true, B.Color_4294967295, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedwoodCity titleMedium", null, null, null);
    B.TextStyle_ww8 = new A.TextStyle(true, B.Color_4294967295, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedwoodCity titleSmall", null, null, null);
    B.TextStyle_chs = new A.TextStyle(true, B.Color_4294967295, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedwoodCity bodyLarge", null, null, null);
    B.TextStyle_int = new A.TextStyle(true, B.Color_4294967295, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedwoodCity bodyMedium", null, null, null);
    B.TextStyle_GRv = new A.TextStyle(true, B.Color_3019898879, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedwoodCity bodySmall", null, null, null);
    B.TextStyle_0Wv = new A.TextStyle(true, B.Color_4294967295, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedwoodCity labelLarge", null, null, null);
    B.TextStyle_Au4 = new A.TextStyle(true, B.Color_4294967295, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedwoodCity labelMedium", null, null, null);
    B.TextStyle_Wby = new A.TextStyle(true, B.Color_4294967295, null, ".AppleSystemUIFont", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteRedwoodCity labelSmall", null, null, null);
    B.TextTheme_uDC = new A.TextTheme(B.TextStyle_01, B.TextStyle_woc0, B.TextStyle_02, B.TextStyle_EKj, B.TextStyle_sIv0, B.TextStyle_oyU, B.TextStyle_Feh, B.TextStyle_A2C, B.TextStyle_ww8, B.TextStyle_chs, B.TextStyle_int, B.TextStyle_GRv, B.TextStyle_0Wv, B.TextStyle_Au4, B.TextStyle_Wby);
    B.TextStyle_NAI = new A.TextStyle(false, null, null, null, null, null, 112, B.FontWeight_3, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "tall displayLarge 2014", null, null, null);
    B.TextStyle_wEo = new A.TextStyle(false, null, null, null, null, null, 56, B.FontWeight_3, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "tall displayMedium 2014", null, null, null);
    B.TextStyle_ieL = new A.TextStyle(false, null, null, null, null, null, 45, B.FontWeight_3, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "tall displaySmall 2014", null, null, null);
    B.TextStyle_iMW = new A.TextStyle(false, null, null, null, null, null, 40, B.FontWeight_3, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "tall headlineLarge 2014", null, null, null);
    B.TextStyle_ahs = new A.TextStyle(false, null, null, null, null, null, 34, B.FontWeight_3, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "tall headlineMedium 2014", null, null, null);
    B.TextStyle_wEQ = new A.TextStyle(false, null, null, null, null, null, 24, B.FontWeight_3, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "tall headlineSmall 2014", null, null, null);
    B.TextStyle_jGK = new A.TextStyle(false, null, null, null, null, null, 21, B.FontWeight_6, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "tall titleLarge 2014", null, null, null);
    B.TextStyle_p6N = new A.TextStyle(false, null, null, null, null, null, 17, B.FontWeight_3, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "tall titleMedium 2014", null, null, null);
    B.TextStyle_dzh = new A.TextStyle(false, null, null, null, null, null, 15, B.FontWeight_4, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "tall titleSmall 2014", null, null, null);
    B.TextStyle_Auo = new A.TextStyle(false, null, null, null, null, null, 15, B.FontWeight_6, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "tall bodyLarge 2014", null, null, null);
    B.TextStyle_NQk0 = new A.TextStyle(false, null, null, null, null, null, 15, B.FontWeight_3, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "tall bodyMedium 2014", null, null, null);
    B.TextStyle_ivX = new A.TextStyle(false, null, null, null, null, null, 13, B.FontWeight_3, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "tall bodySmall 2014", null, null, null);
    B.TextStyle_aL3 = new A.TextStyle(false, null, null, null, null, null, 15, B.FontWeight_6, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "tall labelLarge 2014", null, null, null);
    B.TextStyle_HWB = new A.TextStyle(false, null, null, null, null, null, 12, B.FontWeight_3, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "tall labelMedium 2014", null, null, null);
    B.TextStyle_oOy = new A.TextStyle(false, null, null, null, null, null, 11, B.FontWeight_3, null, null, null, B.TextBaseline_0, null, null, null, null, null, null, null, null, null, "tall labelSmall 2014", null, null, null);
    B.TextTheme_uww = new A.TextTheme(B.TextStyle_NAI, B.TextStyle_wEo, B.TextStyle_ieL, B.TextStyle_iMW, B.TextStyle_ahs, B.TextStyle_wEQ, B.TextStyle_jGK, B.TextStyle_p6N, B.TextStyle_dzh, B.TextStyle_Auo, B.TextStyle_NQk0, B.TextStyle_ivX, B.TextStyle_aL3, B.TextStyle_HWB, B.TextStyle_oOy);
    B.TextStyle_65W = new A.TextStyle(true, B.Color_3019898879, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteCupertino displayLarge", null, null, null);
    B.TextStyle_gvg = new A.TextStyle(true, B.Color_3019898879, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteCupertino displayMedium", null, null, null);
    B.TextStyle_kGg = new A.TextStyle(true, B.Color_3019898879, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteCupertino displaySmall", null, null, null);
    B.TextStyle_wz6 = new A.TextStyle(true, B.Color_3019898879, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteCupertino headlineLarge", null, null, null);
    B.TextStyle_alT = new A.TextStyle(true, B.Color_3019898879, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteCupertino headlineMedium", null, null, null);
    B.TextStyle_D9d = new A.TextStyle(true, B.Color_4294967295, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteCupertino headlineSmall", null, null, null);
    B.TextStyle_inH0 = new A.TextStyle(true, B.Color_4294967295, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteCupertino titleLarge", null, null, null);
    B.TextStyle_b1Q = new A.TextStyle(true, B.Color_4294967295, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteCupertino titleMedium", null, null, null);
    B.TextStyle_cYv = new A.TextStyle(true, B.Color_4294967295, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteCupertino titleSmall", null, null, null);
    B.TextStyle_qtI = new A.TextStyle(true, B.Color_4294967295, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteCupertino bodyLarge", null, null, null);
    B.TextStyle_GZw = new A.TextStyle(true, B.Color_4294967295, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteCupertino bodyMedium", null, null, null);
    B.TextStyle_yPV = new A.TextStyle(true, B.Color_3019898879, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteCupertino bodySmall", null, null, null);
    B.TextStyle_YCB = new A.TextStyle(true, B.Color_4294967295, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteCupertino labelLarge", null, null, null);
    B.TextStyle_o4Q = new A.TextStyle(true, B.Color_4294967295, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteCupertino labelMedium", null, null, null);
    B.TextStyle_KI5 = new A.TextStyle(true, B.Color_4294967295, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, null, B.TextDecoration_0, null, null, null, "whiteCupertino labelSmall", null, null, null);
    B.TextTheme_vru = new A.TextTheme(B.TextStyle_65W, B.TextStyle_gvg, B.TextStyle_kGg, B.TextStyle_wz6, B.TextStyle_alT, B.TextStyle_D9d, B.TextStyle_inH0, B.TextStyle_b1Q, B.TextStyle_cYv, B.TextStyle_qtI, B.TextStyle_GZw, B.TextStyle_yPV, B.TextStyle_YCB, B.TextStyle_o4Q, B.TextStyle_KI5);
    B.TextWidthBasis_1 = new A.TextWidthBasis(1, "longestLine");
    B.TileMode_0 = new A.TileMode(0, "clamp");
    B.TileMode_3 = new A.TileMode(3, "decal");
    B.TransformKind_0 = new A.TransformKind(0, "identity");
    B.TransformKind_1 = new A.TransformKind(1, "transform2d");
    B.TransformKind_2 = new A.TransformKind(2, "complex");
    B.Type_ActivateIntent_OT9 = A.typeLiteral("ActivateIntent");
    B.Type_ButtonActivateIntent_6Ij = A.typeLiteral("ButtonActivateIntent");
    B.Type_ByteBuffer_RkP = A.typeLiteral("ByteBuffer");
    B.Type_ByteData_zNC = A.typeLiteral("ByteData");
    B.Type_Color_MG2 = A.typeLiteral("Color");
    B.Type_DoubleTapGestureRecognizer_oyU = A.typeLiteral("DoubleTapGestureRecognizer");
    B.Type_Float32List_LB7 = A.typeLiteral("Float32List");
    B.Type_Float64List_LB7 = A.typeLiteral("Float64List");
    B.Type_Int16List_uXf = A.typeLiteral("Int16List");
    B.Type_Int32List_O50 = A.typeLiteral("Int32List");
    B.Type_Int8List_ekJ = A.typeLiteral("Int8List");
    B.Type_JSObject_8k0 = A.typeLiteral("JSObject");
    B.Type_LabeledGlobalKey_6TW = A.typeLiteral("LabeledGlobalKey<State<StatefulWidget>>");
    B.Type_LongPressGestureRecognizer_46y = A.typeLiteral("LongPressGestureRecognizer");
    B.Type_Null_Yyn = A.typeLiteral("Null");
    B.Type_Object_xQ6 = A.typeLiteral("Object");
    B.Type_String_k8F = A.typeLiteral("String");
    B.Type_TapGestureRecognizer_62h = A.typeLiteral("TapGestureRecognizer");
    B.Type_Uint16List_2bx = A.typeLiteral("Uint16List");
    B.Type_Uint32List_2bx = A.typeLiteral("Uint32List");
    B.Type_Uint8ClampedList_Jik = A.typeLiteral("Uint8ClampedList");
    B.Type_Uint8List_WLA = A.typeLiteral("Uint8List");
    B.Type_bool_lhE = A.typeLiteral("bool");
    B.Type_double_K1J = A.typeLiteral("double");
    B.Type_int_tHn = A.typeLiteral("int");
    B.Type_num_cv7 = A.typeLiteral("num");
    B.UnfocusDisposition_0 = new A.UnfocusDisposition(0, "scope");
    B.UnfocusDisposition_1 = new A.UnfocusDisposition(1, "previouslyFocusedChild");
    B.UnicodeRange_11264_55297_TextDirection_1 = new A.UnicodeRange(11264, 55297, B.TextDirection_1, type$.UnicodeRange_TextDirection);
    B.UnicodeRange_1425_1775_TextDirection_0 = new A.UnicodeRange(1425, 1775, B.TextDirection_0, type$.UnicodeRange_TextDirection);
    B.UnicodeRange_1786_2303_TextDirection_0 = new A.UnicodeRange(1786, 2303, B.TextDirection_0, type$.UnicodeRange_TextDirection);
    B.UnicodeRange_192_214_TextDirection_1 = new A.UnicodeRange(192, 214, B.TextDirection_1, type$.UnicodeRange_TextDirection);
    B.UnicodeRange_216_246_TextDirection_1 = new A.UnicodeRange(216, 246, B.TextDirection_1, type$.UnicodeRange_TextDirection);
    B.UnicodeRange_2304_8191_TextDirection_1 = new A.UnicodeRange(2304, 8191, B.TextDirection_1, type$.UnicodeRange_TextDirection);
    B.UnicodeRange_248_696_TextDirection_1 = new A.UnicodeRange(248, 696, B.TextDirection_1, type$.UnicodeRange_TextDirection);
    B.UnicodeRange_55298_55299_TextDirection_0 = new A.UnicodeRange(55298, 55299, B.TextDirection_0, type$.UnicodeRange_TextDirection);
    B.UnicodeRange_55300_55353_TextDirection_1 = new A.UnicodeRange(55300, 55353, B.TextDirection_1, type$.UnicodeRange_TextDirection);
    B.UnicodeRange_55354_55355_TextDirection_0 = new A.UnicodeRange(55354, 55355, B.TextDirection_0, type$.UnicodeRange_TextDirection);
    B.UnicodeRange_55356_56319_TextDirection_1 = new A.UnicodeRange(55356, 56319, B.TextDirection_1, type$.UnicodeRange_TextDirection);
    B.UnicodeRange_63744_64284_TextDirection_1 = new A.UnicodeRange(63744, 64284, B.TextDirection_1, type$.UnicodeRange_TextDirection);
    B.UnicodeRange_64285_65023_TextDirection_0 = new A.UnicodeRange(64285, 65023, B.TextDirection_0, type$.UnicodeRange_TextDirection);
    B.UnicodeRange_65024_65135_TextDirection_1 = new A.UnicodeRange(65024, 65135, B.TextDirection_1, type$.UnicodeRange_TextDirection);
    B.UnicodeRange_65136_65276_TextDirection_0 = new A.UnicodeRange(65136, 65276, B.TextDirection_0, type$.UnicodeRange_TextDirection);
    B.UnicodeRange_65277_65535_TextDirection_1 = new A.UnicodeRange(65277, 65535, B.TextDirection_1, type$.UnicodeRange_TextDirection);
    B.UnicodeRange_65_90_TextDirection_1 = new A.UnicodeRange(65, 90, B.TextDirection_1, type$.UnicodeRange_TextDirection);
    B.UnicodeRange_768_1424_TextDirection_1 = new A.UnicodeRange(768, 1424, B.TextDirection_1, type$.UnicodeRange_TextDirection);
    B.UnicodeRange_8206_8206_TextDirection_1 = new A.UnicodeRange(8206, 8206, B.TextDirection_1, type$.UnicodeRange_TextDirection);
    B.UnicodeRange_8207_8207_TextDirection_0 = new A.UnicodeRange(8207, 8207, B.TextDirection_0, type$.UnicodeRange_TextDirection);
    B.UnicodeRange_97_122_TextDirection_1 = new A.UnicodeRange(97, 122, B.TextDirection_1, type$.UnicodeRange_TextDirection);
    B.Utf8Decoder_false = new A.Utf8Decoder(false);
    B.Utf8Decoder_true = new A.Utf8Decoder(true);
    B.VerticalDirection_0 = new A.VerticalDirection(0, "up");
    B.VerticalDirection_1 = new A.VerticalDirection(1, "down");
    B.VisualDensity_0_0 = new A.VisualDensity(0, 0);
    B.VisualDensity_m2_m2 = new A.VisualDensity(-2, -2);
    B._AnimationDirection_0 = new A._AnimationDirection(0, "forward");
    B._AnimationDirection_1 = new A._AnimationDirection(1, "reverse");
    B._CheckableKind_0 = new A._CheckableKind(0, "checkbox");
    B._CheckableKind_1 = new A._CheckableKind(1, "radio");
    B._CheckableKind_2 = new A._CheckableKind(2, "toggle");
    B._ComparisonResult_0 = new A._ComparisonResult(0, "inside");
    B._ComparisonResult_1 = new A._ComparisonResult(1, "higher");
    B._ComparisonResult_2 = new A._ComparisonResult(2, "lower");
    B._ElementLifecycle_0 = new A._ElementLifecycle(0, "initial");
    B._ElementLifecycle_1 = new A._ElementLifecycle(1, "active");
    B._ElementLifecycle_2 = new A._ElementLifecycle(2, "inactive");
    B._ElementLifecycle_3 = new A._ElementLifecycle(3, "defunct");
    B._HighlightType_0 = new A._HighlightType(0, "pressed");
    B._HighlightType_1 = new A._HighlightType(1, "hover");
    B._HighlightType_2 = new A._HighlightType(2, "focus");
    B._IterationMarker_null_2 = new A._IterationMarker(null, 2);
    B._ModifierSidePair_ModifierKey_0_KeyboardSide_0 = new A._ModifierSidePair(B.ModifierKey_0, B.KeyboardSide_0);
    B.KeyboardSide_1 = new A.KeyboardSide(1, "left");
    B._ModifierSidePair_ModifierKey_0_KeyboardSide_1 = new A._ModifierSidePair(B.ModifierKey_0, B.KeyboardSide_1);
    B.KeyboardSide_2 = new A.KeyboardSide(2, "right");
    B._ModifierSidePair_ModifierKey_0_KeyboardSide_2 = new A._ModifierSidePair(B.ModifierKey_0, B.KeyboardSide_2);
    B._ModifierSidePair_ModifierKey_0_KeyboardSide_3 = new A._ModifierSidePair(B.ModifierKey_0, B.KeyboardSide_3);
    B._ModifierSidePair_ModifierKey_1_KeyboardSide_0 = new A._ModifierSidePair(B.ModifierKey_1, B.KeyboardSide_0);
    B._ModifierSidePair_ModifierKey_1_KeyboardSide_1 = new A._ModifierSidePair(B.ModifierKey_1, B.KeyboardSide_1);
    B._ModifierSidePair_ModifierKey_1_KeyboardSide_2 = new A._ModifierSidePair(B.ModifierKey_1, B.KeyboardSide_2);
    B._ModifierSidePair_ModifierKey_1_KeyboardSide_3 = new A._ModifierSidePair(B.ModifierKey_1, B.KeyboardSide_3);
    B._ModifierSidePair_ModifierKey_2_KeyboardSide_0 = new A._ModifierSidePair(B.ModifierKey_2, B.KeyboardSide_0);
    B._ModifierSidePair_ModifierKey_2_KeyboardSide_1 = new A._ModifierSidePair(B.ModifierKey_2, B.KeyboardSide_1);
    B._ModifierSidePair_ModifierKey_2_KeyboardSide_2 = new A._ModifierSidePair(B.ModifierKey_2, B.KeyboardSide_2);
    B._ModifierSidePair_ModifierKey_2_KeyboardSide_3 = new A._ModifierSidePair(B.ModifierKey_2, B.KeyboardSide_3);
    B._ModifierSidePair_ModifierKey_3_KeyboardSide_0 = new A._ModifierSidePair(B.ModifierKey_3, B.KeyboardSide_0);
    B._ModifierSidePair_ModifierKey_3_KeyboardSide_1 = new A._ModifierSidePair(B.ModifierKey_3, B.KeyboardSide_1);
    B._ModifierSidePair_ModifierKey_3_KeyboardSide_2 = new A._ModifierSidePair(B.ModifierKey_3, B.KeyboardSide_2);
    B._ModifierSidePair_ModifierKey_3_KeyboardSide_3 = new A._ModifierSidePair(B.ModifierKey_3, B.KeyboardSide_3);
    B._ModifierSidePair_ModifierKey_4_KeyboardSide_3 = new A._ModifierSidePair(B.ModifierKey_4, B.KeyboardSide_3);
    B._ModifierSidePair_ModifierKey_5_KeyboardSide_3 = new A._ModifierSidePair(B.ModifierKey_5, B.KeyboardSide_3);
    B._ModifierSidePair_ModifierKey_6_KeyboardSide_3 = new A._ModifierSidePair(B.ModifierKey_6, B.KeyboardSide_3);
    B._ModifierSidePair_ModifierKey_7_KeyboardSide_3 = new A._ModifierSidePair(B.ModifierKey_7, B.KeyboardSide_3);
    B._NullWidget_null0 = new A._NullWidget(null);
    B._NullWidget_null = new A._NullWidget0(null);
    B._ParagraphCommandType_0 = new A._ParagraphCommandType(0, "addText");
    B._ParagraphCommandType_2 = new A._ParagraphCommandType(2, "pushStyle");
    B._ParagraphCommandType_3 = new A._ParagraphCommandType(3, "addPlaceholder");
    B._ParagraphCommandType_1 = new A._ParagraphCommandType(1, "pop");
    B._ParagraphCommand_6TA = new A._ParagraphCommand(B._ParagraphCommandType_1, null, null, null);
    B._StateLifecycle_0 = new A._StateLifecycle(0, "created");
    B._WordWrapParseMode_0 = new A._WordWrapParseMode(0, "inSpace");
    B._WordWrapParseMode_1 = new A._WordWrapParseMode(1, "inWord");
    B._WordWrapParseMode_2 = new A._WordWrapParseMode(2, "atBreak");
  })();
  (function staticFields() {
    $._cachedWebGLVersion = null;
    $.__canvasKit = A._Cell$named("canvasKit");
    $._skiaFontCollection = null;
    $.skiaSceneHost = null;
    $.SkiaObjects_resurrectableObjects = A._setArrayType([], A.findType("JSArray<ManagedSkiaObject<Object>>"));
    $.SkiaObjects_cachesToResize = A._setArrayType([], A.findType("JSArray<SkiaObjectCache>"));
    $.SkiaObjects__addedCleanupCallback = false;
    $.Surface__didWarnAboutWebGlInitializationFailure = false;
    $.SurfaceFactory__instance = null;
    $._configuration = null;
    $._flutterViewEmbedder = null;
    $._fontChangeScheduled = false;
    $.frameReferences = A._setArrayType([], type$.JSArray_FrameReference_dynamic);
    $._clipIdCounter = 0;
    $._recycledCanvases = A._setArrayType([], A.findType("JSArray<BitmapCanvas>"));
    $.paintQueue = A._setArrayType([], type$.JSArray_PaintRequest);
    $.glRenderer = null;
    $.SurfaceSceneBuilder__lastFrameScene = null;
    $.VertexShaders__baseVertexShader = null;
    $.retainedSurfaces = A._setArrayType([], type$.JSArray_PersistedSurface);
    $._engineInitialized = false;
    $._hotRestartListeners = A._setArrayType([], type$.JSArray_of_void_Function);
    $.Keyboard__instance = null;
    $.KeyboardBinding__instance = null;
    $.MouseCursor__instance = null;
    $.scheduleFrameCallback = null;
    $.PointerBinding__instance = null;
    $._BaseAdapter__listeners = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic_Function_Event);
    $._BaseAdapter__nativeListeners = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic_Function_Event);
    $._WheelEventListenerMixin__defaultScrollLineHeight = null;
    $._PointerState__pointerCount = 0;
    $._frameTimings = A._setArrayType([], type$.JSArray_FrameTiming);
    $._vsyncStartMicros = -1;
    $._buildStartMicros = -1;
    $._buildFinishMicros = -1;
    $._rasterStartMicros = -1;
    $._rasterFinishMicros = -1;
    $.GlContext____programCache = A._Cell$named("_programCache");
    $.OffScreenCanvas__supported = null;
    $.AccessibilityAnnouncements__instance = null;
    $.EngineSemanticsOwner__instance = null;
    $.SemanticsTextEditingStrategy__instance = null;
    $.Spanometer__rulers = A.LinkedHashMap_LinkedHashMap$_empty(A.findType("TextHeightStyle"), A.findType("TextHeightRuler"));
    $._lineLookup = null;
    $._lastStart = -1;
    $._lastEnd = -1;
    $._lastText = "";
    $._lastCssFont = "";
    $._lastWidth = -1;
    $.formsOnTheDom = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, A.findType("FormElement"));
    $._ellipseFeatureDetected = null;
    $._isUrlStrategySet = false;
    $._customUrlStrategy = null;
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.Primitives__identityHashCodeProperty = null;
    $.Primitives_timerFrequency = 0;
    $.Primitives_timerTicks = A._js_helper_Primitives_dateNow$closure();
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = B.C__RootZone;
    $._toStringVisiting = A._setArrayType([], type$.JSArray_Object);
    $._extensions = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, A.findType("Future<ServiceExtensionResponse>(String,Map<String,String>)"));
    $._FakeUserTag__instances = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, A.findType("_FakeUserTag"));
    $.Timeline__stack = A._setArrayType([], A.findType("JSArray<_SyncBlock?>"));
    $.Element__parseDocument = null;
    $.Element__parseRange = null;
    $.Element__defaultValidator = null;
    $.Element__defaultSanitizer = null;
    $._Html5NodeValidator__attributeValidators = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Function);
    $._assetManager = null;
    $._fontCollection = null;
    $.FlutterError_presentError = A.assertions_FlutterError_dumpErrorToConsole$closure();
    $.FlutterError__errorCount = 0;
    $.FlutterError__stackFilters = A._setArrayType([], A.findType("JSArray<StackFilter>"));
    $.BindingBase_debugReassembleConfig = null;
    $.debugBrightnessOverride = null;
    $.activeDevToolsServerAddress = null;
    $.connectedVmServiceUri = null;
    $.LicenseRegistry__collectors = null;
    $._debugPrintedCharacters = 0;
    $._debugPrintCompleter = null;
    $._debugPrintScheduled = false;
    $.GestureBinding__instance = null;
    $.PaintingBinding__instance = null;
    $.RendererBinding__instance = null;
    $.RenderBox__debugIntrinsicsDepth = 0;
    $.debugProfileLayoutsEnabled = false;
    $.debugProfilePaintsEnabled = false;
    $._timeDilation = 1;
    $.SchedulerBinding__instance = null;
    $.SemanticsBinding__instance = null;
    $.CustomSemanticsAction__nextId = 0;
    $.CustomSemanticsAction__actions = A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.CustomSemanticsAction);
    $.CustomSemanticsAction__ids = A.LinkedHashMap_LinkedHashMap$_empty(type$.CustomSemanticsAction, type$.int);
    $.SemanticsNode__lastIdentifier = 0;
    $.ServicesBinding__instance = null;
    $.RawKeyboard__modifierKeyMap = function() {
      var t1 = type$.PhysicalKeyboardKey;
      return A.LinkedHashMap_LinkedHashMap$_literal([B._ModifierSidePair_ModifierKey_2_KeyboardSide_1, A.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458978], t1), B._ModifierSidePair_ModifierKey_2_KeyboardSide_2, A.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458982], t1), B._ModifierSidePair_ModifierKey_2_KeyboardSide_3, A.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458978, B.PhysicalKeyboardKey_458982], t1), B._ModifierSidePair_ModifierKey_2_KeyboardSide_0, A.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458978], t1), B._ModifierSidePair_ModifierKey_1_KeyboardSide_1, A.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458977], t1), B._ModifierSidePair_ModifierKey_1_KeyboardSide_2, A.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458981], t1), B._ModifierSidePair_ModifierKey_1_KeyboardSide_3, A.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458977, B.PhysicalKeyboardKey_458981], t1), B._ModifierSidePair_ModifierKey_1_KeyboardSide_0, A.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458977], t1), B._ModifierSidePair_ModifierKey_0_KeyboardSide_1, A.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458976], t1), B._ModifierSidePair_ModifierKey_0_KeyboardSide_2, A.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458980], t1), B._ModifierSidePair_ModifierKey_0_KeyboardSide_3, A.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458976, B.PhysicalKeyboardKey_458980], t1), B._ModifierSidePair_ModifierKey_0_KeyboardSide_0, A.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458976], t1), B._ModifierSidePair_ModifierKey_3_KeyboardSide_1, A.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458979], t1), B._ModifierSidePair_ModifierKey_3_KeyboardSide_2, A.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458983], t1), B._ModifierSidePair_ModifierKey_3_KeyboardSide_3, A.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458979, B.PhysicalKeyboardKey_458983], t1), B._ModifierSidePair_ModifierKey_3_KeyboardSide_0, A.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458979], t1), B._ModifierSidePair_ModifierKey_4_KeyboardSide_3, A.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458809], t1), B._ModifierSidePair_ModifierKey_5_KeyboardSide_3, A.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458835], t1), B._ModifierSidePair_ModifierKey_6_KeyboardSide_3, A.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_458823], t1), B._ModifierSidePair_ModifierKey_7_KeyboardSide_3, A.LinkedHashSet_LinkedHashSet$_literal([B.PhysicalKeyboardKey_18], t1)], A.findType("_ModifierSidePair"), A.findType("Set<PhysicalKeyboardKey>"));
    }();
    $.RawKeyboard__allModifiersExceptFn = A.LinkedHashMap_LinkedHashMap$_literal([B.PhysicalKeyboardKey_458978, B.LogicalKeyboardKey_8589934852, B.PhysicalKeyboardKey_458982, B.LogicalKeyboardKey_8589934853, B.PhysicalKeyboardKey_458977, B.LogicalKeyboardKey_8589934850, B.PhysicalKeyboardKey_458981, B.LogicalKeyboardKey_8589934851, B.PhysicalKeyboardKey_458976, B.LogicalKeyboardKey_8589934848, B.PhysicalKeyboardKey_458980, B.LogicalKeyboardKey_8589934849, B.PhysicalKeyboardKey_458979, B.LogicalKeyboardKey_8589934854, B.PhysicalKeyboardKey_458983, B.LogicalKeyboardKey_8589934855, B.PhysicalKeyboardKey_458809, B.LogicalKeyboardKey_4294967556, B.PhysicalKeyboardKey_458835, B.LogicalKeyboardKey_4294967562, B.PhysicalKeyboardKey_458823, B.LogicalKeyboardKey_4294967564], type$.PhysicalKeyboardKey, type$.LogicalKeyboardKey);
    $.WidgetsBinding__instance = null;
    $.debugProfileBuildsEnabled = false;
    $.Matrix4__decomposeV = null;
    $.Matrix4__decomposeM = null;
    $.Matrix4__decomposeR = null;
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal($, "_browserEngine", "$get$_browserEngine", () => A.detectBrowserEngineByVendorAgent(A.window().navigator.vendor, B.JSString_methods.toLowerCase$0(A.window().navigator.userAgent)));
    _lazyFinal($, "_operatingSystem", "$get$_operatingSystem", () => A.detectOperatingSystem());
    _lazy($, "CanvasPool__runBuffer", "$get$CanvasPool__runBuffer", () => A.NativeFloat32List_NativeFloat32List(8));
    _lazyFinal($, "_clipOpIntersect", "$get$_clipOpIntersect", () => J.get$Intersect$x(J.get$ClipOp$x(A.canvasKit())));
    _lazyFinal($, "useH5vccCanvasKit", "$get$useH5vccCanvasKit", () => self.window.h5vcc != null);
    _lazyFinal($, "_skFontWeights", "$get$_skFontWeights", () => A._setArrayType([J.get$Thin$x(J.get$FontWeight$x(A.canvasKit())), J.get$ExtraLight$x(J.get$FontWeight$x(A.canvasKit())), J.get$Light$x(J.get$FontWeight$x(A.canvasKit())), J.get$Normal$x(J.get$FontWeight$x(A.canvasKit())), J.get$Medium$x(J.get$FontWeight$x(A.canvasKit())), J.get$SemiBold$x(J.get$FontWeight$x(A.canvasKit())), J.get$Bold$x(J.get$FontWeight$x(A.canvasKit())), J.get$ExtraBold$x(J.get$FontWeight$x(A.canvasKit())), J.get$ExtraBlack$x(J.get$FontWeight$x(A.canvasKit()))], A.findType("JSArray<SkFontWeight>")));
    _lazyFinal($, "_skTextDirections", "$get$_skTextDirections", () => A._setArrayType([J.get$RTL$x(J.get$TextDirection$x(A.canvasKit())), J.get$LTR$x(J.get$TextDirection$x(A.canvasKit()))], A.findType("JSArray<SkTextDirection>")));
    _lazyFinal($, "_skTextAligns", "$get$_skTextAligns", () => A._setArrayType([J.get$Left$x(J.get$TextAlign$x(A.canvasKit())), J.get$Right$x(J.get$TextAlign$x(A.canvasKit())), J.get$Center$x(J.get$TextAlign$x(A.canvasKit())), J.get$Justify$x(J.get$TextAlign$x(A.canvasKit())), J.get$Start$x(J.get$TextAlign$x(A.canvasKit())), J.get$End$x(J.get$TextAlign$x(A.canvasKit()))], A.findType("JSArray<SkTextAlign>")));
    _lazyFinal($, "_skTextHeightBehaviors", "$get$_skTextHeightBehaviors", () => A._setArrayType([J.get$All$x(J.get$TextHeightBehavior$x(A.canvasKit())), J.get$DisableFirstAscent$x(J.get$TextHeightBehavior$x(A.canvasKit())), J.get$DisableLastDescent$x(J.get$TextHeightBehavior$x(A.canvasKit())), J.get$DisableAll$x(J.get$TextHeightBehavior$x(A.canvasKit()))], A.findType("JSArray<SkTextHeightBehavior>")));
    _lazyFinal($, "_skRectHeightStyles", "$get$_skRectHeightStyles", () => A._setArrayType([J.get$Tight$x(J.get$RectHeightStyle$x(A.canvasKit())), J.get$Max$x(J.get$RectHeightStyle$x(A.canvasKit())), J.get$IncludeLineSpacingMiddle$x(J.get$RectHeightStyle$x(A.canvasKit())), J.get$IncludeLineSpacingTop$x(J.get$RectHeightStyle$x(A.canvasKit())), J.get$IncludeLineSpacingBottom$x(J.get$RectHeightStyle$x(A.canvasKit())), J.get$Strut$x(J.get$RectHeightStyle$x(A.canvasKit()))], A.findType("JSArray<SkRectHeightStyle>")));
    _lazyFinal($, "_skRectWidthStyles", "$get$_skRectWidthStyles", () => A._setArrayType([J.get$Tight$x(J.get$RectWidthStyle$x(A.canvasKit())), J.get$Max$x(J.get$RectWidthStyle$x(A.canvasKit()))], A.findType("JSArray<SkRectWidthStyle>")));
    _lazyFinal($, "_skClipOps", "$get$_skClipOps", () => A._setArrayType([J.get$Difference$x(J.get$ClipOp$x(A.canvasKit())), J.get$Intersect$x(J.get$ClipOp$x(A.canvasKit()))], A.findType("JSArray<SkClipOp>")));
    _lazyFinal($, "_skFillTypes", "$get$_skFillTypes", () => A._setArrayType([J.get$Winding$x(J.get$FillType$x(A.canvasKit())), J.get$EvenOdd$x(J.get$FillType$x(A.canvasKit()))], A.findType("JSArray<SkFillType>")));
    _lazyFinal($, "_skBlurStyles", "$get$_skBlurStyles", () => A._setArrayType([J.get$Normal$x(J.get$BlurStyle$x(A.canvasKit())), J.get$Solid$x(J.get$BlurStyle$x(A.canvasKit())), J.get$Outer$x(J.get$BlurStyle$x(A.canvasKit())), J.get$Inner$x(J.get$BlurStyle$x(A.canvasKit()))], A.findType("JSArray<SkBlurStyle>")));
    _lazyFinal($, "_skStrokeCaps", "$get$_skStrokeCaps", () => A._setArrayType([J.get$Butt$x(J.get$StrokeCap$x(A.canvasKit())), J.get$Round$x(J.get$StrokeCap$x(A.canvasKit())), J.get$Square$x(J.get$StrokeCap$x(A.canvasKit()))], A.findType("JSArray<SkStrokeCap>")));
    _lazyFinal($, "_skPaintStyles", "$get$_skPaintStyles", () => A._setArrayType([J.get$Fill$x(J.get$PaintStyle$x(A.canvasKit())), J.get$Stroke$x(J.get$PaintStyle$x(A.canvasKit()))], A.findType("JSArray<SkPaintStyle>")));
    _lazyFinal($, "_skBlendModes", "$get$_skBlendModes", () => A._setArrayType([J.get$Clear$x(J.get$BlendMode$x(A.canvasKit())), J.get$Src$x(J.get$BlendMode$x(A.canvasKit())), J.get$Dst$x(J.get$BlendMode$x(A.canvasKit())), J.get$SrcOver$x(J.get$BlendMode$x(A.canvasKit())), J.get$DstOver$x(J.get$BlendMode$x(A.canvasKit())), J.get$SrcIn$x(J.get$BlendMode$x(A.canvasKit())), J.get$DstIn$x(J.get$BlendMode$x(A.canvasKit())), J.get$SrcOut$x(J.get$BlendMode$x(A.canvasKit())), J.get$DstOut$x(J.get$BlendMode$x(A.canvasKit())), J.get$SrcATop$x(J.get$BlendMode$x(A.canvasKit())), J.get$DstATop$x(J.get$BlendMode$x(A.canvasKit())), J.get$Xor$x(J.get$BlendMode$x(A.canvasKit())), J.get$Plus$x(J.get$BlendMode$x(A.canvasKit())), J.get$Modulate$x(J.get$BlendMode$x(A.canvasKit())), J.get$Screen$x(J.get$BlendMode$x(A.canvasKit())), J.get$Overlay$x(J.get$BlendMode$x(A.canvasKit())), J.get$Darken$x(J.get$BlendMode$x(A.canvasKit())), J.get$Lighten$x(J.get$BlendMode$x(A.canvasKit())), J.get$ColorDodge$x(J.get$BlendMode$x(A.canvasKit())), J.get$ColorBurn$x(J.get$BlendMode$x(A.canvasKit())), J.get$HardLight$x(J.get$BlendMode$x(A.canvasKit())), J.get$SoftLight$x(J.get$BlendMode$x(A.canvasKit())), J.get$Difference$x(J.get$BlendMode$x(A.canvasKit())), J.get$Exclusion$x(J.get$BlendMode$x(A.canvasKit())), J.get$Multiply$x(J.get$BlendMode$x(A.canvasKit())), J.get$Hue$x(J.get$BlendMode$x(A.canvasKit())), J.get$Saturation$x(J.get$BlendMode$x(A.canvasKit())), J.get$Color$x(J.get$BlendMode$x(A.canvasKit())), J.get$Luminosity$x(J.get$BlendMode$x(A.canvasKit()))], A.findType("JSArray<SkBlendMode>")));
    _lazyFinal($, "_skStrokeJoins", "$get$_skStrokeJoins", () => A._setArrayType([J.get$Miter$x(J.get$StrokeJoin$x(A.canvasKit())), J.get$Round$x(J.get$StrokeJoin$x(A.canvasKit())), J.get$Bevel$x(J.get$StrokeJoin$x(A.canvasKit()))], A.findType("JSArray<SkStrokeJoin>")));
    _lazyFinal($, "_skTileModes", "$get$_skTileModes", () => A._setArrayType([J.get$Clamp$x(J.get$TileMode$x(A.canvasKit())), J.get$Repeat$x(J.get$TileMode$x(A.canvasKit())), J.get$Mirror$x(J.get$TileMode$x(A.canvasKit())), J.get$Decal$x(J.get$TileMode$x(A.canvasKit()))], A.findType("JSArray<SkTileMode>")));
    _lazyFinal($, "_kDefaultSkColorStops", "$get$_kDefaultSkColorStops", () => {
      var t1 = A.NativeFloat32List_NativeFloat32List(2);
      t1[0] = 0;
      t1[1] = 1;
      return t1;
    });
    _lazyFinal($, "_sharedSkColor1", "$get$_sharedSkColor1", () => self.window.flutterCanvasKit.Malloc(self.Float32Array, 4));
    _lazyFinal($, "_skTextBaselines", "$get$_skTextBaselines", () => A._setArrayType([J.get$Alphabetic$x(J.get$TextBaseline$x(A.canvasKit())), J.get$Ideographic$x(J.get$TextBaseline$x(A.canvasKit()))], A.findType("JSArray<SkTextBaseline>")));
    _lazyFinal($, "Collector__productionInstance", "$get$Collector__productionInstance", () => A.ProductionCollector$());
    _lazy($, "Collector__instance", "$get$Collector__instance", () => $.$get$Collector__productionInstance());
    _lazy($, "browserSupportsFinalizationRegistry", "$get$browserSupportsFinalizationRegistry", () => self.window.FinalizationRegistry != null);
    _lazy($, "HtmlViewEmbedder_instance", "$get$HtmlViewEmbedder_instance", () => {
      var t1 = type$.int,
        t2 = type$.JSArray_int;
      return new A.HtmlViewEmbedder(A.LinkedHashSet_LinkedHashSet$_empty(t1), A._setArrayType([], A.findType("JSArray<CkPictureRecorder>")), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.CkPictureRecorder), A.LinkedHashMap_LinkedHashMap$_empty(t1, A.findType("EmbeddedViewParams")), A.LinkedHashMap_LinkedHashMap$_empty(t1, A.findType("ViewClipChain")), A.LinkedHashMap_LinkedHashMap$_empty(t1, A.findType("Surface")), A.LinkedHashSet_LinkedHashSet$_empty(t1), A._setArrayType([], t2), A._setArrayType([], t2), $.$get$window().get$physicalSize(), A.LinkedHashMap_LinkedHashMap$_empty(t1, A.findType("Set<String>")));
    });
    _lazy($, "FontFallbackData__instance", "$get$FontFallbackData__instance", () => {
      var t1 = type$.int;
      return new A.FontFallbackData(A.LinkedHashSet_LinkedHashSet$_empty(t1), A.LinkedHashSet_LinkedHashSet$_empty(t1), A.FontFallbackData_createNotoFontTree(), A._setArrayType([], type$.JSArray_RegisteredFont), A._setArrayType(["Roboto"], type$.JSArray_String), A.LinkedHashMap_LinkedHashMap$_empty(type$.String, t1), A.LinkedHashSet_LinkedHashSet$_empty(t1));
    });
    _lazy($, "_notoSansSC", "$get$_notoSansSC", () => A.NotoFont$("Noto Sans SC", A._setArrayType([B.CodeunitRange_12288_12591, B.CodeunitRange_12800_13311, B.CodeunitRange_19968_40959, B.CodeunitRange_65072_65135, B.CodeunitRange_65280_65519], type$.JSArray_CodeunitRange)));
    _lazy($, "_notoSansTC", "$get$_notoSansTC", () => A.NotoFont$("Noto Sans TC", A._setArrayType([B.CodeunitRange_12288_12351, B.CodeunitRange_12549_12585, B.CodeunitRange_19968_40959], type$.JSArray_CodeunitRange)));
    _lazy($, "_notoSansHK", "$get$_notoSansHK", () => A.NotoFont$("Noto Sans HK", A._setArrayType([B.CodeunitRange_12288_12351, B.CodeunitRange_12549_12585, B.CodeunitRange_19968_40959], type$.JSArray_CodeunitRange)));
    _lazy($, "_notoSansJP", "$get$_notoSansJP", () => A.NotoFont$("Noto Sans JP", A._setArrayType([B.CodeunitRange_12288_12543, B.CodeunitRange_19968_40959, B.CodeunitRange_65280_65519], type$.JSArray_CodeunitRange)));
    _lazy($, "_cjkFonts", "$get$_cjkFonts", () => A._setArrayType([$.$get$_notoSansSC(), $.$get$_notoSansTC(), $.$get$_notoSansHK(), $.$get$_notoSansJP()], type$.JSArray_NotoFont));
    _lazy($, "_notoFonts", "$get$_notoFonts", () => {
      var t1 = type$.JSArray_CodeunitRange;
      return A._setArrayType([$.$get$_notoSansSC(), $.$get$_notoSansTC(), $.$get$_notoSansHK(), $.$get$_notoSansJP(), A.NotoFont$("Noto Naskh Arabic UI", A._setArrayType([B.CodeunitRange_1536_1791, B.CodeunitRange_8204_8206, B.CodeunitRange_8208_8209, B.CodeunitRange_8271_8271, B.CodeunitRange_11841_11841, B.CodeunitRange_64336_65023, B.CodeunitRange_65132_65276], t1)), A.NotoFont$("Noto Sans Armenian", A._setArrayType([B.CodeunitRange_1328_1424, B.CodeunitRange_64275_64279], t1)), A.NotoFont$("Noto Sans Bengali UI", A._setArrayType([B.CodeunitRange_2404_2405, B.CodeunitRange_2433_2555, B.CodeunitRange_8204_8205, B.CodeunitRange_8377_8377, B.CodeunitRange_9676_9676], t1)), A.NotoFont$("Noto Sans Myanmar UI", A._setArrayType([B.CodeunitRange_4096_4255, B.CodeunitRange_8204_8205, B.CodeunitRange_9676_9676], t1)), A.NotoFont$("Noto Sans Egyptian Hieroglyphs", A._setArrayType([B.CodeunitRange_77824_78894], t1)), A.NotoFont$("Noto Sans Ethiopic", A._setArrayType([B.CodeunitRange_4608_5017, B.CodeunitRange_11648_11742, B.CodeunitRange_43777_43822], t1)), A.NotoFont$("Noto Sans Georgian", A._setArrayType([B.CodeunitRange_1417_1417, B.CodeunitRange_4256_4351, B.CodeunitRange_11520_11567], t1)), A.NotoFont$("Noto Sans Gujarati UI", A._setArrayType([B.CodeunitRange_2404_2405, B.CodeunitRange_2688_2815, B.CodeunitRange_8204_8205, B.CodeunitRange_8377_8377, B.CodeunitRange_9676_9676, B.CodeunitRange_43056_43065], t1)), A.NotoFont$("Noto Sans Gurmukhi UI", A._setArrayType([B.CodeunitRange_2404_2405, B.CodeunitRange_2561_2677, B.CodeunitRange_8204_8205, B.CodeunitRange_8377_8377, B.CodeunitRange_9676_9676, B.CodeunitRange_9772_9772, B.CodeunitRange_43056_43065], t1)), A.NotoFont$("Noto Sans Hebrew", A._setArrayType([B.CodeunitRange_1424_1535, B.CodeunitRange_8362_8362, B.CodeunitRange_9676_9676, B.CodeunitRange_64285_64335], t1)), A.NotoFont$("Noto Sans Devanagari UI", A._setArrayType([B.CodeunitRange_2304_2431, B.CodeunitRange_7376_7414, B.CodeunitRange_7416_7417, B.CodeunitRange_8204_8205, B.CodeunitRange_8360_8360, B.CodeunitRange_8377_8377, B.CodeunitRange_9676_9676, B.CodeunitRange_43056_43065, B.CodeunitRange_43232_43259], t1)), A.NotoFont$("Noto Sans Kannada UI", A._setArrayType([B.CodeunitRange_2404_2405, B.CodeunitRange_3202_3314, B.CodeunitRange_8204_8205, B.CodeunitRange_8377_8377, B.CodeunitRange_9676_9676], t1)), A.NotoFont$("Noto Sans Khmer UI", A._setArrayType([B.CodeunitRange_6016_6143, B.CodeunitRange_8204_8204, B.CodeunitRange_9676_9676], t1)), A.NotoFont$("Noto Sans KR", A._setArrayType([B.CodeunitRange_12593_12686, B.CodeunitRange_12800_12828, B.CodeunitRange_12896_12923, B.CodeunitRange_44032_55215], t1)), A.NotoFont$("Noto Sans Lao UI", A._setArrayType([B.CodeunitRange_3713_3807, B.CodeunitRange_9676_9676], t1)), A.NotoFont$("Noto Sans Malayalam UI", A._setArrayType([B.CodeunitRange_775_775, B.CodeunitRange_803_803, B.CodeunitRange_2404_2405, B.CodeunitRange_3330_3455, B.CodeunitRange_8204_8205, B.CodeunitRange_8377_8377, B.CodeunitRange_9676_9676], t1)), A.NotoFont$("Noto Sans Sinhala", A._setArrayType([B.CodeunitRange_2404_2405, B.CodeunitRange_3458_3572, B.CodeunitRange_8204_8205, B.CodeunitRange_9676_9676], t1)), A.NotoFont$("Noto Sans Tamil UI", A._setArrayType([B.CodeunitRange_2404_2405, B.CodeunitRange_2946_3066, B.CodeunitRange_8204_8205, B.CodeunitRange_8377_8377, B.CodeunitRange_9676_9676], t1)), A.NotoFont$("Noto Sans Telugu UI", A._setArrayType([B.CodeunitRange_2385_2386, B.CodeunitRange_2404_2405, B.CodeunitRange_3072_3199, B.CodeunitRange_7386_7386, B.CodeunitRange_8204_8205, B.CodeunitRange_9676_9676], t1)), A.NotoFont$("Noto Sans Thai UI", A._setArrayType([B.CodeunitRange_3585_3675, B.CodeunitRange_8204_8205, B.CodeunitRange_9676_9676], t1)), A.NotoFont$("Noto Sans", A._setArrayType([B.CodeunitRange_0_255, B.CodeunitRange_305_305, B.CodeunitRange_338_339, B.CodeunitRange_699_700, B.CodeunitRange_710_710, B.CodeunitRange_730_730, B.CodeunitRange_732_732, B.CodeunitRange_8192_8303, B.CodeunitRange_8308_8308, B.CodeunitRange_8364_8364, B.CodeunitRange_8482_8482, B.CodeunitRange_8593_8593, B.CodeunitRange_8595_8595, B.CodeunitRange_8722_8722, B.CodeunitRange_8725_8725, B.CodeunitRange_65279_65279, B.CodeunitRange_65533_65533, B.CodeunitRange_1024_1119, B.CodeunitRange_1168_1169, B.CodeunitRange_1200_1201, B.CodeunitRange_8470_8470, B.CodeunitRange_1120_1327, B.CodeunitRange_7296_7304, B.CodeunitRange_8372_8372, B.CodeunitRange_11744_11775, B.CodeunitRange_42560_42655, B.CodeunitRange_65070_65071, B.CodeunitRange_880_1023, B.CodeunitRange_7936_8191, B.CodeunitRange_256_591, B.CodeunitRange_601_601, B.CodeunitRange_7680_7935, B.CodeunitRange_8224_8224, B.CodeunitRange_8352_8363, B.CodeunitRange_8365_8399, B.CodeunitRange_8467_8467, B.CodeunitRange_11360_11391, B.CodeunitRange_42784_43007, B.CodeunitRange_258_259, B.CodeunitRange_272_273, B.CodeunitRange_296_297, B.CodeunitRange_360_361, B.CodeunitRange_416_417, B.CodeunitRange_431_432, B.CodeunitRange_7840_7929, B.CodeunitRange_8363_8363], t1))], type$.JSArray_NotoFont);
    });
    _lazy($, "notoDownloadQueue", "$get$notoDownloadQueue", () => {
      var t1 = type$._ResolvedNotoSubset;
      return new A.FallbackFontDownloadQueue(new A.NotoDownloader(), A.LinkedHashSet_LinkedHashSet$_empty(t1), A.LinkedHashMap_LinkedHashMap$_empty(type$.String, t1));
    });
    _lazyFinal($, "useCanvasKit", "$get$useCanvasKit", () => {
      var t1 = $.$get$_hasCanvasKit();
      return t1;
    });
    _lazyFinal($, "_hasCanvasKit", "$get$_hasCanvasKit", () => A._detectCanvasKit());
    _lazyFinal($, "SkiaObjects_expensiveCache", "$get$SkiaObjects_expensiveCache", () => {
      var t1 = A.findType("SkiaObject<Object>");
      return new A.SkiaObjectCache(1024, A.DoubleLinkedQueue$(t1), A.LinkedHashMap_LinkedHashMap$_empty(t1, A.findType("DoubleLinkedQueueEntry<SkiaObject<Object>>")));
    });
    _lazy($, "CkParagraph__paragraphCache", "$get$CkParagraph__paragraphCache", () => {
      var t1 = A.findType("SkiaObject<Object>");
      return new A.SynchronousSkiaObjectCache(500, A.DoubleLinkedQueue$(t1), A.LinkedHashMap_LinkedHashMap$_empty(t1, A.findType("DoubleLinkedQueueEntry<SkiaObject<Object>>")));
    });
    _lazyFinal($, "CkParagraphBuilder__defaultTextForeground", "$get$CkParagraphBuilder__defaultTextForeground", () => new self.window.flutterCanvasKit.Paint());
    _lazyFinal($, "CkParagraphBuilder__defaultTextBackground", "$get$CkParagraphBuilder__defaultTextBackground", () => {
      var t1 = new self.window.flutterCanvasKit.Paint();
      J.setColorInt$1$x(t1, 0);
      return t1;
    });
    _lazyFinal($, "_fontChangeMessage", "$get$_fontChangeMessage", () => B.C_JSONMessageCodec.encodeMessage$1(A.LinkedHashMap_LinkedHashMap$_literal(["type", "fontsChange"], type$.String, type$.dynamic)));
    _lazyFinal($, "kSvgResourceHeader", "$get$kSvgResourceHeader", () => {
      var t1 = A.SvgSvgElement_SvgSvgElement();
      t1.setAttribute("width", 0);
      t1.setAttribute("height", 0);
      B.CssStyleDeclaration_methods.set$position(t1.style, "absolute");
      return t1;
    });
    _lazyFinal($, "_PaintBounds__tempRectData", "$get$_PaintBounds__tempRectData", () => A.NativeFloat32List_NativeFloat32List(4));
    _lazyFinal($, "VertexShaders_vertexIndicesForRect", "$get$VertexShaders_vertexIndicesForRect", () => A.NativeUint16List_NativeUint16List$fromList(A._setArrayType([0, 1, 2, 2, 3, 0], type$.JSArray_int)));
    _lazyFinal($, "platformViewManager", "$get$platformViewManager", () => {
      var t1 = type$.String,
        t2 = type$.int;
      return new A.PlatformViewManager(A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Function), A.LinkedHashMap_LinkedHashMap$_empty(t2, type$.Element), A.LinkedHashSet_LinkedHashSet$_empty(t1), A.LinkedHashMap_LinkedHashMap$_empty(t2, t1));
    });
    _lazyFinal($, "_kLogicalAltLeft", "$get$_kLogicalAltLeft", () => {
      var t1 = B.Map_8TmdZ.$index(0, "Alt")[1];
      t1.toString;
      return t1;
    });
    _lazyFinal($, "_kLogicalAltRight", "$get$_kLogicalAltRight", () => {
      var t1 = B.Map_8TmdZ.$index(0, "Alt")[2];
      t1.toString;
      return t1;
    });
    _lazyFinal($, "_kLogicalControlLeft", "$get$_kLogicalControlLeft", () => {
      var t1 = B.Map_8TmdZ.$index(0, "Control")[1];
      t1.toString;
      return t1;
    });
    _lazyFinal($, "_kLogicalControlRight", "$get$_kLogicalControlRight", () => {
      var t1 = B.Map_8TmdZ.$index(0, "Control")[2];
      t1.toString;
      return t1;
    });
    _lazyFinal($, "_kLogicalShiftLeft", "$get$_kLogicalShiftLeft", () => {
      var t1 = B.Map_8TmdZ.$index(0, "Shift")[1];
      t1.toString;
      return t1;
    });
    _lazyFinal($, "_kLogicalShiftRight", "$get$_kLogicalShiftRight", () => {
      var t1 = B.Map_8TmdZ.$index(0, "Shift")[2];
      t1.toString;
      return t1;
    });
    _lazyFinal($, "_kLogicalMetaLeft", "$get$_kLogicalMetaLeft", () => {
      var t1 = B.Map_8TmdZ.$index(0, "Meta")[1];
      t1.toString;
      return t1;
    });
    _lazyFinal($, "_kLogicalMetaRight", "$get$_kLogicalMetaRight", () => {
      var t1 = B.Map_8TmdZ.$index(0, "Meta")[2];
      t1.toString;
      return t1;
    });
    _lazyFinal($, "_kLogicalKeyToModifierGetter", "$get$_kLogicalKeyToModifierGetter", () => A.LinkedHashMap_LinkedHashMap$_literal([$.$get$_kLogicalAltLeft(), new A._kLogicalKeyToModifierGetter_closure(), $.$get$_kLogicalAltRight(), new A._kLogicalKeyToModifierGetter_closure0(), $.$get$_kLogicalControlLeft(), new A._kLogicalKeyToModifierGetter_closure1(), $.$get$_kLogicalControlRight(), new A._kLogicalKeyToModifierGetter_closure2(), $.$get$_kLogicalShiftLeft(), new A._kLogicalKeyToModifierGetter_closure3(), $.$get$_kLogicalShiftRight(), new A._kLogicalKeyToModifierGetter_closure4(), $.$get$_kLogicalMetaLeft(), new A._kLogicalKeyToModifierGetter_closure5(), $.$get$_kLogicalMetaRight(), new A._kLogicalKeyToModifierGetter_closure6()], type$.int, A.findType("bool(FlutterHtmlKeyboardEvent)")));
    _lazyFinal($, "EnginePlatformDispatcher__instance", "$get$EnginePlatformDispatcher__instance", () => {
      var t1 = type$.Object;
      t1 = new A.EnginePlatformDispatcher(A.PlatformConfiguration$(B.C_AccessibilityFeatures, false, "/", A.EnginePlatformDispatcher_parseBrowserLanguages(), B.Brightness_1, false, A.findBrowserTextScaleFactor()), A.LinkedHashMap_LinkedHashMap$_empty(t1, A.findType("FlutterWindow")), A.LinkedHashMap_LinkedHashMap$_empty(t1, A.findType("ViewConfiguration0")), A.window().matchMedia("(prefers-color-scheme: dark)"));
      t1._addBrightnessMediaQueryListener$0();
      t1._addFontSizeObserver$0();
      return t1;
    });
    _lazy($, "_frameTimingsLastSubmitTime", "$get$_frameTimingsLastSubmitTime", () => A._nowMicros());
    _lazyFinal($, "supportsFontLoadingApi", "$get$supportsFontLoadingApi", () => A.hasProperty(A.window(), "FontFace"));
    _lazyFinal($, "supportsFontsClearApi", "$get$supportsFontsClearApi", () => {
      if (A.hasProperty(A.document(), "fonts")) {
        var t1 = A.document().fonts;
        t1.toString;
        t1 = A.hasProperty(t1, "clear");
      } else
        t1 = false;
      return t1;
    });
    _lazyFinal($, "accessibilityAnnouncements", "$get$accessibilityAnnouncements", () => {
      var t1 = $.AccessibilityAnnouncements__instance;
      return t1 == null ? $.AccessibilityAnnouncements__instance = A.AccessibilityAnnouncements$_() : t1;
    });
    _lazyFinal($, "_roleFactories", "$get$_roleFactories", () => A.LinkedHashMap_LinkedHashMap$_literal([B.Role_0, new A._roleFactories_closure(), B.Role_1, new A._roleFactories_closure0(), B.Role_2, new A._roleFactories_closure1(), B.Role_3, new A._roleFactories_closure2(), B.Role_4, new A._roleFactories_closure3(), B.Role_5, new A._roleFactories_closure4(), B.Role_6, new A._roleFactories_closure5(), B.Role_7, new A._roleFactories_closure6()], type$.Role, A.findType("RoleManager(SemanticsObject)")));
    _lazyFinal($, "FontManager_notPunctuation", "$get$FontManager_notPunctuation", () => A.RegExp_RegExp("[a-z0-9\\s]+", false));
    _lazyFinal($, "FontManager_startWithDigit", "$get$FontManager_startWithDigit", () => A.RegExp_RegExp("\\b\\d", true));
    _lazy($, "Spanometer__rulerHost", "$get$Spanometer__rulerHost", () => {
      var t1 = A.Element_Element$tag("flt-ruler-host"),
        t2 = new A.RulerHost(t1),
        t3 = t1.style;
      B.CssStyleDeclaration_methods.set$position(t3, "fixed");
      B.CssStyleDeclaration_methods.set$visibility(t3, "hidden");
      B.CssStyleDeclaration_methods.set$overflow(t3, "hidden");
      B.CssStyleDeclaration_methods.set$top(t3, "0");
      B.CssStyleDeclaration_methods.set$left(t3, "0");
      B.CssStyleDeclaration_methods.set$width(t3, "0");
      B.CssStyleDeclaration_methods.set$height(t3, "0");
      t3 = A.ensureFlutterViewEmbedderInitialized()._glassPaneShadow.get$node();
      t3.appendChild(t1);
      A.registerHotRestartListener(t2.get$dispose(t2));
      return t2;
    });
    _lazyFinal($, "_textDirectionLookup", "$get$_textDirectionLookup", () => A.UnicodePropertyLookup$(A._setArrayType([B.UnicodeRange_65_90_TextDirection_1, B.UnicodeRange_97_122_TextDirection_1, B.UnicodeRange_192_214_TextDirection_1, B.UnicodeRange_216_246_TextDirection_1, B.UnicodeRange_248_696_TextDirection_1, B.UnicodeRange_768_1424_TextDirection_1, B.UnicodeRange_1425_1775_TextDirection_0, B.UnicodeRange_1786_2303_TextDirection_0, B.UnicodeRange_2304_8191_TextDirection_1, B.UnicodeRange_8206_8206_TextDirection_1, B.UnicodeRange_8207_8207_TextDirection_0, B.UnicodeRange_11264_55297_TextDirection_1, B.UnicodeRange_55298_55299_TextDirection_0, B.UnicodeRange_55300_55353_TextDirection_1, B.UnicodeRange_55354_55355_TextDirection_0, B.UnicodeRange_55356_56319_TextDirection_1, B.UnicodeRange_63744_64284_TextDirection_1, B.UnicodeRange_64285_65023_TextDirection_0, B.UnicodeRange_65024_65135_TextDirection_1, B.UnicodeRange_65136_65276_TextDirection_0, B.UnicodeRange_65277_65535_TextDirection_1], A.findType("JSArray<UnicodeRange<TextDirection>>")), null, A.findType("TextDirection?")));
    _lazyFinal($, "BrowserAutofillHints__singletonInstance", "$get$BrowserAutofillHints__singletonInstance", () => {
      var t1 = type$.String;
      return new A.BrowserAutofillHints(A.LinkedHashMap_LinkedHashMap$_literal(["birthday", "bday", "birthdayDay", "bday-day", "birthdayMonth", "bday-month", "birthdayYear", "bday-year", "countryCode", "country", "countryName", "country-name", "creditCardExpirationDate", "cc-exp", "creditCardExpirationMonth", "cc-exp-month", "creditCardExpirationYear", "cc-exp-year", "creditCardFamilyName", "cc-family-name", "creditCardGivenName", "cc-given-name", "creditCardMiddleName", "cc-additional-name", "creditCardName", "cc-name", "creditCardNumber", "cc-number", "creditCardSecurityCode", "cc-csc", "creditCardType", "cc-type", "email", "email", "familyName", "family-name", "fullStreetAddress", "street-address", "gender", "sex", "givenName", "given-name", "impp", "impp", "jobTitle", "organization-title", "language", "language", "middleName", "middleName", "name", "name", "namePrefix", "honorific-prefix", "nameSuffix", "honorific-suffix", "newPassword", "new-password", "nickname", "nickname", "oneTimeCode", "one-time-code", "organizationName", "organization", "password", "current-password", "photo", "photo", "postalCode", "postal-code", "streetAddressLevel1", "address-level1", "streetAddressLevel2", "address-level2", "streetAddressLevel3", "address-level3", "streetAddressLevel4", "address-level4", "streetAddressLine1", "address-line1", "streetAddressLine2", "address-line2", "streetAddressLine3", "address-line3", "telephoneNumber", "tel", "telephoneNumberAreaCode", "tel-area-code", "telephoneNumberCountryCode", "tel-country-code", "telephoneNumberExtension", "tel-extension", "telephoneNumberLocal", "tel-local", "telephoneNumberLocalPrefix", "tel-local-prefix", "telephoneNumberLocalSuffix", "tel-local-suffix", "telephoneNumberNational", "tel-national", "transactionAmount", "transaction-amount", "transactionCurrency", "transaction-currency", "url", "url", "username", "username"], t1, t1));
    });
    _lazyFinal($, "textEditing", "$get$textEditing", () => new A.HybridTextEditing());
    _lazyFinal($, "_tempRectData", "$get$_tempRectData", () => A.NativeFloat32List_NativeFloat32List(4));
    _lazyFinal($, "_tempPointData", "$get$_tempPointData", () => A.NativeFloat32List_NativeFloat32List(16));
    _lazyFinal($, "_tempPointMatrix", "$get$_tempPointMatrix", () => A.Matrix4$fromFloat32List($.$get$_tempPointData()));
    _lazy($, "printWarning", "$get$printWarning", () => {
      A.window();
      return B.C_Console.get$warn();
    });
    _lazyFinal($, "window0", "$get$window", () => A.EngineSingletonFlutterWindow$(0, $.$get$EnginePlatformDispatcher__instance()));
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartClosure"));
    _lazyFinal($, "nullFuture", "$get$nullFuture", () => B.C__RootZone.run$1(new A.nullFuture_closure()));
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", () => A._AsyncRun__initializeScheduleImmediate());
    _lazyFinal($, "Future__nullFuture", "$get$Future__nullFuture", () => A.findType("_Future<Null>")._as($.$get$nullFuture()));
    _lazyFinal($, "Utf8Decoder__decoder", "$get$Utf8Decoder__decoder", () => new A.Utf8Decoder__decoder_closure().call$0());
    _lazyFinal($, "Utf8Decoder__decoderNonfatal", "$get$Utf8Decoder__decoderNonfatal", () => new A.Utf8Decoder__decoderNonfatal_closure().call$0());
    _lazyFinal($, "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", () => A.NativeInt8List__create1(A._ensureNativeList(A._setArrayType([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2], type$.JSArray_int))));
    _lazyFinal($, "_Uri__needsNoEncoding", "$get$_Uri__needsNoEncoding", () => A.RegExp_RegExp("^[\\-\\.0-9A-Z_a-z~]*$", true));
    _lazy($, "_hasErrorStackProperty", "$get$_hasErrorStackProperty", () => new Error().stack != void 0);
    _lazyFinal($, "_hashSeed", "$get$_hashSeed", () => A.objectHashCode(B.Type_Object_xQ6));
    _lazyFinal($, "Stopwatch__frequency", "$get$Stopwatch__frequency", () => {
      A.Primitives_initTicker();
      return $.Primitives_timerFrequency;
    });
    _lazyFinal($, "_scannerTables", "$get$_scannerTables", () => A._createTables());
    _lazyFinal($, "_FakeUserTag__defaultTag", "$get$_FakeUserTag__defaultTag", () => A._FakeUserTag__FakeUserTag("Default"));
    _lazy($, "_currentTag", "$get$_currentTag", () => $.$get$_FakeUserTag__defaultTag());
    _lazyFinal($, "CssStyleDeclaration__propertyCache", "$get$CssStyleDeclaration__propertyCache", () => ({}));
    _lazyFinal($, "_Html5NodeValidator__allowedElements", "$get$_Html5NodeValidator__allowedElements", () => A.LinkedHashSet_LinkedHashSet$from(["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"], type$.String));
    _lazyFinal($, "Device_isOpera", "$get$Device_isOpera", () => B.JSString_methods.contains$2(A.Device_userAgent(), "Opera", 0));
    _lazyFinal($, "Device_isIE", "$get$Device_isIE", () => !$.$get$Device_isOpera() && B.JSString_methods.contains$2(A.Device_userAgent(), "Trident/", 0));
    _lazyFinal($, "Device_isFirefox", "$get$Device_isFirefox", () => B.JSString_methods.contains$2(A.Device_userAgent(), "Firefox", 0));
    _lazyFinal($, "Device_isWebKit", "$get$Device_isWebKit", () => !$.$get$Device_isOpera() && B.JSString_methods.contains$2(A.Device_userAgent(), "WebKit", 0));
    _lazyFinal($, "Device_cssPrefix", "$get$Device_cssPrefix", () => "-" + $.$get$Device_propertyPrefix() + "-");
    _lazyFinal($, "Device_propertyPrefix", "$get$Device_propertyPrefix", () => {
      if ($.$get$Device_isFirefox())
        var t1 = "moz";
      else if ($.$get$Device_isIE())
        t1 = "ms";
      else
        t1 = $.$get$Device_isOpera() ? "o" : "webkit";
      return t1;
    });
    _lazyFinal($, "_context", "$get$_context", () => A._castToJsObject(A._wrapToDart(self)));
    _lazyFinal($, "_DART_OBJECT_PROPERTY_NAME", "$get$_DART_OBJECT_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartObject"));
    _lazyFinal($, "_dartProxyCtor", "$get$_dartProxyCtor", () => function DartObject(o) {
      this.o = o;
    });
    _lazyFinal($, "Endian_host", "$get$Endian_host", () => A.NativeByteData_NativeByteData$view(A.NativeUint16List_NativeUint16List$fromList(A._setArrayType([1], type$.JSArray_int)).buffer, 0, null).getInt8(0) === 1 ? B.C_Endian : B.C_Endian0);
    _lazyFinal($, "channelBuffers", "$get$channelBuffers", () => new A.ChannelBuffers(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, A.findType("_Channel"))));
    _lazyFinal($, "_testPlatform", "$get$_testPlatform", () => new A._testPlatform_closure().call$0());
    _lazyFinal($, "_browserPlatform", "$get$_browserPlatform", () => new A._browserPlatform_closure().call$0());
    _lazy($, "FlutterError_onError", "$get$FlutterError_onError", () => $.FlutterError_presentError);
    _lazyFinal($, "ChangeNotifier__emptyListeners", "$get$ChangeNotifier__emptyListeners", () => A.List_List$filled(0, null, false, type$.nullable_void_Function));
    _lazyFinal($, "sparseTextConfiguration", "$get$sparseTextConfiguration", () => A.TextTreeConfiguration$(true, "", ":", "", "", "", "", "", true, false, "\n", true, "\u2502", "", "\u2514\u2500", "\u251c\u2500", " ", " ", "\u2502 ", "  ", "", true, ""));
    _lazyFinal($, "dashedTextConfiguration", "$get$dashedTextConfiguration", () => A.TextTreeConfiguration$(true, "", ":", "", "", "", "", "", true, false, "\n", true, "\u254e", "", "\u2514\u254c", "\u254e\u254c", " ", " ", "\u2502 ", "  ", "", true, ""));
    _lazyFinal($, "denseTextConfiguration", "$get$denseTextConfiguration", () => A.TextTreeConfiguration$(false, "", ":", ")", "", "(", "", "", false, false, "\n", false, "\u2502", "", "\u2514", "\u251c", "", "", "\u2502", " ", ", ", true, ""));
    _lazyFinal($, "transitionTextConfiguration", "$get$transitionTextConfiguration", () => A.TextTreeConfiguration$(false, ":", " \u2550\u2550\u2550", "", "", "", "  ", " \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550", false, true, "\n", true, "\u2502", "", "\u2558\u2550\u2566\u2550\u2550 ", "\u255e\u2550\u2566\u2550\u2550 ", " \u2551 ", "", "", "", "", true, ""));
    _lazyFinal($, "errorTextConfiguration", "$get$errorTextConfiguration", () => A.TextTreeConfiguration$(false, "", ":", "", "\u2550\u2550\u2561 ", "", "", " \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550", false, false, "\n", true, "\u2502", "\u2550\u2550\u2550\u2550\u2550", "\u2558\u2550\u2566", "\u255e\u2550\u2566", " \u2551 ", "", "", "", "", true, " \u255e\u2550\u2550"));
    _lazyFinal($, "whitespaceTextConfiguration", "$get$whitespaceTextConfiguration", () => A.TextTreeConfiguration$(false, ":", ":", "", "", "", "", "", false, false, "\n", true, " ", "", "", "", " ", "  ", "", "", "", true, ""));
    _lazyFinal($, "flatTextConfiguration", "$get$flatTextConfiguration", () => A.TextTreeConfiguration$(false, ":", ":", "", "", "", "", "", false, false, "\n", true, "", "", "", "", "", "", "", "", "", true, ""));
    _lazyFinal($, "singleLineTextConfiguration", "$get$singleLineTextConfiguration", () => A.TextTreeConfiguration$(false, "", ":", ")", "", "(", "", "", true, false, "", false, "", "", "", "", "", "", "  ", "  ", ", ", false, ""));
    _lazyFinal($, "errorPropertyTextConfiguration", "$get$errorPropertyTextConfiguration", () => A.TextTreeConfiguration$(false, "", ":", ")", "", "(", "", "", true, true, "\n", false, "", "", "", "", "", "", "  ", "  ", ", ", false, ""));
    _lazyFinal($, "shallowTextConfiguration", "$get$shallowTextConfiguration", () => A.TextTreeConfiguration$(false, ":", ":", "", "", "", "", "", false, false, "\n", true, " ", "", "", "", " ", "  ", "", "", "", false, ""));
    _lazyFinal($, "_debugPrintBuffer", "$get$_debugPrintBuffer", () => A.ListQueue$(null, type$.String));
    _lazyFinal($, "_debugPrintStopwatch", "$get$_debugPrintStopwatch", () => A.Stopwatch$());
    _lazyFinal($, "WriteBuffer__zeroBuffer", "$get$WriteBuffer__zeroBuffer", () => A.NativeUint8List_NativeUint8List$fromList(A._setArrayType([0, 0, 0, 0, 0, 0, 0, 0], type$.JSArray_int)));
    _lazyFinal($, "StackFrame__webNonDebugFramePattern", "$get$StackFrame__webNonDebugFramePattern", () => A.RegExp_RegExp("^\\s*at ([^\\s]+).*$", true));
    _lazyFinal($, "Theme__kFallbackTheme", "$get$Theme__kFallbackTheme", () => A.ThemeData_ThemeData$fallback());
    _lazyFinal($, "ThemeData__localizedThemeDataCache", "$get$ThemeData__localizedThemeDataCache", () => new A._FifoCache(A.LinkedHashMap_LinkedHashMap$_empty(A.findType("_IdentityThemeDataCacheKey"), A.findType("ThemeData")), 5, A.findType("_FifoCache<_IdentityThemeDataCacheKey,ThemeData>")));
    _lazyFinal($, "MatrixUtils__minMax", "$get$MatrixUtils__minMax", () => A.NativeFloat64List_NativeFloat64List(4));
    _lazy($, "RenderErrorBox_backgroundColor", "$get$RenderErrorBox_backgroundColor", () => B.Color_4039164096);
    _lazy($, "RenderErrorBox_textStyle", "$get$RenderErrorBox_textStyle", () => {
      var _null = null;
      return A.TextStyle_TextStyle(_null, B.Color_4281348144, _null, _null, _null, _null, "sans-serif", _null, _null, 18, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    });
    _lazy($, "RenderErrorBox_paragraphStyle", "$get$RenderErrorBox_paragraphStyle", () => {
      var _null = null;
      return A.ParagraphStyle_ParagraphStyle(_null, _null, _null, _null, _null, _null, _null, _null, _null, B.TextAlign_0, B.TextDirection_1, _null);
    });
    _lazyFinal($, "_SemanticsGeometry__temporaryTransformHolder", "$get$_SemanticsGeometry__temporaryTransformHolder", () => A.Matrix4$zero());
    _lazyFinal($, "SemanticsNode__kEmptyConfig", "$get$SemanticsNode__kEmptyConfig", () => A.SemanticsConfiguration$());
    _lazyFinal($, "SemanticsNode__kEmptyChildList", "$get$SemanticsNode__kEmptyChildList", () => A.NativeInt32List_NativeInt32List(0));
    _lazyFinal($, "SemanticsNode__kEmptyCustomSemanticsActionsList", "$get$SemanticsNode__kEmptyCustomSemanticsActionsList", () => A.NativeInt32List_NativeInt32List(0));
    _lazyFinal($, "SemanticsNode__kIdentityTransform", "$get$SemanticsNode__kIdentityTransform", () => A.Matrix4_Matrix4$identity()._m4storage);
    _lazyFinal($, "rootBundle", "$get$rootBundle", () => {
      var t1 = type$.String;
      return new A.PlatformAssetBundle(A.LinkedHashMap_LinkedHashMap$_empty(t1, A.findType("Future<String>")), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Future_dynamic));
    });
    _lazyFinal($, "KeyboardLockMode__knownLockModes", "$get$KeyboardLockMode__knownLockModes", () => A.LinkedHashMap_LinkedHashMap$_literal([4294967562, B.KeyboardLockMode_LogicalKeyboardKey_4294967562, 4294967564, B.KeyboardLockMode_LogicalKeyboardKey_4294967564, 4294967556, B.KeyboardLockMode_LogicalKeyboardKey_4294967556], type$.int, type$.KeyboardLockMode));
    _lazyFinal($, "RawKeyboard_instance", "$get$RawKeyboard_instance", () => {
      var t1 = type$.PhysicalKeyboardKey;
      return new A.RawKeyboard(A._setArrayType([], A.findType("JSArray<~(RawKeyEvent)>")), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.LogicalKeyboardKey), A.LinkedHashSet_LinkedHashSet$_empty(t1));
    });
    _lazyFinal($, "RawKeyboard__allModifiers", "$get$RawKeyboard__allModifiers", () => {
      var t2, t3,
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(type$.PhysicalKeyboardKey, type$.LogicalKeyboardKey);
      t1.$indexSet(0, B.PhysicalKeyboardKey_18, B.LogicalKeyboardKey_4294967558);
      for (t2 = $.RawKeyboard__allModifiersExceptFn.get$entries($.RawKeyboard__allModifiersExceptFn), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        t3 = t2.get$current(t2);
        t1.$indexSet(0, t3.key, t3.value);
      }
      return t1;
    });
    _lazy($, "_NullElement_instance", "$get$_NullElement_instance", () => new A._NullElement(B._NullWidget_null, B._ElementLifecycle_0));
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({WebGL: J.Interceptor, AnimationEffectReadOnly: J.JavaScriptObject, AnimationEffectTiming: J.JavaScriptObject, AnimationEffectTimingReadOnly: J.JavaScriptObject, AnimationTimeline: J.JavaScriptObject, AnimationWorkletGlobalScope: J.JavaScriptObject, AuthenticatorAssertionResponse: J.JavaScriptObject, AuthenticatorAttestationResponse: J.JavaScriptObject, AuthenticatorResponse: J.JavaScriptObject, BackgroundFetchFetch: J.JavaScriptObject, BackgroundFetchManager: J.JavaScriptObject, BackgroundFetchSettledFetch: J.JavaScriptObject, BarProp: J.JavaScriptObject, BarcodeDetector: J.JavaScriptObject, BluetoothRemoteGATTDescriptor: J.JavaScriptObject, BudgetState: J.JavaScriptObject, CacheStorage: J.JavaScriptObject, CanvasGradient: J.JavaScriptObject, CanvasPattern: J.JavaScriptObject, Client: J.JavaScriptObject, Clients: J.JavaScriptObject, CookieStore: J.JavaScriptObject, Coordinates: J.JavaScriptObject, CredentialsContainer: J.JavaScriptObject, Crypto: J.JavaScriptObject, CryptoKey: J.JavaScriptObject, CSS: J.JavaScriptObject, CSSVariableReferenceValue: J.JavaScriptObject, CustomElementRegistry: J.JavaScriptObject, DataTransfer: J.JavaScriptObject, DataTransferItem: J.JavaScriptObject, DeprecatedStorageInfo: J.JavaScriptObject, DeprecatedStorageQuota: J.JavaScriptObject, DeprecationReport: J.JavaScriptObject, DetectedBarcode: J.JavaScriptObject, DetectedFace: J.JavaScriptObject, DetectedText: J.JavaScriptObject, DeviceAcceleration: J.JavaScriptObject, DeviceRotationRate: J.JavaScriptObject, DirectoryReader: J.JavaScriptObject, WebKitDirectoryReader: J.JavaScriptObject, webkitFileSystemDirectoryReader: J.JavaScriptObject, FileSystemDirectoryReader: J.JavaScriptObject, DocumentOrShadowRoot: J.JavaScriptObject, DocumentTimeline: J.JavaScriptObject, DOMImplementation: J.JavaScriptObject, Iterator: J.JavaScriptObject, DOMMatrix: J.JavaScriptObject, DOMMatrixReadOnly: J.JavaScriptObject, DOMParser: J.JavaScriptObject, DOMPoint: J.JavaScriptObject, DOMPointReadOnly: J.JavaScriptObject, DOMQuad: J.JavaScriptObject, DOMStringMap: J.JavaScriptObject, External: J.JavaScriptObject, FaceDetector: J.JavaScriptObject, FontFaceSource: J.JavaScriptObject, FormData: J.JavaScriptObject, GamepadButton: J.JavaScriptObject, GamepadPose: J.JavaScriptObject, Geolocation: J.JavaScriptObject, Position: J.JavaScriptObject, GeolocationPosition: J.JavaScriptObject, Headers: J.JavaScriptObject, HTMLHyperlinkElementUtils: J.JavaScriptObject, IdleDeadline: J.JavaScriptObject, ImageBitmap: J.JavaScriptObject, ImageBitmapRenderingContext: J.JavaScriptObject, ImageCapture: J.JavaScriptObject, InputDeviceCapabilities: J.JavaScriptObject, IntersectionObserver: J.JavaScriptObject, IntersectionObserverEntry: J.JavaScriptObject, InterventionReport: J.JavaScriptObject, KeyframeEffect: J.JavaScriptObject, KeyframeEffectReadOnly: J.JavaScriptObject, MediaCapabilities: J.JavaScriptObject, MediaCapabilitiesInfo: J.JavaScriptObject, MediaDeviceInfo: J.JavaScriptObject, MediaError: J.JavaScriptObject, MediaKeyStatusMap: J.JavaScriptObject, MediaKeySystemAccess: J.JavaScriptObject, MediaKeys: J.JavaScriptObject, MediaKeysPolicy: J.JavaScriptObject, MediaMetadata: J.JavaScriptObject, MediaSession: J.JavaScriptObject, MediaSettingsRange: J.JavaScriptObject, MemoryInfo: J.JavaScriptObject, MessageChannel: J.JavaScriptObject, Metadata: J.JavaScriptObject, NavigationPreloadManager: J.JavaScriptObject, Navigator: J.JavaScriptObject, NavigatorAutomationInformation: J.JavaScriptObject, NavigatorConcurrentHardware: J.JavaScriptObject, NavigatorCookies: J.JavaScriptObject, NodeFilter: J.JavaScriptObject, NodeIterator: J.JavaScriptObject, NonDocumentTypeChildNode: J.JavaScriptObject, NonElementParentNode: J.JavaScriptObject, NoncedElement: J.JavaScriptObject, OffscreenCanvasRenderingContext2D: J.JavaScriptObject, PaintRenderingContext2D: J.JavaScriptObject, PaintSize: J.JavaScriptObject, PaintWorkletGlobalScope: J.JavaScriptObject, Path2D: J.JavaScriptObject, PaymentAddress: J.JavaScriptObject, PaymentInstruments: J.JavaScriptObject, PaymentManager: J.JavaScriptObject, PaymentResponse: J.JavaScriptObject, PerformanceNavigation: J.JavaScriptObject, PerformanceObserver: J.JavaScriptObject, PerformanceObserverEntryList: J.JavaScriptObject, PerformanceTiming: J.JavaScriptObject, Permissions: J.JavaScriptObject, PhotoCapabilities: J.JavaScriptObject, PositionError: J.JavaScriptObject, GeolocationPositionError: J.JavaScriptObject, Presentation: J.JavaScriptObject, PresentationReceiver: J.JavaScriptObject, PushManager: J.JavaScriptObject, PushMessageData: J.JavaScriptObject, PushSubscription: J.JavaScriptObject, PushSubscriptionOptions: J.JavaScriptObject, Range: J.JavaScriptObject, RelatedApplication: J.JavaScriptObject, ReportBody: J.JavaScriptObject, ReportingObserver: J.JavaScriptObject, ResizeObserver: J.JavaScriptObject, ResizeObserverEntry: J.JavaScriptObject, RTCCertificate: J.JavaScriptObject, RTCIceCandidate: J.JavaScriptObject, mozRTCIceCandidate: J.JavaScriptObject, RTCLegacyStatsReport: J.JavaScriptObject, RTCRtpContributingSource: J.JavaScriptObject, RTCRtpReceiver: J.JavaScriptObject, RTCRtpSender: J.JavaScriptObject, RTCSessionDescription: J.JavaScriptObject, mozRTCSessionDescription: J.JavaScriptObject, RTCStatsResponse: J.JavaScriptObject, Screen: J.JavaScriptObject, ScrollState: J.JavaScriptObject, ScrollTimeline: J.JavaScriptObject, Selection: J.JavaScriptObject, SharedArrayBuffer: J.JavaScriptObject, SpeechRecognitionAlternative: J.JavaScriptObject, StaticRange: J.JavaScriptObject, StorageManager: J.JavaScriptObject, StyleMedia: J.JavaScriptObject, StylePropertyMap: J.JavaScriptObject, StylePropertyMapReadonly: J.JavaScriptObject, SyncManager: J.JavaScriptObject, TextDetector: J.JavaScriptObject, TextMetrics: J.JavaScriptObject, TrackDefault: J.JavaScriptObject, TreeWalker: J.JavaScriptObject, TrustedHTML: J.JavaScriptObject, TrustedScriptURL: J.JavaScriptObject, TrustedURL: J.JavaScriptObject, UnderlyingSourceBase: J.JavaScriptObject, URLSearchParams: J.JavaScriptObject, VRCoordinateSystem: J.JavaScriptObject, VRDisplayCapabilities: J.JavaScriptObject, VREyeParameters: J.JavaScriptObject, VRFrameData: J.JavaScriptObject, VRFrameOfReference: J.JavaScriptObject, VRPose: J.JavaScriptObject, VRStageBounds: J.JavaScriptObject, VRStageBoundsPoint: J.JavaScriptObject, VRStageParameters: J.JavaScriptObject, ValidityState: J.JavaScriptObject, VideoPlaybackQuality: J.JavaScriptObject, VideoTrack: J.JavaScriptObject, VTTRegion: J.JavaScriptObject, WindowClient: J.JavaScriptObject, WorkletAnimation: J.JavaScriptObject, WorkletGlobalScope: J.JavaScriptObject, XPathEvaluator: J.JavaScriptObject, XPathExpression: J.JavaScriptObject, XPathNSResolver: J.JavaScriptObject, XPathResult: J.JavaScriptObject, XMLSerializer: J.JavaScriptObject, XSLTProcessor: J.JavaScriptObject, Bluetooth: J.JavaScriptObject, BluetoothCharacteristicProperties: J.JavaScriptObject, BluetoothRemoteGATTServer: J.JavaScriptObject, BluetoothRemoteGATTService: J.JavaScriptObject, BluetoothUUID: J.JavaScriptObject, BudgetService: J.JavaScriptObject, Cache: J.JavaScriptObject, DOMFileSystemSync: J.JavaScriptObject, DirectoryEntrySync: J.JavaScriptObject, DirectoryReaderSync: J.JavaScriptObject, EntrySync: J.JavaScriptObject, FileEntrySync: J.JavaScriptObject, FileReaderSync: J.JavaScriptObject, FileWriterSync: J.JavaScriptObject, HTMLAllCollection: J.JavaScriptObject, Mojo: J.JavaScriptObject, MojoHandle: J.JavaScriptObject, MojoWatcher: J.JavaScriptObject, NFC: J.JavaScriptObject, PagePopupController: J.JavaScriptObject, Report: J.JavaScriptObject, SubtleCrypto: J.JavaScriptObject, USBAlternateInterface: J.JavaScriptObject, USBConfiguration: J.JavaScriptObject, USBDevice: J.JavaScriptObject, USBEndpoint: J.JavaScriptObject, USBInTransferResult: J.JavaScriptObject, USBInterface: J.JavaScriptObject, USBIsochronousInTransferPacket: J.JavaScriptObject, USBIsochronousInTransferResult: J.JavaScriptObject, USBIsochronousOutTransferPacket: J.JavaScriptObject, USBIsochronousOutTransferResult: J.JavaScriptObject, USBOutTransferResult: J.JavaScriptObject, WorkerLocation: J.JavaScriptObject, WorkerNavigator: J.JavaScriptObject, Worklet: J.JavaScriptObject, IDBCursor: J.JavaScriptObject, IDBCursorWithValue: J.JavaScriptObject, IDBFactory: J.JavaScriptObject, IDBObservation: J.JavaScriptObject, IDBObserver: J.JavaScriptObject, IDBObserverChanges: J.JavaScriptObject, SVGAngle: J.JavaScriptObject, SVGAnimatedAngle: J.JavaScriptObject, SVGAnimatedBoolean: J.JavaScriptObject, SVGAnimatedEnumeration: J.JavaScriptObject, SVGAnimatedInteger: J.JavaScriptObject, SVGAnimatedLength: J.JavaScriptObject, SVGAnimatedLengthList: J.JavaScriptObject, SVGAnimatedNumber: J.JavaScriptObject, SVGAnimatedNumberList: J.JavaScriptObject, SVGAnimatedPreserveAspectRatio: J.JavaScriptObject, SVGAnimatedRect: J.JavaScriptObject, SVGAnimatedString: J.JavaScriptObject, SVGAnimatedTransformList: J.JavaScriptObject, SVGMatrix: J.JavaScriptObject, SVGPoint: J.JavaScriptObject, SVGPreserveAspectRatio: J.JavaScriptObject, SVGRect: J.JavaScriptObject, SVGUnitTypes: J.JavaScriptObject, AudioListener: J.JavaScriptObject, AudioParam: J.JavaScriptObject, AudioTrack: J.JavaScriptObject, AudioWorkletGlobalScope: J.JavaScriptObject, AudioWorkletProcessor: J.JavaScriptObject, PeriodicWave: J.JavaScriptObject, ANGLEInstancedArrays: J.JavaScriptObject, ANGLE_instanced_arrays: J.JavaScriptObject, WebGLBuffer: J.JavaScriptObject, WebGLCanvas: J.JavaScriptObject, WebGLColorBufferFloat: J.JavaScriptObject, WebGLCompressedTextureASTC: J.JavaScriptObject, WebGLCompressedTextureATC: J.JavaScriptObject, WEBGL_compressed_texture_atc: J.JavaScriptObject, WebGLCompressedTextureETC1: J.JavaScriptObject, WEBGL_compressed_texture_etc1: J.JavaScriptObject, WebGLCompressedTextureETC: J.JavaScriptObject, WebGLCompressedTexturePVRTC: J.JavaScriptObject, WEBGL_compressed_texture_pvrtc: J.JavaScriptObject, WebGLCompressedTextureS3TC: J.JavaScriptObject, WEBGL_compressed_texture_s3tc: J.JavaScriptObject, WebGLCompressedTextureS3TCsRGB: J.JavaScriptObject, WebGLDebugRendererInfo: J.JavaScriptObject, WEBGL_debug_renderer_info: J.JavaScriptObject, WebGLDebugShaders: J.JavaScriptObject, WEBGL_debug_shaders: J.JavaScriptObject, WebGLDepthTexture: J.JavaScriptObject, WEBGL_depth_texture: J.JavaScriptObject, WebGLDrawBuffers: J.JavaScriptObject, WEBGL_draw_buffers: J.JavaScriptObject, EXTsRGB: J.JavaScriptObject, EXT_sRGB: J.JavaScriptObject, EXTBlendMinMax: J.JavaScriptObject, EXT_blend_minmax: J.JavaScriptObject, EXTColorBufferFloat: J.JavaScriptObject, EXTColorBufferHalfFloat: J.JavaScriptObject, EXTDisjointTimerQuery: J.JavaScriptObject, EXTDisjointTimerQueryWebGL2: J.JavaScriptObject, EXTFragDepth: J.JavaScriptObject, EXT_frag_depth: J.JavaScriptObject, EXTShaderTextureLOD: J.JavaScriptObject, EXT_shader_texture_lod: J.JavaScriptObject, EXTTextureFilterAnisotropic: J.JavaScriptObject, EXT_texture_filter_anisotropic: J.JavaScriptObject, WebGLFramebuffer: J.JavaScriptObject, WebGLGetBufferSubDataAsync: J.JavaScriptObject, WebGLLoseContext: J.JavaScriptObject, WebGLExtensionLoseContext: J.JavaScriptObject, WEBGL_lose_context: J.JavaScriptObject, OESElementIndexUint: J.JavaScriptObject, OES_element_index_uint: J.JavaScriptObject, OESStandardDerivatives: J.JavaScriptObject, OES_standard_derivatives: J.JavaScriptObject, OESTextureFloat: J.JavaScriptObject, OES_texture_float: J.JavaScriptObject, OESTextureFloatLinear: J.JavaScriptObject, OES_texture_float_linear: J.JavaScriptObject, OESTextureHalfFloat: J.JavaScriptObject, OES_texture_half_float: J.JavaScriptObject, OESTextureHalfFloatLinear: J.JavaScriptObject, OES_texture_half_float_linear: J.JavaScriptObject, OESVertexArrayObject: J.JavaScriptObject, OES_vertex_array_object: J.JavaScriptObject, WebGLProgram: J.JavaScriptObject, WebGLQuery: J.JavaScriptObject, WebGLRenderbuffer: J.JavaScriptObject, WebGLRenderingContext: J.JavaScriptObject, WebGL2RenderingContext: J.JavaScriptObject, WebGLSampler: J.JavaScriptObject, WebGLShader: J.JavaScriptObject, WebGLShaderPrecisionFormat: J.JavaScriptObject, WebGLSync: J.JavaScriptObject, WebGLTexture: J.JavaScriptObject, WebGLTimerQueryEXT: J.JavaScriptObject, WebGLTransformFeedback: J.JavaScriptObject, WebGLUniformLocation: J.JavaScriptObject, WebGLVertexArrayObject: J.JavaScriptObject, WebGLVertexArrayObjectOES: J.JavaScriptObject, WebGL2RenderingContextBase: J.JavaScriptObject, ArrayBuffer: A.NativeByteBuffer, ArrayBufferView: A.NativeTypedData, DataView: A.NativeByteData, Float32Array: A.NativeFloat32List, Float64Array: A.NativeFloat64List, Int16Array: A.NativeInt16List, Int32Array: A.NativeInt32List, Int8Array: A.NativeInt8List, Uint16Array: A.NativeUint16List, Uint32Array: A.NativeUint32List, Uint8ClampedArray: A.NativeUint8ClampedList, CanvasPixelArray: A.NativeUint8ClampedList, Uint8Array: A.NativeUint8List, HTMLAudioElement: A.HtmlElement, HTMLBRElement: A.HtmlElement, HTMLContentElement: A.HtmlElement, HTMLDListElement: A.HtmlElement, HTMLDataElement: A.HtmlElement, HTMLDataListElement: A.HtmlElement, HTMLDetailsElement: A.HtmlElement, HTMLDialogElement: A.HtmlElement, HTMLHRElement: A.HtmlElement, HTMLHeadElement: A.HtmlElement, HTMLHeadingElement: A.HtmlElement, HTMLHtmlElement: A.HtmlElement, HTMLImageElement: A.HtmlElement, HTMLLIElement: A.HtmlElement, HTMLLegendElement: A.HtmlElement, HTMLLinkElement: A.HtmlElement, HTMLMediaElement: A.HtmlElement, HTMLMenuElement: A.HtmlElement, HTMLMeterElement: A.HtmlElement, HTMLModElement: A.HtmlElement, HTMLOListElement: A.HtmlElement, HTMLOptGroupElement: A.HtmlElement, HTMLOptionElement: A.HtmlElement, HTMLPictureElement: A.HtmlElement, HTMLPreElement: A.HtmlElement, HTMLProgressElement: A.HtmlElement, HTMLQuoteElement: A.HtmlElement, HTMLScriptElement: A.HtmlElement, HTMLShadowElement: A.HtmlElement, HTMLSourceElement: A.HtmlElement, HTMLSpanElement: A.HtmlElement, HTMLTableCaptionElement: A.HtmlElement, HTMLTableCellElement: A.HtmlElement, HTMLTableDataCellElement: A.HtmlElement, HTMLTableHeaderCellElement: A.HtmlElement, HTMLTableColElement: A.HtmlElement, HTMLTimeElement: A.HtmlElement, HTMLTitleElement: A.HtmlElement, HTMLTrackElement: A.HtmlElement, HTMLUListElement: A.HtmlElement, HTMLUnknownElement: A.HtmlElement, HTMLVideoElement: A.HtmlElement, HTMLDirectoryElement: A.HtmlElement, HTMLFontElement: A.HtmlElement, HTMLFrameElement: A.HtmlElement, HTMLFrameSetElement: A.HtmlElement, HTMLMarqueeElement: A.HtmlElement, HTMLElement: A.HtmlElement, AccessibleNodeList: A.AccessibleNodeList, HTMLAnchorElement: A.AnchorElement, HTMLAreaElement: A.AreaElement, HTMLBaseElement: A.BaseElement, Blob: A.Blob, Body: A.Body, Request: A.Body, Response: A.Body, HTMLBodyElement: A.BodyElement, BroadcastChannel: A.BroadcastChannel, HTMLButtonElement: A.ButtonElement, HTMLCanvasElement: A.CanvasElement, CanvasRenderingContext2D: A.CanvasRenderingContext2D, CDATASection: A.CharacterData, CharacterData: A.CharacterData, Comment: A.CharacterData, ProcessingInstruction: A.CharacterData, Text: A.CharacterData, PublicKeyCredential: A.Credential, Credential: A.Credential, CredentialUserData: A.CredentialUserData, CSSKeyframesRule: A.CssKeyframesRule, MozCSSKeyframesRule: A.CssKeyframesRule, WebKitCSSKeyframesRule: A.CssKeyframesRule, CSSPerspective: A.CssPerspective, CSSCharsetRule: A.CssRule, CSSConditionRule: A.CssRule, CSSFontFaceRule: A.CssRule, CSSGroupingRule: A.CssRule, CSSImportRule: A.CssRule, CSSKeyframeRule: A.CssRule, MozCSSKeyframeRule: A.CssRule, WebKitCSSKeyframeRule: A.CssRule, CSSMediaRule: A.CssRule, CSSNamespaceRule: A.CssRule, CSSPageRule: A.CssRule, CSSStyleRule: A.CssRule, CSSSupportsRule: A.CssRule, CSSViewportRule: A.CssRule, CSSRule: A.CssRule, CSSStyleDeclaration: A.CssStyleDeclaration, MSStyleCSSProperties: A.CssStyleDeclaration, CSS2Properties: A.CssStyleDeclaration, CSSStyleSheet: A.CssStyleSheet, CSSImageValue: A.CssStyleValue, CSSKeywordValue: A.CssStyleValue, CSSNumericValue: A.CssStyleValue, CSSPositionValue: A.CssStyleValue, CSSResourceValue: A.CssStyleValue, CSSUnitValue: A.CssStyleValue, CSSURLImageValue: A.CssStyleValue, CSSStyleValue: A.CssStyleValue, CSSMatrixComponent: A.CssTransformComponent, CSSRotation: A.CssTransformComponent, CSSScale: A.CssTransformComponent, CSSSkew: A.CssTransformComponent, CSSTranslation: A.CssTransformComponent, CSSTransformComponent: A.CssTransformComponent, CSSTransformValue: A.CssTransformValue, CSSUnparsedValue: A.CssUnparsedValue, DataTransferItemList: A.DataTransferItemList, HTMLDivElement: A.DivElement, XMLDocument: A.Document, Document: A.Document, DOMError: A.DomError, DOMException: A.DomException, ClientRectList: A.DomRectList, DOMRectList: A.DomRectList, DOMRectReadOnly: A.DomRectReadOnly, DOMStringList: A.DomStringList, DOMTokenList: A.DomTokenList, Element: A.Element, HTMLEmbedElement: A.EmbedElement, DirectoryEntry: A.Entry, webkitFileSystemDirectoryEntry: A.Entry, FileSystemDirectoryEntry: A.Entry, Entry: A.Entry, webkitFileSystemEntry: A.Entry, FileSystemEntry: A.Entry, FileEntry: A.Entry, webkitFileSystemFileEntry: A.Entry, FileSystemFileEntry: A.Entry, AbortPaymentEvent: A.Event, AnimationEvent: A.Event, AnimationPlaybackEvent: A.Event, ApplicationCacheErrorEvent: A.Event, BackgroundFetchClickEvent: A.Event, BackgroundFetchEvent: A.Event, BackgroundFetchFailEvent: A.Event, BackgroundFetchedEvent: A.Event, BeforeInstallPromptEvent: A.Event, BeforeUnloadEvent: A.Event, BlobEvent: A.Event, CanMakePaymentEvent: A.Event, ClipboardEvent: A.Event, CloseEvent: A.Event, CustomEvent: A.Event, DeviceMotionEvent: A.Event, DeviceOrientationEvent: A.Event, ErrorEvent: A.Event, ExtendableEvent: A.Event, ExtendableMessageEvent: A.Event, FetchEvent: A.Event, FontFaceSetLoadEvent: A.Event, ForeignFetchEvent: A.Event, GamepadEvent: A.Event, HashChangeEvent: A.Event, InstallEvent: A.Event, MediaEncryptedEvent: A.Event, MediaKeyMessageEvent: A.Event, MediaStreamEvent: A.Event, MediaStreamTrackEvent: A.Event, MessageEvent: A.Event, MIDIConnectionEvent: A.Event, MIDIMessageEvent: A.Event, MutationEvent: A.Event, NotificationEvent: A.Event, PageTransitionEvent: A.Event, PaymentRequestEvent: A.Event, PaymentRequestUpdateEvent: A.Event, PopStateEvent: A.Event, PresentationConnectionAvailableEvent: A.Event, PresentationConnectionCloseEvent: A.Event, PromiseRejectionEvent: A.Event, PushEvent: A.Event, RTCDataChannelEvent: A.Event, RTCDTMFToneChangeEvent: A.Event, RTCPeerConnectionIceEvent: A.Event, RTCTrackEvent: A.Event, SecurityPolicyViolationEvent: A.Event, SensorErrorEvent: A.Event, SpeechRecognitionError: A.Event, SpeechRecognitionEvent: A.Event, StorageEvent: A.Event, SyncEvent: A.Event, TrackEvent: A.Event, TransitionEvent: A.Event, WebKitTransitionEvent: A.Event, VRDeviceEvent: A.Event, VRDisplayEvent: A.Event, VRSessionEvent: A.Event, MojoInterfaceRequestEvent: A.Event, USBConnectionEvent: A.Event, AudioProcessingEvent: A.Event, OfflineAudioCompletionEvent: A.Event, WebGLContextEvent: A.Event, Event: A.Event, InputEvent: A.Event, SubmitEvent: A.Event, AbsoluteOrientationSensor: A.EventTarget, Accelerometer: A.EventTarget, AccessibleNode: A.EventTarget, AmbientLightSensor: A.EventTarget, Animation: A.EventTarget, ApplicationCache: A.EventTarget, DOMApplicationCache: A.EventTarget, OfflineResourceList: A.EventTarget, BackgroundFetchRegistration: A.EventTarget, BatteryManager: A.EventTarget, CanvasCaptureMediaStreamTrack: A.EventTarget, EventSource: A.EventTarget, FileReader: A.EventTarget, FontFaceSet: A.EventTarget, Gyroscope: A.EventTarget, LinearAccelerationSensor: A.EventTarget, Magnetometer: A.EventTarget, MediaDevices: A.EventTarget, MediaRecorder: A.EventTarget, MediaSource: A.EventTarget, MediaStream: A.EventTarget, MediaStreamTrack: A.EventTarget, MIDIAccess: A.EventTarget, NetworkInformation: A.EventTarget, Notification: A.EventTarget, OrientationSensor: A.EventTarget, PaymentRequest: A.EventTarget, Performance: A.EventTarget, PermissionStatus: A.EventTarget, PresentationAvailability: A.EventTarget, PresentationConnection: A.EventTarget, PresentationConnectionList: A.EventTarget, PresentationRequest: A.EventTarget, RelativeOrientationSensor: A.EventTarget, RemotePlayback: A.EventTarget, RTCDataChannel: A.EventTarget, DataChannel: A.EventTarget, RTCDTMFSender: A.EventTarget, RTCPeerConnection: A.EventTarget, webkitRTCPeerConnection: A.EventTarget, mozRTCPeerConnection: A.EventTarget, Sensor: A.EventTarget, ServiceWorker: A.EventTarget, ServiceWorkerContainer: A.EventTarget, ServiceWorkerRegistration: A.EventTarget, SharedWorker: A.EventTarget, SpeechRecognition: A.EventTarget, SpeechSynthesis: A.EventTarget, SpeechSynthesisUtterance: A.EventTarget, VR: A.EventTarget, VRDevice: A.EventTarget, VRDisplay: A.EventTarget, VRSession: A.EventTarget, VisualViewport: A.EventTarget, WebSocket: A.EventTarget, Worker: A.EventTarget, WorkerPerformance: A.EventTarget, BluetoothDevice: A.EventTarget, BluetoothRemoteGATTCharacteristic: A.EventTarget, Clipboard: A.EventTarget, MojoInterfaceInterceptor: A.EventTarget, USB: A.EventTarget, IDBOpenDBRequest: A.EventTarget, IDBVersionChangeRequest: A.EventTarget, IDBRequest: A.EventTarget, IDBTransaction: A.EventTarget, AnalyserNode: A.EventTarget, RealtimeAnalyserNode: A.EventTarget, AudioBufferSourceNode: A.EventTarget, AudioDestinationNode: A.EventTarget, AudioNode: A.EventTarget, AudioScheduledSourceNode: A.EventTarget, AudioWorkletNode: A.EventTarget, BiquadFilterNode: A.EventTarget, ChannelMergerNode: A.EventTarget, AudioChannelMerger: A.EventTarget, ChannelSplitterNode: A.EventTarget, AudioChannelSplitter: A.EventTarget, ConstantSourceNode: A.EventTarget, ConvolverNode: A.EventTarget, DelayNode: A.EventTarget, DynamicsCompressorNode: A.EventTarget, GainNode: A.EventTarget, AudioGainNode: A.EventTarget, IIRFilterNode: A.EventTarget, MediaElementAudioSourceNode: A.EventTarget, MediaStreamAudioDestinationNode: A.EventTarget, MediaStreamAudioSourceNode: A.EventTarget, OscillatorNode: A.EventTarget, Oscillator: A.EventTarget, PannerNode: A.EventTarget, AudioPannerNode: A.EventTarget, webkitAudioPannerNode: A.EventTarget, ScriptProcessorNode: A.EventTarget, JavaScriptAudioNode: A.EventTarget, StereoPannerNode: A.EventTarget, WaveShaperNode: A.EventTarget, EventTarget: A.EventTarget, FederatedCredential: A.FederatedCredential, HTMLFieldSetElement: A.FieldSetElement, File: A.File, FileList: A.FileList, DOMFileSystem: A.FileSystem, WebKitFileSystem: A.FileSystem, webkitFileSystem: A.FileSystem, FileSystem: A.FileSystem, FileWriter: A.FileWriter, FontFace: A.FontFace, HTMLFormElement: A.FormElement, Gamepad: A.Gamepad, History: A.History, HTMLCollection: A.HtmlCollection, HTMLFormControlsCollection: A.HtmlCollection, HTMLOptionsCollection: A.HtmlCollection, HTMLDocument: A.HtmlDocument, XMLHttpRequest: A.HttpRequest, XMLHttpRequestUpload: A.HttpRequestEventTarget, XMLHttpRequestEventTarget: A.HttpRequestEventTarget, HTMLIFrameElement: A.IFrameElement, ImageData: A.ImageData, HTMLInputElement: A.InputElement, KeyboardEvent: A.KeyboardEvent, HTMLLabelElement: A.LabelElement, Location: A.Location, HTMLMapElement: A.MapElement, MediaKeySession: A.MediaKeySession, MediaList: A.MediaList, MediaQueryList: A.MediaQueryList, MediaQueryListEvent: A.MediaQueryListEvent, MessagePort: A.MessagePort, HTMLMetaElement: A.MetaElement, MIDIInputMap: A.MidiInputMap, MIDIOutputMap: A.MidiOutputMap, MIDIInput: A.MidiPort, MIDIOutput: A.MidiPort, MIDIPort: A.MidiPort, MimeType: A.MimeType, MimeTypeArray: A.MimeTypeArray, MouseEvent: A.MouseEvent, DragEvent: A.MouseEvent, MutationObserver: A.MutationObserver, WebKitMutationObserver: A.MutationObserver, MutationRecord: A.MutationRecord, NavigatorUserMediaError: A.NavigatorUserMediaError, DocumentFragment: A.Node, ShadowRoot: A.Node, DocumentType: A.Node, Node: A.Node, NodeList: A.NodeList, RadioNodeList: A.NodeList, HTMLObjectElement: A.ObjectElement, OffscreenCanvas: A.OffscreenCanvas, HTMLOutputElement: A.OutputElement, OverconstrainedError: A.OverconstrainedError, HTMLParagraphElement: A.ParagraphElement, HTMLParamElement: A.ParamElement, PasswordCredential: A.PasswordCredential, PerformanceEntry: A.PerformanceEntry, PerformanceLongTaskTiming: A.PerformanceEntry, PerformanceMark: A.PerformanceEntry, PerformanceMeasure: A.PerformanceEntry, PerformanceNavigationTiming: A.PerformanceEntry, PerformancePaintTiming: A.PerformanceEntry, PerformanceResourceTiming: A.PerformanceEntry, TaskAttributionTiming: A.PerformanceEntry, PerformanceServerTiming: A.PerformanceServerTiming, Plugin: A.Plugin, PluginArray: A.PluginArray, PointerEvent: A.PointerEvent0, ProgressEvent: A.ProgressEvent, ResourceProgressEvent: A.ProgressEvent, RTCStatsReport: A.RtcStatsReport, ScreenOrientation: A.ScreenOrientation, HTMLSelectElement: A.SelectElement, SharedWorkerGlobalScope: A.SharedWorkerGlobalScope, HTMLSlotElement: A.SlotElement, SourceBuffer: A.SourceBuffer, SourceBufferList: A.SourceBufferList, SpeechGrammar: A.SpeechGrammar, SpeechGrammarList: A.SpeechGrammarList, SpeechRecognitionResult: A.SpeechRecognitionResult, SpeechSynthesisEvent: A.SpeechSynthesisEvent, SpeechSynthesisVoice: A.SpeechSynthesisVoice, Storage: A.Storage, HTMLStyleElement: A.StyleElement, StyleSheet: A.StyleSheet, HTMLTableElement: A.TableElement, HTMLTableRowElement: A.TableRowElement, HTMLTableSectionElement: A.TableSectionElement, HTMLTemplateElement: A.TemplateElement, HTMLTextAreaElement: A.TextAreaElement, TextTrack: A.TextTrack, TextTrackCue: A.TextTrackCue, VTTCue: A.TextTrackCue, TextTrackCueList: A.TextTrackCueList, TextTrackList: A.TextTrackList, TimeRanges: A.TimeRanges, Touch: A.Touch, TouchEvent: A.TouchEvent, TouchList: A.TouchList, TrackDefaultList: A.TrackDefaultList, CompositionEvent: A.UIEvent, FocusEvent: A.UIEvent, TextEvent: A.UIEvent, UIEvent: A.UIEvent, URL: A.Url, VideoTrackList: A.VideoTrackList, WheelEvent: A.WheelEvent, Window: A.Window, DOMWindow: A.Window, DedicatedWorkerGlobalScope: A.WorkerGlobalScope, ServiceWorkerGlobalScope: A.WorkerGlobalScope, WorkerGlobalScope: A.WorkerGlobalScope, Attr: A._Attr, CSSRuleList: A._CssRuleList, ClientRect: A._DomRect, DOMRect: A._DomRect, GamepadList: A._GamepadList, NamedNodeMap: A._NamedNodeMap, MozNamedAttrMap: A._NamedNodeMap, SpeechRecognitionResultList: A._SpeechRecognitionResultList, StyleSheetList: A._StyleSheetList, IDBDatabase: A.Database, IDBIndex: A.Index, IDBKeyRange: A.KeyRange, IDBObjectStore: A.ObjectStore, IDBVersionChangeEvent: A.VersionChangeEvent, SVGClipPathElement: A.ClipPathElement, SVGDefsElement: A.DefsElement, SVGCircleElement: A.GeometryElement, SVGEllipseElement: A.GeometryElement, SVGLineElement: A.GeometryElement, SVGPolygonElement: A.GeometryElement, SVGPolylineElement: A.GeometryElement, SVGRectElement: A.GeometryElement, SVGGeometryElement: A.GeometryElement, SVGAElement: A.GraphicsElement, SVGForeignObjectElement: A.GraphicsElement, SVGGElement: A.GraphicsElement, SVGImageElement: A.GraphicsElement, SVGSwitchElement: A.GraphicsElement, SVGTSpanElement: A.GraphicsElement, SVGTextContentElement: A.GraphicsElement, SVGTextElement: A.GraphicsElement, SVGTextPathElement: A.GraphicsElement, SVGTextPositioningElement: A.GraphicsElement, SVGUseElement: A.GraphicsElement, SVGGraphicsElement: A.GraphicsElement, SVGLength: A.Length, SVGLengthList: A.LengthList, SVGNumber: A.Number, SVGNumberList: A.NumberList, SVGPathElement: A.PathElement, SVGPointList: A.PointList, SVGScriptElement: A.ScriptElement0, SVGStringList: A.StringList, SVGAnimateElement: A.SvgElement, SVGAnimateMotionElement: A.SvgElement, SVGAnimateTransformElement: A.SvgElement, SVGAnimationElement: A.SvgElement, SVGDescElement: A.SvgElement, SVGDiscardElement: A.SvgElement, SVGFEBlendElement: A.SvgElement, SVGFEColorMatrixElement: A.SvgElement, SVGFEComponentTransferElement: A.SvgElement, SVGFECompositeElement: A.SvgElement, SVGFEConvolveMatrixElement: A.SvgElement, SVGFEDiffuseLightingElement: A.SvgElement, SVGFEDisplacementMapElement: A.SvgElement, SVGFEDistantLightElement: A.SvgElement, SVGFEFloodElement: A.SvgElement, SVGFEFuncAElement: A.SvgElement, SVGFEFuncBElement: A.SvgElement, SVGFEFuncGElement: A.SvgElement, SVGFEFuncRElement: A.SvgElement, SVGFEGaussianBlurElement: A.SvgElement, SVGFEImageElement: A.SvgElement, SVGFEMergeElement: A.SvgElement, SVGFEMergeNodeElement: A.SvgElement, SVGFEMorphologyElement: A.SvgElement, SVGFEOffsetElement: A.SvgElement, SVGFEPointLightElement: A.SvgElement, SVGFESpecularLightingElement: A.SvgElement, SVGFESpotLightElement: A.SvgElement, SVGFETileElement: A.SvgElement, SVGFETurbulenceElement: A.SvgElement, SVGFilterElement: A.SvgElement, SVGLinearGradientElement: A.SvgElement, SVGMarkerElement: A.SvgElement, SVGMaskElement: A.SvgElement, SVGMetadataElement: A.SvgElement, SVGPatternElement: A.SvgElement, SVGRadialGradientElement: A.SvgElement, SVGSetElement: A.SvgElement, SVGStopElement: A.SvgElement, SVGStyleElement: A.SvgElement, SVGSymbolElement: A.SvgElement, SVGTitleElement: A.SvgElement, SVGViewElement: A.SvgElement, SVGGradientElement: A.SvgElement, SVGComponentTransferFunctionElement: A.SvgElement, SVGFEDropShadowElement: A.SvgElement, SVGMPathElement: A.SvgElement, SVGElement: A.SvgElement, SVGSVGElement: A.SvgSvgElement, SVGTransform: A.Transform0, SVGTransformList: A.TransformList, AudioBuffer: A.AudioBuffer, AudioParamMap: A.AudioParamMap, AudioTrackList: A.AudioTrackList, AudioContext: A.BaseAudioContext, webkitAudioContext: A.BaseAudioContext, BaseAudioContext: A.BaseAudioContext, OfflineAudioContext: A.OfflineAudioContext, WebGLActiveInfo: A.ActiveInfo});
    hunkHelpers.setOrUpdateLeafTags({WebGL: true, AnimationEffectReadOnly: true, AnimationEffectTiming: true, AnimationEffectTimingReadOnly: true, AnimationTimeline: true, AnimationWorkletGlobalScope: true, AuthenticatorAssertionResponse: true, AuthenticatorAttestationResponse: true, AuthenticatorResponse: true, BackgroundFetchFetch: true, BackgroundFetchManager: true, BackgroundFetchSettledFetch: true, BarProp: true, BarcodeDetector: true, BluetoothRemoteGATTDescriptor: true, BudgetState: true, CacheStorage: true, CanvasGradient: true, CanvasPattern: true, Client: true, Clients: true, CookieStore: true, Coordinates: true, CredentialsContainer: true, Crypto: true, CryptoKey: true, CSS: true, CSSVariableReferenceValue: true, CustomElementRegistry: true, DataTransfer: true, DataTransferItem: true, DeprecatedStorageInfo: true, DeprecatedStorageQuota: true, DeprecationReport: true, DetectedBarcode: true, DetectedFace: true, DetectedText: true, DeviceAcceleration: true, DeviceRotationRate: true, DirectoryReader: true, WebKitDirectoryReader: true, webkitFileSystemDirectoryReader: true, FileSystemDirectoryReader: true, DocumentOrShadowRoot: true, DocumentTimeline: true, DOMImplementation: true, Iterator: true, DOMMatrix: true, DOMMatrixReadOnly: true, DOMParser: true, DOMPoint: true, DOMPointReadOnly: true, DOMQuad: true, DOMStringMap: true, External: true, FaceDetector: true, FontFaceSource: true, FormData: true, GamepadButton: true, GamepadPose: true, Geolocation: true, Position: true, GeolocationPosition: true, Headers: true, HTMLHyperlinkElementUtils: true, IdleDeadline: true, ImageBitmap: true, ImageBitmapRenderingContext: true, ImageCapture: true, InputDeviceCapabilities: true, IntersectionObserver: true, IntersectionObserverEntry: true, InterventionReport: true, KeyframeEffect: true, KeyframeEffectReadOnly: true, MediaCapabilities: true, MediaCapabilitiesInfo: true, MediaDeviceInfo: true, MediaError: true, MediaKeyStatusMap: true, MediaKeySystemAccess: true, MediaKeys: true, MediaKeysPolicy: true, MediaMetadata: true, MediaSession: true, MediaSettingsRange: true, MemoryInfo: true, MessageChannel: true, Metadata: true, NavigationPreloadManager: true, Navigator: true, NavigatorAutomationInformation: true, NavigatorConcurrentHardware: true, NavigatorCookies: true, NodeFilter: true, NodeIterator: true, NonDocumentTypeChildNode: true, NonElementParentNode: true, NoncedElement: true, OffscreenCanvasRenderingContext2D: true, PaintRenderingContext2D: true, PaintSize: true, PaintWorkletGlobalScope: true, Path2D: true, PaymentAddress: true, PaymentInstruments: true, PaymentManager: true, PaymentResponse: true, PerformanceNavigation: true, PerformanceObserver: true, PerformanceObserverEntryList: true, PerformanceTiming: true, Permissions: true, PhotoCapabilities: true, PositionError: true, GeolocationPositionError: true, Presentation: true, PresentationReceiver: true, PushManager: true, PushMessageData: true, PushSubscription: true, PushSubscriptionOptions: true, Range: true, RelatedApplication: true, ReportBody: true, ReportingObserver: true, ResizeObserver: true, ResizeObserverEntry: true, RTCCertificate: true, RTCIceCandidate: true, mozRTCIceCandidate: true, RTCLegacyStatsReport: true, RTCRtpContributingSource: true, RTCRtpReceiver: true, RTCRtpSender: true, RTCSessionDescription: true, mozRTCSessionDescription: true, RTCStatsResponse: true, Screen: true, ScrollState: true, ScrollTimeline: true, Selection: true, SharedArrayBuffer: true, SpeechRecognitionAlternative: true, StaticRange: true, StorageManager: true, StyleMedia: true, StylePropertyMap: true, StylePropertyMapReadonly: true, SyncManager: true, TextDetector: true, TextMetrics: true, TrackDefault: true, TreeWalker: true, TrustedHTML: true, TrustedScriptURL: true, TrustedURL: true, UnderlyingSourceBase: true, URLSearchParams: true, VRCoordinateSystem: true, VRDisplayCapabilities: true, VREyeParameters: true, VRFrameData: true, VRFrameOfReference: true, VRPose: true, VRStageBounds: true, VRStageBoundsPoint: true, VRStageParameters: true, ValidityState: true, VideoPlaybackQuality: true, VideoTrack: true, VTTRegion: true, WindowClient: true, WorkletAnimation: true, WorkletGlobalScope: true, XPathEvaluator: true, XPathExpression: true, XPathNSResolver: true, XPathResult: true, XMLSerializer: true, XSLTProcessor: true, Bluetooth: true, BluetoothCharacteristicProperties: true, BluetoothRemoteGATTServer: true, BluetoothRemoteGATTService: true, BluetoothUUID: true, BudgetService: true, Cache: true, DOMFileSystemSync: true, DirectoryEntrySync: true, DirectoryReaderSync: true, EntrySync: true, FileEntrySync: true, FileReaderSync: true, FileWriterSync: true, HTMLAllCollection: true, Mojo: true, MojoHandle: true, MojoWatcher: true, NFC: true, PagePopupController: true, Report: true, SubtleCrypto: true, USBAlternateInterface: true, USBConfiguration: true, USBDevice: true, USBEndpoint: true, USBInTransferResult: true, USBInterface: true, USBIsochronousInTransferPacket: true, USBIsochronousInTransferResult: true, USBIsochronousOutTransferPacket: true, USBIsochronousOutTransferResult: true, USBOutTransferResult: true, WorkerLocation: true, WorkerNavigator: true, Worklet: true, IDBCursor: true, IDBCursorWithValue: true, IDBFactory: true, IDBObservation: true, IDBObserver: true, IDBObserverChanges: true, SVGAngle: true, SVGAnimatedAngle: true, SVGAnimatedBoolean: true, SVGAnimatedEnumeration: true, SVGAnimatedInteger: true, SVGAnimatedLength: true, SVGAnimatedLengthList: true, SVGAnimatedNumber: true, SVGAnimatedNumberList: true, SVGAnimatedPreserveAspectRatio: true, SVGAnimatedRect: true, SVGAnimatedString: true, SVGAnimatedTransformList: true, SVGMatrix: true, SVGPoint: true, SVGPreserveAspectRatio: true, SVGRect: true, SVGUnitTypes: true, AudioListener: true, AudioParam: true, AudioTrack: true, AudioWorkletGlobalScope: true, AudioWorkletProcessor: true, PeriodicWave: true, ANGLEInstancedArrays: true, ANGLE_instanced_arrays: true, WebGLBuffer: true, WebGLCanvas: true, WebGLColorBufferFloat: true, WebGLCompressedTextureASTC: true, WebGLCompressedTextureATC: true, WEBGL_compressed_texture_atc: true, WebGLCompressedTextureETC1: true, WEBGL_compressed_texture_etc1: true, WebGLCompressedTextureETC: true, WebGLCompressedTexturePVRTC: true, WEBGL_compressed_texture_pvrtc: true, WebGLCompressedTextureS3TC: true, WEBGL_compressed_texture_s3tc: true, WebGLCompressedTextureS3TCsRGB: true, WebGLDebugRendererInfo: true, WEBGL_debug_renderer_info: true, WebGLDebugShaders: true, WEBGL_debug_shaders: true, WebGLDepthTexture: true, WEBGL_depth_texture: true, WebGLDrawBuffers: true, WEBGL_draw_buffers: true, EXTsRGB: true, EXT_sRGB: true, EXTBlendMinMax: true, EXT_blend_minmax: true, EXTColorBufferFloat: true, EXTColorBufferHalfFloat: true, EXTDisjointTimerQuery: true, EXTDisjointTimerQueryWebGL2: true, EXTFragDepth: true, EXT_frag_depth: true, EXTShaderTextureLOD: true, EXT_shader_texture_lod: true, EXTTextureFilterAnisotropic: true, EXT_texture_filter_anisotropic: true, WebGLFramebuffer: true, WebGLGetBufferSubDataAsync: true, WebGLLoseContext: true, WebGLExtensionLoseContext: true, WEBGL_lose_context: true, OESElementIndexUint: true, OES_element_index_uint: true, OESStandardDerivatives: true, OES_standard_derivatives: true, OESTextureFloat: true, OES_texture_float: true, OESTextureFloatLinear: true, OES_texture_float_linear: true, OESTextureHalfFloat: true, OES_texture_half_float: true, OESTextureHalfFloatLinear: true, OES_texture_half_float_linear: true, OESVertexArrayObject: true, OES_vertex_array_object: true, WebGLProgram: true, WebGLQuery: true, WebGLRenderbuffer: true, WebGLRenderingContext: true, WebGL2RenderingContext: true, WebGLSampler: true, WebGLShader: true, WebGLShaderPrecisionFormat: true, WebGLSync: true, WebGLTexture: true, WebGLTimerQueryEXT: true, WebGLTransformFeedback: true, WebGLUniformLocation: true, WebGLVertexArrayObject: true, WebGLVertexArrayObjectOES: true, WebGL2RenderingContextBase: true, ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false, HTMLAudioElement: true, HTMLBRElement: true, HTMLContentElement: true, HTMLDListElement: true, HTMLDataElement: true, HTMLDataListElement: true, HTMLDetailsElement: true, HTMLDialogElement: true, HTMLHRElement: true, HTMLHeadElement: true, HTMLHeadingElement: true, HTMLHtmlElement: true, HTMLImageElement: true, HTMLLIElement: true, HTMLLegendElement: true, HTMLLinkElement: true, HTMLMediaElement: true, HTMLMenuElement: true, HTMLMeterElement: true, HTMLModElement: true, HTMLOListElement: true, HTMLOptGroupElement: true, HTMLOptionElement: true, HTMLPictureElement: true, HTMLPreElement: true, HTMLProgressElement: true, HTMLQuoteElement: true, HTMLScriptElement: true, HTMLShadowElement: true, HTMLSourceElement: true, HTMLSpanElement: true, HTMLTableCaptionElement: true, HTMLTableCellElement: true, HTMLTableDataCellElement: true, HTMLTableHeaderCellElement: true, HTMLTableColElement: true, HTMLTimeElement: true, HTMLTitleElement: true, HTMLTrackElement: true, HTMLUListElement: true, HTMLUnknownElement: true, HTMLVideoElement: true, HTMLDirectoryElement: true, HTMLFontElement: true, HTMLFrameElement: true, HTMLFrameSetElement: true, HTMLMarqueeElement: true, HTMLElement: false, AccessibleNodeList: true, HTMLAnchorElement: true, HTMLAreaElement: true, HTMLBaseElement: true, Blob: false, Body: true, Request: true, Response: true, HTMLBodyElement: true, BroadcastChannel: true, HTMLButtonElement: true, HTMLCanvasElement: true, CanvasRenderingContext2D: true, CDATASection: true, CharacterData: true, Comment: true, ProcessingInstruction: true, Text: true, PublicKeyCredential: true, Credential: false, CredentialUserData: true, CSSKeyframesRule: true, MozCSSKeyframesRule: true, WebKitCSSKeyframesRule: true, CSSPerspective: true, CSSCharsetRule: true, CSSConditionRule: true, CSSFontFaceRule: true, CSSGroupingRule: true, CSSImportRule: true, CSSKeyframeRule: true, MozCSSKeyframeRule: true, WebKitCSSKeyframeRule: true, CSSMediaRule: true, CSSNamespaceRule: true, CSSPageRule: true, CSSStyleRule: true, CSSSupportsRule: true, CSSViewportRule: true, CSSRule: false, CSSStyleDeclaration: true, MSStyleCSSProperties: true, CSS2Properties: true, CSSStyleSheet: true, CSSImageValue: true, CSSKeywordValue: true, CSSNumericValue: true, CSSPositionValue: true, CSSResourceValue: true, CSSUnitValue: true, CSSURLImageValue: true, CSSStyleValue: false, CSSMatrixComponent: true, CSSRotation: true, CSSScale: true, CSSSkew: true, CSSTranslation: true, CSSTransformComponent: false, CSSTransformValue: true, CSSUnparsedValue: true, DataTransferItemList: true, HTMLDivElement: true, XMLDocument: true, Document: false, DOMError: true, DOMException: true, ClientRectList: true, DOMRectList: true, DOMRectReadOnly: false, DOMStringList: true, DOMTokenList: true, Element: false, HTMLEmbedElement: true, DirectoryEntry: true, webkitFileSystemDirectoryEntry: true, FileSystemDirectoryEntry: true, Entry: true, webkitFileSystemEntry: true, FileSystemEntry: true, FileEntry: true, webkitFileSystemFileEntry: true, FileSystemFileEntry: true, AbortPaymentEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, ApplicationCacheErrorEvent: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: true, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, BlobEvent: true, CanMakePaymentEvent: true, ClipboardEvent: true, CloseEvent: true, CustomEvent: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, ErrorEvent: true, ExtendableEvent: true, ExtendableMessageEvent: true, FetchEvent: true, FontFaceSetLoadEvent: true, ForeignFetchEvent: true, GamepadEvent: true, HashChangeEvent: true, InstallEvent: true, MediaEncryptedEvent: true, MediaKeyMessageEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MessageEvent: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MutationEvent: true, NotificationEvent: true, PageTransitionEvent: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PopStateEvent: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, PromiseRejectionEvent: true, PushEvent: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, StorageEvent: true, SyncEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, MojoInterfaceRequestEvent: true, USBConnectionEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, Event: false, InputEvent: false, SubmitEvent: false, AbsoluteOrientationSensor: true, Accelerometer: true, AccessibleNode: true, AmbientLightSensor: true, Animation: true, ApplicationCache: true, DOMApplicationCache: true, OfflineResourceList: true, BackgroundFetchRegistration: true, BatteryManager: true, CanvasCaptureMediaStreamTrack: true, EventSource: true, FileReader: true, FontFaceSet: true, Gyroscope: true, LinearAccelerationSensor: true, Magnetometer: true, MediaDevices: true, MediaRecorder: true, MediaSource: true, MediaStream: true, MediaStreamTrack: true, MIDIAccess: true, NetworkInformation: true, Notification: true, OrientationSensor: true, PaymentRequest: true, Performance: true, PermissionStatus: true, PresentationAvailability: true, PresentationConnection: true, PresentationConnectionList: true, PresentationRequest: true, RelativeOrientationSensor: true, RemotePlayback: true, RTCDataChannel: true, DataChannel: true, RTCDTMFSender: true, RTCPeerConnection: true, webkitRTCPeerConnection: true, mozRTCPeerConnection: true, Sensor: true, ServiceWorker: true, ServiceWorkerContainer: true, ServiceWorkerRegistration: true, SharedWorker: true, SpeechRecognition: true, SpeechSynthesis: true, SpeechSynthesisUtterance: true, VR: true, VRDevice: true, VRDisplay: true, VRSession: true, VisualViewport: true, WebSocket: true, Worker: true, WorkerPerformance: true, BluetoothDevice: true, BluetoothRemoteGATTCharacteristic: true, Clipboard: true, MojoInterfaceInterceptor: true, USB: true, IDBOpenDBRequest: true, IDBVersionChangeRequest: true, IDBRequest: true, IDBTransaction: true, AnalyserNode: true, RealtimeAnalyserNode: true, AudioBufferSourceNode: true, AudioDestinationNode: true, AudioNode: true, AudioScheduledSourceNode: true, AudioWorkletNode: true, BiquadFilterNode: true, ChannelMergerNode: true, AudioChannelMerger: true, ChannelSplitterNode: true, AudioChannelSplitter: true, ConstantSourceNode: true, ConvolverNode: true, DelayNode: true, DynamicsCompressorNode: true, GainNode: true, AudioGainNode: true, IIRFilterNode: true, MediaElementAudioSourceNode: true, MediaStreamAudioDestinationNode: true, MediaStreamAudioSourceNode: true, OscillatorNode: true, Oscillator: true, PannerNode: true, AudioPannerNode: true, webkitAudioPannerNode: true, ScriptProcessorNode: true, JavaScriptAudioNode: true, StereoPannerNode: true, WaveShaperNode: true, EventTarget: false, FederatedCredential: true, HTMLFieldSetElement: true, File: true, FileList: true, DOMFileSystem: true, WebKitFileSystem: true, webkitFileSystem: true, FileSystem: true, FileWriter: true, FontFace: true, HTMLFormElement: true, Gamepad: true, History: true, HTMLCollection: true, HTMLFormControlsCollection: true, HTMLOptionsCollection: true, HTMLDocument: true, XMLHttpRequest: true, XMLHttpRequestUpload: true, XMLHttpRequestEventTarget: false, HTMLIFrameElement: true, ImageData: true, HTMLInputElement: true, KeyboardEvent: true, HTMLLabelElement: true, Location: true, HTMLMapElement: true, MediaKeySession: true, MediaList: true, MediaQueryList: true, MediaQueryListEvent: true, MessagePort: true, HTMLMetaElement: true, MIDIInputMap: true, MIDIOutputMap: true, MIDIInput: true, MIDIOutput: true, MIDIPort: true, MimeType: true, MimeTypeArray: true, MouseEvent: false, DragEvent: false, MutationObserver: true, WebKitMutationObserver: true, MutationRecord: true, NavigatorUserMediaError: true, DocumentFragment: true, ShadowRoot: true, DocumentType: true, Node: false, NodeList: true, RadioNodeList: true, HTMLObjectElement: true, OffscreenCanvas: true, HTMLOutputElement: true, OverconstrainedError: true, HTMLParagraphElement: true, HTMLParamElement: true, PasswordCredential: true, PerformanceEntry: true, PerformanceLongTaskTiming: true, PerformanceMark: true, PerformanceMeasure: true, PerformanceNavigationTiming: true, PerformancePaintTiming: true, PerformanceResourceTiming: true, TaskAttributionTiming: true, PerformanceServerTiming: true, Plugin: true, PluginArray: true, PointerEvent: true, ProgressEvent: true, ResourceProgressEvent: true, RTCStatsReport: true, ScreenOrientation: true, HTMLSelectElement: true, SharedWorkerGlobalScope: true, HTMLSlotElement: true, SourceBuffer: true, SourceBufferList: true, SpeechGrammar: true, SpeechGrammarList: true, SpeechRecognitionResult: true, SpeechSynthesisEvent: true, SpeechSynthesisVoice: true, Storage: true, HTMLStyleElement: true, StyleSheet: false, HTMLTableElement: true, HTMLTableRowElement: true, HTMLTableSectionElement: true, HTMLTemplateElement: true, HTMLTextAreaElement: true, TextTrack: true, TextTrackCue: true, VTTCue: true, TextTrackCueList: true, TextTrackList: true, TimeRanges: true, Touch: true, TouchEvent: true, TouchList: true, TrackDefaultList: true, CompositionEvent: true, FocusEvent: true, TextEvent: true, UIEvent: false, URL: true, VideoTrackList: true, WheelEvent: true, Window: true, DOMWindow: true, DedicatedWorkerGlobalScope: true, ServiceWorkerGlobalScope: true, WorkerGlobalScope: false, Attr: true, CSSRuleList: true, ClientRect: true, DOMRect: true, GamepadList: true, NamedNodeMap: true, MozNamedAttrMap: true, SpeechRecognitionResultList: true, StyleSheetList: true, IDBDatabase: true, IDBIndex: true, IDBKeyRange: true, IDBObjectStore: true, IDBVersionChangeEvent: true, SVGClipPathElement: true, SVGDefsElement: true, SVGCircleElement: true, SVGEllipseElement: true, SVGLineElement: true, SVGPolygonElement: true, SVGPolylineElement: true, SVGRectElement: true, SVGGeometryElement: false, SVGAElement: true, SVGForeignObjectElement: true, SVGGElement: true, SVGImageElement: true, SVGSwitchElement: true, SVGTSpanElement: true, SVGTextContentElement: true, SVGTextElement: true, SVGTextPathElement: true, SVGTextPositioningElement: true, SVGUseElement: true, SVGGraphicsElement: false, SVGLength: true, SVGLengthList: true, SVGNumber: true, SVGNumberList: true, SVGPathElement: true, SVGPointList: true, SVGScriptElement: true, SVGStringList: true, SVGAnimateElement: true, SVGAnimateMotionElement: true, SVGAnimateTransformElement: true, SVGAnimationElement: true, SVGDescElement: true, SVGDiscardElement: true, SVGFEBlendElement: true, SVGFEColorMatrixElement: true, SVGFEComponentTransferElement: true, SVGFECompositeElement: true, SVGFEConvolveMatrixElement: true, SVGFEDiffuseLightingElement: true, SVGFEDisplacementMapElement: true, SVGFEDistantLightElement: true, SVGFEFloodElement: true, SVGFEFuncAElement: true, SVGFEFuncBElement: true, SVGFEFuncGElement: true, SVGFEFuncRElement: true, SVGFEGaussianBlurElement: true, SVGFEImageElement: true, SVGFEMergeElement: true, SVGFEMergeNodeElement: true, SVGFEMorphologyElement: true, SVGFEOffsetElement: true, SVGFEPointLightElement: true, SVGFESpecularLightingElement: true, SVGFESpotLightElement: true, SVGFETileElement: true, SVGFETurbulenceElement: true, SVGFilterElement: true, SVGLinearGradientElement: true, SVGMarkerElement: true, SVGMaskElement: true, SVGMetadataElement: true, SVGPatternElement: true, SVGRadialGradientElement: true, SVGSetElement: true, SVGStopElement: true, SVGStyleElement: true, SVGSymbolElement: true, SVGTitleElement: true, SVGViewElement: true, SVGGradientElement: true, SVGComponentTransferFunctionElement: true, SVGFEDropShadowElement: true, SVGMPathElement: true, SVGElement: false, SVGSVGElement: true, SVGTransform: true, SVGTransformList: true, AudioBuffer: true, AudioParamMap: true, AudioTrackList: true, AudioContext: true, webkitAudioContext: true, BaseAudioContext: false, OfflineAudioContext: true, WebGLActiveInfo: true});
    A.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
    A._SourceBufferList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    A._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
    A._TextTrackList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    A._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
  })();
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$1$0 = function() {
    return this();
  };
  Function.prototype.call$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  Function.prototype.call$9 = function(a, b, c, d, e, f, g, h, i) {
    return this(a, b, c, d, e, f, g, h, i);
  };
  Function.prototype.call$7 = function(a, b, c, d, e, f, g) {
    return this(a, b, c, d, e, f, g);
  };
  Function.prototype.call$6 = function(a, b, c, d, e, f) {
    return this(a, b, c, d, e, f);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = A.main0;
    if (typeof dartMainRunner === "function")
      dartMainRunner(callMain, []);
    else
      callMain([]);
  });
})();
